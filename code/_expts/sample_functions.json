[
  "public static String compressBad (String str) {\n    String compressedString = \"\";\n    if (str != null && str.length () > 0) {\n        int countConsecutive = 1;\n        char prevChar = str.charAt (0);\n        for (int i = 1;\n        i < str.length (); i ++) {\n            if (str.charAt (i) != prevChar) {\n                compressedString += String.valueOf (prevChar) + countConsecutive;\n                prevChar = str.charAt (i);\n                countConsecutive = 1;\n                continue;\n            }\n            countConsecutive ++;\n        }\n        compressedString += String.valueOf (prevChar) + countConsecutive;\n    }\n    return compressedString;\n}",
  "public static String compressBad (String str) {\n    int countConsecutive = 0;\n    String compressedString = \"\";\n    for (int i = 0;\n    i < str.length (); i ++) {\n        countConsecutive ++;\n        if (str.length () == (i + 1)) {\n            compressedString += \"\" + str.charAt (i) + countConsecutive;\n            countConsecutive = 0;\n            break;\n        } else if (str.charAt (i) != str.charAt (i + 1)) {\n            compressedString += \"\" + str.charAt (i) + countConsecutive;\n            countConsecutive = 0;\n        }\n    }\n    return compressedString;\n}",
  "public static String compressBad (String str) {\n    if (str.length () == 1) return str + \"1\";\n    int countConsecutive = 0;\n    String compressedString = \"\";\n    for (int i = 0;\n    i < str.length (); i ++) {\n        if (i > 0) {\n            countConsecutive ++;\n            if (str.charAt (i) != str.charAt (i - 1)) {\n                compressedString += \"\" + str.charAt (i - 1) + countConsecutive;\n                countConsecutive = 0;\n            }\n            if (i == str.length () - 1) {\n                countConsecutive ++;\n                compressedString += \"\" + str.charAt (i) + countConsecutive;\n            }\n        }\n    }\n    return compressedString;\n}",
  "public static final int gcd (int a, int b) {\n    if (a == Integer.MIN_VALUE) {\n        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException (\"gcd() is greater than Integer.MAX_VALUE\");\n        return 1 << Integer.numberOfTrailingZeros (Math.abs (b));\n    }\n    if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));\n    a = Math.abs (a);\n    b = Math.abs (b);\n    if (a == 0) return b;\n    if (b == 0) return a;\n    int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);\n    a>>= factorsOfTwoInA;\n    b>>= factorsOfTwoInB;\n    while (a != b) {\n        if (a > b) {\n            a = (a - b);\n            a>>= Integer.numberOfTrailingZeros (a);\n        } else {\n            b = (b - a);\n            b>>= Integer.numberOfTrailingZeros (b);\n        }\n    }\n    return a << commonFactorsOfTwo;\n}",
  "public int solution (int N) {\n    String binary = Integer.toString (N, 2);\n    int largestGap = 0;\n    for (int i = 1, gap = 0;\n    i < binary.length (); i ++) {\n        while (i < binary.length () && binary.charAt (i) == '0') {\n            i ++;\n            gap ++;\n        }\n        if (gap > largestGap && i < binary.length ()) {\n            largestGap = gap;\n        }\n        gap = 0;\n    }\n    return largestGap;\n}",
  "int solution (int N) {\n    int tempGap = 0, gap = 0;\n    String binaryString = Integer.toBinaryString (N);\n    int i = 0;\n    while (i < binaryString.length ()) {\n        if (binaryString.charAt (i) == '1') {\n            ++ i;\n            tempGap = 0;\n            while (i < binaryString.length () && binaryString.charAt (i) != '1') {\n                ++ i;\n                tempGap ++;\n            }\n            if (i >= binaryString.length ()) {\n                tempGap = 0;\n            }\n        } else {\n            ++ i;\n        }\n        if (tempGap > gap) {\n            gap = tempGap;\n        }\n    }\n    return gap;\n}",
  "public int solution (int N) {\n    int result = 0;\n    while (N > 0) {\n        if ((N & 1) == 1) {\n            int temp = 0;\n            while ((N>>= 1) > 0 && ((N & 1) != 1)) {\n                temp ++;\n            }\n            result = Math.max (result, temp);\n        } else {\n            N>>= 1;\n        }\n    }\n    return result;\n}",
  "public static boolean isPrime (int n) {\n    int i;\n    for (i = 2; i * i <= n; i ++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
  "public static String translateToEnglish (String phrase) {\n    if (phrase == null) {\n        return null;\n    }\n    String finished = phrase.replace ('4', 'a').replace ('1', 'l').replace ('2', 'z').replace ('5', 's').replace ('8', 'b').replace ('0', 'o').replace ('7', 't').replace (\"|_|\", \"u\").replace (\"3\", \"e\");\n    finished = finished.replace (\" e \", \" 3 \");\n    if (finished.startsWith (\"e \")) {\n        finished = \"3 \" + finished.substring (2);\n    }\n    if (finished.endsWith (\" e\")) {\n        finished = finished.substring (0, finished.length () - 2) + \" 3\";\n    }\n    return finished;\n}",
  "public static void CountbyChar (String s) {\n    int [] arr = new int [256];\n    for (char c : s.toCharArray ()) {\n        if (c < 256) {\n            arr [c] ++;\n        }\n    }\n    for (int i = 0;\n    i != 256; i ++) {\n        if (arr [i] != 0) {\n            System.out.print ((char) i);\n            System.out.print (\" : \");\n            System.out.println (arr [i]);\n        }\n    }\n}",
  "public static String shuffle (String text) {\n    char [] characters = text.toCharArray ();\n    for (int i = 0;\n    i < characters.length; i ++) {\n        int randomIndex = (int) (Math.random () * characters.length);\n        char temp = characters [i];\n        characters [i] = characters [randomIndex];\n        characters [randomIndex] = temp;\n    }\n    return new String (characters);\n}",
  "public static String shuffle (String s) {\n    String shuffledString = \"\";\n    while (s.length () != 0) {\n        int index = (int) Math.floor (Math.random () * s.length ());\n        char c = s.charAt (index);\n        s = s.substring (0, index) + s.substring (index + 1);\n        shuffledString += c;\n    }\n    return shuffledString;\n}",
  "static String shuffle (String text) {\n    if (text.length () <= 1) return text;\n    int split = text.length () / 2;\n    String temp1 = shuffle (text.substring (0, split));\n    String temp2 = shuffle (text.substring (split));\n    if (Math.random () > 0.5) return temp1 + temp2;\n    else return temp2 + temp1;\n}",
  "public static int [] createArray (int size) {\n    int [] array = new int [size];\n    int half = (size / 2) + (size % 2);\n    int index = half;\n    int value = 0;\n    for (int i = 0;\n    i < size; i ++) {\n        if (i == index) {\n            half = (half / 2) + (half % 2);\n            index += half;\n            value ++;\n        }\n        array [i] = value;\n    }\n    return array;\n}",
  "static int [] createArray (int size) {\n    int [] result = new int [size];\n    int limit = (size + 1) / 2;\n    int start = 0, value = 0, idx = 0;\n    do {\n        for (int i = start;\n        i < start + limit && idx < size; ++ i) result [idx ++] = value;\n        start += limit;\n        limit = (limit + 1) / 2;\n        ++ value;\n    } while (idx < size);\n    return result;\n}",
  "public static String center (String text, int len) {\n    if (len <= text.length ()) return text.substring (0, len);\n    int before = (len - text.length ()) / 2;\n    if (before == 0) return String.format (\"%-\" + len + \"s\", text);\n    int rest = len - before;\n    return String.format (\"%\" + before + \"s%-\" + rest + \"s\", \"\", text);\n}",
  "public static String getLongestSubstring (String s) {\n    int length = 1;\n    String longestString = \"\";\n    for (int i = 0;\n    i < s.length (); i ++) {\n        StringBuilder str = new StringBuilder ();\n        str.append (s.charAt (i));\n        for (int j = i + 1;\n        j < s.length (); j ++) {\n            if (s.charAt (i) == s.charAt (j)) {\n                str.append (s.charAt (j));\n            } else {\n                break;\n            }\n        }\n        if (length < str.length ()) {\n            length = str.length ();\n            longestString = str.toString ();\n        }\n    }\n    return longestString;\n}",
  "public String getLongestSubstring (String s) {\n    if (s.length () == 0) return null;\n    char currentChar = s.charAt (0);\n    String longestString = \"\" + currentChar;\n    String runningString = \"\" + currentChar;\n    int currentLongestLength = 1;\n    for (int i = 1;\n    i < s.length (); i ++) {\n        if (s.charAt (i) == currentChar) {\n            runningString = runningString + currentChar;\n            if (runningString.length () > longestString.length ()) {\n                currentLongestLength ++;\n                longestString = runningString;\n            }\n        } else {\n            runningString = \"\" + s.charAt (i);\n        }\n    }\n    return longestString;\n}",
  "boolean isPrime (int x) {\n    for (int i = 2;\n    i * i <= x; i ++) {\n        if (x % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
  "public void refund (int balance) {\n    while (balance >= 10) {\n        System.out.println (\"Balance: \u00a3\" + balance);\n        balance -= 10;\n    }\n    while (balance >= 0) {\n        System.out.println (\"Balance: \u00a3\" + balance);\n        balance -= 1;\n    }\n}",
  "static String encrypt (String data) {\n    String returned = new String (\"\");\n    for (char h : data.toCharArray ()) {\n        if (h == 'a') returned += \" a', 'c\";\n        if (h == 'b') returned += \"d\";\n        if (h == 'c') returned += \"e\";\n        if (h == 'd') returned += \"f\";\n        if (h == 'e') returned += \"g\";\n        if (h == 'f') returned += \"h\";\n        if (h == 'g') returned += \"i\";\n        if (h == 'h') returned += \"j\";\n        if (h == 'i') returned += \"k\";\n        if (h == 'j') returned += \"l\";\n        if (h == 'k') returned += \"m\";\n        if (h == 'l') returned += \"n\";\n        if (h == 'm') returned += \"o\";\n        if (h == 'n') returned += \"p\";\n        if (h == 'o') returned += \"q\";\n        if (h == 'p') returned += \"r\";\n        if (h == 'q') returned += \"s\";\n        if (h == 'r') returned += \"t\";\n        if (h == 's') returned += \"u\";\n        if (h == 't') returned += \"v\";\n        if (h == 'u') returned += \"w\";\n        if (h == 'v') returned += \"x\";\n        if (h == 'w') returned += \"y\";\n        if (h == 'x') returned += \"z\";\n        if (h == 'y') returned += \"a\";\n        if (h == 'z') returned += \"b\";\n    }\n    return returned;\n}",
  "public int sqrt (int x) {\n    if (x == 0 || x == 1) {\n        return x;\n    }\n    int start = 1, end = x / 2;\n    while (start <= end) {\n        int mid = start + (end - start) / 2;\n        if (mid == x / mid) {\n            return mid;\n        }\n        if (mid < x / mid) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return start - 1;\n}",
  "public String longestSequenceOfChar (String str) {\n    String interimresult = \"\";\n    String result = \"\";\n    for (int i = 0;\n    i < str.length (); i ++) {\n        char ch = str.charAt (i);\n        interimresult += ch;\n        for (int j = i + 1;\n        j < str.length (); j ++) {\n            char ch1 = str.charAt (j);\n            if (ch != ch1) {\n                break;\n            }\n            interimresult += ch;\n        }\n        if (interimresult.length () > result.length ()) result = interimresult;\n        interimresult = \"\";\n    }\n    return result;\n}",
  "public String longestSequenceOfChar (String str) {\n    String result = \"\";\n    for (int i = 0;\n    i < str.length (); i ++) {\n        int j = i;\n        while (j < str.length () && str.charAt (j) == str.charAt (i)) {\n            j ++;\n        }\n        if (j - i > result.length ()) {\n            result = str.substring (i, j);\n        }\n    }\n    return result;\n}",
  "public String removeAdjacentDuplicates (String s) {\n    StringBuilder resultBuilder = new StringBuilder ();\n    char previous = s.charAt (0);\n    resultBuilder.append (previous);\n    for (int i = 1;\n    i < s.length (); i ++) {\n        char current = s.charAt (i);\n        if (previous != current) {\n            resultBuilder.append (current);\n            previous = current;\n        }\n    }\n    return resultBuilder.toString ();\n}",
  "public static String numLetters (String s) {\n    int [] count = new int [26];\n    for (int i = 0;\n    i < s.length (); i ++) {\n        char c = s.charAt (i);\n        count [(int) (c - 'a')] ++;\n    }\n    String ans = \"\";\n    for (int i = 0;\n    i < 26; i ++) {\n        if (count [i] != 0) {\n            ans += String.valueOf (count [i]) + (char) (i + 'a');\n        }\n    }\n    return ans;\n}",
  "public static String startOz (String str) {\n    if (str.length () >= 2 && str.substring (0, 2).equals (\"oz\")) {\n        return \"oz\";\n    } else if (str.length () >= 2 && str.substring (1, 2).equals (\"z\")) {\n        return \"z\";\n    } else if (str.length () >= 2 && str.substring (0, 1).equals (\"o\")) {\n        return \"o\";\n    }\n    return \"\";\n}",
  "public String startOz (String str) {\n    int len = str.length ();\n    if (len < 1) return new String (\"\");\n    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String (\"oz\");\n    if (str.charAt (0) == 'o') return new String (\"o\");\n    if (str.charAt (1) == 'z') return new String (\"z\");\n    return new String (\"\");\n}",
  "public String startOz (String str) {\n    if (str != null) {\n        char [] arr = str.toLowerCase ().toCharArray ();\n        boolean oTest = arr.length >= 1 && arr [0] == 'o';\n        boolean zTest = arr.length >= 2 && arr [1] == 'z';\n        if (oTest && zTest) {\n            return \"oz\";\n        } else if (oTest) {\n            return \"o\";\n        } else if (zTest) {\n            return \"z\";\n        }\n    }\n    return \"\";\n}",
  "public void run () {\n    try {\n        for (int i = 0;\n        i < 2; i ++) {\n            System.out.println (\"tic\");\n        }\n    } catch (Exception e) {\n        e.getStackTrace ();\n    }\n}",
  "public void run () {\n    try {\n        for (int i = 0;\n        i < 2; i ++) {\n            System.out.println (\"tac\");\n        }\n    } catch (Exception e) {\n        e.getStackTrace ();\n    }\n}",
  "public void run () {\n    try {\n        for (int i = 0;\n        i < 2; i ++) {\n            System.out.println (\"toe\");\n        }\n    } catch (Exception e) {\n        e.getStackTrace ();\n    }\n}",
  "public static boolean isPrime (int num) {\n    for (int i = 2;\n    i <= num / i; i ++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return num > 1;\n}",
  "boolean isPalindrome (String s) {\n    int n = s.length ();\n    for (int i = 0;\n    i < (n / 2); ++ i) {\n        if (s.charAt (i) != s.charAt (n - i - 1)) {\n            return false;\n        }\n    }\n    return true;\n}",
  "public boolean isPalindrome (String original) {\n    int i = original.length () - 1;\n    int j = 0;\n    while (i > j) {\n        if (original.charAt (i) != original.charAt (j)) {\n            return false;\n        }\n        i --;\n        j ++;\n    }\n    return true;\n}",
  "private String capitalize (String s) {\n    if (s == null || s.length () == 0) {\n        return \"\";\n    }\n    char first = s.charAt (0);\n    if (Character.isUpperCase (first)) {\n        return s;\n    } else {\n        return Character.toUpperCase (first) + s.substring (1);\n    }\n}",
  "static String removeDuplicates (String s) {\n    StringBuilder noDupes = new StringBuilder ();\n    for (int i = 0;\n    i < s.length (); i ++) {\n        String si = s.substring (i, i + 1);\n        if (noDupes.indexOf (si) == - 1) {\n            noDupes.append (si);\n        }\n    }\n    return noDupes.toString ();\n}",
  "private static int pow (int x, int n) {\n    if (n == 0) return 1;\n    if (n == 1) return x;\n    if (n < 0) {\n        if (x == 1 || (x == 2 && n == - 1)) return 1;\n        else return 0;\n    }\n    if ((n & 1) == 0) {\n        long num = pow (x * x, n / 2);\n        if (num > Integer.MAX_VALUE) return Integer.MAX_VALUE;\n        return (int) num;\n    } else {\n        long num = x * pow (x * x, n / 2);\n        if (num > Integer.MAX_VALUE) return Integer.MAX_VALUE;\n        return (int) num;\n    }\n}",
  "int pow (int a, int p) {\n    int res = 1;\n    int i1 = 31 - Integer.numberOfLeadingZeros (p);\n    for (int i = i1;\n    i >= 0; -- i) {\n        res *= res;\n        if ((p & (1 << i)) > 0) res *= a;\n    }\n    return res;\n}",
  "public static int evenDigits (int n) {\n    int res = 0;\n    int mag = 0;\n    while (n > 9) {\n        int digit = n % 10;\n        n /= 10;\n        if (digit % 2 == 0) {\n            res += Math.pow (10, mag) * digit;\n            mag ++;\n        }\n    }\n    return res;\n}",
  "public static int evenDigits (int n) {\n    if ((n & 1) != 0) {\n        return evenDigits (n / 10);\n    }\n    if (n < 10) {\n        return n;\n    }\n    return n % 10 + evenDigits (n / 10) * 10;\n}",
  "private int count8 (int n) {\n    String nString = Integer.toString (n);\n    boolean isPrevChar8 = false;\n    int total = 0;\n    for (int i = 0;\n    i < nString.length (); i ++) {\n        char nextChar = nString.charAt (i);\n        if (nextChar == '8') {\n            total += (isPrevChar8 ? 2 : 1);\n            isPrevChar8 = true;\n        } else {\n            isPrevChar8 = false;\n        }\n    }\n    return total;\n}",
  "public static int count8 (int num) {\n    int count = 0;\n    boolean doubl = false;\n    while (true) {\n        int n = num % 10;\n        num = num / 10;\n        if (n == 8) {\n            if (doubl) {\n                count = count + 2;\n            } else {\n                count ++;\n            }\n            doubl = true;\n        } else {\n            doubl = false;\n        }\n        if (num == 0) break;\n    }\n    return count;\n}",
  "public static int countLines (String str) {\n    if (str == null || str.length () == 0) return 0;\n    int lines = 1;\n    int len = str.length ();\n    for (int pos = 0;\n    pos < len; pos ++) {\n        char c = str.charAt (pos);\n        if (c == '\\r') {\n            lines ++;\n            if (pos + 1 < len && str.charAt (pos + 1) == '\\n') pos ++;\n        } else if (c == '\\n') {\n            lines ++;\n        }\n    }\n    return lines;\n}",
  "public static int countLines (String str) {\n    if (str == null || str.isEmpty ()) {\n        return 0;\n    }\n    int lines = 1;\n    int pos = 0;\n    while ((pos = str.indexOf (\"\\n\", pos) + 1) != 0) {\n        lines ++;\n    }\n    return lines;\n}",
  "static String decrypt (String cipher) {\n    String [] cipher_char_codes = cipher.split (\"#\");\n    StringBuilder message = new StringBuilder ();\n    for (String code : cipher_char_codes) {\n        int index = Integer.parseInt (code);\n        if (index > 26) {\n            char [] pair = code.toCharArray ();\n            for (int i = 0;\n            i < pair.length; i ++) {\n                int x = Integer.parseInt (\"\" + code.charAt (i));\n                message.append ((char) ('a' + ((x - 1) % 26)));\n            }\n        } else {\n            message.append ((char) ('a' + ((index - 1) % 26)));\n        }\n    }\n    return message.toString ();\n}",
  "static String transpose (String s) {\n    char [] c = s.toCharArray ();\n    int n = (int) Math.sqrt (s.length ());\n    for (int i = 0;\n    i < n; ++ i) {\n        for (int j = i + 1;\n        j < n; ++ j) {\n            char h = c [i * n + j];\n            c [i * n + j] = c [j * n + i];\n            c [j * n + i] = h;\n        }\n    }\n    return new String (c);\n}",
  "private static float getRandomNumberBetween (float numberOne, float numberTwo) throws Exception {\n    if (numberOne == numberTwo) {\n        throw new Exception (\"Both the numbers can not be equal\");\n    }\n    float rand = (float) Math.random ();\n    float highRange = Math.max (numberOne, numberTwo);\n    float lowRange = Math.min (numberOne, numberTwo);\n    float lowRand = (float) Math.floor (rand - 1);\n    float highRand = (float) Math.ceil (rand + 1);\n    float genRand = (highRange - lowRange) * ((rand - lowRand) / (highRand - lowRand)) + lowRange;\n    return genRand;\n}",
  "static String compress (String str) {\n    StringBuilder stringBuilder = new StringBuilder ();\n    char [] charArray = str.toCharArray ();\n    int count = 1;\n    char lastChar = 0;\n    char nextChar = 0;\n    lastChar = charArray [0];\n    for (int i = 1;\n    i < charArray.length; i ++) {\n        nextChar = charArray [i];\n        if (lastChar == nextChar) {\n            count ++;\n        } else {\n            stringBuilder.append (count).append (lastChar);\n            count = 1;\n            lastChar = nextChar;\n        }\n    }\n    stringBuilder.append (count).append (lastChar);\n    String compressed = stringBuilder.toString ();\n    return compressed;\n}",
  "public static String camelCaser (String str) {\n    char [] strChr = str.toCharArray ();\n    strChr [0] = Character.toUpperCase (strChr [0]);\n    for (int i = 0;\n    i < strChr.length; i ++) if (strChr [i] == '_') strChr [i + 1] = Character.toUpperCase (strChr [i + 1]);\n    String reply = new String (strChr);\n    reply = reply.replace (\"_\", \"\");\n    return reply;\n}",
  "public static String camelCaser (String str) {\n    String [] words = str.split (\"_\");\n    String res = \"\";\n    for (String word : words) {\n        if (! word.isEmpty ()) {\n            res += Character.toUpperCase (word.charAt (0));\n            if (word.length () > 1) {\n                res += word.substring (1);\n            }\n        }\n    }\n    return res;\n}",
  "public static int loneSum (int a, int b, int c) {\n    if (a == b && b == c) {\n        a = 0;\n        b = 0;\n        c = 0;\n    }\n    if (a == b) {\n        a = 0;\n        b = 0;\n    }\n    if (a == c) {\n        a = 0;\n        c = 0;\n    }\n    if (b == c) {\n        b = 0;\n        c = 0;\n    }\n    return a + b + c;\n}",
  "public int loneSum (int a, int b, int c) {\n    int sum = 0;\n    boolean ab = a != b;\n    boolean ac = a != c;\n    boolean bc = b != c;\n    if (ab && ac) sum += a;\n    if (ab && bc) sum += b;\n    if (bc && ac) sum += c;\n    return sum;\n}",
  "private String capitalizer (String word) {\n    String [] words = word.split (\" \");\n    StringBuilder sb = new StringBuilder ();\n    if (words [0].length () > 0) {\n        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());\n        for (int i = 1;\n        i < words.length; i ++) {\n            sb.append (\" \");\n            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());\n        }\n    }\n    return sb.toString ();\n}",
  "public int maxBlock (String str) {\n    int max = 0;\n    int count = 1;\n    char o = ' ';\n    for (int i = 0;\n    i < str.length (); i ++) {\n        char c = str.charAt (i);\n        if (c == o) {\n            count ++;\n            if (count > max) {\n                max = count;\n            }\n        } else {\n            count = 1;\n            if (count > max) {\n                max = count;\n            }\n        }\n        o = c;\n    }\n    return max;\n}",
  "public static int maxBlock (String str) {\n    int maxCounter = 1;\n    int counter = 1;\n    if (str.length () == 0) {\n        return 0;\n    }\n    for (int i = 1;\n    i < str.length (); i ++) {\n        if (str.charAt (i - 1) == str.charAt (i)) {\n            counter ++;\n        } else {\n            if (counter > maxCounter) {\n                maxCounter = counter;\n            }\n            counter = 1;\n        }\n    }\n    return Math.max (maxCounter, counter);\n}",
  "public static int TestTryFinallyBlock () {\n    int i = 0;\n    try {\n        i = 10;\n        return i;\n    } finally {\n        i = 40;\n        System.out.println (\"local: \" + i);\n    }\n}"
]

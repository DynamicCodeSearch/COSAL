### Py Tokens: sort, map, upper, float, upp, len, pop, readline, append, low, lower, range, split, infile, eff, allx 

### Py functions

def func_5a323d10043f4c39b2137422dba67d1b(L, Low, U, i, infile):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Eff

def func_141380ec836248f3b103f4de3c125c47(L, Low, U, i, infile):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upp

def func_bad8613f20d047cab845bc479ed2d307(L, U, i, infile):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX

def func_32e3dc4487ce448483b26c8254acf2bd(L, Low, U, i, infile):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upp

def func_45b08322172d446dbf2d24a36d2a4318(L, Low, U, i, infile):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Low

*********************************

#### Score: 9.82415


#### Java Tokens: area, len, low, upper 

public static double func_b5fde597de7944ecba1ad3edaf9525b5(int w, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
return area;
}


public static double func_cd3e869e391a46a8b0bc42288a030043(int w, int g, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return area;
}


public static double func_19bd7e074d0f4f9e90b2ec34ca11e5d0(int w, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return area;
}


*********************************

#### Score: 8.72450


#### Java Tokens: next, len, nextint, low, upper, int 

public static double[] func_8d4ff4455e5b47bba21b7f724ad41648(int w, int u, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
return len;
}


public static double[] func_64cbd14fc4ad4203be19962e29175378(int w, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
return upper;
}


public static int func_445d8d9ad976419fba84bbfd696c60d1(int w, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
return y0;
}


*********************************

#### Score: 8.72450


#### Java Tokens: next, nextint, len, low, upper, int 

public static double[] func_de89deb1e582437baa8fbcb2f223e38e(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
return low;
}


public static double[] func_2bdd283665a8459db596c8e6f08444a8(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
return upper;
}


public static int func_f9a45fc77db6480c8a76cfe722c4225e(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
return x0;
}


*********************************

#### Score: 8.26592


#### Java Tokens: next, area, len, nextint, low, upper, int 

public static int func_f77e29be8a654ebd85b5e2956a38237f(int w, int u, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return y0;
}


public static double[] func_0eb61ff98f6141588040786fbeed7c43(int w, int u, int g, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return low;
}


public static double[] func_d18824003133487c894f8c4386de0d5b(int w, int u, int g, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return len;
}


*********************************

#### Score: 8.26592


#### Java Tokens: next, area, nextint, len, low, upper, int 

public static double[] func_77705e92d0cf4aebb8bdd559140c5c1e(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return upper;
}


public static double func_3f99026667664befbacbe6c7329419e3(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
return area;
}


public static double[] func_36137cf118b847178c9e44df9b87f3d9(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
return upper;
}


*********************************

#### Score: 7.98387


#### Java Tokens: len, low 

public static double[] func_9795954ed1194cee863f645da696bf29(int w) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
return len;
}


public static double[] func_fc4234d61fbe43bb9342ba8b9e2627f9(int w) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
return low;
}


*********************************

#### Score: 7.85542


#### Java Tokens: next, println, system, nextint, len, low, upper, int 

public static int func_2a0c81f6de564a5696bead88b85c84ba(int t, int w, int l, Scanner in) { 
 int u = in.nextInt();
int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
return x0;
}


public static int func_964ffd71f61d435ebed2a2982f93c02a(int t, Scanner in) { 
 int w = in.nextInt();
int l = in.nextInt();
int u = in.nextInt();
int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
return g;
}


public static int func_1e2c1e3df9b643dd9334a23ff39fe34d(int t, int w, Scanner in) { 
 int l = in.nextInt();
int u = in.nextInt();
int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
return x0;
}


*********************************

#### Score: 7.48580


#### Java Tokens: next, area, println, system, nextint, len, low, upper, int 

public static int func_1b90956bc8b24238bbfee17f8665bfbc(int t, int w, int u, int l, Scanner in) { 
 int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return g;
}


public static int func_03ebdc7f22b1404e8b855f0171a5e6aa(int t, int w, int l, Scanner in) { 
 int u = in.nextInt();
int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return u;
}


public static int func_82e3142c4e5b48398631c25082609c8a(int t, int w, int l, Scanner in) { 
 int u = in.nextInt();
int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return u;
}


*********************************

#### Score: 7.15126


#### Java Tokens: next, area, println, system, nextint, len, low, upper, int, case 

public static double[] func_9c93bcebb0d84825a4e03fcab34eeb0e(int t, int w, PrintWriter out, Scanner in) { 
 int l = in.nextInt();
int u = in.nextInt();
int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
out.println("Case #" + (t + 1) + ":");
return low;
}


public static double func_7ab6648992cd46508c7cca9507543bb0(int t, int w, PrintWriter out, Scanner in) { 
 int l = in.nextInt();
int u = in.nextInt();
int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
out.println("Case #" + (t + 1) + ":");
return area;
}


public static int func_77fe1bf8f2164ad9babf9a1aaeee1814(int t, int w, PrintWriter out, Scanner in) { 
 int l = in.nextInt();
int u = in.nextInt();
int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
out.println("Case #" + (t + 1) + ":");
return y0;
}


*********************************

#### Score: 6.98246


#### Java Tokens: println, system, len, low 

public static double[] func_c1b9e8e7e1844bcfad41bcc2ef3ead5e(int t, int w, int u, int g, int l) { 
 if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
return low;
}


public static double[] func_98b41b99217d42a1b05b2965dbedd764(int t, int w, int u, int g, int l) { 
 if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
return len;
}


### Py Tokens: range, outcome, pos, len, ans 

### Py functions

def func_3964f531126543fd81d1f323f8ba4fa2(X, ans, i, my, outcome):
    pos = [i for i in range(37) if my[i] + X[i] == outcome]
    N = len(pos)
    for p in pos:
        ans += my[p] * 36 / N
    return p

def func_1f7e5653634844a9bfb29adf14ea3868(X, ans, i, my, outcome):
    pos = [i for i in range(37) if my[i] + X[i] == outcome]
    N = len(pos)
    for p in pos:
        ans += my[p] * 36 / N
    return X

def func_d30fae0c322d41bb84512d988dd13606(X, ans, i, my, outcome):
    pos = [i for i in range(37) if my[i] + X[i] == outcome]
    N = len(pos)
    for p in pos:
        ans += my[p] * 36 / N
    return N

def func_303c07c7041a452d9a3d3da5246ba792(X, ans, i, my, outcome):
    pos = [i for i in range(37) if my[i] + X[i] == outcome]
    N = len(pos)
    for p in pos:
        ans += my[p] * 36 / N
    return my

def func_18e892889fcb48a4ac28b1b35571e809(X, ans, i, my, outcome):
    pos = [i for i in range(37) if my[i] + X[i] == outcome]
    N = len(pos)
    for p in pos:
        ans += my[p] * 36 / N
    return i

*********************************

#### Score: 6.53703


#### Java Tokens: pos 

public static int func_1196f0d0aef14fc1ac52ae7c8892dfd2(int i, int[][] pos) { 
 int nx = pos[i][0];
int ny = pos[i][1];
return ny;
}


public static int func_67d659eeef4941deb5e9de0dca048017(int l, int py, int px, int[][] pos) { 
 px = pos[l][0];
py = pos[l][1];
return px;
}


public static int func_644c113398604f858135ae9caaaf0ac7(int[][] pos) { 
 int px = pos[0][0];
int py = pos[0][1];
return py;
}


*********************************

#### Score: 6.07038


#### Java Tokens: pos, bound 

public static int func_e56fbf72e0224d66b77b40ae8b9f585b(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return py;
}


public static int func_6b9bb5b3b1cd4a60ac5a15167a40b0c6(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
return px;
}


public static int func_97cddfce9b7c452f8695797bae1d62e3(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return px;
}


*********************************

#### Score: 6.07038


#### Java Tokens: div, pos 

public static int func_cd9b5fe359cb40bf81b56ae592a1baa4(int nx, int i, int px, int[][] pos) { 
 int ny = pos[i][1];
double div = nx - px;
return ny;
}


public static int func_ccafa875904d402aad92ff0ee0925965(int px, int i, int[][] pos) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
return ny;
}


public static double func_9a6f36d3b0f749569eb0f7063a887413(int nx, int px, int i, int[][] pos) { 
 int ny = pos[i][1];
double div = nx - px;
return div;
}


*********************************

#### Score: 6.07038


#### Java Tokens: pos, exp 

public static int func_d0a7c296e021459dacf6b862a210eb59(int n, double[] exp) { 
 int pos = 0;
for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
return pos;
}


*********************************

#### Score: 5.67003


#### Java Tokens: div, pos, bound 

public static int func_58a39ec2b5e24e1a82950afef3b71c8a(int l, int px, int[][] pos, double[] bound) { 
 int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
return py;
}


public static int func_9d99c61bf0e24d2885926eadad002202(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
px = nx;
return ny;
}


public static int func_4959f32046524c3ab41634b4b7ef81a1(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
return nx;
}


*********************************

#### Score: 5.67003


#### Java Tokens: print, pos, exp 

public static PrintWriter func_177d5cfe488a4c8db123900770909d9a(int n, int pos, double[] exp, PrintWriter pw) { 
 for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
return pw;
}


public static int func_c428b901829146a491027271a1d95e14(int n, double[] exp, PrintWriter pw) { 
 int pos = 0;
for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
return pos;
}


public static int func_062ef56765224815b11b1e7607714d4f(int n, int pos, double[] exp, PrintWriter pw) { 
 for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
return pos;
}


*********************************

#### Score: 5.67003


#### Java Tokens: print, system, pos 

public static PrintWriter func_280272c3c65c47dab611101c31d78313(int pos, PrintWriter pw) { 
 pw.print(pos + " ");
System.out.print(pos + " ");
return pw;
}


*********************************

#### Score: 5.32279


#### Java Tokens: print, system, pos, exp 

public static PrintWriter func_1e4ad63a67ea4dfa919aef626af98059(int n, int pos, double[] exp, PrintWriter pw) { 
 for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
System.out.print(pos + " ");
exp[pos] = -1;
return pw;
}


public static PrintWriter func_3e968375c36e45e288f4d3b43c12475d(int pos, double[] exp, PrintWriter pw) { 
 pw.print(pos + " ");
System.out.print(pos + " ");
exp[pos] = -1;
return pw;
}


public static PrintWriter func_998020435ea94805b628b60a3c91a32c(int n, double[] exp, PrintWriter pw) { 
 int pos = 0;
for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
System.out.print(pos + " ");
exp[pos] = -1;
return pw;
}


*********************************

#### Score: 5.32279


#### Java Tokens: div, pos, bound, sum 

public static double func_9ffcac09b8d246b1943f1079f85e2943(int l, int u, int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
return sum;
}


public static int func_c47deec42fa641b0a9ac165df24572a2(int l, int px, int u, int[][] pos, double[] bound) { 
 int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
return py;
}


public static int func_c059c044146447588c62fd70a227843c(int l, int u, int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
return px;
}


*********************************

#### Score: 5.01874


#### Java Tokens: div, pos, bound, sum, req 

public static int func_ff71298ea8b84c648bd9e0ffd9667472(int l, int g, int u, int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return py;
}


public static double func_07bb6f347aca4dbcbb8da2ee63f72342(int l, int g, int u, int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return req;
}


public static double func_390c6c85f04f4d8cbebc585a632356a0(int l, int g, int u, int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return sum;
}


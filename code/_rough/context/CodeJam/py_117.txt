### Py Tokens: high, nextarea, low, area, res, curarea, find 

### Py functions

def func_5b61d83900d04ff28a1f7c8e00d2607f(G, high, low, x, xs):
    a = [(x, find(high, x) - find(low, x)) for x in xs]
    area = 0.0
    lx, ly = a[0]
    for x, y in a[1:]:
        area += (x - lx) * ((y + ly) / 2.0)
        lx, ly = x, y
    nextarea = area / G
    curarea = 0.0
    lx, ly = a[0]
    res = []
    return low

def func_7c4ab22bd9bd43f4ac29b812f6768243(G, high, low, x, xs):
    a = [(x, find(high, x) - find(low, x)) for x in xs]
    area = 0.0
    lx, ly = a[0]
    for x, y in a[1:]:
        area += (x - lx) * ((y + ly) / 2.0)
        lx, ly = x, y
    nextarea = area / G
    curarea = 0.0
    lx, ly = a[0]
    res = []
    return curarea

def func_516378a805ef485597ddc190352247b6(G, high, low, x, xs):
    a = [(x, find(high, x) - find(low, x)) for x in xs]
    area = 0.0
    lx, ly = a[0]
    for x, y in a[1:]:
        area += (x - lx) * ((y + ly) / 2.0)
        lx, ly = x, y
    nextarea = area / G
    curarea = 0.0
    lx, ly = a[0]
    res = []
    return high

def func_5e2764b4ff7f46d59cd6a97350c6488b(G, high, low, x, xs):
    a = [(x, find(high, x) - find(low, x)) for x in xs]
    area = 0.0
    lx, ly = a[0]
    for x, y in a[1:]:
        area += (x - lx) * ((y + ly) / 2.0)
        lx, ly = x, y
    nextarea = area / G
    curarea = 0.0
    lx, ly = a[0]
    res = []
    return lx

def func_568d3918e3094ac6ad4bb491588566e8(G, high, low, x, xs):
    a = [(x, find(high, x) - find(low, x)) for x in xs]
    area = 0.0
    lx, ly = a[0]
    for x, y in a[1:]:
        area += (x - lx) * ((y + ly) / 2.0)
        lx, ly = x, y
    nextarea = area / G
    curarea = 0.0
    lx, ly = a[0]
    res = []
    return ly

*********************************

#### Score: 11.27980


#### Java Tokens: area, cur, curarea 

public static double func_b36c3b04b15f41ff9780000ba3a16ba9(int w, int g, double area, double curArea) { 
 curArea += area / g;
double l = 0;
double r = w;
return r;
}


public static double func_87750cb61e304d3583ce0ebbaeb7ff74(double area, A.Point[] q, A.Point[] p) { 
 area += q[0].x * p[0].y - p[0].x * q[0].y;
double curArea = 0;
return area;
}


public static double func_c6534e324f9643ae8ec3aa6ec9694bdd(int g, double area, double curArea) { 
 curArea += area / g;
double l = 0;
return curArea;
}


*********************************

#### Score: 10.56050


#### Java Tokens: area, cur, curarea, mid 

public static double func_5d0fe0a6e2554d8789545b2417adb2ed(int w, int g, double area, double curArea) { 
 curArea += area / g;
double l = 0;
double r = w;
double mid = (l + r) * .5;
return r;
}


public static double func_8680adc34d964c0a9734e6c0604f9547(int w, int g, double area, double curArea) { 
 curArea += area / g;
double l = 0;
double r = w;
double mid = (l + r) * .5;
return curArea;
}


public static double func_9639de5b66fd40a2afc6756a936013e9(int w, int g, double area, double curArea) { 
 curArea += area / g;
double l = 0;
double r = w;
double mid = (l + r) * .5;
return mid;
}


*********************************

#### Score: 10.56050


#### Java Tokens: area, cur, ans, curarea 

public static double func_41129370371a4042b34f3730e1081fd3(int g) { 
 double curArea = 0;
double[] ans = new double[g - 1];
return curArea;
}


public static double[] func_0779d615be19466b8b0b389d8292f1d9(int g) { 
 double curArea = 0;
double[] ans = new double[g - 1];
return ans;
}


*********************************

#### Score: 10.55060


#### Java Tokens: area, high, println, low 

public static double func_d619e981b9ee44969c0064771613fecf(int X, A.Polyline high, A.Polyline low) { 
 double area = high.area(X) - low.area(X);
A.out.println();
return area;
}


*********************************

#### Score: 9.92139


#### Java Tokens: area, high, curans, guess, low 

public static double func_a4d4c1a9070041ce851e0066d0e04a7e(double low, double curans, double high) { 
 double guess = (low + high) / 2;
double a = A.area(curans, guess);
return guess;
}


public static double func_2c659be0fd814831a95ab0df76b9cddc(double low, double curans, double high) { 
 double guess = (low + high) / 2;
double a = A.area(curans, guess);
return a;
}


*********************************

#### Score: 9.36587


#### Java Tokens: area, high, getevents, low, get, events 

public static int func_e32345ee8c84407299a5077e1859179d(A.Point[] low, A.Point[] high) { 
 int[] events = A.getEvents(low, high);
double area = 0;
int a = 0, b = 0;
return a;
}


public static double func_cf5b878a3dea41eb8db2addb7781fcc5(A.Point[] low, A.Point[] high) { 
 int[] events = A.getEvents(low, high);
double area = 0;
int a = 0, b = 0;
return area;
}


public static int func_760f6ea633d74d50a613ef4f168adcda(A.Point[] low, A.Point[] high) { 
 int[] events = A.getEvents(low, high);
double area = 0;
int a = 0, b = 0;
return b;
}


*********************************

#### Score: 9.08062


#### Java Tokens: high, low 

public static int func_f388707605144796a4b526fe90630b7b(long high, long low) { 
 long m = (low + high) / 2;
int i = 0;
long x = 0;
return i;
}


public static long func_4095026e27114ba9a8e9a5cc355f034b(long high, long low) { 
 long m = (low + high) / 2;
int i = 0;
long x = 0;
return m;
}


public static double func_d2d97269ac5346cdaada845feea25bbc(int W) { 
 double low = 0;
double high = W;
return high;
}


*********************************

#### Score: 8.87181


#### Java Tokens: area, high, curans, low, guess, targetarea, target 

public static double func_1a24722cee3f48db89b50da142ca271e(double targetArea, double low, double curans) { 
 double high = A.W;
while (low + 0.0000000001 < high) {
    double guess = (low + high) / 2;
    double a = A.area(curans, guess);
    if (a < targetArea) {
        low = guess;
    } else {
        high = guess;
    }
}
return low;
}


public static double func_2efe90caeb654c088de6763ffd490bfb(double targetArea, double low, double curans, double high) { 
 while (low + 0.0000000001 < high) {
    double guess = (low + high) / 2;
    double a = A.area(curans, guess);
    if (a < targetArea) {
        low = guess;
    } else {
        high = guess;
    }
}
curans = (low + high) / 2;
return curans;
}


public static double func_cb045795a3b6423196e64aa0be9a98a0(double targetArea, double curans) { 
 double low = curans;
double high = A.W;
while (low + 0.0000000001 < high) {
    double guess = (low + high) / 2;
    double a = A.area(curans, guess);
    if (a < targetArea) {
        low = guess;
    } else {
        high = guess;
    }
}
return high;
}


*********************************

#### Score: 8.87181


#### Java Tokens: area, high, curans, guess, low, targetarea, target 

public static double func_e538adf609f642a5ae07e3e7d6a37d95(double guess, double targetArea, double low, double curans, double high) { 
 double a = A.area(curans, guess);
if (a < targetArea) {
    low = guess;
} else {
    high = guess;
}
return a;
}


public static double func_4e851067d59d4adcb7893270ae830ca1(double guess, double targetArea, double low, double curans, double high) { 
 double a = A.area(curans, guess);
if (a < targetArea) {
    low = guess;
} else {
    high = guess;
}
return high;
}


public static double func_df9398fad8c549e5b43502938212e0c8(double targetArea, double low, double curans, double high) { 
 double guess = (low + high) / 2;
double a = A.area(curans, guess);
if (a < targetArea) {
    low = guess;
} else {
    high = guess;
}
return guess;
}


*********************************

#### Score: 8.87181


#### Java Tokens: area, e-9, high, println, low, eps 

public static double func_989e127c85ec4bdb85cb1e28d96fdef3(int X, A.Polyline high, A.Polyline low) { 
 double area = high.area(X) - low.area(X);
A.out.println();
double eps = 1e-9;
return eps;
}


public static double func_01ca4d4b86f6489e97d6c9f07cc33344(int X, A.Polyline high, A.Polyline low) { 
 double area = high.area(X) - low.area(X);
A.out.println();
double eps = 1e-9;
return area;
}


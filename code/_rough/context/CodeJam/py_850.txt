### Py Tokens: transistors, xrange, sum, total, sums, append 

### Py functions

def func_22a9927a79274b9d99f8be933babb8fd(N, p, q, r, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return total

def func_f7efad4cb1c84239bb340ef68bd118d4(N, p, q, r, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return sums

def func_77501612dbed49759104be1589453d1f(N, i, transistors):
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return transistors

def func_e2a662e2de3d47d4bd6bc5ddcca5086e(N, i, transistors):
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return sums

def func_3070552d960a4f14a069b44522acf84d(N, i, transistors):
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return total

*********************************

#### Score: 9.33141


#### Java Tokens: total, counts, sums 

public static long func_503f58214a9e46398f915e47c6091911(int N, long[] counts) { 
 final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
return total;
}


public static long func_b46e4e8121134bb08801d3de4510d4e8(int N, long r, long s, long p, long q) { 
 final long[] counts = new long[N];
for (int i = 0; i < N; i++) counts[i] = (i * p + q) % r + s;
final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
return total;
}


public static long[] func_c5395f39b64745dea5778e0eeb6218e9(int N, long[] counts) { 
 final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
return sums;
}


*********************************

#### Score: 9.33141


#### Java Tokens: total, answer, sums 

public static long func_962ac62c8aba4fa2a8841f2042b999e5(int N, long[] sums) { 
 final long total = sums[N];
long answer = 0L;
return answer;
}


public static long func_87f91c6eb3bf4d10be724ab348a980dc(int N, long[] sums) { 
 final long total = sums[N];
long answer = 0L;
return total;
}


*********************************

#### Score: 8.74133


#### Java Tokens: total, answer, counts, sums 

public static long func_4502893454b544fb8f2c8b6663730b53(int N, long[] counts, long[] sums) { 
 for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
long answer = 0L;
return total;
}


public static long func_2b449234c47b48a3a863bdbd2128d4b1(int N, long[] counts) { 
 final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
long answer = 0L;
return answer;
}


public static long[] func_1354726a852d4842831d5c8292d43b03(int N, long r, long s, long p, long q) { 
 final long[] counts = new long[N];
for (int i = 0; i < N; i++) counts[i] = (i * p + q) % r + s;
final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
long answer = 0L;
return counts;
}


*********************************

#### Score: 6.46944


#### Java Tokens: counts, sums 

public static long[] func_ae9ba4b9b8d04fd5a0e331b4ee27bd47(int N, long[] counts) { 
 final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
return sums;
}


public static long[] func_b4724337b76a451aafaf26f38719ac95(int N, long r, long s, long p, long q) { 
 final long[] counts = new long[N];
for (int i = 0; i < N; i++) counts[i] = (i * p + q) % r + s;
final long[] sums = new long[N + 1];
return counts;
}


public static long[] func_ef09f120b5934329b234870dbe057a99(int N, long r, long s, long p, long q) { 
 final long[] counts = new long[N];
for (int i = 0; i < N; i++) counts[i] = (i * p + q) % r + s;
final long[] sums = new long[N + 1];
return sums;
}


*********************************

#### Score: 6.23746


#### Java Tokens: total, sum, second 

public static long func_b44431fbac3c4d6fa46d517815fd9cb1(int second, long[] sum) { 
 long total = 0;
if (second != -1)
    total += sum[second];
return total;
}


*********************************

#### Score: 5.85258


#### Java Tokens: total, sum, first, second 

public static long func_8dbe0794194d4a0b85a5b55fe3b9bde9(int n, int second, int first, long total, long[] sum) { 
 if (second != -1)
    total += sum[second];
if (first != n)
    total += sum[n - 1] - sum[first - 1];
return total;
}


public static long func_fc3e5391aeca49b9b1adabe24a50411a(int n, int second, int first, long[] sum) { 
 long total = 0;
if (second != -1)
    total += sum[second];
if (first != n)
    total += sum[n - 1] - sum[first - 1];
return total;
}


*********************************

#### Score: 5.34334


#### Java Tokens: leftcount, left, count, start, sums 

public static long func_1ebe6209d48640819163dbe468685cee(int start, long[] sums) { 
 final long leftCount = sums[start];
int left = start;
return leftCount;
}


public static int func_e8001cb499d94023bc7a722dadbad7c3(int start, long[] sums) { 
 final long leftCount = sums[start];
int left = start;
return left;
}


*********************************

#### Score: 5.05589


#### Java Tokens: leftcount, left, count, start, right, sums 

public static int func_6fbc1e9cc5e042f986f51f4121965e05(int start, int N, long[] sums) { 
 final long leftCount = sums[start];
int left = start;
int right = N;
return right;
}


public static long func_6ffed488992345f39d75853b3726a1b6(int start, int N, long[] sums) { 
 final long leftCount = sums[start];
int left = start;
int right = N;
return leftCount;
}


public static int func_c274efa0849d4bb598bfb28e84affec2(int start, int N, long[] sums) { 
 final long leftCount = sums[start];
int left = start;
int right = N;
return left;
}


*********************************

#### Score: 4.71656


#### Java Tokens: sum1, sum2, total, mid, sum, first, second, second-- 

public static int func_11fe1092042a43578b4f1556ac3e8875(int n, long mid, long[] a, long[] sum) { 
 boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
if (sum1 >= mid && sum2 >= mid) {
    if (second >= first) {
        ok = true;
    } else {
        long total = 0;
        if (second != -1)
            total += sum[second];
        if (first != n)
            total += sum[n - 1] - sum[first - 1];
        if (total >= mid)
            ok = true;
    }
}
return second;
}


public static long func_bae812f4140a43be85e236afab6e8f5d(int n, long mid, long[] a, long[] sum, boolean ok) { 
 long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
if (sum1 >= mid && sum2 >= mid) {
    if (second >= first) {
        ok = true;
    } else {
        long total = 0;
        if (second != -1)
            total += sum[second];
        if (first != n)
            total += sum[n - 1] - sum[first - 1];
        if (total >= mid)
            ok = true;
    }
}
return sum1;
}


public static long func_ae202acdb3654b358227e8020db119da(int n, long mid, long[] a, long[] sum) { 
 boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
if (sum1 >= mid && sum2 >= mid) {
    if (second >= first) {
        ok = true;
    } else {
        long total = 0;
        if (second != -1)
            total += sum[second];
        if (first != n)
            total += sum[n - 1] - sum[first - 1];
        if (total >= mid)
            ok = true;
    }
}
return sum2;
}


*********************************

#### Score: 4.57140


#### Java Tokens: middle, rightcount, count, start, mid, right, midcount, sums 

public static long func_bb58fa4970a243e197a58a668305b78c(int middle, int start, int N, long[] sums) { 
 final long midCount = sums[middle] - sums[start];
final long rightCount = sums[N] - sums[middle];
return rightCount;
}


public static long func_47be7ec7f03247d9b3461be640888ed1(int middle, int start, int N, long[] sums) { 
 final long midCount = sums[middle] - sums[start];
final long rightCount = sums[N] - sums[middle];
return midCount;
}


### Py Tokens: sort, write, str, reverse, fout, xrange 

### Py functions

def func_29dbb0a352eb43dba295c31cf2f35308(fout, i, n, q):
    q = [(p[i] / l[i]) for i in xrange(n)]
    r = [(q[i], -i) for i in xrange(n)]
    r.sort()
    r.reverse()
    for i in r:
        fout.write(' ' + str(-i[1]))
    return i

def func_13f24f9888894f4283fb092056730420(fout, i, n, q):
    q = [(p[i] / l[i]) for i in xrange(n)]
    r = [(q[i], -i) for i in xrange(n)]
    r.sort()
    r.reverse()
    for i in r:
        fout.write(' ' + str(-i[1]))
    return q

def func_08d38ee2deea4fd7b6512a8a3bee7ab0(fout, i, n, q):
    q = [(p[i] / l[i]) for i in xrange(n)]
    r = [(q[i], -i) for i in xrange(n)]
    r.sort()
    r.reverse()
    for i in r:
        fout.write(' ' + str(-i[1]))
    return n

def func_85c3d70878214fd7bffc44c20876317f(fout, i, n, q):
    q = [(p[i] / l[i]) for i in xrange(n)]
    r = [(q[i], -i) for i in xrange(n)]
    r.sort()
    r.reverse()
    for i in r:
        fout.write(' ' + str(-i[1]))
    return q

def func_58d6668f72f8443ea9154df9b84226e3(fout, i, n, q):
    q = [(p[i] / l[i]) for i in xrange(n)]
    r = [(q[i], -i) for i in xrange(n)]
    r.sort()
    r.reverse()
    for i in r:
        fout.write(' ' + str(-i[1]))
    return r

*********************************

#### Score: 4.05330


#### Java Tokens: arrays, sort 

public static long func_e7f8859bb58c4197a042f065c2a66386(int N, long[] is) { 
 N = 37;
Arrays.sort(is);
long A = 0;
return A;
}


public static double[] func_fb41da43c19a41b2bf5c907ddcc44a1e(int u, int n, int l, int[] xl, int[] xu) { 
 int[] x = new int[n];
for (int i = 0; i < u; i++) x[i] = xu[i];
for (int i = 1; i < l - 1; i++) x[i - 1 + u] = xl[i];
Arrays.sort(x);
double[] y1 = new double[n];
return y1;
}


public static int func_b9a6d28ce15e4cd494098f610fc0ba85(int u, int l, int[] xl, int[] xu) { 
 int n = u + l - 2;
int[] x = new int[n];
for (int i = 0; i < u; i++) x[i] = xu[i];
for (int i = 1; i < l - 1; i++) x[i - 1 + u] = xl[i];
Arrays.sort(x);
return n;
}


*********************************

#### Score: 3.79623


#### Java Tokens: arrays, sort, ind 

public static int func_ba75cff910ea46c4908664e143153c17(int u, int l, int[] xl, int[] yl, int[] xu) { 
 int n = u + l - 2;
int[] x = new int[n];
for (int i = 0; i < u; i++) x[i] = xu[i];
for (int i = 1; i < l - 1; i++) x[i - 1 + u] = xl[i];
Arrays.sort(x);
double[] y1 = new double[n];
int ind = 0;
for (int i = 0; i < n; i++) {
    while (x[i] > xl[ind + 1]) ind++;
    y1[i] = yl[ind] + (double) (yl[ind + 1] - yl[ind]) * (x[i] - xl[ind]) / (xl[ind + 1] - xl[ind]);
}
return n;
}


public static int func_621867af3a38418fb30030a020044d68(int n, int[] xl, int[] yl, int[] x) { 
 Arrays.sort(x);
double[] y1 = new double[n];
int ind = 0;
for (int i = 0; i < n; i++) {
    while (x[i] > xl[ind + 1]) ind++;
    y1[i] = yl[ind] + (double) (yl[ind + 1] - yl[ind]) * (x[i] - xl[ind]) / (xl[ind + 1] - xl[ind]);
}
return ind;
}


public static double[] func_3ad744ce23f24099bab380809c294f85(int n, int[] xl, int[] yl, int[] x) { 
 Arrays.sort(x);
double[] y1 = new double[n];
int ind = 0;
for (int i = 0; i < n; i++) {
    while (x[i] > xl[ind + 1]) ind++;
    y1[i] = yl[ind] + (double) (yl[ind + 1] - yl[ind]) * (x[i] - xl[ind]) / (xl[ind + 1] - xl[ind]);
}
double[] y2 = new double[n];
ind = 0;
return y2;
}


*********************************

#### Score: 3.79623


#### Java Tokens: best, arrays, sort 

public static double func_95f8a5025b6242bb92b79f6fd1f6b179(long[] a) { 
 Arrays.sort(a);
double best = 0;
return best;
}


public static double func_afd5bff942d74f999f114261393f19be(long[] x) { 
 Arrays.sort(x);
// System.out.println(Arrays.toString(x));
double best = 0;
return best;
}


*********************************

#### Score: 3.79623


#### Java Tokens: max, arrays, sort 

public static long func_23be0ac773d9440e8d3d56392ce58eec(long[] a) { 
 Arrays.sort(a);
double max = 0;
long s = 0;
return s;
}


public static double func_97c89b015cd34dd78c227e38028e81d6(long[] a) { 
 Arrays.sort(a);
double max = 0;
return max;
}


public static double func_b9d12e05b77142138c65cc0f1a010f37(long[] v) { 
 Arrays.sort(v);
double max = 0.0;
return max;
}


*********************************

#### Score: 3.79623


#### Java Tokens: areal, arrays, sort 

public static int[] func_1276f3b1d1384c699cd4b2da7a40cb49(int u, int l, int[] xs, int[] xu) { 
 for (int i = 0; i < u; ++i) xs[l + i] = xu[i];
Arrays.sort(xs);
int[] areal = new int[l];
return areal;
}


public static int[] func_779ee2e0dbad41039723e6c942dc9acd(int u, int l, int[] xs, int[] xu, int[] xl) { 
 for (int i = 0; i < l; ++i) xs[i] = xl[i];
for (int i = 0; i < u; ++i) xs[l + i] = xu[i];
Arrays.sort(xs);
int[] areal = new int[l];
return areal;
}


public static int[] func_a7629788626047099ee472753f460b4f(int l, int[] xs) { 
 Arrays.sort(xs);
int[] areal = new int[l];
return areal;
}


*********************************

#### Score: 3.79623


#### Java Tokens: ans, arrays, sort 

public static double func_81f8d0da16484a1fa0a9fecd785eaeaa(long[] V) { 
 Arrays.sort(V);
// p(V);
double ans = 0.0;
return ans;
}


public static double func_579a7b54603146dc80ae5bb710fb2d68(long[] a) { 
 Arrays.sort(a);
double ans = 0;
return ans;
}


public static double func_eaa0a1b051bb4757b99b09e3be0ec5a1(long[] a) { 
 Arrays.sort(a);
double ans = 0;
return ans;
}


*********************************

#### Score: 3.79623


#### Java Tokens: length, arrays, sort 

public static long[] func_0ab5c6018f704f14b4e30b99a91114d1(long[] x) { 
 long[] a = new long[37];
for (int i = 0; i < x.length; i++) {
    a[i] = x[i];
}
Arrays.sort(a);
return a;
}


*********************************

#### Score: 3.57326


#### Java Tokens: areal, areau, arrays, sort 

public static int[] func_d03295c315ef4ed8b448e66d1b555194(int u, int l, int[] xu, int[] xl) { 
 int[] xs = new int[l + u];
for (int i = 0; i < l; ++i) xs[i] = xl[i];
for (int i = 0; i < u; ++i) xs[l + i] = xu[i];
Arrays.sort(xs);
int[] areal = new int[l];
int[] areau = new int[u];
return xs;
}


public static int[] func_1e507c4628b745589f90fc063ff77c84(int u, int l, int[] xs, int[] xu, int[] xl) { 
 for (int i = 0; i < l; ++i) xs[i] = xl[i];
for (int i = 0; i < u; ++i) xs[l + i] = xu[i];
Arrays.sort(xs);
int[] areal = new int[l];
int[] areau = new int[u];
return areal;
}


public static int[] func_a37e1e64608445b2ac7c6c77842fa1c7(int u, int l, int[] xs) { 
 Arrays.sort(xs);
int[] areal = new int[l];
int[] areau = new int[u];
return areal;
}


*********************************

#### Score: 3.57326


#### Java Tokens: max, length, arrays, sort 

public static long func_2831d9202b83428d891e1d5697249472(long b, long[] a) { 
 Arrays.sort(a);
double max = 0;
long s = 0;
for (int n = 0; n < a.length; n++) {
    s += a[n];
    double s2 = 0;
    for (int l = 0; l <= n; l++) {
        s2 += a[l];
        long x = (b - (n - l) + s) / (n + 1);
        if (x >= a[l] && (l + 1 >= a.length || x + 1 >= a[n]) && (n + 1 >= a.length || x < a[n + 1])) {
            if (max < 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l)) {
                max = 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l);
            }
        }
    }
}
return s;
}


public static double func_f2576f5c9a3945c0a7a540ddd41d6fa7(long b, long[] a) { 
 Arrays.sort(a);
double max = 0;
long s = 0;
for (int n = 0; n < a.length; n++) {
    s += a[n];
    double s2 = 0;
    for (int l = 0; l <= n; l++) {
        s2 += a[l];
        long x = (b - (n - l) + s) / (n + 1);
        if (x >= a[l] && (l + 1 >= a.length || x + 1 >= a[n]) && (n + 1 >= a.length || x < a[n + 1])) {
            if (max < 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l)) {
                max = 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l);
            }
        }
    }
}
return max;
}


*********************************

#### Score: 3.57326


#### Java Tokens: max, arrays, sort, math 

public static double func_0ed0d29fca80484e94a1426784e882bc(int n, long b, long[] a) { 
 Arrays.sort(a);
double max = 0;
for (int i = 0; i < n - 1; i++) {
    long l = a[i] - 1;
    long r = a[n - 1] - 1;
    while (r > l + 1) {
        long m = (l + r) / 2;
        long s = 0;
        for (int j = 0; j < n; j++) {
            if (j <= i)
                s += (m - a[j]);
            else if (a[j] < m + 1) {
                s += (m + 1 - a[j]);
            }
        }
        if (s > b) {
            r = m;
        } else {
            l = m;
        }
    }
    if (l >= a[i]) {
        long s = 0;
        long s2 = 0;
        for (int j = 0; j < n; j++) {
            if (j <= i) {
                s += (l - a[j]);
                s2 += (l - a[j]);
            } else if (a[j] < l + 1) {
                s += (l + 1 - a[j]);
            }
        }
        double w = s2 * (36.0 / (i + 1)) - s;
        // System.out.println(i + " " + l + " " + w);
        max = Math.max(max, w);
    }
}
return max;
}


public static String func_258e416170d5417cb299e07c9f7763c8(int n, long b, long[] a) { 
 Arrays.sort(a);
double max = 0;
for (int i = 0; i < n - 1; i++) {
    long l = a[i] - 1;
    long r = a[n - 1] - 1;
    while (r > l + 1) {
        long m = (l + r) / 2;
        long s = 0;
        for (int j = 0; j < n; j++) {
            if (j <= i)
                s += (m - a[j]);
            else if (a[j] < m + 1) {
                s += (m + 1 - a[j]);
            }
        }
        if (s > b) {
            r = m;
        } else {
            l = m;
        }
    }
    if (l >= a[i]) {
        long s = 0;
        long s2 = 0;
        for (int j = 0; j < n; j++) {
            if (j <= i) {
                s += (l - a[j]);
                s2 += (l - a[j]);
            } else if (a[j] < l + 1) {
                s += (l + 1 - a[j]);
            }
        }
        double w = s2 * (36.0 / (i + 1)) - s;
        // System.out.println(i + " " + l + " " + w);
        max = Math.max(max, w);
    }
}
return "" + max;

}


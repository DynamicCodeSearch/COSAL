### Py Tokens: crem, xrange, sum, list, append 

### Py functions

def func_bc13f4423e6840fc98d25fcef22789e3(b, cx, x):
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    return y

def func_f825d5e2d96c4bd5bea034a8b918eeab(b, cx, x):
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    return mx

def func_c6ef194afaa34b939e1c87b552006e52(b, cx, x):
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    return b

def func_ba7f3dc97b7d44d8bd991ace0d7cd8cd(b, cx, x):
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    return cx

def func_9eabf80a54a840e8830e0264ccbe5227(b, cx, x):
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    return b

*********************************

#### Score: 4.95807


#### Java Tokens: add, string, max, index, integer, arraylist, list, result, size, array, builder, stringbuilder, append 

public static boolean[] func_8a7bff4180934947805842e57e503277(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return u;
}


public static StringBuilder func_40420e1a67264bd89dd150fbc26cf837(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb;
}


public static List<Integer> func_f05ac0d737f747fb9cfb0f670154f4d8(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return result;
}


*********************************

#### Score: 4.77768


#### Java Tokens: add, string, max, index, integer, arraylist, list, result, size, array, builder, stringbuilder, tostring, append 

public static String func_dbd49d09a3f54cc3b5d46ee5429439bd(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


public static String func_ed0632d1aaa74b17b354a457766e2b01(int N, int[] P, boolean[] u) { 
 List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


*********************************

#### Score: 4.20508


#### Java Tokens: res, array, double, arraylist, list 

public static int func_873504fabd1c4926bf18a657af8bb774(int a) { 
 // System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
return a;
}


public static int func_98c4291180674054b74726faed4c5c6e(int a, int b) { 
 // System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
b = 0;
return a;
}


public static int func_1ec4a494938548cca3fefb2e49c45bd4(int a, int b) { 
 // System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
b = 0;
return b;
}


*********************************

#### Score: 4.20508


#### Java Tokens: result, array, integer, arraylist, list 

public static boolean[] func_5c9ca48b85664049b068b31f10bfa982(int N) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
return u;
}


public static List<Integer> func_bd0db939ad234d73be5d8d95f152790b(int N) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
return result;
}


*********************************

#### Score: 4.20508


#### Java Tokens: add, array, double, arraylist, list 

public static ArrayList<Double> func_595de7b98fc54e889557ddb0d509974a(ArrayList<Double> lx) { 
 ArrayList<Double> ly = new ArrayList<Double>();
lx.add(0.0);
return ly;
}


public static ArrayList<Double> func_4129d28294a84dbc8c0d91f413f82ab3(ArrayList<Double> lx) { 
 ArrayList<Double> ly = new ArrayList<Double>();
lx.add(0.0);
ly.add(-2000.0);
return ly;
}


*********************************

#### Score: 4.20508


#### Java Tokens: add, array, integer, arraylist, list 

public static List<Integer> func_f630fbe153664a55a8384803d79e2799(int n) { 
 List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
return p;
}


*********************************

#### Score: 3.98429


#### Java Tokens: cur, res, array, double, arraylist, list 

public static int func_cdb69d4916ba414f8d20005b2783f921(int a, int b) { 
 double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
b = 0;
return b;
}


public static int func_13472466f671472d8ae17ed3b9b2ce25(int a, int b) { 
 double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
b = 0;
return a;
}


public static double func_121f22baf19d40b9a27cb1e0e4c7b426(int a) { 
 double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
return cur;
}


*********************************

#### Score: 3.93914


#### Java Tokens: next, add, nextint, string, max, index, integer, arraylist, list, int, result, input, task, size, array, builder, task1, stringbuilder, tostring, append 

public static String func_9cf9966f1e7d481ebca3573a8491c997(int N) { 
 int[] L = new int[N];
for (int i = 0; i < N; i++) {
    L[i] = Task1.input.nextInt();
}
int[] P = new int[N];
for (int i = 0; i < N; i++) {
    P[i] = Task1.input.nextInt();
}
boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


public static String func_8887556108dd485dbac4c9cc32c9b0af(int N) { 
 int[] P = new int[N];
for (int i = 0; i < N; i++) {
    P[i] = Task1.input.nextInt();
}
boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


public static String func_e049ea8d9753483b8ebe0584e699d86c(int N, int[] L) { 
 for (int i = 0; i < N; i++) {
    L[i] = Task1.input.nextInt();
}
int[] P = new int[N];
for (int i = 0; i < N; i++) {
    P[i] = Task1.input.nextInt();
}
boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


*********************************

#### Score: 3.78792


#### Java Tokens: next, nextint, array, integer, arraylist, list, int 

public static double[] func_4312c6b3e990491f89e3878fe67e0f96(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
return r;
}


public static int func_82dc3e19e4ca423c94a1a8ed5443aa1c(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
return n;
}


public static double[] func_64a305c06e664b1da148f65b5752a081(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
return l;
}


*********************************

#### Score: 3.78792


#### Java Tokens: add, money, array, arraylist, list, profit, long 

public static long func_889551e1c3b34b8b97f8b0702c706d29(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
return money;
}


public static ArrayList<Long> func_99a08aa050d84969a5971e5dee2aa2e2(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
return profit;
}


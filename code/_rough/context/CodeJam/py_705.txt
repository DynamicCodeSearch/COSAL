### Py Tokens: range, seq, rsum, lend, bound, len, rbegin 

### Py functions

def func_47a1eec3d8ac46289bd1b4a1afd8ecd6(bound, i, lend, rsum, seq):
    rbegin = len(seq)
    for i in range(len(seq) - 1, -1, -1):
        if rsum + seq[i] <= bound and i > lend:
            rsum += seq[i]
            rbegin = i
        else:
            break
    return i

def func_bbe3d91a07bd446589b4067a9c1f313d(bound, i, lend, rsum, seq):
    rbegin = len(seq)
    for i in range(len(seq) - 1, -1, -1):
        if rsum + seq[i] <= bound and i > lend:
            rsum += seq[i]
            rbegin = i
        else:
            break
    return rsum

def func_09f2380de94247f3a0b8ba0d49089766(bound, i, lend, rsum, seq):
    rbegin = len(seq)
    for i in range(len(seq) - 1, -1, -1):
        if rsum + seq[i] <= bound and i > lend:
            rsum += seq[i]
            rbegin = i
        else:
            break
    return rbegin

def func_0aedf75207214feebcbdfd0900509673(bound, i, lend, seq):
    rsum = 0
    rbegin = len(seq)
    for i in range(len(seq) - 1, -1, -1):
        if rsum + seq[i] <= bound and i > lend:
            rsum += seq[i]
            rbegin = i
        else:
            break
    return i

def func_2f5c53fd5c5c42bcbe31f769ede64b61(bound, i, lend, seq):
    rsum = 0
    rbegin = len(seq)
    for i in range(len(seq) - 1, -1, -1):
        if rsum + seq[i] <= bound and i > lend:
            rsum += seq[i]
            rbegin = i
        else:
            break
    return rbegin

*********************************

#### Score: 7.74930


#### Java Tokens: bound 

public static double func_8dab68333b7642ada842c2cbbf10372d(int p, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
return b;
}


public static double func_2638bc8043dd46149b6456d01f416da1(int p, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
return a;
}


*********************************

#### Score: 7.18996


#### Java Tokens: pos, bound 

public static int func_e56fbf72e0224d66b77b40ae8b9f585b(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return py;
}


public static int func_6b9bb5b3b1cd4a60ac5a15167a40b0c6(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
return px;
}


public static int func_97cddfce9b7c452f8695797bae1d62e3(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return px;
}


*********************************

#### Score: 7.18996


#### Java Tokens: bound, sum 

public static double func_0549b3b7e9264fa5aad2ec5b09896643(int w, double[] bound) { 
 double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
return sum;
}


public static double func_76c782109326442d8ab3334faf8688b0(int w, double sum, double[] bound) { 
 for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
return sum;
}


*********************************

#### Score: 6.87595


#### Java Tokens: rsum, psum 

public static double func_6f59f12edba64abc94a375a0e242ddbf(int o, int[] v, double rsum, double[] l, double[] p) { 
 double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
m = 0;
q = 1;
return psum;
}


public static double func_d8146a220c3a4f508aa1a68ffd37fa82(int o, int[] v, double rsum, double[] l, double[] p) { 
 double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
m = 0;
q = 1;
return rsum;
}


public static double func_0c773f02239e4b23a6b76070c7f3e969(int o, int[] v, double rsum, double[] l, double[] p) { 
 double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
m = 0;
return psum;
}


*********************************

#### Score: 6.87595


#### Java Tokens: rsum, nums 

public static long[] func_008c1add19fa46569d0b01a03d2de31f(int n, long s, long p, long q, long r) { 
 long[] nums = new long[n];
for (int i = 0; i < n; i++) {
    nums[i] = (i * p + q) % r + s;
}
long[] rsum = new long[n];
for (int i = 0; i < n; i++) {
    if (i != 0) {
        rsum[i] += (rsum[i - 1]);
    }
    rsum[i] += nums[i];
}
return nums;
}


public static long[] func_5dc5e6e94d1c40b38b51e3c25307adfa(int n, long s, long p, long q, long r) { 
 long[] nums = new long[n];
for (int i = 0; i < n; i++) {
    nums[i] = (i * p + q) % r + s;
}
long[] rsum = new long[n];
for (int i = 0; i < n; i++) {
    if (i != 0) {
        rsum[i] += (rsum[i - 1]);
    }
    rsum[i] += nums[i];
}
return rsum;
}


public static long[] func_971a0e9182a34f34b6d607b9be7b13db(int n, long[] nums) { 
 long[] rsum = new long[n];
for (int i = 0; i < n; i++) {
    if (i != 0) {
        rsum[i] += (rsum[i - 1]);
    }
    rsum[i] += nums[i];
}
return rsum;
}


*********************************

#### Score: 6.87595


#### Java Tokens: rsum, lsum 

public static double func_3171731a67854753aa4f926d420679d8(double lsum, double s, double rsum) { 
 lsum += s;
rsum -= s;
return rsum;
}


public static double func_b38149ec0251455f88814c5c211b7ae2(double lsum, double s, double rsum) { 
 lsum += s;
rsum -= s;
return lsum;
}


*********************************

#### Score: 6.71008


#### Java Tokens: div, pos, bound 

public static int func_58a39ec2b5e24e1a82950afef3b71c8a(int l, int px, int[][] pos, double[] bound) { 
 int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
return py;
}


public static int func_9d99c61bf0e24d2885926eadad002202(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
px = nx;
return ny;
}


public static int func_4959f32046524c3ab41634b4b7ef81a1(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
return nx;
}


*********************************

#### Score: 6.71008


#### Java Tokens: bound, sum, req 

public static double func_cb6075579afd41538cec7f7bef0d66a3(int g, int w, double sum, double[] bound) { 
 for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return req;
}


public static double func_1670fe700cc84ba39c57aa7bad72557f(int g, int w, double sum, double[] bound) { 
 for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return sum;
}


public static double func_7895eaba6f0d4d8c98b5a3c4480cdb8f(int g, int w, double[] bound) { 
 double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return sum;
}


*********************************

#### Score: 6.71008


#### Java Tokens: add, bound, used 

public static double func_fffe3097af3c4f1e94ccd0b6d1b78713(int p, double used, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
double add = ((b - a) * used + a + b) * (1.0 - used) / 2.0;
return b;
}


public static double func_8db2a9fc3fd747279b10557bf8f32d40(int p, double a, double used, double[] bound) { 
 double b = bound[p + 1];
double add = ((b - a) * used + a + b) * (1.0 - used) / 2.0;
return add;
}


public static double func_8e7143913b8f43feb0afa92b5eb26c6e(int p, double used, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
double add = ((b - a) * used + a + b) * (1.0 - used) / 2.0;
return add;
}


*********************************

#### Score: 6.41838


#### Java Tokens: rsum, lsum, psum 

public static double func_fe9269d91e4342c5bf07ff9004ed12d4(int o, int[] v, double[] l, double[] p) { 
 double lsum = 0, rsum = 0;
double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
return lsum;
}


public static double func_6366e4b2f2d243de89bba9ffcdbad150(int o, int[] v, double[] l, double[] p) { 
 double lsum = 0, rsum = 0;
double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
m = 0;
q = 1;
return m;
}


public static double func_f18ccd571f6b4054a58322ce08991a72(int o, int[] v, double[] l, double[] p) { 
 double lsum = 0, rsum = 0;
double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
m = 0;
return lsum;
}


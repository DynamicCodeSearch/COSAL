### Py Tokens: sums, needed, false, total, true 

### Py functions

def func_12171ac4f6494d60853d30c6949f53cb(j, needed, sums, total):
    if total - sums[j + 1] <= needed:
        return True
    return False

def func_3cf06e66be7145048a00a7f71600a52f(i, needed, sums, total):
    if total - sums[i] <= needed:
        return True
    return False

*********************************

#### Score: 9.33141


#### Java Tokens: total, counts, sums 

public static long func_503f58214a9e46398f915e47c6091911(int N, long[] counts) { 
 final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
return total;
}


public static long func_b46e4e8121134bb08801d3de4510d4e8(int N, long r, long s, long p, long q) { 
 final long[] counts = new long[N];
for (int i = 0; i < N; i++) counts[i] = (i * p + q) % r + s;
final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
return total;
}


public static long[] func_c5395f39b64745dea5778e0eeb6218e9(int N, long[] counts) { 
 final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
return sums;
}


*********************************

#### Score: 9.33141


#### Java Tokens: total, answer, sums 

public static long func_962ac62c8aba4fa2a8841f2042b999e5(int N, long[] sums) { 
 final long total = sums[N];
long answer = 0L;
return answer;
}


public static long func_87f91c6eb3bf4d10be724ab348a980dc(int N, long[] sums) { 
 final long total = sums[N];
long answer = 0L;
return total;
}


*********************************

#### Score: 8.74133


#### Java Tokens: total, answer, counts, sums 

public static long func_4502893454b544fb8f2c8b6663730b53(int N, long[] counts, long[] sums) { 
 for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
long answer = 0L;
return total;
}


public static long func_2b449234c47b48a3a863bdbd2128d4b1(int N, long[] counts) { 
 final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
long answer = 0L;
return answer;
}


public static long[] func_1354726a852d4842831d5c8292d43b03(int N, long r, long s, long p, long q) { 
 final long[] counts = new long[N];
for (int i = 0; i < N; i++) counts[i] = (i * p + q) % r + s;
final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
long answer = 0L;
return counts;
}


*********************************

#### Score: 6.46944


#### Java Tokens: counts, sums 

public static long[] func_ae9ba4b9b8d04fd5a0e331b4ee27bd47(int N, long[] counts) { 
 final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
return sums;
}


public static long[] func_b4724337b76a451aafaf26f38719ac95(int N, long r, long s, long p, long q) { 
 final long[] counts = new long[N];
for (int i = 0; i < N; i++) counts[i] = (i * p + q) % r + s;
final long[] sums = new long[N + 1];
return counts;
}


public static long[] func_ef09f120b5934329b234870dbe057a99(int N, long r, long s, long p, long q) { 
 final long[] counts = new long[N];
for (int i = 0; i < N; i++) counts[i] = (i * p + q) % r + s;
final long[] sums = new long[N + 1];
return sums;
}


*********************************

#### Score: 5.34334


#### Java Tokens: leftcount, left, count, start, sums 

public static long func_1ebe6209d48640819163dbe468685cee(int start, long[] sums) { 
 final long leftCount = sums[start];
int left = start;
return leftCount;
}


public static int func_e8001cb499d94023bc7a722dadbad7c3(int start, long[] sums) { 
 final long leftCount = sums[start];
int left = start;
return left;
}


*********************************

#### Score: 5.05589


#### Java Tokens: leftcount, left, count, start, right, sums 

public static int func_6fbc1e9cc5e042f986f51f4121965e05(int start, int N, long[] sums) { 
 final long leftCount = sums[start];
int left = start;
int right = N;
return right;
}


public static long func_6ffed488992345f39d75853b3726a1b6(int start, int N, long[] sums) { 
 final long leftCount = sums[start];
int left = start;
int right = N;
return leftCount;
}


public static int func_c274efa0849d4bb598bfb28e84affec2(int start, int N, long[] sums) { 
 final long leftCount = sums[start];
int left = start;
int right = N;
return left;
}


*********************************

#### Score: 4.57140


#### Java Tokens: middle, rightcount, count, start, mid, right, midcount, sums 

public static long func_bb58fa4970a243e197a58a668305b78c(int middle, int start, int N, long[] sums) { 
 final long midCount = sums[middle] - sums[start];
final long rightCount = sums[N] - sums[middle];
return rightCount;
}


public static long func_47be7ec7f03247d9b3461be640888ed1(int middle, int start, int N, long[] sums) { 
 final long midCount = sums[middle] - sums[start];
final long rightCount = sums[N] - sums[middle];
return midCount;
}


*********************************

#### Score: 4.57140


#### Java Tokens: boundary, rightcount, count, start, mid, right, midcount, sums 

public static long func_e847fbff37a34c77991118176011c3a2(int boundary, int start, int N, long[] sums) { 
 final long midCount = sums[boundary] - sums[start];
final long rightCount = sums[N] - sums[boundary];
return midCount;
}


public static long func_a2819dbf1c5f4ac9911aa226ef02e3af(int boundary, int start, int N, long[] sums) { 
 final long midCount = sums[boundary] - sums[start];
final long rightCount = sums[N] - sums[boundary];
return rightCount;
}


*********************************

#### Score: 4.57140


#### Java Tokens: middle, left, count, start, mid, right, midcount, sums 

public static long func_d70fd835a8fd4f5abde813c6aca65ca8(int right, int start, int left, long[] sums) { 
 final int middle = (left + right) >> 1;
final long midCount = sums[middle] - sums[start];
return midCount;
}


public static int func_a8f808d1042c44d59eefbd967b54c230(int right, int start, int left, long[] sums) { 
 final int middle = (left + right) >> 1;
final long midCount = sums[middle] - sums[start];
return middle;
}


*********************************

#### Score: 4.57140


#### Java Tokens: array, utils, qty, count, arrayutils, partialsums, partial, sums 

public static int[] func_c11095a27d31464dae8cf30052edd45d(int r, int count, int q, int s, long p) { 
 int[] qty = new int[count];
for (int i = 0; i < count; i++) qty[i] = (int) ((i * p + q) % r + s);
long[] partial = ArrayUtils.partialSums(qty);
return qty;
}


public static long[] func_6f2b60e801b345af8c7c8f4f77e8bc90(int r, int count, int q, int s, long p) { 
 int[] qty = new int[count];
for (int i = 0; i < count; i++) qty[i] = (int) ((i * p + q) % r + s);
long[] partial = ArrayUtils.partialSums(qty);
return partial;
}


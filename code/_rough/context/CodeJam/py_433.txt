### Py Tokens: xrange, true, reverse, append, sorted 

### Py functions

def func_4feadf437c9c464486f3fd2710944142(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    return i

def func_7075035b461947a1b61699c57f8616dc(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    return x

*********************************

#### Score: 4.19640


#### Java Tokens: add, sortedset, sorted, set, tree, integer, treeset 

public static SortedSet<Integer> func_908a1fb2d6ea4b70bac7de1f0210bf2e(int l, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
return xs;
}


public static SortedSet<Integer> func_33d30156f21a452c9e7e9783fd47a69d(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
return xs;
}


*********************************

#### Score: 3.99921


#### Java Tokens: add, sortedset, sorted, set, size, tree, integer, treeset 

public static SortedSet<Integer> func_4ce0a44eab0542dfa8546f1c61bacac4(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return xs;
}


public static int[] func_1fe4188d08b24ee0990c1d1b63842dc2(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return nx;
}


public static int[] func_900079f612634215823886119e9e27bb(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
return nx;
}


*********************************

#### Score: 3.82166


#### Java Tokens: add, sortedset, sorted, set, size, tree, length, integer, treeset 

public static int[] func_6a5e7e859297479b9467357300fe07c1(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return nx;
}


public static SortedSet<Integer> func_ce9d48e027814f3992228953ecdf796f(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return xs;
}


public static double[] func_985ac19939df45b0aa6e6fb24e535b72(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return ny;
}


*********************************

#### Score: 2.62190


#### Java Tokens: outs, system, flush, nanotime, nano, #%d:, end, time, case, append, printf 

public static long func_799099a8971f4532b6050771e8e597e7(int n, String[] outs, PrintWriter out) { 
 for (int i = 0; i < n; i++) {
    out.printf("Case #%d: ", i + 1);
    out.append(outs[i]);
    out.flush();
}
long end = System.nanoTime();
return end;
}


*********************************

#### Score: 2.44020


#### Java Tokens: add, string, max, index, integer, arraylist, list, result, size, array, builder, stringbuilder, append 

public static boolean[] func_8a7bff4180934947805842e57e503277(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return u;
}


public static StringBuilder func_40420e1a67264bd89dd150fbc26cf837(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb;
}


public static List<Integer> func_f05ac0d737f747fb9cfb0f670154f4d8(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return result;
}


*********************************

#### Score: 2.44020


#### Java Tokens: nanotime, nano, #%d:, start, printf, outs, println, system, flush, end, time, case, append 

public static long func_da0a87abc61443d385dbc01fa8ced803(int n, long start, String[] outs, PrintWriter out) { 
 for (int i = 0; i < n; i++) {
    out.printf("Case #%d: ", i + 1);
    out.append(outs[i]);
    out.flush();
}
long end = System.nanoTime();
System.out.println((end - start) / 1000000 + "ms");
return end;
}


*********************************

#### Score: 2.36021


#### Java Tokens: add, string, max, index, integer, arraylist, list, result, size, array, builder, stringbuilder, tostring, append 

public static String func_dbd49d09a3f54cc3b5d46ee5429439bd(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


public static String func_ed0632d1aaa74b17b354a457766e2b01(int N, int[] P, boolean[] u) { 
 List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


*********************************

#### Score: 2.21797


#### Java Tokens: outpath, prod, nanotime, inpath, nano, #%d:, start, printf, outs, println, system, flush, end, time, case, append 

public static long func_7789cab16a2d4544b5f91ad58bc5c687(int n, long start, String[] outs, PrintWriter out) { 
 for (int i = 0; i < n; i++) {
    out.printf("Case #%d: ", i + 1);
    out.append(outs[i]);
    out.flush();
}
long end = System.nanoTime();
System.out.println((end - start) / 1000000 + "ms");
if (A.PROD) {
    System.out.println("INPATH : " + A.INPATH);
    System.out.println("OUTPATH : " + A.OUTPATH);
}
return end;
}


*********************************

#### Score: 1.98840


#### Java Tokens: next, add, nextint, string, max, index, integer, arraylist, list, int, result, input, task, size, array, builder, task1, stringbuilder, tostring, append 

public static String func_9cf9966f1e7d481ebca3573a8491c997(int N) { 
 int[] L = new int[N];
for (int i = 0; i < N; i++) {
    L[i] = Task1.input.nextInt();
}
int[] P = new int[N];
for (int i = 0; i < N; i++) {
    P[i] = Task1.input.nextInt();
}
boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


public static String func_8887556108dd485dbac4c9cc32c9b0af(int N) { 
 int[] P = new int[N];
for (int i = 0; i < N; i++) {
    P[i] = Task1.input.nextInt();
}
boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


public static String func_e049ea8d9753483b8ebe0584e699d86c(int N, int[] L) { 
 for (int i = 0; i < N; i++) {
    L[i] = Task1.input.nextInt();
}
int[] P = new int[N];
for (int i = 0; i < N; i++) {
    P[i] = Task1.input.nextInt();
}
boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


*********************************

#### Score: 0.43437


#### Java Tokens: next, area, println, irregularcakes, part, irregular, cakes 

public static double func_9b932effc3ed4da4b1b5fcd52925f5d3(int W, double part) { 
 double lb = 0;
double ub = W;
while (ub - lb > 0.000000001) {
    double next = (ub + lb) / 2;
    double area = IrregularCakes.area(next);
    if (area > part) {
        ub = next;
    } else {
        lb = next;
    }
}
IrregularCakes.out.println(lb);
return ub;
}


public static double func_9e53938a4375458c87dac84506b255ef(double ub, double part, double lb) { 
 while (ub - lb > 0.000000001) {
    double next = (ub + lb) / 2;
    double area = IrregularCakes.area(next);
    if (area > part) {
        ub = next;
    } else {
        lb = next;
    }
}
IrregularCakes.out.println(lb);
return lb;
}


public static double func_d734fc60f73449708bc872e3e25b145a(double ub, double part, double lb) { 
 while (ub - lb > 0.000000001) {
    double next = (ub + lb) / 2;
    double area = IrregularCakes.area(next);
    if (area > part) {
        ub = next;
    } else {
        lb = next;
    }
}
IrregularCakes.out.println(lb);
return ub;
}


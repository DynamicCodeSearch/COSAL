### Py Tokens: slope, target, todo, eat, sqrt 

### Py functions

def func_165801f8ff874686abdf7eba2cd5b2b8(Eat, L, i, target):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return y1

def func_887e1951ecad4bb08908d56616202aec(Eat, L, i, target):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return todo

def func_18eb1398e00749f0869882eec136d967(Eat, L, i, target):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return i

def func_3bc1a14c4d934668b311310121782a1b(Eat, L, i, target):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return target

def func_de5914a9028a4734b0f6666872c98c21(Eat, L, i, target):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x0

*********************************

#### Score: 6.57976


#### Java Tokens: sqrt, math 

public static double func_44a352339d634cb29891c263f0e6249b(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return d;
}


public static double func_0ce2725bd9c9403191aa2321c702c0d8(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
return x2;
}


public static double func_0d9ce693d3f6403b889833d31e64791f(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return x2;
}


*********************************

#### Score: 6.14323


#### Java Tokens: sqrt, remain, math 

public static double func_06fca538ae86406d98f30b655404918a(double k, double remain, double x, double y, double a) { 
 double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
return x2;
}


public static double func_974990c63beb4acbb6815638e81568f9(double k, double remain, double x, double y) { 
 double a = k;
double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return x2;
}


public static double func_da939346f93c492bb76d8e9a0b5bbeff(double k, double remain, double x, double y, double a) { 
 double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return c;
}


*********************************

#### Score: 6.14323


#### Java Tokens: sqrt, math, discr 

public static double func_737b9027879e41dc875f37a059f5ad46(double g, double a, double b, double c) { 
 double discr = b * b - 4 * a * c;
g = (-b + Math.sqrt(discr)) / (2 * a);
return discr;
}


public static double func_d0c5b7ceb5694757bc1ecef11d924fa7(double g, double a, double b, double c) { 
 double discr = b * b - 4 * a * c;
g = (-b + Math.sqrt(discr)) / (2 * a);
return g;
}


*********************************

#### Score: 5.57402


#### Java Tokens: area, lastx, target 

public static double func_373a3869f55643a2a840009a1e4b1553(double area) { 
 double lastx = 0;
double target = area / A.G;
return lastx;
}


public static double func_171e573e7d07460ebeacc3f38fb921c4(double area) { 
 double lastx = 0;
double target = area / A.G;
return target;
}


*********************************

#### Score: 5.43308


#### Java Tokens: res, sqrt, max, want, math 

public static double func_737e0ce9fc5148b78da051589cd67681(double k, double d1, double want) { 
 double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
double res = (t - d1) / k;
return res;
}


public static double func_c0a4fa8d79514ba0bfe32dfe2ddab429(double k, double d1, double want) { 
 double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
double res = (t - d1) / k;
return t;
}


*********************************

#### Score: 5.23314


#### Java Tokens: area, mid, lastx, target 

public static double func_76b992678fe04896a770ba511822037e(double target, double hi, double lastx, double lo) { 
 double mid = 0;
while (hi - lo > 0.00000000001) {
    mid = (hi + lo) / 2;
    double ar = A.area(lastx, mid);
    if (ar > target)
        hi = mid;
    else
        lo = mid;
}
return mid;
}


public static double func_f18c6f66f58b4b7ea68f9c44485ea83e(double target, double hi, double mid, double lastx, double lo) { 
 double ar = A.area(lastx, mid);
if (ar > target)
    hi = mid;
else
    lo = mid;
return ar;
}


public static double func_6de328ecd5274080a8cd6f632a06bf56(double target, double hi, double mid, double lastx, double lo) { 
 double ar = A.area(lastx, mid);
if (ar > target)
    hi = mid;
else
    lo = mid;
return hi;
}


*********************************

#### Score: 5.14037


#### Java Tokens: abs, sqrt, e-11, math, discr 

public static double func_01531d58c343421fbdf74789256cf7e4(double a, double b, double c) { 
 double g = 0;
if (Math.abs(a) >= 1e-11) {
    double discr = b * b - 4 * a * c;
    g = (-b + Math.sqrt(discr)) / (2 * a);
} else {
    g = -c / b;
}
return g;
}


*********************************

#### Score: 5.14037


#### Java Tokens: sqrt, sumsquares, squares, sum, math, value 

public static double func_74051525cd4f41fca60d8accf85c6091(double sumSquares, double[] x) { 
 for (double value : x) sumSquares += value * value;
return Math.sqrt(sumSquares);

}


public static double func_b9c6f5c4da284a55ae288840ab4dddbc(double[] x) { 
 double sumSquares = 0;
for (double value : x) sumSquares += value * value;
return Math.sqrt(sumSquares);

}


*********************************

#### Score: 4.93467


#### Java Tokens: area, total, goal, totalarea, target 

public static double func_bca5d501815744b1bdd898c4eed5cfbf(int g, double totalArea) { 
 double goal = totalArea / g;
double target = 0.0;
return goal;
}


public static double func_d77f18287a9f49f39a6340e17ed70abb(int g, double totalArea) { 
 double goal = totalArea / g;
double target = 0.0;
return target;
}


*********************************

#### Score: 4.88005


#### Java Tokens: e-9, abs, sqrt, max, want, math 

public static double func_5cd9200d5c114bba822cb37ede55a524(double d2, double d1, double want, double dx) { 
 double k = (d2 - d1) / dx;
if (Math.abs(k) < 1e-9) {
    return want / d1;
}
double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
return k;
}


public static double func_f8ef227c3cde4ce88dcdf48e6db853bd(double k, double d1, double want) { 
 if (Math.abs(k) < 1e-9) {
    return want / d1;
}
double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
return t;
}


public static double func_9aadba8cdf1c47b7a0dfbd6f5323a43e(double d2, double d1, double want, double dx) { 
 double k = (d2 - d1) / dx;
if (Math.abs(k) < 1e-9) {
    return want / d1;
}
double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
return t;
}


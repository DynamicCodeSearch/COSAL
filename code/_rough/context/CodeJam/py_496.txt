### Py Tokens: loss, range, ans, min, outcome 

### Py functions

def func_4f65a4babb4c4deeb007a258885d376a(X, loss, my):
    ans = -loss
    outcome = min([(my[i] + X[i]) for i in range(37)])
    return loss

def func_05e71baba0b140268b852f90122b5346(X, loss, my):
    ans = -loss
    outcome = min([(my[i] + X[i]) for i in range(37)])
    return outcome

def func_f86dc7616db64762bbb2fc12300b320a(X, loss, my):
    ans = -loss
    outcome = min([(my[i] + X[i]) for i in range(37)])
    return ans

*********************************

#### Score: 5.51464


#### Java Tokens: min, max, ans, sum, math 

public static int func_18e0d7a3a9004e878e1bb3e739bfcbf6(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return l;
}


public static long func_86e361714b204771a5224d744686e8da(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return ans;
}


public static long func_1bd1c810a74e498e9723f78d4fe9cfda(int n, int i, int l, long ans, long[] sum) { 
 while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
    l++;
}
ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
return ans;
}


*********************************

#### Score: 5.51464


#### Java Tokens: min, max, ans, length, math 

public static long func_9327ba5dc49f4a99a27336e31b9e9a93(long sr, long sm, long sl, long[] a) { 
 long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sr;
}


public static int func_68eaf40520ca454dbdbff670ea5a2422(long ans, long sr, long sm, long sl, long[] a) { 
 int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return l;
}


public static int func_e2c12373faae4b4391a538ad649d66ab(long sr, long sm, long sl, long[] a) { 
 long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return l;
}


*********************************

#### Score: 5.21716


#### Java Tokens: res, min, max, ans, sum, math 

public static int func_047b1e0c188c41b7a93977a8a64ae3f3(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return l;
}


public static int func_330173ad6bbb49649ae4310602de4188(int n, long ans, long[] sum) { 
 int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return l;
}


public static long func_692cf403b4954663b037b51f4188faa5(int n, int l, long ans, long[] sum) { 
 for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return ans;
}


*********************************

#### Score: 5.21716


#### Java Tokens: min, max, ans, length, sum, math 

public static long func_71e798a67e324fefbe8af096684cdfe2(long sm, long sl, long[] a) { 
 long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sum;
}


public static long func_23fdec310e3d45b2a1f3a29c6c33fd64(long sl, long[] a) { 
 long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sl;
}


public static long func_bbd2f72de3de4d6996fbe2d6c103e060(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sr;
}


*********************************

#### Score: 5.21716


#### Java Tokens: min, ans, math, right, highx, highy 

public static double func_596807fa9adc4495b37ce8d92a82a6be(int l, double ans, double ax, double right) { 
 double bx = Math.min(A.highx[l + 1], right);
double ay = A.highy[l];
double by = A.highy[l + 1];
if (ax > A.highx[l]) {
    ay = A.highy[l] + (ax - A.highx[l]) / (A.highx[l + 1] - A.highx[l]) * (A.highy[l + 1] - A.highy[l]);
}
if (bx < A.highx[l + 1]) {
    by = A.highy[l + 1] + (bx - A.highx[l + 1]) / (A.highx[l] - A.highx[l + 1]) * (A.highy[l] - A.highy[l + 1]);
}
ans -= (bx - ax) * (1000 - (ay + by) / 2);
return bx;
}


public static double func_18e523fbf4f74167b88a4bd8b36124d0(int l, double ans, double ax, double right) { 
 double bx = Math.min(A.highx[l + 1], right);
double ay = A.highy[l];
double by = A.highy[l + 1];
if (ax > A.highx[l]) {
    ay = A.highy[l] + (ax - A.highx[l]) / (A.highx[l + 1] - A.highx[l]) * (A.highy[l + 1] - A.highy[l]);
}
if (bx < A.highx[l + 1]) {
    by = A.highy[l + 1] + (bx - A.highx[l + 1]) / (A.highx[l] - A.highx[l + 1]) * (A.highy[l] - A.highy[l + 1]);
}
ans -= (bx - ax) * (1000 - (ay + by) / 2);
return ans;
}


public static double func_28766144c312418db387f8369ae39c8b(int l, double ans, double ax, double right) { 
 double bx = Math.min(A.highx[l + 1], right);
double ay = A.highy[l];
double by = A.highy[l + 1];
if (ax > A.highx[l]) {
    ay = A.highy[l] + (ax - A.highx[l]) / (A.highx[l + 1] - A.highx[l]) * (A.highy[l + 1] - A.highy[l]);
}
if (bx < A.highx[l + 1]) {
    by = A.highy[l + 1] + (bx - A.highx[l + 1]) / (A.highx[l] - A.highx[l + 1]) * (A.highy[l] - A.highy[l + 1]);
}
ans -= (bx - ax) * (1000 - (ay + by) / 2);
return by;
}


*********************************

#### Score: 5.21716


#### Java Tokens: min, max, ans, pref, sum, math 

public static long func_30c835fdb9ca4979818148535431f2be(int t, long rs, long sum, long max, long[] pref) { 
 long ans = rs;
ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
max = Math.min(max, ans);
return ans;
}


public static long func_cac459492e1c4e069037e8565f66fc81(int t, long rs, long sum, long max, long[] pref) { 
 long ans = rs;
ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
max = Math.min(max, ans);
return max;
}


public static long func_c99dc47448f64c609053987de2c6f9bf(int t, long ans, long sum, long max, long[] pref) { 
 ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
max = Math.min(max, ans);
return max;
}


*********************************

#### Score: 5.21716


#### Java Tokens: min, lowx, lowy, ans, math, right 

public static double func_2210287997234621b24c0b9da9dc4c43(int l, double ans, double ax, double right) { 
 double bx = Math.min(A.lowx[l + 1], right);
double ay = A.lowy[l];
double by = A.lowy[l + 1];
if (ax > A.lowx[l]) {
    ay = A.lowy[l] + (ax - A.lowx[l]) / (A.lowx[l + 1] - A.lowx[l]) * (A.lowy[l + 1] - A.lowy[l]);
}
if (bx < A.lowx[l + 1]) {
    by = A.lowy[l + 1] + (bx - A.lowx[l + 1]) / (A.lowx[l] - A.lowx[l + 1]) * (A.lowy[l] - A.lowy[l + 1]);
}
ans -= (bx - ax) * ((ay + by) / 2 + 1000);
return ans;
}


public static double func_6e3c7901d9bd4ac5835d7b672cbdf709(int l, double ans, double ax, double right) { 
 double bx = Math.min(A.lowx[l + 1], right);
double ay = A.lowy[l];
double by = A.lowy[l + 1];
if (ax > A.lowx[l]) {
    ay = A.lowy[l] + (ax - A.lowx[l]) / (A.lowx[l + 1] - A.lowx[l]) * (A.lowy[l + 1] - A.lowy[l]);
}
if (bx < A.lowx[l + 1]) {
    by = A.lowy[l + 1] + (bx - A.lowx[l + 1]) / (A.lowx[l] - A.lowx[l + 1]) * (A.lowy[l] - A.lowy[l + 1]);
}
ans -= (bx - ax) * ((ay + by) / 2 + 1000);
return bx;
}


public static double func_aa30f7f605974fef857c6c44687e2e7c(int l, double ans, double ax, double right) { 
 double bx = Math.min(A.lowx[l + 1], right);
double ay = A.lowy[l];
double by = A.lowy[l + 1];
if (ax > A.lowx[l]) {
    ay = A.lowy[l] + (ax - A.lowx[l]) / (A.lowx[l + 1] - A.lowx[l]) * (A.lowy[l + 1] - A.lowy[l]);
}
if (bx < A.lowx[l + 1]) {
    by = A.lowy[l + 1] + (bx - A.lowx[l + 1]) / (A.lowx[l] - A.lowx[l + 1]) * (A.lowy[l] - A.lowy[l + 1]);
}
ans -= (bx - ax) * ((ay + by) / 2 + 1000);
return ay;
}


*********************************

#### Score: 4.95259


#### Java Tokens: min, third, max, ans, math, first, second 

public static long func_afafb4dffcba42a6a6919612545a2461(int j, int i, long third, long ans, long[] A) { 
 long first = A[j + 2];
long second = A[i + 1] - A[j + 2];
ans = Math.min(ans, Math.max(first, Math.max(second, third)));
return first;
}


public static long func_4acad57935d34f28b57f3066b870ebec(int j, int i, long third, long ans, long[] A) { 
 long first = A[j + 1];
long second = A[i + 1] - A[j + 1];
ans = Math.min(ans, Math.max(first, Math.max(second, third)));
return first;
}


public static long func_6bb8fbc65b424efabcabb0db7f50f2c2(int j, int i, long third, long ans, long[] A) { 
 while (j < i && A[i + 1] - A[j + 2] > A[j + 2]) j++;
{
    long first = A[j + 1];
    long second = A[i + 1] - A[j + 1];
    ans = Math.min(ans, Math.max(first, Math.max(second, third)));
}
return ans;
}


*********************************

#### Score: 4.95259


#### Java Tokens: min, getmin, ans, get, bets, win, getwin 

public static long[] func_c1f6f426706946bbad64f400ca9d859e(int N, int W, long b, long[] x) { 
 long[] bets = new long[N];
double ans = 0;
for (int i = 1; i <= b; i++) {
    long min = A.getMin(x);
    for (int j = 0; j < N; j++) {
        if (x[j] == min) {
            x[j]++;
            bets[j]++;
            break;
        }
    }
    double win = A.getWin(x, bets, W) - i;
    /*System.out.println(i + " " + min + " " + win);
				System.out.println(Arrays.toString(x));
				System.out.println(Arrays.toString(bets));
				System.out.println("------------------");*/
    if (win > ans)
        ans = win;
}
return bets;
}


public static double func_b3f54aa5b66f48c1a86d4e4f2564b58b(int N, int W, long b, long[] x, long[] bets) { 
 double ans = 0;
for (int i = 1; i <= b; i++) {
    long min = A.getMin(x);
    for (int j = 0; j < N; j++) {
        if (x[j] == min) {
            x[j]++;
            bets[j]++;
            break;
        }
    }
    double win = A.getWin(x, bets, W) - i;
    /*System.out.println(i + " " + min + " " + win);
				System.out.println(Arrays.toString(x));
				System.out.println(Arrays.toString(bets));
				System.out.println("------------------");*/
    if (win > ans)
        ans = win;
}
return ans;
}


public static double func_a90e5c378c5642ca8d079921162da582(int N, int W, long b, long[] x) { 
 long[] bets = new long[N];
double ans = 0;
for (int i = 1; i <= b; i++) {
    long min = A.getMin(x);
    for (int j = 0; j < N; j++) {
        if (x[j] == min) {
            x[j]++;
            bets[j]++;
            break;
        }
    }
    double win = A.getWin(x, bets, W) - i;
    /*System.out.println(i + " " + min + " " + win);
				System.out.println(Arrays.toString(x));
				System.out.println(Arrays.toString(bets));
				System.out.println("------------------");*/
    if (win > ans)
        ans = win;
}
return ans;
}


*********************************

#### Score: 4.71576


#### Java Tokens: min, left, max, lowx, ans, lowy, right, math 

public static double func_e03f2c89681e4755b0cb9b2385aa6a0c(double right, double left) { 
 double ans = 2000 * (right - left);
for (int l = 0; l < A.L - 1; l++) {
    if (A.lowx[l + 1] < left || A.lowx[l] > right)
        continue;
    double ax = Math.max(A.lowx[l], left);
    double bx = Math.min(A.lowx[l + 1], right);
    double ay = A.lowy[l];
    double by = A.lowy[l + 1];
    if (ax > A.lowx[l]) {
        ay = A.lowy[l] + (ax - A.lowx[l]) / (A.lowx[l + 1] - A.lowx[l]) * (A.lowy[l + 1] - A.lowy[l]);
    }
    if (bx < A.lowx[l + 1]) {
        by = A.lowy[l + 1] + (bx - A.lowx[l + 1]) / (A.lowx[l] - A.lowx[l + 1]) * (A.lowy[l] - A.lowy[l + 1]);
    }
    ans -= (bx - ax) * ((ay + by) / 2 + 1000);
}
return ans;
}


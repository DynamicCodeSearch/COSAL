### Py Tokens: map, range, split, readline, float, append 

### Py functions

def func_fa8d568efe2840c5a158da8650377d6c(L, U, fi, l, u):
    S = 0
    for i in range(l):
        x, y = map(float, fi.readline().split())
        L.append((x, y))
        if i > 0:
            S -= (L[i][1] + L[i - 1][1]) * (L[i][0] - L[i - 1][0])
    for i in range(u):
        x, y = map(float, fi.readline().split())
        U.append((x, y))
        if i > 0:
            S += (U[i][1] + U[i - 1][1]) * (U[i][0] - U[i - 1][0])
    i, j = 0, 0
    return S

def func_5421bc9820134dd99633fd609d7020c0(L, U, fi, l, u):
    S = 0
    for i in range(l):
        x, y = map(float, fi.readline().split())
        L.append((x, y))
        if i > 0:
            S -= (L[i][1] + L[i - 1][1]) * (L[i][0] - L[i - 1][0])
    for i in range(u):
        x, y = map(float, fi.readline().split())
        U.append((x, y))
        if i > 0:
            S += (U[i][1] + U[i - 1][1]) * (U[i][0] - U[i - 1][0])
    return S

def func_f48f0df2919449e597f1ea91ab39e0b9(fi, l, u):
    L, U = [], []
    S = 0
    for i in range(l):
        x, y = map(float, fi.readline().split())
        L.append((x, y))
        if i > 0:
            S -= (L[i][1] + L[i - 1][1]) * (L[i][0] - L[i - 1][0])
    for i in range(u):
        x, y = map(float, fi.readline().split())
        U.append((x, y))
        if i > 0:
            S += (U[i][1] + U[i - 1][1]) * (U[i][0] - U[i - 1][0])
    return L

def func_8e30ed2d29ff49ff9115af31f0d3d931(L, fi, l):
    S = 0
    for i in range(l):
        x, y = map(float, fi.readline().split())
        L.append((x, y))
        if i > 0:
            S -= (L[i][1] + L[i - 1][1]) * (L[i][0] - L[i - 1][0])
    return L

def func_48ad613973e24498a5cbb11607e82466(L, U, fi, l, u):
    S = 0
    for i in range(l):
        x, y = map(float, fi.readline().split())
        L.append((x, y))
        if i > 0:
            S -= (L[i][1] + L[i - 1][1]) * (L[i][0] - L[i - 1][0])
    for i in range(u):
        x, y = map(float, fi.readline().split())
        U.append((x, y))
        if i > 0:
            S += (U[i][1] + U[i - 1][1]) * (U[i][0] - U[i - 1][0])
    return S

*********************************

#### Score: 4.44365


#### Java Tokens: split, string, trim, line 

public static double[] func_de3a96ea49a441999168791bd2f96e09(int n, String line) { 
 String[] ss = line.trim().split(" ");
double[] l = new double[n];
return l;
}


public static String[] func_b4974e8e9363455792fd54d845a37f4a(int n, String line) { 
 String[] ss = line.trim().split(" ");
double[] l = new double[n];
return ss;
}


*********************************

#### Score: 4.44365


#### Java Tokens: split, trim, \s+, line 

public static String[] func_25b90e8e1098474fac3336d0bce37fc5(String line) { 
 if (line == null)
    return null;
return line.trim().split("\\s+");

}


public static String[] func_1f59c1d4a9344a6b853d00f3689bb53e(String line) { 
 if (line == null)
    return null;
return line.trim().split("\\s+");

}


*********************************

#### Score: 3.97412


#### Java Tokens: println, system, split, string, trim, line 

public static double[] func_9c67c7d6aee64322bd546ba81fc30fdb(int n, String line) { 
 System.out.println(line);
String[] ss = line.trim().split(" ");
double[] l = new double[n];
return l;
}


public static String[] func_0ad43d263a4d4d45b74d9545d11cd9b4(int n, String line) { 
 System.out.println(line);
String[] ss = line.trim().split(" ");
double[] l = new double[n];
return ss;
}


public static String[] func_721614ebd5444a7697fbeed6bd5a0e70(String line) { 
 System.out.println(line);
String[] ss = line.trim().split(" ");
return ss;
}


*********************************

#### Score: 3.77832


#### Java Tokens: split, string, trim, line, valueof, integer, value 

public static String[] func_873adf40e304486282720947e0b3c359(int n, String line) { 
 String[] ss = line.trim().split(" ");
double[] l = new double[n];
for (int j = 0; j < n; j++) {
    l[j] = Integer.valueOf(ss[j]);
}
return ss;
}


public static double[] func_1f4f76e9b1814f689a470444aa9bc492(int n, String line) { 
 String[] ss = line.trim().split(" ");
double[] l = new double[n];
for (int j = 0; j < n; j++) {
    l[j] = Integer.valueOf(ss[j]);
}
return l;
}


*********************************

#### Score: 3.67865


#### Java Tokens: exception, print, stack, trace, read, printstacktrace, reader, line, readline 

public static String func_335a86d6a087483098db66b9fbc14a2b(String w) { 
 try {
    w = A.reader.readLine();
} catch (Exception e) {
    e.printStackTrace();
}
if (w == null)
    return null;
return w;
}


*********************************

#### Score: 3.44522


#### Java Tokens: println, system, split, string, trim, line, valueof, integer, value 

public static String[] func_3f0ffa82a6df495491483c4bc7882d07(int n, String line) { 
 System.out.println(line);
String[] ss = line.trim().split(" ");
double[] l = new double[n];
for (int j = 0; j < n; j++) {
    l[j] = Integer.valueOf(ss[j]);
}
return ss;
}


public static double[] func_9c7b33645e7a4441b4678bb6fd59590c(int n, String line) { 
 System.out.println(line);
String[] ss = line.trim().split(" ");
double[] l = new double[n];
for (int j = 0; j < n; j++) {
    l[j] = Integer.valueOf(ss[j]);
}
return l;
}


*********************************

#### Score: 3.13968


#### Java Tokens: exception, stack, read, string, reader, line, stringtokenizer, tokenizer, tok, print, trace, printstacktrace, readline 

public static String func_029f3183e9e64daea326c5f49a2f51b9(String w) { 
 try {
    w = A.reader.readLine();
} catch (Exception e) {
    e.printStackTrace();
}
if (w == null)
    return null;
A.tok = new StringTokenizer(w);
return w;
}


*********************************

#### Score: 2.62190


#### Java Tokens: outs, system, flush, nanotime, nano, #%d:, end, time, case, append, printf 

public static long func_799099a8971f4532b6050771e8e597e7(int n, String[] outs, PrintWriter out) { 
 for (int i = 0; i < n; i++) {
    out.printf("Case #%d: ", i + 1);
    out.append(outs[i]);
    out.flush();
}
long end = System.nanoTime();
return end;
}


*********************************

#### Score: 2.44020


#### Java Tokens: add, string, max, index, integer, arraylist, list, result, size, array, builder, stringbuilder, append 

public static boolean[] func_8a7bff4180934947805842e57e503277(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return u;
}


public static StringBuilder func_40420e1a67264bd89dd150fbc26cf837(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb;
}


public static List<Integer> func_f05ac0d737f747fb9cfb0f670154f4d8(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return result;
}


*********************************

#### Score: 2.44020


#### Java Tokens: nanotime, nano, #%d:, start, printf, outs, println, system, flush, end, time, case, append 

public static long func_da0a87abc61443d385dbc01fa8ced803(int n, long start, String[] outs, PrintWriter out) { 
 for (int i = 0; i < n; i++) {
    out.printf("Case #%d: ", i + 1);
    out.append(outs[i]);
    out.flush();
}
long end = System.nanoTime();
System.out.println((end - start) / 1000000 + "ms");
return end;
}


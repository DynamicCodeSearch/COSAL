### Py Tokens: part1, part2, part3, ans, sum 

### Py functions

def func_d128d351adc34e0792e4a8610c60c9e6(_sum, part1, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2

*********************************

#### Score: 6.82499


#### Java Tokens: ans, sum 

public static long func_bc38d43479c7406485a53ceaa45ae0a1(int n, long[] sum) { 
 long ans = 0;
for (int i = 1; i <= n; i++) {
    if (sum[i] - sum[i - 1] > ans)
        ans = sum[i] - sum[i - 1];
}
return ans;
}


public static long func_5defe1b937b6430ba7bc0d4401f903a2(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
return ans;
}


public static int func_6e6bafea928642778f3ccd56a105411b(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
return l;
}


*********************************

#### Score: 6.37104


#### Java Tokens: tmp, ans, sum 

public static int func_ff08b18e83f74f0488b0c31f904e19e5(int n, long sum, long[] a) { 
 int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
double ans = 0;
return x;
}


public static int func_ec29c5e7324e45c9b7bbcfa5dc32c050(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
double ans = 0;
return x;
}


public static double func_c75cc9b0bb244c6ba7bd32958fde4411(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
double ans = 0;
return ans;
}


*********************************

#### Score: 6.37104


#### Java Tokens: rest, ans, sum 

public static double func_7694e125876a4c4abbe6b9fdcfae8f95(int n, int r, int s, int q, long p) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((i * p + q) % r) + s;
    sum += a[i];
}
long t1 = 0;
long t2 = 0;
long rest = sum;
int j = 0;
double ans = 0;
return ans;
}


public static long func_080b7b1b30fd406e9f098d231ca6e988(long sum) { 
 long rest = sum;
int j = 0;
double ans = 0;
return rest;
}


public static double func_3208ffaf1e8c4fbb983eb754165ebb35(long sum) { 
 long t2 = 0;
long rest = sum;
int j = 0;
double ans = 0;
return ans;
}


*********************************

#### Score: 6.37104


#### Java Tokens: res, ans, sum 

public static double func_8d96272bc88f4841b69f081ee748d2dd(int n, long ans, long[] sum) { 
 for (int i = 1; i <= n; i++) {
    if (sum[i] - sum[i - 1] > ans)
        ans = sum[i] - sum[i - 1];
}
double res = (double) ans / sum[n];
return res;
}


public static long func_8381cf9fcd9c4211a9f2e8ebe0130044(int n, long[] sum) { 
 long ans = 0;
for (int i = 1; i <= n; i++) {
    if (sum[i] - sum[i - 1] > ans)
        ans = sum[i] - sum[i - 1];
}
double res = (double) ans / sum[n];
return ans;
}


public static long func_58d4f2ef9f9541209750125e5672ac28(int n, long ans, long[] sum) { 
 for (int i = 1; i <= n; i++) {
    if (sum[i] - sum[i - 1] > ans)
        ans = sum[i] - sum[i - 1];
}
double res = (double) ans / sum[n];
return ans;
}


*********************************

#### Score: 5.97730


#### Java Tokens: max, ans, sum, math 

public static long func_65c7102b82d645fa9e0c8269aacf7830(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
return sum;
}


public static long func_9aa7155d934f46c3af0e2c5b9c19a04c(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return ans;
}


public static long func_5d136f36cafa4e3683a603b6a16cb250(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return sum;
}


*********************************

#### Score: 5.63255


#### Java Tokens: rest, max, ans, sum, math 

public static double func_bb4ba1ec4c034036acf127b6ee13fe8c(int n, long sum, long[] a) { 
 long t1 = 0;
long t2 = 0;
long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return ans;
}


public static int func_49b97a1175c44377bb1beda711591c0f(int n, long sum, long[] a) { 
 long t1 = 0;
long t2 = 0;
long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return j;
}


public static long func_2d132b885b4f43998baf6743f1e4214e(int n, long t2, long sum, long t1, long[] a) { 
 long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return t1;
}


*********************************

#### Score: 5.63255


#### Java Tokens: min, max, ans, sum, math 

public static int func_18e0d7a3a9004e878e1bb3e739bfcbf6(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return l;
}


public static long func_86e361714b204771a5224d744686e8da(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return ans;
}


public static long func_1bd1c810a74e498e9723f78d4fe9cfda(int n, int i, int l, long ans, long[] sum) { 
 while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
    l++;
}
ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
return ans;
}


*********************************

#### Score: 5.63255


#### Java Tokens: max, ans, length, sum, math 

public static long func_191647a8fba345efbb3f6dc4af8e4128(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sm;
}


public static long func_280276b4a70c454791de2abe8192e908(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sum;
}


public static long func_7bf42b8990f9499faaea39b1ca5d25f1(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sl;
}


*********************************

#### Score: 5.63255


#### Java Tokens: res, %.15f, ans, sum, printf 

public static PrintWriter func_9300df7aacba49d09f5213fabb35b221(int n, long[] sum, PrintWriter out) { 
 long ans = 0;
for (int i = 1; i <= n; i++) {
    if (sum[i] - sum[i - 1] > ans)
        ans = sum[i] - sum[i - 1];
}
double res = (double) ans / sum[n];
out.printf("%.15f\n", 1 - res);
return out;
}


public static double func_e517265474004a5d9e296720431acb6c(int n, long ans, long[] sum, PrintWriter out) { 
 for (int i = 1; i <= n; i++) {
    if (sum[i] - sum[i - 1] > ans)
        ans = sum[i] - sum[i - 1];
}
double res = (double) ans / sum[n];
out.printf("%.15f\n", 1 - res);
return res;
}


public static long func_d1f79e8a46ae4d63a9e21b7f8f6ca835(int n, long ans, long[] sum, PrintWriter out) { 
 for (int i = 1; i <= n; i++) {
    if (sum[i] - sum[i - 1] > ans)
        ans = sum[i] - sum[i - 1];
}
double res = (double) ans / sum[n];
out.printf("%.15f\n", 1 - res);
return ans;
}


*********************************

#### Score: 5.63255


#### Java Tokens: max, ans, pref, sum, math 

public static long func_a84f023a6b79404cb10c198c9d86bdd8(int t, long rs, long sum, long[] pref) { 
 long ans = rs;
ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
return ans;
}


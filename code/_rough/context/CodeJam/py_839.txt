### Py Tokens: map, false, int, xrange, sums, high, can2, can3, close, readline, total, true, append, case, sum, needed, low, transistors, split 

### Py functions

def func_2fb477939fdd40d3b7c84c0b086231c0(T, f):
    for _T in xrange(T):
        N, p, q, r, s = map(int, f.readline().split())
        transistors = [((i * p + q) % r + s) for i in xrange(N)]
        total = sum(transistors)
        sums = []
        t = 0
        for i in xrange(N):
            sums.append(t)
            t += transistors[i]
        sums.append(t)
        assert t == total

        def can3(p):
            needed = (1 - p) * total
            for i in xrange(N - 1, 0, -1):
                if sums[i] <= needed:
                    break
            else:
                return False
            for j in xrange(N - 1, i - 1, -1):
                if sums[j + 1] - sums[i] <= needed:
                    break
            else:
                return False
            if total - sums[j + 1] <= needed:
                return True
            return False

        def can2(p):
            needed = (1 - p) * total
            for i in xrange(N - 1, 0, -1):
                if sums[i] <= needed:
                    break
            else:
                return False
            if total - sums[i] <= needed:
                return True
            return False
        low = 0.0
        high = 1.0
        for i in xrange(40):
            g = (low + high) * 0.5
            if can3(g) or can2(g):
                low = g
            else:
                high = g
        print 'Case #%d: %.10f' % (_T + 1, low)
    f.close()
    return T

*********************************

#### Score: 10.97886


#### Java Tokens: high, low, sum 

public static long func_81beb2a9a2844c0189b6fe4b1e9096f7(long sum) { 
 long low = 0;
long high = sum;
return high;
}


public static long func_f130b35bd7e44a57af243400663cb5a5(long sum) { 
 long low = 0;
long high = sum;
return low;
}


*********************************

#### Score: 9.46998


#### Java Tokens: area, println, total, high, curans, low, guess, targetarea, totalarea, case, target 

public static double func_d9903c43893c4be5977dcf9fce5cc391(int m, PrintWriter out) { 
 out.println("Case #" + (m + 1) + ":");
double totalArea = A.area(0, A.W);
double targetArea = totalArea / A.G;
double curans = 0;
for (int g = 0; g < A.G - 1; g++) {
    double low = curans;
    double high = A.W;
    while (low + 0.0000000001 < high) {
        double guess = (low + high) / 2;
        double a = A.area(curans, guess);
        if (a < targetArea) {
            low = guess;
        } else {
            high = guess;
        }
    }
    curans = (low + high) / 2;
    out.println(curans);
}
return curans;
}


public static double func_3a2efddb149d413ebc97f0f8840dfb75(int m, PrintWriter out) { 
 out.println("Case #" + (m + 1) + ":");
double totalArea = A.area(0, A.W);
double targetArea = totalArea / A.G;
double curans = 0;
for (int g = 0; g < A.G - 1; g++) {
    double low = curans;
    double high = A.W;
    while (low + 0.0000000001 < high) {
        double guess = (low + high) / 2;
        double a = A.area(curans, guess);
        if (a < targetArea) {
            low = guess;
        } else {
            high = guess;
        }
    }
    curans = (low + high) / 2;
    out.println(curans);
}
return targetArea;
}


public static double func_69febb6766524df99de0a2068ac61292(int m, PrintWriter out) { 
 out.println("Case #" + (m + 1) + ":");
double totalArea = A.area(0, A.W);
double targetArea = totalArea / A.G;
double curans = 0;
for (int g = 0; g < A.G - 1; g++) {
    double low = curans;
    double high = A.W;
    while (low + 0.0000000001 < high) {
        double guess = (low + high) / 2;
        double a = A.area(curans, guess);
        if (a < targetArea) {
            low = guess;
        } else {
            high = guess;
        }
    }
    curans = (low + high) / 2;
    out.println(curans);
}
return totalArea;
}


*********************************

#### Score: 9.40021


#### Java Tokens: next, nextdouble, test, ntest, nextint, double, %.8f, mid, bai, int, printf, println, high, low, baia, calc, close, case 

public static PrintWriter func_60a5bff363924d19baa64e53bac23bdf(int ntest, PrintWriter pw, Scanner sc) { 
 for (int test = 1; test <= ntest; ++test) {
    BaiA.W = sc.nextDouble();
    BaiA.L = sc.nextInt();
    BaiA.U = sc.nextInt();
    BaiA.G = sc.nextInt();
    BaiA.xl = new double[BaiA.L];
    BaiA.yl = new double[BaiA.L];
    BaiA.xu = new double[BaiA.U];
    BaiA.yu = new double[BaiA.U];
    for (int i = 0; i < BaiA.L; ++i) {
        BaiA.xl[i] = sc.nextDouble();
        BaiA.yl[i] = sc.nextDouble();
    }
    for (int i = 0; i < BaiA.U; ++i) {
        BaiA.xu[i] = sc.nextDouble();
        BaiA.yu[i] = sc.nextDouble();
    }
    double S = -(BaiA.calc(BaiA.W, BaiA.L, BaiA.xl, BaiA.yl) - BaiA.calc(BaiA.W, BaiA.U, BaiA.xu, BaiA.yu)) / BaiA.G;
    // System.out.println(S);
    pw.println("Case #" + test + ":");
    for (int i = 0; i + 1 < BaiA.G; ++i) {
        double low = 0, high = BaiA.W;
        for (int kk = 0; kk < 77; ++kk) {
            double mid = (low + high) / 2;
            double SS = (BaiA.calc(mid, BaiA.U, BaiA.xu, BaiA.yu) - BaiA.calc(mid, BaiA.L, BaiA.xl, BaiA.yl));
            if (SS < S * (i + 1))
                low = mid;
            else
                high = mid;
        }
        pw.printf("%.8f\n", low);
    }
// pw.println();
}
sc.close();
return pw;
}


public static PrintWriter func_add26e7778cf484cb47517487e7873f3(int ntest, PrintWriter pw, Scanner sc) { 
 for (int test = 1; test <= ntest; ++test) {
    BaiA.W = sc.nextDouble();
    BaiA.L = sc.nextInt();
    BaiA.U = sc.nextInt();
    BaiA.G = sc.nextInt();
    BaiA.xl = new double[BaiA.L];
    BaiA.yl = new double[BaiA.L];
    BaiA.xu = new double[BaiA.U];
    BaiA.yu = new double[BaiA.U];
    for (int i = 0; i < BaiA.L; ++i) {
        BaiA.xl[i] = sc.nextDouble();
        BaiA.yl[i] = sc.nextDouble();
    }
    for (int i = 0; i < BaiA.U; ++i) {
        BaiA.xu[i] = sc.nextDouble();
        BaiA.yu[i] = sc.nextDouble();
    }
    double S = -(BaiA.calc(BaiA.W, BaiA.L, BaiA.xl, BaiA.yl) - BaiA.calc(BaiA.W, BaiA.U, BaiA.xu, BaiA.yu)) / BaiA.G;
    // System.out.println(S);
    pw.println("Case #" + test + ":");
    for (int i = 0; i + 1 < BaiA.G; ++i) {
        double low = 0, high = BaiA.W;
        for (int kk = 0; kk < 77; ++kk) {
            double mid = (low + high) / 2;
            double SS = (BaiA.calc(mid, BaiA.U, BaiA.xu, BaiA.yu) - BaiA.calc(mid, BaiA.L, BaiA.xl, BaiA.yl));
            if (SS < S * (i + 1))
                low = mid;
            else
                high = mid;
        }
        pw.printf("%.8f\n", low);
    }
// pw.println();
}
sc.close();
pw.close();
return pw;
}


*********************************

#### Score: 9.40021


#### Java Tokens: next, nextdouble, ntest, nextint, test, double, %.8f, mid, bai, int, printf, println, high, low, baia, calc, close, case 

public static int func_725bcf65b7de46a79b6d9a1ed8821f79(PrintWriter pw, Scanner sc) { 
 int ntest = sc.nextInt();
for (int test = 1; test <= ntest; ++test) {
    BaiA.W = sc.nextDouble();
    BaiA.L = sc.nextInt();
    BaiA.U = sc.nextInt();
    BaiA.G = sc.nextInt();
    BaiA.xl = new double[BaiA.L];
    BaiA.yl = new double[BaiA.L];
    BaiA.xu = new double[BaiA.U];
    BaiA.yu = new double[BaiA.U];
    for (int i = 0; i < BaiA.L; ++i) {
        BaiA.xl[i] = sc.nextDouble();
        BaiA.yl[i] = sc.nextDouble();
    }
    for (int i = 0; i < BaiA.U; ++i) {
        BaiA.xu[i] = sc.nextDouble();
        BaiA.yu[i] = sc.nextDouble();
    }
    double S = -(BaiA.calc(BaiA.W, BaiA.L, BaiA.xl, BaiA.yl) - BaiA.calc(BaiA.W, BaiA.U, BaiA.xu, BaiA.yu)) / BaiA.G;
    // System.out.println(S);
    pw.println("Case #" + test + ":");
    for (int i = 0; i + 1 < BaiA.G; ++i) {
        double low = 0, high = BaiA.W;
        for (int kk = 0; kk < 77; ++kk) {
            double mid = (low + high) / 2;
            double SS = (BaiA.calc(mid, BaiA.U, BaiA.xu, BaiA.yu) - BaiA.calc(mid, BaiA.L, BaiA.xl, BaiA.yl));
            if (SS < S * (i + 1))
                low = mid;
            else
                high = mid;
        }
        pw.printf("%.8f\n", low);
    }
// pw.println();
}
sc.close();
pw.close();
return ntest;
}


public static PrintWriter func_b7285541f4e74908a8a142dd615877cd(PrintWriter pw, Scanner sc) { 
 int ntest = sc.nextInt();
for (int test = 1; test <= ntest; ++test) {
    BaiA.W = sc.nextDouble();
    BaiA.L = sc.nextInt();
    BaiA.U = sc.nextInt();
    BaiA.G = sc.nextInt();
    BaiA.xl = new double[BaiA.L];
    BaiA.yl = new double[BaiA.L];
    BaiA.xu = new double[BaiA.U];
    BaiA.yu = new double[BaiA.U];
    for (int i = 0; i < BaiA.L; ++i) {
        BaiA.xl[i] = sc.nextDouble();
        BaiA.yl[i] = sc.nextDouble();
    }
    for (int i = 0; i < BaiA.U; ++i) {
        BaiA.xu[i] = sc.nextDouble();
        BaiA.yu[i] = sc.nextDouble();
    }
    double S = -(BaiA.calc(BaiA.W, BaiA.L, BaiA.xl, BaiA.yl) - BaiA.calc(BaiA.W, BaiA.U, BaiA.xu, BaiA.yu)) / BaiA.G;
    // System.out.println(S);
    pw.println("Case #" + test + ":");
    for (int i = 0; i + 1 < BaiA.G; ++i) {
        double low = 0, high = BaiA.W;
        for (int kk = 0; kk < 77; ++kk) {
            double mid = (low + high) / 2;
            double SS = (BaiA.calc(mid, BaiA.U, BaiA.xu, BaiA.yu) - BaiA.calc(mid, BaiA.L, BaiA.xl, BaiA.yl));
            if (SS < S * (i + 1))
                low = mid;
            else
                high = mid;
        }
        pw.printf("%.8f\n", low);
    }
// pw.println();
}
sc.close();
pw.close();
return pw;
}


public static PrintWriter func_737ab083628d40a398f7ebb95d2d6c4e(PrintWriter pw, Scanner sc) { 
 int ntest = sc.nextInt();
for (int test = 1; test <= ntest; ++test) {
    BaiA.W = sc.nextDouble();
    BaiA.L = sc.nextInt();
    BaiA.U = sc.nextInt();
    BaiA.G = sc.nextInt();
    BaiA.xl = new double[BaiA.L];
    BaiA.yl = new double[BaiA.L];
    BaiA.xu = new double[BaiA.U];
    BaiA.yu = new double[BaiA.U];
    for (int i = 0; i < BaiA.L; ++i) {
        BaiA.xl[i] = sc.nextDouble();
        BaiA.yl[i] = sc.nextDouble();
    }
    for (int i = 0; i < BaiA.U; ++i) {
        BaiA.xu[i] = sc.nextDouble();
        BaiA.yu[i] = sc.nextDouble();
    }
    double S = -(BaiA.calc(BaiA.W, BaiA.L, BaiA.xl, BaiA.yl) - BaiA.calc(BaiA.W, BaiA.U, BaiA.xu, BaiA.yu)) / BaiA.G;
    // System.out.println(S);
    pw.println("Case #" + test + ":");
    for (int i = 0; i + 1 < BaiA.G; ++i) {
        double low = 0, high = BaiA.W;
        for (int kk = 0; kk < 77; ++kk) {
            double mid = (low + high) / 2;
            double SS = (BaiA.calc(mid, BaiA.U, BaiA.xu, BaiA.yu) - BaiA.calc(mid, BaiA.L, BaiA.xl, BaiA.yl));
            if (SS < S * (i + 1))
                low = mid;
            else
                high = mid;
        }
        pw.printf("%.8f\n", low);
    }
// pw.println();
}
sc.close();
return pw;
}


*********************************

#### Score: 9.33141


#### Java Tokens: total, counts, sums 

public static long func_503f58214a9e46398f915e47c6091911(int N, long[] counts) { 
 final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
return total;
}


public static long func_b46e4e8121134bb08801d3de4510d4e8(int N, long r, long s, long p, long q) { 
 final long[] counts = new long[N];
for (int i = 0; i < N; i++) counts[i] = (i * p + q) % r + s;
final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
return total;
}


public static long[] func_c5395f39b64745dea5778e0eeb6218e9(int N, long[] counts) { 
 final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
return sums;
}


*********************************

#### Score: 9.33141


#### Java Tokens: total, answer, sums 

public static long func_962ac62c8aba4fa2a8841f2042b999e5(int N, long[] sums) { 
 final long total = sums[N];
long answer = 0L;
return answer;
}


public static long func_87f91c6eb3bf4d10be724ab348a980dc(int N, long[] sums) { 
 final long total = sums[N];
long answer = 0L;
return total;
}


*********************************

#### Score: 9.12655


#### Java Tokens: high, prefixsum, low, prefix, sum, rsum 

public static long func_bdfc5e9a88c84749ab1045fb23a6adca(int i, int n, long[] rsum) { 
 int low = i;
int high = n - 1;
long prefixSum = (i == 0 ? 0 : rsum[i - 1]);
return prefixSum;
}


public static int func_ed82d62242aa4695875533bcdd93f76f(int i, int n, long[] rsum) { 
 int low = i;
int high = n - 1;
long prefixSum = (i == 0 ? 0 : rsum[i - 1]);
return high;
}


public static int func_605efed04f2c47f99c3ffcff257b203b(int i, int n, long[] rsum) { 
 int low = i;
int high = n - 1;
long prefixSum = (i == 0 ? 0 : rsum[i - 1]);
return low;
}


*********************************

#### Score: 9.08062


#### Java Tokens: high, low 

public static int func_f388707605144796a4b526fe90630b7b(long high, long low) { 
 long m = (low + high) / 2;
int i = 0;
long x = 0;
return i;
}


public static long func_4095026e27114ba9a8e9a5cc355f034b(long high, long low) { 
 long m = (low + high) / 2;
int i = 0;
long x = 0;
return m;
}


public static double func_d2d97269ac5346cdaada845feea25bbc(int W) { 
 double low = 0;
double high = W;
return high;
}


*********************************

#### Score: 8.74133


#### Java Tokens: total, answer, counts, sums 

public static long func_4502893454b544fb8f2c8b6663730b53(int N, long[] counts, long[] sums) { 
 for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
long answer = 0L;
return total;
}


public static long func_2b449234c47b48a3a863bdbd2128d4b1(int N, long[] counts) { 
 final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
long answer = 0L;
return answer;
}


public static long[] func_1354726a852d4842831d5c8292d43b03(int N, long r, long s, long p, long q) { 
 final long[] counts = new long[N];
for (int i = 0; i < N; i++) counts[i] = (i * p + q) % r + s;
final long[] sums = new long[N + 1];
for (int i = 0; i < N; i++) sums[i + 1] = sums[i] + counts[i];
final long total = sums[N];
long answer = 0L;
return counts;
}


*********************************

#### Score: 8.64573


#### Java Tokens: high, prefixsum, low, prefix, mid, sum, rsum 

public static int func_de4f1bf0687c4123ad12e5d145efa383(int low, int high, long prefixSum, long[] rsum) { 
 int mid = (high + low) / 2;
long sum = (rsum[mid] - prefixSum);
return mid;
}


public static long func_4bd2125e045f4be88b96010f0a52e70a(int low, int high, long prefixSum, long[] rsum) { 
 int mid = (high + low) / 2;
long sum = (rsum[mid] - prefixSum);
return sum;
}


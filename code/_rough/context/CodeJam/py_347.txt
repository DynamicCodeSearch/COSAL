### Py Tokens: case, map, numcases, int, xrange, computing, sys, num, solve, split, stderr, close, cases, solveit 

### Py functions

def func_ac43973931234151b94d3e613eaa20b7(f, l, numCases):
    l = l[1:]
    for i in xrange(numCases):
        print  >> sys.stderr, 'Computing case %d' % (i + 1)
        n = int(l[0])
        ti = map(int, l[1].split()[:n])
        pi = map(int, l[2].split()[:n])
        l = l[3:]
        print 'Case #%d: %s' % (i + 1, solveIt(ti, pi))
    f.close()
    return numCases

def func_dd65f135d8e3471b90bb679dee8e2680(f, l, numCases):
    for i in xrange(numCases):
        print  >> sys.stderr, 'Computing case %d' % (i + 1)
        n = int(l[0])
        ti = map(int, l[1].split()[:n])
        pi = map(int, l[2].split()[:n])
        l = l[3:]
        print 'Case #%d: %s' % (i + 1, solveIt(ti, pi))
    f.close()
    return numCases

def func_4dd0a6e629324bb581f497f547fb8151(f, l, numCases):
    for i in xrange(numCases):
        print  >> sys.stderr, 'Computing case %d' % (i + 1)
        n = int(l[0])
        ti = map(int, l[1].split()[:n])
        pi = map(int, l[2].split()[:n])
        l = l[3:]
        print 'Case #%d: %s' % (i + 1, solveIt(ti, pi))
    f.close()
    return l

def func_08b8a903814d4c079493142b88c53093(f, l, numCases):
    l = l[1:]
    for i in xrange(numCases):
        print  >> sys.stderr, 'Computing case %d' % (i + 1)
        n = int(l[0])
        ti = map(int, l[1].split()[:n])
        pi = map(int, l[2].split()[:n])
        l = l[3:]
        print 'Case #%d: %s' % (i + 1, solveIt(ti, pi))
    f.close()
    return l

*********************************

#### Score: 12.67921


#### Java Tokens: next, println, cases, system, nextint, solve, scanner, int, case 

public static int func_ac187287df434b2ba9123f5a9edcdcd6(Scanner scanner) { 
 final int cases = scanner.nextInt();
for (int t = 0; t < cases; t++) {
    System.out.println("Case #" + (t + 1) + ": " + A.solve(scanner));
}
return cases;
}


*********************************

#### Score: 11.12456


#### Java Tokens: next, println, system, nextint, string, solve, close, int, case 

public static PrintWriter func_5f57a2edef1041caa821806cabf7e9d2(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


public static PrintWriter func_635e262b1c0747db8dc8487584a21618(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


public static PrintWriter func_8a2c51d4894943cfb610a6c0d7c52954(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


*********************************

#### Score: 10.98072


#### Java Tokens: println, system, string, solve, close, case 

public static PrintWriter func_97edbcadaa1e4fce96a75ba7c7ce5f7c(int T, PrintWriter out, Scanner in) { 
 for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


public static PrintWriter func_3d5d8d6284bd4a7c9b061b4b7e550c8b(int T, PrintWriter out, Scanner in) { 
 for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


public static PrintWriter func_d9b019cc717e4c3b8c9b99f9e5d88aa1(int T, PrintWriter out, Scanner in) { 
 for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


*********************************

#### Score: 10.58622


#### Java Tokens: cheaters, print, casenum, num, solve, case 

public static PrintWriter func_2866bb7f8b864eb9bea6213d273fd8ec(int caseNum, PrintWriter pw, Scanner sc) { 
 pw.print("Case #" + (caseNum + 1) + ": ");
new Cheaters().solve(sc, pw);
return pw;
}


*********************************

#### Score: 10.58622


#### Java Tokens: print, perfect, casenum, num, solve, case 

public static PrintWriter func_40f65a9be3c843eba14b8c967c9ef5e2(int caseNum, PrintWriter pw, Scanner sc) { 
 pw.print("Case #" + (caseNum + 1) + ":");
new Perfect().solve(sc, pw);
return pw;
}


*********************************

#### Score: 10.43932


#### Java Tokens: next, nextint, test, perfect, casenum, num, cnt, casecnt, int, println, print, system, flush, solve, processing, close, case 

public static PrintWriter func_f12e35b80f5a45849f90b476496469d3(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ":");
    new Perfect().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return pw;
}


public static int func_88d590cfe4e9440abaf20e0993b429d7(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ":");
    new Perfect().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return caseCnt;
}


public static PrintWriter func_043e15777c2245f2ace3949d7ead4e4c(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ":");
    new Perfect().solve(sc, pw);
}
pw.flush();
pw.close();
return pw;
}


*********************************

#### Score: 10.43932


#### Java Tokens: next, nextint, test, casenum, num, cnt, casecnt, int, cheaters, println, print, system, flush, solve, processing, close, case 

public static PrintWriter func_09d59f7d2de54aa6ad5c03d1dd9a0206(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
pw.flush();
pw.close();
return pw;
}


public static int func_c8d4c03dd31f4ebaa9d0dbb08bd7aa83(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return caseCnt;
}


public static PrintWriter func_8854336f103d4db6836dc952494d5b44(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return pw;
}


*********************************

#### Score: 10.25938


#### Java Tokens: test, perfect, casenum, num, cnt, casecnt, println, print, system, flush, solve, processing, close, case 

public static PrintWriter func_bb6af0e9f0274125b15545382663f676(int caseCnt, PrintWriter pw, Scanner sc) { 
 for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ":");
    new Perfect().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return pw;
}


public static PrintWriter func_3ca9859e114842f693d0e117022dc553(int caseCnt, PrintWriter pw, Scanner sc) { 
 for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ":");
    new Perfect().solve(sc, pw);
}
pw.flush();
pw.close();
return pw;
}


*********************************

#### Score: 10.25938


#### Java Tokens: test, casenum, num, cnt, casecnt, cheaters, println, print, system, flush, solve, processing, close, case 

public static PrintWriter func_363a2951b82d4fa3bbd434a213cf7c0e(int caseCnt, PrintWriter pw, Scanner sc) { 
 for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
pw.flush();
pw.close();
return pw;
}


public static PrintWriter func_4c43d1155f9c4045b2590cf6db25d547(int caseCnt, PrintWriter pw, Scanner sc) { 
 for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return pw;
}


*********************************

#### Score: 9.77404


#### Java Tokens: next, nextint, test, casenum, num, cnt, casecnt, int, tour, magical, println, print, system, flush, solve, processing, close, case, magicaltour 

public static PrintWriter func_a4f3ee17ce4f478aac2b807625172bb9(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new MagicalTour().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return pw;
}


public static int func_7b1257cb01f647a19eb1164aaf250ce7(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new MagicalTour().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return caseCnt;
}


public static int func_fa57792ab4664252af9cdca61fa1e0d7(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new MagicalTour().solve(sc, pw);
}
pw.flush();
pw.close();
return caseCnt;
}


### Py Tokens: bets, num, min, xrange, high, nummin, cost, low, max, size 

### Py functions

def func_646ff0893cea4c4b982d92f552b9adef(bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    return bets

def func_3f1986edcec040f5b51244a61370068e(bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    return high

def func_c7ff66edf70845f9ab4b7dc418ac5a11(bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    return num_min

def func_eac085aa5da940f981aa57202d9ce2a5(bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    return low

*********************************

#### Score: 9.08062


#### Java Tokens: high, low 

public static int func_f388707605144796a4b526fe90630b7b(long high, long low) { 
 long m = (low + high) / 2;
int i = 0;
long x = 0;
return i;
}


public static long func_4095026e27114ba9a8e9a5cc355f034b(long high, long low) { 
 long m = (low + high) / 2;
int i = 0;
long x = 0;
return m;
}


public static double func_d2d97269ac5346cdaada845feea25bbc(int W) { 
 double low = 0;
double high = W;
return high;
}


*********************************

#### Score: 8.46644


#### Java Tokens: high, low, pref 

public static long func_5a49a347564d436ea920679a11a87a7e(int n, int[] a, long[] pref) { 
 for (int i = 0; i < n; i++) {
    pref[i + 1] = pref[i] + a[i];
}
// System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
// can
long high = pref[n];
return low;
}


public static long func_2487d07add2548239d0f095dd0a4d809(int n, int r, int s, int q, int p) { 
 int[] a = new int[n];
for (int i = 0; i < n; i++) {
    a[i] = (int) (((long) i * p + q) % r + s);
}
long[] pref = new long[n + 1];
for (int i = 0; i < n; i++) {
    pref[i + 1] = pref[i] + a[i];
}
// System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
// can
long high = pref[n];
return high;
}


public static long func_3b9299aca8b743df90f3c6b488f863b9(int n, long[] pref) { 
 // System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
// can
long high = pref[n];
return high;
}


*********************************

#### Score: 8.46644


#### Java Tokens: high, low, start 

public static double func_b5792060a4574f6cb338460730a6d45d(int W, double start) { 
 double low = start;
double high = W;
return high;
}


public static double func_425fa528f9504f9fb25dda4eb0fe99a8(int W, double start) { 
 double low = start;
double high = W;
return low;
}


*********************************

#### Score: 8.46644


#### Java Tokens: high, low, mid 

public static double func_608e8094a31741c5b1446cdcc31bc4c1(double high, double T, double low) { 
 double mid = (high + low) / 2;
if (A.S(mid) < T) {
    low = mid;
} else {
    high = mid;
}
return low;
}


public static double func_77de1b90c2464a29a0b4c2ab8b37d8bf(double high, double T, double low) { 
 double mid = (high + low) / 2;
if (A.S(mid) < T) {
    low = mid;
} else {
    high = mid;
}
return mid;
}


public static double func_197eab54ec904e71bad12749c453400f(double high, double T, double low) { 
 double mid = (high + low) / 2;
if (A.S(mid) < T) {
    low = mid;
} else {
    high = mid;
}
return high;
}


*********************************

#### Score: 8.46644


#### Java Tokens: high, curans, low 

public static double func_a3bac718cee84db1a6dfeec352afc588(double curans) { 
 double low = curans;
double high = A.W;
return low;
}


public static double func_5c7decc6cbd34947b30c7ccd6bcbb155(double curans) { 
 double low = curans;
double high = A.W;
return high;
}


*********************************

#### Score: 8.46644


#### Java Tokens: high, low, sum 

public static long func_81beb2a9a2844c0189b6fe4b1e9096f7(long sum) { 
 long low = 0;
long high = sum;
return high;
}


public static long func_f130b35bd7e44a57af243400663cb5a5(long sum) { 
 long low = 0;
long high = sum;
return low;
}


*********************************

#### Score: 8.46644


#### Java Tokens: high, low, budget 

public static long func_60ad323720a64daf8e001c01843bad2a(long low, long budget) { 
 --low;
long high = budget + 1;
return high;
}


*********************************

#### Score: 8.03285


#### Java Tokens: min, max, need, length, mid, bets 

public static long func_de542dcb5cab4d5a9b75ce7361c4b9d0(long min, long max, long[] bets) { 
 long mid = (min + max) / 2;
long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
return mid;
}


public static long func_3f52bc1f3660404e95b908abc8ae0fe8(long min, long max, long[] bets) { 
 long mid = (min + max) / 2;
long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
return need;
}


*********************************

#### Score: 7.93373


#### Java Tokens: high, println, curans, low 

public static double func_5686f1280df6409b987c36e3d3e41a21(double low, double curans, double high, PrintWriter out) { 
 curans = (low + high) / 2;
out.println(curans);
return curans;
}


public static PrintWriter func_ed2c7231dbdd463eb435397cbf20ceb4(double low, double curans, double high, PrintWriter out) { 
 curans = (low + high) / 2;
out.println(curans);
return out;
}


*********************************

#### Score: 7.93373


#### Java Tokens: cur, high, low, mid 

public static long func_853dd18e49924afd950b2016eae1ffad(long low, long high) { 
 long mid = (low + high) / 2;
int cur = 0;
return mid;
}


public static int func_e811380e6873420eb5c316f6a5047c4f(long low, long high) { 
 long mid = (low + high) / 2;
int cur = 0;
return cur;
}


### Py Tokens: set, crem, sorted, xrange, sum, append 

### Py functions

def func_48e32ab05bfa40038b1f26f0b3986488(b, cx, x):
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return x

def func_eee11b94835041ee8268cebbf249e7f4(b, cx, i, x):
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return x

def func_83ebc477c70b4a449e2b55401ec84839(b, crem, cx, i, x):
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return x

def func_3edd651b040846aeb42b208b4f5bb033(b, crem, cx, i, x):
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return cx

def func_61d76c7d07964fed91ece9c2f29b6da1(b, cx, x):
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return b

*********************************

#### Score: 7.97284


#### Java Tokens: add, sortedset, sorted, set, tree, integer, treeset 

public static SortedSet<Integer> func_908a1fb2d6ea4b70bac7de1f0210bf2e(int l, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
return xs;
}


public static SortedSet<Integer> func_33d30156f21a452c9e7e9783fd47a69d(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
return xs;
}


*********************************

#### Score: 7.57770


#### Java Tokens: add, sortedset, sorted, set, size, tree, integer, treeset 

public static SortedSet<Integer> func_4ce0a44eab0542dfa8546f1c61bacac4(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return xs;
}


public static int[] func_1fe4188d08b24ee0990c1d1b63842dc2(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return nx;
}


public static int[] func_900079f612634215823886119e9e27bb(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
return nx;
}


*********************************

#### Score: 7.22192


#### Java Tokens: add, sortedset, sorted, set, size, tree, length, integer, treeset 

public static int[] func_6a5e7e859297479b9467357300fe07c1(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return nx;
}


public static SortedSet<Integer> func_ce9d48e027814f3992228953ecdf796f(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return xs;
}


public static double[] func_985ac19939df45b0aa6e6fb24e535b72(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return ny;
}


*********************************

#### Score: 6.50301


#### Java Tokens: set, length, tree, sum, treeset, long 

public static TreeSet<Long> func_82bedb87aaee466db5f8d8ee5fb8bbfd(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
return all;
}


public static long func_b009c656310044d9843b16a552b1b893(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
return sum;
}


public static long func_612a6278d77147d182b6d5a52d810c2e(int r, int p, int s, int q, long[] a) { 
 long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
return sum;
}


*********************************

#### Score: 6.16732


#### Java Tokens: add, set, length, tree, sum, treeset, long 

public static long func_f4f3e19e5d544b6ba8e5add9b0fa3413(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
return sum;
}


public static TreeSet<Long> func_2b0ce21d61d84ca6aad8fb2b941dd018(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
return all;
}


public static long func_30e8330430ae4e73aac5d89c5584a3f7(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
return sum;
}


*********************************

#### Score: 5.12864


#### Java Tokens: add, set, max, length, tree, sum, best, value, treeset, long, max_value 

public static long func_01d93a72fc59451ea766af125d86cc20(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
return x;
}


public static long func_70d0c2c9710347a9bec5342a1e39ba0c(int r, int p, int s, int q, long[] a) { 
 long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
return sum;
}


public static long func_b788c2fff10c482f91f66911d6a10f05(int r, int p, int s, int q, long[] a) { 
 long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
return x;
}


*********************************

#### Score: 4.96220


#### Java Tokens: set, tree, integer, treeset 

public static int[][] func_9a47156f72654109bd8da04bd2f01d1c(int U, int L) { 
 TreeSet<Integer> xx = new TreeSet<Integer>();
int[][] x = new int[][] { new int[L], new int[U] }, y = new int[][] { new int[L], new int[U] };
return y;
}


public static TreeSet<Integer> func_5d30268f025145b782a51f3d95d66bae(int U, int L) { 
 TreeSet<Integer> xx = new TreeSet<Integer>();
int[][] x = new int[][] { new int[L], new int[U] }, y = new int[][] { new int[L], new int[U] };
return xx;
}


public static int[][] func_e9b2add3236a4a00921bf47e1e4787c4(int U, int L) { 
 TreeSet<Integer> xx = new TreeSet<Integer>();
int[][] x = new int[][] { new int[L], new int[U] }, y = new int[][] { new int[L], new int[U] };
int[] c = new int[] { L, U };
return x;
}


*********************************

#### Score: 4.56707


#### Java Tokens: add, ceiling, set, max, tree, best, sum, long, min, math, floor, value, treeset, max_value 

public static long func_a72905d695394d9bb2cc529a06f77481(int n, long sum, long[] a) { 
 TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
for (int i = 0; i < n; i++) {
    x += a[i];
    Long up = all.ceiling(x / 2 + 1);
    if (up != null) {
        long now = Math.max(up, Math.max(x - up, sum - x));
        best = Math.min(best, now);
    }
    Long down = all.floor(x / 2);
    if (down != null) {
        long now = Math.max(down, Math.max(x - down, sum - x));
        best = Math.min(best, now);
    }
    all.add(x);
}
return x;
}


public static long func_a7b8a6858f204306832053b2d8ceeb78(int n, long sum, long[] a) { 
 TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
for (int i = 0; i < n; i++) {
    x += a[i];
    Long up = all.ceiling(x / 2 + 1);
    if (up != null) {
        long now = Math.max(up, Math.max(x - up, sum - x));
        best = Math.min(best, now);
    }
    Long down = all.floor(x / 2);
    if (down != null) {
        long now = Math.max(down, Math.max(x - down, sum - x));
        best = Math.min(best, now);
    }
    all.add(x);
}
return best;
}


public static TreeSet<Long> func_a84fba87bdac40148ebfb094f3f7cec5(int n, long sum, long[] a) { 
 TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
for (int i = 0; i < n; i++) {
    x += a[i];
    Long up = all.ceiling(x / 2 + 1);
    if (up != null) {
        long now = Math.max(up, Math.max(x - up, sum - x));
        best = Math.min(best, now);
    }
    Long down = all.floor(x / 2);
    if (down != null) {
        long now = Math.max(down, Math.max(x - down, sum - x));
        best = Math.min(best, now);
    }
    all.add(x);
}
return all;
}


*********************************

#### Score: 4.43194


#### Java Tokens: add, set, tree, treeset, long, cands 

public static TreeSet<Long> func_6a975c9c282344a58821f40d1ca94fa3(int N, long[] is) { 
 // for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
for (int i = 0; i < N; i++) for (int d = -1; d <= 1; d++) cands.add(is[i] + d);
return cands;
}


public static TreeSet<Long> func_9dda3932c68c40eca2e86198d4239eef(int N, long[] is) { 
 long A = 0;
// for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
for (int i = 0; i < N; i++) for (int d = -1; d <= 1; d++) cands.add(is[i] + d);
return cands;
}


public static long func_30dc5bd23f404042bfe3a665a9f440b3(int N, long[] is) { 
 long A = 0;
// for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
for (int i = 0; i < N; i++) for (int d = -1; d <= 1; d++) cands.add(is[i] + d);
return K;
}


*********************************

#### Score: 4.40860


#### Java Tokens: add, ceiling, set, max, length, tree, sum, best, long, min, math, floor, value, treeset, max_value 

public static long func_864d7c04461248f08c1917e452d0bc0f(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
for (int i = 0; i < n; i++) {
    x += a[i];
    Long up = all.ceiling(x / 2 + 1);
    if (up != null) {
        long now = Math.max(up, Math.max(x - up, sum - x));
        best = Math.min(best, now);
    }
    Long down = all.floor(x / 2);
    if (down != null) {
        long now = Math.max(down, Math.max(x - down, sum - x));
        best = Math.min(best, now);
    }
    all.add(x);
}
return sum;
}


public static long func_2277668882304cd6b0a2c606a432f0a2(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
for (int i = 0; i < n; i++) {
    x += a[i];
    Long up = all.ceiling(x / 2 + 1);
    if (up != null) {
        long now = Math.max(up, Math.max(x - up, sum - x));
        best = Math.min(best, now);
    }
    Long down = all.floor(x / 2);
    if (down != null) {
        long now = Math.max(down, Math.max(x - down, sum - x));
        best = Math.min(best, now);
    }
    all.add(x);
}
return x;
}


public static long func_a4ebeb53992f4297b4067aa4fbbe6e00(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
for (int i = 0; i < n; i++) {
    x += a[i];
    Long up = all.ceiling(x / 2 + 1);
    if (up != null) {
        long now = Math.max(up, Math.max(x - up, sum - x));
        best = Math.min(best, now);
    }
    Long down = all.floor(x / 2);
    if (down != null) {
        long now = Math.max(down, Math.max(x - down, sum - x));
        best = Math.min(best, now);
    }
    all.add(x);
}
return best;
}


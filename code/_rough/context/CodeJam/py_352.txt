### Py Tokens: case, map, str, numcases, int, xrange, float, sort, cas, write, split, fout, readline, fin, reverse 

### Py functions

def func_9f983a5c303f4a0aba4d9a0b6a29e89e(fin, fout, numcases):
    numcases += 1
    for cas in xrange(1, numcases):
        fout.write('Case #' + str(cas) + ':')
        n = int(fin.readline())
        l = map(float, fin.readline().split())
        p = map(float, fin.readline().split())
        q = [(p[i] / l[i]) for i in xrange(n)]
        r = [(q[i], -i) for i in xrange(n)]
        r.sort()
        r.reverse()
        for i in r:
            fout.write(' ' + str(-i[1]))
        fout.write('\n')
    return numcases

*********************************

#### Score: 9.82786


#### Java Tokens: next, compare, nextint, #%d:, integer, sort, int, printf, comparator, system, cas, arrays, case 

public static int[] func_ea09d5a25a934ac1b747118c896979e1(int cas, int n, Scanner in) { 
 int[] L = new int[n];
final int[] P = new int[n];
Integer[] I = new Integer[n];
for (int i = 0; i < n; i++) L[i] = in.nextInt();
for (int i = 0; i < n; i++) {
    P[i] = in.nextInt();
    I[i] = i;
}
Arrays.sort(I, new Comparator<Integer>() {

    public int compare(Integer A, Integer B) {
        if (P[A] != P[B])
            return P[B] - P[A];
        return A - B;
    }
});
System.out.printf("Case #%d:", cas);
return L;
}


public static int[] func_e63095ca1fdf4d89b68f61e92b926ceb(int cas, int n, Scanner in) { 
 int[] L = new int[n];
final int[] P = new int[n];
Integer[] I = new Integer[n];
for (int i = 0; i < n; i++) L[i] = in.nextInt();
for (int i = 0; i < n; i++) {
    P[i] = in.nextInt();
    I[i] = i;
}
Arrays.sort(I, new Comparator<Integer>() {

    public int compare(Integer A, Integer B) {
        if (P[A] != P[B])
            return P[B] - P[A];
        return A - B;
    }
});
System.out.printf("Case #%d:", cas);
return P;
}


public static int[] func_5126b7888d9b40b4a5d968fd6d90c764(int cas, int n, int[] L, Scanner in) { 
 final int[] P = new int[n];
Integer[] I = new Integer[n];
for (int i = 0; i < n; i++) L[i] = in.nextInt();
for (int i = 0; i < n; i++) {
    P[i] = in.nextInt();
    I[i] = i;
}
Arrays.sort(I, new Comparator<Integer>() {

    public int compare(Integer A, Integer B) {
        if (P[A] != P[B])
            return P[B] - P[A];
        return A - B;
    }
});
System.out.printf("Case #%d:", cas);
return P;
}


*********************************

#### Score: 9.45328


#### Java Tokens: next, compare, nextint, #%d:, integer, sort, int, printf, comparator, print, system, cas, arrays, case 

public static int[] func_95d1669410684fd383a3eeac84d97da2(int cas, Scanner in) { 
 int n = in.nextInt();
int[] L = new int[n];
final int[] P = new int[n];
Integer[] I = new Integer[n];
for (int i = 0; i < n; i++) L[i] = in.nextInt();
for (int i = 0; i < n; i++) {
    P[i] = in.nextInt();
    I[i] = i;
}
Arrays.sort(I, new Comparator<Integer>() {

    public int compare(Integer A, Integer B) {
        if (P[A] != P[B])
            return P[B] - P[A];
        return A - B;
    }
});
System.out.printf("Case #%d:", cas);
for (Integer x : I) System.out.print(" " + x);
return P;
}


public static int[] func_f9964ce1ece4449cb374df44a5d30cff(int cas, int n, int[] L, Scanner in) { 
 final int[] P = new int[n];
Integer[] I = new Integer[n];
for (int i = 0; i < n; i++) L[i] = in.nextInt();
for (int i = 0; i < n; i++) {
    P[i] = in.nextInt();
    I[i] = i;
}
Arrays.sort(I, new Comparator<Integer>() {

    public int compare(Integer A, Integer B) {
        if (P[A] != P[B])
            return P[B] - P[A];
        return A - B;
    }
});
System.out.printf("Case #%d:", cas);
for (Integer x : I) System.out.print(" " + x);
return P;
}


public static Integer[] func_f486f5a21a024a97899346460db31781(int cas, Scanner in) { 
 int n = in.nextInt();
int[] L = new int[n];
final int[] P = new int[n];
Integer[] I = new Integer[n];
for (int i = 0; i < n; i++) L[i] = in.nextInt();
for (int i = 0; i < n; i++) {
    P[i] = in.nextInt();
    I[i] = i;
}
Arrays.sort(I, new Comparator<Integer>() {

    public int compare(Integer A, Integer B) {
        if (P[A] != P[B])
            return P[B] - P[A];
        return A - B;
    }
});
System.out.printf("Case #%d:", cas);
for (Integer x : I) System.out.print(" " + x);
return I;
}


*********************************

#### Score: 9.10744


#### Java Tokens: next, compare, nextint, #%d:, integer, sort, int, printf, comparator, print, println, system, cas, arrays, case 

public static int[] func_3ed98d18060a48ec92be04d1e352f669(int cas, Scanner in) { 
 int n = in.nextInt();
int[] L = new int[n];
final int[] P = new int[n];
Integer[] I = new Integer[n];
for (int i = 0; i < n; i++) L[i] = in.nextInt();
for (int i = 0; i < n; i++) {
    P[i] = in.nextInt();
    I[i] = i;
}
Arrays.sort(I, new Comparator<Integer>() {

    public int compare(Integer A, Integer B) {
        if (P[A] != P[B])
            return P[B] - P[A];
        return A - B;
    }
});
System.out.printf("Case #%d:", cas);
for (Integer x : I) System.out.print(" " + x);
System.out.println();
return P;
}


public static Integer[] func_cce1eb8c187545b4ab149e2cccc4871e(int cas, int n, Scanner in) { 
 int[] L = new int[n];
final int[] P = new int[n];
Integer[] I = new Integer[n];
for (int i = 0; i < n; i++) L[i] = in.nextInt();
for (int i = 0; i < n; i++) {
    P[i] = in.nextInt();
    I[i] = i;
}
Arrays.sort(I, new Comparator<Integer>() {

    public int compare(Integer A, Integer B) {
        if (P[A] != P[B])
            return P[B] - P[A];
        return A - B;
    }
});
System.out.printf("Case #%d:", cas);
for (Integer x : I) System.out.print(" " + x);
System.out.println();
return I;
}


public static int[] func_b84484822d6a441cb1804c1108af29de(int cas, int n, Scanner in) { 
 int[] L = new int[n];
final int[] P = new int[n];
Integer[] I = new Integer[n];
for (int i = 0; i < n; i++) L[i] = in.nextInt();
for (int i = 0; i < n; i++) {
    P[i] = in.nextInt();
    I[i] = i;
}
Arrays.sort(I, new Comparator<Integer>() {

    public int compare(Integer A, Integer B) {
        if (P[A] != P[B])
            return P[B] - P[A];
        return A - B;
    }
});
System.out.printf("Case #%d:", cas);
for (Integer x : I) System.out.print(" " + x);
System.out.println();
return P;
}


*********************************

#### Score: 5.95766


#### Java Tokens: next, area, println, system, nextint, scan, arrays, sort, point, int, case 

public static double func_bd9e8d6df69647369237e4345fcbc70f(int ca, Scanner scan) { 
 A.a = new Point[A.L + A.U];
A.l = new Point[A.L];
A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
return area;
}


public static double func_2a34ea0e18e442de966cec9dcdb4a5ff(int ca, Scanner scan) { 
 A.l = new Point[A.L];
A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
return area;
}


public static double func_2e9d3d3a15f747179f4fdfa79118301d(int ca, Scanner scan) { 
 A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
return area;
}


*********************************

#### Score: 5.95766


#### Java Tokens: next, area, println, system, nextint, scan, arrays, sort, int, point, case 

public static double func_d6df039c55b540d5b28481a9d5e19faf(int ca, Scanner scan) { 
 A.L = scan.nextInt();
A.U = scan.nextInt();
A.G = scan.nextInt();
A.a = new Point[A.L + A.U];
A.l = new Point[A.L];
A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
return area;
}


public static double func_ee12f7788d5a41dea11cead152775b5f(int ca, Scanner scan) { 
 A.G = scan.nextInt();
A.a = new Point[A.L + A.U];
A.l = new Point[A.L];
A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
return area;
}


public static double func_21a554155ac44c14a8d2adc4ca30e088(int ca, Scanner scan) { 
 A.U = scan.nextInt();
A.G = scan.nextInt();
A.a = new Point[A.L + A.U];
A.l = new Point[A.L];
A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
return area;
}


*********************************

#### Score: 5.71832


#### Java Tokens: next, area, println, system, nextint, scan, arrays, sort, lastx, point, int, case 

public static double func_6b887d75c4dc484692cb1828ec0c0238(int ca, Scanner scan) { 
 A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
double lastx = 0;
return area;
}


public static double func_dcf2f2ec3fa7479cb21c2ee20b0f4c76(int ca, Scanner scan) { 
 for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
double lastx = 0;
return area;
}


public static double func_7a700a5b95fe4bd7b3dea47eb1c7a031(int ca, Scanner scan) { 
 for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
double lastx = 0;
return lastx;
}


*********************************

#### Score: 5.71832


#### Java Tokens: next, area, println, system, nextint, scan, arrays, sort, lastx, int, point, case 

public static double func_9abef37695754726a5f42acc0797239f(int ca, Scanner scan) { 
 A.U = scan.nextInt();
A.G = scan.nextInt();
A.a = new Point[A.L + A.U];
A.l = new Point[A.L];
A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
double lastx = 0;
return lastx;
}


public static double func_d05ac71adab140dab4a3c612534b59d0(int ca, Scanner scan) { 
 A.W = scan.nextInt();
A.L = scan.nextInt();
A.U = scan.nextInt();
A.G = scan.nextInt();
A.a = new Point[A.L + A.U];
A.l = new Point[A.L];
A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
double lastx = 0;
return area;
}


public static double func_be5b367683ff41a4b6a11c7b8e41f9dd(int ca, Scanner scan) { 
 A.W = scan.nextInt();
A.L = scan.nextInt();
A.U = scan.nextInt();
A.G = scan.nextInt();
A.a = new Point[A.L + A.U];
A.l = new Point[A.L];
A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
double lastx = 0;
return lastx;
}


*********************************

#### Score: 5.55300


#### Java Tokens: area, println, system, arrays, sort, case 

public static double func_4b1c072c834e41fd8c7a19adddab279b(int ca) { 
 Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
return area;
}


*********************************

#### Score: 5.52554


#### Java Tokens: next, nextint, arrays, sort, int 

public static int[] func_22076b52cf1b4b38abcb57aff468facd(Scanner sc) { 
 int l = sc.nextInt();
int u = sc.nextInt();
int g = sc.nextInt();
int[] xl = new int[l];
int[] yl = new int[l];
int[] xu = new int[u];
int[] yu = new int[u];
for (int i = 0; i < l; ++i) {
    xl[i] = sc.nextInt();
    yl[i] = sc.nextInt();
}
for (int i = 0; i < u; ++i) {
    xu[i] = sc.nextInt();
    yu[i] = sc.nextInt();
}
int[] xs = new int[l + u];
for (int i = 0; i < l; ++i) xs[i] = xl[i];
for (int i = 0; i < u; ++i) xs[l + i] = xu[i];
Arrays.sort(xs);
return yl;
}


public static int[] func_ee59f67c0043426489797ad8c66d3f73(Scanner sc) { 
 int w = sc.nextInt();
int l = sc.nextInt();
int u = sc.nextInt();
int g = sc.nextInt();
int[] xl = new int[l];
int[] yl = new int[l];
int[] xu = new int[u];
int[] yu = new int[u];
for (int i = 0; i < l; ++i) {
    xl[i] = sc.nextInt();
    yl[i] = sc.nextInt();
}
for (int i = 0; i < u; ++i) {
    xu[i] = sc.nextInt();
    yu[i] = sc.nextInt();
}
int[] xs = new int[l + u];
for (int i = 0; i < l; ++i) xs[i] = xl[i];
for (int i = 0; i < u; ++i) xs[l + i] = xu[i];
Arrays.sort(xs);
return xs;
}


public static int[] func_16386d09364745779cf4c19afae797f7(Scanner sc) { 
 int l = sc.nextInt();
int u = sc.nextInt();
int g = sc.nextInt();
int[] xl = new int[l];
int[] yl = new int[l];
int[] xu = new int[u];
int[] yu = new int[u];
for (int i = 0; i < l; ++i) {
    xl[i] = sc.nextInt();
    yl[i] = sc.nextInt();
}
for (int i = 0; i < u; ++i) {
    xu[i] = sc.nextInt();
    yu[i] = sc.nextInt();
}
int[] xs = new int[l + u];
for (int i = 0; i < l; ++i) xs[i] = xl[i];
for (int i = 0; i < u; ++i) xs[l + i] = xu[i];
Arrays.sort(xs);
return xs;
}


*********************************

#### Score: 5.49887


#### Java Tokens: next, area, nextint, scan, sort, int, point, target, println, system, arrays, lastx, case 

public static double func_4292bbf43d75467791ff8fc085c8ce9a(int ca, Scanner scan) { 
 A.W = scan.nextInt();
A.L = scan.nextInt();
A.U = scan.nextInt();
A.G = scan.nextInt();
A.a = new Point[A.L + A.U];
A.l = new Point[A.L];
A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
double lastx = 0;
double target = area / A.G;
return area;
}


public static double func_297c0f124fdc447a90760cd4c5f236bf(int ca, Scanner scan) { 
 A.G = scan.nextInt();
A.a = new Point[A.L + A.U];
A.l = new Point[A.L];
A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
double lastx = 0;
double target = area / A.G;
return lastx;
}


public static double func_00bb193dced04d2397c786c5f8d54350(int ca, Scanner scan) { 
 A.U = scan.nextInt();
A.G = scan.nextInt();
A.a = new Point[A.L + A.U];
A.l = new Point[A.L];
A.u = new Point[A.U];
for (int i = 0; i < A.L; i++) {
    A.l[i] = A.a[i] = new Point(scan.nextInt(), scan.nextInt(), false);
}
for (int i = 0; i < A.U; i++) {
    A.u[i] = A.a[i + A.L] = new Point(scan.nextInt(), scan.nextInt(), true);
}
Arrays.sort(A.a);
System.out.println("Case #" + ca + ":");
// Find total area
double area = A.area(0, A.W);
double lastx = 0;
double target = area / A.G;
return area;
}


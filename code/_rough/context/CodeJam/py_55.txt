### Py Tokens: ifile, set, union, list, foo2, int, range, split, foo4, sorted, readline, total, append 

### Py functions

def func_6defc215955049b6bd68013c9fa8248b(L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    for x in cc:
        dd.append(foo2(x, aa, bb))
    total = foo4(dd)
    return x

def func_c80ac19917b947a09122dc3b99375e29(L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    for x in cc:
        dd.append(foo2(x, aa, bb))
    total = foo4(dd)
    return bb

def func_8d1c513892e9430c975fa6012c5b7eda(L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    for x in cc:
        dd.append(foo2(x, aa, bb))
    total = foo4(dd)
    return aa

def func_184f0c5532684edab7c693d9c2354754(L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    for x in cc:
        dd.append(foo2(x, aa, bb))
    total = foo4(dd)
    return U

def func_58ad769297774c07a474d08080799c71(L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    for x in cc:
        dd.append(foo2(x, aa, bb))
    total = foo4(dd)
    return x

*********************************

#### Score: 7.97284


#### Java Tokens: add, sortedset, sorted, set, tree, integer, treeset 

public static SortedSet<Integer> func_908a1fb2d6ea4b70bac7de1f0210bf2e(int l, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
return xs;
}


public static SortedSet<Integer> func_33d30156f21a452c9e7e9783fd47a69d(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
return xs;
}


*********************************

#### Score: 7.57770


#### Java Tokens: add, sortedset, sorted, set, size, tree, integer, treeset 

public static SortedSet<Integer> func_4ce0a44eab0542dfa8546f1c61bacac4(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return xs;
}


public static int[] func_1fe4188d08b24ee0990c1d1b63842dc2(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return nx;
}


public static int[] func_900079f612634215823886119e9e27bb(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
return nx;
}


*********************************

#### Score: 7.22192


#### Java Tokens: add, sortedset, sorted, set, size, tree, length, integer, treeset 

public static int[] func_6a5e7e859297479b9467357300fe07c1(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return nx;
}


public static SortedSet<Integer> func_ce9d48e027814f3992228953ecdf796f(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return xs;
}


public static double[] func_985ac19939df45b0aa6e6fb24e535b72(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return ny;
}


*********************************

#### Score: 5.76115


#### Java Tokens: add, total, array, double, baia, eps, arraylist, bai, list 

public static double func_e9aa995d1d4a4d11b253e23d6f742b1c(int n, double X, double[] x, double[] y) { 
 double total = 0;
ArrayList<Double> lx = new ArrayList<Double>();
ArrayList<Double> ly = new ArrayList<Double>();
lx.add(0.0);
ly.add(-2000.0);
for (int i = 0; i < n; ++i) {
    if (x[i] > X + BaiA.eps) {
        double Y = (X - x[i - 1]) * (y[i] - y[i - 1]) / (x[i] - x[i - 1]) + y[i - 1];
        lx.add(X);
        ly.add(Y);
        break;
    } else {
        lx.add(x[i]);
        ly.add(y[i]);
    }
}
lx.add(X);
ly.add(-2000.0);
return total;
}


public static ArrayList<Double> func_da1adc8367d54b468027bc65c6faf50d(int n, double X, double[] x, double[] y) { 
 double x0 = 0, y0 = 0;
double total = 0;
ArrayList<Double> lx = new ArrayList<Double>();
ArrayList<Double> ly = new ArrayList<Double>();
lx.add(0.0);
ly.add(-2000.0);
for (int i = 0; i < n; ++i) {
    if (x[i] > X + BaiA.eps) {
        double Y = (X - x[i - 1]) * (y[i] - y[i - 1]) / (x[i] - x[i - 1]) + y[i - 1];
        lx.add(X);
        ly.add(Y);
        break;
    } else {
        lx.add(x[i]);
        ly.add(y[i]);
    }
}
return lx;
}


public static ArrayList<Double> func_9cd5e9959eba41eeb217498a898c284b(int n, double X, double[] x, double[] y) { 
 double x0 = 0, y0 = 0;
double total = 0;
ArrayList<Double> lx = new ArrayList<Double>();
ArrayList<Double> ly = new ArrayList<Double>();
lx.add(0.0);
ly.add(-2000.0);
for (int i = 0; i < n; ++i) {
    if (x[i] > X + BaiA.eps) {
        double Y = (X - x[i - 1]) * (y[i] - y[i - 1]) / (x[i] - x[i - 1]) + y[i - 1];
        lx.add(X);
        ly.add(Y);
        break;
    } else {
        lx.add(x[i]);
        ly.add(y[i]);
    }
}
lx.add(X);
ly.add(-2000.0);
return ly;
}


*********************************

#### Score: 5.69784


#### Java Tokens: next, nextint, array, integer, arraylist, list, int 

public static double[] func_4312c6b3e990491f89e3878fe67e0f96(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
return r;
}


public static int func_82dc3e19e4ca423c94a1a8ed5443aa1c(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
return n;
}


public static double[] func_64a305c06e664b1da148f65b5752a081(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
return l;
}


*********************************

#### Score: 5.42194


#### Java Tokens: next, add, nextint, array, integer, arraylist, list, int 

public static double[] func_ee90b54cb42642dab06e77f774f54415(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
return r;
}


public static List<Integer> func_e7e9315e0e774e9eb72db934fa19c1e6(int n, double[] r, Scanner in) { 
 for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
return p;
}


public static int func_58d21e6da8734e3f9f6376cedf100299(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
return n;
}


*********************************

#### Score: 5.27860


#### Java Tokens: add, total, size, array, double, get, baia, eps, arraylist, bai, list 

public static ArrayList<Double> func_fc3195f7e21249b99643e76fd225719f(int n, double X, double[] x, double[] y) { 
 double x0 = 0, y0 = 0;
double total = 0;
ArrayList<Double> lx = new ArrayList<Double>();
ArrayList<Double> ly = new ArrayList<Double>();
lx.add(0.0);
ly.add(-2000.0);
for (int i = 0; i < n; ++i) {
    if (x[i] > X + BaiA.eps) {
        double Y = (X - x[i - 1]) * (y[i] - y[i - 1]) / (x[i] - x[i - 1]) + y[i - 1];
        lx.add(X);
        ly.add(Y);
        break;
    } else {
        lx.add(x[i]);
        ly.add(y[i]);
    }
}
lx.add(X);
ly.add(-2000.0);
x0 = lx.get(lx.size() - 1);
return lx;
}


public static ArrayList<Double> func_e5d23a911734425bbb78e15973090ab0(int n, double X, double[] x, double[] y) { 
 double x0 = 0, y0 = 0;
double total = 0;
ArrayList<Double> lx = new ArrayList<Double>();
ArrayList<Double> ly = new ArrayList<Double>();
lx.add(0.0);
ly.add(-2000.0);
for (int i = 0; i < n; ++i) {
    if (x[i] > X + BaiA.eps) {
        double Y = (X - x[i - 1]) * (y[i] - y[i - 1]) / (x[i] - x[i - 1]) + y[i - 1];
        lx.add(X);
        ly.add(Y);
        break;
    } else {
        lx.add(x[i]);
        ly.add(y[i]);
    }
}
lx.add(X);
ly.add(-2000.0);
x0 = lx.get(lx.size() - 1);
y0 = ly.get(ly.size() - 1);
for (int i = 0; i < lx.size(); ++i) {
    double xx = lx.get(i);
    double yy = ly.get(i);
    total += (x0 + xx) * (y0 - yy);
    x0 = xx;
    y0 = yy;
}
return lx;
}


public static ArrayList<Double> func_bd809b887a874ddab468d984b110791e(int n, double X, double[] x, double[] y) { 
 double x0 = 0, y0 = 0;
double total = 0;
ArrayList<Double> lx = new ArrayList<Double>();
ArrayList<Double> ly = new ArrayList<Double>();
lx.add(0.0);
ly.add(-2000.0);
for (int i = 0; i < n; ++i) {
    if (x[i] > X + BaiA.eps) {
        double Y = (X - x[i - 1]) * (y[i] - y[i - 1]) / (x[i] - x[i - 1]) + y[i - 1];
        lx.add(X);
        ly.add(Y);
        break;
    } else {
        lx.add(x[i]);
        ly.add(y[i]);
    }
}
lx.add(X);
ly.add(-2000.0);
x0 = lx.get(lx.size() - 1);
y0 = ly.get(ly.size() - 1);
for (int i = 0; i < lx.size(); ++i) {
    double xx = lx.get(i);
    double yy = ly.get(i);
    total += (x0 + xx) * (y0 - yy);
    x0 = xx;
    y0 = yy;
}
return ly;
}


*********************************

#### Score: 5.27860


#### Java Tokens: area, linkedlist, total, goal, err, double, answers, totalarea, list, target, linked 

public static double func_b482d78689d847599048c6cca1bd460f(int g, double totalArea) { 
 double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
return target;
}


public static double func_31bacf94d0a14d2cb7c0afbd1f6ca9fa(int g, double totalArea) { 
 double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
return ERR;
}


public static double func_31e40648607d45a0893df8b9e0055a26(int g, double totalArea) { 
 double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
return goal;
}


*********************************

#### Score: 5.05014


#### Java Tokens: next, add, nextint, string, max, index, integer, arraylist, list, int, result, input, task, size, array, builder, task1, stringbuilder, tostring, append 

public static String func_9cf9966f1e7d481ebca3573a8491c997(int N) { 
 int[] L = new int[N];
for (int i = 0; i < N; i++) {
    L[i] = Task1.input.nextInt();
}
int[] P = new int[N];
for (int i = 0; i < N; i++) {
    P[i] = Task1.input.nextInt();
}
boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


public static String func_8887556108dd485dbac4c9cc32c9b0af(int N) { 
 int[] P = new int[N];
for (int i = 0; i < N; i++) {
    P[i] = Task1.input.nextInt();
}
boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


public static String func_e049ea8d9753483b8ebe0584e699d86c(int N, int[] L) { 
 for (int i = 0; i < N; i++) {
    L[i] = Task1.input.nextInt();
}
int[] P = new int[N];
for (int i = 0; i < N; i++) {
    P[i] = Task1.input.nextInt();
}
boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


*********************************

#### Score: 4.96220


#### Java Tokens: set, tree, integer, treeset 

public static int[][] func_9a47156f72654109bd8da04bd2f01d1c(int U, int L) { 
 TreeSet<Integer> xx = new TreeSet<Integer>();
int[][] x = new int[][] { new int[L], new int[U] }, y = new int[][] { new int[L], new int[U] };
return y;
}


public static TreeSet<Integer> func_5d30268f025145b782a51f3d95d66bae(int U, int L) { 
 TreeSet<Integer> xx = new TreeSet<Integer>();
int[][] x = new int[][] { new int[L], new int[U] }, y = new int[][] { new int[L], new int[U] };
return xx;
}


public static int[][] func_e9b2add3236a4a00921bf47e1e4787c4(int U, int L) { 
 TreeSet<Integer> xx = new TreeSet<Integer>();
int[][] x = new int[][] { new int[L], new int[U] }, y = new int[][] { new int[L], new int[U] };
int[] c = new int[] { L, U };
return x;
}


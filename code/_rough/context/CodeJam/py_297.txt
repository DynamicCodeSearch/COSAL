### Py Tokens: files, map, goes, seq, ets, int, in1, in2, tcase, close, readline, open, etries, best, case, index, join, extra, extraif1goesfirst, extraif2goes, range, abs, split, str, test, y12r5p1, first, infile, codejam, swap 

### Py functions

def func_070a7992ec344d879ad04c59a67c7187(ets, p):
    infile = open('codejam/test_files/Y12R5P1/A.in')
    T = int(infile.readline())
    for tcase in range(T):
        N = int(infile.readline())
        Ls = map(int, infile.readline().split())
        Ps = map(int, infile.readline().split())
        etries = [ets[p] for p in Ps]
        seq = [(index, Ls[index], etries[index]) for index in range(N)]
        for k in range(N):
            best = k
            for s in range(k + 1, N):
                in1 = seq[best][0]
                L1 = seq[best][1]
                E1 = seq[best][2]
                in2 = seq[s][0]
                L2 = seq[s][1]
                E2 = seq[s][2]
                extra_if_1_goes_first = (E2 - 1) * E1 * L1
                extra_if_2_goes = (E1 - 1) * E2 * L2
                if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
                    if in2 < in1:
                        best = s
                elif extra_if_2_goes < extra_if_1_goes_first:
                    best = s
            swap = seq[best]
            seq[best] = seq[k]
            seq[k] = swap
        print 'Case #%d:' % (tcase + 1),
        print ' '.join(map(str, [seq[i][0] for i in range(N)]))
    if in2 < in1:
        best = s
    infile.close()
    return N

def func_165ce14f49dc49bc812c75bec442ebab(ets, p):
    infile = open('codejam/test_files/Y12R5P1/A.in')
    T = int(infile.readline())
    for tcase in range(T):
        N = int(infile.readline())
        Ls = map(int, infile.readline().split())
        Ps = map(int, infile.readline().split())
        etries = [ets[p] for p in Ps]
        seq = [(index, Ls[index], etries[index]) for index in range(N)]
        for k in range(N):
            best = k
            for s in range(k + 1, N):
                in1 = seq[best][0]
                L1 = seq[best][1]
                E1 = seq[best][2]
                in2 = seq[s][0]
                L2 = seq[s][1]
                E2 = seq[s][2]
                extra_if_1_goes_first = (E2 - 1) * E1 * L1
                extra_if_2_goes = (E1 - 1) * E2 * L2
                if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
                    if in2 < in1:
                        best = s
                elif extra_if_2_goes < extra_if_1_goes_first:
                    best = s
            swap = seq[best]
            seq[best] = seq[k]
            seq[k] = swap
        print 'Case #%d:' % (tcase + 1),
        print ' '.join(map(str, [seq[i][0] for i in range(N)]))
    if in2 < in1:
        best = s
    infile.close()
    return T

def func_f2b6193c8b57480eaad906529717eb0f(ets, p):
    infile = open('codejam/test_files/Y12R5P1/A.in')
    T = int(infile.readline())
    for tcase in range(T):
        N = int(infile.readline())
        Ls = map(int, infile.readline().split())
        Ps = map(int, infile.readline().split())
        etries = [ets[p] for p in Ps]
        seq = [(index, Ls[index], etries[index]) for index in range(N)]
        for k in range(N):
            best = k
            for s in range(k + 1, N):
                in1 = seq[best][0]
                L1 = seq[best][1]
                E1 = seq[best][2]
                in2 = seq[s][0]
                L2 = seq[s][1]
                E2 = seq[s][2]
                extra_if_1_goes_first = (E2 - 1) * E1 * L1
                extra_if_2_goes = (E1 - 1) * E2 * L2
                if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
                    if in2 < in1:
                        best = s
                elif extra_if_2_goes < extra_if_1_goes_first:
                    best = s
            swap = seq[best]
            seq[best] = seq[k]
            seq[k] = swap
        print 'Case #%d:' % (tcase + 1),
        print ' '.join(map(str, [seq[i][0] for i in range(N)]))
    if in2 < in1:
        best = s
    infile.close()
    return L2

def func_372d2a000b934087bfdedc9531ddba9c(ets, p):
    infile = open('codejam/test_files/Y12R5P1/A.in')
    T = int(infile.readline())
    for tcase in range(T):
        N = int(infile.readline())
        Ls = map(int, infile.readline().split())
        Ps = map(int, infile.readline().split())
        etries = [ets[p] for p in Ps]
        seq = [(index, Ls[index], etries[index]) for index in range(N)]
        for k in range(N):
            best = k
            for s in range(k + 1, N):
                in1 = seq[best][0]
                L1 = seq[best][1]
                E1 = seq[best][2]
                in2 = seq[s][0]
                L2 = seq[s][1]
                E2 = seq[s][2]
                extra_if_1_goes_first = (E2 - 1) * E1 * L1
                extra_if_2_goes = (E1 - 1) * E2 * L2
                if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
                    if in2 < in1:
                        best = s
                elif extra_if_2_goes < extra_if_1_goes_first:
                    best = s
            swap = seq[best]
            seq[best] = seq[k]
            seq[k] = swap
        print 'Case #%d:' % (tcase + 1),
        print ' '.join(map(str, [seq[i][0] for i in range(N)]))
    if in2 < in1:
        best = s
    infile.close()
    return E2

def func_89aefe2f8c4e4c20a15323e554accf9f(ets, p):
    infile = open('codejam/test_files/Y12R5P1/A.in')
    T = int(infile.readline())
    for tcase in range(T):
        N = int(infile.readline())
        Ls = map(int, infile.readline().split())
        Ps = map(int, infile.readline().split())
        etries = [ets[p] for p in Ps]
        seq = [(index, Ls[index], etries[index]) for index in range(N)]
        for k in range(N):
            best = k
            for s in range(k + 1, N):
                in1 = seq[best][0]
                L1 = seq[best][1]
                E1 = seq[best][2]
                in2 = seq[s][0]
                L2 = seq[s][1]
                E2 = seq[s][2]
                extra_if_1_goes_first = (E2 - 1) * E1 * L1
                extra_if_2_goes = (E1 - 1) * E2 * L2
                if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
                    if in2 < in1:
                        best = s
                elif extra_if_2_goes < extra_if_1_goes_first:
                    best = s
            swap = seq[best]
            seq[best] = seq[k]
            seq[k] = swap
        print 'Case #%d:' % (tcase + 1),
        print ' '.join(map(str, [seq[i][0] for i in range(N)]))
    if in2 < in1:
        best = s
    infile.close()
    return E1

*********************************

#### Score: 9.94322


#### Java Tokens: index, first 

public static int func_4b5ca9d0203544b792c3ca8bbcf06ff0(int first, int index) { 
 first = index;
++index;
return first;
}


*********************************

#### Score: 9.26776


#### Java Tokens: temp, index, first 

public static long func_23c1256235264e8abccace9d53b5dce5(int first, int index, long temp) { 
 temp = 0;
index = first + 1;
return temp;
}


public static int func_652a267f33464428ad69a3b5ee219807(int first, int index, long temp) { 
 temp = 0;
index = first + 1;
return index;
}


*********************************

#### Score: 9.21429


#### Java Tokens: println, min, test, max, index, sum, main, math, case 

public static long func_f3176e2ca8e24c69969d89457a93153d(int test, int n, int[] a, long[] sum) { 
 for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + a[i];
long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
Main.out.println("Case #" + test + ": " + (1.0 * (sum[n] - x) / sum[n]));
return x;
}


public static long func_7bd3fd10c2ce43518465f1b9d52c87de(int test, int n, long[] sum) { 
 long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
Main.out.println("Case #" + test + ": " + (1.0 * (sum[n] - x) / sum[n]));
return x;
}


public static int func_b9ca142c51d4420fb81e954380b16e1c(int test, int n, int[] a, long[] sum) { 
 sum[0] = 0;
for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + a[i];
long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
Main.out.println("Case #" + test + ": " + (1.0 * (sum[n] - x) / sum[n]));
return index;
}


*********************************

#### Score: 8.68460


#### Java Tokens: next, println, test, nextint, case, int 

public static PrintWriter func_c8c26e20c8264cafb4030a5259e90a7a(int test, PrintWriter pw, Scanner sc) { 
 pw.println("Case #" + test + ": ");
int w = sc.nextInt();
int l = sc.nextInt();
int u = sc.nextInt();
int g = sc.nextInt();
double sl = 0;
double su = 0;
return pw;
}


public static PrintWriter func_a9e112db93b3410f9a8ef0d6f76e8385(int test, PrintWriter pw, Scanner sc) { 
 pw.println("Case #" + test + ": ");
int w = sc.nextInt();
return pw;
}


public static double func_571532e9809f41ef811e496f09f58193(int test, PrintWriter pw, Scanner sc) { 
 pw.println("Case #" + test + ": ");
int w = sc.nextInt();
int l = sc.nextInt();
int u = sc.nextInt();
int g = sc.nextInt();
double sl = 0;
double su = 0;
return sl;
}


*********************************

#### Score: 8.68191


#### Java Tokens: temp, index, first, second 

public static int func_2d9ace4459b346ab80b8ce979d931288(int N) { 
 int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
return index;
}


public static long func_6dc942375213487eb16fe37125a5743c(int N) { 
 int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
return temp;
}


public static int func_556f5d73cb784587b90803bfe93d0758(int N) { 
 int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
return first;
}


*********************************

#### Score: 8.68191


#### Java Tokens: arr, temp, index, first 

public static long func_e043eef61dd045869a98ac752aec1573(int first, int index, long temp, long[] arr) { 
 temp += arr[index];
first = index;
return temp;
}


public static long func_a142cc7eaf7740b8aec91ee7ae41c015(int first, int index, long temp, long[] arr) { 
 temp += arr[index];
first = index;
++index;
return temp;
}


public static int func_b0acbfa5933648f6bd0e2d2d3f3b9e62(int first, int index, long temp, long[] arr) { 
 temp += arr[index];
first = index;
return first;
}


*********************************

#### Score: 8.31666


#### Java Tokens: abs, min, max, index, sum, math 

public static long func_0cbc15f5157848e6a6553949ccdd7616(int z, int n, int index, long min) { 
 while (z < n - 1 && Math.abs(A.sum(z, index) - A.sum(index + 1, n - 1)) > Math.abs(A.sum(z, index + 1) - A.sum(index + 2, n - 1))) {
    index++;
}
min = Math.min(min, Math.max(A.sum(0, z - 1), Math.max(A.sum(z, index), A.sum(index + 1, n - 1))));
return min;
}


*********************************

#### Score: 8.16893


#### Java Tokens: arr, temp, avg, index, first 

public static long func_d8da5f841a0e44dfba528261274a738b(int first, int N, long avg, long temp, long[] arr) { 
 int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
return temp;
}


public static long func_bbc1e3fc468144aaa2626c323e3a30cb(int first, int N, long avg, long temp, long[] arr) { 
 int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
return temp;
}


public static long func_4f4930d995394d52bb76c83fd81417b1(int first, int N, long avg, long[] arr) { 
 long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
return temp;
}


*********************************

#### Score: 8.05300


#### Java Tokens: next, nextint, test, perfect, casenum, num, cnt, casecnt, int, println, print, system, flush, solve, processing, close, case 

public static PrintWriter func_f12e35b80f5a45849f90b476496469d3(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ":");
    new Perfect().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return pw;
}


public static int func_88d590cfe4e9440abaf20e0993b429d7(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ":");
    new Perfect().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return caseCnt;
}


public static PrintWriter func_043e15777c2245f2ace3949d7ead4e4c(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ":");
    new Perfect().solve(sc, pw);
}
pw.flush();
pw.close();
return pw;
}


*********************************

#### Score: 8.05300


#### Java Tokens: next, nextint, test, casenum, num, cnt, casecnt, int, cheaters, println, print, system, flush, solve, processing, close, case 

public static PrintWriter func_09d59f7d2de54aa6ad5c03d1dd9a0206(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
pw.flush();
pw.close();
return pw;
}


public static int func_c8d4c03dd31f4ebaa9d0dbb08bd7aa83(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return caseCnt;
}


public static PrintWriter func_8854336f103d4db6836dc952494d5b44(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
pw.flush();
pw.close();
sc.close();
return pw;
}


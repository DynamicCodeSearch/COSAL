### Py Tokens: range, ans, max, sum, min 

### Py functions

def func_d8f2c24e01034880baed6b1643b97e6d(N, p, q, r, s):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return a

def func_adcf00c35c534e108f31875f81ccfd1a(N, p, q, r, s):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return p

def func_cde806f88f19419fa1543047a754a1bb(N, p, q, r, s):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return D

def func_42ba5a7d8f6149869cb41eac288183a4(N, p, q, r, s):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return A

def func_e29d646daae049a5a194eb7cadc42e16(N, p, q, r, s):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return S

*********************************

#### Score: 9.59566


#### Java Tokens: min, max, ans, sum, math 

public static int func_18e0d7a3a9004e878e1bb3e739bfcbf6(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return l;
}


public static long func_86e361714b204771a5224d744686e8da(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return ans;
}


public static long func_1bd1c810a74e498e9723f78d4fe9cfda(int n, int i, int l, long ans, long[] sum) { 
 while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
    l++;
}
ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
return ans;
}


*********************************

#### Score: 9.05922


#### Java Tokens: res, min, max, ans, sum, math 

public static int func_047b1e0c188c41b7a93977a8a64ae3f3(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return l;
}


public static int func_330173ad6bbb49649ae4310602de4188(int n, long ans, long[] sum) { 
 int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return l;
}


public static long func_692cf403b4954663b037b51f4188faa5(int n, int l, long ans, long[] sum) { 
 for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return ans;
}


*********************************

#### Score: 9.05922


#### Java Tokens: min, max, ans, length, sum, math 

public static long func_71e798a67e324fefbe8af096684cdfe2(long sm, long sl, long[] a) { 
 long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sum;
}


public static long func_23fdec310e3d45b2a1f3a29c6c33fd64(long sl, long[] a) { 
 long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sl;
}


public static long func_bbd2f72de3de4d6996fbe2d6c103e060(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sr;
}


*********************************

#### Score: 9.05922


#### Java Tokens: min, max, ans, pref, sum, math 

public static long func_30c835fdb9ca4979818148535431f2be(int t, long rs, long sum, long max, long[] pref) { 
 long ans = rs;
ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
max = Math.min(max, ans);
return ans;
}


public static long func_cac459492e1c4e069037e8565f66fc81(int t, long rs, long sum, long max, long[] pref) { 
 long ans = rs;
ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
max = Math.min(max, ans);
return max;
}


public static long func_c99dc47448f64c609053987de2c6f9bf(int t, long ans, long sum, long max, long[] pref) { 
 ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
max = Math.min(max, ans);
return max;
}


*********************************

#### Score: 8.15504


#### Java Tokens: res, min, max, %.15f, ans, sum, math, printf 

public static PrintWriter func_a3c059c89a1b435ab46b204dd5d26129(int n, long ans, long[] sum, PrintWriter out) { 
 int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
out.printf("%.15f\n", 1 - res);
return out;
}


public static PrintWriter func_aa8cbe1272c940b39b40f729b29f02dc(int n, int l, long ans, long[] sum, PrintWriter out) { 
 for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
out.printf("%.15f\n", 1 - res);
return out;
}


public static long func_a74b2d451ce242e4978f8bcfa7e07356(int n, long[] sum, PrintWriter out) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
out.printf("%.15f\n", 1 - res);
return ans;
}


*********************************

#### Score: 7.98320


#### Java Tokens: max, ans, sum, math 

public static long func_65c7102b82d645fa9e0c8269aacf7830(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
return sum;
}


public static long func_9aa7155d934f46c3af0e2c5b9c19a04c(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return ans;
}


public static long func_5d136f36cafa4e3683a603b6a16cb250(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return sum;
}


*********************************

#### Score: 7.51368


#### Java Tokens: rest, max, ans, sum, math 

public static double func_bb4ba1ec4c034036acf127b6ee13fe8c(int n, long sum, long[] a) { 
 long t1 = 0;
long t2 = 0;
long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return ans;
}


public static int func_49b97a1175c44377bb1beda711591c0f(int n, long sum, long[] a) { 
 long t1 = 0;
long t2 = 0;
long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return j;
}


public static long func_2d132b885b4f43998baf6743f1e4214e(int n, long t2, long sum, long t1, long[] a) { 
 long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return t1;
}


*********************************

#### Score: 7.51368


#### Java Tokens: max, ans, length, sum, math 

public static long func_191647a8fba345efbb3f6dc4af8e4128(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sm;
}


public static long func_280276b4a70c454791de2abe8192e908(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sum;
}


public static long func_7bf42b8990f9499faaea39b1ca5d25f1(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sl;
}


*********************************

#### Score: 7.51368


#### Java Tokens: max, ans, pref, sum, math 

public static long func_a84f023a6b79404cb10c198c9d86bdd8(int t, long rs, long sum, long[] pref) { 
 long ans = rs;
ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
return ans;
}


*********************************

#### Score: 7.51368


#### Java Tokens: rate, max, ans, maxsum, sum 

public static double func_620c5d7fa7d04f5cb15740f11614e906(long maxSum, long sum, double ans) { 
 double rate = (sum - maxSum) * 1.0 / sum;
if (rate > ans) {
    ans = rate;
}
return ans;
}


public static double func_8fae9be14d7444e4b9f9a72a4aad0e07(long maxSum, long sum, double ans) { 
 double rate = (sum - maxSum) * 1.0 / sum;
if (rate > ans) {
    ans = rate;
}
return rate;
}


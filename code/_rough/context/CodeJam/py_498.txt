### Py Tokens: sort, range, len, profit, max, maxprofit, append 

### Py functions

def func_058573bcb1314f9aa02a3d93592ba905(B, X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    for i in range(1, B + 1):
        m = 0
        for j in range(1, 37):
            if my[j] + X[j] < my[m] + X[m]:
                m = j
            elif my[j] + X[j] == my[m] + X[m]:
                if my[j] < my[m]:
                    m = j
        my[m] += 1
        p = profit(my, X, i)
        if p > max_profit:
            max_profit = p
    if my[j] + X[j] < my[m] + X[m]:
        m = j
    elif my[j] + X[j] == my[m] + X[m]:
        if my[j] < my[m]:
            m = j
    if my[j] < my[m]:
        m = j
    return max_profit

def func_f3dd49a9ac4843e3b06d6e197f77b9b1(X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    return X

def func_3d5d91c36c7d48729b26baa24f9e20da(B, X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    for i in range(1, B + 1):
        m = 0
        for j in range(1, 37):
            if my[j] + X[j] < my[m] + X[m]:
                m = j
            elif my[j] + X[j] == my[m] + X[m]:
                if my[j] < my[m]:
                    m = j
        my[m] += 1
        p = profit(my, X, i)
        if p > max_profit:
            max_profit = p
    return max_profit

def func_1fdf53e4fe064e66bfbaccd335fb9286(B, X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    for i in range(1, B + 1):
        m = 0
        for j in range(1, 37):
            if my[j] + X[j] < my[m] + X[m]:
                m = j
            elif my[j] + X[j] == my[m] + X[m]:
                if my[j] < my[m]:
                    m = j
        my[m] += 1
        p = profit(my, X, i)
        if p > max_profit:
            max_profit = p
    if my[j] + X[j] < my[m] + X[m]:
        m = j
    elif my[j] + X[j] == my[m] + X[m]:
        if my[j] < my[m]:
            m = j
    return max_profit

def func_179045467ba54a4198d4c150043e9a6b(B, X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    for i in range(1, B + 1):
        m = 0
        for j in range(1, 37):
            if my[j] + X[j] < my[m] + X[m]:
                m = j
            elif my[j] + X[j] == my[m] + X[m]:
                if my[j] < my[m]:
                    m = j
        my[m] += 1
        p = profit(my, X, i)
        if p > max_profit:
            max_profit = p
    if my[j] + X[j] < my[m] + X[m]:
        m = j
    elif my[j] + X[j] == my[m] + X[m]:
        if my[j] < my[m]:
            m = j
    if my[j] < my[m]:
        m = j
    return max_profit

*********************************

#### Score: 7.53028


#### Java Tokens: add, money, collections, sort, profit 

public static long func_ed9b057143b0438e85858b7ef1167777(long l, long money, long[] a, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return money;
}


*********************************

#### Score: 7.11478


#### Java Tokens: result, collections, bestresult, best, sort, profit 

public static double func_2e1d178b8cfb44799660e97759d4a338(ArrayList<Long> profit) { 
 // out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


*********************************

#### Score: 6.41444


#### Java Tokens: add, result, money, collections, bestresult, best, sort, profit 

public static long func_343bdcca14d54e9ca38bdab18991bfa7(long l, long money, long[] a, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return money;
}


public static double func_5f96bc5b17054aab93bb46045116212e(long l, long money, long[] a, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


*********************************

#### Score: 6.11660


#### Java Tokens: add, money, array, collections, arraylist, sort, list, profit, long 

public static ArrayList<Long> func_4a04f58a6cb74b2a9a8b1fdfc39f4bdf(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return profit;
}


public static long func_778232313efd43509a2527ad2d1f3597(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return money;
}


*********************************

#### Score: 5.96900


#### Java Tokens: bestresult, max, startresult, start, best, sort, remove, money--, result, size, money, collections, get, math, profit 

public static double func_e7ec3c235d2b46fd9a35141af4e84f15(long money, double startResult, ArrayList<Long> profit) { 
 // out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
while (profit.size() > 0 && money >= 0) {
    // remaining
    double result = startResult + money;
    for (int i = 0; i < profit.size(); i++) {
        result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
    }
    profit.remove(0);
    money--;
    bestResult = Math.max(bestResult, result);
}
return bestResult;
}


*********************************

#### Score: 5.96179


#### Java Tokens: profit 

public static double func_4980cdf2c061441bbb5abb88171d29dd(long l, long f) { 
 if (l == f - 1)
    return 0;
double profit = 0;
return profit;
}


*********************************

#### Score: 5.94461


#### Java Tokens: max, arrays, sort 

public static long func_23be0ac773d9440e8d3d56392ce58eec(long[] a) { 
 Arrays.sort(a);
double max = 0;
long s = 0;
return s;
}


public static double func_97c89b015cd34dd78c227e38028e81d6(long[] a) { 
 Arrays.sort(a);
double max = 0;
return max;
}


public static double func_b9d12e05b77142138c65cc0f1a010f37(long[] v) { 
 Arrays.sort(v);
double max = 0.0;
return max;
}


*********************************

#### Score: 5.84701


#### Java Tokens: next, relaxprofit, left, relax, clone, arrays, sort, profit, nextlong, long 

public static long[] func_5e12635ecefc43328bc33e313d31656c(int n, long[] left) { 
 for (int i = 0; i < n; i++) {
    left[i] = A.nextLong();
}
Arrays.sort(left);
long[] a = left.clone();
A.relaxProfit(left, a);
return a;
}


public static long[] func_58963632439a4ab4a6fe320b791a1dd4(int n) { 
 long[] left = new long[A.C];
for (int i = 0; i < n; i++) {
    left[i] = A.nextLong();
}
Arrays.sort(left);
long[] a = left.clone();
A.relaxProfit(left, a);
return left;
}


public static long[] func_8a3363908e424f7bb5c3c03bc0c62dc4(int n) { 
 long[] left = new long[A.C];
for (int i = 0; i < n; i++) {
    left[i] = A.nextLong();
}
Arrays.sort(left);
long[] a = left.clone();
A.relaxProfit(left, a);
return a;
}


*********************************

#### Score: 5.76461


#### Java Tokens: add, bestresult, max, startresult, start, best, sort, remove, money--, result, money, size, collections, get, math, profit 

public static long func_9c3e3d6d30544c8a957540405ee7cbfc(long l, long money, long[] a, double startResult, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
while (profit.size() > 0 && money >= 0) {
    // remaining
    double result = startResult + money;
    for (int i = 0; i < profit.size(); i++) {
        result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
    }
    profit.remove(0);
    money--;
    bestResult = Math.max(bestResult, result);
}
return money;
}


public static double func_5da68e943d804a1c85429c29bdb5e585(long l, long money, long[] a, double startResult, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
while (profit.size() > 0 && money >= 0) {
    // remaining
    double result = startResult + money;
    for (int i = 0; i < profit.size(); i++) {
        result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
    }
    profit.remove(0);
    money--;
    bestResult = Math.max(bestResult, result);
}
return bestResult;
}


*********************************

#### Score: 5.57916


#### Java Tokens: max, length, arrays, sort 

public static long func_2831d9202b83428d891e1d5697249472(long b, long[] a) { 
 Arrays.sort(a);
double max = 0;
long s = 0;
for (int n = 0; n < a.length; n++) {
    s += a[n];
    double s2 = 0;
    for (int l = 0; l <= n; l++) {
        s2 += a[l];
        long x = (b - (n - l) + s) / (n + 1);
        if (x >= a[l] && (l + 1 >= a.length || x + 1 >= a[n]) && (n + 1 >= a.length || x < a[n + 1])) {
            if (max < 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l)) {
                max = 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l);
            }
        }
    }
}
return s;
}


public static double func_f2576f5c9a3945c0a7a540ddd41d6fa7(long b, long[] a) { 
 Arrays.sort(a);
double max = 0;
long s = 0;
for (int n = 0; n < a.length; n++) {
    s += a[n];
    double s2 = 0;
    for (int l = 0; l <= n; l++) {
        s2 += a[l];
        long x = (b - (n - l) + s) / (n + 1);
        if (x >= a[l] && (l + 1 >= a.length || x + 1 >= a[n]) && (n + 1 >= a.length || x < a[n + 1])) {
            if (max < 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l)) {
                max = 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l);
            }
        }
    }
}
return max;
}


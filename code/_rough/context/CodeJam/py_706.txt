### Py Tokens: range, seq, lend, lsum, bound, len 

### Py functions

def func_5092052930814a07a36a8aa1a3520572(bound, seq):
    lsum = 0
    lend = 0
    for i in range(len(seq)):
        if lsum + seq[i] <= bound and i < len(seq) - 1:
            lsum += seq[i]
            lend = i + 1
        else:
            break
    return lsum

def func_47bea3256db44316b54afab2b90e685e(bound, seq):
    lsum = 0
    lend = 0
    for i in range(len(seq)):
        if lsum + seq[i] <= bound and i < len(seq) - 1:
            lsum += seq[i]
            lend = i + 1
        else:
            break
    return i

def func_ce657baaffce49fe8258b9793b2ceaa2(bound, lsum, seq):
    lend = 0
    for i in range(len(seq)):
        if lsum + seq[i] <= bound and i < len(seq) - 1:
            lsum += seq[i]
            lend = i + 1
        else:
            break
    return lend

def func_b250e757df494050818fcbb1338c7bb0(bound, seq):
    lsum = 0
    lend = 0
    for i in range(len(seq)):
        if lsum + seq[i] <= bound and i < len(seq) - 1:
            lsum += seq[i]
            lend = i + 1
        else:
            break
    return lend

def func_78c1215886f8488ab421c5d3587c9c8e(bound, lsum, seq):
    lend = 0
    for i in range(len(seq)):
        if lsum + seq[i] <= bound and i < len(seq) - 1:
            lsum += seq[i]
            lend = i + 1
        else:
            break
    return i

*********************************

#### Score: 9.09203


#### Java Tokens: rsum, lsum 

public static double func_3171731a67854753aa4f926d420679d8(double lsum, double s, double rsum) { 
 lsum += s;
rsum -= s;
return rsum;
}


public static double func_b38149ec0251455f88814c5c211b7ae2(double lsum, double s, double rsum) { 
 lsum += s;
rsum -= s;
return lsum;
}


*********************************

#### Score: 8.47704


#### Java Tokens: rsum, lsum, psum 

public static double func_fe9269d91e4342c5bf07ff9004ed12d4(int o, int[] v, double[] l, double[] p) { 
 double lsum = 0, rsum = 0;
double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
return lsum;
}


public static double func_6366e4b2f2d243de89bba9ffcdbad150(int o, int[] v, double[] l, double[] p) { 
 double lsum = 0, rsum = 0;
double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
m = 0;
q = 1;
return m;
}


public static double func_f18ccd571f6b4054a58322ce08991a72(int o, int[] v, double[] l, double[] p) { 
 double lsum = 0, rsum = 0;
double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
m = 0;
return lsum;
}


*********************************

#### Score: 7.74930


#### Java Tokens: bound 

public static double func_8dab68333b7642ada842c2cbbf10372d(int p, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
return b;
}


public static double func_2638bc8043dd46149b6456d01f416da1(int p, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
return a;
}


*********************************

#### Score: 7.47657


#### Java Tokens: e200, best, rsum, lsum, psum 

public static double func_444dfeea37c64647b2a099342b9e13be(int o, int[] v, double[] l, double[] p) { 
 int j = 0;
double best = 1e200;
double lsum = 0, rsum = 0;
double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
return best;
}


public static double func_edca3371f4db41c090daddf96f6e5f67(int o, int[] v, double[] l, double[] p) { 
 int j = 0;
double best = 1e200;
double lsum = 0, rsum = 0;
double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
m = 0;
return psum;
}


public static double func_e2824a0c53e54e6ea4b67458fcda7caa(int o, int[] v, double[] l, double[] p) { 
 double best = 1e200;
double lsum = 0, rsum = 0;
double psum = 0;
double m = 0;
double q = 1;
for (int i = 0; i < o; i++) {
    m += l[v[i]];
    psum += p[v[i]] * q;
    rsum += p[v[i]] * q * m;
    q *= 1 - p[v[i]];
}
m = 0;
return best;
}


*********************************

#### Score: 7.18996


#### Java Tokens: pos, bound 

public static int func_e56fbf72e0224d66b77b40ae8b9f585b(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return py;
}


public static int func_6b9bb5b3b1cd4a60ac5a15167a40b0c6(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
return px;
}


public static int func_97cddfce9b7c452f8695797bae1d62e3(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return px;
}


*********************************

#### Score: 7.18996


#### Java Tokens: bound, sum 

public static double func_0549b3b7e9264fa5aad2ec5b09896643(int w, double[] bound) { 
 double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
return sum;
}


public static double func_76c782109326442d8ab3334faf8688b0(int w, double sum, double[] bound) { 
 for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
return sum;
}


*********************************

#### Score: 6.71008


#### Java Tokens: div, pos, bound 

public static int func_58a39ec2b5e24e1a82950afef3b71c8a(int l, int px, int[][] pos, double[] bound) { 
 int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
return py;
}


public static int func_9d99c61bf0e24d2885926eadad002202(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
px = nx;
return ny;
}


public static int func_4959f32046524c3ab41634b4b7ef81a1(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
return nx;
}


*********************************

#### Score: 6.71008


#### Java Tokens: bound, sum, req 

public static double func_cb6075579afd41538cec7f7bef0d66a3(int g, int w, double sum, double[] bound) { 
 for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return req;
}


public static double func_1670fe700cc84ba39c57aa7bad72557f(int g, int w, double sum, double[] bound) { 
 for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return sum;
}


public static double func_7895eaba6f0d4d8c98b5a3c4480cdb8f(int g, int w, double[] bound) { 
 double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return sum;
}


*********************************

#### Score: 6.71008


#### Java Tokens: add, bound, used 

public static double func_fffe3097af3c4f1e94ccd0b6d1b78713(int p, double used, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
double add = ((b - a) * used + a + b) * (1.0 - used) / 2.0;
return b;
}


public static double func_8db2a9fc3fd747279b10557bf8f32d40(int p, double a, double used, double[] bound) { 
 double b = bound[p + 1];
double add = ((b - a) * used + a + b) * (1.0 - used) / 2.0;
return add;
}


public static double func_8e7143913b8f43feb0afa92b5eb26c6e(int p, double used, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
double add = ((b - a) * used + a + b) * (1.0 - used) / 2.0;
return add;
}


*********************************

#### Score: 6.36918


#### Java Tokens: e200, ans, i--, eps, best, rsum, lsum, psum 

public static int func_6f4e4018328b49e59b0a0292a87102c2(int n, int[] v, double eps, double[] l, double[] p) { 
 // if (n > 11) continue;
int o = 0;
for (int c = 0; c < n; c++) {
    int j = 0;
    double best = 1e200;
    double lsum = 0, rsum = 0;
    double psum = 0;
    double m = 0;
    double q = 1;
    for (int i = 0; i < o; i++) {
        m += l[v[i]];
        psum += p[v[i]] * q;
        rsum += p[v[i]] * q * m;
        q *= 1 - p[v[i]];
    }
    m = 0;
    q = 1;
    for (int k = 0; k <= o; k++) {
        double ans = lsum + rsum * (1 - p[c]) + psum * (1 - p[c]) * l[c] + p[c] * (m + l[c]) * q;
        /*for (int u = 0; u < k; u++) {
						out.print(" " + v[u]);
					}
					out.print(" (" + c + ")");
					for (int u = k; u < o; u++) {
						out.print(" " + v[u]);
					}
					out.println(": " + ans);*/
        if (best >= ans - eps) {
            best = ans;
            j = k;
        }
        if (k == o)
            break;
        m += l[v[k]];
        psum -= p[v[k]] * q;
        double s = p[v[k]] * q * m;
        lsum += s;
        rsum -= s;
        q *= 1 - p[v[k]];
    }
    for (int i = o; i >= j; i--) {
        v[i + 1] = v[i];
    }
    v[j] = c;
    o++;
// out.println();
}
return o;
}


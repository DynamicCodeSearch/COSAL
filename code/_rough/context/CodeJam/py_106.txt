### Py Tokens: map, set, int, xrange, high, low, sorted, readline, infile, split 

### Py functions

def func_c2fb7a96446440e889793a49658c2273(L, U, infile):
    low = [map(int, infile.readline().split()) for i in xrange(L)]
    high = [map(int, infile.readline().split()) for i in xrange(U)]
    xs = sorted(set([x[0] for x in low] + [x[0] for x in high]))
    return xs

def func_dbf9426438514dfa84ee6d9e26ae93b0(L, U, infile):
    low = [map(int, infile.readline().split()) for i in xrange(L)]
    high = [map(int, infile.readline().split()) for i in xrange(U)]
    xs = sorted(set([x[0] for x in low] + [x[0] for x in high]))
    return U

def func_39b26b813df043c0a80237420c560c6b(L, U, infile):
    low = [map(int, infile.readline().split()) for i in xrange(L)]
    high = [map(int, infile.readline().split()) for i in xrange(U)]
    xs = sorted(set([x[0] for x in low] + [x[0] for x in high]))
    return high

def func_6f91e26e35a4441291a5d1e49586b456(L, U, infile):
    low = [map(int, infile.readline().split()) for i in xrange(L)]
    high = [map(int, infile.readline().split()) for i in xrange(U)]
    xs = sorted(set([x[0] for x in low] + [x[0] for x in high]))
    return low

def func_26a0986bd95546a29962b2b58e32e8aa(L, U, infile):
    low = [map(int, infile.readline().split()) for i in xrange(L)]
    high = [map(int, infile.readline().split()) for i in xrange(U)]
    xs = sorted(set([x[0] for x in low] + [x[0] for x in high]))
    return L

*********************************

#### Score: 9.08062


#### Java Tokens: high, low 

public static int func_f388707605144796a4b526fe90630b7b(long high, long low) { 
 long m = (low + high) / 2;
int i = 0;
long x = 0;
return i;
}


public static long func_4095026e27114ba9a8e9a5cc355f034b(long high, long low) { 
 long m = (low + high) / 2;
int i = 0;
long x = 0;
return m;
}


public static double func_d2d97269ac5346cdaada845feea25bbc(int W) { 
 double low = 0;
double high = W;
return high;
}


*********************************

#### Score: 9.03790


#### Java Tokens: add, high, set, low, array, toarray, tree, integer, treeset, point 

public static int[] func_d1429894b48e45c4b9e1580f4700172f(A.Point[] high, A.Point[] low) { 
 TreeSet<Integer> ts = new TreeSet<Integer>();
for (A.Point p : low) {
    ts.add(p.x);
}
for (A.Point p : high) {
    ts.add(p.x);
}
return A.toArray(ts);

}


*********************************

#### Score: 8.46644


#### Java Tokens: high, low, pref 

public static long func_5a49a347564d436ea920679a11a87a7e(int n, int[] a, long[] pref) { 
 for (int i = 0; i < n; i++) {
    pref[i + 1] = pref[i] + a[i];
}
// System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
// can
long high = pref[n];
return low;
}


public static long func_2487d07add2548239d0f095dd0a4d809(int n, int r, int s, int q, int p) { 
 int[] a = new int[n];
for (int i = 0; i < n; i++) {
    a[i] = (int) (((long) i * p + q) % r + s);
}
long[] pref = new long[n + 1];
for (int i = 0; i < n; i++) {
    pref[i + 1] = pref[i] + a[i];
}
// System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
// can
long high = pref[n];
return high;
}


public static long func_3b9299aca8b743df90f3c6b488f863b9(int n, long[] pref) { 
 // System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
// can
long high = pref[n];
return high;
}


*********************************

#### Score: 8.46644


#### Java Tokens: high, low, start 

public static double func_b5792060a4574f6cb338460730a6d45d(int W, double start) { 
 double low = start;
double high = W;
return high;
}


public static double func_425fa528f9504f9fb25dda4eb0fe99a8(int W, double start) { 
 double low = start;
double high = W;
return low;
}


*********************************

#### Score: 8.46644


#### Java Tokens: high, low, mid 

public static double func_608e8094a31741c5b1446cdcc31bc4c1(double high, double T, double low) { 
 double mid = (high + low) / 2;
if (A.S(mid) < T) {
    low = mid;
} else {
    high = mid;
}
return low;
}


public static double func_77de1b90c2464a29a0b4c2ab8b37d8bf(double high, double T, double low) { 
 double mid = (high + low) / 2;
if (A.S(mid) < T) {
    low = mid;
} else {
    high = mid;
}
return mid;
}


public static double func_197eab54ec904e71bad12749c453400f(double high, double T, double low) { 
 double mid = (high + low) / 2;
if (A.S(mid) < T) {
    low = mid;
} else {
    high = mid;
}
return high;
}


*********************************

#### Score: 8.46644


#### Java Tokens: high, curans, low 

public static double func_a3bac718cee84db1a6dfeec352afc588(double curans) { 
 double low = curans;
double high = A.W;
return low;
}


public static double func_5c7decc6cbd34947b30c7ccd6bcbb155(double curans) { 
 double low = curans;
double high = A.W;
return high;
}


*********************************

#### Score: 8.46644


#### Java Tokens: high, low, sum 

public static long func_81beb2a9a2844c0189b6fe4b1e9096f7(long sum) { 
 long low = 0;
long high = sum;
return high;
}


public static long func_f130b35bd7e44a57af243400663cb5a5(long sum) { 
 long low = 0;
long high = sum;
return low;
}


*********************************

#### Score: 8.46644


#### Java Tokens: high, low, budget 

public static long func_60ad323720a64daf8e001c01843bad2a(long low, long budget) { 
 --low;
long high = budget + 1;
return high;
}


*********************************

#### Score: 7.97284


#### Java Tokens: add, sortedset, sorted, set, tree, integer, treeset 

public static SortedSet<Integer> func_908a1fb2d6ea4b70bac7de1f0210bf2e(int l, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
return xs;
}


public static SortedSet<Integer> func_33d30156f21a452c9e7e9783fd47a69d(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
return xs;
}


*********************************

#### Score: 7.93373


#### Java Tokens: high, println, curans, low 

public static double func_5686f1280df6409b987c36e3d3e41a21(double low, double curans, double high, PrintWriter out) { 
 curans = (low + high) / 2;
out.println(curans);
return curans;
}


public static PrintWriter func_ed2c7231dbdd463eb435397cbf20ceb4(double low, double curans, double high, PrintWriter out) { 
 curans = (low + high) / 2;
out.println(curans);
return out;
}


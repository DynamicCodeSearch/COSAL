### Py Tokens: seq, extra, in1, in2, extraif2goes, abs, goes, extraif1goesfirst, best, first 

### Py functions

def func_424c865f86d149718150c9ba51f2e8f5(best, in1, s, seq):
    L1 = seq[best][1]
    E1 = seq[best][2]
    in2 = seq[s][0]
    L2 = seq[s][1]
    E2 = seq[s][2]
    extra_if_1_goes_first = (E2 - 1) * E1 * L1
    extra_if_2_goes = (E1 - 1) * E2 * L2
    if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
        if in2 < in1:
            best = s
    elif extra_if_2_goes < extra_if_1_goes_first:
        best = s
    return in2

def func_d54b1be870974f879b10ae665ccbf7f0(best, in1, s, seq):
    L1 = seq[best][1]
    E1 = seq[best][2]
    in2 = seq[s][0]
    L2 = seq[s][1]
    E2 = seq[s][2]
    extra_if_1_goes_first = (E2 - 1) * E1 * L1
    extra_if_2_goes = (E1 - 1) * E2 * L2
    if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
        if in2 < in1:
            best = s
    elif extra_if_2_goes < extra_if_1_goes_first:
        best = s
    return in1

def func_368ce0a125884f6797d47f07b5967ef3(L1, best, in1, s, seq):
    E1 = seq[best][2]
    in2 = seq[s][0]
    L2 = seq[s][1]
    E2 = seq[s][2]
    extra_if_1_goes_first = (E2 - 1) * E1 * L1
    extra_if_2_goes = (E1 - 1) * E2 * L2
    if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
        if in2 < in1:
            best = s
    elif extra_if_2_goes < extra_if_1_goes_first:
        best = s
    return in2

def func_c0c08cd78e8149bcbbe19a909017899f(best, s, seq):
    in1 = seq[best][0]
    L1 = seq[best][1]
    E1 = seq[best][2]
    in2 = seq[s][0]
    L2 = seq[s][1]
    E2 = seq[s][2]
    extra_if_1_goes_first = (E2 - 1) * E1 * L1
    extra_if_2_goes = (E1 - 1) * E2 * L2
    if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
        if in2 < in1:
            best = s
    elif extra_if_2_goes < extra_if_1_goes_first:
        best = s
    return L2

def func_88de35fc53214d0c8499d6e766a4fac0(L1, best, in1, s, seq):
    E1 = seq[best][2]
    in2 = seq[s][0]
    L2 = seq[s][1]
    E2 = seq[s][2]
    extra_if_1_goes_first = (E2 - 1) * E1 * L1
    extra_if_2_goes = (E1 - 1) * E2 * L2
    if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
        if in2 < in1:
            best = s
    elif extra_if_2_goes < extra_if_1_goes_first:
        best = s
    return L2

*********************************

#### Score: 5.03022


#### Java Tokens: area, abs, math 

public static double func_954317d2367f4979971823aef45c075a(int g, double area) { 
 area = Math.abs(area) / g;
int p1 = 0, p2 = 0;
double cx = 0;
return area;
}


public static double func_5b21b449c5934696a2441b525090713a(int g, double area) { 
 area = Math.abs(area) / g;
int p1 = 0, p2 = 0;
double cx = 0;
return cx;
}


public static int func_ea79d704cd7144dba77acaeb7b38d841(int g, double area) { 
 area = Math.abs(area) / g;
int p1 = 0, p2 = 0;
return p1;
}


*********************************

#### Score: 5.03022


#### Java Tokens: ret, abs, math 

public static double func_fb9083d938b34e21aa82c7a064d0ddec(double ret) { 
 ret -= C.u[0].y * C.l[0].x;
return Math.abs(ret);

}


*********************************

#### Score: 4.59730


#### Java Tokens: first, second 

public static long func_05ae5d93a52d45ed8dde238d6245af06(int j, int i, long[] A) { 
 long first = A[j + 2];
long second = A[i + 1] - A[j + 2];
return first;
}


public static long func_24855a22c9de45fdb5ea51748056936d(int j, int i, long[] A) { 
 long first = A[j + 2];
long second = A[i + 1] - A[j + 2];
return second;
}


public static long func_ee5d4f9bc54c41e1afd1cd73fe7b9b9e(int j, int i, long[] A) { 
 long first = A[j + 1];
long second = A[i + 1] - A[j + 1];
return second;
}


*********************************

#### Score: 4.59730


#### Java Tokens: index, first 

public static int func_4b5ca9d0203544b792c3ca8bbcf06ff0(int first, int index) { 
 first = index;
++index;
return first;
}


*********************************

#### Score: 4.45851


#### Java Tokens: total, abs, size, get, math 

public static double func_a808b630a8ab4bea92944b8edf946aaa(double y0, double total, double x0, ArrayList<Double> lx, ArrayList<Double> ly) { 
 for (int i = 0; i < lx.size(); ++i) {
    double xx = lx.get(i);
    double yy = ly.get(i);
    total += (x0 + xx) * (y0 - yy);
    x0 = xx;
    y0 = yy;
}
return Math.abs(total) / 2;

}


public static double func_d1491b2ee49d4b91adc25e290b23525a(double y0, double total, double x0, ArrayList<Double> lx, ArrayList<Double> ly) { 
 y0 = ly.get(ly.size() - 1);
for (int i = 0; i < lx.size(); ++i) {
    double xx = lx.get(i);
    double yy = ly.get(i);
    total += (x0 + xx) * (y0 - yy);
    x0 = xx;
    y0 = yy;
}
return Math.abs(total) / 2;

}


public static double func_5e58e5c80a90443e8bdfc65d96b980f2(double y0, double total, double x0, ArrayList<Double> lx, ArrayList<Double> ly) { 
 x0 = lx.get(lx.size() - 1);
y0 = ly.get(ly.size() - 1);
for (int i = 0; i < lx.size(); ++i) {
    double xx = lx.get(i);
    double yy = ly.get(i);
    total += (x0 + xx) * (y0 - yy);
    x0 = xx;
    y0 = yy;
}
return Math.abs(total) / 2;

}


*********************************

#### Score: 4.45851


#### Java Tokens: e-9, abs, want, math 

public static double func_82524380001f4d13b8f46106e3bd191a(double d2, double d1, double want, double dx) { 
 double k = (d2 - d1) / dx;
if (Math.abs(k) < 1e-9) {
    return want / d1;
}
return k;
}


*********************************

#### Score: 4.30159


#### Java Tokens: temp, first, second 

public static int func_f330fb3d7c644144be5c8da4fef42e62(int N) { 
 int first = 0;
int second = N - 1;
long temp = 0;
return second;
}


public static long func_18a12dddca474bbab145591da291804e(int N) { 
 int first = 0;
int second = N - 1;
long temp = 0;
return temp;
}


public static int func_21690eefe2c7485eaa903eb3065d0ad6(int N) { 
 int first = 0;
int second = N - 1;
long temp = 0;
return first;
}


*********************************

#### Score: 4.30159


#### Java Tokens: temp, index, first 

public static long func_23c1256235264e8abccace9d53b5dce5(int first, int index, long temp) { 
 temp = 0;
index = first + 1;
return temp;
}


public static int func_652a267f33464428ad69a3b5ee219807(int first, int index, long temp) { 
 temp = 0;
index = first + 1;
return index;
}


*********************************

#### Score: 4.30159


#### Java Tokens: rest, first, partials 

public static long func_a4f6c84316f743b48cd04046a63696b1(int i, int n, long[] partials) { 
 long first = partials[i];
long rest = partials[n] - first;
if (first > rest)
    return first;
return first;
}


public static long func_b05c6e91702f49a4a1b3b89fb0d35148(int i, int n, long[] partials) { 
 long first = partials[i];
long rest = partials[n] - first;
return rest;
}


public static long func_5a0b76a48ab94f4aa4126c1278631a12(int i, int n, long[] partials) { 
 long first = partials[i];
long rest = partials[n] - first;
return first;
}


*********************************

#### Score: 4.30159


#### Java Tokens: rest, partials, first 

public static long func_6731d84131e34c359fd29e47f4c83ae3(int n, long first, long[] partials) { 
 long rest = partials[n] - first;
if (first > rest)
    return first;
return rest;
}


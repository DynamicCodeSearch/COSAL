### Py Tokens: sort, set, crem, xrange, sorted, sum, list, append 

### Py functions

def func_75d26b75373e4ae58c0bc8e778360fa1(b, cx, x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return y

def func_7cab85e1b3c044259b6ff9a7c5c365c9(b, cx, x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return b

def func_621f5d593b354a6eab457933ae7bde87(b, cx, x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return cx

def func_8498c2bd465046a5826478ca45f0dfc9(b, cx, x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return mx

def func_97644450051049a38b7d34e03d93777a(b, cx, x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return x

*********************************

#### Score: 7.97284


#### Java Tokens: add, sortedset, sorted, set, tree, integer, treeset 

public static SortedSet<Integer> func_908a1fb2d6ea4b70bac7de1f0210bf2e(int l, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
return xs;
}


public static SortedSet<Integer> func_33d30156f21a452c9e7e9783fd47a69d(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
return xs;
}


*********************************

#### Score: 7.57770


#### Java Tokens: add, sortedset, sorted, set, size, tree, integer, treeset 

public static SortedSet<Integer> func_4ce0a44eab0542dfa8546f1c61bacac4(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return xs;
}


public static int[] func_1fe4188d08b24ee0990c1d1b63842dc2(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return nx;
}


public static int[] func_900079f612634215823886119e9e27bb(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
return nx;
}


*********************************

#### Score: 7.22192


#### Java Tokens: add, sortedset, sorted, set, size, tree, length, integer, treeset 

public static int[] func_6a5e7e859297479b9467357300fe07c1(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return nx;
}


public static SortedSet<Integer> func_ce9d48e027814f3992228953ecdf796f(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return xs;
}


public static double[] func_985ac19939df45b0aa6e6fb24e535b72(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return ny;
}


*********************************

#### Score: 6.82880


#### Java Tokens: set, tree, arrays, sort, treeset, long, cands 

public static long func_241caca44d1b4623b24cc615f27dd4f6(long[] is) { 
 Arrays.sort(is);
long A = 0;
// for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
return A;
}


public static long func_12f5ddc3f01441daa12e08739e017bc2(int N, long[] is) { 
 N = 37;
Arrays.sort(is);
long A = 0;
// for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
return A;
}


public static long func_489bb7fe292942dbb9935e1666275858(long[] is) { 
 Arrays.sort(is);
long A = 0;
// for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
return K;
}


*********************************

#### Score: 6.50301


#### Java Tokens: set, length, tree, sum, treeset, long 

public static TreeSet<Long> func_82bedb87aaee466db5f8d8ee5fb8bbfd(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
return all;
}


public static long func_b009c656310044d9843b16a552b1b893(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
return sum;
}


public static long func_612a6278d77147d182b6d5a52d810c2e(int r, int p, int s, int q, long[] a) { 
 long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
return sum;
}


*********************************

#### Score: 6.49363


#### Java Tokens: add, set, tree, arrays, sort, treeset, long, cands 

public static TreeSet<Long> func_bd16b72c5be74ef1a5fc3f44f1f0b0b2(int N, long[] is) { 
 N = 37;
Arrays.sort(is);
long A = 0;
// for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
for (int i = 0; i < N; i++) for (int d = -1; d <= 1; d++) cands.add(is[i] + d);
return cands;
}


public static TreeSet<Long> func_ebf1d071945442cf945efefc2f8ac4f7(int N, long[] is) { 
 Arrays.sort(is);
long A = 0;
// for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
for (int i = 0; i < N; i++) for (int d = -1; d <= 1; d++) cands.add(is[i] + d);
return cands;
}


public static long func_63b5fbdf709a43e6aebc838d635874de(int N, long[] is) { 
 Arrays.sort(is);
long A = 0;
// for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
for (int i = 0; i < N; i++) for (int d = -1; d <= 1; d++) cands.add(is[i] + d);
return A;
}


*********************************

#### Score: 6.16732


#### Java Tokens: add, set, length, tree, sum, treeset, long 

public static long func_f4f3e19e5d544b6ba8e5add9b0fa3413(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
return sum;
}


public static TreeSet<Long> func_2b0ce21d61d84ca6aad8fb2b941dd018(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
return all;
}


public static long func_30e8330430ae4e73aac5d89c5584a3f7(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
return sum;
}


*********************************

#### Score: 5.81107


#### Java Tokens: add, money, array, collections, arraylist, sort, list, profit, long 

public static ArrayList<Long> func_4a04f58a6cb74b2a9a8b1fdfc39f4bdf(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return profit;
}


public static long func_778232313efd43509a2527ad2d1f3597(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return money;
}


*********************************

#### Score: 5.12864


#### Java Tokens: add, set, max, length, tree, sum, best, value, treeset, long, max_value 

public static long func_01d93a72fc59451ea766af125d86cc20(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
return x;
}


public static long func_70d0c2c9710347a9bec5342a1e39ba0c(int r, int p, int s, int q, long[] a) { 
 long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
return sum;
}


public static long func_b788c2fff10c482f91f66911d6a10f05(int r, int p, int s, int q, long[] a) { 
 long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
all.add(0L);
long x = 0;
long best = Long.MAX_VALUE;
return x;
}


*********************************

#### Score: 5.11213


#### Java Tokens: add, result, money, array, collections, bestresult, best, arraylist, sort, list, profit, long 

public static long func_e7456d7a6591451b8877074d7707e8f2(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return money;
}


public static double func_5984f9a79b8a49de9d1f8c26849b5b51(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


public static ArrayList<Long> func_6573ef28dcdb48b7afbf727f51c17533(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return profit;
}


### Py Tokens: sorted, min, max, mid, len 

### Py functions

def func_8869e7476b544cf4a8011d6acc062c22(b, n, s, x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return mid

def func_6ced752733384d258f2a26007e0ff549(b, n, s, x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return mid

*********************************

#### Score: 8.54761


#### Java Tokens: min, max, mid 

public static double func_5fad18642ff14066a6fe74641ea01af6(int W) { 
 double min = 0.0;
double max = W + 0.00000001337;
double mid = 0;
return max;
}


public static double func_edd0616014f744f682c50158dd9ae2d1(int W) { 
 double min = 0.0;
double max = W + 0.00000001337;
double mid = 0;
return min;
}


public static double func_fb4410dc2df54416acebfee479ecc07e(int W) { 
 double min = 0.0;
double max = W + 0.00000001337;
double mid = 0;
return mid;
}


*********************************

#### Score: 8.00952


#### Java Tokens: min, max, poly, mid 

public static double func_c31f447a3b494b5cb1466be318d28632(double min, double max) { 
 double mid = (min + max) / 2;
double[] poly = new double[8];
poly[0] = mid;
return mid;
}


public static double func_8bf44cf1b2554240ba07201da3eba62a(double min, double max) { 
 double mid = (min + max) / 2;
double[] poly = new double[8];
poly[0] = mid;
poly[1] = 1001;
poly[2] = mid;
return mid;
}


public static double[] func_5ecdfbf0421c4640bd87b3945acc54ef(double min, double max) { 
 double mid = (min + max) / 2;
double[] poly = new double[8];
poly[0] = mid;
return poly;
}


*********************************

#### Score: 8.00952


#### Java Tokens: min, max, need, mid 

public static long func_b3a1a1946e8d499dbcd49c3f4bbc3ad8(long min, long max) { 
 long mid = (min + max) / 2;
long need = 0;
return need;
}


public static long func_e9dbe619b28d4fe685aeb331612419d4(long min, long max) { 
 long mid = (min + max) / 2;
long need = 0;
return mid;
}


*********************************

#### Score: 7.12239


#### Java Tokens: min, left, max, mid, math, psum 

public static long func_92bd099942ec46329016ff46546f28cb(int N, int i, long[] psum) { 
 int lo = i + 1, hi = N;
long left = psum[N] - psum[i];
while (lo < hi) {
    int mid = (lo + hi) >> 1;
    long s1 = psum[mid] - psum[i];
    long s2 = left - s1;
    if (s1 >= s2) {
        hi = mid;
    } else {
        lo = mid + 1;
    }
}
long t = psum[lo] - psum[i];
long a = Math.max(t, left - t);
if (lo > i + 1) {
    t = psum[lo - 1] - psum[i];
    a = Math.min(a, Math.max(t, left - t));
}
return a;
}


public static long func_fde39c123b7e43bda8869ac46339627e(int lo, int N, int i, int hi, long[] psum) { 
 long left = psum[N] - psum[i];
while (lo < hi) {
    int mid = (lo + hi) >> 1;
    long s1 = psum[mid] - psum[i];
    long s2 = left - s1;
    if (s1 >= s2) {
        hi = mid;
    } else {
        lo = mid + 1;
    }
}
long t = psum[lo] - psum[i];
long a = Math.max(t, left - t);
if (lo > i + 1) {
    t = psum[lo - 1] - psum[i];
    a = Math.min(a, Math.max(t, left - t));
}
return left;
}


public static int func_479876891d4f4151846a481484bed6bd(int N, int i, long[] psum) { 
 int lo = i + 1, hi = N;
long left = psum[N] - psum[i];
while (lo < hi) {
    int mid = (lo + hi) >> 1;
    long s1 = psum[mid] - psum[i];
    long s2 = left - s1;
    if (s1 >= s2) {
        hi = mid;
    } else {
        lo = mid + 1;
    }
}
long t = psum[lo] - psum[i];
long a = Math.max(t, left - t);
if (lo > i + 1) {
    t = psum[lo - 1] - psum[i];
    a = Math.min(a, Math.max(t, left - t));
}
return lo;
}


*********************************

#### Score: 7.12239


#### Java Tokens: min, max, need, length, mid, bets 

public static long func_de542dcb5cab4d5a9b75ce7361c4b9d0(long min, long max, long[] bets) { 
 long mid = (min + max) / 2;
long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
return mid;
}


public static long func_3f52bc1f3660404e95b908abc8ae0fe8(long min, long max, long[] bets) { 
 long mid = (min + max) / 2;
long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
return need;
}


*********************************

#### Score: 7.12239


#### Java Tokens: area, cut, min, max, mid, cutarea 

public static double func_b07fc4f911724a4a913e309c45e1b985(int W, int i, double g, double firstArea) { 
 double cutArea = (i + 1) / g * firstArea;
double min = 0.0;
double max = W + 0.00000001337;
double mid = 0;
return min;
}


public static double func_1beee2e7837146ad98b21343e5d10398(int W, int i, double g, double firstArea) { 
 double cutArea = (i + 1) / g * firstArea;
double min = 0.0;
double max = W + 0.00000001337;
double mid = 0;
return max;
}


public static double func_50676bc621fd47399c305dfe33e168cd(int W, int i, double g, double firstArea) { 
 double cutArea = (i + 1) / g * firstArea;
double min = 0.0;
double max = W + 0.00000001337;
double mid = 0;
return cutArea;
}


*********************************

#### Score: 6.75243


#### Java Tokens: min, left, max, get, mid, math, psum 

public static int func_b4c6456ae3794439b9dc11ee152e9158(int N, int i, long max, long[] psum) { 
 int lo = i + 1, hi = N;
long left = psum[N] - psum[i];
while (lo < hi) {
    int mid = (lo + hi) >> 1;
    long s1 = psum[mid] - psum[i];
    long s2 = left - s1;
    if (s1 >= s2) {
        hi = mid;
    } else {
        lo = mid + 1;
    }
}
long t = psum[lo] - psum[i];
long a = Math.max(t, left - t);
if (lo > i + 1) {
    t = psum[lo - 1] - psum[i];
    a = Math.min(a, Math.max(t, left - t));
}
long get = psum[N] - Math.max(psum[i], a);
if (get > max)
    max = get;
return hi;
}


public static long func_9f6aef59b6774b75b8a2fe218a3b96d3(int N, int i, long[] psum) { 
 int lo = i + 1, hi = N;
long left = psum[N] - psum[i];
while (lo < hi) {
    int mid = (lo + hi) >> 1;
    long s1 = psum[mid] - psum[i];
    long s2 = left - s1;
    if (s1 >= s2) {
        hi = mid;
    } else {
        lo = mid + 1;
    }
}
long t = psum[lo] - psum[i];
long a = Math.max(t, left - t);
if (lo > i + 1) {
    t = psum[lo - 1] - psum[i];
    a = Math.min(a, Math.max(t, left - t));
}
long get = psum[N] - Math.max(psum[i], a);
return a;
}


public static long func_5ade80b4a79640b39f855afb5e203cb7(int N, int i, long max, long[] psum) { 
 int lo = i + 1, hi = N;
long left = psum[N] - psum[i];
while (lo < hi) {
    int mid = (lo + hi) >> 1;
    long s1 = psum[mid] - psum[i];
    long s2 = left - s1;
    if (s1 >= s2) {
        hi = mid;
    } else {
        lo = mid + 1;
    }
}
long t = psum[lo] - psum[i];
long a = Math.max(t, left - t);
if (lo > i + 1) {
    t = psum[lo - 1] - psum[i];
    a = Math.min(a, Math.max(t, left - t));
}
long get = psum[N] - Math.max(psum[i], a);
if (get > max)
    max = get;
return left;
}


*********************************

#### Score: 6.75243


#### Java Tokens: min, need, max, length, mid, bets, budget 

public static long func_55132fc7851f48aea3774e899ddf078f(long mid, long min, long budget, long max, long[] bets) { 
 long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
if (need > budget) {
    max = mid;
} else {
    min = mid;
}
return need;
}


public static long func_f3babecabc374053ba9d0b2b48a2ea7d(long mid, long min, long budget, long max, long[] bets) { 
 long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
if (need > budget) {
    max = mid;
} else {
    min = mid;
}
return min;
}


public static long func_fff32c123e46460a8d948e10b0899b9e(long mid, long min, long budget, long max, long[] bets) { 
 long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
if (need > budget) {
    max = mid;
} else {
    min = mid;
}
return max;
}


*********************************

#### Score: 6.75243


#### Java Tokens: min, last, known, max, poly, mid, lastknown 

public static double[] func_f7572b51b70f46b3b73c11d463d80de6(double lastKnown, double min, double max) { 
 double mid = (min + max) / 2;
double[] poly = new double[8];
poly[0] = mid;
poly[1] = 1001;
poly[2] = mid;
poly[3] = -1001;
poly[4] = lastKnown;
poly[5] = -1001;
return poly;
}


public static double[] func_9586cc54512441959154e810ecc424fb(double lastKnown, double min, double max) { 
 double mid = (min + max) / 2;
double[] poly = new double[8];
poly[0] = mid;
poly[1] = 1001;
poly[2] = mid;
poly[3] = -1001;
poly[4] = lastKnown;
poly[5] = -1001;
poly[6] = lastKnown;
poly[7] = 1001;
return poly;
}


public static double func_5a96df258cf04995a6b88481a854668f(double lastKnown, double min, double max) { 
 double mid = (min + max) / 2;
double[] poly = new double[8];
poly[0] = mid;
poly[1] = 1001;
poly[2] = mid;
poly[3] = -1001;
poly[4] = lastKnown;
poly[5] = -1001;
poly[6] = lastKnown;
return mid;
}


*********************************

#### Score: 6.75243


#### Java Tokens: min, max, left, get, mid, math, psum 

public static long func_b89b6aa213704059806c00746a9633ff(int N, long[] psum) { 
 long max = 0;
for (int i = 0; i < N; i++) {
    int lo = i + 1, hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        int mid = (lo + hi) >> 1;
        long s1 = psum[mid] - psum[i];
        long s2 = left - s1;
        if (s1 >= s2) {
            hi = mid;
        } else {
            lo = mid + 1;
        }
    }
    long t = psum[lo] - psum[i];
    long a = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a = Math.min(a, Math.max(t, left - t));
    }
    long get = psum[N] - Math.max(psum[i], a);
    if (get > max)
        max = get;
}
return max;
}


### Py Tokens: bets, cost, min, xrange, nummin, num, low, max, size 

### Py functions

def func_aed5359e03e24fda86db07aa39389418(bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    return bets

def func_657c01d4860a40198057ea687ab5df26(bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    return num_min

*********************************

#### Score: 8.03285


#### Java Tokens: min, max, need, length, mid, bets 

public static long func_de542dcb5cab4d5a9b75ce7361c4b9d0(long min, long max, long[] bets) { 
 long mid = (min + max) / 2;
long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
return mid;
}


public static long func_3f52bc1f3660404e95b908abc8ae0fe8(long min, long max, long[] bets) { 
 long mid = (min + max) / 2;
long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
return need;
}


*********************************

#### Score: 7.61252


#### Java Tokens: min, need, max, length, mid, bets, budget 

public static long func_55132fc7851f48aea3774e899ddf078f(long mid, long min, long budget, long max, long[] bets) { 
 long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
if (need > budget) {
    max = mid;
} else {
    min = mid;
}
return need;
}


public static long func_f3babecabc374053ba9d0b2b48a2ea7d(long mid, long min, long budget, long max, long[] bets) { 
 long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
if (need > budget) {
    max = mid;
} else {
    min = mid;
}
return min;
}


public static long func_fff32c123e46460a8d948e10b0899b9e(long mid, long min, long budget, long max, long[] bets) { 
 long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
if (need > budget) {
    max = mid;
} else {
    min = mid;
}
return max;
}


*********************************

#### Score: 7.61252


#### Java Tokens: min, max, need, length, mid, bets, budget 

public static long func_ba808e1c1a284ae3a6e8ffdef18447f2(long budget, long[] bets) { 
 long min = 0;
long max = budget + 1;
while (min + 1 < max) {
    long mid = (min + max) / 2;
    long need = 0;
    for (int i = 0; i < bets.length; i++) {
        if (bets[i] < mid) {
            need += mid - bets[i];
        }
    }
    if (need > budget) {
        max = mid;
    } else {
        min = mid;
    }
}
return min;
}


public static long func_1049596d1e3341a9aaf9cb603ef32d60(long min, long budget, long max, long[] bets) { 
 long mid = (min + max) / 2;
long need = 0;
for (int i = 0; i < bets.length; i++) {
    if (bets[i] < mid) {
        need += mid - bets[i];
    }
}
if (need > budget) {
    max = mid;
} else {
    min = mid;
}
return mid;
}


public static long func_eec93578e112462c87cd708b02b12d83(long min, long budget, long[] bets) { 
 long max = budget + 1;
while (min + 1 < max) {
    long mid = (min + max) / 2;
    long need = 0;
    for (int i = 0; i < bets.length; i++) {
        if (bets[i] < mid) {
            need += mid - bets[i];
        }
    }
    if (need > budget) {
        max = mid;
    } else {
        min = mid;
    }
}
return min;
}


*********************************

#### Score: 7.23627


#### Java Tokens: toadd, add, min, money, max, math, bets, required 

public static long func_16e7bd8307d84fffaf7e49b8e335566e(int j, long required, long max, long money, long[] bets) { 
 long toAdd = Math.min(max - bets[j - 1], (money - required) / j);
required += toAdd * j;
return required;
}


public static long func_4d436e7f78ec4013b046119ca436ca24(int j, long required, long max, long money, long[] bets) { 
 long toAdd = Math.min(max - bets[j - 1], (money - required) / j);
required += toAdd * j;
return toAdd;
}


*********************************

#### Score: 7.03485


#### Java Tokens: min, getmin, get, bets 

public static long func_ed76ef5004cc4d0d8e4c55bd73d8d154(int N, long[] x, long[] bets) { 
 long min = A.getMin(x);
for (int j = 0; j < N; j++) {
    if (x[j] == min) {
        x[j]++;
        bets[j]++;
        break;
    }
}
return min;
}


*********************************

#### Score: 6.32262


#### Java Tokens: ret, leftcount, min, rightcount, max, left, num, count, right, math, curr 

public static double func_26b560d4f2704fe7bf34be07ecfb55e6(int r, int s, int n, int p, int q) { 
 A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
for (int i = 0; i < n; i++) {
    int min = i;
    int max = n - 1;
    while (max - min > 3) {
        int left = (2 * min + max) / 3;
        int right = (2 * max + min) / 3;
        long leftCount = A.count(i, left);
        long rightCount = A.count(i, right);
        if (leftCount < rightCount) {
            max = right;
        } else {
            min = left;
        }
    }
    for (int j = min; j <= max; j++) {
        ret = Math.max(ret, 1 - A.count(i, j) * 1.0 / A.num[n]);
    }
}
return ret;
}


public static double func_441fc02c599a4a209cb57382ba247064(int r, int s, int n, int p, int q) { 
 for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
for (int i = 0; i < n; i++) {
    int min = i;
    int max = n - 1;
    while (max - min > 3) {
        int left = (2 * min + max) / 3;
        int right = (2 * max + min) / 3;
        long leftCount = A.count(i, left);
        long rightCount = A.count(i, right);
        if (leftCount < rightCount) {
            max = right;
        } else {
            min = left;
        }
    }
    for (int j = min; j <= max; j++) {
        ret = Math.max(ret, 1 - A.count(i, j) * 1.0 / A.num[n]);
    }
}
return ret;
}


*********************************

#### Score: 6.26186


#### Java Tokens: min, getmin, get, bets, win, getwin 

public static double func_832fcaa90dcb4ed3b3ea3b7b4da679e2(int i, int N, int W, long[] x, long[] bets) { 
 long min = A.getMin(x);
for (int j = 0; j < N; j++) {
    if (x[j] == min) {
        x[j]++;
        bets[j]++;
        break;
    }
}
double win = A.getWin(x, bets, W) - i;
return win;
}


public static long func_4ce8842fcb3e4fbfaa65f3d63f819edc(int i, int N, int W, long[] x, long[] bets) { 
 long min = A.getMin(x);
for (int j = 0; j < N; j++) {
    if (x[j] == min) {
        x[j]++;
        bets[j]++;
        break;
    }
}
double win = A.getWin(x, bets, W) - i;
return min;
}


*********************************

#### Score: 6.06747


#### Java Tokens: ret, leftcount, println, min, rightcount, max, left, num, count, right, math, curr 

public static double func_d27db92ccae34182a2bfbbc1b241bafe(int r, int s, int n, int p, int q) { 
 A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
for (int i = 0; i < n; i++) {
    int min = i;
    int max = n - 1;
    while (max - min > 3) {
        int left = (2 * min + max) / 3;
        int right = (2 * max + min) / 3;
        long leftCount = A.count(i, left);
        long rightCount = A.count(i, right);
        if (leftCount < rightCount) {
            max = right;
        } else {
            min = left;
        }
    }
    for (int j = min; j <= max; j++) {
        ret = Math.max(ret, 1 - A.count(i, j) * 1.0 / A.num[n]);
    }
}
A.pw.println(ret);
return ret;
}


public static double func_c6a080b186fa4081983d9d939871c33a(int r, int s, int n, int p, int q) { 
 for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
for (int i = 0; i < n; i++) {
    int min = i;
    int max = n - 1;
    while (max - min > 3) {
        int left = (2 * min + max) / 3;
        int right = (2 * max + min) / 3;
        long leftCount = A.count(i, left);
        long rightCount = A.count(i, right);
        if (leftCount < rightCount) {
            max = right;
        } else {
            min = left;
        }
    }
    for (int j = min; j <= max; j++) {
        ret = Math.max(ret, 1 - A.count(i, j) * 1.0 / A.num[n]);
    }
}
A.pw.println(ret);
return ret;
}


*********************************

#### Score: 5.93951


#### Java Tokens: col, min, mincol, level, need, need1, bets 

public static long func_e21b160d1e4f4426a7661c183a95418b(int minCol, long level, long need1, long[] bets) { 
 for (int i = 0; i < minCol; i++) {
    if (bets[i] > level) {
        return -1;
    }
    need1 += level - bets[i];
}
return need1;
}


*********************************

#### Score: 5.93951


#### Java Tokens: col, need2, min, mincol, level, need, bets 

public static long func_82020f0209134b359b7fd54845139a5b(int minCol, long need2, long level, long[] bets) { 
 for (int i = minCol; i < 37; i++) {
    if (bets[i] < level + 1) {
        need2 += level + 1 - bets[i];
    }
}
return need2;
}


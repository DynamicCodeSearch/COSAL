### Py Tokens: slice, area, sum, range, findx, areasum, find, eff 

### Py functions

def func_53eea99fe92045bfa2817cec061062fa(Eff, G, i):
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice

def func_c283b28ee5c54be1ae1545db3145be72(Eff, G, i):
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return G

def func_995494f18da2415e83c05c9dbfde2f7d(Eff, G, i):
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i

def func_1d31f55069f74fcb8c9e7a166013ec33(Eff, G, i):
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Eff

def func_1715baf753f74e5c9d2be7a6780c1181(Eff, G, i):
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area

*********************************

#### Score: 10.30649


#### Java Tokens: area, cur, slice 

public static double func_c9bcaa16533e48eebc8e3f01aeae3e20(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
return slice;
}


public static double func_6bb0960ead374469b19552bffa139805(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
return cur;
}


*********************************

#### Score: 7.71916


#### Java Tokens: area, cur, res, slice, array, double, arraylist, list 

public static double func_bbd914fe4b1f49c188d0067925327362(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
return slice;
}


public static double func_f5f5986770d84d42ab499d3e54c93f8f(int a, int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
return slice;
}


public static double func_8b0cd3bcacb94b8594956354822ea9f4(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
return cur;
}


*********************************

#### Score: 5.07430


#### Java Tokens: area, cur, upperpoints, max, maxx, prev, lower, upper, lowerpoints, findarea, points, min, minx, curx, find, prevx 

public static double func_51b3e6cf8a2e455d853d6553fedb8a09(double maxX, double minX, double prevX, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double curX = (minX + maxX) / 2;
double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
return area;
}


public static double func_bca4142df81749e3a4e22afc7dcf7409(double maxX, double minX, double prevX, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double curX = (minX + maxX) / 2;
double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
return curX;
}


*********************************

#### Score: 3.73391


#### Java Tokens: cur, prev, upper, answers, lowerpoints, findarea, points, min, minx, curx, find, linked, area, add, linkedlist, goal, err, upperpoints, max, double, maxx, lower, list, target, abs, prevx, math 

public static List<Double> func_ca7f05554c794256af9621af95694d95(int w, int g, double target, double goal, double prevX, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
return answers;
}


public static double func_574546df788c47609a690a552ee5084b(int w, int g, double goal, double prevX, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
return ERR;
}


public static double func_47538dc0c08f40649248387e52b49032(int w, int g, double goal, double prevX, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
return prevX;
}


*********************************

#### Score: 3.70124


#### Java Tokens: area 

public static double func_bf9da7196f404e56ae8e3c42bc93d311(int n, A.Point[] p) { 
 double area = 0;
for (int i = 0; i + 1 < n; i++) {
    area += p[i].x * (p[i + 1].y) - p[i].y * p[i + 1].x;
}
return area;
}


public static int func_41e81178f7a24586b1645ef2244863e8(int g, int i, double area) { 
 double na = (area * i) / g;
int j = 0;
return j;
}


public static double func_3476fe9f761545da96bf1b68fd8f4db8(int g, int i, double area) { 
 double na = (area * i) / g;
int j = 0;
return na;
}


*********************************

#### Score: 3.56925


#### Java Tokens: cur, prev, upper, answers, lowerpoints, totalarea, findarea, points, total, min, minx, curx, find, linked, area, add, linkedlist, goal, err, upperpoints, max, double, maxx, lower, list, target, abs, prevx, math 

public static double func_e49fb595198849b4a77a9d27ee7d6994(int w, int g, double totalArea, double prevX, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
return target;
}


public static double func_475622e4cf1a49dcb8309457beac4620(int w, int g, double totalArea, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double prevX = 0.0;
double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
return ERR;
}


public static ArrayList<Point> func_d96e32a7754e407da0a2b5da65f27388(int w, int g, double totalArea, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double prevX = 0.0;
double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
return upperPoints;
}


*********************************

#### Score: 3.49294


#### Java Tokens: cur, prev, upper, answers, lowerpoints, %.6f, findarea, points, printf, min, minx, curx, find, linked, area, add, linkedlist, goal, err, upperpoints, max, double, maxx, lower, list, target, abs, system, prevx, math 

public static double func_b502d46aa66a4d5b96372e1bb4bc075e(int w, int g, double target, double goal, double prevX, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
for (Double d : answers) {
    System.out.printf("%.6f\n", d);
}
return ERR;
}


public static double func_dc034d6d44ee4afcb8ea850023471a34(int w, int g, double target, double goal, double prevX, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
for (Double d : answers) {
    System.out.printf("%.6f\n", d);
}
return target;
}


public static ArrayList<Point> func_45daa705f7ed467281430de8682928dd(int w, int g, double goal, double prevX, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
for (Double d : answers) {
    System.out.printf("%.6f\n", d);
}
return lowerPoints;
}


*********************************

#### Score: 3.49294


#### Java Tokens: cur, prev, upper, lowerpoints, answers, totalarea, findarea, point, points, total, min, minx, curx, find, linked, add, area, linkedlist, goal, err, upperpoints, max, double, lower, maxx, list, target, abs, prevx, math 

public static double func_9c9bfabff93441b79c3758872ad12637(int w, int g, double totalArea, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints, Point[] lower) { 
 for (Point p : lower) {
    lowerPoints.add(p);
}
double prevX = 0.0;
double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
return prevX;
}


public static double func_971d9bbbf2aa4173a9ce2f1c188dfabb(int w, int g, double totalArea, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints, Point[] lower) { 
 for (Point p : lower) {
    lowerPoints.add(p);
}
double prevX = 0.0;
double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
return goal;
}


public static double func_14c34cd011a0431eae676ce5a0626263(int w, int g, double totalArea, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints, Point[] lower) { 
 for (Point p : lower) {
    lowerPoints.add(p);
}
double prevX = 0.0;
double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
A: for (int i = 0; i < g - 1; ++i) {
    target += goal;
    double minX = prevX;
    double maxX = 1.0 * w;
    while (minX < maxX) {
        double curX = (minX + maxX) / 2;
        double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
        // System.out.println(curX + ": " + area);
        if (Math.abs(area - target) < ERR) {
            prevX = curX;
            answers.add(curX);
            continue A;
        } else if (area - target < 0) {
            minX = curX;
        } else {
            maxX = curX;
        }
    // find area between prevX and curX
    }
}
return ERR;
}


*********************************

#### Score: 3.45144


#### Java Tokens: area, remain 

public static double func_0700cc6842054f2794d6db5b8cad74bb(int x0, double area, double x) { 
 double remain = area;
x0 = (int) x;
int x1 = x0 + 1;
return remain;
}


public static int func_b78fe80114d14149b079ca0807b9beac(int x0, double area, double x) { 
 double remain = area;
x0 = (int) x;
return x0;
}


public static double func_019975c34f36423cae7bee9f0f7a8253(int x0, double area, double x) { 
 double remain = area;
x0 = (int) x;
return remain;
}


*********************************

#### Score: 3.45144


#### Java Tokens: area, len 

public static double func_0cca408bacb8461d9c71e56a7ce2a31a(int w, double[] len) { 
 double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return area;
}


public static double func_b9a757e01d78459e9902918ef38284f9(int w, int g, double[] len) { 
 double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return area;
}


public static double func_b99cd0dbdc854271bb5de21037cf33f2(int w, int g, double area, double[] len) { 
 for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return area;
}


### Py Tokens: getsum, min, xrange, sum, total, best, totalsum 

### Py functions

def func_b40bb6a2d07d43c6bcccb028bd7d60a7(A, N, i):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return A

def func_d484230f2dce4dffbb6e0a60e1fedda0(A, N, i):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return total

def func_f7f8209619b24d9bbc741635d1e10eb7(N, p, q, r, s):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return a

def func_d4a94757ea9d4d53b166f86a2fddc55f(N, p, q, r, s):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return best

def func_969d41a6040445e2b24c3e9c72400594(A, N, i):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return i

*********************************

#### Score: 7.68534


#### Java Tokens: total, min, choose, best, math, partials 

public static long func_701c4c11ee9d48d3bd1d471287592c93(int n, long best, long[] partials) { 
 for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return total;
}


public static long func_e1cbff53008746a18da76ba7959b74b8(int n, long best, long[] partials) { 
 for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return best;
}


public static double func_d2b8afc827a647d9a218353eb4f00786(int n, long best, long[] partials) { 
 for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return 1 - (double) (best) / total;

}


*********************************

#### Score: 7.68534


#### Java Tokens: total, min, best, choose, math, partials 

public static double func_23166e1a11be459588992ed8af3f0a9b(int n, long[] partials) { 
 long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return 1 - (double) (best) / total;

}


public static long func_ae668c627d994641b8bcdeaa54588232(int n, long[] partials) { 
 long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return best;
}


public static long func_3663a8f012f74dfd92ad5ff68910fdc7(int n, long[] partials) { 
 long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return total;
}


*********************************

#### Score: 7.45490


#### Java Tokens: min, max, sum, best, math 

public static long func_2ce763c92ed940a597a196483683cf96(long x, long best, long sum, Long down) { 
 long now = Math.max(down, Math.max(x - down, sum - x));
best = Math.min(best, now);
return best;
}


public static long func_20b219fd65fb4abab993706fdfb74c0a(long x, long best, long sum, Long down) { 
 long now = Math.max(down, Math.max(x - down, sum - x));
best = Math.min(best, now);
return now;
}


public static long func_43d26346f2ae4f848c0c47dff88b36f4(long x, long best, long sum, Long up) { 
 long now = Math.max(up, Math.max(x - up, sum - x));
best = Math.min(best, now);
return now;
}


*********************************

#### Score: 7.45490


#### Java Tokens: sub, min, subsum, best, sum 

public static long func_600850d9d4c84ad9b14724eaeddc2a00(int N, long[] best) { 
 long min = best[N - 1];
long subSum = 0;
return min;
}


public static long func_eaaf29a53dd1406b8e32a14e1052ea99(int N, long[] best) { 
 long min = best[N - 1];
long subSum = 0;
return subSum;
}


*********************************

#### Score: 7.28424


#### Java Tokens: total, min, array, best, choose, math, partials 

public static long func_103c3e61f0024df99db71f7ca64905e0(int s, int r, int p, int q, int n) { 
 int[] array = new int[n];
for (int i = 0; i < n; i++) {
    array[i] = (i * p + q) % r + s;
// System.out.print(" "+array[i]);
}
// System.out.println();
long[] partials = new long[n + 1];
for (int i = 1; i <= n; i++) partials[i] = partials[i - 1] + array[i - 1];
long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return best;
}


public static double func_6bc79a5ffdbe47bf9a17d38199d2ed59(int n, int[] array, long[] partials) { 
 for (int i = 1; i <= n; i++) partials[i] = partials[i - 1] + array[i - 1];
long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return 1 - (double) (best) / total;

}


public static long func_b490e0d7a5a14a13b0d2115ba5646ca8(int n, int[] array, long[] partials) { 
 for (int i = 1; i <= n; i++) partials[i] = partials[i - 1] + array[i - 1];
long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return total;
}


*********************************

#### Score: 7.04381


#### Java Tokens: add, min, max, sum, best, math 

public static long func_1c70a478aeb5427987ce86dfdf10e433(long x, long best, long sum, Long down, TreeSet<Long> all) { 
 if (down != null) {
    long now = Math.max(down, Math.max(x - down, sum - x));
    best = Math.min(best, now);
}
all.add(x);
return best;
}


*********************************

#### Score: 6.85276


#### Java Tokens: total, best, partials 

public static double func_c893be9ac8e8493aa18d668330a5279f(int n, long best, long[] partials) { 
 long total = partials[n];
return 1 - (double) (best) / total;

}


*********************************

#### Score: 6.67820


#### Java Tokens: ceiling, min, max, sum, best, math, long 

public static long func_658d7c60c31143fda1ef42aec14a67da(int i, long x, long best, long sum, long[] a, TreeSet<Long> all) { 
 x += a[i];
Long up = all.ceiling(x / 2 + 1);
if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
return x;
}


public static Long func_df5d4a3663b54adcbd2a8dac3ce4d44f(int i, long x, long best, long sum, long[] a, TreeSet<Long> all) { 
 x += a[i];
Long up = all.ceiling(x / 2 + 1);
if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
return up;
}


public static Long func_02865e74f4fc46489ac6d5a9d2579baa(long x, long best, long sum, TreeSet<Long> all) { 
 Long up = all.ceiling(x / 2 + 1);
if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
return up;
}


*********************************

#### Score: 6.67820


#### Java Tokens: min, max, sum, best, math, floor, long 

public static long func_09c6ea16ac084147a40060ce4059926c(long x, long best, long sum, Long up, TreeSet<Long> all) { 
 if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
Long down = all.floor(x / 2);
if (down != null) {
    long now = Math.max(down, Math.max(x - down, sum - x));
    best = Math.min(best, now);
}
return best;
}


public static long func_a15c541b3fbd4a3c9d65dca1cfc67f1f(long x, long best, long sum, Long up, TreeSet<Long> all) { 
 if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
Long down = all.floor(x / 2);
return best;
}


public static long func_0fa949d0b1b94083b68aa87c6bb35dd3(long x, long best, long sum, TreeSet<Long> all) { 
 Long down = all.floor(x / 2);
if (down != null) {
    long now = Math.max(down, Math.max(x - down, sum - x));
    best = Math.min(best, now);
}
return best;
}


*********************************

#### Score: 6.67820


#### Java Tokens: sub, min, max, subsum, sum, best, math 

public static long func_e52d990594594af9b1d1930546394c98(int n, long min, long subSum, long[] best, long[] A) { 
 subSum += A[n];
min = Math.min(min, Math.max(subSum, best[n - 1]));
return subSum;
}


public static long func_cce427e621084c11ace268c6cd84ceee(int n, long min, long subSum, long[] best, long[] A) { 
 subSum += A[n];
min = Math.min(min, Math.max(subSum, best[n - 1]));
return min;
}


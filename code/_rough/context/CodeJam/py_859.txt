### Py Tokens: best, sum, vsota, cum, append 

### Py functions

def func_ae2c3dffad59495aa553e47f0c69d0fa(l):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    best = 0.0
    return x

*********************************

#### Score: 7.21801


#### Java Tokens: cum 

public static long func_24db2094c9cf47a18244f66646e16827(int a, int b, long[] cum) { 
 if (a == 0)
    return cum[b];
else {
    return cum[b] - cum[a - 1];
}

}


public static long func_bd101027a8c3491dbc7cf1d2898d0607(long L, long R, long[] cum) { 
 long M = (L + R) >> 1;
// out.println(L+" "+R+" "+M+" "+ok(M,cum));
if (A.ok(M, cum)) {
    R = M;
} else {
    L = M;
}
return R;
}


public static long func_6eba08b70c2747f5857ab065a1a0586a(long L, long R, long[] cum) { 
 long M = (L + R) >> 1;
// out.println(L+" "+R+" "+M+" "+ok(M,cum));
if (A.ok(M, cum)) {
    R = M;
} else {
    L = M;
}
return L;
}


*********************************

#### Score: 6.69929


#### Java Tokens: tot, cum 

public static long func_ad7458e49c41404faed36a25302fd505(long tot, long L, long[] cum) { 
 long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
return L;
}


public static long[] func_b5ed109ba1674a9dbe58e8f6b10c95d1(int N) { 
 long[] cum = new long[N];
long tot = 0;
return cum;
}


public static long func_dc02fe303d3a4c6fb54c44c3ec092235(long tot, long[] cum) { 
 long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
return R;
}


*********************************

#### Score: 6.69929


#### Java Tokens: arr, cum 

public static long[] func_a97a46f80de64dd8868bb7e096bbf8a7(int N) { 
 long[] arr = new long[N];
long[] cum = new long[N];
return arr;
}


public static long[] func_f3e3f5c8212d4e6f9ac4cc22fe9a79d9(int N) { 
 long[] arr = new long[N];
long[] cum = new long[N];
return cum;
}


*********************************

#### Score: 6.25427


#### Java Tokens: arr, tot, cum 

public static long func_bc93e174c1e546319c3dc7a4a04ac99d(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
return tot;
}


public static long[] func_f9dd255ad50343189bd52bacffe91a3d(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
return arr;
}


public static long func_55e00c9ca7854244ad18d4313a294949(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
return L;
}


*********************************

#### Score: 6.25427


#### Java Tokens: ans, tot, cum 

public static double func_566ffbeabd1c49aa935f1edccf17959f(long tot, long L, long R, long[] cum) { 
 while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return ans;
}


public static double func_039caa185ccb4afa8488b13df605a367(long tot, long[] cum) { 
 long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return ans;
}


public static long func_f3fa3a5793ae4ff58775d407d9a81dd4(long tot, long L, long R, long[] cum) { 
 while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return R;
}


*********************************

#### Score: 5.86828


#### Java Tokens: arr, ans, tot, cum 

public static long func_04ee2a053ede41ddb77cb58bf24c2b6b(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return R;
}


public static long func_efcea0cc06b44eb9bd91759734df338d(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return tot;
}


public static long[] func_0bb10a3aa03e43d893aca2c161207772(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return arr;
}


*********************************

#### Score: 5.37292


#### Java Tokens: beforehalf, half, best, sum, beforehalfsum 

public static long[] func_095d29345bcb4539a54796985e57d3be(int N) { 
 long[] best = new long[N];
int beforeHalf = 0;
long beforeHalfSum = 0;
return best;
}


public static long[] func_cf71e154ce714e628477beb61fa8dde2(int N, long q, long p, long r, long s) { 
 long[] A = new long[N];
for (int n = 0; n < N; n++) {
    A[n] = (n * p + q) % r + s;
}
long[] best = new long[N];
int beforeHalf = 0;
long beforeHalfSum = 0;
return best;
}


public static int func_f5032f43cc3b40bd9c4cfe63b8a45b92(int N, long q, long p, long r, long s) { 
 long[] A = new long[N];
for (int n = 0; n < N; n++) {
    A[n] = (n * p + q) % r + s;
}
long[] best = new long[N];
int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
return beforeHalf;
}


*********************************

#### Score: 5.37292


#### Java Tokens: min, max, sum, best, math 

public static long func_2ce763c92ed940a597a196483683cf96(long x, long best, long sum, Long down) { 
 long now = Math.max(down, Math.max(x - down, sum - x));
best = Math.min(best, now);
return best;
}


public static long func_20b219fd65fb4abab993706fdfb74c0a(long x, long best, long sum, Long down) { 
 long now = Math.max(down, Math.max(x - down, sum - x));
best = Math.min(best, now);
return now;
}


public static long func_43d26346f2ae4f848c0c47dff88b36f4(long x, long best, long sum, Long up) { 
 long now = Math.max(up, Math.max(x - up, sum - x));
best = Math.min(best, now);
return now;
}


*********************************

#### Score: 5.37292


#### Java Tokens: sub, min, subsum, best, sum 

public static long func_600850d9d4c84ad9b14724eaeddc2a00(int N, long[] best) { 
 long min = best[N - 1];
long subSum = 0;
return min;
}


public static long func_eaaf29a53dd1406b8e32a14e1052ea99(int N, long[] best) { 
 long min = best[N - 1];
long subSum = 0;
return subSum;
}


*********************************

#### Score: 5.08374


#### Java Tokens: add, min, max, sum, best, math 

public static long func_1c70a478aeb5427987ce86dfdf10e433(long x, long best, long sum, Long down, TreeSet<Long> all) { 
 if (down != null) {
    long now = Math.max(down, Math.max(x - down, sum - x));
    best = Math.min(best, now);
}
all.add(x);
return best;
}


### Py Tokens: lowest, cnt, partial, ret, lowestcnt, onlymine, mine, len 

### Py functions

def func_c07898c78dad483998972689b6eb2578(lowest, lowest_cnt, only_mine, p,
    partial):
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    return p

*********************************

#### Score: 7.13054


#### Java Tokens: ret 

public static double func_eb1ce8fbff084855a8300a82968a5e86(int li, double ret) { 
 for (int i = 0; i < li - 1; i++) ret += C.l[i].x * C.l[i + 1].y;
return ret;
}


public static double func_3352f75ca8b1493abac9d896a4d4908b(double ret) { 
 ret -= C.u[0].y * C.l[0].x;
return ret;

}


public static double func_e494412261a04b89822cdb4255b3a819(int li, double ret) { 
 for (int i = 0; i < li - 1; i++) ret -= C.l[i].y * C.l[i + 1].x;
return ret;
}


*********************************

#### Score: 7.08415


#### Java Tokens: suffixes, count, partial 

public static long[] func_9e6efcf1e7804e7fa38b7dc8996499a2(int count, long[] partial) { 
 long[] suffixes = new long[count + 1];
for (int i = 0; i <= count; i++) suffixes[i] = partial[count] - partial[count - i];
return suffixes;
}


*********************************

#### Score: 6.64312


#### Java Tokens: suffixes, answer, count, partial 

public static long func_19ddd638cdd04fdbb31d95d662230294(int count, long[] partial, long[] suffixes) { 
 for (int i = 0; i <= count; i++) suffixes[i] = partial[count] - partial[count - i];
long answer = partial[count];
return answer;
}


public static long[] func_33eeddbb78f849ca977f22d2d78d976e(int count, long[] partial) { 
 long[] suffixes = new long[count + 1];
for (int i = 0; i <= count; i++) suffixes[i] = partial[count] - partial[count - i];
long answer = partial[count];
return suffixes;
}


public static long func_060bbd28793d4c7eb0f49501dc36f4f0(int count, long[] partial) { 
 long[] suffixes = new long[count + 1];
for (int i = 0; i <= count; i++) suffixes[i] = partial[count] - partial[count - i];
long answer = partial[count];
return answer;
}


*********************************

#### Score: 6.61851


#### Java Tokens: ret, indu 

public static double func_1806ddc95fb94a0388205d95cd2155df(int indu, double ret, double x) { 
 ret += A.us[indu];
double yu = A.uy[indu] + (A.uy[indu + 1] - A.uy[indu]) * (x - A.ux[indu]) / (A.ux[indu + 1] - A.ux[indu]);
ret += (x - A.ux[indu]) * (A.uy[indu] + yu) / 2;
return yu;
}


public static double func_646e86d7b8114de8bfb886dd2151f91c(int indu, double ret, double x) { 
 ret += A.us[indu];
double yu = A.uy[indu] + (A.uy[indu + 1] - A.uy[indu]) * (x - A.ux[indu]) / (A.ux[indu + 1] - A.ux[indu]);
return yu;
}


public static double func_271473de058a4268a7de42103f6f3d4c(int indu, double ret, double x) { 
 if (indu < 0)
    indu = -indu - 2;
ret += A.us[indu];
double yu = A.uy[indu] + (A.uy[indu + 1] - A.uy[indu]) * (x - A.ux[indu]) / (A.ux[indu + 1] - A.ux[indu]);
ret += (x - A.ux[indu]) * (A.uy[indu] + yu) / 2;
return ret;
}


*********************************

#### Score: 6.61851


#### Java Tokens: ret, indl 

public static double func_71c37f2e2b1b4c36a077121e96adbf75(int indl, double ret, double x) { 
 ret -= A.ls[indl];
double yl = A.ly[indl] + (A.ly[indl + 1] - A.ly[indl]) * (x - A.lx[indl]) / (A.lx[indl + 1] - A.lx[indl]);
ret -= (x - A.lx[indl]) * (A.ly[indl] + yl) / 2;
return ret;
}


public static int func_c45bfa4bdbb14395879688434e2c28d5(int indl, double ret) { 
 if (indl < 0)
    indl = -indl - 2;
ret -= A.ls[indl];
return indl;
}


public static double func_341afb07fb214ba290ffbe36755f129d(int indl, double ret, double x) { 
 double yl = A.ly[indl] + (A.ly[indl + 1] - A.ly[indl]) * (x - A.lx[indl]) / (A.lx[indl + 1] - A.lx[indl]);
ret -= (x - A.lx[indl]) * (A.ly[indl] + yl) / 2;
return ret;
}


*********************************

#### Score: 6.61851


#### Java Tokens: ret, i-- 

public static double func_e93ede155abb459eaab259bebed69574(int ui, double ret) { 
 for (int i = ui - 1; i > 0; i--) ret -= C.u[i].y * C.u[i - 1].x;
return ret;
}


public static double func_86c34bf50bfc4882ad60475754825308(int ui, double ret) { 
 for (int i = ui - 1; i > 0; i--) ret += C.u[i].x * C.u[i - 1].y;
ret += C.u[0].x * C.l[0].y;
return ret;
}


public static double func_a5b6e2bd23b7429d90d9d397aa723ad9(int ui, double ret) { 
 for (int i = ui - 1; i > 0; i--) ret -= C.u[i].y * C.u[i - 1].x;
ret -= C.u[0].y * C.l[0].x;
return ret;
}


*********************************

#### Score: 6.61851


#### Java Tokens: ret, sol 

public static String func_a7be7337d85843068f92d53abb037ee7(int i, int[] sol, String ret) { 
 if (i > 0)
    ret += " ";
ret += sol[i];
return ret;
}


*********************************

#### Score: 6.36700


#### Java Tokens: last, cnt 

public static double func_77f96629119a48e5ba819e991fe84e6c(int cnt, double r, double l, double last) { 
 cnt++;
last = (l + r) / 2;
return last;
}


public static double func_403704905018476bbbff98a57751b05c(int g, long s) { 
 double gs = 1.0 * s / g;
int i = 0;
int j = 0;
double last = 0;
double ss = 0;
int cnt = 0;
return last;
}


public static double func_151386ac6d144a0f847411e7c923a3ef(int g, long s) { 
 double gs = 1.0 * s / g;
int i = 0;
int j = 0;
double last = 0;
double ss = 0;
int cnt = 0;
return gs;
}


*********************************

#### Score: 6.36700


#### Java Tokens: tmp, cnt 

public static int func_cd4276872215413db0dbc3f66e17128b(int[] x) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
return cnt;
}


*********************************

#### Score: 6.17923


#### Java Tokens: ret, num, curr 

public static double func_ed0342d9dcaa41db8cf5848110c2edbe(int r, int s, int n, int p, int q) { 
 A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
return ret;
}


public static double func_290667c5b85043b3b31969160f57e09e(int r, int s, int n, int p, int q) { 
 for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
return ret;
}


### Py Tokens: case, map, numcases, int, xrange, computing, sys, num, solve, split, stderr, cases, solveit 

### Py functions

def func_a034264f9afa448bab891c15ed07e96d(l, numCases):
    l = l[1:]
    for i in xrange(numCases):
        print  >> sys.stderr, 'Computing case %d' % (i + 1)
        n = int(l[0])
        ti = map(int, l[1].split()[:n])
        pi = map(int, l[2].split()[:n])
        l = l[3:]
        print 'Case #%d: %s' % (i + 1, solveIt(ti, pi))
    return numCases

def func_356aaffebf4c4d55969dcc82cf8aa364(l, numCases):
    l = l[1:]
    for i in xrange(numCases):
        print  >> sys.stderr, 'Computing case %d' % (i + 1)
        n = int(l[0])
        ti = map(int, l[1].split()[:n])
        pi = map(int, l[2].split()[:n])
        l = l[3:]
        print 'Case #%d: %s' % (i + 1, solveIt(ti, pi))
    return l

*********************************

#### Score: 12.67921


#### Java Tokens: next, println, cases, system, nextint, solve, scanner, int, case 

public static int func_ac187287df434b2ba9123f5a9edcdcd6(Scanner scanner) { 
 final int cases = scanner.nextInt();
for (int t = 0; t < cases; t++) {
    System.out.println("Case #" + (t + 1) + ": " + A.solve(scanner));
}
return cases;
}


*********************************

#### Score: 10.58622


#### Java Tokens: cheaters, print, casenum, num, solve, case 

public static PrintWriter func_2866bb7f8b864eb9bea6213d273fd8ec(int caseNum, PrintWriter pw, Scanner sc) { 
 pw.print("Case #" + (caseNum + 1) + ": ");
new Cheaters().solve(sc, pw);
return pw;
}


*********************************

#### Score: 10.58622


#### Java Tokens: print, perfect, casenum, num, solve, case 

public static PrintWriter func_40f65a9be3c843eba14b8c967c9ef5e2(int caseNum, PrintWriter pw, Scanner sc) { 
 pw.print("Case #" + (caseNum + 1) + ":");
new Perfect().solve(sc, pw);
return pw;
}


*********************************

#### Score: 9.52196


#### Java Tokens: magical, print, casenum, num, solve, case, tour, magicaltour 

public static PrintWriter func_a2500e324bda44eda1bc9f2fe6f052b9(int caseNum, PrintWriter pw, Scanner sc) { 
 pw.print("Case #" + (caseNum + 1) + ": ");
new MagicalTour().solve(sc, pw);
return pw;
}


*********************************

#### Score: 8.65967


#### Java Tokens: println, print, system, test, perfect, casenum, num, solve, processing, case 

public static PrintWriter func_0f6e2a337f2a414cbbd6ad86be134486(int caseNum, PrintWriter pw, Scanner sc) { 
 System.out.println("Processing test case " + (caseNum + 1));
pw.print("Case #" + (caseNum + 1) + ":");
new Perfect().solve(sc, pw);
return pw;
}


*********************************

#### Score: 8.65967


#### Java Tokens: cheaters, println, print, system, test, casenum, num, solve, processing, case 

public static PrintWriter func_be029e682a5b49958d4d0d5e38aecc2d(int caseNum, PrintWriter pw, Scanner sc) { 
 System.out.println("Processing test case " + (caseNum + 1));
pw.print("Case #" + (caseNum + 1) + ": ");
new Cheaters().solve(sc, pw);
return pw;
}


*********************************

#### Score: 8.40660


#### Java Tokens: next, nextint, test, casenum, num, cnt, casecnt, int, cheaters, println, print, system, solve, processing, case 

public static PrintWriter func_896f57c2e8aa4eb1b56eed6e190ad261(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
return pw;
}


public static int func_950eabbe4c274f529b582c1c42fba69d(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
return caseCnt;
}


*********************************

#### Score: 8.40660


#### Java Tokens: next, nextint, test, perfect, casenum, num, cnt, casecnt, int, println, print, system, solve, processing, case 

public static int func_f88706193b744a4db4350bd01f1a8d9a(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ":");
    new Perfect().solve(sc, pw);
}
return caseCnt;
}


public static PrintWriter func_125af6ec70374e2a920637c57deaed08(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ":");
    new Perfect().solve(sc, pw);
}
return pw;
}


*********************************

#### Score: 8.22823


#### Java Tokens: next, println, nextint, casenum, num, case, int 

public static int func_8a58a60116c444e19239ea1667bf2816(int caseNum, PrintWriter pw, Scanner sc) { 
 pw.println("Case #" + caseNum + ":");
int W = sc.nextInt();
return W;
}


public static PrintWriter func_e1f830f5e127477e9e3a7f149deb5e1f(int caseNum, PrintWriter pw, Scanner sc) { 
 pw.println("Case #" + caseNum + ":");
int W = sc.nextInt();
return pw;
}


public static int func_1bec4220e1564b1ea083cb5807151e56(int caseNum, PrintWriter pw, Scanner sc) { 
 pw.println("Case #" + caseNum + ":");
int W = sc.nextInt();
int L = sc.nextInt();
int U = sc.nextInt();
int G = sc.nextInt();
return U;
}


*********************************

#### Score: 8.11218


#### Java Tokens: next, nextint, test, casenum, num, cnt, casecnt, int, cheaters, println, print, system, flush, solve, processing, case 

public static PrintWriter func_b8fed52618d04b9da7918f39335f71ab(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
pw.flush();
return pw;
}


public static int func_7ea72d57573c4ef189d93e1464a46f76(PrintWriter pw, Scanner sc) { 
 int caseCnt = sc.nextInt();
for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
    System.out.println("Processing test case " + (caseNum + 1));
    pw.print("Case #" + (caseNum + 1) + ": ");
    new Cheaters().solve(sc, pw);
}
pw.flush();
return caseCnt;
}


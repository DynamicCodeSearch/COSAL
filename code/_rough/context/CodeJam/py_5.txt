### Py Tokens: getnext, cur2, get, getpos, pos, next 

### Py functions

def func_27b67d26b4704540b0d328139b132147(U, getNext, i, x):
    if getNext:
        if x >= U[i + 1][0]:
            i += 1
        if x >= L[j + 1][0]:
            j += 1
        if U[i + 1][0] < L[j + 1][0]:
            x2 = U[i + 1][0]
            cur2 = U[i + 1][1] - getPos(x2, L[j], L[j + 1])
        elif U[i + 1][0] > L[j + 1][0]:
            x2 = L[j + 1][0]
            cur2 = getPos(x2, U[i], U[i + 1]) - L[j + 1][1]
        else:
            x2 = U[i + 1][0]
            cur2 = U[i + 1][1] - L[j + 1][1]
    if x >= U[i + 1][0]:
        i += 1
    return U

def func_0d11c9b3de47455dbd671916c4594fd3(U, getNext, i, x):
    if getNext:
        if x >= U[i + 1][0]:
            i += 1
        if x >= L[j + 1][0]:
            j += 1
        if U[i + 1][0] < L[j + 1][0]:
            x2 = U[i + 1][0]
            cur2 = U[i + 1][1] - getPos(x2, L[j], L[j + 1])
        elif U[i + 1][0] > L[j + 1][0]:
            x2 = L[j + 1][0]
            cur2 = getPos(x2, U[i], U[i + 1]) - L[j + 1][1]
        else:
            x2 = U[i + 1][0]
            cur2 = U[i + 1][1] - L[j + 1][1]
    if x >= U[i + 1][0]:
        i += 1
    return getNext

def func_bf8c399ce8b04c998e49ccfe23de3ae9(U, getNext, i, x):
    if getNext:
        if x >= U[i + 1][0]:
            i += 1
        if x >= L[j + 1][0]:
            j += 1
        if U[i + 1][0] < L[j + 1][0]:
            x2 = U[i + 1][0]
            cur2 = U[i + 1][1] - getPos(x2, L[j], L[j + 1])
        elif U[i + 1][0] > L[j + 1][0]:
            x2 = L[j + 1][0]
            cur2 = getPos(x2, U[i], U[i + 1]) - L[j + 1][1]
        else:
            x2 = U[i + 1][0]
            cur2 = U[i + 1][1] - L[j + 1][1]
    if x >= U[i + 1][0]:
        i += 1
    return x

def func_8c68e23a4aaf4829b246ad0139e88450(U, getNext, i, x):
    if getNext:
        if x >= U[i + 1][0]:
            i += 1
        if x >= L[j + 1][0]:
            j += 1
        if U[i + 1][0] < L[j + 1][0]:
            x2 = U[i + 1][0]
            cur2 = U[i + 1][1] - getPos(x2, L[j], L[j + 1])
        elif U[i + 1][0] > L[j + 1][0]:
            x2 = L[j + 1][0]
            cur2 = getPos(x2, U[i], U[i + 1]) - L[j + 1][1]
        else:
            x2 = U[i + 1][0]
            cur2 = U[i + 1][1] - L[j + 1][1]
    if x >= U[i + 1][0]:
        i += 1
    return getNext

def func_dcbab9e4443644869959823cda0274a1(U, getNext, i, x):
    if getNext:
        if x >= U[i + 1][0]:
            i += 1
        if x >= L[j + 1][0]:
            j += 1
        if U[i + 1][0] < L[j + 1][0]:
            x2 = U[i + 1][0]
            cur2 = U[i + 1][1] - getPos(x2, L[j], L[j + 1])
        elif U[i + 1][0] > L[j + 1][0]:
            x2 = L[j + 1][0]
            cur2 = getPos(x2, U[i], U[i + 1]) - L[j + 1][1]
        else:
            x2 = U[i + 1][0]
            cur2 = U[i + 1][1] - L[j + 1][1]
    if x >= U[i + 1][0]:
        i += 1
    return U

*********************************

#### Score: 7.23568


#### Java Tokens: next, nextint, pos, cin, int 

public static int[][] func_d2060e0e20f145f99688ce6c26eb7073(Scanner cin) { 
 int l = cin.nextInt();
int u = cin.nextInt();
int g = cin.nextInt();
int[][] pos = new int[l + u][2];
for (int i = 0; i < l + u; ++i) {
    pos[i][0] = cin.nextInt();
    pos[i][1] = cin.nextInt();
}
return pos;
}


public static int[][] func_d357188c82c3408a90d8ac09cee07a84(Scanner cin) { 
 int l = cin.nextInt();
int u = cin.nextInt();
int g = cin.nextInt();
int[][] pos = new int[l + u][2];
return pos;
}


public static int func_f268c510823d471d8c5ee72cfea4b7f4(Scanner cin) { 
 int w = cin.nextInt();
int l = cin.nextInt();
int u = cin.nextInt();
int g = cin.nextInt();
int[][] pos = new int[l + u][2];
for (int i = 0; i < l + u; ++i) {
    pos[i][0] = cin.nextInt();
    pos[i][1] = cin.nextInt();
}
return g;
}


*********************************

#### Score: 6.53703


#### Java Tokens: pos 

public static int func_1196f0d0aef14fc1ac52ae7c8892dfd2(int i, int[][] pos) { 
 int nx = pos[i][0];
int ny = pos[i][1];
return ny;
}


public static int func_67d659eeef4941deb5e9de0dca048017(int l, int py, int px, int[][] pos) { 
 px = pos[l][0];
py = pos[l][1];
return px;
}


public static int func_644c113398604f858135ae9caaaf0ac7(int[][] pos) { 
 int px = pos[0][0];
int py = pos[0][1];
return py;
}


*********************************

#### Score: 6.16617


#### Java Tokens: next, println, system, nextint, pos, cin, int, case 

public static int func_e5c532eff14240dea370e5cdf8d09671(int c, Scanner cin) { 
 int w = cin.nextInt();
int l = cin.nextInt();
int u = cin.nextInt();
int g = cin.nextInt();
int[][] pos = new int[l + u][2];
for (int i = 0; i < l + u; ++i) {
    pos[i][0] = cin.nextInt();
    pos[i][1] = cin.nextInt();
}
System.out.println("Case #" + c + ":");
return g;
}


public static int func_7a4fad3910104a7d88d38b5ef3a333bf(int u, int l, int c, Scanner cin) { 
 int g = cin.nextInt();
int[][] pos = new int[l + u][2];
for (int i = 0; i < l + u; ++i) {
    pos[i][0] = cin.nextInt();
    pos[i][1] = cin.nextInt();
}
System.out.println("Case #" + c + ":");
return g;
}


public static int func_6c762e6d3f4b4f7985f26bd14f854be0(int c, Scanner cin) { 
 int l = cin.nextInt();
int u = cin.nextInt();
int g = cin.nextInt();
int[][] pos = new int[l + u][2];
for (int i = 0; i < l + u; ++i) {
    pos[i][0] = cin.nextInt();
    pos[i][1] = cin.nextInt();
}
System.out.println("Case #" + c + ":");
return u;
}


*********************************

#### Score: 6.07038


#### Java Tokens: pos, bound 

public static int func_e56fbf72e0224d66b77b40ae8b9f585b(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return py;
}


public static int func_6b9bb5b3b1cd4a60ac5a15167a40b0c6(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
return px;
}


public static int func_97cddfce9b7c452f8695797bae1d62e3(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return px;
}


*********************************

#### Score: 6.07038


#### Java Tokens: div, pos 

public static int func_cd9b5fe359cb40bf81b56ae592a1baa4(int nx, int i, int px, int[][] pos) { 
 int ny = pos[i][1];
double div = nx - px;
return ny;
}


public static int func_ccafa875904d402aad92ff0ee0925965(int px, int i, int[][] pos) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
return ny;
}


public static double func_9a6f36d3b0f749569eb0f7063a887413(int nx, int px, int i, int[][] pos) { 
 int ny = pos[i][1];
double div = nx - px;
return div;
}


*********************************

#### Score: 6.07038


#### Java Tokens: pos, exp 

public static int func_d0a7c296e021459dacf6b862a210eb59(int n, double[] exp) { 
 int pos = 0;
for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
return pos;
}


*********************************

#### Score: 5.67003


#### Java Tokens: div, pos, bound 

public static int func_58a39ec2b5e24e1a82950afef3b71c8a(int l, int px, int[][] pos, double[] bound) { 
 int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
return py;
}


public static int func_9d99c61bf0e24d2885926eadad002202(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
px = nx;
return ny;
}


public static int func_4959f32046524c3ab41634b4b7ef81a1(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
return nx;
}


*********************************

#### Score: 5.67003


#### Java Tokens: print, pos, exp 

public static PrintWriter func_177d5cfe488a4c8db123900770909d9a(int n, int pos, double[] exp, PrintWriter pw) { 
 for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
return pw;
}


public static int func_c428b901829146a491027271a1d95e14(int n, double[] exp, PrintWriter pw) { 
 int pos = 0;
for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
return pos;
}


public static int func_062ef56765224815b11b1e7607714d4f(int n, int pos, double[] exp, PrintWriter pw) { 
 for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
return pos;
}


*********************************

#### Score: 5.67003


#### Java Tokens: print, system, pos 

public static PrintWriter func_280272c3c65c47dab611101c31d78313(int pos, PrintWriter pw) { 
 pw.print(pos + " ");
System.out.print(pos + " ");
return pw;
}


*********************************

#### Score: 5.32279


#### Java Tokens: print, system, pos, exp 

public static PrintWriter func_1e4ad63a67ea4dfa919aef626af98059(int n, int pos, double[] exp, PrintWriter pw) { 
 for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
System.out.print(pos + " ");
exp[pos] = -1;
return pw;
}


public static PrintWriter func_3e968375c36e45e288f4d3b43c12475d(int pos, double[] exp, PrintWriter pw) { 
 pw.print(pos + " ");
System.out.print(pos + " ");
exp[pos] = -1;
return pw;
}


public static PrintWriter func_998020435ea94805b628b60a3c91a32c(int n, double[] exp, PrintWriter pw) { 
 int pos = 0;
for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
System.out.print(pos + " ");
exp[pos] = -1;
return pw;
}


### Py Tokens: sort, max, append, min, profit, xrange, best 

### Py functions

def func_1766377a52884e56886b8a21a7148d38(b, x):
    x.sort()
    x.append(10 ** 100)
    m = [0] * 37
    best = 0.0
    for i in xrange(37):
        if x[i] == x[i + 1]:
            continue
        while x[i] < x[i + 1] and b >= 0:
            xx = x[:]
            mm = m[:]
            for j in xrange(min(i + 1, b)):
                xx[i - j] += 1
                mm[i - j] += 1
                best = max(best, profit(xx, mm))
            z = max(x[i + 1] - x[i] - 1, 1)
            for j in xrange(i + 1):
                if b < j + 1:
                    continue
                zz = min((b - j - 1) // (i + 1) + 1, z)
                if zz <= 1:
                    continue
                xx = x[:]
                mm = m[:]
                for k in xrange(i + 1):
                    q = zz if k <= j else zz - 1
                    xx[i - k] += q
                    mm[i - k] += q
                best = max(best, profit(xx, mm))
            for j in xrange(i + 1):
                b -= z
                x[i - j] += z
                m[i - j] += z
    return best

*********************************

#### Score: 9.69307


#### Java Tokens: result, collections, bestresult, best, sort, profit 

public static double func_2e1d178b8cfb44799660e97759d4a338(ArrayList<Long> profit) { 
 // out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


*********************************

#### Score: 8.72244


#### Java Tokens: add, result, money, collections, bestresult, best, sort, profit 

public static long func_343bdcca14d54e9ca38bdab18991bfa7(long l, long money, long[] a, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return money;
}


public static double func_5f96bc5b17054aab93bb46045116212e(long l, long money, long[] a, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


*********************************

#### Score: 7.65747


#### Java Tokens: bestresult, max, startresult, start, best, sort, remove, money--, result, size, money, collections, get, math, profit 

public static double func_e7ec3c235d2b46fd9a35141af4e84f15(long money, double startResult, ArrayList<Long> profit) { 
 // out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
while (profit.size() > 0 && money >= 0) {
    // remaining
    double result = startResult + money;
    for (int i = 0; i < profit.size(); i++) {
        result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
    }
    profit.remove(0);
    money--;
    bestResult = Math.max(bestResult, result);
}
return bestResult;
}


*********************************

#### Score: 7.53028


#### Java Tokens: add, money, collections, sort, profit 

public static long func_ed9b057143b0438e85858b7ef1167777(long l, long money, long[] a, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return money;
}


*********************************

#### Score: 7.45880


#### Java Tokens: result, money, bestresult, max, best, math, profit, remove, money-- 

public static double func_0dfa8a4bfd2d4612b8aeb0165f501cde(long money, double result, double bestResult, ArrayList<Long> profit) { 
 profit.remove(0);
money--;
bestResult = Math.max(bestResult, result);
return bestResult;
}


*********************************

#### Score: 7.39072


#### Java Tokens: add, bestresult, max, startresult, start, best, sort, remove, money--, result, money, size, collections, get, math, profit 

public static long func_9c3e3d6d30544c8a957540405ee7cbfc(long l, long money, long[] a, double startResult, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
while (profit.size() > 0 && money >= 0) {
    // remaining
    double result = startResult + money;
    for (int i = 0; i < profit.size(); i++) {
        result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
    }
    profit.remove(0);
    money--;
    bestResult = Math.max(bestResult, result);
}
return money;
}


public static double func_5da68e943d804a1c85429c29bdb5e585(long l, long money, long[] a, double startResult, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
while (profit.size() > 0 && money >= 0) {
    // remaining
    double result = startResult + money;
    for (int i = 0; i < profit.size(); i++) {
        result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
    }
    profit.remove(0);
    money--;
    bestResult = Math.max(bestResult, result);
}
return bestResult;
}


*********************************

#### Score: 7.28590


#### Java Tokens: add, result, money, array, collections, bestresult, best, arraylist, sort, list, profit, long 

public static long func_e7456d7a6591451b8877074d7707e8f2(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return money;
}


public static double func_5984f9a79b8a49de9d1f8c26849b5b51(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


public static ArrayList<Long> func_6573ef28dcdb48b7afbf727f51c17533(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return profit;
}


*********************************

#### Score: 7.13614


#### Java Tokens: cur, min, max, best, math 

public static long func_3f962ac00d7b48b8ab8d40973dba07f9(int n, int r, long cur, long best, long[] s) { 
 cur = Math.max(cur, s[n] - s[r]);
best = Math.min(best, cur);
return cur;
}


public static long func_15c2af9aa3224dbd94712e22856ad765(int n, int r, int l, long best, long[] s) { 
 long cur = 0;
cur = Math.max(cur, s[l - 1]);
cur = Math.max(cur, s[r] - s[l - 1]);
cur = Math.max(cur, s[n] - s[r]);
best = Math.min(best, cur);
return cur;
}


public static long func_6bc891ef9d5146b8b2c34fd22e73c2e3(int n, int r, long cur, long best, long[] s) { 
 cur = Math.max(cur, s[n] - s[r]);
best = Math.min(best, cur);
return best;
}


*********************************

#### Score: 7.13614


#### Java Tokens: min, max, sum, best, math 

public static long func_2ce763c92ed940a597a196483683cf96(long x, long best, long sum, Long down) { 
 long now = Math.max(down, Math.max(x - down, sum - x));
best = Math.min(best, now);
return best;
}


public static long func_20b219fd65fb4abab993706fdfb74c0a(long x, long best, long sum, Long down) { 
 long now = Math.max(down, Math.max(x - down, sum - x));
best = Math.min(best, now);
return now;
}


public static long func_43d26346f2ae4f848c0c47dff88b36f4(long x, long best, long sum, Long up) { 
 long now = Math.max(up, Math.max(x - up, sum - x));
best = Math.min(best, now);
return now;
}


*********************************

#### Score: 6.92396


#### Java Tokens: best, arrays, sort 

public static double func_95f8a5025b6242bb92b79f6fd1f6b179(long[] a) { 
 Arrays.sort(a);
double best = 0;
return best;
}


public static double func_afd5bff942d74f999f114261393f19be(long[] x) { 
 Arrays.sort(x);
// System.out.println(Arrays.toString(x));
double best = 0;
return best;
}


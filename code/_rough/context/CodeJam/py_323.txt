### Py Tokens: seq, extra, in1, in2, extraif2goes, range, abs, swap, goes, extraif1goesfirst, best, first 

### Py functions

def func_1091d16593634ef8bad27080f5251cb7(N, k, seq):
    best = k
    for s in range(k + 1, N):
        in1 = seq[best][0]
        L1 = seq[best][1]
        E1 = seq[best][2]
        in2 = seq[s][0]
        L2 = seq[s][1]
        E2 = seq[s][2]
        extra_if_1_goes_first = (E2 - 1) * E1 * L1
        extra_if_2_goes = (E1 - 1) * E2 * L2
        if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
            if in2 < in1:
                best = s
        elif extra_if_2_goes < extra_if_1_goes_first:
            best = s
    swap = seq[best]
    seq[best] = seq[k]
    seq[k] = swap
    return N

def func_7981691b86c24a9f8638bfe85d36c441(N, best, k, seq):
    for s in range(k + 1, N):
        in1 = seq[best][0]
        L1 = seq[best][1]
        E1 = seq[best][2]
        in2 = seq[s][0]
        L2 = seq[s][1]
        E2 = seq[s][2]
        extra_if_1_goes_first = (E2 - 1) * E1 * L1
        extra_if_2_goes = (E1 - 1) * E2 * L2
        if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
            if in2 < in1:
                best = s
        elif extra_if_2_goes < extra_if_1_goes_first:
            best = s
    swap = seq[best]
    seq[best] = seq[k]
    return extra_if_1_goes_first

def func_9d9b54994b7243728db224dd066054d6(N, k, seq):
    best = k
    for s in range(k + 1, N):
        in1 = seq[best][0]
        L1 = seq[best][1]
        E1 = seq[best][2]
        in2 = seq[s][0]
        L2 = seq[s][1]
        E2 = seq[s][2]
        extra_if_1_goes_first = (E2 - 1) * E1 * L1
        extra_if_2_goes = (E1 - 1) * E2 * L2
        if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
            if in2 < in1:
                best = s
        elif extra_if_2_goes < extra_if_1_goes_first:
            best = s
    swap = seq[best]
    return s

def func_2d2a828ee0f541c19d2e86e12931232e(N, k, seq):
    best = k
    for s in range(k + 1, N):
        in1 = seq[best][0]
        L1 = seq[best][1]
        E1 = seq[best][2]
        in2 = seq[s][0]
        L2 = seq[s][1]
        E2 = seq[s][2]
        extra_if_1_goes_first = (E2 - 1) * E1 * L1
        extra_if_2_goes = (E1 - 1) * E2 * L2
        if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
            if in2 < in1:
                best = s
        elif extra_if_2_goes < extra_if_1_goes_first:
            best = s
    swap = seq[best]
    seq[best] = seq[k]
    return N

def func_343dff813a1440e081f67545ab27e0c0(N, k, seq):
    best = k
    for s in range(k + 1, N):
        in1 = seq[best][0]
        L1 = seq[best][1]
        E1 = seq[best][2]
        in2 = seq[s][0]
        L2 = seq[s][1]
        E2 = seq[s][2]
        extra_if_1_goes_first = (E2 - 1) * E1 * L1
        extra_if_2_goes = (E1 - 1) * E2 * L2
        if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
            if in2 < in1:
                best = s
        elif extra_if_2_goes < extra_if_1_goes_first:
            best = s
    swap = seq[best]
    return seq

*********************************

#### Score: 6.34567


#### Java Tokens: cur, ecur, swap, eswap 

public static long func_8e688d3d259e43b7aa8efcbd24190364(int p2, int p3, int l2, int l3, long l1) { 
 long eCur = (l1 + l2) * p2 + (l1 + l2 + l3) * (100 - p2) * p3;
long eSwap = (l1 + l3) * p3 + (l1 + l2 + l3) * (100 - p3) * p2;
return eSwap;
}


public static long func_d2aa7e7542204edd93462fc65b5e6e5c(int p2, int p3, int l2, int l3, long l1) { 
 long eCur = (l1 + l2) * p2 + (l1 + l2 + l3) * (100 - p2) * p3;
long eSwap = (l1 + l3) * p3 + (l1 + l2 + l3) * (100 - p3) * p2;
return eCur;
}


*********************************

#### Score: 6.34567


#### Java Tokens: die, sol, swapped, swap 

public static boolean func_66e67fd41196449c829277e97740a56c(int a, int[] sol, boolean swapped) { 
 Die.swap(sol, a, a + 1);
swapped = true;
return swapped;
}


*********************************

#### Score: 5.65339


#### Java Tokens: sol, prob, die, swapped, swap, length 

public static boolean func_01c939fe6aad46ec874c677868ab1b67(int[] sol, int[] prob, boolean swapped) { 
 do {
    swapped = false;
    for (int a = 0; a < sol.length - 1; a++) {
        if (prob[a] == prob[a + 1]) {
            if (sol[a + 1] < sol[a]) {
                Die.swap(sol, a, a + 1);
                swapped = true;
            }
        }
    }
} while (swapped);
return swapped;
}


public static boolean func_9e58753974094454b55f34382ec5a591(int[] sol, int[] prob) { 
 boolean swapped;
do {
    swapped = false;
    for (int a = 0; a < sol.length - 1; a++) {
        if (prob[a] == prob[a + 1]) {
            if (sol[a + 1] < sol[a]) {
                Die.swap(sol, a, a + 1);
                swapped = true;
            }
        }
    }
} while (swapped);
return swapped;
}


public static boolean func_a055705b14ed4829a12f6d515b3eb092(int[] sol, int[] prob, boolean swapped) { 
 swapped = false;
for (int a = 0; a < sol.length - 1; a++) {
    if (prob[a] == prob[a + 1]) {
        if (sol[a + 1] < sol[a]) {
            Die.swap(sol, a, a + 1);
            swapped = true;
        }
    }
}
return swapped;
}


*********************************

#### Score: 5.65339


#### Java Tokens: sol, prob, die, len, swap, length 

public static int[] func_e630787271cc4d9da4a7b3e51b8f9201(int[] prob, int[] len) { 
 int[] sol = new int[len.length];
for (int i = 0; i < sol.length; i++) {
    sol[i] = i;
}
for (int a = 0; a < sol.length; a++) for (int b = a + 1; b < sol.length; b++) {
    if (prob[b] > prob[a]) {
        Die.swap(len, a, b);
        Die.swap(prob, a, b);
        Die.swap(sol, a, b);
    } else if (prob[b] < prob[a]) {
        continue;
    } else {
        // probs same
        continue;
    }
}
return sol;
}


*********************************

#### Score: 5.36470


#### Java Tokens: sol, prob, die, len, swapped, swap, length 

public static boolean func_5723660b5575491d82014eb05ad8f348(int[] sol, int[] prob, int[] len) { 
 for (int i = 0; i < sol.length; i++) {
    sol[i] = i;
}
for (int a = 0; a < sol.length; a++) for (int b = a + 1; b < sol.length; b++) {
    if (prob[b] > prob[a]) {
        Die.swap(len, a, b);
        Die.swap(prob, a, b);
        Die.swap(sol, a, b);
    } else if (prob[b] < prob[a]) {
        continue;
    } else {
        // probs same
        continue;
    }
}
boolean swapped;
do {
    swapped = false;
    for (int a = 0; a < sol.length - 1; a++) {
        if (prob[a] == prob[a + 1]) {
            if (sol[a + 1] < sol[a]) {
                Die.swap(sol, a, a + 1);
                swapped = true;
            }
        }
    }
} while (swapped);
return swapped;
}


public static boolean func_25cac5fa8d0b42cabaf4eafcecbbff3f(int[] sol, int[] prob, int[] len) { 
 for (int a = 0; a < sol.length; a++) for (int b = a + 1; b < sol.length; b++) {
    if (prob[b] > prob[a]) {
        Die.swap(len, a, b);
        Die.swap(prob, a, b);
        Die.swap(sol, a, b);
    } else if (prob[b] < prob[a]) {
        continue;
    } else {
        // probs same
        continue;
    }
}
boolean swapped;
do {
    swapped = false;
    for (int a = 0; a < sol.length - 1; a++) {
        if (prob[a] == prob[a + 1]) {
            if (sol[a + 1] < sol[a]) {
                Die.swap(sol, a, a + 1);
                swapped = true;
            }
        }
    }
} while (swapped);
return swapped;
}


public static int[] func_0a829f024d4644baab477ed1e6bce3e6(int[] prob, int[] len) { 
 int[] sol = new int[len.length];
for (int i = 0; i < sol.length; i++) {
    sol[i] = i;
}
for (int a = 0; a < sol.length; a++) for (int b = a + 1; b < sol.length; b++) {
    if (prob[b] > prob[a]) {
        Die.swap(len, a, b);
        Die.swap(prob, a, b);
        Die.swap(sol, a, b);
    } else if (prob[b] < prob[a]) {
        continue;
    } else {
        // probs same
        continue;
    }
}
boolean swapped;
return sol;
}


*********************************

#### Score: 5.36470


#### Java Tokens: tostr, sol, prob, die, swapped, swap, length 

public static String func_e533a5d7d7c247e0af1918befad2129b(int[] sol, int[] prob) { 
 boolean swapped;
do {
    swapped = false;
    for (int a = 0; a < sol.length - 1; a++) {
        if (prob[a] == prob[a + 1]) {
            if (sol[a + 1] < sol[a]) {
                Die.swap(sol, a, a + 1);
                swapped = true;
            }
        }
    }
} while (swapped);
return Die.tostr(sol);

}


public static String func_92cd926a7c2a4fb1b979cdb034adce3d(int[] sol, int[] prob, boolean swapped) { 
 do {
    swapped = false;
    for (int a = 0; a < sol.length - 1; a++) {
        if (prob[a] == prob[a + 1]) {
            if (sol[a + 1] < sol[a]) {
                Die.swap(sol, a, a + 1);
                swapped = true;
            }
        }
    }
} while (swapped);
return Die.tostr(sol);

}


*********************************

#### Score: 5.10626


#### Java Tokens: tostr, sol, prob, die, len, swapped, swap, length 

public static String func_0c426f05922245c9b5eb525baca2316c(int[] prob, int[] len) { 
 int[] sol = new int[len.length];
for (int i = 0; i < sol.length; i++) {
    sol[i] = i;
}
for (int a = 0; a < sol.length; a++) for (int b = a + 1; b < sol.length; b++) {
    if (prob[b] > prob[a]) {
        Die.swap(len, a, b);
        Die.swap(prob, a, b);
        Die.swap(sol, a, b);
    } else if (prob[b] < prob[a]) {
        continue;
    } else {
        // probs same
        continue;
    }
}
boolean swapped;
do {
    swapped = false;
    for (int a = 0; a < sol.length - 1; a++) {
        if (prob[a] == prob[a + 1]) {
            if (sol[a + 1] < sol[a]) {
                Die.swap(sol, a, a + 1);
                swapped = true;
            }
        }
    }
} while (swapped);
return Die.tostr(sol);

}


public static String func_4d46484a5df840cb94609a8699eee7ce(int[] sol, int[] prob, int[] len) { 
 for (int a = 0; a < sol.length; a++) for (int b = a + 1; b < sol.length; b++) {
    if (prob[b] > prob[a]) {
        Die.swap(len, a, b);
        Die.swap(prob, a, b);
        Die.swap(sol, a, b);
    } else if (prob[b] < prob[a]) {
        continue;
    } else {
        // probs same
        continue;
    }
}
boolean swapped;
do {
    swapped = false;
    for (int a = 0; a < sol.length - 1; a++) {
        if (prob[a] == prob[a + 1]) {
            if (sol[a + 1] < sol[a]) {
                Die.swap(sol, a, a + 1);
                swapped = true;
            }
        }
    }
} while (swapped);
return Die.tostr(sol);

}


public static String func_9d0f9b8b80ea4e24b59949e4fab5c1f4(int[] sol, int[] prob, int[] len) { 
 for (int i = 0; i < sol.length; i++) {
    sol[i] = i;
}
for (int a = 0; a < sol.length; a++) for (int b = a + 1; b < sol.length; b++) {
    if (prob[b] > prob[a]) {
        Die.swap(len, a, b);
        Die.swap(prob, a, b);
        Die.swap(sol, a, b);
    } else if (prob[b] < prob[a]) {
        continue;
    } else {
        // probs same
        continue;
    }
}
boolean swapped;
do {
    swapped = false;
    for (int a = 0; a < sol.length - 1; a++) {
        if (prob[a] == prob[a + 1]) {
            if (sol[a + 1] < sol[a]) {
                Die.swap(sol, a, a + 1);
                swapped = true;
            }
        }
    }
} while (swapped);
return Die.tostr(sol);

}


*********************************

#### Score: 5.03022


#### Java Tokens: area, abs, math 

public static double func_954317d2367f4979971823aef45c075a(int g, double area) { 
 area = Math.abs(area) / g;
int p1 = 0, p2 = 0;
double cx = 0;
return area;
}


public static double func_5b21b449c5934696a2441b525090713a(int g, double area) { 
 area = Math.abs(area) / g;
int p1 = 0, p2 = 0;
double cx = 0;
return cx;
}


public static int func_ea79d704cd7144dba77acaeb7b38d841(int g, double area) { 
 area = Math.abs(area) / g;
int p1 = 0, p2 = 0;
return p1;
}


*********************************

#### Score: 5.03022


#### Java Tokens: ret, abs, math 

public static double func_fb9083d938b34e21aa82c7a064d0ddec(double ret) { 
 ret -= C.u[0].y * C.l[0].x;
return Math.abs(ret);

}


*********************************

#### Score: 4.59730


#### Java Tokens: first, second 

public static long func_05ae5d93a52d45ed8dde238d6245af06(int j, int i, long[] A) { 
 long first = A[j + 2];
long second = A[i + 1] - A[j + 2];
return first;
}


public static long func_24855a22c9de45fdb5ea51748056936d(int j, int i, long[] A) { 
 long first = A[j + 2];
long second = A[i + 1] - A[j + 2];
return second;
}


public static long func_ee5d4f9bc54c41e1afd1cd73fe7b9b9e(int j, int i, long[] A) { 
 long first = A[j + 1];
long second = A[i + 1] - A[j + 1];
return second;
}


### Py Tokens: count, ymin, xrange, total, len 

### Py functions

def func_a66bd9b62f6e4e2c965d687e7ae4f20d(count, x, y, ymin):
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    return i

def func_01cc3d97589244019c5a2f0a3c12d5b6(x, y, ymin):
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return count

def func_f72e98b88b5545de912e6b4e52000eeb(x, y, ymin):
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    return x

def func_65749ef7ece34ff38d17179fd2017410(x, y, ymin):
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return total

def func_465a5abadd1046468813e9d02595ab5b(count, x, y, ymin):
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return total

*********************************

#### Score: 6.25394


#### Java Tokens: area, upperpointcount, total, upper, count, totalarea, point, upperpoint 

public static double func_be5e7555a33b492782748a109b6df56c(int upperPointCount, double totalArea, Point[] upperPoint) { 
 for (int i = 1; i < upperPointCount; i++) totalArea -= (upperPoint[i].x - upperPoint[i - 1].x) * (upperPoint[i].y + upperPoint[i - 1].y);
return totalArea;
}


*********************************

#### Score: 6.25394


#### Java Tokens: area, lowerpoint, lowerpointcount, total, lower, count, totalarea, point 

public static double func_90ccba97830d482a91c72a17ef83cc86(int lowerPointCount, double totalArea, Point[] lowerPoint) { 
 for (int i = 1; i < lowerPointCount; i++) totalArea += (lowerPoint[i].x - lowerPoint[i - 1].x) * (lowerPoint[i].y + lowerPoint[i - 1].y);
return totalArea;
}


public static double func_418e579954e84b52b7a9f8a4b461b5b6(int lowerPointCount, Point[] lowerPoint) { 
 double totalArea = 0;
for (int i = 1; i < lowerPointCount; i++) totalArea += (lowerPoint[i].x - lowerPoint[i - 1].x) * (lowerPoint[i].y + lowerPoint[i - 1].y);
return totalArea;
}


*********************************

#### Score: 5.96409


#### Java Tokens: area, total, answer, part, guestcount, count, partarea, guest, totalarea 

public static double[] func_4b5e739d6ebd4aefa608c6ea94e92534(int guestCount, double totalArea) { 
 double partArea = totalArea / guestCount;
double[] answer = new double[guestCount - 1];
return answer;
}


public static double func_120eb7a0a40b40bb9568276e8a883237(int guestCount, double totalArea) { 
 double partArea = totalArea / guestCount;
double[] answer = new double[guestCount - 1];
return partArea;
}


*********************************

#### Score: 5.70174


#### Java Tokens: area, upperpointcount, total, abs, upper, count, math, totalarea, point, upperpoint 

public static double func_423ceeef5053432881093cc2e498a055(int upperPointCount, double totalArea, Point[] upperPoint) { 
 for (int i = 1; i < upperPointCount; i++) totalArea -= (upperPoint[i].x - upperPoint[i - 1].x) * (upperPoint[i].y + upperPoint[i - 1].y);
totalArea = Math.abs(totalArea) / 2;
return totalArea;
}


*********************************

#### Score: 5.38164


#### Java Tokens: qty, count 

public static int[] func_e3df435ec28049e9b0a6c9c8b493349d(int r, int count, int q, int s, long p) { 
 int[] qty = new int[count];
for (int i = 0; i < count; i++) qty[i] = (int) ((i * p + q) % r + s);
return qty;
}


*********************************

#### Score: 5.38164


#### Java Tokens: left, count 

public static long func_8373c4e26e3248279304458be5ea812c(int count, long left, long[] a) { 
 if (left == a[count - 1] - 1) {
    return -1;
} else {
    return left;
}

}


*********************************

#### Score: 5.24525


#### Java Tokens: area, upperpointcount, total, abs, upper, count, index, math, totalarea, upperindex, point, upperpoint 

public static int func_88e0a867a9b845e587ae8d65bc363e1a(int upperPointCount, double totalArea, Point[] upperPoint) { 
 for (int i = 1; i < upperPointCount; i++) totalArea -= (upperPoint[i].x - upperPoint[i - 1].x) * (upperPoint[i].y + upperPoint[i - 1].y);
totalArea = Math.abs(totalArea) / 2;
int upperIndex = 0;
return upperIndex;
}


public static double func_385ed8006afc43ef8755b960dca51760(int upperPointCount, double totalArea, Point[] upperPoint) { 
 for (int i = 1; i < upperPointCount; i++) totalArea -= (upperPoint[i].x - upperPoint[i - 1].x) * (upperPoint[i].y + upperPoint[i - 1].y);
totalArea = Math.abs(totalArea) / 2;
int upperIndex = 0;
return totalArea;
}


*********************************

#### Score: 5.24525


#### Java Tokens: area, total, answer, lower, part, guestcount, count, index, partarea, guest, totalarea, lowerindex 

public static double[] func_31ab8a8512384393bd833d4a0436d96b(int guestCount, double totalArea) { 
 int lowerIndex = 0;
double partArea = totalArea / guestCount;
double[] answer = new double[guestCount - 1];
return answer;
}


public static double func_ee273329ad25488181e3ae340a9b81e3(int guestCount, double totalArea) { 
 int lowerIndex = 0;
double partArea = totalArea / guestCount;
double[] answer = new double[guestCount - 1];
return partArea;
}


public static int func_c9a73d5484e8417b9161ae8646f140c3(int guestCount, double totalArea) { 
 int lowerIndex = 0;
double partArea = totalArea / guestCount;
double[] answer = new double[guestCount - 1];
return lowerIndex;
}


*********************************

#### Score: 5.03022


#### Java Tokens: bet, count, win 

public static double func_206cdd9fba284433a63b9fdfbc0b4787(int count, long bet, long[] a, double win) { 
 for (int i = 0; i < count; i++) {
    win -= (bet - a[i]);
    win += (1.0 / count) * 36 * (bet - a[i]);
}
return win;
}


public static double func_ea72070b61004ee483378b5a299fe08c(int count, long bet, long[] a) { 
 double win = 0;
for (int i = 0; i < count; i++) {
    win -= (bet - a[i]);
    win += (1.0 / count) * 36 * (bet - a[i]);
}
return win;
}


*********************************

#### Score: 5.03022


#### Java Tokens: suffixes, count, partial 

public static long[] func_9e6efcf1e7804e7fa38b7dc8996499a2(int count, long[] partial) { 
 long[] suffixes = new long[count + 1];
for (int i = 0; i <= count; i++) suffixes[i] = partial[count] - partial[count - i];
return suffixes;
}


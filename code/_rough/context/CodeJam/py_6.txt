### Py Tokens: map, range, split, readline, float, append, cur 

### Py functions

def func_30dc58d0171e424b88b7b7fce3061595(L, U, fi, l, u):
    S = 0
    for i in range(l):
        x, y = map(float, fi.readline().split())
        L.append((x, y))
        if i > 0:
            S -= (L[i][1] + L[i - 1][1]) * (L[i][0] - L[i - 1][0])
    for i in range(u):
        x, y = map(float, fi.readline().split())
        U.append((x, y))
        if i > 0:
            S += (U[i][1] + U[i - 1][1]) * (U[i][0] - U[i - 1][0])
    i, j = 0, 0
    cur = U[0][1] - L[0][1]
    x = 0
    return S

def func_f4868b29206e44f7a5c6990b40b089db(L, U, fi, l, u):
    S = 0
    for i in range(l):
        x, y = map(float, fi.readline().split())
        L.append((x, y))
        if i > 0:
            S -= (L[i][1] + L[i - 1][1]) * (L[i][0] - L[i - 1][0])
    for i in range(u):
        x, y = map(float, fi.readline().split())
        U.append((x, y))
        if i > 0:
            S += (U[i][1] + U[i - 1][1]) * (U[i][0] - U[i - 1][0])
    i, j = 0, 0
    cur = U[0][1] - L[0][1]
    return U

def func_55ecd31f692f4b43b5d28e5229a458c6(L, U, fi, l, u):
    S = 0
    for i in range(l):
        x, y = map(float, fi.readline().split())
        L.append((x, y))
        if i > 0:
            S -= (L[i][1] + L[i - 1][1]) * (L[i][0] - L[i - 1][0])
    for i in range(u):
        x, y = map(float, fi.readline().split())
        U.append((x, y))
        if i > 0:
            S += (U[i][1] + U[i - 1][1]) * (U[i][0] - U[i - 1][0])
    i, j = 0, 0
    cur = U[0][1] - L[0][1]
    return i

def func_36b7700b5351495dadca7dedd8527dac(L, U, fi, l, u):
    S = 0
    for i in range(l):
        x, y = map(float, fi.readline().split())
        L.append((x, y))
        if i > 0:
            S -= (L[i][1] + L[i - 1][1]) * (L[i][0] - L[i - 1][0])
    for i in range(u):
        x, y = map(float, fi.readline().split())
        U.append((x, y))
        if i > 0:
            S += (U[i][1] + U[i - 1][1]) * (U[i][0] - U[i - 1][0])
    i, j = 0, 0
    cur = U[0][1] - L[0][1]
    x = 0
    return S

def func_519eda61233149959fc85427f009f437(L, U, fi, l, u):
    S = 0
    for i in range(l):
        x, y = map(float, fi.readline().split())
        L.append((x, y))
        if i > 0:
            S -= (L[i][1] + L[i - 1][1]) * (L[i][0] - L[i - 1][0])
    for i in range(u):
        x, y = map(float, fi.readline().split())
        U.append((x, y))
        if i > 0:
            S += (U[i][1] + U[i - 1][1]) * (U[i][0] - U[i - 1][0])
    i, j = 0, 0
    cur = U[0][1] - L[0][1]
    return S

*********************************

#### Score: 4.71088


#### Java Tokens: cur 

public static boolean func_5dc0c124592a44ce8bf6e631375d7a80(int k, long x, long b, long cur, long[] a) { 
 for (int i = k; i < 35; i++) {
    if (a[i] <= x) {
        cur += x - a[i] + 1;
        if (cur > b)
            return false;
    }
}
if (a[35] <= x || a[36] <= x)
    return false;
return cur <= b;

}


public static boolean func_5cafe53b0dff4ce5b3c9b2ae49a5982d(long x, long b, long cur, long[] a) { 
 if (a[35] <= x || a[36] <= x)
    return false;
return cur <= b;

}


*********************************

#### Score: 4.44365


#### Java Tokens: split, string, trim, line 

public static double[] func_de3a96ea49a441999168791bd2f96e09(int n, String line) { 
 String[] ss = line.trim().split(" ");
double[] l = new double[n];
return l;
}


public static String[] func_b4974e8e9363455792fd54d845a37f4a(int n, String line) { 
 String[] ss = line.trim().split(" ");
double[] l = new double[n];
return ss;
}


*********************************

#### Score: 4.44365


#### Java Tokens: split, trim, \s+, line 

public static String[] func_25b90e8e1098474fac3336d0bce37fc5(String line) { 
 if (line == null)
    return null;
return line.trim().split("\\s+");

}


public static String[] func_1f59c1d4a9344a6b853d00f3689bb53e(String line) { 
 if (line == null)
    return null;
return line.trim().split("\\s+");

}


*********************************

#### Score: 4.38387


#### Java Tokens: cur, curs 

public static double func_6b35e29194da48e3b241f77e0615531c(double x0) { 
 double curS = 0;
double ts = 0;
double xf = 0;
x0 = 0;
return ts;
}


public static double func_6643d8d1c0f5473a90f9ede767186de7(int G, double S) { 
 S /= (double) G;
double curS = 0;
return S;
}


public static double func_1f2759524dba489d8a0f3dca43550756(int G, double S) { 
 S /= (double) G;
double curS = 0;
double ts = 0;
return ts;
}


*********************************

#### Score: 4.38387


#### Java Tokens: cur, used 

public static double func_869045cb96b14858a9393546c57decb8(int g, double hi, double cur, double used) { 
 cur = 0.0;
used = hi;
--g;
return used;
}


public static double func_6fc5c58cc80b4abebf4948055174c374(double hi, double cur, double used) { 
 cur = 0.0;
used = hi;
return used;
}


public static double func_aedd5bedf8974c219e559e6cd561ebd2(int g, double hi, double cur, double used) { 
 cur = 0.0;
used = hi;
--g;
return cur;
}


*********************************

#### Score: 4.38387


#### Java Tokens: add, cur 

public static double func_46eda45cac294a40b8d66b09657cc14a(int p, double add, double cur) { 
 cur += add;
++p;
return cur;
}


*********************************

#### Score: 4.38387


#### Java Tokens: cur, win 

public static long func_2de0eb2fbbde439ba4e75098a09bca08(int win, long l, long[] a) { 
 long cur = 0;
for (int i = 0; i < win; i++) {
    cur += l - a[i];
}
return cur;
}


*********************************

#### Score: 4.10333


#### Java Tokens: add, cur, used 

public static double func_14bbe78545a44b2c96e57c35562eb7b3(int p, double add, double cur, double used) { 
 cur += add;
++p;
used = 0.0;
return used;
}


public static double func_28bf9bd514c1431281be4b078cf5c5fa(int p, double add, double cur, double used) { 
 cur += add;
++p;
used = 0.0;
return cur;
}


*********************************

#### Score: 4.10333


#### Java Tokens: cur, sum, win 

public static long func_9f045647add0475289c93431fda366dc(int win, long cur, long l, long[] a) { 
 for (int i = 0; i < win; i++) {
    cur += l - a[i];
}
double sum = cur;
return cur;
}


public static double func_d00155bc5de14155afdb5f612a58af9e(int win, long l, long[] a) { 
 long cur = 0;
for (int i = 0; i < win; i++) {
    cur += l - a[i];
}
double sum = cur;
return sum;
}


public static double func_f3bd357637034e0db59a3cc7105928d0(int win, long cur, long l, long[] a) { 
 double sum = cur;
for (int i = win; i < 35; i++) {
    if (a[i] <= l) {
        cur += l - a[i] + 1;
    }
}
return sum;
}


*********************************

#### Score: 4.10333


#### Java Tokens: cur, sum, req 

public static int func_69624e4970c84dc5a86090b1b703b759(int g, double sum) { 
 double req = sum / g;
double cur = 0.0;
int p = 0;
return p;
}


public static double func_efdf9712f59949e7a9aa34d2a1a73ebe(int g, double sum) { 
 double req = sum / g;
double cur = 0.0;
int p = 0;
return cur;
}


public static double func_f63fa2c694d54a228cea145935406d4e(int g, double sum) { 
 double req = sum / g;
double cur = 0.0;
return req;
}


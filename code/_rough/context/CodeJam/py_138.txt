### Py Tokens: map, lower, upper, split, float, append, range, upp, readline, infile, eff, low 

### Py functions

def func_af9597de18bd4500b5a091e22cb65dba(L, U, i, infile):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Lower

def func_06be1f75d9a141acbb7db497ad5d31c5(L, U, i, infile):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upp

def func_84ecf6e83be845bdb311687994c93ba9(L, U, i, infile):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Eff

def func_5ba1c37bad7a4cf592215078d2f44a42(L, U, i, infile):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Low

def func_6a2f8a3afbfc4b9ca265df418f82ef2d(L, Low, U, i, infile):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Eff

*********************************

#### Score: 6.60564


#### Java Tokens: size, upper, lower 

public static int func_2f79491f19b54a30ad516ae05177d605(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
return l;
}


public static int func_2ddf71a890e64c73ad89d2f3eda1a899(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
return u;
}


public static ArrayList<Point> func_99683052cf9c428f93ad5d0e9a9385a3(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
return upper;
}


*********************************

#### Score: 6.54059


#### Java Tokens: area, len, low, upper 

public static double func_b5fde597de7944ecba1ad3edaf9525b5(int w, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
return area;
}


public static double func_cd3e869e391a46a8b0bc42288a030043(int w, int g, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return area;
}


public static double func_19bd7e074d0f4f9e90b2ec34ca11e5d0(int w, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return area;
}


*********************************

#### Score: 6.16080


#### Java Tokens: next, nextint, low, upper, int 

public static int func_f4307ef1eeb842d194887e902e93da5b(int w, int x0, int l, double[] low, Scanner in) { 
 int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
return y0;
}


public static int func_c7fec1eab031489199ff06c2078f3d29(int w, int x0, int l, double[] low, Scanner in) { 
 int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
return y0;
}


public static double[] func_b550f7afd14540a48d389c07448376ab(int w, int l, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
return low;
}


*********************************

#### Score: 6.08687


#### Java Tokens: curlow, cur, curl, lower, prev, upper, prevlow, point, low, lowx, get, prevup, curu 

public static int func_08b4d5d444284d22b44d2bf378e98ffe(int curU, int curL, ArrayList<Point> lower, ArrayList<Point> upper) { 
 Point curLow = lower.get(curL);
Point prevUp = upper.get(curU - 1);
Point prevLow = lower.get(curL - 1);
int lowX = curLow.x;
return lowX;
}


*********************************

#### Score: 6.08687


#### Java Tokens: cur, curlow, curl, prev, upper, lower, prevlow, point, low, lowx, get, prevup, curu 

public static int func_a0101918e30a483fa5eea6d518d4d558(int curU, int curL, ArrayList<Point> lower, ArrayList<Point> upper, Point curLow) { 
 Point prevUp = upper.get(curU - 1);
Point prevLow = lower.get(curL - 1);
int lowX = curLow.x;
return lowX;
}


*********************************

#### Score: 5.86148


#### Java Tokens: cur, curlow, curl, upper, lower, prev, prevlow, point, curup, low, lowx, get, prevup, curu 

public static int func_f012035a57954070a973d73467e8f050(int curU, int curL, ArrayList<Point> lower, ArrayList<Point> upper) { 
 Point curUp = upper.get(curU);
Point curLow = lower.get(curL);
Point prevUp = upper.get(curU - 1);
Point prevLow = lower.get(curL - 1);
int lowX = curLow.x;
return lowX;
}


*********************************

#### Score: 5.83797


#### Java Tokens: size, last, upper, lower, lastx 

public static double func_052c8eccdefb487eaf36cb72797024c2(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
double lastX = 0;
return lastX;
}


public static ArrayList<Point> func_841846f506c64d949c3eead004f6ca88(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
double lastX = 0;
return lower;
}


public static int func_31fb1b921e4b400993fcc498fe66b711(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
double lastX = 0;
return u;
}


*********************************

#### Score: 5.83797


#### Java Tokens: cur, curl, size, upper, lower 

public static int func_54f5d6c14dba4b419a3963f02647dd3f(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int curL = 1;
int u = upper.size();
int l = lower.size();
return curL;
}


public static ArrayList<Point> func_f442a76ee1cb450aba4ffc8dae930992(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int curL = 1;
int u = upper.size();
int l = lower.size();
return lower;
}


public static int func_b12c995c5bfd4652bc4eb29652457345(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int curL = 1;
int u = upper.size();
int l = lower.size();
return l;
}


*********************************

#### Score: 5.82548


#### Java Tokens: next, len, nextint, low, upper, int 

public static double[] func_8d4ff4455e5b47bba21b7f724ad41648(int w, int u, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
return len;
}


public static double[] func_64cbd14fc4ad4203be19962e29175378(int w, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
return upper;
}


public static int func_445d8d9ad976419fba84bbfd696c60d1(int w, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
return y0;
}


*********************************

#### Score: 5.82548


#### Java Tokens: next, nextint, len, low, upper, int 

public static double[] func_de89deb1e582437baa8fbcb2f223e38e(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
return low;
}


public static double[] func_2bdd283665a8459db596c8e6f08444a8(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
return upper;
}


public static int func_f9a45fc77db6480c8a76cfe722c4225e(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
return x0;
}


### Py Tokens: max, sum, rtot, ltot, tot, mtot, dev, range, best 

### Py functions

def func_e069e1b1097641a48e0f34158089f565(n, p, q, r, s):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))
    return i

def func_f65bd62447274bd7bfdf2e300b62d07d(n, p, q, r, s):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))
    return tot

def func_020983b66d584a19939de1a3b1c6ac06(n, p, q, r, s):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))
    return best

def func_d4260557e5994705ac2f252f1279b6f3(n, p, q, r, s):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))
    return dev

def func_6b77f6cf43674b48936a4f66fc251328(n, p, q, r, s):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))
    return ltot

*********************************

#### Score: 7.25405


#### Java Tokens: min, max, sum, best, math 

public static long func_2ce763c92ed940a597a196483683cf96(long x, long best, long sum, Long down) { 
 long now = Math.max(down, Math.max(x - down, sum - x));
best = Math.min(best, now);
return best;
}


public static long func_20b219fd65fb4abab993706fdfb74c0a(long x, long best, long sum, Long down) { 
 long now = Math.max(down, Math.max(x - down, sum - x));
best = Math.min(best, now);
return now;
}


public static long func_43d26346f2ae4f848c0c47dff88b36f4(long x, long best, long sum, Long up) { 
 long now = Math.max(up, Math.max(x - up, sum - x));
best = Math.min(best, now);
return now;
}


*********************************

#### Score: 6.85472


#### Java Tokens: add, min, max, sum, best, math 

public static long func_1c70a478aeb5427987ce86dfdf10e433(long x, long best, long sum, Long down, TreeSet<Long> all) { 
 if (down != null) {
    long now = Math.max(down, Math.max(x - down, sum - x));
    best = Math.min(best, now);
}
all.add(x);
return best;
}


*********************************

#### Score: 6.72166


#### Java Tokens: tot 

public static long func_e4076e79fb314efdb52fb83e97c0bc23(long tot) { 
 long L = 0;
long R = tot + 1;
return R;
}


public static long func_7c5acd2230664596b165cda6b2e4c23e(long tot) { 
 long L = 0;
long R = tot + 1;
return L;
}


*********************************

#### Score: 6.49957


#### Java Tokens: ceiling, min, max, sum, best, math, long 

public static long func_658d7c60c31143fda1ef42aec14a67da(int i, long x, long best, long sum, long[] a, TreeSet<Long> all) { 
 x += a[i];
Long up = all.ceiling(x / 2 + 1);
if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
return x;
}


public static Long func_df5d4a3663b54adcbd2a8dac3ce4d44f(int i, long x, long best, long sum, long[] a, TreeSet<Long> all) { 
 x += a[i];
Long up = all.ceiling(x / 2 + 1);
if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
return up;
}


public static Long func_02865e74f4fc46489ac6d5a9d2579baa(long x, long best, long sum, TreeSet<Long> all) { 
 Long up = all.ceiling(x / 2 + 1);
if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
return up;
}


*********************************

#### Score: 6.49957


#### Java Tokens: min, max, sum, best, math, floor, long 

public static long func_09c6ea16ac084147a40060ce4059926c(long x, long best, long sum, Long up, TreeSet<Long> all) { 
 if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
Long down = all.floor(x / 2);
if (down != null) {
    long now = Math.max(down, Math.max(x - down, sum - x));
    best = Math.min(best, now);
}
return best;
}


public static long func_a15c541b3fbd4a3c9d65dca1cfc67f1f(long x, long best, long sum, Long up, TreeSet<Long> all) { 
 if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
Long down = all.floor(x / 2);
return best;
}


public static long func_0fa949d0b1b94083b68aa87c6bb35dd3(long x, long best, long sum, TreeSet<Long> all) { 
 Long down = all.floor(x / 2);
if (down != null) {
    long now = Math.max(down, Math.max(x - down, sum - x));
    best = Math.min(best, now);
}
return best;
}


*********************************

#### Score: 6.49957


#### Java Tokens: prefixsum, max, prefix, sum, best, math, rsum 

public static long func_0017067ec6b94d2797dac5736964db18(int n, long prefixSum, long max, long best, long[] rsum) { 
 max = Math.max(max, prefixSum);
best = Math.max(best, rsum[n - 1] - max);
return best;
}


public static long func_ba606062e5fb4036a9d5a27782c3aa70(int n, long prefixSum, long max, long best, long[] rsum) { 
 max = Math.max(max, prefixSum);
best = Math.max(best, rsum[n - 1] - max);
return max;
}


*********************************

#### Score: 6.49957


#### Java Tokens: sub, min, max, subsum, sum, best, math 

public static long func_e52d990594594af9b1d1930546394c98(int n, long min, long subSum, long[] best, long[] A) { 
 subSum += A[n];
min = Math.min(min, Math.max(subSum, best[n - 1]));
return subSum;
}


public static long func_cce427e621084c11ace268c6cd84ceee(int n, long min, long subSum, long[] best, long[] A) { 
 subSum += A[n];
min = Math.min(min, Math.max(subSum, best[n - 1]));
return min;
}


*********************************

#### Score: 6.24090


#### Java Tokens: ans, tot 

public static int func_debbe6449fb243a5a706772959468e58(int i, long[] S) { 
 int hi = i;
int ans = -1;
long tot = S[i + 1] - S[0];
return hi;
}


public static int func_e4f689620e294f22a8a31c1121e3fdc4(int i, long[] S) { 
 int ans = -1;
long tot = S[i + 1] - S[0];
return ans;
}


public static int func_68798ab08c364168be9fdccbc8c858da(int i, long[] S) { 
 int hi = i;
int ans = -1;
long tot = S[i + 1] - S[0];
return ans;
}


*********************************

#### Score: 6.24090


#### Java Tokens: tot, cum 

public static long func_ad7458e49c41404faed36a25302fd505(long tot, long L, long[] cum) { 
 long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
return L;
}


public static long[] func_b5ed109ba1674a9dbe58e8f6b10c95d1(int N) { 
 long[] cum = new long[N];
long tot = 0;
return cum;
}


public static long func_dc02fe303d3a4c6fb54c44c3ec092235(long tot, long[] cum) { 
 long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
return R;
}


*********************************

#### Score: 6.18165


#### Java Tokens: ceiling, min, max, sum, best, math, floor, long 

public static long func_51647c95271e47c5af6f9d188f6366b6(int i, long x, long best, long sum, long[] a, TreeSet<Long> all) { 
 x += a[i];
Long up = all.ceiling(x / 2 + 1);
if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
Long down = all.floor(x / 2);
return x;
}


public static Long func_35430fbc5eb949dea025e26dd857a52a(long x, long best, long sum, TreeSet<Long> all) { 
 Long up = all.ceiling(x / 2 + 1);
if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
Long down = all.floor(x / 2);
if (down != null) {
    long now = Math.max(down, Math.max(x - down, sum - x));
    best = Math.min(best, now);
}
return up;
}


public static Long func_f4f63880e3c54e70a9fdb6b1b585b54a(int i, long x, long best, long sum, long[] a, TreeSet<Long> all) { 
 x += a[i];
Long up = all.ceiling(x / 2 + 1);
if (up != null) {
    long now = Math.max(up, Math.max(x - up, sum - x));
    best = Math.min(best, now);
}
Long down = all.floor(x / 2);
return up;
}


### Py Tokens: join, sorted, xrange, cmpfn, len, cmp 

### Py functions

def func_31448cf8fffb4933bbd284fde13581b3(i, x):
    x = sorted(x, cmp=cmp_fn)
    return ' '.join([('%d' % x[i][0]) for i in xrange(len(x))])

*********************************

#### Score: 4.53354


#### Java Tokens: len 

public static int func_dec8bf2897dd407aae2d9d4dcefc8168(int x, int i, int j, int[] p, int[] len) { 
 p[i] = p[j];
p[j] = x;
x = len[i];
len[i] = len[j];
return x;
}


public static double func_1113656b20bd42bab53d4cb0e522f050(int x0, int x1, double k, double x, double[] len) { 
 x0 = (int) x;
x1 = x0 + 1;
k = 1.0 * (len[x1] - len[x0]);
return k;
}


public static double func_f182457770b0449b9f91890db66a448c(int x0, double x, double[] len) { 
 int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
return y;
}


*********************************

#### Score: 4.22009


#### Java Tokens: len, remain 

public static double func_74867c6a4e8e4664a162f2eb7c17373d(int x0, double remain, double x, double[] len) { 
 x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
return x;
}


public static double func_18715806bb554c2eb4a17e5faaaf0bff(int x0, int x1, double remain, double x, double[] len) { 
 double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
return x;
}


public static double func_1ccda13042e8435393c51ca90ab3ac65(int x0, double remain, double x, double[] len) { 
 x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
return y;
}


*********************************

#### Score: 4.22009


#### Java Tokens: len, ind 

public static int func_137e44c558d64e1784f01157e9da2764(int x, int i, int j, int[] len, int[] ind) { 
 len[i] = len[j];
len[j] = x;
x = ind[i];
ind[i] = ind[j];
return x;
}


public static int[] func_0adeac4ac6994b34b5c593d80f520845(int n) { 
 int[] len = new int[n];
int[] p = new int[n];
int[] ind = new int[n];
return len;
}


public static int func_5acc9a5fe52b4c15a5473db596e7d3dd(int x, int i, int j, int[] len, int[] ind) { 
 len[j] = x;
x = ind[i];
ind[i] = ind[j];
return x;
}


*********************************

#### Score: 4.22009


#### Java Tokens: len, level 

public static int[] func_eb614dc8a07b43f39072578adc594718(int n) { 
 A.Level[] a = new A.Level[n];
int[] len = new int[n];
return len;
}


public static A.Level[] func_84b9a2cf7d564d84a70cef082339208f(int n) { 
 A.Level[] a = new A.Level[n];
int[] len = new int[n];
int[] p = new int[n];
return a;
}


public static A.Level[] func_813def49d5f846fabeff2709b80a9ead(int n) { 
 A.Level[] a = new A.Level[n];
int[] len = new int[n];
return a;
}


*********************************

#### Score: 4.22009


#### Java Tokens: len, oppa 

public static int func_59af42fa1f594ec9a4f759a6df99722a(int n, int be, int[] len, int[] p, boolean[] oppa) { 
 for (int j = 0; j < n; j++) {
    if (!oppa[j]) {
        if (be == -1 || len[j] * p[be] > len[be] * p[j]) {
            be = j;
        }
    }
}
oppa[be] = true;
return be;
}


public static int func_c4787490689d4cac85f6a1fb0ae340ec(int n, int[] len, int[] p, boolean[] oppa) { 
 int be = -1;
for (int j = 0; j < n; j++) {
    if (!oppa[j]) {
        if (be == -1 || len[j] * p[be] > len[be] * p[j]) {
            be = j;
        }
    }
}
oppa[be] = true;
return be;
}


public static int func_0c312084184e4053b7fa4a90592ba6a7(int n, int[] len, int[] p, boolean[] oppa) { 
 int be = -1;
for (int j = 0; j < n; j++) {
    if (!oppa[j]) {
        if (be == -1 || len[j] * p[be] > len[be] * p[j]) {
            be = j;
        }
    }
}
return be;
}


*********************************

#### Score: 4.22009


#### Java Tokens: len, low 

public static double[] func_9795954ed1194cee863f645da696bf29(int w) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
return len;
}


public static double[] func_fc4234d61fbe43bb9342ba8b9e2627f9(int w) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
return low;
}


*********************************

#### Score: 4.22009


#### Java Tokens: prob, len 

public static int[] func_dc92f5ec56524b378f51a330f159547e(int N) { 
 int[] len = new int[N];
int[] prob = new int[N];
return prob;
}


public static int[] func_f8834bc3384d400089303b153e2e3d60(int N) { 
 int[] len = new int[N];
int[] prob = new int[N];
return len;
}


*********************************

#### Score: 4.22009


#### Java Tokens: len, per 

public static int[] func_dddc251384df4464851909c7d7448ee6(int n) { 
 int[] len = new int[n];
int[] per = new int[n];
return per;
}


public static int[] func_81d9d4f3ba3f40eb8d9cb63f8b8ae8e0(int n) { 
 int[] len = new int[n];
int[] per = new int[n];
return len;
}


*********************************

#### Score: 4.22009


#### Java Tokens: area, len 

public static double func_0cca408bacb8461d9c71e56a7ce2a31a(int w, double[] len) { 
 double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return area;
}


public static double func_b9a757e01d78459e9902918ef38284f9(int w, int g, double[] len) { 
 double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return area;
}


public static double func_b99cd0dbdc854271bb5de21037cf33f2(int w, int g, double area, double[] len) { 
 for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return area;
}


*********************************

#### Score: 4.19640


#### Java Tokens: add, sortedset, sorted, set, tree, integer, treeset 

public static SortedSet<Integer> func_908a1fb2d6ea4b70bac7de1f0210bf2e(int l, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
return xs;
}


public static SortedSet<Integer> func_33d30156f21a452c9e7e9783fd47a69d(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
return xs;
}


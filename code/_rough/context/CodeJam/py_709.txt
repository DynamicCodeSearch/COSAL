### Py Tokens: hasbound3split, split, seq, float, bound 

### Py functions

def func_32d234fec04a41bea573e3c0dac6185a(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    return seq

def func_73359f1cbe884ad5a5240a0459bdbb1c(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    hs, sm, mx = has_bound_3_split(seq, U)
    return seq

def func_c3fc104d779245c4abd55e4aee009866(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    return seq

def func_9051907b1f814d0081acf4943ef3b6f5(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    return seq

def func_83c3ca4b33554d50aca47f4018003743(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    hs, sm, mx = has_bound_3_split(seq, U)
    return float(sm - mx) / sm

*********************************

#### Score: 7.74930


#### Java Tokens: bound 

public static double func_8dab68333b7642ada842c2cbbf10372d(int p, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
return b;
}


public static double func_2638bc8043dd46149b6456d01f416da1(int p, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
return a;
}


*********************************

#### Score: 7.18996


#### Java Tokens: pos, bound 

public static int func_e56fbf72e0224d66b77b40ae8b9f585b(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return py;
}


public static int func_6b9bb5b3b1cd4a60ac5a15167a40b0c6(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
return px;
}


public static int func_97cddfce9b7c452f8695797bae1d62e3(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return px;
}


*********************************

#### Score: 7.18996


#### Java Tokens: bound, sum 

public static double func_0549b3b7e9264fa5aad2ec5b09896643(int w, double[] bound) { 
 double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
return sum;
}


public static double func_76c782109326442d8ab3334faf8688b0(int w, double sum, double[] bound) { 
 for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
return sum;
}


*********************************

#### Score: 6.71008


#### Java Tokens: div, pos, bound 

public static int func_58a39ec2b5e24e1a82950afef3b71c8a(int l, int px, int[][] pos, double[] bound) { 
 int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
return py;
}


public static int func_9d99c61bf0e24d2885926eadad002202(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
px = nx;
return ny;
}


public static int func_4959f32046524c3ab41634b4b7ef81a1(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
return nx;
}


*********************************

#### Score: 6.71008


#### Java Tokens: bound, sum, req 

public static double func_cb6075579afd41538cec7f7bef0d66a3(int g, int w, double sum, double[] bound) { 
 for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return req;
}


public static double func_1670fe700cc84ba39c57aa7bad72557f(int g, int w, double sum, double[] bound) { 
 for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return sum;
}


public static double func_7895eaba6f0d4d8c98b5a3c4480cdb8f(int g, int w, double[] bound) { 
 double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return sum;
}


*********************************

#### Score: 6.71008


#### Java Tokens: add, bound, used 

public static double func_fffe3097af3c4f1e94ccd0b6d1b78713(int p, double used, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
double add = ((b - a) * used + a + b) * (1.0 - used) / 2.0;
return b;
}


public static double func_8db2a9fc3fd747279b10557bf8f32d40(int p, double a, double used, double[] bound) { 
 double b = bound[p + 1];
double add = ((b - a) * used + a + b) * (1.0 - used) / 2.0;
return add;
}


public static double func_8e7143913b8f43feb0afa92b5eb26c6e(int p, double used, double[] bound) { 
 double a = bound[p];
double b = bound[p + 1];
double add = ((b - a) * used + a + b) * (1.0 - used) / 2.0;
return add;
}


*********************************

#### Score: 6.29386


#### Java Tokens: div, pos, bound, sum 

public static double func_9ffcac09b8d246b1943f1079f85e2943(int l, int u, int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
return sum;
}


public static int func_c47deec42fa641b0a9ac165df24572a2(int l, int px, int u, int[][] pos, double[] bound) { 
 int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
return py;
}


public static int func_c059c044146447588c62fd70a227843c(int l, int u, int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
return px;
}


*********************************

#### Score: 6.29386


#### Java Tokens: cur, bound, sum, req 

public static int func_2b59aef10a314794b2ec07b10370004e(int g, int w, double[] bound) { 
 double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
double cur = 0.0;
int p = 0;
return p;
}


public static int func_948a6592050b4599b63f069ae3fa5a81(int g, int w, double sum, double[] bound) { 
 for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
double cur = 0.0;
int p = 0;
return p;
}


public static double func_8f0b790409424170abb06310b7a43da9(int g, int w, double[] bound) { 
 double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
double cur = 0.0;
int p = 0;
return cur;
}


*********************************

#### Score: 5.92941


#### Java Tokens: cur, bound, sum, used, req 

public static double func_edf1d55aac094286a60c846ccfb61474(int g, int w, double sum, double[] bound) { 
 for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
double cur = 0.0;
int p = 0;
double used = 0.0;
return used;
}


public static double func_b06cc8c2e7a1445ea8f79553fa392498(int g, int w, double[] bound) { 
 double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
double cur = 0.0;
int p = 0;
double used = 0.0;
return req;
}


public static int func_f836832a9a5c4cfb9d86f292ace80bf1(int g, int w, double[] bound) { 
 double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
double cur = 0.0;
int p = 0;
double used = 0.0;
return p;
}


*********************************

#### Score: 5.92941


#### Java Tokens: div, pos, bound, sum, req 

public static int func_ff71298ea8b84c648bd9e0ffd9667472(int l, int g, int u, int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return py;
}


public static double func_07bb6f347aca4dbcbb8da2ee63f72342(int l, int g, int u, int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return req;
}


public static double func_390c6c85f04f4d8cbebc585a632356a0(int l, int g, int u, int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
px = pos[l][0];
py = pos[l][1];
for (int i = l + 1; i < l + u; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == l + 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] += (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
double sum = 0.0;
for (int i = 0; i < w; ++i) {
    sum += (bound[i] + bound[i + 1]) / 2.0;
}
double req = sum / g;
return sum;
}


### Py Tokens: range, currans, curr, ans, max 

### Py functions

def func_8cf6ad9ee2914cae9e2f41b33f924358(b, n, x):
    ans = 0.0
    for s in range(1, 37):
        currAns = go(b, n, x, s)
        ans = max(ans, currAns)
    return ans

def func_3688c8eab34247c4ad3e6bd0bd60d323(ans, b, n, x):
    for s in range(1, 37):
        currAns = go(b, n, x, s)
        ans = max(ans, currAns)
    return ans

def func_cf79291a047f46cfa9ecc7da6956d70a(b, n, x):
    ans = 0.0
    for s in range(1, 37):
        currAns = go(b, n, x, s)
        ans = max(ans, currAns)
    return ans

*********************************

#### Score: 8.27157


#### Java Tokens: curr 

public static long func_0cf2faf52443483f90bb88d4f60bd561(int p, int q, long curr) { 
 curr *= p;
curr += q;
return curr;
}


public static long func_80211c7fc7fd4540b3376e14b350b270(int r, int s, int p, int q, long curr) { 
 curr *= p;
curr += q;
curr %= r;
curr += s;
return curr;
}


public static long func_7de8e347c7154acebb2ed1b3a65adc43(int p, int i) { 
 long curr = i - 1;
curr *= p;
return curr;
}


*********************************

#### Score: 7.67229


#### Java Tokens: num, curr 

public static long func_1c9b9e3a53af42e39b4691f257711f1c(int r, int s, int p, int q, int i) { 
 long curr = i - 1;
curr *= p;
curr += q;
curr %= r;
curr += s;
A.num[i] = A.num[i - 1] + curr;
return curr;
}


public static long func_716fd788f9904244883dd549292d7b36(int r, int s, int q, int i, long curr) { 
 curr += q;
curr %= r;
curr += s;
A.num[i] = A.num[i - 1] + curr;
return curr;
}


public static long func_e83f2982036047ab99484b146edc9e05(int s, int i, long curr) { 
 curr += s;
A.num[i] = A.num[i - 1] + curr;
return curr;
}


*********************************

#### Score: 7.15815


#### Java Tokens: ret, num, curr 

public static double func_ed0342d9dcaa41db8cf5848110c2edbe(int r, int s, int n, int p, int q) { 
 A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
return ret;
}


public static double func_290667c5b85043b3b31969160f57e09e(int r, int s, int n, int p, int q) { 
 for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
return ret;
}


*********************************

#### Score: 6.32175


#### Java Tokens: read, num, readint, curr, int 

public static int func_a38da650384b465f981e6e3ba7642af9(int n, int p, int q) { 
 int r = A.readInt();
int s = A.readInt();
A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
return s;
}


public static int func_d72904c772324541bfac452ed03dfda4(int n, int p, int q) { 
 int r = A.readInt();
int s = A.readInt();
A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
return r;
}


public static int func_a93ec87f121f44748112b58cdda513c0(int n, int p) { 
 int q = A.readInt();
int r = A.readInt();
int s = A.readInt();
A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
return r;
}


*********************************

#### Score: 6.09166


#### Java Tokens: ret, leftcount, min, rightcount, max, left, num, count, right, math, curr 

public static double func_26b560d4f2704fe7bf34be07ecfb55e6(int r, int s, int n, int p, int q) { 
 A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
for (int i = 0; i < n; i++) {
    int min = i;
    int max = n - 1;
    while (max - min > 3) {
        int left = (2 * min + max) / 3;
        int right = (2 * max + min) / 3;
        long leftCount = A.count(i, left);
        long rightCount = A.count(i, right);
        if (leftCount < rightCount) {
            max = right;
        } else {
            min = left;
        }
    }
    for (int j = min; j <= max; j++) {
        ret = Math.max(ret, 1 - A.count(i, j) * 1.0 / A.num[n]);
    }
}
return ret;
}


public static double func_441fc02c599a4a209cb57382ba247064(int r, int s, int n, int p, int q) { 
 for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
for (int i = 0; i < n; i++) {
    int min = i;
    int max = n - 1;
    while (max - min > 3) {
        int left = (2 * min + max) / 3;
        int right = (2 * max + min) / 3;
        long leftCount = A.count(i, left);
        long rightCount = A.count(i, right);
        if (leftCount < rightCount) {
            max = right;
        } else {
            min = left;
        }
    }
    for (int j = min; j <= max; j++) {
        ret = Math.max(ret, 1 - A.count(i, j) * 1.0 / A.num[n]);
    }
}
return ret;
}


*********************************

#### Score: 6.00700


#### Java Tokens: max, ans, math 

public static int func_746ef42c56d84d7f888634c43c7477a7(int j, int i, int n, int[] ps, double ans) { 
 int s1 = ps[i];
int s2 = ps[j] - ps[i];
int s3 = ps[n] - ps[j];
int max = Math.max(s1, Math.max(s2, s3));
ans = Math.max(ans, 1.0 * (ps[n] - max) / ps[n]);
return s1;
}


public static int func_b71842c0d8c04c14855e762db4728c13(long sr, long sm) { 
 long ans = Math.max(sm, sr);
int l = 0;
return l;
}


public static double func_713c867160b04492b3547e594d92c0d1(int s, int n, int q, int r, int p) { 
 int[] a = new int[n];
for (int i = 0; i < n; i++) {
    a[i] = (i * p + q) % r + s;
}
int[] ps = new int[n + 1];
for (int i = 1; i <= n; i++) {
    ps[i] = ps[i - 1] + a[i - 1];
}
double ans = 0;
for (int i = 0; i < n; i++) {
    for (int j = i + 1; j <= n; j++) {
        int s1 = ps[i];
        int s2 = ps[j] - ps[i];
        int s3 = ps[n] - ps[j];
        int max = Math.max(s1, Math.max(s2, s3));
        ans = Math.max(ans, 1.0 * (ps[n] - max) / ps[n]);
    }
}
return ans;
}


*********************************

#### Score: 5.97701


#### Java Tokens: ret, read, num, readint, curr, int 

public static int func_26d5f29985a74bb3b333016145e8ae79(int n, int p) { 
 int q = A.readInt();
int r = A.readInt();
int s = A.readInt();
A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
return s;
}


public static int func_ce61295f60064d8a995180fa8514fd44(int n, int p) { 
 int q = A.readInt();
int r = A.readInt();
int s = A.readInt();
A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
return r;
}


public static int func_bfaf472dcf0c46dd9dee01c2646d889f(int n, int p, int q) { 
 int r = A.readInt();
int s = A.readInt();
A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
return s;
}


*********************************

#### Score: 5.84652


#### Java Tokens: ret, leftcount, println, min, rightcount, max, left, num, count, right, math, curr 

public static double func_d27db92ccae34182a2bfbbc1b241bafe(int r, int s, int n, int p, int q) { 
 A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
for (int i = 0; i < n; i++) {
    int min = i;
    int max = n - 1;
    while (max - min > 3) {
        int left = (2 * min + max) / 3;
        int right = (2 * max + min) / 3;
        long leftCount = A.count(i, left);
        long rightCount = A.count(i, right);
        if (leftCount < rightCount) {
            max = right;
        } else {
            min = left;
        }
    }
    for (int j = min; j <= max; j++) {
        ret = Math.max(ret, 1 - A.count(i, j) * 1.0 / A.num[n]);
    }
}
A.pw.println(ret);
return ret;
}


public static double func_c6a080b186fa4081983d9d939871c33a(int r, int s, int n, int p, int q) { 
 for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
for (int i = 0; i < n; i++) {
    int min = i;
    int max = n - 1;
    while (max - min > 3) {
        int left = (2 * min + max) / 3;
        int right = (2 * max + min) / 3;
        long leftCount = A.count(i, left);
        long rightCount = A.count(i, right);
        if (leftCount < rightCount) {
            max = right;
        } else {
            min = left;
        }
    }
    for (int j = min; j <= max; j++) {
        ret = Math.max(ret, 1 - A.count(i, j) * 1.0 / A.num[n]);
    }
}
A.pw.println(ret);
return ret;
}


*********************************

#### Score: 5.63741


#### Java Tokens: max, ans, sum, math 

public static long func_65c7102b82d645fa9e0c8269aacf7830(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
return sum;
}


public static long func_9aa7155d934f46c3af0e2c5b9c19a04c(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return ans;
}


public static long func_5d136f36cafa4e3683a603b6a16cb250(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return sum;
}


*********************************

#### Score: 5.41489


#### Java Tokens: ret, leftcount, read, max, num, count, right, int, min, rightcount, left, math, readint, curr 

public static double func_a4b6b603508e480eb1b328c49d2a4942(int r, int n, int p, int q) { 
 int s = A.readInt();
A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
for (int i = 0; i < n; i++) {
    int min = i;
    int max = n - 1;
    while (max - min > 3) {
        int left = (2 * min + max) / 3;
        int right = (2 * max + min) / 3;
        long leftCount = A.count(i, left);
        long rightCount = A.count(i, right);
        if (leftCount < rightCount) {
            max = right;
        } else {
            min = left;
        }
    }
    for (int j = min; j <= max; j++) {
        ret = Math.max(ret, 1 - A.count(i, j) * 1.0 / A.num[n]);
    }
}
return ret;
}


public static int func_f8ce60158f234cbb9321d5ccf9368ff6(int n, int p, int q) { 
 int r = A.readInt();
int s = A.readInt();
A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
for (int i = 0; i < n; i++) {
    int min = i;
    int max = n - 1;
    while (max - min > 3) {
        int left = (2 * min + max) / 3;
        int right = (2 * max + min) / 3;
        long leftCount = A.count(i, left);
        long rightCount = A.count(i, right);
        if (leftCount < rightCount) {
            max = right;
        } else {
            min = left;
        }
    }
    for (int j = min; j <= max; j++) {
        ret = Math.max(ret, 1 - A.count(i, j) * 1.0 / A.num[n]);
    }
}
return r;
}


public static int func_c002f8f0512c40e1a9519d33c9715820(int n, int p, int q) { 
 int r = A.readInt();
int s = A.readInt();
A.num = new long[n + 1];
for (int i = 1; i <= n; i++) {
    long curr = i - 1;
    curr *= p;
    curr += q;
    curr %= r;
    curr += s;
    A.num[i] = A.num[i - 1] + curr;
}
double ret = 0;
for (int i = 0; i < n; i++) {
    int min = i;
    int max = n - 1;
    while (max - min > 3) {
        int left = (2 * min + max) / 3;
        int right = (2 * max + min) / 3;
        long leftCount = A.count(i, left);
        long rightCount = A.count(i, right);
        if (leftCount < rightCount) {
            max = right;
        } else {
            min = left;
        }
    }
    for (int j = min; j <= max; j++) {
        ret = Math.max(ret, 1 - A.count(i, j) * 1.0 / A.num[n]);
    }
}
return s;
}


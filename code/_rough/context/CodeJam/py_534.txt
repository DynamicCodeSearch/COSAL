### Py Tokens: tmp, index, xrange, res, min 

### Py functions

def func_b423ed21f71044f69cfab2c25614fd96(a, b):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    res = 0.0
    k = 0
    for i in xrange(37):
        if a[i] == m:
            res += 36.0 * b[i]
            k += 1
    return i

def func_15929b74a3324a2e80252c84102fd83a(a, b):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    res = 0.0
    k = 0
    for i in xrange(37):
        if a[i] == m:
            res += 36.0 * b[i]
            k += 1
    return k

def func_21dad6a5c86c4838a5056d184394f855(a, b):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    res = 0.0
    k = 0
    for i in xrange(37):
        if a[i] == m:
            res += 36.0 * b[i]
            k += 1
    return a

def func_693a33961bab4fe1ba23d91170c673dc(a, b):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    res = 0.0
    k = 0
    for i in xrange(37):
        if a[i] == m:
            res += 36.0 * b[i]
            k += 1
    return m

def func_4a1ae59a6b0f42e9b5c1c8d074f2683b(a, b):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    res = 0.0
    k = 0
    for i in xrange(37):
        if a[i] == m:
            res += 36.0 * b[i]
            k += 1
    return b

*********************************

#### Score: 9.87473


#### Java Tokens: res, tmp, cnt 

public static int func_35d0095832c8447d9ead34d8336c480b(int[] x) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
return cnt;
}


public static double func_da4ba4a3c7b54a6680a1b5173206f64b(int[] x) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
return res;
}


public static double func_0ba6e385415646319ffdfb2f46c9b915(int cnt, int[] x) { 
 for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
return res;
}


*********************************

#### Score: 8.21637


#### Java Tokens: res, max, tmp, cnt, length, math 

public static double func_a204f7df34bf45f6955308bf316d912c(int p, int[] x, int[] xx) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
for (int i = 0; i < x.length; ++i) if (x[i] == x[0])
    res += Math.max((x[i] - xx[i]) * 36.0 / cnt, 0.0);
return Math.max(res - p, 0);

}


public static int func_06f74862d68841b8babbd4f13ed05ad5(int[] x, int[] xx) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
for (int i = 0; i < x.length; ++i) if (x[i] == x[0])
    res += Math.max((x[i] - xx[i]) * 36.0 / cnt, 0.0);
return cnt;
}


public static double func_f47e19cec4094934a9ffd7849e212d90(int cnt, int[] x, int[] xx) { 
 for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
for (int i = 0; i < x.length; ++i) if (x[i] == x[0])
    res += Math.max((x[i] - xx[i]) * 36.0 / cnt, 0.0);
return res;
}


*********************************

#### Score: 7.43062


#### Java Tokens: arr, res, temp, avg, index, first, second 

public static int func_75f88847e15a42acb1dd7b3323f9a653(int N, long avg, long[] arr) { 
 int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
while (temp < avg && index < N) {
    temp += arr[index];
    second = index;
    ++index;
}
double res = 0;
return second;
}


public static int func_947643ad8ab040e984b648412994d8b1(int first, int N, int second, long avg, long[] arr) { 
 long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
while (temp < avg && index < N) {
    temp += arr[index];
    second = index;
    ++index;
}
double res = 0;
return second;
}


public static int func_739858a767af4c42a5ac7109efe55879(int first, int N, long avg, long[] arr) { 
 int second = N - 1;
long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
while (temp < avg && index < N) {
    temp += arr[index];
    second = index;
    ++index;
}
double res = 0;
return index;
}


*********************************

#### Score: 7.36529


#### Java Tokens: arr, res, temp, avg, min, max, left, index, sum, math, first, second 

public static int func_f6343e96e2764197b612232ebf613213(int N, long sum, long avg, long[] arr, long[] dp) { 
 int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
while (temp < avg && index < N) {
    temp += arr[index];
    second = index;
    ++index;
}
double res = 0;
for (int i = Math.max(0, first - 100); i < Math.min(N, first + 100); ++i) {
    for (int j = Math.max(0, second - 100); j < Math.min(N, second + 100); ++j) {
        if (j <= i) {
            continue;
        }
        long a = dp[i + 1];
        long b = dp[j] - dp[i + 1];
        long c = dp[N] - dp[j];
        long left = sum - Math.max(a, Math.max(b, c));
        res = Math.max(res, 1.0 * left / sum);
    }
}
return second;
}


public static double func_781fef97280b4b39837a4a7d5284f1e9(int N, long p, long r, long s, long q) { 
 long[] arr = new long[N];
long[] dp = new long[N + 1];
long sum = 0;
for (int i = 0; i < N; ++i) {
    arr[i] = ((i * p + q) % r) + s;
    sum += arr[i];
    dp[i + 1] = dp[i] + arr[i];
}
long avg = sum / 3;
int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
while (temp < avg && index < N) {
    temp += arr[index];
    second = index;
    ++index;
}
double res = 0;
for (int i = Math.max(0, first - 100); i < Math.min(N, first + 100); ++i) {
    for (int j = Math.max(0, second - 100); j < Math.min(N, second + 100); ++j) {
        if (j <= i) {
            continue;
        }
        long a = dp[i + 1];
        long b = dp[j] - dp[i + 1];
        long c = dp[N] - dp[j];
        long left = sum - Math.max(a, Math.max(b, c));
        res = Math.max(res, 1.0 * left / sum);
    }
}
return res;
}


public static long func_39ba99a787b540348e921f22556d3b6a(int N, long p, long r, long s, long q) { 
 long[] arr = new long[N];
long[] dp = new long[N + 1];
long sum = 0;
for (int i = 0; i < N; ++i) {
    arr[i] = ((i * p + q) % r) + s;
    sum += arr[i];
    dp[i + 1] = dp[i] + arr[i];
}
long avg = sum / 3;
int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
while (temp < avg && index < N) {
    temp += arr[index];
    second = index;
    ++index;
}
double res = 0;
for (int i = Math.max(0, first - 100); i < Math.min(N, first + 100); ++i) {
    for (int j = Math.max(0, second - 100); j < Math.min(N, second + 100); ++j) {
        if (j <= i) {
            continue;
        }
        long a = dp[i + 1];
        long b = dp[j] - dp[i + 1];
        long c = dp[N] - dp[j];
        long left = sum - Math.max(a, Math.max(b, c));
        res = Math.max(res, 1.0 * left / sum);
    }
}
return avg;
}


*********************************

#### Score: 7.06390


#### Java Tokens: arr, res, temp, avg, index, sum, first, second 

public static long func_12c330d42be84d6fbbf8216b8f4d9e5a(int N, long p, long r, long s, long q) { 
 long[] arr = new long[N];
long[] dp = new long[N + 1];
long sum = 0;
for (int i = 0; i < N; ++i) {
    arr[i] = ((i * p + q) % r) + s;
    sum += arr[i];
    dp[i + 1] = dp[i] + arr[i];
}
long avg = sum / 3;
int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
while (temp < avg && index < N) {
    temp += arr[index];
    second = index;
    ++index;
}
double res = 0;
return avg;
}


public static int func_10184c6fde4d49ea81b0cf7699b6901f(int N, long p, long r, long s, long q) { 
 long[] arr = new long[N];
long[] dp = new long[N + 1];
long sum = 0;
for (int i = 0; i < N; ++i) {
    arr[i] = ((i * p + q) % r) + s;
    sum += arr[i];
    dp[i + 1] = dp[i] + arr[i];
}
long avg = sum / 3;
int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
while (temp < avg && index < N) {
    temp += arr[index];
    second = index;
    ++index;
}
double res = 0;
return first;
}


public static long[] func_961e1ecfaaa24e00995603e2682eb21e(int N, long p, long r, long s, long q) { 
 long[] arr = new long[N];
long[] dp = new long[N + 1];
long sum = 0;
for (int i = 0; i < N; ++i) {
    arr[i] = ((i * p + q) % r) + s;
    sum += arr[i];
    dp[i + 1] = dp[i] + arr[i];
}
long avg = sum / 3;
int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
while (temp < avg && index < N) {
    temp += arr[index];
    second = index;
    ++index;
}
double res = 0;
return arr;
}


*********************************

#### Score: 6.86476


#### Java Tokens: min, max, index, sum, math 

public static long func_0c68d71997e7428e9d7904a53e3aac09(int n, int[] a) { 
 // sout(a);
long[] sum = new long[n + 1];
sum[0] = 0;
for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + a[i];
long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
return x;
}


public static long[] func_81099636a926473db32921cd0455d201(int n, int[] a) { 
 // sout(a);
long[] sum = new long[n + 1];
sum[0] = 0;
for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + a[i];
long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
return sum;
}


public static long func_96063614cbca4ad4be52c5a55f8a5c37(int i, int index, int n, long x, long[] sum) { 
 x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
return x;
}


*********************************

#### Score: 6.48822


#### Java Tokens: abs, min, max, index, sum, math 

public static long func_0cbc15f5157848e6a6553949ccdd7616(int z, int n, int index, long min) { 
 while (z < n - 1 && Math.abs(A.sum(z, index) - A.sum(index + 1, n - 1)) > Math.abs(A.sum(z, index + 1) - A.sum(index + 2, n - 1))) {
    index++;
}
min = Math.min(min, Math.max(A.sum(0, z - 1), Math.max(A.sum(z, index), A.sum(index + 1, n - 1))));
return min;
}


*********************************

#### Score: 6.40591


#### Java Tokens: res, min, getmin, get 

public static long func_3221ae4b5d6d44f7883ba36bbda6a379(long[] x) { 
 double res = 0;
long min = A.getMin(x);
return min;
}


public static double func_8bc503b96e684cc3aaa040104b2e2d35(long[] x) { 
 double res = 0;
long min = A.getMin(x);
return res;
}


*********************************

#### Score: 6.40591


#### Java Tokens: res, min, cnt, length 

public static int func_9875c1e1803d4c9794b0ae78e5648b39(int w, long min, long[] x, long[] bets, double res) { 
 int cnt = 0;
for (int i = 0; i < x.length; i++) if (x[i] == min)
    cnt++;
for (int i = 0; i < x.length; i++) if (x[i] == min) {
    res += 1.0 / cnt * bets[i] * w;
}
return cnt;
}


public static double func_3264a2bff1834793909d0e026092c5ae(int w, long min, long[] x, long[] bets, double res) { 
 int cnt = 0;
for (int i = 0; i < x.length; i++) if (x[i] == min)
    cnt++;
for (int i = 0; i < x.length; i++) if (x[i] == min) {
    res += 1.0 / cnt * bets[i] * w;
}
return res;
}


*********************************

#### Score: 6.27140


#### Java Tokens: tmp, sum 

public static long func_023f48b0402f4be6a677630698a21dbb(int n, int x, int y, long sum, long[] a) { 
 long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return tmp;
}


public static long func_7372dc9491c04019a025a05a04771836(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return sum;
}


public static int func_cdaf79ae1b7042f992fd7274207fe3cc(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
return y;
}


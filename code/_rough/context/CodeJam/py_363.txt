### Py Tokens: heappop, tmp, heapq, heappush, min 

### Py functions

def func_00b4133ca2364b5a85d1ff07575be6bc(l, res, x, z):
    x = heapq.heappop(l)
    x = x[0] + 1, x[1] + 1
    heapq.heappush(l, x)
    s = 10 ** 20
    t = 0
    u = 0
    for x in l:
        s = min(s, x[0])
    for x in l:
        if s == x[0]:
            t += 1
            u += x[1]
    tmp = 36.0 * u / t - z
    return t

def func_cf4f24a32bda4d758ef7b02da5fd543c(l, res, x, z):
    x = heapq.heappop(l)
    x = x[0] + 1, x[1] + 1
    heapq.heappush(l, x)
    s = 10 ** 20
    t = 0
    u = 0
    for x in l:
        s = min(s, x[0])
    for x in l:
        if s == x[0]:
            t += 1
            u += x[1]
    tmp = 36.0 * u / t - z
    return s

def func_45c3926f9f55419e8c60dd8410e4ab6d(l, res, x, z):
    x = heapq.heappop(l)
    x = x[0] + 1, x[1] + 1
    heapq.heappush(l, x)
    s = 10 ** 20
    t = 0
    u = 0
    for x in l:
        s = min(s, x[0])
    for x in l:
        if s == x[0]:
            t += 1
            u += x[1]
    tmp = 36.0 * u / t - z
    return s

def func_21ac850c1fdf4d40852a414ddb7e709f(l, res, x, z):
    x = heapq.heappop(l)
    x = x[0] + 1, x[1] + 1
    heapq.heappush(l, x)
    s = 10 ** 20
    t = 0
    u = 0
    for x in l:
        s = min(s, x[0])
    for x in l:
        if s == x[0]:
            t += 1
            u += x[1]
    tmp = 36.0 * u / t - z
    return l

def func_ac75e9d646b74d75b0780b3bcb0e5809(l, res, x, z):
    x = heapq.heappop(l)
    x = x[0] + 1, x[1] + 1
    heapq.heappush(l, x)
    s = 10 ** 20
    t = 0
    u = 0
    for x in l:
        s = min(s, x[0])
    for x in l:
        if s == x[0]:
            t += 1
            u += x[1]
    tmp = 36.0 * u / t - z
    return l

*********************************

#### Score: 6.27140


#### Java Tokens: tmp, sum 

public static long func_023f48b0402f4be6a677630698a21dbb(int n, int x, int y, long sum, long[] a) { 
 long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return tmp;
}


public static long func_7372dc9491c04019a025a05a04771836(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return sum;
}


public static int func_cdaf79ae1b7042f992fd7274207fe3cc(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
return y;
}


*********************************

#### Score: 6.27140


#### Java Tokens: tmp, tmpb 

public static long func_776f4161d66f4a1db55fb2bca34c351b(int i, int c, long tmpB, long[] a) { 
 tmpB -= a[c - 1] - a[i];
a[i] = a[c - 1];
return tmpB;
}


public static long func_5ca57b0b323f4943be0d379c77fb0e4c(int c, long B, long[] a) { 
 long tmpB = B;
for (int i = 0; i < c; i++) {
    tmpB -= a[c - 1] - a[i];
    a[i] = a[c - 1];
}
return tmpB;
}


*********************************

#### Score: 6.27140


#### Java Tokens: tmp, cnt 

public static int func_cd4276872215413db0dbc3f66e17128b(int[] x) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
return cnt;
}


*********************************

#### Score: 5.85677


#### Java Tokens: tmp, ans, sum 

public static int func_ff08b18e83f74f0488b0c31f904e19e5(int n, long sum, long[] a) { 
 int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
double ans = 0;
return x;
}


public static int func_ec29c5e7324e45c9b7bbcfa5dc32c050(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
double ans = 0;
return x;
}


public static double func_c75cc9b0bb244c6ba7bd32958fde4411(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
double ans = 0;
return ans;
}


*********************************

#### Score: 5.85677


#### Java Tokens: res, tmp, cnt 

public static int func_35d0095832c8447d9ead34d8336c480b(int[] x) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
return cnt;
}


public static double func_da4ba4a3c7b54a6680a1b5173206f64b(int[] x) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
return res;
}


public static double func_0ba6e385415646319ffdfb2f46c9b915(int cnt, int[] x) { 
 for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
return res;
}


*********************************

#### Score: 5.85677


#### Java Tokens: tmp, tmpb, tmpb-- 

public static long func_aeb4059e82c94e9d8fd92c59ece91fc3(int c, long B, long[] a) { 
 long tmpB = B;
for (int i = 0; i < c; i++) {
    tmpB -= a[c - 1] - a[i];
    a[i] = a[c - 1];
}
for (int i = c; i < A.C; i++) {
    if (a[i] == a[0]) {
        a[i]++;
        tmpB--;
    }
}
return tmpB;
}


public static long func_d7d18d01dcf845a7af3d0651267a3f86(int c, long tmpB, long[] a) { 
 for (int i = 0; i < c; i++) {
    tmpB -= a[c - 1] - a[i];
    a[i] = a[c - 1];
}
for (int i = c; i < A.C; i++) {
    if (a[i] == a[0]) {
        a[i]++;
        tmpB--;
    }
}
return tmpB;
}


*********************************

#### Score: 5.85677


#### Java Tokens: add, tmp, tmpb 

public static long func_65bd192077454c8095ae55d8e2954662(int i, long tmpB, long add, long[] a) { 
 a[i] += add;
tmpB -= add;
return tmpB;
}


*********************************

#### Score: 5.49715


#### Java Tokens: tmp, parselong, parse, long 

public static long func_a6a3c71c7673423a8d59138c85fc1b51(String[] tmp) { 
 long B = Long.parseLong(tmp[0]);
long N = Long.parseLong(tmp[1]);
return B;
}


public static long func_1fcea5022ca24a6eb0fca8eb9e7192c8(String[] tmp) { 
 long B = Long.parseLong(tmp[0]);
long N = Long.parseLong(tmp[1]);
return N;
}


*********************************

#### Score: 5.49715


#### Java Tokens: left, tmp, clone, tmpb 

public static long[] func_53e1ed8075e44831a598829a935304aa(int c, long B, long[] left) { 
 long[] a = left.clone();
long tmpB = B;
for (int i = 0; i < c; i++) {
    tmpB -= a[c - 1] - a[i];
    a[i] = a[c - 1];
}
return a;
}


public static long func_b6382dcea0d5412abb91d9f70d3ef75c(int c, long B, long[] left) { 
 long[] a = left.clone();
long tmpB = B;
for (int i = 0; i < c; i++) {
    tmpB -= a[c - 1] - a[i];
    a[i] = a[c - 1];
}
return tmpB;
}


public static long func_d4f1631762ac4258991058d16c34efaf(long B, long[] left) { 
 long[] a = left.clone();
long tmpB = B;
return tmpB;
}


*********************************

#### Score: 5.18225


#### Java Tokens: next, nextint, tmp, sum, int 

public static int func_1feee362c3dc433089f190c1203378bd(Scanner sc) { 
 int n = sc.nextInt();
int p = sc.nextInt();
int q = sc.nextInt();
int r = sc.nextInt();
int s = sc.nextInt();
long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return q;
}


public static int func_51ff495e6edf4a4483d5feec6a127a81(int n, int p, int q, Scanner sc) { 
 int r = sc.nextInt();
int s = sc.nextInt();
long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return s;
}


public static int func_e905f03df0d3440ea5d1e58bdb5bd8ef(Scanner sc) { 
 int n = sc.nextInt();
int p = sc.nextInt();
int q = sc.nextInt();
int r = sc.nextInt();
int s = sc.nextInt();
long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
return s;
}


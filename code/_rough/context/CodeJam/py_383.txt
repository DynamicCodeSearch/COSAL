### Py Tokens: sort, range, ans, max, cal, len 

### Py functions

def func_57b0c6adc26242d78eff6e57501acf82(B, ns):
    ns.sort()
    ans = 0.0
    for i in range(len(ns)):
        ans = max(ans, cal(ns, i, B))
    return i

def func_3b5f975679a34298867ff7ed10f46a75(B, ns):
    ns += [10 ** 100]
    ns.sort()
    ans = 0.0
    for i in range(len(ns)):
        ans = max(ans, cal(ns, i, B))
    return ns

def func_ebbc58f72257495fa1444337c6077d0e(B, ns):
    ns += [10 ** 100]
    ns.sort()
    ans = 0.0
    for i in range(len(ns)):
        ans = max(ans, cal(ns, i, B))
    return i

def func_013a17dc85c9478bb8101d47a7bb7cb0(B, ns):
    ns.sort()
    ans = 0.0
    for i in range(len(ns)):
        ans = max(ans, cal(ns, i, B))
    return ans

def func_2192dcf5fc7f479ea5649d1484565f40(B, ns):
    while len(ns) < 37:
        ns += [0]
    ns += [10 ** 100]
    ns.sort()
    ans = 0.0
    for i in range(len(ns)):
        ans = max(ans, cal(ns, i, B))
    return i

*********************************

#### Score: 7.22048


#### Java Tokens: ans, arrays, sort 

public static double func_81f8d0da16484a1fa0a9fecd785eaeaa(long[] V) { 
 Arrays.sort(V);
// p(V);
double ans = 0.0;
return ans;
}


public static double func_579a7b54603146dc80ae5bb710fb2d68(long[] a) { 
 Arrays.sort(a);
double ans = 0;
return ans;
}


public static double func_eaa0a1b051bb4757b99b09e3be0ec5a1(long[] a) { 
 Arrays.sort(a);
double ans = 0;
return ans;
}


*********************************

#### Score: 6.40169


#### Java Tokens: money, left, need, max, ans, arrays, sort, right, math, prof 

public static double func_334782fec40c425aa170dfacff764a66(int m, long money, long[] a) { 
 Arrays.sort(a);
double ans = 0;
for (int i = 1; i <= m; i++) {
    long now = a[i - 1];
    long eq = 0;
    for (int j = 0; j < i; j++) {
        eq += now - a[j];
    }
    int same = 0;
    for (int j = i; j < m; j++) {
        if (a[j] == now) {
            same++;
        }
    }
    if (eq + same > money) {
        break;
    }
    long left = 0;
    long right = money + 1;
    while (left + 1 < right) {
        long up = (left + right) / 2;
        long need = eq + i * up;
        for (int j = i; j < m; j++) {
            need += Math.max((now + up + 1) - a[j], 0);
            if (need > money) {
                break;
            }
        }
        if (need > money) {
            right = up;
        } else {
            left = up;
        }
    }
    long up = left;
    double prof = -eq - up * i;
    for (int j = i; j < m; j++) {
        prof -= Math.max((now + up + 1) - a[j], 0);
    }
    for (int j = 0; j < i; j++) {
        prof += (now + up - a[j]) * 36.0 / i;
    }
    ans = Math.max(ans, prof);
}
return ans;
}


*********************************

#### Score: 6.13140


#### Java Tokens: bcur, res, max, double, ans, cnt, arrays, sort, math, floor, isnan 

public static double func_4e88286f9ac54947a39a3fb20d3fcf5f(long b, long[] a) { 
 Arrays.sort(a);
double ans = 0;
for (long floor = 1; floor < a[36]; ++floor) {
    double res = 0;
    int cnt = 0;
    long bcur = 0;
    for (int i = 0; i < 37; ++i) {
        if (a[i] > floor) {
            break;
        } else {
            cnt++;
        }
    }
    if (cnt == 0) {
        continue;
    }
    for (int i = 0; i < cnt; ++i) {
        bcur += floor - a[i];
        res += (floor - a[i]) * 36.0;
    }
    res /= (double) cnt;
    if (bcur > b) {
        break;
    }
    ans = Math.max(ans, res - bcur);
    for (int i = cnt - 1; i > 0 && bcur < b; --i) {
        bcur++;
        res = (res * (i + 1) - (floor - a[i]) * 36) / (double) i;
        if (Double.isNaN(res)) {
            break;
        }
        ans = Math.max(ans, res - bcur);
    }
}
return ans;
}


*********************************

#### Score: 6.02838


#### Java Tokens: next, ans, arrays, sort, nextlong, long 

public static double func_b9956c9250a646ec96fc8f650abce5fd(int N, long[] V, Scanner in) { 
 for (int i = 0; i < N; i++) V[i] = in.nextLong();
Arrays.sort(V);
// p(V);
double ans = 0.0;
return ans;
}


public static double func_b84c02dfec7e4f839a8a06ee2ba4a9d8(int N, Scanner in) { 
 long[] V = new long[37];
for (int i = 0; i < N; i++) V[i] = in.nextLong();
Arrays.sort(V);
// p(V);
double ans = 0.0;
return ans;
}


public static long[] func_d492b9e1aaee4c8db2533ce8ae72ba01(int N, Scanner in) { 
 long[] V = new long[37];
for (int i = 0; i < N; i++) V[i] = in.nextLong();
Arrays.sort(V);
// p(V);
double ans = 0.0;
return V;
}


*********************************

#### Score: 6.00700


#### Java Tokens: max, ans, math 

public static int func_746ef42c56d84d7f888634c43c7477a7(int j, int i, int n, int[] ps, double ans) { 
 int s1 = ps[i];
int s2 = ps[j] - ps[i];
int s3 = ps[n] - ps[j];
int max = Math.max(s1, Math.max(s2, s3));
ans = Math.max(ans, 1.0 * (ps[n] - max) / ps[n]);
return s1;
}


public static int func_b71842c0d8c04c14855e762db4728c13(long sr, long sm) { 
 long ans = Math.max(sm, sr);
int l = 0;
return l;
}


public static double func_713c867160b04492b3547e594d92c0d1(int s, int n, int q, int r, int p) { 
 int[] a = new int[n];
for (int i = 0; i < n; i++) {
    a[i] = (i * p + q) % r + s;
}
int[] ps = new int[n + 1];
for (int i = 1; i <= n; i++) {
    ps[i] = ps[i - 1] + a[i - 1];
}
double ans = 0;
for (int i = 0; i < n; i++) {
    for (int j = i + 1; j <= n; j++) {
        int s1 = ps[i];
        int s2 = ps[j] - ps[i];
        int s3 = ps[n] - ps[j];
        int max = Math.max(s1, Math.max(s2, s3));
        ans = Math.max(ans, 1.0 * (ps[n] - max) / ps[n]);
    }
}
return ans;
}


*********************************

#### Score: 5.94461


#### Java Tokens: max, arrays, sort 

public static long func_23be0ac773d9440e8d3d56392ce58eec(long[] a) { 
 Arrays.sort(a);
double max = 0;
long s = 0;
return s;
}


public static double func_97c89b015cd34dd78c227e38028e81d6(long[] a) { 
 Arrays.sort(a);
double max = 0;
return max;
}


public static double func_b9d12e05b77142138c65cc0f1a010f37(long[] v) { 
 Arrays.sort(v);
double max = 0.0;
return max;
}


*********************************

#### Score: 5.88454


#### Java Tokens: println, system, money, left, need, max, ans, arrays, sort, right, math, prof 

public static double func_7536eea71da1462b8dabcd446ecfaf45(int m, long money, long[] a) { 
 Arrays.sort(a);
double ans = 0;
for (int i = 1; i <= m; i++) {
    long now = a[i - 1];
    long eq = 0;
    for (int j = 0; j < i; j++) {
        eq += now - a[j];
    }
    int same = 0;
    for (int j = i; j < m; j++) {
        if (a[j] == now) {
            same++;
        }
    }
    if (eq + same > money) {
        break;
    }
    long left = 0;
    long right = money + 1;
    while (left + 1 < right) {
        long up = (left + right) / 2;
        long need = eq + i * up;
        for (int j = i; j < m; j++) {
            need += Math.max((now + up + 1) - a[j], 0);
            if (need > money) {
                break;
            }
        }
        if (need > money) {
            right = up;
        } else {
            left = up;
        }
    }
    long up = left;
    double prof = -eq - up * i;
    for (int j = i; j < m; j++) {
        prof -= Math.max((now + up + 1) - a[j], 0);
    }
    for (int j = 0; j < i; j++) {
        prof += (now + up - a[j]) * 36.0 / i;
    }
    ans = Math.max(ans, prof);
}
System.out.println(ans);
A.out.println(ans);
return ans;
}


public static double func_66a835f036704ffbb2032b11bb168df3(int m, long money, long[] a) { 
 Arrays.sort(a);
double ans = 0;
for (int i = 1; i <= m; i++) {
    long now = a[i - 1];
    long eq = 0;
    for (int j = 0; j < i; j++) {
        eq += now - a[j];
    }
    int same = 0;
    for (int j = i; j < m; j++) {
        if (a[j] == now) {
            same++;
        }
    }
    if (eq + same > money) {
        break;
    }
    long left = 0;
    long right = money + 1;
    while (left + 1 < right) {
        long up = (left + right) / 2;
        long need = eq + i * up;
        for (int j = i; j < m; j++) {
            need += Math.max((now + up + 1) - a[j], 0);
            if (need > money) {
                break;
            }
        }
        if (need > money) {
            right = up;
        } else {
            left = up;
        }
    }
    long up = left;
    double prof = -eq - up * i;
    for (int j = i; j < m; j++) {
        prof -= Math.max((now + up + 1) - a[j], 0);
    }
    for (int j = 0; j < i; j++) {
        prof += (now + up - a[j]) * 36.0 / i;
    }
    ans = Math.max(ans, prof);
}
System.out.println(ans);
return ans;
}


*********************************

#### Score: 5.71894


#### Java Tokens: next, ans, arrays, sort, bets, nextlong, long 

public static double func_084c57aed5cc49359978194b61997bac(int bets, int m) { 
 long[] a = new long[m];
for (int i = 0; i < bets; i++) {
    a[i] = A.in.nextLong();
}
Arrays.sort(a);
double ans = 0;
return ans;
}


public static long[] func_5dfbfc7b23fa4d45a38585dceeef4fbd(int bets, int m) { 
 long[] a = new long[m];
for (int i = 0; i < bets; i++) {
    a[i] = A.in.nextLong();
}
Arrays.sort(a);
double ans = 0;
return a;
}


public static int func_68f5d706cc5a44fcaf64921f501bd705(int bets) { 
 int m = 37;
long[] a = new long[m];
for (int i = 0; i < bets; i++) {
    a[i] = A.in.nextLong();
}
Arrays.sort(a);
double ans = 0;
return m;
}


*********************************

#### Score: 5.63741


#### Java Tokens: max, ans, sum, math 

public static long func_65c7102b82d645fa9e0c8269aacf7830(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
return sum;
}


public static long func_9aa7155d934f46c3af0e2c5b9c19a04c(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return ans;
}


public static long func_5d136f36cafa4e3683a603b6a16cb250(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return sum;
}


*********************************

#### Score: 5.57916


#### Java Tokens: max, length, arrays, sort 

public static long func_2831d9202b83428d891e1d5697249472(long b, long[] a) { 
 Arrays.sort(a);
double max = 0;
long s = 0;
for (int n = 0; n < a.length; n++) {
    s += a[n];
    double s2 = 0;
    for (int l = 0; l <= n; l++) {
        s2 += a[l];
        long x = (b - (n - l) + s) / (n + 1);
        if (x >= a[l] && (l + 1 >= a.length || x + 1 >= a[n]) && (n + 1 >= a.length || x < a[n + 1])) {
            if (max < 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l)) {
                max = 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l);
            }
        }
    }
}
return s;
}


public static double func_f2576f5c9a3945c0a7a540ddd41d6fa7(long b, long[] a) { 
 Arrays.sort(a);
double max = 0;
long s = 0;
for (int n = 0; n < a.length; n++) {
    s += a[n];
    double s2 = 0;
    for (int l = 0; l <= n; l++) {
        s2 += a[l];
        long x = (b - (n - l) + s) / (n + 1);
        if (x >= a[l] && (l + 1 >= a.length || x + 1 >= a[n]) && (n + 1 >= a.length || x < a[n + 1])) {
            if (max < 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l)) {
                max = 36 * (x - s2 / (l + 1)) - (n + 1) * x + s - (n - l);
            }
        }
    }
}
return max;
}


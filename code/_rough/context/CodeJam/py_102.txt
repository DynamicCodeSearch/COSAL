### Py Tokens: segmentremaining, needed, segment, remaining, size 

### Py functions

def func_55b0ac3457894afe8cdfd6d67ba66080(needed, segment_remaining, size):
    segment_remaining -= needed
    needed = size
    return segment_remaining

def func_eefbe4e0cf234747af0c41dd5ea5412a(needed, segment_remaining, size):
    segment_remaining -= needed
    needed = size
    return segment_remaining

def func_6e94d451d0a645dc93b481d6e90297c7(needed, segment_remaining, size):
    segment_remaining -= needed
    needed = size
    return segment_remaining

def func_8bd6458f055f41d0a330e2c70e459619(needed, segment_remaining, size):
    segment_remaining -= needed
    needed = size
    return segment_remaining

*********************************

#### Score: 9.63555


#### Java Tokens: lowerpoint, area, remainingarea, segment, lower, part, partarea, lowersegment, point, remaining 

public static double func_6f37fabca3e84df8a96a12ba15f629a9(double partArea, Point[] lowerPoint) { 
 Segment lowerSegment = new Segment(lowerPoint[0], lowerPoint[1]);
double remainingArea = partArea;
return remainingArea;
}


*********************************

#### Score: 8.48912


#### Java Tokens: lowerpoint, area, upper, lower, part, point, remaining, upperpoint, remainingarea, segment, partarea, uppersegment, lowersegment 

public static double func_8db9a2efbeca4ec0add84bd29560c67a(double partArea, Point[] lowerPoint, Point[] upperPoint) { 
 Segment upperSegment = new Segment(upperPoint[0], upperPoint[1]);
Segment lowerSegment = new Segment(lowerPoint[0], lowerPoint[1]);
double remainingArea = partArea;
return remainingArea;
}


*********************************

#### Score: 6.54102


#### Java Tokens: left, upper, segment, uppersegment, right 

public static double func_17d984b22fd84ad6aa7c4b1a3d30121c(double x, Segment upperSegment) { 
 double left = upperSegment.a.x;
double right = x;
return right;
}


public static double func_d6d9f293ad234798a21900f66e05eaca(double x, Segment upperSegment) { 
 double left = upperSegment.a.x;
double right = x;
return left;
}


*********************************

#### Score: 5.44951


#### Java Tokens: size, get 

public static double func_3c6d0439a9d349bf8dce68498c13088c(double y0, double x0, ArrayList<Double> lx, ArrayList<Double> ly) { 
 x0 = lx.get(lx.size() - 1);
y0 = ly.get(ly.size() - 1);
return x0;
}


public static double func_32bf37ddf5f6425e8146a67957a52e64(double y0, double x0, ArrayList<Double> lx, ArrayList<Double> ly) { 
 x0 = lx.get(lx.size() - 1);
y0 = ly.get(ly.size() - 1);
return y0;
}


*********************************

#### Score: 5.32442


#### Java Tokens: upperintersection, intersect, line, upper, intersection, segment, vertical, uppersegment, point 

public static Line func_28fd117d39ad4990815ffd5d71e08e26(double x, Segment upperSegment) { 
 Line vertical = new Point(x, 0).line(new Point(x, 1));
Point upperIntersection = upperSegment.line().intersect(vertical);
return vertical;
}


public static Point func_c34bd7932df5480899b4330e83681096(double x, Segment upperSegment) { 
 Line vertical = new Point(x, 0).line(new Point(x, 1));
Point upperIntersection = upperSegment.line().intersect(vertical);
return upperIntersection;
}


*********************************

#### Score: 5.20377


#### Java Tokens: mos.search, suffixes, binarysearch, binary, count, arrays, partial, remaining, first

public static int func_49cb6fa11c814b0291566417c29b376b(int count, long first, long[] partial, long[] suffixes) { 
 long remaining = partial[count] - first;
int at = Arrays.binarySearch(suffixes, remaining >> 1);
return at;
}


public static long func_0f4843ea97c64b42b3d5435da62b42c0(int count, long first, long[] partial, long[] suffixes) { 
 long remaining = partial[count] - first;
int at = Arrays.binarySearch(suffixes, remaining >> 1);
return remaining;
}


*********************************

#### Score: 5.09326


#### Java Tokens: size, upper, lower 

public static int func_2f79491f19b54a30ad516ae05177d605(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
return l;
}


public static int func_2ddf71a890e64c73ad89d2f3eda1a899(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
return u;
}


public static ArrayList<Point> func_99683052cf9c428f93ad5d0e9a9385a3(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
return upper;
}


*********************************

#### Score: 5.09326


#### Java Tokens: add, size, get 

public static double func_d3522cbaf76c40a5a697a2315a88a7bc(double y0, double x0, ArrayList<Double> lx, ArrayList<Double> ly) { 
 ly.add(-2000.0);
x0 = lx.get(lx.size() - 1);
y0 = ly.get(ly.size() - 1);
return y0;
}


public static ArrayList<Double> func_d2ef2876f33c4daf9f06cd282fef4451(double X, double x0, ArrayList<Double> lx, ArrayList<Double> ly) { 
 lx.add(X);
ly.add(-2000.0);
x0 = lx.get(lx.size() - 1);
return ly;
}


public static ArrayList<Double> func_b37347f18a5a499d8c2bf16eb19b19d0(double X, double y0, double x0, ArrayList<Double> lx, ArrayList<Double> ly) { 
 lx.add(X);
ly.add(-2000.0);
x0 = lx.get(lx.size() - 1);
y0 = ly.get(ly.size() - 1);
return lx;
}


*********************************

#### Score: 5.09326


#### Java Tokens: total, size, get 

public static double func_b5265e189bb742dd9f2cbd92548659a0(double y0, double total, double x0, ArrayList<Double> lx, ArrayList<Double> ly) { 
 y0 = ly.get(ly.size() - 1);
for (int i = 0; i < lx.size(); ++i) {
    double xx = lx.get(i);
    double yy = ly.get(i);
    total += (x0 + xx) * (y0 - yy);
    x0 = xx;
    y0 = yy;
}
return y0;
}


public static double func_5584c16bc9e941fdb0b73a0eb26d2e83(double y0, double total, double x0, ArrayList<Double> lx, ArrayList<Double> ly) { 
 for (int i = 0; i < lx.size(); ++i) {
    double xx = lx.get(i);
    double yy = ly.get(i);
    total += (x0 + xx) * (y0 - yy);
    x0 = xx;
    y0 = yy;
}
return total;
}


public static double func_5874e4cdb70748988cb3c7b858f4cde0(double y0, double total, double x0, ArrayList<Double> lx, ArrayList<Double> ly) { 
 x0 = lx.get(lx.size() - 1);
y0 = ly.get(ly.size() - 1);
for (int i = 0; i < lx.size(); ++i) {
    double xx = lx.get(i);
    double yy = ly.get(i);
    total += (x0 + xx) * (y0 - yy);
    x0 = xx;
    y0 = yy;
}
return x0;
}


*********************************

#### Score: 5.09326


#### Java Tokens: size, integer, order 

public static Integer[] func_d8b7a1c730ad4bb689b3056903a289b0(int size) { 
 Integer[] order = new Integer[size];
for (int i = 0; i < size; i++) order[i] = i;
return order;
}


### Py Tokens: count, ymin, xrange, min, res, total, len 

### Py functions

def func_764d41cd903545a1aae67b4ac24953ab(b, x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    res = total * 36.0 / count - b
    return res

def func_acb582f2bd7e489a90261f652f45a206(b, x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    res = total * 36.0 / count - b
    return count

def func_71a2450df479459ab33ad3a61132f605(b, x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    res = total * 36.0 / count - b
    return ymin

def func_a8a580f519ba497292bdfae89f0f8677(b, x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    res = total * 36.0 / count - b
    return total

def func_d0dc7cc566cc4dbcaa7519a588a3f5b7(b, x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    res = total * 36.0 / count - b
    return res

*********************************

#### Score: 6.40591


#### Java Tokens: res, min, getmin, get 

public static long func_3221ae4b5d6d44f7883ba36bbda6a379(long[] x) { 
 double res = 0;
long min = A.getMin(x);
return min;
}


public static double func_8bc503b96e684cc3aaa040104b2e2d35(long[] x) { 
 double res = 0;
long min = A.getMin(x);
return res;
}


*********************************

#### Score: 6.40591


#### Java Tokens: res, min, cnt, length 

public static int func_9875c1e1803d4c9794b0ae78e5648b39(int w, long min, long[] x, long[] bets, double res) { 
 int cnt = 0;
for (int i = 0; i < x.length; i++) if (x[i] == min)
    cnt++;
for (int i = 0; i < x.length; i++) if (x[i] == min) {
    res += 1.0 / cnt * bets[i] * w;
}
return cnt;
}


public static double func_3264a2bff1834793909d0e026092c5ae(int w, long min, long[] x, long[] bets, double res) { 
 int cnt = 0;
for (int i = 0; i < x.length; i++) if (x[i] == min)
    cnt++;
for (int i = 0; i < x.length; i++) if (x[i] == min) {
    res += 1.0 / cnt * bets[i] * w;
}
return res;
}


*********************************

#### Score: 6.25394


#### Java Tokens: area, upperpointcount, total, upper, count, totalarea, point, upperpoint 

public static double func_be5e7555a33b492782748a109b6df56c(int upperPointCount, double totalArea, Point[] upperPoint) { 
 for (int i = 1; i < upperPointCount; i++) totalArea -= (upperPoint[i].x - upperPoint[i - 1].x) * (upperPoint[i].y + upperPoint[i - 1].y);
return totalArea;
}


*********************************

#### Score: 6.25394


#### Java Tokens: area, lowerpoint, lowerpointcount, total, lower, count, totalarea, point 

public static double func_90ccba97830d482a91c72a17ef83cc86(int lowerPointCount, double totalArea, Point[] lowerPoint) { 
 for (int i = 1; i < lowerPointCount; i++) totalArea += (lowerPoint[i].x - lowerPoint[i - 1].x) * (lowerPoint[i].y + lowerPoint[i - 1].y);
return totalArea;
}


public static double func_418e579954e84b52b7a9f8a4b461b5b6(int lowerPointCount, Point[] lowerPoint) { 
 double totalArea = 0;
for (int i = 1; i < lowerPointCount; i++) totalArea += (lowerPoint[i].x - lowerPoint[i - 1].x) * (lowerPoint[i].y + lowerPoint[i - 1].y);
return totalArea;
}


*********************************

#### Score: 6.18295


#### Java Tokens: leftcount, min, max, left, count, right 

public static long func_4314bd12473d4d378ec0241c32a86aa0(int i, int left, int max, int min) { 
 int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
return leftCount;
}


public static int func_1868896cd94d4e33910e57d3a7e0231b(int i, int left, int max, int min) { 
 int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
return right;
}


*********************************

#### Score: 6.18295


#### Java Tokens: leftcount, min, left, max, count, right 

public static long func_721ee9104d894bb198bf48abdb9c2936(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
return leftCount;
}


public static int func_1a051775fe4c4f6da8e486c9a1f9de92(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
return left;
}


public static int func_3842023784024eab962b977c7af4c371(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
return right;
}


*********************************

#### Score: 6.03449


#### Java Tokens: res, min, getmin, get, cnt 

public static long func_a70bb75a4a0b4039bb129560d41737e9(long[] x) { 
 double res = 0;
long min = A.getMin(x);
int cnt = 0;
return min;
}


public static int func_1cb9bd0a0da74aa38d7b27d7d4e71dc3(long[] x) { 
 double res = 0;
long min = A.getMin(x);
int cnt = 0;
return cnt;
}


public static double func_1764f6201ac54735874e0fe01ce213a5(long[] x) { 
 double res = 0;
long min = A.getMin(x);
int cnt = 0;
return res;
}


*********************************

#### Score: 5.96409


#### Java Tokens: area, total, answer, part, guestcount, count, partarea, guest, totalarea 

public static double[] func_4b5e739d6ebd4aefa608c6ea94e92534(int guestCount, double totalArea) { 
 double partArea = totalArea / guestCount;
double[] answer = new double[guestCount - 1];
return answer;
}


public static double func_120eb7a0a40b40bb9568276e8a883237(int guestCount, double totalArea) { 
 double partArea = totalArea / guestCount;
double[] answer = new double[guestCount - 1];
return partArea;
}


*********************************

#### Score: 5.86496


#### Java Tokens: leftcount, min, rightcount, left, max, count, right 

public static long func_6f5a3f721d144e798a10cb25dbfa2cdd(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
if (leftCount < rightCount) {
    max = right;
} else {
    min = left;
}
return leftCount;
}


public static int func_14aadd79631c43f5b4b53925d207343d(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
if (leftCount < rightCount) {
    max = right;
} else {
    min = left;
}
return left;
}


public static int func_8d1c4434450644b996b7067952b4db12(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
if (leftCount < rightCount) {
    max = right;
} else {
    min = left;
}
return min;
}


*********************************

#### Score: 5.86496


#### Java Tokens: leftcount, min, rightcount, max, left, count, right 

public static int func_ffa9b8f1a653421f8619fcc8f384351c(int i, int left, int max, int min) { 
 int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
return right;
}


public static long func_2a1fd2741a4c407c8acc8df8406ddce5(int i, int left, int max, int min) { 
 int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
if (leftCount < rightCount) {
    max = right;
} else {
    min = left;
}
return rightCount;
}


public static long func_64b9fd3e13ab469c86439a0309ce1ed6(int i, int left, int max, int min) { 
 int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
return rightCount;
}


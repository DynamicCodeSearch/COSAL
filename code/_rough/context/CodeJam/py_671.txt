### Py Tokens: firstsum, nextfirstsum, last, nextlastsum, transistors, lastsum, first 

### Py functions

def func_5421b2125bd94375bac1be5ec96fdd17(first, firstsum, last, lastsum,
    transistors):
    nextfirstsum = firstsum + transistors[first]
    nextlastsum = lastsum + transistors[last - 1]
    if nextfirstsum < nextlastsum:
        firstsum += transistors[first]
        first += 1
    else:
        last -= 1
        lastsum += transistors[last]
    return nextlastsum

def func_8a450a98e91442bdafae1624ac0e7bbf(first, firstsum, last, lastsum,
    transistors):
    nextfirstsum = firstsum + transistors[first]
    nextlastsum = lastsum + transistors[last - 1]
    return nextfirstsum

def func_6cc4f76c88fc43f58c65a3b2bfe57aa1(first, firstsum, last, lastsum,
    transistors):
    nextfirstsum = firstsum + transistors[first]
    nextlastsum = lastsum + transistors[last - 1]
    if nextfirstsum < nextlastsum:
        firstsum += transistors[first]
        first += 1
    else:
        last -= 1
        lastsum += transistors[last]
    return first

def func_0ce388ccc8174897aa5979fb7a25e02f(first, firstsum, last, lastsum,
    transistors):
    nextfirstsum = firstsum + transistors[first]
    nextlastsum = lastsum + transistors[last - 1]
    if nextfirstsum < nextlastsum:
        firstsum += transistors[first]
        first += 1
    else:
        last -= 1
        lastsum += transistors[last]
    return firstsum

def func_41af6c70a8794cbc9b0ea5be7406e52b(first, firstsum, last, lastsum,
    transistors):
    nextfirstsum = firstsum + transistors[first]
    nextlastsum = lastsum + transistors[last - 1]
    return first

*********************************

#### Score: 7.40147


#### Java Tokens: sum1, last, mid, sum, first 

public static boolean func_4f17acf744644da1a8f33c3f9f8a2022(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return ok;
}


public static int func_c1fce54b329a4dda803c6c6faea55fc5(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return first;
}


public static long func_0009b51825a54814baa916c27d03a974(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return sum1;
}


*********************************

#### Score: 6.99350


#### Java Tokens: sum1, last, mid, sum, first, second 

public static int func_effbc8ba099d4cb68b5d8223fcbc1fcf(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return first;
}


public static int func_b0b18a15cb8741d3818a995dc14bcb14(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return last;
}


public static long func_72f4c22086004ba095364ea9ef291e65(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return sum1;
}


*********************************

#### Score: 6.63068


#### Java Tokens: sum1, sum2, last, mid, sum, first, second 

public static int func_e55407da8f4e4e9f854840e611d2d5b3(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return first;
}


public static boolean func_810eaaf26d08494bbdf3fe57ac729d85(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return ok;
}


public static int func_87acf6a0d38c4b309491fc40e0a13236(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return last;
}


*********************************

#### Score: 6.63068


#### Java Tokens: sum1, last, left, mid, sum, right, first 

public static int func_b556a46c54a94ba1960762af1319d01f(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return first;
}


public static long func_6710317378fb4e78abcaab5d9e87c820(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return sum1;
}


public static long func_c755bda6082f49afabad6d2eaa5853be(long right, long left) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
return mid;
}


*********************************

#### Score: 6.30588


#### Java Tokens: sum1, last, left, mid, sum, right, first, second 

public static int func_f80e820de2814c65ab99a82d97a1920a(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return second;
}


public static long func_9e483109833f41be8520f97fd2cb36af(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return sum1;
}


public static boolean func_823329376d504486aaa12addfd4ef6ea(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return ok;
}


*********************************

#### Score: 6.30588


#### Java Tokens: sum1, sum2, last, mid, sum, first, second, second-- 

public static int func_cbeabfd121d6496aad098a126a5e908f(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
return first;
}


public static boolean func_bea6939e5aad48609b39c93481f19ddd(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
return ok;
}


public static int func_bcabef19f14a466db8f6e3ee8308b1a9(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
return last;
}


*********************************

#### Score: 6.01344


#### Java Tokens: sum1, sum2, last, left, mid, sum, right, first, second 

public static int func_b784ca83b812413f95d9794d893a3e1d(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return last;
}


public static int func_0b42d54e7f424aae85b8947c459386a2(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return first;
}


public static long func_934a741232854400a1ed3a5e46a9b568(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return sum1;
}


*********************************

#### Score: 6.01344


#### Java Tokens: sum1, sum2, total, last, mid, sum, first, second, second-- 

public static long func_98246bbfad2c4fcfb05a3354134e3569(int n, long mid, long[] a, long[] sum) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
if (sum1 >= mid && sum2 >= mid) {
    if (second >= first) {
        ok = true;
    } else {
        long total = 0;
        if (second != -1)
            total += sum[second];
        if (first != n)
            total += sum[n - 1] - sum[first - 1];
        if (total >= mid)
            ok = true;
    }
}
return sum2;
}


public static int func_67cb6a5882f743c0886eebfac62516c2(int n, long mid, long[] a, long[] sum) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
if (sum1 >= mid && sum2 >= mid) {
    if (second >= first) {
        ok = true;
    } else {
        long total = 0;
        if (second != -1)
            total += sum[second];
        if (first != n)
            total += sum[n - 1] - sum[first - 1];
        if (total >= mid)
            ok = true;
    }
}
return second;
}


public static boolean func_e4e6762b1fee4a54854992861cc066d8(int n, long mid, long[] a, long[] sum) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
if (sum1 >= mid && sum2 >= mid) {
    if (second >= first) {
        ok = true;
    } else {
        long total = 0;
        if (second != -1)
            total += sum[second];
        if (first != n)
            total += sum[n - 1] - sum[first - 1];
        if (total >= mid)
            ok = true;
    }
}
return ok;
}


*********************************

#### Score: 5.74876


#### Java Tokens: sum1, sum2, last, left, mid, sum, right, first, second, second-- 

public static long func_f2dbea602aa149e3b81b075be6c2c66e(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
return sum1;
}


public static int func_df5e24485337484e94260a0ec67a439e(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
return last;
}


public static boolean func_1f3643c778f3486688e0beb7d6c436ce(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
return ok;
}


*********************************

#### Score: 5.50804


#### Java Tokens: sum1, sum2, total, last, left, mid, sum, right, first, second, second-- 

public static boolean func_fa1043d97adc48faa10a830d131d66db(int n, long right, long left, long[] a, long[] sum) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
if (sum1 >= mid && sum2 >= mid) {
    if (second >= first) {
        ok = true;
    } else {
        long total = 0;
        if (second != -1)
            total += sum[second];
        if (first != n)
            total += sum[n - 1] - sum[first - 1];
        if (total >= mid)
            ok = true;
    }
}
return ok;
}


public static int func_231c3c8249f942929ae5c9a69e0d6a72(int n, long right, long left, long[] a, long[] sum) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
if (sum1 >= mid && sum2 >= mid) {
    if (second >= first) {
        ok = true;
    } else {
        long total = 0;
        if (second != -1)
            total += sum[second];
        if (first != n)
            total += sum[n - 1] - sum[first - 1];
        if (total >= mid)
            ok = true;
    }
}
return second;
}


public static int func_0d4090c96c2a431786186984b15c8096(int n, long right, long left, long[] a, long[] sum) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
while (second != -1 && sum2 < mid) {
    sum2 += a[second];
    second--;
}
if (sum1 >= mid && sum2 >= mid) {
    if (second >= first) {
        ok = true;
    } else {
        long total = 0;
        if (second != -1)
            total += sum[second];
        if (first != n)
            total += sum[n - 1] - sum[first - 1];
        if (total >= mid)
            ok = true;
    }
}
return first;
}


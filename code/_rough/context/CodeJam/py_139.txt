### Py Tokens: upper, lower, slice, area, sum, len, range, append, findx, areasum, find, eff 

### Py functions

def func_48354647662e406b9efa79491081c979(Eff, G, Lower, Upper, i):
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i

def func_ba00d723984949efbb4134947f180b68(Eff, G, Lower, Upper, i):
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return G

*********************************

#### Score: 10.30649


#### Java Tokens: area, cur, slice 

public static double func_c9bcaa16533e48eebc8e3f01aeae3e20(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
return slice;
}


public static double func_6bb0960ead374469b19552bffa139805(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
return cur;
}


*********************************

#### Score: 9.17649


#### Java Tokens: area, len, low, upper 

public static double func_b5fde597de7944ecba1ad3edaf9525b5(int w, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
return area;
}


public static double func_cd3e869e391a46a8b0bc42288a030043(int w, int g, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return area;
}


public static double func_19bd7e074d0f4f9e90b2ec34ca11e5d0(int w, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return area;
}


*********************************

#### Score: 8.28276


#### Java Tokens: area, cur, upperpoints, max, maxx, prev, lower, upper, lowerpoints, findarea, points, min, minx, curx, find, prevx 

public static double func_51b3e6cf8a2e455d853d6553fedb8a09(double maxX, double minX, double prevX, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double curX = (minX + maxX) / 2;
double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
return area;
}


public static double func_bca4142df81749e3a4e22afc7dcf7409(double maxX, double minX, double prevX, ArrayList<Point> upperPoints, ArrayList<Point> lowerPoints) { 
 double curX = (minX + maxX) / 2;
double area = A.findArea(curX, prevX, lowerPoints, upperPoints);
return curX;
}


*********************************

#### Score: 7.72574


#### Java Tokens: next, area, len, nextint, low, upper, int 

public static int func_f77e29be8a654ebd85b5e2956a38237f(int w, int u, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return y0;
}


public static double[] func_0eb61ff98f6141588040786fbeed7c43(int w, int u, int g, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return low;
}


public static double[] func_d18824003133487c894f8c4386de0d5b(int w, int u, int g, int l, Scanner in) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return len;
}


*********************************

#### Score: 7.72574


#### Java Tokens: next, area, nextint, len, low, upper, int 

public static double[] func_77705e92d0cf4aebb8bdd559140c5c1e(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return upper;
}


public static double func_3f99026667664befbacbe6c7329419e3(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
return area;
}


public static double[] func_36137cf118b847178c9e44df9b87f3d9(int w, int u, int l, double[] len, Scanner in) { 
 double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
return upper;
}


*********************************

#### Score: 7.71916


#### Java Tokens: area, cur, res, slice, array, double, arraylist, list 

public static double func_bbd914fe4b1f49c188d0067925327362(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
return slice;
}


public static double func_f5f5986770d84d42ab499d3e54c93f8f(int a, int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
return slice;
}


public static double func_8b0cd3bcacb94b8594956354822ea9f4(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
return cur;
}


*********************************

#### Score: 7.23716


#### Java Tokens: area, len 

public static double func_0cca408bacb8461d9c71e56a7ce2a31a(int w, double[] len) { 
 double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return area;
}


public static double func_b9a757e01d78459e9902918ef38284f9(int w, int g, double[] len) { 
 double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return area;
}


public static double func_b99cd0dbdc854271bb5de21037cf33f2(int w, int g, double area, double[] len) { 
 for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return area;
}


*********************************

#### Score: 7.05644


#### Java Tokens: area, total, size, last, upper, lower, totalarea, lastx 

public static double func_16d0490419ba4510a52110bd40c01f1e(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
double lastX = 0;
double totalArea = 0.0;
return lastX;
}


public static ArrayList<Point> func_c846638aeeba42209bb1a006bc6af783(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
double lastX = 0;
double totalArea = 0.0;
return upper;
}


public static ArrayList<Point> func_53617d74c93043f1be9885559938f98e(ArrayList<Point> lower, ArrayList<Point> upper) { 
 int u = upper.size();
int l = lower.size();
double lastX = 0;
double totalArea = 0.0;
return lower;
}


*********************************

#### Score: 6.99942


#### Java Tokens: next, area, println, system, nextint, len, low, upper, int 

public static int func_1b90956bc8b24238bbfee17f8665bfbc(int t, int w, int u, int l, Scanner in) { 
 int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return g;
}


public static int func_03ebdc7f22b1404e8b855f0171a5e6aa(int t, int w, int l, Scanner in) { 
 int u = in.nextInt();
int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return u;
}


public static int func_82e3142c4e5b48398631c25082609c8a(int t, int w, int l, Scanner in) { 
 int u = in.nextInt();
int g = in.nextInt();
if (t == 5) {
    System.out.println(w + " " + l + " " + u + " " + g);
}
double[] len = new double[w + 1];
double[] low = new double[w + 1];
int x0 = in.nextInt();
int y0 = in.nextInt();
low[x0] = y0;
for (int i = 1; i < l; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        low[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
double[] upper = new double[w + 1];
x0 = in.nextInt();
y0 = in.nextInt();
upper[x0] = y0;
for (int i = 1; i < u; i++) {
    int x = in.nextInt();
    int y = in.nextInt();
    double k = 1.0 * (y - y0) / (x - x0);
    for (int j = x0 + 1; j <= x; j++) {
        upper[j] = k * (j - x0) + y0;
    }
    x0 = x;
    y0 = y;
}
for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return u;
}


*********************************

#### Score: 6.75393


#### Java Tokens: area, len, remain 

public static double func_1cc02f7351a940d7beee273556182bf6(int x0, double area, double x, double[] len) { 
 double remain = area;
x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
return remain;
}


public static int func_2d2e5b31507e4e37bebac719fc1af207(int x0, double area, double x, double[] len) { 
 double remain = area;
x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
return x0;
}


public static int func_49ca744cc2ec4eb2a0c6841d185043f5(int x0, double area, double x, double[] len) { 
 double remain = area;
x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
return x0;
}


### Py Tokens: heappop, tmp, heapq, min, res, xrange, heappush, max 

### Py functions

def func_05415c8039194b2ca5f86a53f67b72e4(b, l, res, x, z):
    res = 0
    for z in xrange(1, b + 1):
        x = heapq.heappop(l)
        x = x[0] + 1, x[1] + 1
        heapq.heappush(l, x)
        s = 10 ** 20
        t = 0
        u = 0
        for x in l:
            s = min(s, x[0])
        for x in l:
            if s == x[0]:
                t += 1
                u += x[1]
        tmp = 36.0 * u / t - z
        res = max(res, tmp)
    if s == x[0]:
        t += 1
        u += x[1]
    return res

def func_870bdc32912644cbbc154a9988d8652f(b, l, x, z):
    res = 0
    for z in xrange(1, b + 1):
        x = heapq.heappop(l)
        x = x[0] + 1, x[1] + 1
        heapq.heappush(l, x)
        s = 10 ** 20
        t = 0
        u = 0
        for x in l:
            s = min(s, x[0])
        for x in l:
            if s == x[0]:
                t += 1
                u += x[1]
        tmp = 36.0 * u / t - z
        res = max(res, tmp)
    if s == x[0]:
        t += 1
        u += x[1]
    return tmp

def func_89322951b74349868b06f1c03c7d68da(b, l, res, x, z):
    res = 0
    for z in xrange(1, b + 1):
        x = heapq.heappop(l)
        x = x[0] + 1, x[1] + 1
        heapq.heappush(l, x)
        s = 10 ** 20
        t = 0
        u = 0
        for x in l:
            s = min(s, x[0])
        for x in l:
            if s == x[0]:
                t += 1
                u += x[1]
        tmp = 36.0 * u / t - z
        res = max(res, tmp)
    return res

def func_76e0b01cdc384c558d8ed63b825eed6d(b, l, res, x, z):
    res = 0
    for z in xrange(1, b + 1):
        x = heapq.heappop(l)
        x = x[0] + 1, x[1] + 1
        heapq.heappush(l, x)
        s = 10 ** 20
        t = 0
        u = 0
        for x in l:
            s = min(s, x[0])
        for x in l:
            if s == x[0]:
                t += 1
                u += x[1]
        tmp = 36.0 * u / t - z
        res = max(res, tmp)
    if s == x[0]:
        t += 1
        u += x[1]
    return res

def func_99776b09ce3842ceaf4f2462c6e380a1(b, l, res, x, z):
    res = 0
    for z in xrange(1, b + 1):
        x = heapq.heappop(l)
        x = x[0] + 1, x[1] + 1
        heapq.heappush(l, x)
        s = 10 ** 20
        t = 0
        u = 0
        for x in l:
            s = min(s, x[0])
        for x in l:
            if s == x[0]:
                t += 1
                u += x[1]
        tmp = 36.0 * u / t - z
        res = max(res, tmp)
    if s == x[0]:
        t += 1
        u += x[1]
    return res

*********************************

#### Score: 9.98736


#### Java Tokens: res, max, tmp, cnt, length, math 

public static double func_a204f7df34bf45f6955308bf316d912c(int p, int[] x, int[] xx) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
for (int i = 0; i < x.length; ++i) if (x[i] == x[0])
    res += Math.max((x[i] - xx[i]) * 36.0 / cnt, 0.0);
return Math.max(res - p, 0);

}


public static int func_06f74862d68841b8babbd4f13ed05ad5(int[] x, int[] xx) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
for (int i = 0; i < x.length; ++i) if (x[i] == x[0])
    res += Math.max((x[i] - xx[i]) * 36.0 / cnt, 0.0);
return cnt;
}


public static double func_f47e19cec4094934a9ffd7849e212d90(int cnt, int[] x, int[] xx) { 
 for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
for (int i = 0; i < x.length; ++i) if (x[i] == x[0])
    res += Math.max((x[i] - xx[i]) * 36.0 / cnt, 0.0);
return res;
}


*********************************

#### Score: 9.87473


#### Java Tokens: res, tmp, cnt 

public static int func_35d0095832c8447d9ead34d8336c480b(int[] x) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
return cnt;
}


public static double func_da4ba4a3c7b54a6680a1b5173206f64b(int[] x) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
return res;
}


public static double func_0ba6e385415646319ffdfb2f46c9b915(int cnt, int[] x) { 
 for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
return res;
}


*********************************

#### Score: 7.47756


#### Java Tokens: res, min, max, ans, sum, math 

public static int func_047b1e0c188c41b7a93977a8a64ae3f3(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return l;
}


public static int func_330173ad6bbb49649ae4310602de4188(int n, long ans, long[] sum) { 
 int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return l;
}


public static long func_692cf403b4954663b037b51f4188faa5(int n, int l, long ans, long[] sum) { 
 for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return ans;
}


*********************************

#### Score: 6.73919


#### Java Tokens: res, min, max, %.15f, ans, sum, math, printf 

public static PrintWriter func_a3c059c89a1b435ab46b204dd5d26129(int n, long ans, long[] sum, PrintWriter out) { 
 int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
out.printf("%.15f\n", 1 - res);
return out;
}


public static PrintWriter func_aa8cbe1272c940b39b40f729b29f02dc(int n, int l, long ans, long[] sum, PrintWriter out) { 
 for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
out.printf("%.15f\n", 1 - res);
return out;
}


public static long func_a74b2d451ce242e4978f8bcfa7e07356(int n, long[] sum, PrintWriter out) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
out.printf("%.15f\n", 1 - res);
return ans;
}


*********************************

#### Score: 6.73919


#### Java Tokens: res, min, third, max, ans, math, first, second 

public static long[] func_fca8c456d81e48b5965cb158958a1664(int N, long q, long s, long r, long p) { 
 long[] a = new long[N];
for (int i = 0; i < N; i++) a[i] = ((i * p + q) % r + s);
long[] A = new long[N + 1];
for (int i = 0; i < N; i++) A[i + 1] = A[i] + a[i];
int j = 0;
long ans = A[N];
for (int i = 0; i < N; i++) {
    long third = A[N] - A[i + 1];
    while (j < i && A[i + 1] - A[j + 2] > A[j + 2]) j++;
    {
        long first = A[j + 1];
        long second = A[i + 1] - A[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    if (j < i) {
        long first = A[j + 2];
        long second = A[i + 1] - A[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
}
double res = (A[N] - ans) * 1.0 / A[N];
return A;
}


public static int func_c716d2e6d97544f198887d9bd5066b7c(int N, long[] A) { 
 int j = 0;
long ans = A[N];
for (int i = 0; i < N; i++) {
    long third = A[N] - A[i + 1];
    while (j < i && A[i + 1] - A[j + 2] > A[j + 2]) j++;
    {
        long first = A[j + 1];
        long second = A[i + 1] - A[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    if (j < i) {
        long first = A[j + 2];
        long second = A[i + 1] - A[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
}
double res = (A[N] - ans) * 1.0 / A[N];
return j;
}


public static long[] func_81d5736f710547b88d4802552b7627d3(int N, long q, long s, long r, long p) { 
 long[] a = new long[N];
for (int i = 0; i < N; i++) a[i] = ((i * p + q) % r + s);
long[] A = new long[N + 1];
for (int i = 0; i < N; i++) A[i + 1] = A[i] + a[i];
int j = 0;
long ans = A[N];
for (int i = 0; i < N; i++) {
    long third = A[N] - A[i + 1];
    while (j < i && A[i + 1] - A[j + 2] > A[j + 2]) j++;
    {
        long first = A[j + 1];
        long second = A[i + 1] - A[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    if (j < i) {
        long first = A[j + 2];
        long second = A[i + 1] - A[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
}
double res = (A[N] - ans) * 1.0 / A[N];
return a;
}


*********************************

#### Score: 6.73919


#### Java Tokens: res, min, max, left, sum, math, first, second 

public static double func_4c746d2a2e674d1a9df41c902c6d83cb(int first, int N, int second, long sum, long[] dp) { 
 double res = 0;
for (int i = Math.max(0, first - 100); i < Math.min(N, first + 100); ++i) {
    for (int j = Math.max(0, second - 100); j < Math.min(N, second + 100); ++j) {
        if (j <= i) {
            continue;
        }
        long a = dp[i + 1];
        long b = dp[j] - dp[i + 1];
        long c = dp[N] - dp[j];
        long left = sum - Math.max(a, Math.max(b, c));
        res = Math.max(res, 1.0 * left / sum);
    }
}
return res;
}


*********************************

#### Score: 6.40591


#### Java Tokens: res, min, getmin, get 

public static long func_3221ae4b5d6d44f7883ba36bbda6a379(long[] x) { 
 double res = 0;
long min = A.getMin(x);
return min;
}


public static double func_8bc503b96e684cc3aaa040104b2e2d35(long[] x) { 
 double res = 0;
long min = A.getMin(x);
return res;
}


*********************************

#### Score: 6.40591


#### Java Tokens: res, min, cnt, length 

public static int func_9875c1e1803d4c9794b0ae78e5648b39(int w, long min, long[] x, long[] bets, double res) { 
 int cnt = 0;
for (int i = 0; i < x.length; i++) if (x[i] == min)
    cnt++;
for (int i = 0; i < x.length; i++) if (x[i] == min) {
    res += 1.0 / cnt * bets[i] * w;
}
return cnt;
}


public static double func_3264a2bff1834793909d0e026092c5ae(int w, long min, long[] x, long[] bets, double res) { 
 int cnt = 0;
for (int i = 0; i < x.length; i++) if (x[i] == min)
    cnt++;
for (int i = 0; i < x.length; i++) if (x[i] == min) {
    res += 1.0 / cnt * bets[i] * w;
}
return res;
}


*********************************

#### Score: 6.27140


#### Java Tokens: tmp, sum 

public static long func_023f48b0402f4be6a677630698a21dbb(int n, int x, int y, long sum, long[] a) { 
 long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return tmp;
}


public static long func_7372dc9491c04019a025a05a04771836(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return sum;
}


public static int func_cdaf79ae1b7042f992fd7274207fe3cc(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
return y;
}


*********************************

#### Score: 6.27140


#### Java Tokens: tmp, tmpb 

public static long func_776f4161d66f4a1db55fb2bca34c351b(int i, int c, long tmpB, long[] a) { 
 tmpB -= a[c - 1] - a[i];
a[i] = a[c - 1];
return tmpB;
}


public static long func_5ca57b0b323f4943be0d379c77fb0e4c(int c, long B, long[] a) { 
 long tmpB = B;
for (int i = 0; i < c; i++) {
    tmpB -= a[c - 1] - a[i];
    a[i] = a[c - 1];
}
return tmpB;
}


### Py Tokens: set, int, foo4, sorted, readline, total, append, ifile, bar, area, union, res, list, foo2, range, split 

### Py functions

def func_533dcab2f3c74336bb5f99c9fe4fc06c(G, L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    for x in cc:
        dd.append(foo2(x, aa, bb))
    total = foo4(dd)
    area = total / G
    res = []
    for i in range(G - 1):
        res.append(bar(dd, area))
    return aa

def func_9b3c605807c04c70b83ca96d1d785b61(G, L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    for x in cc:
        dd.append(foo2(x, aa, bb))
    total = foo4(dd)
    area = total / G
    res = []
    for i in range(G - 1):
        res.append(bar(dd, area))
    return U

def func_358bd890810644b096a110cc0c12f394(G, L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    for x in cc:
        dd.append(foo2(x, aa, bb))
    total = foo4(dd)
    area = total / G
    res = []
    for i in range(G - 1):
        res.append(bar(dd, area))
    return U

def func_ace49f4453e94fdea2c22077a088c03d(G, L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    for x in cc:
        dd.append(foo2(x, aa, bb))
    total = foo4(dd)
    area = total / G
    res = []
    for i in range(G - 1):
        res.append(bar(dd, area))
    return bb

def func_22d4875fbd1e40d6a3743fc1375d5a25(G, L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    for x in cc:
        dd.append(foo2(x, aa, bb))
    total = foo4(dd)
    area = total / G
    res = []
    for i in range(G - 1):
        res.append(bar(dd, area))
    return G

*********************************

#### Score: 8.64524


#### Java Tokens: area, cur, res, slice, array, double, arraylist, list 

public static double func_bbd914fe4b1f49c188d0067925327362(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
return slice;
}


public static double func_f5f5986770d84d42ab499d3e54c93f8f(int a, int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
return slice;
}


public static double func_8b0cd3bcacb94b8594956354822ea9f4(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
return cur;
}


*********************************

#### Score: 7.97284


#### Java Tokens: add, sortedset, sorted, set, tree, integer, treeset 

public static SortedSet<Integer> func_908a1fb2d6ea4b70bac7de1f0210bf2e(int l, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
return xs;
}


public static SortedSet<Integer> func_33d30156f21a452c9e7e9783fd47a69d(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
return xs;
}


*********************************

#### Score: 7.72323


#### Java Tokens: res, array, double, arraylist, list 

public static int func_873504fabd1c4926bf18a657af8bb774(int a) { 
 // System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
return a;
}


public static int func_98c4291180674054b74726faed4c5c6e(int a, int b) { 
 // System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
b = 0;
return a;
}


public static int func_1ec4a494938548cca3fefb2e49c45bd4(int a, int b) { 
 // System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
b = 0;
return b;
}


*********************************

#### Score: 7.57770


#### Java Tokens: add, sortedset, sorted, set, size, tree, integer, treeset 

public static SortedSet<Integer> func_4ce0a44eab0542dfa8546f1c61bacac4(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return xs;
}


public static int[] func_1fe4188d08b24ee0990c1d1b63842dc2(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return nx;
}


public static int[] func_900079f612634215823886119e9e27bb(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
return nx;
}


*********************************

#### Score: 7.29642


#### Java Tokens: cur, res, array, double, arraylist, list 

public static int func_cdb69d4916ba414f8d20005b2783f921(int a, int b) { 
 double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
b = 0;
return b;
}


public static int func_13472466f671472d8ae17ed3b9b2ce25(int a, int b) { 
 double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
b = 0;
return a;
}


public static double func_121f22baf19d40b9a27cb1e0e4c7b426(int a) { 
 double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
return cur;
}


*********************************

#### Score: 7.22192


#### Java Tokens: add, sortedset, sorted, set, size, tree, length, integer, treeset 

public static int[] func_6a5e7e859297479b9467357300fe07c1(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return nx;
}


public static SortedSet<Integer> func_ce9d48e027814f3992228953ecdf796f(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return xs;
}


public static double[] func_985ac19939df45b0aa6e6fb24e535b72(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return ny;
}


*********************************

#### Score: 7.06577


#### Java Tokens: area, linkedlist, total, goal, err, double, answers, totalarea, list, target, linked 

public static double func_b482d78689d847599048c6cca1bd460f(int g, double totalArea) { 
 double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
return target;
}


public static double func_31bacf94d0a14d2cb7c0afbd1f6ca9fa(int g, double totalArea) { 
 double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
return ERR;
}


public static double func_31e40648607d45a0893df8b9e0055a26(int g, double totalArea) { 
 double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
return goal;
}


*********************************

#### Score: 6.74060


#### Java Tokens: next, area, total, nextint, upper, totalarea, point, int 

public static double func_03a664ce0f8647aab7f39367b6ba21d6(int u, Scanner in) { 
 Point[] upper = new Point[u];
for (int i = 0; i < u; ++i) {
    upper[i] = new Point(in.nextInt(), in.nextInt());
}
double totalArea = 0.0;
return totalArea;
}


public static Point[] func_c34ff2000d714c2c87679e2854f2a343(int u, Scanner in) { 
 Point[] upper = new Point[u];
for (int i = 0; i < u; ++i) {
    upper[i] = new Point(in.nextInt(), in.nextInt());
}
double totalArea = 0.0;
return upper;
}


public static double func_8e47c135c1d940e6b32bf4b1cff63ad2(int u, Point[] upper, Scanner in) { 
 for (int i = 0; i < u; ++i) {
    upper[i] = new Point(in.nextInt(), in.nextInt());
}
double totalArea = 0.0;
return totalArea;
}


*********************************

#### Score: 6.51493


#### Java Tokens: area, linkedlist, goal, err, double, prev, answers, totalarea, list, target, total, prevx, linked 

public static double func_0eb87aa874c246e79f6f8922ca7b485c(int g, double totalArea) { 
 double prevX = 0.0;
double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
return goal;
}


public static double func_f673ef567d674e32a008ae66c52c5203(int g, double totalArea) { 
 double prevX = 0.0;
double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
return prevX;
}


public static double func_c1e7a82e39a642edb26115b32bb2dcdf(int g, double totalArea) { 
 double prevX = 0.0;
double goal = totalArea / g;
double target = 0.0;
double ERR = 0.000001;
List<Double> answers = new LinkedList<Double>();
return target;
}


*********************************

#### Score: 6.42651


#### Java Tokens: next, area, total, nextint, lower, upper, totalarea, int, point 

public static int func_a86ea935ccb04587b63a355333ef6a76(Scanner in) { 
 // lower points
int l = in.nextInt();
// upper points
int u = in.nextInt();
int // guests
g = in.nextInt();
Point[] lower = new Point[l];
for (int i = 0; i < l; ++i) {
    lower[i] = new Point(in.nextInt(), in.nextInt());
}
Point[] upper = new Point[u];
for (int i = 0; i < u; ++i) {
    upper[i] = new Point(in.nextInt(), in.nextInt());
}
double totalArea = 0.0;
return g;
}


public static Point[] func_2d8096e689e841c88861147576eadc45(Scanner in) { 
 // lower points
int l = in.nextInt();
// upper points
int u = in.nextInt();
int // guests
g = in.nextInt();
Point[] lower = new Point[l];
for (int i = 0; i < l; ++i) {
    lower[i] = new Point(in.nextInt(), in.nextInt());
}
Point[] upper = new Point[u];
for (int i = 0; i < u; ++i) {
    upper[i] = new Point(in.nextInt(), in.nextInt());
}
double totalArea = 0.0;
return lower;
}


public static int func_81f77f79797c4ed28e4ecf933e359c06(Scanner in) { 
 int // width
w = in.nextInt();
// lower points
int l = in.nextInt();
// upper points
int u = in.nextInt();
int // guests
g = in.nextInt();
Point[] lower = new Point[l];
for (int i = 0; i < l; ++i) {
    lower[i] = new Point(in.nextInt(), in.nextInt());
}
Point[] upper = new Point[u];
for (int i = 0; i < u; ++i) {
    upper[i] = new Point(in.nextInt(), in.nextInt());
}
double totalArea = 0.0;
return l;
}


### Py Tokens: sort, range, result, str, append 

### Py functions

def func_e6631104bc6849f3aff780f7c7f1f0f1(n, p, result):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    return p

def func_6e76d62d0e4942488024ee2d88175da8(n, p, result):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    return result

def func_a5c4ffc114ff4aa68919a042b96da6e2(m, n, p, result):
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    return p

def func_d08c2dc2a6904e70a7c27597e88e351f(m, n, p, result):
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    return p

def func_80ffacf726434ba4a9ec12effc8583b3(m, n, p, result):
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    return j

*********************************

#### Score: 7.61741


#### Java Tokens: result, length, arrays, sort 

public static long[] func_2fdd7920b3b344b89678c625add43722(long[] x) { 
 double result = 0;
long[] a = new long[37];
for (int i = 0; i < x.length; i++) {
    a[i] = x[i];
}
Arrays.sort(a);
return a;
}


public static double func_0e9e60656dac466fb14c0def8f025850(long[] x) { 
 double result = 0;
long[] a = new long[37];
for (int i = 0; i < x.length; i++) {
    a[i] = x[i];
}
Arrays.sort(a);
return result;
}


*********************************

#### Score: 6.77620


#### Java Tokens: result, collections, bestresult, best, sort, profit 

public static double func_2e1d178b8cfb44799660e97759d4a338(ArrayList<Long> profit) { 
 // out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


*********************************

#### Score: 6.11136


#### Java Tokens: add, result, money, collections, bestresult, best, sort, profit 

public static long func_343bdcca14d54e9ca38bdab18991bfa7(long l, long money, long[] a, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return money;
}


public static double func_5f96bc5b17054aab93bb46045116212e(long l, long money, long[] a, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


*********************************

#### Score: 5.12738


#### Java Tokens: add, result, money, array, collections, bestresult, best, arraylist, sort, list, profit, long 

public static long func_e7456d7a6591451b8877074d7707e8f2(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return money;
}


public static double func_5984f9a79b8a49de9d1f8c26849b5b51(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


public static ArrayList<Long> func_6573ef28dcdb48b7afbf727f51c17533(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return profit;
}


*********************************

#### Score: 5.12738


#### Java Tokens: result, add, money, array, collections, startresult, start, arraylist, sort, list, profit, long 

public static double func_4934cb00bd584b12b901e972b719ddbc(long l, long money, long[] a) { 
 double startResult = -money;
ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return startResult;
}


public static ArrayList<Long> func_216eee5c0cd7466abdfa3216099f8195(long l, long money, long[] a) { 
 double startResult = -money;
ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return profit;
}


public static long func_16b1a9377e0e4bd3a704aedcb52645e1(long l, long money, long[] a) { 
 double startResult = -money;
ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return money;
}


*********************************

#### Score: 5.09699


#### Java Tokens: result, length 

public static long[] func_0ef92ada0bd545a5b5cb92d439ccef3d(long[] x) { 
 double result = 0;
long[] a = new long[37];
for (int i = 0; i < x.length; i++) {
    a[i] = x[i];
}
return a;
}


public static double func_add7e1a0e6a1452d85ffa409cc0516eb(long[] x) { 
 double result = 0;
long[] a = new long[37];
for (int i = 0; i < x.length; i++) {
    a[i] = x[i];
}
return result;
}


*********************************

#### Score: 5.09699


#### Java Tokens: result, ind 

public static int func_9debf16008c944389fbc6015ae192fc5(int n, int[] ind, int[] l, int[] d) { 
 for (int i = 0; i < n; ++i) {
    ind[i] = i;
}
for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
        if ((l[ind[i]] * d[ind[i]] < l[ind[j]] * d[ind[j]]) || (l[ind[i]] * d[ind[i]] == l[ind[j]] * d[ind[j]] && (d[ind[i]] == 0 && ind[i] > ind[j] || (d[ind[i]] != 0 && (l[ind[i]] > l[ind[j]] || (l[ind[i]] == l[ind[j]] && ind[i] > ind[j])))))) {
            int t = ind[i];
            ind[i] = ind[j];
            ind[j] = t;
        }
    }
}
final int result = 0;
return result;
}


public static int[] func_7c4ba0b1021c4e9e83b440eebbca05e8(int n, int[] l, int[] d) { 
 final int[] ind = new int[n];
for (int i = 0; i < n; ++i) {
    ind[i] = i;
}
for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
        if ((l[ind[i]] * d[ind[i]] < l[ind[j]] * d[ind[j]]) || (l[ind[i]] * d[ind[i]] == l[ind[j]] * d[ind[j]] && (d[ind[i]] == 0 && ind[i] > ind[j] || (d[ind[i]] != 0 && (l[ind[i]] > l[ind[j]] || (l[ind[i]] == l[ind[j]] && ind[i] > ind[j])))))) {
            int t = ind[i];
            ind[i] = ind[j];
            ind[j] = t;
        }
    }
}
final int result = 0;
return ind;
}


public static int func_6883f3b01e8641c9ad122b1f60c50c81(int n, int[] ind, int[] l, int[] d) { 
 for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
        if ((l[ind[i]] * d[ind[i]] < l[ind[j]] * d[ind[j]]) || (l[ind[i]] * d[ind[i]] == l[ind[j]] * d[ind[j]] && (d[ind[i]] == 0 && ind[i] > ind[j] || (d[ind[i]] != 0 && (l[ind[i]] > l[ind[j]] || (l[ind[i]] == l[ind[j]] && ind[i] > ind[j])))))) {
            int t = ind[i];
            ind[i] = ind[j];
            ind[j] = t;
        }
    }
}
final int result = 0;
return result;
}


*********************************

#### Score: 5.09699


#### Java Tokens: result, temp 

public static int func_183a865d51424820a4d946a290a0ef07(int result, long temp) { 
 result = 31 * result + (int) (temp ^ (temp >>> 32));
return result;

}


*********************************

#### Score: 4.97269


#### Java Tokens: add, string, max, index, integer, arraylist, list, result, size, array, builder, stringbuilder, append 

public static boolean[] func_8a7bff4180934947805842e57e503277(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return u;
}


public static StringBuilder func_40420e1a67264bd89dd150fbc26cf837(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb;
}


public static List<Integer> func_f05ac0d737f747fb9cfb0f670154f4d8(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return result;
}


*********************************

#### Score: 4.79172


#### Java Tokens: add, string, max, index, integer, arraylist, list, result, size, array, builder, stringbuilder, tostring, append 

public static String func_dbd49d09a3f54cc3b5d46ee5429439bd(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


public static String func_ed0632d1aaa74b17b354a457766e2b01(int N, int[] P, boolean[] u) { 
 List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


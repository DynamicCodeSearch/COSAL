### Py Tokens: tmp, bestanswer, answer, max, best, sum0 

### Py functions

def func_9b547d65df7f415ca170eca0f821e5c6(bestAnswer, i, ps, sum0, v1):
    tmp = max(sum0[i], v1, ps - v1)
    if tmp < bestAnswer:
        bestAnswer = tmp
    return sum0

def func_3ce845772464410e8b44ff15f98dac44(bestAnswer, i, ps, sum0, v1):
    tmp = max(sum0[i], v1, ps - v1)
    if tmp < bestAnswer:
        bestAnswer = tmp
    return tmp

def func_d2314dcc43294d87a02adffcbb3a2255(bestAnswer, i, ps, sum0, v1):
    tmp = max(sum0[i], v1, ps - v1)
    if tmp < bestAnswer:
        bestAnswer = tmp
    return v1

def func_5e1bd426c5564785ade9aba45989458d(bestAnswer, i, ps, sum0, v1):
    tmp = max(sum0[i], v1, ps - v1)
    if tmp < bestAnswer:
        bestAnswer = tmp
    return ps

def func_4ddb14e3e8c04255be37655e04ad5fd5(bestAnswer, i, ps, sum0, v1):
    tmp = max(sum0[i], v1, ps - v1)
    if tmp < bestAnswer:
        bestAnswer = tmp
    return i

*********************************

#### Score: 7.73751


#### Java Tokens: sub, min, answer, max, subsum, best, sum, math, n-- 

public static long func_46d07cdc1d3b47cca724f82eda3730df(int N, long sum, long[] best, long[] A) { 
 long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return subSum;
}


public static double func_2377f49406914e328597a05e642104f5(int N, long sum, long[] best, long[] A) { 
 long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return answer;
}


public static long func_2aa1ff7540e34c8a9c69da057b4deee9(int N, long sum, long[] best, long[] A) { 
 long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return min;
}


*********************************

#### Score: 7.73751


#### Java Tokens: sub, min, answer, max, subsum, sum, best, math, n-- 

public static double func_08bcd5b6ab6845fa8f67aae442da48b7(int N, long min, long sum, long[] best, long[] A) { 
 long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return answer;
}


public static long func_99dff45c18cd4546a25e6f2af492f72e(int N, long min, long sum, long[] best, long[] A) { 
 long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return min;
}


public static long func_f54dd5f559284bf38ab30e60bee0cebb(int N, long min, long sum, long[] best, long[] A) { 
 long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return subSum;
}


*********************************

#### Score: 6.67522


#### Java Tokens: res, max, tmp, cnt, length, math 

public static double func_a204f7df34bf45f6955308bf316d912c(int p, int[] x, int[] xx) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
for (int i = 0; i < x.length; ++i) if (x[i] == x[0])
    res += Math.max((x[i] - xx[i]) * 36.0 / cnt, 0.0);
return Math.max(res - p, 0);

}


public static int func_06f74862d68841b8babbd4f13ed05ad5(int[] x, int[] xx) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
for (int i = 0; i < x.length; ++i) if (x[i] == x[0])
    res += Math.max((x[i] - xx[i]) * 36.0 / cnt, 0.0);
return cnt;
}


public static double func_f47e19cec4094934a9ffd7849e212d90(int cnt, int[] x, int[] xx) { 
 for (int tmp : x) if (tmp == x[0])
    ++cnt;
double res = 0;
for (int i = 0; i < x.length; ++i) if (x[i] == x[0])
    res += Math.max((x[i] - xx[i]) * 36.0 / cnt, 0.0);
return res;
}


*********************************

#### Score: 6.52425


#### Java Tokens: sub, half, beforehalf, max, sum, best, beforehalfsum, n--, min, answer, subsum, math, value 

public static long func_496996da5dcc4e44afa510507ade5a86(int N, int beforeHalf, long[] best, long[] A) { 
 long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return min;
}


public static double func_36c6552bf0a74c17b3492d4c55478d74(int N, int beforeHalf, long[] best, long[] A) { 
 long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return answer;
}


public static long func_8c2da18f2ce44d95acbf383680c8dc30(int N, int beforeHalf, long[] best, long[] A) { 
 long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return beforeHalfSum;
}


*********************************

#### Score: 6.52425


#### Java Tokens: sub, beforehalf, half, max, best, sum, beforehalfsum, n--, min, answer, subsum, math, value 

public static long func_464f343c945d4d4191350cb335002739(int N, long[] A) { 
 long[] best = new long[N];
int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return subSum;
}


public static long func_2103ae7a7f6d4f4c9830a9789d8f17cb(int N, long q, long p, long r, long s) { 
 long[] A = new long[N];
for (int n = 0; n < N; n++) {
    A[n] = (n * p + q) % r + s;
}
long[] best = new long[N];
int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return beforeHalfSum;
}


public static long func_fbdaadd299fd4452a97fdfab10007e83(int N, long[] A) { 
 long[] best = new long[N];
int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return beforeHalfSum;
}


*********************************

#### Score: 6.52425


#### Java Tokens: sub, beforehalf, half, max, sum, best, beforehalfsum, n--, min, answer, subsum, math, value 

public static long func_8265b0e17fc949a380399f9693f41bd4(int N, long[] best, long[] A) { 
 int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return subSum;
}


public static long func_c720c1c22ad143649c271c9e7b6e1a2f(int N, int beforeHalf, long beforeHalfSum, long[] best, long[] A) { 
 long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return beforeHalfSum;
}


public static long func_e3225d8680fc41cbba56021b6b7d2de1(int N, long[] best, long[] A) { 
 int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return sum;
}


*********************************

#### Score: 6.44213


#### Java Tokens: toadd, add, answer, max, math, win 

public static long func_04347b26a8e240779d233405efef964d(int i, long win, long required, long toAdd, double answer) { 
 win += toAdd * i;
answer = Math.max(answer, 36d / i * win - required);
return win;
}


public static double func_2d1ae8ca31d84299af32ee6559aa4570(int i, long win, long required, long toAdd, double answer) { 
 win += toAdd * i;
answer = Math.max(answer, 36d / i * win - required);
return answer;
}


*********************************

#### Score: 6.27140


#### Java Tokens: tmp, sum 

public static long func_023f48b0402f4be6a677630698a21dbb(int n, int x, int y, long sum, long[] a) { 
 long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return tmp;
}


public static long func_7372dc9491c04019a025a05a04771836(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return sum;
}


public static int func_cdaf79ae1b7042f992fd7274207fe3cc(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
return y;
}


*********************************

#### Score: 6.27140


#### Java Tokens: tmp, tmpb 

public static long func_776f4161d66f4a1db55fb2bca34c351b(int i, int c, long tmpB, long[] a) { 
 tmpB -= a[c - 1] - a[i];
a[i] = a[c - 1];
return tmpB;
}


public static long func_5ca57b0b323f4943be0d379c77fb0e4c(int c, long B, long[] a) { 
 long tmpB = B;
for (int i = 0; i < c; i++) {
    tmpB -= a[c - 1] - a[i];
    a[i] = a[c - 1];
}
return tmpB;
}


*********************************

#### Score: 6.27140


#### Java Tokens: tmp, cnt 

public static int func_cd4276872215413db0dbc3f66e17128b(int[] x) { 
 int cnt = 0;
for (int tmp : x) if (tmp == x[0])
    ++cnt;
return cnt;
}


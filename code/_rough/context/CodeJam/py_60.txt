### Py Tokens: ifile, set, union, list, int, range, split, sorted, readline 

### Py functions

def func_1794a5841b4443eb9c28eac1da2ba036(U, aa, i, ifile, x):
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    return i

def func_a5fe296096aa4a5aaea5b397693fadd8(U, aa, i, ifile, x):
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    return bb

def func_a32f9cad8bc642dba0ac9cda31ab63b9(L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    return L

def func_95cbb3c8bebe4ff29c3fb98d339d3076(L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    dd = []
    return x

def func_7d6fa7c97fc1499e93f6b72672a60274(L, U, ifile, x):
    aa = [[int(x) for x in ifile.readline().split()] for i in range(L)]
    bb = [[int(x) for x in ifile.readline().split()] for i in range(U)]
    cc = set([x[0] for x in aa]).union(set([x[0] for x in bb]))
    cc = sorted(list(cc))
    return x

*********************************

#### Score: 7.97284


#### Java Tokens: add, sortedset, sorted, set, tree, integer, treeset 

public static SortedSet<Integer> func_908a1fb2d6ea4b70bac7de1f0210bf2e(int l, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
return xs;
}


public static SortedSet<Integer> func_33d30156f21a452c9e7e9783fd47a69d(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
return xs;
}


*********************************

#### Score: 7.57770


#### Java Tokens: add, sortedset, sorted, set, size, tree, integer, treeset 

public static SortedSet<Integer> func_4ce0a44eab0542dfa8546f1c61bacac4(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return xs;
}


public static int[] func_1fe4188d08b24ee0990c1d1b63842dc2(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
return nx;
}


public static int[] func_900079f612634215823886119e9e27bb(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
return nx;
}


*********************************

#### Score: 7.22192


#### Java Tokens: add, sortedset, sorted, set, size, tree, length, integer, treeset 

public static int[] func_6a5e7e859297479b9467357300fe07c1(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return nx;
}


public static SortedSet<Integer> func_ce9d48e027814f3992228953ecdf796f(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return xs;
}


public static double[] func_985ac19939df45b0aa6e6fb24e535b72(int l, int u, int[] xu, int[] xl) { 
 SortedSet<Integer> xs = new TreeSet<Integer>();
for (int i = 0; i < l; i++) {
    xs.add(xl[i]);
}
for (int i = 0; i < u; i++) {
    xs.add(xu[i]);
}
int[] nx = new int[xs.size()];
{
    int i = 0;
    for (int xx : xs) {
        nx[i++] = xx;
    }
}
double[] ny = new double[nx.length];
return ny;
}


*********************************

#### Score: 5.69784


#### Java Tokens: next, nextint, array, integer, arraylist, list, int 

public static double[] func_4312c6b3e990491f89e3878fe67e0f96(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
return r;
}


public static int func_82dc3e19e4ca423c94a1a8ed5443aa1c(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
return n;
}


public static double[] func_64a305c06e664b1da148f65b5752a081(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
return l;
}


*********************************

#### Score: 5.42194


#### Java Tokens: next, add, nextint, array, integer, arraylist, list, int 

public static double[] func_ee90b54cb42642dab06e77f774f54415(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
return r;
}


public static List<Integer> func_e7e9315e0e774e9eb72db934fa19c1e6(int n, double[] r, Scanner in) { 
 for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
return p;
}


public static int func_58d21e6da8734e3f9f6376cedf100299(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
return n;
}


*********************************

#### Score: 4.96220


#### Java Tokens: set, tree, integer, treeset 

public static int[][] func_9a47156f72654109bd8da04bd2f01d1c(int U, int L) { 
 TreeSet<Integer> xx = new TreeSet<Integer>();
int[][] x = new int[][] { new int[L], new int[U] }, y = new int[][] { new int[L], new int[U] };
return y;
}


public static TreeSet<Integer> func_5d30268f025145b782a51f3d95d66bae(int U, int L) { 
 TreeSet<Integer> xx = new TreeSet<Integer>();
int[][] x = new int[][] { new int[L], new int[U] }, y = new int[][] { new int[L], new int[U] };
return xx;
}


public static int[][] func_e9b2add3236a4a00921bf47e1e4787c4(int U, int L) { 
 TreeSet<Integer> xx = new TreeSet<Integer>();
int[][] x = new int[][] { new int[L], new int[U] }, y = new int[][] { new int[L], new int[U] };
int[] c = new int[] { L, U };
return x;
}


*********************************

#### Score: 4.44365


#### Java Tokens: split, string, trim, line 

public static double[] func_de3a96ea49a441999168791bd2f96e09(int n, String line) { 
 String[] ss = line.trim().split(" ");
double[] l = new double[n];
return l;
}


public static String[] func_b4974e8e9363455792fd54d845a37f4a(int n, String line) { 
 String[] ss = line.trim().split(" ");
double[] l = new double[n];
return ss;
}


*********************************

#### Score: 4.44365


#### Java Tokens: split, trim, \s+, line 

public static String[] func_25b90e8e1098474fac3336d0bce37fc5(String line) { 
 if (line == null)
    return null;
return line.trim().split("\\s+");

}


public static String[] func_1f59c1d4a9344a6b853d00f3689bb53e(String line) { 
 if (line == null)
    return null;
return line.trim().split("\\s+");

}


*********************************

#### Score: 4.43194


#### Java Tokens: set, length, tree, sum, treeset, long 

public static TreeSet<Long> func_82bedb87aaee466db5f8d8ee5fb8bbfd(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
return all;
}


public static long func_b009c656310044d9843b16a552b1b893(int r, int p, int s, int q, int n) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
return sum;
}


public static long func_612a6278d77147d182b6d5a52d810c2e(int r, int p, int s, int q, long[] a) { 
 long sum = 0;
for (int i = 0; i < a.length; i++) {
    a[i] = (1L * i * p + q) % r + s;
    sum += a[i];
}
TreeSet<Long> all = new TreeSet<Long>();
return sum;
}


*********************************

#### Score: 4.43194


#### Java Tokens: add, set, tree, treeset, long, cands 

public static TreeSet<Long> func_6a975c9c282344a58821f40d1ca94fa3(int N, long[] is) { 
 // for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
for (int i = 0; i < N; i++) for (int d = -1; d <= 1; d++) cands.add(is[i] + d);
return cands;
}


public static TreeSet<Long> func_9dda3932c68c40eca2e86198d4239eef(int N, long[] is) { 
 long A = 0;
// for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
for (int i = 0; i < N; i++) for (int d = -1; d <= 1; d++) cands.add(is[i] + d);
return cands;
}


public static long func_30dc5bd23f404042bfe3a665a9f440b3(int N, long[] is) { 
 long A = 0;
// for(long i:is)B += i;
long K = 0;
TreeSet<Long> cands = new TreeSet<Long>();
for (int i = 0; i < N; i++) for (int d = -1; d <= 1; d++) cands.add(is[i] + d);
return K;
}


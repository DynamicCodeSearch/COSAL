### Py Tokens: getcuts, map, lower, upper, int, xrange, float, case, split, get, cuts, close, readline, infile, append, result 

### Py functions

def func_c0bba626ca5e4dbca482f535f12452cc(T, infile):
    for i in xrange(T):
        W, L, U, G = map(int, infile.readline().split())
        lower = []
        upper = []
        for j in xrange(L):
            lower.append(map(float, infile.readline().split()))
        for j in xrange(U):
            upper.append(map(float, infile.readline().split()))
        result = get_cuts(lower, upper, G)
        print 'Case #%d:' % (i + 1,)
        for r in result:
            print r
    infile.close()
    return T

*********************************

#### Score: 8.48026


#### Java Tokens: next, codejam_round3_a, nextdouble, code, nextint, double, lower, upper, codejam, int, input, round, jam, cuts 

public static int func_9498793cf51e4186b6532de0e653e808(Scanner input) { 
 int L = input.nextInt();
int U = input.nextInt();
int G = input.nextInt();
CodeJam_Round3_A.lower = new double[L][2];
for (int i = 0; i < L; i++) {
    CodeJam_Round3_A.lower[i][0] = input.nextDouble();
    CodeJam_Round3_A.lower[i][1] = input.nextDouble();
}
CodeJam_Round3_A.upper = new double[U][2];
for (int i = 0; i < U; i++) {
    CodeJam_Round3_A.upper[i][0] = input.nextDouble();
    CodeJam_Round3_A.upper[i][1] = input.nextDouble();
}
double g = G;
double[] cuts = new double[G - 1];
return L;
}


public static double func_ada35ba284554550a51c283e76893ad2(int L, Scanner input) { 
 int U = input.nextInt();
int G = input.nextInt();
CodeJam_Round3_A.lower = new double[L][2];
for (int i = 0; i < L; i++) {
    CodeJam_Round3_A.lower[i][0] = input.nextDouble();
    CodeJam_Round3_A.lower[i][1] = input.nextDouble();
}
CodeJam_Round3_A.upper = new double[U][2];
for (int i = 0; i < U; i++) {
    CodeJam_Round3_A.upper[i][0] = input.nextDouble();
    CodeJam_Round3_A.upper[i][1] = input.nextDouble();
}
double g = G;
double[] cuts = new double[G - 1];
return g;
}


public static double[] func_9d2b59d54a284fd780d905c55ada0cef(Scanner input) { 
 int L = input.nextInt();
int U = input.nextInt();
int G = input.nextInt();
CodeJam_Round3_A.lower = new double[L][2];
for (int i = 0; i < L; i++) {
    CodeJam_Round3_A.lower[i][0] = input.nextDouble();
    CodeJam_Round3_A.lower[i][1] = input.nextDouble();
}
CodeJam_Round3_A.upper = new double[U][2];
for (int i = 0; i < U; i++) {
    CodeJam_Round3_A.upper[i][0] = input.nextDouble();
    CodeJam_Round3_A.upper[i][1] = input.nextDouble();
}
double g = G;
double[] cuts = new double[G - 1];
return cuts;
}


*********************************

#### Score: 8.47770


#### Java Tokens: next, println, system, nextint, lower, upper, case, int, point 

public static int func_a1770144a03d4dcd92267cbf1eca1697(int cc, Scanner in) { 
 System.out.println("Case #" + cc + ": ");
int // width
w = in.nextInt();
// lower points
int l = in.nextInt();
// upper points
int u = in.nextInt();
int // guests
g = in.nextInt();
Point[] lower = new Point[l];
for (int i = 0; i < l; ++i) {
    lower[i] = new Point(in.nextInt(), in.nextInt());
}
Point[] upper = new Point[u];
return w;
}


public static int func_13c53349f3014880a2de29a628466e05(int cc, Scanner in) { 
 System.out.println("Case #" + cc + ": ");
int // width
w = in.nextInt();
// lower points
int l = in.nextInt();
// upper points
int u = in.nextInt();
int // guests
g = in.nextInt();
Point[] lower = new Point[l];
for (int i = 0; i < l; ++i) {
    lower[i] = new Point(in.nextInt(), in.nextInt());
}
Point[] upper = new Point[u];
for (int i = 0; i < u; ++i) {
    upper[i] = new Point(in.nextInt(), in.nextInt());
}
return u;
}


public static int func_8c307cae72ea4b0f9ee4f4474e5b6051(int cc, Scanner in) { 
 System.out.println("Case #" + cc + ": ");
int // width
w = in.nextInt();
// lower points
int l = in.nextInt();
// upper points
int u = in.nextInt();
int // guests
g = in.nextInt();
Point[] lower = new Point[l];
for (int i = 0; i < l; ++i) {
    lower[i] = new Point(in.nextInt(), in.nextInt());
}
Point[] upper = new Point[u];
return u;
}


*********************************

#### Score: 8.28963


#### Java Tokens: total, getx, println, gety, irregularcakes, lower, get, upper, irregular, cakes, caseno, case 

public static double func_5724d79c4dc34bf6929f661c7b3bc7d6(int U, int L, double total) { 
 for (int i = 0; i < L - 1; i++) {
    total -= (IrregularCakes.lower[i + 1].getY() + IrregularCakes.lower[i].getY()) * (IrregularCakes.lower[i + 1].getX() - IrregularCakes.lower[i].getX()) / 2;
}
for (int i = 0; i < U - 1; i++) {
    total += (IrregularCakes.upper[i + 1].getY() + IrregularCakes.upper[i].getY()) * (IrregularCakes.upper[i + 1].getX() - IrregularCakes.upper[i].getX()) / 2;
}
IrregularCakes.out.println("Case #" + (++IrregularCakes.caseNo) + ": ");
return total;
}


public static double func_a1ea6f65035f4e088b41efb50c0f1459(int U, int L) { 
 double total = 0;
for (int i = 0; i < L - 1; i++) {
    total -= (IrregularCakes.lower[i + 1].getY() + IrregularCakes.lower[i].getY()) * (IrregularCakes.lower[i + 1].getX() - IrregularCakes.lower[i].getX()) / 2;
}
for (int i = 0; i < U - 1; i++) {
    total += (IrregularCakes.upper[i + 1].getY() + IrregularCakes.upper[i].getY()) * (IrregularCakes.upper[i + 1].getX() - IrregularCakes.upper[i].getX()) / 2;
}
IrregularCakes.out.println("Case #" + (++IrregularCakes.caseNo) + ": ");
return total;
}


*********************************

#### Score: 8.24477


#### Java Tokens: cur, upper, get, lower, curheight, curu, height 

public static double func_98ade43ed9ad443788728c811e4d5838(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
return curHeight;
}


public static int func_c1dc0a267e0a4bf48e5b8172af43dc23(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
return curU;
}


*********************************

#### Score: 8.17332


#### Java Tokens: result, println, task, system, string, get, task1, getresult, case 

public static String func_61d176718ba14544853fc17b1a46f1fe(int i) { 
 String result = Task1.getResult();
System.out.println("Case #" + i + ": " + result);
return result;
}


*********************************

#### Score: 7.83537


#### Java Tokens: cur, curl, upper, get, lower, curheight, curu, height 

public static int func_309bf0aa266f4d64b5044601e1cd6b15(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
int curL = 1;
return curL;
}


public static int func_d30c898ee9554bc1b419e3c37c1ba920(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
int curL = 1;
return curU;
}


public static double func_b37a3ffa6a634b338f80193a774a1c3f(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
int curL = 1;
return curHeight;
}


*********************************

#### Score: 7.78742


#### Java Tokens: next, println, system, nextint, string, solve, close, int, case 

public static PrintWriter func_5f57a2edef1041caa821806cabf7e9d2(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


public static PrintWriter func_635e262b1c0747db8dc8487584a21618(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


public static PrintWriter func_8a2c51d4894943cfb610a6c0d7c52954(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


*********************************

#### Score: 7.78742


#### Java Tokens: next, print, println, nextint, len, oppa, close, int, case 

public static PrintWriter func_4961a51e396740f1a0a0180470083812(int tN, PrintWriter pw, Scanner sc) { 
 for (int tn = 0; tn < tN; tn++) {
    int n = sc.nextInt();
    int[] p = new int[n];
    int[] len = new int[n];
    for (int i = 0; i < n; i++) {
        p[i] = sc.nextInt();
    }
    for (int i = 0; i < n; i++) {
        len[i] = sc.nextInt();
    }
    boolean[] oppa = new boolean[n];
    pw.print("Case #" + (tn + 1) + ":");
    c: for (int i = 0; i < n; i++) {
        int be = -1;
        for (int j = 0; j < n; j++) {
            if (!oppa[j]) {
                if (be == -1 || len[j] * p[be] > len[be] * p[j]) {
                    be = j;
                }
            }
        }
        oppa[be] = true;
        pw.print(" " + be);
    }
    pw.println();
}
pw.close();
return pw;
}


*********************************

#### Score: 7.68143


#### Java Tokens: codejam_round3_a, next, input, nextdouble, code, round, double, jam, lower, upper, codejam, cuts 

public static double func_229633f53ee64901ac11fea005628a77(int U, int G, int L, Scanner input) { 
 for (int i = 0; i < L; i++) {
    CodeJam_Round3_A.lower[i][0] = input.nextDouble();
    CodeJam_Round3_A.lower[i][1] = input.nextDouble();
}
CodeJam_Round3_A.upper = new double[U][2];
for (int i = 0; i < U; i++) {
    CodeJam_Round3_A.upper[i][0] = input.nextDouble();
    CodeJam_Round3_A.upper[i][1] = input.nextDouble();
}
double g = G;
double[] cuts = new double[G - 1];
return g;
}


public static double func_ac8ad7786f0a41b9af38988de309453e(int U, int G, int L, Scanner input) { 
 CodeJam_Round3_A.lower = new double[L][2];
for (int i = 0; i < L; i++) {
    CodeJam_Round3_A.lower[i][0] = input.nextDouble();
    CodeJam_Round3_A.lower[i][1] = input.nextDouble();
}
CodeJam_Round3_A.upper = new double[U][2];
for (int i = 0; i < U; i++) {
    CodeJam_Round3_A.upper[i][0] = input.nextDouble();
    CodeJam_Round3_A.upper[i][1] = input.nextDouble();
}
double g = G;
double[] cuts = new double[G - 1];
return g;
}


*********************************

#### Score: 7.60536


#### Java Tokens: result, size, get, profit, remove 

public static double func_e06d228fd6fd481bbd83086243020dff(double result, ArrayList<Long> profit) { 
 for (int i = 0; i < profit.size(); i++) {
    result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
}
profit.remove(0);
return result;
}


### Py Tokens: firstsum, nextfirstsum, max, float, lastsum, transistorsum, nextlastsum, currentmax, last, min, sum, range, answer, transistors, minimax, first 

### Py functions

def func_1a22839b4bcb4bf0907f0289cf8b4c62(N, p, q, r, s):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return q

def func_96313c3e661841e8bf7a2a628ba33533(N, p, q, r, s):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return currentmax

def func_54f2845396404ead97c010b70a0fa184(N, p, q, r, s):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return p

def func_4ea3b738a770473c8dfbf66e4b769642(N, p, q, r, s):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return s

def func_d38bb873be9b4b49a044a4def3c5ef75(N, p, q, r, s):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return answer

*********************************

#### Score: 9.60136


#### Java Tokens: sum1, last, mid, sum, first 

public static boolean func_4f17acf744644da1a8f33c3f9f8a2022(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return ok;
}


public static int func_c1fce54b329a4dda803c6c6faea55fc5(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return first;
}


public static long func_0009b51825a54814baa916c27d03a974(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return sum1;
}


*********************************

#### Score: 9.21654


#### Java Tokens: println, min, answer, sum, case 

public static PrintWriter func_50dfd2d6a8df4289a047231a0991b3f7(int t, long min, long sum, PrintWriter out) { 
 double answer = (sum - min) / (double) sum;
out.println("Case #" + (t + 1) + ": " + answer);
return out;
}


public static double func_1f2ef31e98ae448597aef375506de172(int t, long min, long sum, PrintWriter out) { 
 double answer = (sum - min) / (double) sum;
out.println("Case #" + (t + 1) + ": " + answer);
return answer;
}


*********************************

#### Score: 9.06458


#### Java Tokens: sum1, last, mid, sum, first, second 

public static int func_effbc8ba099d4cb68b5d8223fcbc1fcf(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return first;
}


public static int func_b0b18a15cb8741d3818a995dc14bcb14(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return last;
}


public static long func_72f4c22086004ba095364ea9ef291e65(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return sum1;
}


*********************************

#### Score: 8.97328


#### Java Tokens: sub, min, answer, max, subsum, best, sum, math, n-- 

public static long func_46d07cdc1d3b47cca724f82eda3730df(int N, long sum, long[] best, long[] A) { 
 long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return subSum;
}


public static double func_2377f49406914e328597a05e642104f5(int N, long sum, long[] best, long[] A) { 
 long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return answer;
}


public static long func_2aa1ff7540e34c8a9c69da057b4deee9(int N, long sum, long[] best, long[] A) { 
 long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return min;
}


*********************************

#### Score: 8.97328


#### Java Tokens: sub, min, answer, max, subsum, sum, best, math, n-- 

public static double func_08bcd5b6ab6845fa8f67aae442da48b7(int N, long min, long sum, long[] best, long[] A) { 
 long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return answer;
}


public static long func_99dff45c18cd4546a25e6f2af492f72e(int N, long min, long sum, long[] best, long[] A) { 
 long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return min;
}


public static long func_f54dd5f559284bf38ab30e60bee0cebb(int N, long min, long sum, long[] best, long[] A) { 
 long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return subSum;
}


*********************************

#### Score: 8.58718


#### Java Tokens: sum1, sum2, last, mid, sum, first, second 

public static int func_e55407da8f4e4e9f854840e611d2d5b3(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return first;
}


public static boolean func_810eaaf26d08494bbdf3fe57ac729d85(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return ok;
}


public static int func_87acf6a0d38c4b309491fc40e0a13236(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return last;
}


*********************************

#### Score: 8.58718


#### Java Tokens: sum1, last, left, mid, sum, right, first 

public static int func_b556a46c54a94ba1960762af1319d01f(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return first;
}


public static long func_6710317378fb4e78abcaab5d9e87c820(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return sum1;
}


public static long func_c755bda6082f49afabad6d2eaa5853be(long right, long left) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
return mid;
}


*********************************

#### Score: 8.48192


#### Java Tokens: res, min, max, left, sum, math, first, second 

public static double func_4c746d2a2e674d1a9df41c902c6d83cb(int first, int N, int second, long sum, long[] dp) { 
 double res = 0;
for (int i = Math.max(0, first - 100); i < Math.min(N, first + 100); ++i) {
    for (int j = Math.max(0, second - 100); j < Math.min(N, second + 100); ++j) {
        if (j <= i) {
            continue;
        }
        long a = dp[i + 1];
        long b = dp[j] - dp[i + 1];
        long c = dp[N] - dp[j];
        long left = sum - Math.max(a, Math.max(b, c));
        res = Math.max(res, 1.0 * left / sum);
    }
}
return res;
}


*********************************

#### Score: 8.47877


#### Java Tokens: min, last, max, lastx 

public static double func_515a7808cc804f33b25845fc99140891(int lastX) { 
 double min = 0;
double max = lastX;
return min;
}


public static double func_c85420328fa74166a189b942ac0f172e(int lastX) { 
 double min = 0;
double max = lastX;
return max;
}


*********************************

#### Score: 8.15984


#### Java Tokens: sum1, last, left, mid, sum, right, first, second 

public static int func_f80e820de2814c65ab99a82d97a1920a(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return second;
}


public static long func_9e483109833f41be8520f97fd2cb36af(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return sum1;
}


public static boolean func_823329376d504486aaa12addfd4ef6ea(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return ok;
}


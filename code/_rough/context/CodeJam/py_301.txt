### Py Tokens: files, map, goes, seq, ets, int, in1, in2, tcase, readline, open, etries, best, case, index, join, extra, extraif1goesfirst, extraif2goes, range, abs, swap, str, test, y12r5p1, first, infile, codejam, split 

### Py functions

def func_4207e56910f543989acf53b724958e38(ets, p):
    infile = open('codejam/test_files/Y12R5P1/A.in')
    T = int(infile.readline())
    for tcase in range(T):
        N = int(infile.readline())
        Ls = map(int, infile.readline().split())
        Ps = map(int, infile.readline().split())
        etries = [ets[p] for p in Ps]
        seq = [(index, Ls[index], etries[index]) for index in range(N)]
        for k in range(N):
            best = k
            for s in range(k + 1, N):
                in1 = seq[best][0]
                L1 = seq[best][1]
                E1 = seq[best][2]
                in2 = seq[s][0]
                L2 = seq[s][1]
                E2 = seq[s][2]
                extra_if_1_goes_first = (E2 - 1) * E1 * L1
                extra_if_2_goes = (E1 - 1) * E2 * L2
                if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
                    if in2 < in1:
                        best = s
                elif extra_if_2_goes < extra_if_1_goes_first:
                    best = s
            swap = seq[best]
            seq[best] = seq[k]
            seq[k] = swap
        print 'Case #%d:' % (tcase + 1),
        print ' '.join(map(str, [seq[i][0] for i in range(N)]))
    if in2 < in1:
        best = s
    return L1

def func_96cfbb492161479a8c610a25d0df715b(ets, p):
    infile = open('codejam/test_files/Y12R5P1/A.in')
    T = int(infile.readline())
    for tcase in range(T):
        N = int(infile.readline())
        Ls = map(int, infile.readline().split())
        Ps = map(int, infile.readline().split())
        etries = [ets[p] for p in Ps]
        seq = [(index, Ls[index], etries[index]) for index in range(N)]
        for k in range(N):
            best = k
            for s in range(k + 1, N):
                in1 = seq[best][0]
                L1 = seq[best][1]
                E1 = seq[best][2]
                in2 = seq[s][0]
                L2 = seq[s][1]
                E2 = seq[s][2]
                extra_if_1_goes_first = (E2 - 1) * E1 * L1
                extra_if_2_goes = (E1 - 1) * E2 * L2
                if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
                    if in2 < in1:
                        best = s
                elif extra_if_2_goes < extra_if_1_goes_first:
                    best = s
            swap = seq[best]
            seq[best] = seq[k]
            seq[k] = swap
        print 'Case #%d:' % (tcase + 1),
        print ' '.join(map(str, [seq[i][0] for i in range(N)]))
    if in2 < in1:
        best = s
    return Ps

def func_c9cf9b5cd4fb486bb4b0887caaaa4e74(ets, p):
    infile = open('codejam/test_files/Y12R5P1/A.in')
    T = int(infile.readline())
    for tcase in range(T):
        N = int(infile.readline())
        Ls = map(int, infile.readline().split())
        Ps = map(int, infile.readline().split())
        etries = [ets[p] for p in Ps]
        seq = [(index, Ls[index], etries[index]) for index in range(N)]
        for k in range(N):
            best = k
            for s in range(k + 1, N):
                in1 = seq[best][0]
                L1 = seq[best][1]
                E1 = seq[best][2]
                in2 = seq[s][0]
                L2 = seq[s][1]
                E2 = seq[s][2]
                extra_if_1_goes_first = (E2 - 1) * E1 * L1
                extra_if_2_goes = (E1 - 1) * E2 * L2
                if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
                    if in2 < in1:
                        best = s
                elif extra_if_2_goes < extra_if_1_goes_first:
                    best = s
            swap = seq[best]
            seq[best] = seq[k]
            seq[k] = swap
        print 'Case #%d:' % (tcase + 1),
        print ' '.join(map(str, [seq[i][0] for i in range(N)]))
    if in2 < in1:
        best = s
    return Ls

def func_a85a470606fb4b74a4b44a1a07a85653(ets, p):
    infile = open('codejam/test_files/Y12R5P1/A.in')
    T = int(infile.readline())
    for tcase in range(T):
        N = int(infile.readline())
        Ls = map(int, infile.readline().split())
        Ps = map(int, infile.readline().split())
        etries = [ets[p] for p in Ps]
        seq = [(index, Ls[index], etries[index]) for index in range(N)]
        for k in range(N):
            best = k
            for s in range(k + 1, N):
                in1 = seq[best][0]
                L1 = seq[best][1]
                E1 = seq[best][2]
                in2 = seq[s][0]
                L2 = seq[s][1]
                E2 = seq[s][2]
                extra_if_1_goes_first = (E2 - 1) * E1 * L1
                extra_if_2_goes = (E1 - 1) * E2 * L2
                if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
                    if in2 < in1:
                        best = s
                elif extra_if_2_goes < extra_if_1_goes_first:
                    best = s
            swap = seq[best]
            seq[best] = seq[k]
            seq[k] = swap
        print 'Case #%d:' % (tcase + 1),
        print ' '.join(map(str, [seq[i][0] for i in range(N)]))
    if in2 < in1:
        best = s
    return T

def func_9b90ee10532e4b8d95435f3b59a2bf7d(ets, p):
    infile = open('codejam/test_files/Y12R5P1/A.in')
    T = int(infile.readline())
    for tcase in range(T):
        N = int(infile.readline())
        Ls = map(int, infile.readline().split())
        Ps = map(int, infile.readline().split())
        etries = [ets[p] for p in Ps]
        seq = [(index, Ls[index], etries[index]) for index in range(N)]
        for k in range(N):
            best = k
            for s in range(k + 1, N):
                in1 = seq[best][0]
                L1 = seq[best][1]
                E1 = seq[best][2]
                in2 = seq[s][0]
                L2 = seq[s][1]
                E2 = seq[s][2]
                extra_if_1_goes_first = (E2 - 1) * E1 * L1
                extra_if_2_goes = (E1 - 1) * E2 * L2
                if abs(extra_if_1_goes_first - extra_if_2_goes) < 1e-09:
                    if in2 < in1:
                        best = s
                elif extra_if_2_goes < extra_if_1_goes_first:
                    best = s
            swap = seq[best]
            seq[best] = seq[k]
            seq[k] = swap
        print 'Case #%d:' % (tcase + 1),
        print ' '.join(map(str, [seq[i][0] for i in range(N)]))
    if in2 < in1:
        best = s
    return E2

*********************************

#### Score: 9.94322


#### Java Tokens: index, first 

public static int func_4b5ca9d0203544b792c3ca8bbcf06ff0(int first, int index) { 
 first = index;
++index;
return first;
}


*********************************

#### Score: 9.26776


#### Java Tokens: temp, index, first 

public static long func_23c1256235264e8abccace9d53b5dce5(int first, int index, long temp) { 
 temp = 0;
index = first + 1;
return temp;
}


public static int func_652a267f33464428ad69a3b5ee219807(int first, int index, long temp) { 
 temp = 0;
index = first + 1;
return index;
}


*********************************

#### Score: 9.21429


#### Java Tokens: println, min, test, max, index, sum, main, math, case 

public static long func_f3176e2ca8e24c69969d89457a93153d(int test, int n, int[] a, long[] sum) { 
 for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + a[i];
long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
Main.out.println("Case #" + test + ": " + (1.0 * (sum[n] - x) / sum[n]));
return x;
}


public static long func_7bd3fd10c2ce43518465f1b9d52c87de(int test, int n, long[] sum) { 
 long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
Main.out.println("Case #" + test + ": " + (1.0 * (sum[n] - x) / sum[n]));
return x;
}


public static int func_b9ca142c51d4420fb81e954380b16e1c(int test, int n, int[] a, long[] sum) { 
 sum[0] = 0;
for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + a[i];
long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
Main.out.println("Case #" + test + ": " + (1.0 * (sum[n] - x) / sum[n]));
return index;
}


*********************************

#### Score: 8.68460


#### Java Tokens: next, println, test, nextint, case, int 

public static PrintWriter func_c8c26e20c8264cafb4030a5259e90a7a(int test, PrintWriter pw, Scanner sc) { 
 pw.println("Case #" + test + ": ");
int w = sc.nextInt();
int l = sc.nextInt();
int u = sc.nextInt();
int g = sc.nextInt();
double sl = 0;
double su = 0;
return pw;
}


public static PrintWriter func_a9e112db93b3410f9a8ef0d6f76e8385(int test, PrintWriter pw, Scanner sc) { 
 pw.println("Case #" + test + ": ");
int w = sc.nextInt();
return pw;
}


public static double func_571532e9809f41ef811e496f09f58193(int test, PrintWriter pw, Scanner sc) { 
 pw.println("Case #" + test + ": ");
int w = sc.nextInt();
int l = sc.nextInt();
int u = sc.nextInt();
int g = sc.nextInt();
double sl = 0;
double su = 0;
return sl;
}


*********************************

#### Score: 8.68191


#### Java Tokens: temp, index, first, second 

public static int func_2d9ace4459b346ab80b8ce979d931288(int N) { 
 int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
return index;
}


public static long func_6dc942375213487eb16fe37125a5743c(int N) { 
 int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
return temp;
}


public static int func_556f5d73cb784587b90803bfe93d0758(int N) { 
 int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
return first;
}


*********************************

#### Score: 8.68191


#### Java Tokens: arr, temp, index, first 

public static long func_e043eef61dd045869a98ac752aec1573(int first, int index, long temp, long[] arr) { 
 temp += arr[index];
first = index;
return temp;
}


public static long func_a142cc7eaf7740b8aec91ee7ae41c015(int first, int index, long temp, long[] arr) { 
 temp += arr[index];
first = index;
++index;
return temp;
}


public static int func_b0acbfa5933648f6bd0e2d2d3f3b9e62(int first, int index, long temp, long[] arr) { 
 temp += arr[index];
first = index;
return first;
}


*********************************

#### Score: 8.31666


#### Java Tokens: abs, min, max, index, sum, math 

public static long func_0cbc15f5157848e6a6553949ccdd7616(int z, int n, int index, long min) { 
 while (z < n - 1 && Math.abs(A.sum(z, index) - A.sum(index + 1, n - 1)) > Math.abs(A.sum(z, index + 1) - A.sum(index + 2, n - 1))) {
    index++;
}
min = Math.min(min, Math.max(A.sum(0, z - 1), Math.max(A.sum(z, index), A.sum(index + 1, n - 1))));
return min;
}


*********************************

#### Score: 8.16893


#### Java Tokens: arr, temp, avg, index, first 

public static long func_d8da5f841a0e44dfba528261274a738b(int first, int N, long avg, long temp, long[] arr) { 
 int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
return temp;
}


public static long func_bbc1e3fc468144aaa2626c323e3a30cb(int first, int N, long avg, long temp, long[] arr) { 
 int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
return temp;
}


public static long func_4f4930d995394d52bb76c83fd81417b1(int first, int N, long avg, long[] arr) { 
 long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
return temp;
}


*********************************

#### Score: 7.71603


#### Java Tokens: arr, temp, avg, index, first, second 

public static int func_1d54540b5e6744f9bb65726ba93eb285(int N, long avg, long[] arr) { 
 int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
while (temp < avg && index < N) {
    temp += arr[index];
    second = index;
    ++index;
}
return first;
}


public static int func_d1c305c1a77d4bbf8f15923065ecfed2(int first, int N, long avg, long[] arr) { 
 int second = N - 1;
long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
return index;
}


public static int func_cbf10f17665c46f194577a95242d88e4(int N, long avg, long[] arr) { 
 int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
while (temp < avg && index < N) {
    temp += arr[index];
    first = index;
    ++index;
}
temp = 0;
index = first + 1;
while (temp < avg && index < N) {
    temp += arr[index];
    second = index;
    ++index;
}
return index;
}


*********************************

#### Score: 7.71603


#### Java Tokens: temp, avg, index, sum, first, second 

public static int func_b52a97252ea7439db70ddb9b02e3654b(int N, long sum) { 
 long avg = sum / 3;
int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
return index;
}


public static int func_a374559ffd654b7990552f05bf9dfa4e(int N, long sum) { 
 long avg = sum / 3;
int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
return first;
}


public static long func_ec1c47004c6a4f00922c3765b567f5b8(int N, long sum) { 
 long avg = sum / 3;
int first = 0;
int second = N - 1;
long temp = 0;
int index = 0;
return temp;
}


### Py Tokens: bestprofit, treba, profit, max, best, vyhra 

### Py functions

def func_cf71a8fc976a4d078ad45712448b240f(best_profit, i, pp, treba, vyhra):
    pp = 1.0 / (37 - i)
    best_profit = max(best_profit, 36.0 * pp * vyhra - treba - i)
    return i

def func_ac91d42cfe574751b2345e54571a33ee(best_profit, i, pp, treba, vyhra):
    pp = 1.0 / (37 - i)
    best_profit = max(best_profit, 36.0 * pp * vyhra - treba - i)
    return pp

*********************************

#### Score: 7.45880


#### Java Tokens: result, money, bestresult, max, best, math, profit, remove, money-- 

public static double func_0dfa8a4bfd2d4612b8aeb0165f501cde(long money, double result, double bestResult, ArrayList<Long> profit) { 
 profit.remove(0);
money--;
bestResult = Math.max(bestResult, result);
return bestResult;
}


*********************************

#### Score: 6.92178


#### Java Tokens: result, collections, bestresult, best, sort, profit 

public static double func_2e1d178b8cfb44799660e97759d4a338(ArrayList<Long> profit) { 
 // out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


*********************************

#### Score: 6.82246


#### Java Tokens: result, size, money, bestresult, max, get, best, math, profit, remove, money-- 

public static double func_84c1eb0c33d54eddbd685da349de93c0(long money, double result, double bestResult, ArrayList<Long> profit) { 
 for (int i = 0; i < profit.size(); i++) {
    result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
}
profit.remove(0);
money--;
bestResult = Math.max(bestResult, result);
return bestResult;
}


public static double func_ac0d7afdd23a46a19fd31baee6feac7a(long money, double result, double bestResult, ArrayList<Long> profit) { 
 for (int i = 0; i < profit.size(); i++) {
    result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
}
profit.remove(0);
money--;
bestResult = Math.max(bestResult, result);
return result;
}


*********************************

#### Score: 6.29184


#### Java Tokens: bestresult, max, startresult, start, best, remove, money--, result, money, size, get, math, profit 

public static double func_3416cddd3f024f12931171afe75f8f3e(long money, double startResult, double bestResult, ArrayList<Long> profit) { 
 // remaining
double result = startResult + money;
for (int i = 0; i < profit.size(); i++) {
    result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
}
profit.remove(0);
money--;
bestResult = Math.max(bestResult, result);
return bestResult;
}


public static double func_1f76bedb69c444e3bddf6a112e664678(long money, double startResult, double bestResult, ArrayList<Long> profit) { 
 // remaining
double result = startResult + money;
for (int i = 0; i < profit.size(); i++) {
    result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
}
profit.remove(0);
money--;
bestResult = Math.max(bestResult, result);
return result;
}


*********************************

#### Score: 6.29184


#### Java Tokens: bestresult, max, startresult, start, best, remove, money--, result, size, money, get, math, profit 

public static double func_f90d3f80403549adb840dcbdf52cab2c(long money, double startResult, ArrayList<Long> profit) { 
 double bestResult = 0;
while (profit.size() > 0 && money >= 0) {
    // remaining
    double result = startResult + money;
    for (int i = 0; i < profit.size(); i++) {
        result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
    }
    profit.remove(0);
    money--;
    bestResult = Math.max(bestResult, result);
}
return bestResult;
}


public static double func_9a85917bba6549a09cc9386595f49646(long money, double startResult, double bestResult, ArrayList<Long> profit) { 
 while (profit.size() > 0 && money >= 0) {
    // remaining
    double result = startResult + money;
    for (int i = 0; i < profit.size(); i++) {
        result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
    }
    profit.remove(0);
    money--;
    bestResult = Math.max(bestResult, result);
}
return bestResult;

}


*********************************

#### Score: 6.24167


#### Java Tokens: add, result, money, collections, bestresult, best, sort, profit 

public static long func_343bdcca14d54e9ca38bdab18991bfa7(long l, long money, long[] a, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return money;
}


public static double func_5f96bc5b17054aab93bb46045116212e(long l, long money, long[] a, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


*********************************

#### Score: 5.96179


#### Java Tokens: profit 

public static double func_4980cdf2c061441bbb5abb88171d29dd(long l, long f) { 
 if (l == f - 1)
    return 0;
double profit = 0;
return profit;
}


*********************************

#### Score: 5.84261


#### Java Tokens: bestresult, max, startresult, start, best, sort, remove, money--, result, size, money, collections, get, math, profit 

public static double func_e7ec3c235d2b46fd9a35141af4e84f15(long money, double startResult, ArrayList<Long> profit) { 
 // out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
while (profit.size() > 0 && money >= 0) {
    // remaining
    double result = startResult + money;
    for (int i = 0; i < profit.size(); i++) {
        result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
    }
    profit.remove(0);
    money--;
    bestResult = Math.max(bestResult, result);
}
return bestResult;
}


*********************************

#### Score: 5.64288


#### Java Tokens: add, bestresult, max, startresult, start, best, sort, remove, money--, result, money, size, collections, get, math, profit 

public static long func_9c3e3d6d30544c8a957540405ee7cbfc(long l, long money, long[] a, double startResult, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
while (profit.size() > 0 && money >= 0) {
    // remaining
    double result = startResult + money;
    for (int i = 0; i < profit.size(); i++) {
        result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
    }
    profit.remove(0);
    money--;
    bestResult = Math.max(bestResult, result);
}
return money;
}


public static double func_5da68e943d804a1c85429c29bdb5e585(long l, long money, long[] a, double startResult, ArrayList<Long> profit) { 
 for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
while (profit.size() > 0 && money >= 0) {
    // remaining
    double result = startResult + money;
    for (int i = 0; i < profit.size(); i++) {
        result += 36.0 * (profit.get(i)) * (1.0 / profit.size());
    }
    profit.remove(0);
    money--;
    bestResult = Math.max(bestResult, result);
}
return bestResult;
}


*********************************

#### Score: 5.53913


#### Java Tokens: get, profit 

public static long func_51dcfea0f5e14b8ba5657a8c8ea478d6(long l, long f) { 
 if (l == f - 1)
    return 0;
double profit = 0;
long get = 0;
return get;
}


public static double func_a7ef17aa76ce416b819c7fa411e9cd6d(long l, long f) { 
 if (l == f - 1)
    return 0;
double profit = 0;
long get = 0;
return profit;
}


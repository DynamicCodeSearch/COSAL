### Py Tokens: getsum, min, xrange, total, best, totalsum 

### Py functions

def func_c3d2b9b1e5814d81a134f2482f9ba019(A, N, i, total):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return A

def func_13df836ef78742d4a43f9477a4c4326c(N, a, total, totalsum):
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return total

def func_513fd832bf0142f291d9da40a673bf79(N, a, total, totalsum):
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return total

def func_c64acb7055e647d5b536e3537acf3edc(N, a, total, totalsum):
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return a

def func_80ce884df3ab46ee984e4cadabde2e24(N, a, i, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return i

*********************************

#### Score: 7.68534


#### Java Tokens: total, min, choose, best, math, partials 

public static long func_701c4c11ee9d48d3bd1d471287592c93(int n, long best, long[] partials) { 
 for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return total;
}


public static long func_e1cbff53008746a18da76ba7959b74b8(int n, long best, long[] partials) { 
 for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return best;
}


public static double func_d2b8afc827a647d9a218353eb4f00786(int n, long best, long[] partials) { 
 for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return 1 - (double) (best) / total;

}


*********************************

#### Score: 7.68534


#### Java Tokens: total, min, best, choose, math, partials 

public static double func_23166e1a11be459588992ed8af3f0a9b(int n, long[] partials) { 
 long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return 1 - (double) (best) / total;

}


public static long func_ae668c627d994641b8bcdeaa54588232(int n, long[] partials) { 
 long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return best;
}


public static long func_3663a8f012f74dfd92ad5ff68910fdc7(int n, long[] partials) { 
 long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return total;
}


*********************************

#### Score: 7.28424


#### Java Tokens: total, min, array, best, choose, math, partials 

public static long func_103c3e61f0024df99db71f7ca64905e0(int s, int r, int p, int q, int n) { 
 int[] array = new int[n];
for (int i = 0; i < n; i++) {
    array[i] = (i * p + q) % r + s;
// System.out.print(" "+array[i]);
}
// System.out.println();
long[] partials = new long[n + 1];
for (int i = 1; i <= n; i++) partials[i] = partials[i - 1] + array[i - 1];
long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return best;
}


public static double func_6bc79a5ffdbe47bf9a17d38199d2ed59(int n, int[] array, long[] partials) { 
 for (int i = 1; i <= n; i++) partials[i] = partials[i - 1] + array[i - 1];
long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return 1 - (double) (best) / total;

}


public static long func_b490e0d7a5a14a13b0d2115ba5646ca8(int n, int[] array, long[] partials) { 
 for (int i = 1; i <= n; i++) partials[i] = partials[i - 1] + array[i - 1];
long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return total;
}


*********************************

#### Score: 6.85276


#### Java Tokens: total, best, partials 

public static double func_c893be9ac8e8493aa18d668330a5279f(int n, long best, long[] partials) { 
 long total = partials[n];
return 1 - (double) (best) / total;

}


*********************************

#### Score: 6.04320


#### Java Tokens: next, total, min, nextint, array, scanner, best, choose, math, int, partials 

public static int[] func_4fa26588fb8a4e978b0ece27a7072e05(Scanner scanner) { 
 int n = scanner.nextInt();
int p = scanner.nextInt();
int q = scanner.nextInt();
int r = scanner.nextInt();
int s = scanner.nextInt();
int[] array = new int[n];
for (int i = 0; i < n; i++) {
    array[i] = (i * p + q) % r + s;
// System.out.print(" "+array[i]);
}
// System.out.println();
long[] partials = new long[n + 1];
for (int i = 1; i <= n; i++) partials[i] = partials[i - 1] + array[i - 1];
long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return array;
}


public static int func_913657d22fa34143bfb5267f80482005(int p, int q, int n, Scanner scanner) { 
 int r = scanner.nextInt();
int s = scanner.nextInt();
int[] array = new int[n];
for (int i = 0; i < n; i++) {
    array[i] = (i * p + q) % r + s;
// System.out.print(" "+array[i]);
}
// System.out.println();
long[] partials = new long[n + 1];
for (int i = 1; i <= n; i++) partials[i] = partials[i - 1] + array[i - 1];
long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return s;
}


public static double func_bb381b534f954df7b6a4ee305d28d44f(int n, Scanner scanner) { 
 int p = scanner.nextInt();
int q = scanner.nextInt();
int r = scanner.nextInt();
int s = scanner.nextInt();
int[] array = new int[n];
for (int i = 0; i < n; i++) {
    array[i] = (i * p + q) % r + s;
// System.out.print(" "+array[i]);
}
// System.out.println();
long[] partials = new long[n + 1];
for (int i = 1; i <= n; i++) partials[i] = partials[i - 1] + array[i - 1];
long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
long total = partials[n];
return 1 - (double) (best) / total;

}


*********************************

#### Score: 5.25501


#### Java Tokens: cur, min, max, best, math 

public static long func_3f962ac00d7b48b8ab8d40973dba07f9(int n, int r, long cur, long best, long[] s) { 
 cur = Math.max(cur, s[n] - s[r]);
best = Math.min(best, cur);
return cur;
}


public static long func_15c2af9aa3224dbd94712e22856ad765(int n, int r, int l, long best, long[] s) { 
 long cur = 0;
cur = Math.max(cur, s[l - 1]);
cur = Math.max(cur, s[r] - s[l - 1]);
cur = Math.max(cur, s[n] - s[r]);
best = Math.min(best, cur);
return cur;
}


public static long func_6bc891ef9d5146b8b2c34fd22e73c2e3(int n, int r, long cur, long best, long[] s) { 
 cur = Math.max(cur, s[n] - s[r]);
best = Math.min(best, cur);
return best;
}


*********************************

#### Score: 5.25501


#### Java Tokens: min, best, choose, math, partials 

public static long func_d44acbe2a8b04c89a217664d1e02af2b(int n, long[] partials) { 
 long best = partials[n];
for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
return best;
}


*********************************

#### Score: 5.25501


#### Java Tokens: min, max, sum, best, math 

public static long func_2ce763c92ed940a597a196483683cf96(long x, long best, long sum, Long down) { 
 long now = Math.max(down, Math.max(x - down, sum - x));
best = Math.min(best, now);
return best;
}


public static long func_20b219fd65fb4abab993706fdfb74c0a(long x, long best, long sum, Long down) { 
 long now = Math.max(down, Math.max(x - down, sum - x));
best = Math.min(best, now);
return now;
}


public static long func_43d26346f2ae4f848c0c47dff88b36f4(long x, long best, long sum, Long up) { 
 long now = Math.max(up, Math.max(x - up, sum - x));
best = Math.min(best, now);
return now;
}


*********************************

#### Score: 5.25501


#### Java Tokens: min, choose, best, math, partials 

public static long func_94251560749544f681a8fdef0185c362(int i, int n, long best, long[] partials) { 
 long now = A.choose(partials, i, n);
// System.out.println("  "+i+": "+now);
best = Math.min(best, now);
return now;
}


public static long func_d9646092dc554347a98854222cbb87c2(int i, int n, long best, long[] partials) { 
 long now = A.choose(partials, i, n);
// System.out.println("  "+i+": "+now);
best = Math.min(best, now);
return best;
}


public static long func_ce948fa4cfae4fe7acd17b3c5268ec8a(int n, long best, long[] partials) { 
 for (int i = 0; i < n; i++) {
    long now = A.choose(partials, i, n);
    // System.out.println("  "+i+": "+now);
    best = Math.min(best, now);
}
return best;
}


*********************************

#### Score: 5.25501


#### Java Tokens: sub, min, subsum, best, sum 

public static long func_600850d9d4c84ad9b14724eaeddc2a00(int N, long[] best) { 
 long min = best[N - 1];
long subSum = 0;
return min;
}


public static long func_eaaf29a53dd1406b8e32a14e1052ea99(int N, long[] best) { 
 long min = best[N - 1];
long subSum = 0;
return subSum;
}


### Py Tokens: firstsum, nextfirstsum, int, max, float, lastsum, transistorsum, nextlastsum, close, currentmax, readline, case, last, min, minimax, infile, testcase, range, split, answer, transistors, sum, first 

### Py functions

def func_fbf68df54a554f998a0d9b2c56b2a68d(infile, n):
    for testcase in range(n):
        [N, p, q, r, s] = [int(x) for x in infile.readline().split()]
        transistors = [((i * p + q) % r + s) for i in range(N)]
        transistorsum = sum(transistors)
        first = 0
        last = N
        firstsum = 0
        lastsum = 0
        minimax = transistorsum
        while last - first != 1:
            nextfirstsum = firstsum + transistors[first]
            nextlastsum = lastsum + transistors[last - 1]
            if nextfirstsum < nextlastsum:
                firstsum += transistors[first]
                first += 1
            else:
                last -= 1
                lastsum += transistors[last]
            currentmax = max([firstsum, lastsum, transistorsum - firstsum -
                lastsum])
            minimax = min(currentmax, minimax)
        answer = float(transistorsum - minimax) / float(transistorsum)
        print 'Case #%d: %.10f' % (testcase + 1, answer)
    infile.close()
    return n

*********************************

#### Score: 11.70988


#### Java Tokens: println, min, answer, sum, case 

public static PrintWriter func_50dfd2d6a8df4289a047231a0991b3f7(int t, long min, long sum, PrintWriter out) { 
 double answer = (sum - min) / (double) sum;
out.println("Case #" + (t + 1) + ": " + answer);
return out;
}


public static double func_1f2ef31e98ae448597aef375506de172(int t, long min, long sum, PrintWriter out) { 
 double answer = (sum - min) / (double) sum;
out.println("Case #" + (t + 1) + ": " + answer);
return answer;
}


*********************************

#### Score: 11.04271


#### Java Tokens: next, sub, beforehalf, half, nextint, max, best, sum, int, beforehalfsum, n--, println, min, answer, subsum, math, value, close, case 

public static PrintWriter func_9a9a24dcd694460dbbfb92447faf4d7a(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int t = 0; t < T; t++) {
    int N = in.nextInt();
    long p = in.nextInt();
    long q = in.nextInt();
    long r = in.nextInt();
    long s = in.nextInt();
    long[] A = new long[N];
    for (int n = 0; n < N; n++) {
        A[n] = (n * p + q) % r + s;
    }
    long[] best = new long[N];
    int beforeHalf = 0;
    long beforeHalfSum = 0;
    long sum = 0;
    for (int n = 0; n < N; n++) {
        sum += A[n];
        while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
            beforeHalfSum += A[beforeHalf];
            beforeHalf++;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0;
    for (int n = N - 1; n >= 1; n--) {
        subSum += A[n];
        min = Math.min(min, Math.max(subSum, best[n - 1]));
    }
    double answer = (sum - min) / (double) sum;
    out.println("Case #" + (t + 1) + ": " + answer);
}
out.close();
return out;
}


public static PrintWriter func_e0cfecc848a64ba4b500f77f3a1bb869(int T, PrintWriter out, Scanner in) { 
 for (int t = 0; t < T; t++) {
    int N = in.nextInt();
    long p = in.nextInt();
    long q = in.nextInt();
    long r = in.nextInt();
    long s = in.nextInt();
    long[] A = new long[N];
    for (int n = 0; n < N; n++) {
        A[n] = (n * p + q) % r + s;
    }
    long[] best = new long[N];
    int beforeHalf = 0;
    long beforeHalfSum = 0;
    long sum = 0;
    for (int n = 0; n < N; n++) {
        sum += A[n];
        while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
            beforeHalfSum += A[beforeHalf];
            beforeHalf++;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0;
    for (int n = N - 1; n >= 1; n--) {
        subSum += A[n];
        min = Math.min(min, Math.max(subSum, best[n - 1]));
    }
    double answer = (sum - min) / (double) sum;
    out.println("Case #" + (t + 1) + ": " + answer);
}
out.close();
return out;
}


public static int func_53a9722e999b412090cc0173455c667a(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int t = 0; t < T; t++) {
    int N = in.nextInt();
    long p = in.nextInt();
    long q = in.nextInt();
    long r = in.nextInt();
    long s = in.nextInt();
    long[] A = new long[N];
    for (int n = 0; n < N; n++) {
        A[n] = (n * p + q) % r + s;
    }
    long[] best = new long[N];
    int beforeHalf = 0;
    long beforeHalfSum = 0;
    long sum = 0;
    for (int n = 0; n < N; n++) {
        sum += A[n];
        while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
            beforeHalfSum += A[beforeHalf];
            beforeHalf++;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0;
    for (int n = N - 1; n >= 1; n--) {
        subSum += A[n];
        min = Math.min(min, Math.max(subSum, best[n - 1]));
    }
    double answer = (sum - min) / (double) sum;
    out.println("Case #" + (t + 1) + ": " + answer);
}
out.close();
return T;
}


*********************************

#### Score: 9.60136


#### Java Tokens: sum1, last, mid, sum, first 

public static boolean func_4f17acf744644da1a8f33c3f9f8a2022(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return ok;
}


public static int func_c1fce54b329a4dda803c6c6faea55fc5(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return first;
}


public static long func_0009b51825a54814baa916c27d03a974(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return sum1;
}


*********************************

#### Score: 9.06458


#### Java Tokens: sum1, last, mid, sum, first, second 

public static int func_effbc8ba099d4cb68b5d8223fcbc1fcf(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return first;
}


public static int func_b0b18a15cb8741d3818a995dc14bcb14(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return last;
}


public static long func_72f4c22086004ba095364ea9ef291e65(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
return sum1;
}


*********************************

#### Score: 8.97328


#### Java Tokens: sub, min, answer, max, subsum, best, sum, math, n-- 

public static long func_46d07cdc1d3b47cca724f82eda3730df(int N, long sum, long[] best, long[] A) { 
 long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return subSum;
}


public static double func_2377f49406914e328597a05e642104f5(int N, long sum, long[] best, long[] A) { 
 long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return answer;
}


public static long func_2aa1ff7540e34c8a9c69da057b4deee9(int N, long sum, long[] best, long[] A) { 
 long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return min;
}


*********************************

#### Score: 8.97328


#### Java Tokens: sub, min, answer, max, subsum, sum, best, math, n-- 

public static double func_08bcd5b6ab6845fa8f67aae442da48b7(int N, long min, long sum, long[] best, long[] A) { 
 long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return answer;
}


public static long func_99dff45c18cd4546a25e6f2af492f72e(int N, long min, long sum, long[] best, long[] A) { 
 long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return min;
}


public static long func_f54dd5f559284bf38ab30e60bee0cebb(int N, long min, long sum, long[] best, long[] A) { 
 long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
return subSum;
}


*********************************

#### Score: 8.89639


#### Java Tokens: next, sub, beforehalf, half, nextint, max, best, sum, int, beforehalfsum, n--, println, min, answer, subsum, math, value, case 

public static long[] func_cf1cf1401cdc42e2aa3f942cb630c4ed(int N, int t, PrintWriter out, Scanner in) { 
 long p = in.nextInt();
long q = in.nextInt();
long r = in.nextInt();
long s = in.nextInt();
long[] A = new long[N];
for (int n = 0; n < N; n++) {
    A[n] = (n * p + q) % r + s;
}
long[] best = new long[N];
int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
out.println("Case #" + (t + 1) + ": " + answer);
return A;
}


public static long func_91d231a9b59142f3b94e014443b11e33(int N, int t, long p, PrintWriter out, Scanner in) { 
 long q = in.nextInt();
long r = in.nextInt();
long s = in.nextInt();
long[] A = new long[N];
for (int n = 0; n < N; n++) {
    A[n] = (n * p + q) % r + s;
}
long[] best = new long[N];
int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
out.println("Case #" + (t + 1) + ": " + answer);
return min;
}


public static long func_0234ec46279e46fea6c5ff7ed3abbe29(int t, PrintWriter out, Scanner in) { 
 int N = in.nextInt();
long p = in.nextInt();
long q = in.nextInt();
long r = in.nextInt();
long s = in.nextInt();
long[] A = new long[N];
for (int n = 0; n < N; n++) {
    A[n] = (n * p + q) % r + s;
}
long[] best = new long[N];
int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
out.println("Case #" + (t + 1) + ": " + answer);
return min;
}


*********************************

#### Score: 8.58718


#### Java Tokens: sum1, sum2, last, mid, sum, first, second 

public static int func_e55407da8f4e4e9f854840e611d2d5b3(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return first;
}


public static boolean func_810eaaf26d08494bbdf3fe57ac729d85(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return ok;
}


public static int func_87acf6a0d38c4b309491fc40e0a13236(int n, long mid, long[] a) { 
 int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
int second = n - 1;
long sum2 = 0;
return last;
}


*********************************

#### Score: 8.58718


#### Java Tokens: sum1, last, left, mid, sum, right, first 

public static int func_b556a46c54a94ba1960762af1319d01f(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return first;
}


public static long func_6710317378fb4e78abcaab5d9e87c820(int n, long right, long left, long[] a) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
while (first != n && sum1 < mid) {
    sum1 += a[first];
    first++;
}
return sum1;
}


public static long func_c755bda6082f49afabad6d2eaa5853be(long right, long left) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
int first = 0;
return mid;
}


*********************************

#### Score: 8.54586


#### Java Tokens: sub, beforehalf, half, max, sum, best, beforehalfsum, n--, println, min, answer, subsum, math, value, case 

public static int func_ace741f1a9b449f09c4f626ed09c8865(int N, int t, long[] best, long[] A, PrintWriter out) { 
 int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
out.println("Case #" + (t + 1) + ": " + answer);
return beforeHalf;
}


public static long func_0ebc34ab40ab4bfa9b13027b995ec2d0(int N, int t, long[] best, long[] A, PrintWriter out) { 
 int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
out.println("Case #" + (t + 1) + ": " + answer);
return subSum;
}


public static long func_74106ad5ea1d4f33ae85afd95370ea81(int N, int t, long[] best, long[] A, PrintWriter out) { 
 int beforeHalf = 0;
long beforeHalfSum = 0;
long sum = 0;
for (int n = 0; n < N; n++) {
    sum += A[n];
    while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
        beforeHalfSum += A[beforeHalf];
        beforeHalf++;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
        max = Math.min(max, value);
    }
    best[n] = max;
}
long min = best[N - 1];
long subSum = 0;
for (int n = N - 1; n >= 1; n--) {
    subSum += A[n];
    min = Math.min(min, Math.max(subSum, best[n - 1]));
}
double answer = (sum - min) / (double) sum;
out.println("Case #" + (t + 1) + ": " + answer);
return beforeHalfSum;
}


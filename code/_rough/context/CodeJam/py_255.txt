### Py Tokens: sort, case, range, result, str, append, string 

### Py functions

def func_6835df0885e846d2b7f818b064881045(i, n, p, result):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return string

def func_9576032f7b5641d0a3bb2da76dfd9f6b(i, n, p):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return i

def func_0e72c2443b8544cbbf398369d0a61714(i, m, n, p, result):
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return i

def func_d815390f7e4d4e96aafb46a334705124(i, n, p, result):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return result

def func_8e6d331f81014c1dabaf4cbb0ff4d2e5(i, n, p, result):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return n

*********************************

#### Score: 9.17462


#### Java Tokens: result, println, task, system, string, get, task1, getresult, case 

public static String func_61d176718ba14544853fc17b1a46f1fe(int i) { 
 String result = Task1.getResult();
System.out.println("Case #" + i + ": " + result);
return result;
}


*********************************

#### Score: 8.06354


#### Java Tokens: add, string, max, index, integer, arraylist, list, result, size, array, builder, stringbuilder, append 

public static boolean[] func_8a7bff4180934947805842e57e503277(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return u;
}


public static StringBuilder func_40420e1a67264bd89dd150fbc26cf837(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb;
}


public static List<Integer> func_f05ac0d737f747fb9cfb0f670154f4d8(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return result;
}


*********************************

#### Score: 8.03843


#### Java Tokens: result, game, print, testnum, perfect, string, test, num, format, #%d:, perfectgame, case 

public static int func_a5c2a17df3fe48c9b0708dc00cd0bb76(int testNum) { 
 final int result = 0;
PerfectGame.out.print(String.format("Case #%d:", testNum));
return result;
}


*********************************

#### Score: 8.02886


#### Java Tokens: println, string, solve, case 

public static PrintWriter func_cca1ef001a3a42e6b8d65300c1775c57(int i, PrintWriter out, Scanner in) { 
 String s = "Case #" + (i + 1) + ": " + new A().solve(in);
out.println(s);
return out;
}


public static String func_8e37437692dd4d6c8ec660a8266a072f(int i, PrintWriter out, Scanner in) { 
 String s = "Case #" + (i + 1) + ": " + new A().solve(in);
out.println(s);
return s;
}


public static PrintWriter func_eb5dfcd3c11a4f6ca6a3e3fba17b9c8b(int i, PrintWriter out, Scanner in) { 
 String s = "Case #" + (i + 1) + ": " + new A().solve(in);
out.println(s);
return out;
}


*********************************

#### Score: 7.75932


#### Java Tokens: add, string, max, index, integer, arraylist, list, result, size, array, builder, stringbuilder, tostring, append 

public static String func_dbd49d09a3f54cc3b5d46ee5429439bd(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


public static String func_ed0632d1aaa74b17b354a457766e2b01(int N, int[] P, boolean[] u) { 
 List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


*********************************

#### Score: 7.72262


#### Java Tokens: game, testnum, perfect, string, test, num, format, #%d:, perfectgame, result, print, ind, case 

public static int func_1cd60f3080a244bf82c1a2468ed2404b(int testNum, int n, int[] l, int[] d) { 
 final int[] ind = new int[n];
for (int i = 0; i < n; ++i) {
    ind[i] = i;
}
for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
        if ((l[ind[i]] * d[ind[i]] < l[ind[j]] * d[ind[j]]) || (l[ind[i]] * d[ind[i]] == l[ind[j]] * d[ind[j]] && (d[ind[i]] == 0 && ind[i] > ind[j] || (d[ind[i]] != 0 && (l[ind[i]] > l[ind[j]] || (l[ind[i]] == l[ind[j]] && ind[i] > ind[j])))))) {
            int t = ind[i];
            ind[i] = ind[j];
            ind[j] = t;
        }
    }
}
final int result = 0;
PerfectGame.out.print(String.format("Case #%d:", testNum));
for (int i = 0; i < n; ++i) {
    PerfectGame.out.print(" " + ind[i]);
}
return result;
}


public static int func_3518dcc96349411eb6e0f7d44117e1ec(int testNum, int n, int[] l, int[] d) { 
 final int[] ind = new int[n];
for (int i = 0; i < n; ++i) {
    ind[i] = i;
}
for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
        if ((l[ind[i]] * d[ind[i]] < l[ind[j]] * d[ind[j]]) || (l[ind[i]] * d[ind[i]] == l[ind[j]] * d[ind[j]] && (d[ind[i]] == 0 && ind[i] > ind[j] || (d[ind[i]] != 0 && (l[ind[i]] > l[ind[j]] || (l[ind[i]] == l[ind[j]] && ind[i] > ind[j])))))) {
            int t = ind[i];
            ind[i] = ind[j];
            ind[j] = t;
        }
    }
}
final int result = 0;
PerfectGame.out.print(String.format("Case #%d:", testNum));
return result;
}


public static int func_7974d30007b1469b9c914e84aa327788(int testNum, int n, int[] ind, int[] l, int[] d) { 
 for (int i = 0; i < n; ++i) {
    ind[i] = i;
}
for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
        if ((l[ind[i]] * d[ind[i]] < l[ind[j]] * d[ind[j]]) || (l[ind[i]] * d[ind[i]] == l[ind[j]] * d[ind[j]] && (d[ind[i]] == 0 && ind[i] > ind[j] || (d[ind[i]] != 0 && (l[ind[i]] > l[ind[j]] || (l[ind[i]] == l[ind[j]] && ind[i] > ind[j])))))) {
            int t = ind[i];
            ind[i] = ind[j];
            ind[j] = t;
        }
    }
}
final int result = 0;
PerfectGame.out.print(String.format("Case #%d:", testNum));
return result;
}


*********************************

#### Score: 7.72262


#### Java Tokens: game, testnum, perfect, string, test, num, format, #%d:, perfectgame, result, print, case, ind 

public static int func_54ca6b37f8054856bf8f45a40f69f13e(int testNum, int n, int[] ind) { 
 final int result = 0;
PerfectGame.out.print(String.format("Case #%d:", testNum));
for (int i = 0; i < n; ++i) {
    PerfectGame.out.print(" " + ind[i]);
}
return result;
}


*********************************

#### Score: 7.61741


#### Java Tokens: result, length, arrays, sort 

public static long[] func_2fdd7920b3b344b89678c625add43722(long[] x) { 
 double result = 0;
long[] a = new long[37];
for (int i = 0; i < x.length; i++) {
    a[i] = x[i];
}
Arrays.sort(a);
return a;
}


public static double func_0e9e60656dac466fb14c0def8f025850(long[] x) { 
 double result = 0;
long[] a = new long[37];
for (int i = 0; i < x.length; i++) {
    a[i] = x[i];
}
Arrays.sort(a);
return result;
}


*********************************

#### Score: 7.55650


#### Java Tokens: println, system, string, solve, case 

public static PrintWriter func_a9da6b05a0ce45faa258bda28aad5b0f(int T, PrintWriter out, Scanner in) { 
 for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
return out;
}


public static String func_ab11053ceaa243f49593c54daba33b16(int i, PrintWriter out, Scanner in) { 
 String s = "Case #" + (i + 1) + ": " + new A().solve(in);
out.println(s);
System.out.println(s);
return s;
}


public static String func_1defcc3f2c3d43c88a99745adab1e46b(int i, PrintWriter out, Scanner in) { 
 String s = "Case #" + (i + 1) + ": " + new A().solve(in);
out.println(s);
System.out.println(s);
return s;
}


*********************************

#### Score: 7.43199


#### Java Tokens: game, testnum, perfect, string, test, num, format, #%d:, perfectgame, result, print, println, ind, case 

public static int func_27ed8d7330af4706b111704fb3b52fbd(int testNum, int n, int[] l, int[] d) { 
 final int[] ind = new int[n];
for (int i = 0; i < n; ++i) {
    ind[i] = i;
}
for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
        if ((l[ind[i]] * d[ind[i]] < l[ind[j]] * d[ind[j]]) || (l[ind[i]] * d[ind[i]] == l[ind[j]] * d[ind[j]] && (d[ind[i]] == 0 && ind[i] > ind[j] || (d[ind[i]] != 0 && (l[ind[i]] > l[ind[j]] || (l[ind[i]] == l[ind[j]] && ind[i] > ind[j])))))) {
            int t = ind[i];
            ind[i] = ind[j];
            ind[j] = t;
        }
    }
}
final int result = 0;
PerfectGame.out.print(String.format("Case #%d:", testNum));
for (int i = 0; i < n; ++i) {
    PerfectGame.out.print(" " + ind[i]);
}
PerfectGame.out.println();
return result;
}


public static int func_1b1bf8cd8d3247f89adaf25da47e1bf0(int testNum, int n, int[] ind, int[] l, int[] d) { 
 for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
        if ((l[ind[i]] * d[ind[i]] < l[ind[j]] * d[ind[j]]) || (l[ind[i]] * d[ind[i]] == l[ind[j]] * d[ind[j]] && (d[ind[i]] == 0 && ind[i] > ind[j] || (d[ind[i]] != 0 && (l[ind[i]] > l[ind[j]] || (l[ind[i]] == l[ind[j]] && ind[i] > ind[j])))))) {
            int t = ind[i];
            ind[i] = ind[j];
            ind[j] = t;
        }
    }
}
final int result = 0;
PerfectGame.out.print(String.format("Case #%d:", testNum));
for (int i = 0; i < n; ++i) {
    PerfectGame.out.print(" " + ind[i]);
}
PerfectGame.out.println();
return result;
}


public static int func_cc244b916a4f4bebb74ba0d7ee5c1a64(int testNum, int n, int[] ind, int[] l, int[] d) { 
 for (int i = 0; i < n; ++i) {
    ind[i] = i;
}
for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
        if ((l[ind[i]] * d[ind[i]] < l[ind[j]] * d[ind[j]]) || (l[ind[i]] * d[ind[i]] == l[ind[j]] * d[ind[j]] && (d[ind[i]] == 0 && ind[i] > ind[j] || (d[ind[i]] != 0 && (l[ind[i]] > l[ind[j]] || (l[ind[i]] == l[ind[j]] && ind[i] > ind[j])))))) {
            int t = ind[i];
            ind[i] = ind[j];
            ind[j] = t;
        }
    }
}
final int result = 0;
PerfectGame.out.print(String.format("Case #%d:", testNum));
for (int i = 0; i < n; ++i) {
    PerfectGame.out.print(" " + ind[i]);
}
PerfectGame.out.println();
return result;
}


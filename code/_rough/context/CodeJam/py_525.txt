### Py Tokens: xrange, max, getans, extend, ans 

### Py functions

def func_f251a183860b4817bfee4134ec4a3325(B, N, a):
    a.extend([0] * (37 - N))
    b = [0] * 37
    ans = 0.0
    for i in xrange(B):
        ans = max(ans, getans(a, b) - (i + 1))
    return a

def func_f2f596c3244347159f0d54527eba8f35(B, N, a):
    a.extend([0] * (37 - N))
    b = [0] * 37
    ans = 0.0
    for i in xrange(B):
        ans = max(ans, getans(a, b) - (i + 1))
    return N

def func_eb948031bc21435892689cb44a34933b(B, N, a):
    a.extend([0] * (37 - N))
    b = [0] * 37
    ans = 0.0
    for i in xrange(B):
        ans = max(ans, getans(a, b) - (i + 1))
    return i

def func_7d505bfa70d541dab3699573e823bc94(B, N, a):
    a.extend([0] * (37 - N))
    b = [0] * 37
    ans = 0.0
    for i in xrange(B):
        ans = max(ans, getans(a, b) - (i + 1))
    return b

def func_be28c854e9f9425fb574c854202ea52e(B, N, a):
    a.extend([0] * (37 - N))
    b = [0] * 37
    ans = 0.0
    for i in xrange(B):
        ans = max(ans, getans(a, b) - (i + 1))
    return B

*********************************

#### Score: 6.00700


#### Java Tokens: max, ans, math 

public static int func_746ef42c56d84d7f888634c43c7477a7(int j, int i, int n, int[] ps, double ans) { 
 int s1 = ps[i];
int s2 = ps[j] - ps[i];
int s3 = ps[n] - ps[j];
int max = Math.max(s1, Math.max(s2, s3));
ans = Math.max(ans, 1.0 * (ps[n] - max) / ps[n]);
return s1;
}


public static int func_b71842c0d8c04c14855e762db4728c13(long sr, long sm) { 
 long ans = Math.max(sm, sr);
int l = 0;
return l;
}


public static double func_713c867160b04492b3547e594d92c0d1(int s, int n, int q, int r, int p) { 
 int[] a = new int[n];
for (int i = 0; i < n; i++) {
    a[i] = (i * p + q) % r + s;
}
int[] ps = new int[n + 1];
for (int i = 1; i <= n; i++) {
    ps[i] = ps[i - 1] + a[i - 1];
}
double ans = 0;
for (int i = 0; i < n; i++) {
    for (int j = i + 1; j <= n; j++) {
        int s1 = ps[i];
        int s2 = ps[j] - ps[i];
        int s3 = ps[n] - ps[j];
        int max = Math.max(s1, Math.max(s2, s3));
        ans = Math.max(ans, 1.0 * (ps[n] - max) / ps[n]);
    }
}
return ans;
}


*********************************

#### Score: 5.63741


#### Java Tokens: max, ans, sum, math 

public static long func_65c7102b82d645fa9e0c8269aacf7830(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
return sum;
}


public static long func_9aa7155d934f46c3af0e2c5b9c19a04c(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return ans;
}


public static long func_5d136f36cafa4e3683a603b6a16cb250(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return sum;
}


*********************************

#### Score: 5.31379


#### Java Tokens: rest, max, ans, sum, math 

public static double func_bb4ba1ec4c034036acf127b6ee13fe8c(int n, long sum, long[] a) { 
 long t1 = 0;
long t2 = 0;
long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return ans;
}


public static int func_49b97a1175c44377bb1beda711591c0f(int n, long sum, long[] a) { 
 long t1 = 0;
long t2 = 0;
long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return j;
}


public static long func_2d132b885b4f43998baf6743f1e4214e(int n, long t2, long sum, long t1, long[] a) { 
 long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return t1;
}


*********************************

#### Score: 5.31379


#### Java Tokens: min, max, ans, sum, math 

public static int func_18e0d7a3a9004e878e1bb3e739bfcbf6(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return l;
}


public static long func_86e361714b204771a5224d744686e8da(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return ans;
}


public static long func_1bd1c810a74e498e9723f78d4fe9cfda(int n, int i, int l, long ans, long[] sum) { 
 while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
    l++;
}
ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
return ans;
}


*********************************

#### Score: 5.31379


#### Java Tokens: max, ans, length, sum, math 

public static long func_191647a8fba345efbb3f6dc4af8e4128(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sm;
}


public static long func_280276b4a70c454791de2abe8192e908(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sum;
}


public static long func_7bf42b8990f9499faaea39b1ca5d25f1(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sl;
}


*********************************

#### Score: 5.31379


#### Java Tokens: min, max, ans, length, math 

public static long func_9327ba5dc49f4a99a27336e31b9e9a93(long sr, long sm, long sl, long[] a) { 
 long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sr;
}


public static int func_68eaf40520ca454dbdbff670ea5a2422(long ans, long sr, long sm, long sl, long[] a) { 
 int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return l;
}


public static int func_e2c12373faae4b4391a538ad649d66ab(long sr, long sm, long sl, long[] a) { 
 long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return l;
}


*********************************

#### Score: 5.31379


#### Java Tokens: max, ans, pref, sum, math 

public static long func_a84f023a6b79404cb10c198c9d86bdd8(int t, long rs, long sum, long[] pref) { 
 long ans = rs;
ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
return ans;
}


*********************************

#### Score: 5.31379


#### Java Tokens: rate, max, ans, maxsum, sum 

public static double func_620c5d7fa7d04f5cb15740f11614e906(long maxSum, long sum, double ans) { 
 double rate = (sum - maxSum) * 1.0 / sum;
if (rate > ans) {
    ans = rate;
}
return ans;
}


public static double func_8fae9be14d7444e4b9f9a72a4aad0e07(long maxSum, long sum, double ans) { 
 double rate = (sum - maxSum) * 1.0 / sum;
if (rate > ans) {
    ans = rate;
}
return rate;
}


*********************************

#### Score: 5.31379


#### Java Tokens: max, ans, value, long, max_value 

public static long func_46d192d3f6d34695b4514ece829ad2e3(int s, int N, int q, int p, int r) { 
 long[] n = new long[N];
for (int i = 0; i < N; i++) {
    n[i] = ((long) i * p + q) % r + s;
    if (i > 0) {
        n[i] += n[i - 1];
    }
}
long ans = Long.MAX_VALUE / 4;
return ans;
}


public static long[] func_fbaeb18a9c6a4684ac4475b613307c7c(int s, int N, int q, int p, int r) { 
 long[] n = new long[N];
for (int i = 0; i < N; i++) {
    n[i] = ((long) i * p + q) % r + s;
    if (i > 0) {
        n[i] += n[i - 1];
    }
}
long ans = Long.MAX_VALUE / 4;
return n;
}


*********************************

#### Score: 5.02807


#### Java Tokens: res, min, max, ans, sum, math 

public static int func_047b1e0c188c41b7a93977a8a64ae3f3(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return l;
}


public static int func_330173ad6bbb49649ae4310602de4188(int n, long ans, long[] sum) { 
 int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return l;
}


public static long func_692cf403b4954663b037b51f4188faa5(int n, int l, long ans, long[] sum) { 
 for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return ans;
}


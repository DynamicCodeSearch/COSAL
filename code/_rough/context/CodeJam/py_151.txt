### Py Tokens: map, float, upp, range, low, readline, infile, append, split 

### Py functions

def func_7b0ca4d1299644cd9d47aae0f6a10dbc(L, i, infile):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Upp

def func_de22722246be485ca8ebfb89763715ea(L, Low, Lx, i, infile):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Low

def func_bb5ea19e74ce4cb382d7ebdac88f9f74(L, Low, Lx, i, infile):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Upp

def func_9bbc877063a5469d99ba86c485f69223(L, U, i, infile):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Low

def func_fc494247ff5d4c1aa5029a4e5809d434(L, Low, i, infile):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Low

*********************************

#### Score: 4.50978


#### Java Tokens: low 

public static int func_87c336c8121e4ac78534cf90a7b2649c(int y0, int x0, int x, double k, double[] low) { 
 for (int j = x0 + 1; j <= x; j++) {
    low[j] = k * (j - x0) + y0;
}
x0 = x;
return x0;
}


public static double func_0d63fab717d44d14826d1ee13a3c94b1(int y0, int x0, int x, int y, double[] low) { 
 double k = 1.0 * (y - y0) / (x - x0);
for (int j = x0 + 1; j <= x; j++) {
    low[j] = k * (j - x0) + y0;
}
x0 = x;
return k;
}


public static int func_d75ab25010e74abebc25c10ef89f569d(int y0, int x0, int x, int y, double[] low) { 
 double k = 1.0 * (y - y0) / (x - x0);
for (int j = x0 + 1; j <= x; j++) {
    low[j] = k * (j - x0) + y0;
}
x0 = x;
y0 = y;
return y0;
}


*********************************

#### Score: 4.44365


#### Java Tokens: split, string, trim, line 

public static double[] func_de3a96ea49a441999168791bd2f96e09(int n, String line) { 
 String[] ss = line.trim().split(" ");
double[] l = new double[n];
return l;
}


public static String[] func_b4974e8e9363455792fd54d845a37f4a(int n, String line) { 
 String[] ss = line.trim().split(" ");
double[] l = new double[n];
return ss;
}


*********************************

#### Score: 4.44365


#### Java Tokens: split, trim, \s+, line 

public static String[] func_25b90e8e1098474fac3336d0bce37fc5(String line) { 
 if (line == null)
    return null;
return line.trim().split("\\s+");

}


public static String[] func_1f59c1d4a9344a6b853d00f3689bb53e(String line) { 
 if (line == null)
    return null;
return line.trim().split("\\s+");

}


*********************************

#### Score: 4.19815


#### Java Tokens: low, events 

public static int func_9aebe4363cfb4f959f7505a0b8f33c1f(int i, int a, int[] events, A.Point[] low) { 
 int x2 = events[i + 1];
if (low[a + 1].x < x2) {
    ++a;
}
return x2;
}


public static int func_3e76f72a7d1b411893e84f35cff08c1b(int i, int a, int[] events, A.Point[] low) { 
 int x1 = events[i];
int x2 = events[i + 1];
if (low[a + 1].x < x2) {
    ++a;
}
return x1;
}


public static int func_ea04d61d78524f7d925fff3a9ccbf7e7(int i, int a, int[] events, A.Point[] low) { 
 int x1 = events[i];
int x2 = events[i + 1];
if (low[a + 1].x < x2) {
    ++a;
}
return x2;
}


*********************************

#### Score: 4.19815


#### Java Tokens: high, low 

public static int func_f388707605144796a4b526fe90630b7b(long high, long low) { 
 long m = (low + high) / 2;
int i = 0;
long x = 0;
return i;
}


public static long func_4095026e27114ba9a8e9a5cc355f034b(long high, long low) { 
 long m = (low + high) / 2;
int i = 0;
long x = 0;
return m;
}


public static double func_d2d97269ac5346cdaada845feea25bbc(int W) { 
 double low = 0;
double high = W;
return high;
}


*********************************

#### Score: 4.19815


#### Java Tokens: low, pref 

public static long func_d76bbdc2405348bbaf48b1662238610a(int n, int[] a) { 
 long[] pref = new long[n + 1];
for (int i = 0; i < n; i++) {
    pref[i + 1] = pref[i] + a[i];
}
// System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
return low;
}


public static long func_c651a2bb71e44c869906dcbc3ef46d1e(int n, int[] a, long[] pref) { 
 for (int i = 0; i < n; i++) {
    pref[i + 1] = pref[i] + a[i];
}
// System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
return low;
}


public static long func_2b3fe71c51e64128b7b0c68bf7ab985f(int n, int r, int s, int q, int p) { 
 int[] a = new int[n];
for (int i = 0; i < n; i++) {
    a[i] = (int) (((long) i * p + q) % r + s);
}
long[] pref = new long[n + 1];
for (int i = 0; i < n; i++) {
    pref[i + 1] = pref[i] + a[i];
}
// System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
return low;
}


*********************************

#### Score: 4.19815


#### Java Tokens: len, low 

public static double[] func_9795954ed1194cee863f645da696bf29(int w) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
return len;
}


public static double[] func_fc4234d61fbe43bb9342ba8b9e2627f9(int w) { 
 double[] len = new double[w + 1];
double[] low = new double[w + 1];
return low;
}


*********************************

#### Score: 4.19815


#### Java Tokens: low, point 

public static A.Point[] func_829baa0ca04b4a7d950f86118eb5f49b(int U, int L) { 
 A.Point[] up = new A.Point[U];
A.Point[] low = new A.Point[L];
return up;
}


public static A.Point[] func_60803418c71c488a8d22ff7bee32862f(int U, int L) { 
 A.Point[] up = new A.Point[U];
A.Point[] low = new A.Point[L];
return low;
}


*********************************

#### Score: 3.97412


#### Java Tokens: println, system, split, string, trim, line 

public static double[] func_9c67c7d6aee64322bd546ba81fc30fdb(int n, String line) { 
 System.out.println(line);
String[] ss = line.trim().split(" ");
double[] l = new double[n];
return l;
}


public static String[] func_0ad43d263a4d4d45b74d9545d11cd9b4(int n, String line) { 
 System.out.println(line);
String[] ss = line.trim().split(" ");
double[] l = new double[n];
return ss;
}


public static String[] func_721614ebd5444a7697fbeed6bd5a0e70(String line) { 
 System.out.println(line);
String[] ss = line.trim().split(" ");
return ss;
}


*********************************

#### Score: 3.93079


#### Java Tokens: high, low, pref 

public static long func_5a49a347564d436ea920679a11a87a7e(int n, int[] a, long[] pref) { 
 for (int i = 0; i < n; i++) {
    pref[i + 1] = pref[i] + a[i];
}
// System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
// can
long high = pref[n];
return low;
}


public static long func_2487d07add2548239d0f095dd0a4d809(int n, int r, int s, int q, int p) { 
 int[] a = new int[n];
for (int i = 0; i < n; i++) {
    a[i] = (int) (((long) i * p + q) % r + s);
}
long[] pref = new long[n + 1];
for (int i = 0; i < n; i++) {
    pref[i + 1] = pref[i] + a[i];
}
// System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
// can
long high = pref[n];
return high;
}


public static long func_3b9299aca8b743df90f3c6b488f863b9(int n, long[] pref) { 
 // System.out.println(Arrays.toString(pref));
// System.out.println(Arrays.toString(a));
// can't
long low = 0;
// can
long high = pref[n];
return high;
}


### Py Tokens: sort, right, vsota, rem, amid, cum, left 

### Py functions

def func_1048b744533b46528862dc822aa90111(b, cum, n, s, vsota):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return rem

def func_1ec334ec29c94318baa4c2577ca786bb(b, cum, n, s, vsota):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return amid

def func_f11d0370aafc45d1bfc70b33982ed9ee(b, cum, n, s, vsota):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return vsota

def func_5811e79de7db4aba91077adffaa36ad4(b, cum, n, s, vsota):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return n

def func_2c2a957195eb4ed2a3c53331f1da218a(b, cum, n, s, vsota):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return cum

*********************************

#### Score: 9.26245


#### Java Tokens: area, cur, left, remarea, rem, curleft 

public static double func_39e93559773949fab9c9976333441ffd(int uk, double curLeft, double remArea) { 
 curLeft -= remArea;
uk++;
return curLeft;
}


*********************************

#### Score: 8.65615


#### Java Tokens: left, right 

public static double func_f328a2bad7564210944accc2c7503d97(double w) { 
 double left = 0;
double right = w;
return left;
}


public static long func_c4c9d8488eac4e89a49b17b875ec73ca(long right, long left) { 
 long m1 = (left * 2 + right) / 3;
long m2 = (left + right * 2) / 3;
return m1;
}


public static long func_797121d40d924bb2a5d55be16bde3934(long right, long left) { 
 long m1 = (left * 2 + right) / 3;
long m2 = (left + right * 2) / 3;
return m2;
}


*********************************

#### Score: 8.07212


#### Java Tokens: left, start, right 

public static int func_5c8003a0b5d14e508056e637da090fbe(int start, int N) { 
 int left = start;
int right = N;
return right;
}


public static int func_f577ef2c850d41878f93f657a77ab29d(int start, int N) { 
 int left = start;
int right = N;
return left;
}


*********************************

#### Score: 8.07212


#### Java Tokens: left, need, right 

public static long func_17f71a3fbdf14d668a145dde1465d1df(int i, long eq, long left, long right) { 
 long up = (left + right) / 2;
long need = eq + i * up;
return up;
}


public static long func_5937e82ecc73452fb8fb2543632ab580(int i, long eq, long left, long right) { 
 long up = (left + right) / 2;
long need = eq + i * up;
return need;
}


*********************************

#### Score: 8.07212


#### Java Tokens: left, e12, right 

public static long func_5204cf1bf7f14392a202908b006d479f(int n, long K, long A, long[] is) { 
 if (n > 0) {
    A += is[n - 1];
    K = is[n - 1];
}
long left = K, right = (long) (1.05 * 1e12);
return A;
}


public static long func_6a79de771ae24ff2b93edaffe1adceb1(int n, long K, long A, long[] is) { 
 if (n > 0) {
    A += is[n - 1];
    K = is[n - 1];
}
long left = K, right = (long) (1.05 * 1e12);
return K;
}


public static long func_39046d3f82034826bf4676ff31fec161(int n, long K, long A, long[] is) { 
 if (n > 0) {
    A += is[n - 1];
    K = is[n - 1];
}
long left = K, right = (long) (1.05 * 1e12);
return left;
}


*********************************

#### Score: 8.07212


#### Java Tokens: money, left, right 

public static long func_b9d61fc62a2c471aa020504e651524f8(long money) { 
 long left = 0;
long right = money + 1;
return left;
}


public static long func_0d069f942e8745af879ca3763201baaa(long money) { 
 long left = 0;
long right = money + 1;
return right;
}


*********************************

#### Score: 7.78098


#### Java Tokens: money, left, need, max, ans, arrays, sort, right, math, prof 

public static double func_334782fec40c425aa170dfacff764a66(int m, long money, long[] a) { 
 Arrays.sort(a);
double ans = 0;
for (int i = 1; i <= m; i++) {
    long now = a[i - 1];
    long eq = 0;
    for (int j = 0; j < i; j++) {
        eq += now - a[j];
    }
    int same = 0;
    for (int j = i; j < m; j++) {
        if (a[j] == now) {
            same++;
        }
    }
    if (eq + same > money) {
        break;
    }
    long left = 0;
    long right = money + 1;
    while (left + 1 < right) {
        long up = (left + right) / 2;
        long need = eq + i * up;
        for (int j = i; j < m; j++) {
            need += Math.max((now + up + 1) - a[j], 0);
            if (need > money) {
                break;
            }
        }
        if (need > money) {
            right = up;
        } else {
            left = up;
        }
    }
    long up = left;
    double prof = -eq - up * i;
    for (int j = i; j < m; j++) {
        prof -= Math.max((now + up + 1) - a[j], 0);
    }
    for (int j = 0; j < i; j++) {
        prof += (now + up - a[j]) * 36.0 / i;
    }
    ans = Math.max(ans, prof);
}
return ans;
}


*********************************

#### Score: 7.56557


#### Java Tokens: left, ans, center, right 

public static long func_7dd91dcfe40246d3847c7b2c4de43122(int ans, int n, long center, long[] S) { 
 long left = S[ans] - S[0];
long right = S[n] - left - center;
return left;
}


public static long func_49c1be7a00244ebab75c4ec5a5e7bc13(int ans, int n, long center, long[] S) { 
 long left = S[ans] - S[0];
long right = S[n] - left - center;
return right;
}


*********************************

#### Score: 7.56557


#### Java Tokens: rate, left, sum, right 

public static double func_9bf139d46178419383a5dbba546048c6(int g, int w, int i, double sum) { 
 double rate = sum / g * i;
double left = 0, right = w;
return rate;
}


public static double func_6efdfba9deef4dae933ec9aea4c4c6f1(int g, int w, int i, double sum) { 
 double rate = sum / g * i;
double left = 0, right = w;
return left;
}


public static double func_20f16058f25c4851bc4749373aca9ff3(int g, int w, int i, double sum) { 
 double rate = sum / g * i;
double left = 0, right = w;
return right;
}


*********************************

#### Score: 7.56557


#### Java Tokens: left, center, ans, right 

public static long func_52bd497e3ed24667933cf5e8c64434a2(int i, int ans, int n, long[] S) { 
 // System.out.println(i + " " + ans + " " + diff1 + " " +
// diff2);
long center = S[i + 1] - S[ans];
long left = S[ans] - S[0];
long right = S[n] - left - center;
return center;
}


public static long func_0f5a6588f6794c689ef652d5b7e4736c(int i, int ans, int n, long[] S) { 
 // System.out.println(i + " " + ans + " " + diff1 + " " +
// diff2);
long center = S[i + 1] - S[ans];
long left = S[ans] - S[0];
long right = S[n] - left - center;
return left;
}


public static long func_733f558d59204eb79eb9a0e5841257af(int i, int ans, int n, long[] S) { 
 // System.out.println(i + " " + ans + " " + diff1 + " " +
// diff2);
long center = S[i + 1] - S[ans];
long left = S[ans] - S[0];
long right = S[n] - left - center;
return right;
}


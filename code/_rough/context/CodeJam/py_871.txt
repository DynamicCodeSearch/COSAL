### Py Tokens: sort, right, vsota, amid, sum, rem, range, best, max, cum, append, left 

### Py functions

def func_371ec8f5fa68427792194b73c4ec9ae4(l, n, p, s):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    best = 0.0
    for b in range(n - 1, -1, -1):
        rem = vsota - (cum[n] - cum[b])
        al = 0
        ar = b
        while al + 1 < ar:
            amid = (al + ar) // 2
            left = cum[amid]
            right = cum[b] - cum[amid]
            if left > right:
                ar = amid
            else:
                al = amid
        s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
        s.sort()
        p = (s[0] + s[1]) / vsota
        best = max(best, p)
        s = [cum[ar], cum[b] - cum[ar], cum[n] - cum[b]]
        s.sort()
        p = (s[0] + s[1]) / vsota
        best = max(best, p)
    return b

def func_73db6db62319478faebe7783db23c14b(l, n, p, s):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    best = 0.0
    for b in range(n - 1, -1, -1):
        rem = vsota - (cum[n] - cum[b])
        al = 0
        ar = b
        while al + 1 < ar:
            amid = (al + ar) // 2
            left = cum[amid]
            right = cum[b] - cum[amid]
            if left > right:
                ar = amid
            else:
                al = amid
        s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
        s.sort()
        p = (s[0] + s[1]) / vsota
        best = max(best, p)
        s = [cum[ar], cum[b] - cum[ar], cum[n] - cum[b]]
        s.sort()
        p = (s[0] + s[1]) / vsota
        best = max(best, p)
    return s

def func_abaa2e306cca4a70907c33117bff3e3a(l, n, p, s):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    best = 0.0
    for b in range(n - 1, -1, -1):
        rem = vsota - (cum[n] - cum[b])
        al = 0
        ar = b
        while al + 1 < ar:
            amid = (al + ar) // 2
            left = cum[amid]
            right = cum[b] - cum[amid]
            if left > right:
                ar = amid
            else:
                al = amid
        s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
        s.sort()
        p = (s[0] + s[1]) / vsota
        best = max(best, p)
        s = [cum[ar], cum[b] - cum[ar], cum[n] - cum[b]]
        s.sort()
        p = (s[0] + s[1]) / vsota
        best = max(best, p)
    return ar

def func_480e31fece6c40f0acd9180676ca538c(l, n, p, s):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    best = 0.0
    for b in range(n - 1, -1, -1):
        rem = vsota - (cum[n] - cum[b])
        al = 0
        ar = b
        while al + 1 < ar:
            amid = (al + ar) // 2
            left = cum[amid]
            right = cum[b] - cum[amid]
            if left > right:
                ar = amid
            else:
                al = amid
        s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
        s.sort()
        p = (s[0] + s[1]) / vsota
        best = max(best, p)
        s = [cum[ar], cum[b] - cum[ar], cum[n] - cum[b]]
        s.sort()
        p = (s[0] + s[1]) / vsota
        best = max(best, p)
    return ar

def func_27211387b5ed4fc69d63dfbbbbff350c(l, n, p, s):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    best = 0.0
    for b in range(n - 1, -1, -1):
        rem = vsota - (cum[n] - cum[b])
        al = 0
        ar = b
        while al + 1 < ar:
            amid = (al + ar) // 2
            left = cum[amid]
            right = cum[b] - cum[amid]
            if left > right:
                ar = amid
            else:
                al = amid
        s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
        s.sort()
        p = (s[0] + s[1]) / vsota
        best = max(best, p)
        s = [cum[ar], cum[b] - cum[ar], cum[n] - cum[b]]
        s.sort()
        p = (s[0] + s[1]) / vsota
        best = max(best, p)
    return x

*********************************

#### Score: 9.91136


#### Java Tokens: rate, left, sum, right 

public static double func_9bf139d46178419383a5dbba546048c6(int g, int w, int i, double sum) { 
 double rate = sum / g * i;
double left = 0, right = w;
return rate;
}


public static double func_6efdfba9deef4dae933ec9aea4c4c6f1(int g, int w, int i, double sum) { 
 double rate = sum / g * i;
double left = 0, right = w;
return left;
}


public static double func_20f16058f25c4851bc4749373aca9ff3(int g, int w, int i, double sum) { 
 double rate = sum / g * i;
double left = 0, right = w;
return right;
}


*********************************

#### Score: 9.91136


#### Java Tokens: left, e15, sum, right 

public static long func_6c780db70a8c4b248199305625248123(int n, int s, int q, int p, int r) { 
 long[] a = new long[n];
for (int i = 0; i < n; i++) {
    a[i] = ((i * 1L * p + q) % r + s);
}
long[] sum = new long[n];
for (int i = 0; i < n; i++) sum[i] = a[i] + (i == 0 ? 0 : sum[i - 1]);
long left = 0, right = (long) 1e15;
return right;
}


public static long func_53cec8f3cc4b4f0aae5bea4756777ddc(int n, long[] sum, long[] a) { 
 for (int i = 0; i < n; i++) sum[i] = a[i] + (i == 0 ? 0 : sum[i - 1]);
long left = 0, right = (long) 1e15;
return right;
}


public static long func_08de6651176843028a3308e6a71540d5(int n, long[] a) { 
 long[] sum = new long[n];
for (int i = 0; i < n; i++) sum[i] = a[i] + (i == 0 ? 0 : sum[i - 1]);
long left = 0, right = (long) 1e15;
return left;
}


*********************************

#### Score: 9.57146


#### Java Tokens: min, left, max, right 

public static int func_26ea343e785e42efb3753036a0b2a5ba(int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
return right;
}


public static int func_947a3ae64cb84a41b3092ef70726de88(int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
return left;
}


*********************************

#### Score: 9.32192


#### Java Tokens: left, pref, mid, sum, right 

public static int func_8aa2044651eb48c5a23cf1d948ec69a3(int left, int right, long sum, long[] pref) { 
 int mid = (left + right) >> 1;
if (pref[mid] * 2 >= sum) {
    right = mid;
} else {
    left = mid;
}
return left;
}


public static int func_44d9871f7cfe4cc7977991131575f748(int left, int right, long sum, long[] pref) { 
 int mid = (left + right) >> 1;
if (pref[mid] * 2 >= sum) {
    right = mid;
} else {
    left = mid;
}
return right;
}


public static int func_fd75d371edf34ab0bee62afd2e89f063(int left, int right, long sum, long[] pref) { 
 int mid = (left + right) >> 1;
if (pref[mid] * 2 >= sum) {
    right = mid;
} else {
    left = mid;
}
return mid;
}


*********************************

#### Score: 9.32192


#### Java Tokens: rght, left, pref, sum, right 

public static long func_96733e4e7e91488f852610fe05891f14(int n, int rght, long[] pref) { 
 long rs = pref[n - 1] - pref[rght];
long sum = pref[rght];
int left = -1, right = rght;
return sum;
}


public static int func_0f01e1326ac74f5f8f6c3c0aa77cf7cf(int n, int rght, long[] pref) { 
 long rs = pref[n - 1] - pref[rght];
long sum = pref[rght];
int left = -1, right = rght;
return left;
}


public static int func_48158b694d9d4e63a87795b58641cc12(int rght, long[] pref) { 
 long sum = pref[rght];
int left = -1, right = rght;
return right;
}


*********************************

#### Score: 9.26245


#### Java Tokens: area, cur, left, remarea, rem, curleft 

public static double func_39e93559773949fab9c9976333441ffd(int uk, double curLeft, double remArea) { 
 curLeft -= remArea;
uk++;
return curLeft;
}


*********************************

#### Score: 9.21588


#### Java Tokens: money, left, need, max, ans, arrays, sort, right, math, prof 

public static double func_334782fec40c425aa170dfacff764a66(int m, long money, long[] a) { 
 Arrays.sort(a);
double ans = 0;
for (int i = 1; i <= m; i++) {
    long now = a[i - 1];
    long eq = 0;
    for (int j = 0; j < i; j++) {
        eq += now - a[j];
    }
    int same = 0;
    for (int j = i; j < m; j++) {
        if (a[j] == now) {
            same++;
        }
    }
    if (eq + same > money) {
        break;
    }
    long left = 0;
    long right = money + 1;
    while (left + 1 < right) {
        long up = (left + right) / 2;
        long need = eq + i * up;
        for (int j = i; j < m; j++) {
            need += Math.max((now + up + 1) - a[j], 0);
            if (need > money) {
                break;
            }
        }
        if (need > money) {
            right = up;
        } else {
            left = up;
        }
    }
    long up = left;
    double prof = -eq - up * i;
    for (int j = i; j < m; j++) {
        prof -= Math.max((now + up + 1) - a[j], 0);
    }
    for (int j = 0; j < i; j++) {
        prof += (now + up - a[j]) * 36.0 / i;
    }
    ans = Math.max(ans, prof);
}
return ans;
}


*********************************

#### Score: 8.80150


#### Java Tokens: rght, left, pref, mid, sum, right 

public static int func_3911d14f540f436abd64986a68e52138(int n, int rght, long[] pref) { 
 long rs = pref[n - 1] - pref[rght];
long sum = pref[rght];
int left = -1, right = rght;
while (left < right - 1) {
    int mid = (left + right) >> 1;
    if (pref[mid] * 2 >= sum) {
        right = mid;
    } else {
        left = mid;
    }
}
return left;
}


public static int func_96c5b2b06f82463aa91244705a8874f7(int rght, long sum, long[] pref) { 
 int left = -1, right = rght;
while (left < right - 1) {
    int mid = (left + right) >> 1;
    if (pref[mid] * 2 >= sum) {
        right = mid;
    } else {
        left = mid;
    }
}
return left;
}


public static int func_20faba0aaf8f4ae887ab26c781784a31(int rght, long sum, long[] pref) { 
 int left = -1, right = rght;
while (left < right - 1) {
    int mid = (left + right) >> 1;
    if (pref[mid] * 2 >= sum) {
        right = mid;
    } else {
        left = mid;
    }
}
return right;
}


*********************************

#### Score: 8.80150


#### Java Tokens: sum1, last, left, mid, sum, right 

public static long func_7815661ad02d481bbed1a1b8d1953098(long right, long left) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
return mid;
}


public static int func_ab8a2dc697e14c669449d2b3c50084db(long right, long left) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
return last;
}


public static long func_d7b6f2e807004ab8a841eee881c6d27c(long right, long left) { 
 long mid = (left + right) / 2;
int last = 0;
boolean ok = false;
long sum1 = 0;
return sum1;
}


*********************************

#### Score: 8.65615


#### Java Tokens: left, right 

public static double func_f328a2bad7564210944accc2c7503d97(double w) { 
 double left = 0;
double right = w;
return left;
}


public static long func_c4c9d8488eac4e89a49b17b875ec73ca(long right, long left) { 
 long m1 = (left * 2 + right) / 3;
long m2 = (left + right * 2) / 3;
return m1;
}


public static long func_797121d40d924bb2a5d55be16bde3934(long right, long left) { 
 long m1 = (left * 2 + right) / 3;
long m2 = (left + right * 2) / 3;
return m2;
}


### Py Tokens: case, range, str, minmax, max, searchsorted 

### Py functions

def func_81a8c370d1f44a58bdabaf72ebd1602b(N, t):
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')
    return t

def func_1a452c2aaa9145658ff1197b92c5ce23(N, t):
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')
    return N

*********************************

#### Score: 5.43030


#### Java Tokens: println, max, case 

public static double func_f166491ea38f43ea8bd5e532d17d780c(int t, double max, PrintWriter pw) { 
 max += 0.0000001;
pw.println("Case #" + t + ": " + max);
return max;
}


public static PrintWriter func_ae45a6c619b04998817dbf0dae8dfafa(int t, double max, PrintWriter pw) { 
 max += 0.0000001;
pw.println("Case #" + t + ": " + max);
return pw;
}


*********************************

#### Score: 3.93733


#### Java Tokens: println, min, test, max, index, sum, main, math, case 

public static long func_f3176e2ca8e24c69969d89457a93153d(int test, int n, int[] a, long[] sum) { 
 for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + a[i];
long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
Main.out.println("Case #" + test + ": " + (1.0 * (sum[n] - x) / sum[n]));
return x;
}


public static long func_7bd3fd10c2ce43518465f1b9d52c87de(int test, int n, long[] sum) { 
 long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
Main.out.println("Case #" + test + ": " + (1.0 * (sum[n] - x) / sum[n]));
return x;
}


public static int func_b9ca142c51d4420fb81e954380b16e1c(int test, int n, int[] a, long[] sum) { 
 sum[0] = 0;
for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + a[i];
long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
Main.out.println("Case #" + test + ": " + (1.0 * (sum[n] - x) / sum[n]));
return index;
}


*********************************

#### Score: 3.62000


#### Java Tokens: res, number, %.10f, testnumber, smax, test, max, sum, math, case, printf 

public static PrintWriter func_fe908ac6983f4917bdd1272825525479(int n, int testNumber, long[] sum, double res, PrintWriter out) { 
 for (int a = 0, b = 0; a < n; a++) {
    while (sum[b + 1] - sum[a] < sum[n] - sum[b + 1] && b < n) {
        b++;
    }
    for (int i = 0; i < 2; i++) {
        if (b - i < a)
            break;
        long s1 = sum[b - i + 1] - sum[a];
        long s2 = sum[a];
        long s3 = sum[n] - sum[b - i + 1];
        long smax = Math.max(s1, Math.max(s2, s3));
        res = Math.max(res, 1 - (double) smax / sum[n]);
    }
}
out.printf("Case #" + testNumber + ": %.10f\n", res);
return out;
}


public static double func_fbb9b3626dd7462986e97f6de7904ff6(int n, int testNumber, long[] sum, double res, PrintWriter out) { 
 for (int a = 0, b = 0; a < n; a++) {
    while (sum[b + 1] - sum[a] < sum[n] - sum[b + 1] && b < n) {
        b++;
    }
    for (int i = 0; i < 2; i++) {
        if (b - i < a)
            break;
        long s1 = sum[b - i + 1] - sum[a];
        long s2 = sum[a];
        long s3 = sum[n] - sum[b - i + 1];
        long smax = Math.max(s1, Math.max(s2, s3));
        res = Math.max(res, 1 - (double) smax / sum[n]);
    }
}
out.printf("Case #" + testNumber + ": %.10f\n", res);
return res;
}


public static double func_60f76c51e50c4022ab0084f64439054c(int n, int testNumber, long[] sum, PrintWriter out) { 
 double res = 0;
for (int a = 0, b = 0; a < n; a++) {
    while (sum[b + 1] - sum[a] < sum[n] - sum[b + 1] && b < n) {
        b++;
    }
    for (int i = 0; i < 2; i++) {
        if (b - i < a)
            break;
        long s1 = sum[b - i + 1] - sum[a];
        long s2 = sum[a];
        long s3 = sum[n] - sum[b - i + 1];
        long smax = Math.max(s1, Math.max(s2, s3));
        res = Math.max(res, 1 - (double) smax / sum[n]);
    }
}
out.printf("Case #" + testNumber + ": %.10f\n", res);
return res;
}


*********************************

#### Score: 3.62000


#### Java Tokens: initadd, waste, bet, dif, val, println, numtie, min, system, max, case 

public static PrintWriter func_360d707e635b43188a336fc394d1fab1(int t, long B, long[] v, PrintWriter pw) { 
 double max = 0.0;
for (int i = 1; i < 37; i++) {
    long initadd = 0;
    long waste = 0;
    int numtie = 0;
    for (int j = i; j < 37; j++) {
        if (v[j] == v[i]) {
            numtie++;
        }
    }
    if (v[i] == v[i - 1]) {
        v[i]++;
        initadd++;
        waste += numtie;
    }
    long bet = i * (v[i] - 1);
    long min = 0;
    for (int j = 0; j < i; j++) {
        min += v[j];
    }
    if (i * v[i - 1] - min > B) {
        bet = 0;
    } else if (bet - min + waste > B) {
        bet = i * v[i - 1] - min;
        bet += i * ((B - bet - waste) / i);
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= i + numtie;
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste += numtie * dif;
                bet += i * dif;
                numtie++;
                v[i] += dif;
                initadd += dif;
                tp = B - bet - waste;
                tp /= i + numtie;
            }
            waste += numtie * tp;
            bet += i * tp;
        }
    }
    // System.out.println(i + " " + bet + " " + waste + " " + numtie + " " + min);
    if (bet > 0) {
        long v1 = 36 * bet;
        double val = v1 / (i + 0.0);
        val -= bet;
        val -= waste;
        System.out.println(val);
        if (val > max)
            max = val;
    }
    v[i] -= initadd;
}
max += 0.0000001;
pw.println("Case #" + t + ": " + max);
return pw;
}


public static PrintWriter func_a9f192d727fd41e699de053b8e836b71(int t, long B, long[] v, double max, PrintWriter pw) { 
 for (int i = 1; i < 37; i++) {
    long initadd = 0;
    long waste = 0;
    int numtie = 0;
    for (int j = i; j < 37; j++) {
        if (v[j] == v[i]) {
            numtie++;
        }
    }
    if (v[i] == v[i - 1]) {
        v[i]++;
        initadd++;
        waste += numtie;
    }
    long bet = i * (v[i] - 1);
    long min = 0;
    for (int j = 0; j < i; j++) {
        min += v[j];
    }
    if (i * v[i - 1] - min > B) {
        bet = 0;
    } else if (bet - min + waste > B) {
        bet = i * v[i - 1] - min;
        bet += i * ((B - bet - waste) / i);
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= i + numtie;
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste += numtie * dif;
                bet += i * dif;
                numtie++;
                v[i] += dif;
                initadd += dif;
                tp = B - bet - waste;
                tp /= i + numtie;
            }
            waste += numtie * tp;
            bet += i * tp;
        }
    }
    // System.out.println(i + " " + bet + " " + waste + " " + numtie + " " + min);
    if (bet > 0) {
        long v1 = 36 * bet;
        double val = v1 / (i + 0.0);
        val -= bet;
        val -= waste;
        System.out.println(val);
        if (val > max)
            max = val;
    }
    v[i] -= initadd;
}
max += 0.0000001;
pw.println("Case #" + t + ": " + max);
return pw;
}


public static double func_537d520d76674ada8819df0005a48e38(int t, long B, long[] v, PrintWriter pw) { 
 double max = 0.0;
for (int i = 1; i < 37; i++) {
    long initadd = 0;
    long waste = 0;
    int numtie = 0;
    for (int j = i; j < 37; j++) {
        if (v[j] == v[i]) {
            numtie++;
        }
    }
    if (v[i] == v[i - 1]) {
        v[i]++;
        initadd++;
        waste += numtie;
    }
    long bet = i * (v[i] - 1);
    long min = 0;
    for (int j = 0; j < i; j++) {
        min += v[j];
    }
    if (i * v[i - 1] - min > B) {
        bet = 0;
    } else if (bet - min + waste > B) {
        bet = i * v[i - 1] - min;
        bet += i * ((B - bet - waste) / i);
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= i + numtie;
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste += numtie * dif;
                bet += i * dif;
                numtie++;
                v[i] += dif;
                initadd += dif;
                tp = B - bet - waste;
                tp /= i + numtie;
            }
            waste += numtie * tp;
            bet += i * tp;
        }
    }
    // System.out.println(i + " " + bet + " " + waste + " " + numtie + " " + min);
    if (bet > 0) {
        long v1 = 36 * bet;
        double val = v1 / (i + 0.0);
        val -= bet;
        val -= waste;
        System.out.println(val);
        if (val > max)
            max = val;
    }
    v[i] -= initadd;
}
max += 0.0000001;
pw.println("Case #" + t + ": " + max);
return max;
}


*********************************

#### Score: 3.49966


#### Java Tokens: println, case 

public static double func_0ee4d60dd1f44d848c9655d9e503320d(int t, PrintWriter out) { 
 out.println("Case #" + (t + 1) + ":");
double x = 0;
return x;
}


public static PrintWriter func_e388b06f552b4837befb45471bfcaa4a(int t, PrintWriter out) { 
 out.println("Case #" + (t + 1) + ":");
double x = 0;
return out;
}


*********************************

#### Score: 3.35539


#### Java Tokens: waste, dif, val, max, sort, initadd, bet, println, numtie, min, system, arrays, case 

public static double func_c4e1d6ce920f4f38a6aba5fb37157ed0(int t, long B, long[] v, PrintWriter pw) { 
 Arrays.sort(v);
double max = 0.0;
for (int i = 1; i < 37; i++) {
    long initadd = 0;
    long waste = 0;
    int numtie = 0;
    for (int j = i; j < 37; j++) {
        if (v[j] == v[i]) {
            numtie++;
        }
    }
    if (v[i] == v[i - 1]) {
        v[i]++;
        initadd++;
        waste += numtie;
    }
    long bet = i * (v[i] - 1);
    long min = 0;
    for (int j = 0; j < i; j++) {
        min += v[j];
    }
    if (i * v[i - 1] - min > B) {
        bet = 0;
    } else if (bet - min + waste > B) {
        bet = i * v[i - 1] - min;
        bet += i * ((B - bet - waste) / i);
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= i + numtie;
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste += numtie * dif;
                bet += i * dif;
                numtie++;
                v[i] += dif;
                initadd += dif;
                tp = B - bet - waste;
                tp /= i + numtie;
            }
            waste += numtie * tp;
            bet += i * tp;
        }
    }
    // System.out.println(i + " " + bet + " " + waste + " " + numtie + " " + min);
    if (bet > 0) {
        long v1 = 36 * bet;
        double val = v1 / (i + 0.0);
        val -= bet;
        val -= waste;
        System.out.println(val);
        if (val > max)
            max = val;
    }
    v[i] -= initadd;
}
max += 0.0000001;
pw.println("Case #" + t + ": " + max);
return max;
}


public static PrintWriter func_2079bc59723845008efee7f06545313a(int t, long B, long[] v, PrintWriter pw) { 
 Arrays.sort(v);
double max = 0.0;
for (int i = 1; i < 37; i++) {
    long initadd = 0;
    long waste = 0;
    int numtie = 0;
    for (int j = i; j < 37; j++) {
        if (v[j] == v[i]) {
            numtie++;
        }
    }
    if (v[i] == v[i - 1]) {
        v[i]++;
        initadd++;
        waste += numtie;
    }
    long bet = i * (v[i] - 1);
    long min = 0;
    for (int j = 0; j < i; j++) {
        min += v[j];
    }
    if (i * v[i - 1] - min > B) {
        bet = 0;
    } else if (bet - min + waste > B) {
        bet = i * v[i - 1] - min;
        bet += i * ((B - bet - waste) / i);
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= i + numtie;
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste += numtie * dif;
                bet += i * dif;
                numtie++;
                v[i] += dif;
                initadd += dif;
                tp = B - bet - waste;
                tp /= i + numtie;
            }
            waste += numtie * tp;
            bet += i * tp;
        }
    }
    // System.out.println(i + " " + bet + " " + waste + " " + numtie + " " + min);
    if (bet > 0) {
        long v1 = 36 * bet;
        double val = v1 / (i + 0.0);
        val -= bet;
        val -= waste;
        System.out.println(val);
        if (val > max)
            max = val;
    }
    v[i] -= initadd;
}
max += 0.0000001;
pw.println("Case #" + t + ": " + max);
return pw;
}


*********************************

#### Score: 3.35539


#### Java Tokens: %.13f, max, forward, start, #%d:, printf, result, system, get, getstartismax, backward, math, case 

public static long func_c3380420297b403fb812ccf5292a7aa7(int cc, int n, long result, long[] backward, long[] forward) { 
 result = Math.max(result, A.getStartIsMax(forward, backward));
System.out.printf("Case #%d: %.13f\n", cc, result * 1.00 / forward[n - 1]);
return result;
}


*********************************

#### Score: 3.28192


#### Java Tokens: area, println, case 

public static PrintWriter func_d35cfca36cfb4c0f9c48db74b9a21e7f(int t, int g, double area, PrintWriter out) { 
 area /= g;
out.println("Case #" + (t + 1) + ":");
return out;
}


public static PrintWriter func_6e91f534cabd45e98d785f89eaadf7db(int t, int g, double area, PrintWriter out) { 
 area /= g;
out.println("Case #" + (t + 1) + ":");
double x = 0;
return out;
}


public static double func_3c532201d9194bbaa7a0127eefbfa66e(int t, int g, double area, PrintWriter out) { 
 area /= g;
out.println("Case #" + (t + 1) + ":");
double x = 0;
return x;
}


*********************************

#### Score: 3.28192


#### Java Tokens: print, oppa, case 

public static PrintWriter func_65d2f46b299c4c119862c167b2e76cb9(int n, int tn, PrintWriter pw) { 
 boolean[] oppa = new boolean[n];
pw.print("Case #" + (tn + 1) + ":");
return pw;
}


public static boolean[] func_7bb19fad5bc047b1946c3d5a85bc274b(int n, int tn, PrintWriter pw) { 
 boolean[] oppa = new boolean[n];
pw.print("Case #" + (tn + 1) + ":");
return oppa;
}


*********************************

#### Score: 3.28192


#### Java Tokens: print, exp, case 

public static double[] func_93fb8b880be1427f90e120d60febedc3(int i, int n, double[] l, double[] d, PrintWriter pw) { 
 double[] exp = new double[n];
for (int j = 0; j < n; j++) {
    if (d[j] == 0) {
        exp[j] = 0;
    } else {
        exp[j] = l[j] * d[j] / (100 - d[j]);
    }
}
pw.print("Case #" + (i + 1) + ": ");
return exp;
}


public static PrintWriter func_ae6b9a6c25e5400db86c47c8855d3965(int i, int n, double[] l, double[] d, PrintWriter pw) { 
 double[] exp = new double[n];
for (int j = 0; j < n; j++) {
    if (d[j] == 0) {
        exp[j] = 0;
    } else {
        exp[j] = l[j] * d[j] / (100 - d[j]);
    }
}
pw.print("Case #" + (i + 1) + ": ");
return pw;
}


### Py Tokens: findme, myarea, xrange, mid, append 

### Py functions

def func_d6a266fabaf6492f999910f718faf868(W, i, out, tt):
    aa = 0.0
    for i in xrange(W):
        myarea = 0.5 * (dd[i] + dd[i + 1])
        if myarea + aa < findme:
            aa += myarea
            continue
        tt = findme - aa
        ll, uu = 0.0, 1.0
        for u in xrange(64):
            mid = (ll + uu) * 0.5
            pp = dd[i] * mid + (dd[i + 1] - dd[i]) * mid ** 2 * 0.5
            if pp < tt:
                ll = mid
            else:
                uu = mid
        out.append(i + (ll + uu) * 0.5)
        break
    else:
        out.append(W)
    return aa

def func_ab9e7eb50a2e4ba58770f872bb448708(W, i, out, tt):
    aa = 0.0
    for i in xrange(W):
        myarea = 0.5 * (dd[i] + dd[i + 1])
        if myarea + aa < findme:
            aa += myarea
            continue
        tt = findme - aa
        ll, uu = 0.0, 1.0
        for u in xrange(64):
            mid = (ll + uu) * 0.5
            pp = dd[i] * mid + (dd[i + 1] - dd[i]) * mid ** 2 * 0.5
            if pp < tt:
                ll = mid
            else:
                uu = mid
        out.append(i + (ll + uu) * 0.5)
        break
    else:
        out.append(W)
    return out

def func_7038f3ff683d4cfe95d57f416dce3d89(W, i, out, tt):
    aa = 0.0
    for i in xrange(W):
        myarea = 0.5 * (dd[i] + dd[i + 1])
        if myarea + aa < findme:
            aa += myarea
            continue
        tt = findme - aa
        ll, uu = 0.0, 1.0
        for u in xrange(64):
            mid = (ll + uu) * 0.5
            pp = dd[i] * mid + (dd[i + 1] - dd[i]) * mid ** 2 * 0.5
            if pp < tt:
                ll = mid
            else:
                uu = mid
        out.append(i + (ll + uu) * 0.5)
        break
    else:
        out.append(W)
    return i

def func_625b40f3842546f2ba8dd4fd3e456b65(W, i, out, tt):
    aa = 0.0
    for i in xrange(W):
        myarea = 0.5 * (dd[i] + dd[i + 1])
        if myarea + aa < findme:
            aa += myarea
            continue
        tt = findme - aa
        ll, uu = 0.0, 1.0
        for u in xrange(64):
            mid = (ll + uu) * 0.5
            pp = dd[i] * mid + (dd[i + 1] - dd[i]) * mid ** 2 * 0.5
            if pp < tt:
                ll = mid
            else:
                uu = mid
        out.append(i + (ll + uu) * 0.5)
        break
    else:
        out.append(W)
    return W

def func_c8ee3bcbf39a4663be25856fc25141d3(W, i, out, tt):
    aa = 0.0
    for i in xrange(W):
        myarea = 0.5 * (dd[i] + dd[i + 1])
        if myarea + aa < findme:
            aa += myarea
            continue
        tt = findme - aa
        ll, uu = 0.0, 1.0
        for u in xrange(64):
            mid = (ll + uu) * 0.5
            pp = dd[i] * mid + (dd[i + 1] - dd[i]) * mid ** 2 * 0.5
            if pp < tt:
                ll = mid
            else:
                uu = mid
        out.append(i + (ll + uu) * 0.5)
        break
    else:
        out.append(W)
    return tt

*********************************

#### Score: 4.61546


#### Java Tokens: mid 

public static double func_72d23a8c76ff4b0080ac7deebddbf078(int w) { 
 double l = 0;
double r = w;
double mid = (l + r) * .5;
return l;
}


public static int func_ab234047ad074dddb2df8638a31f21af(int h, int l, int t, long[] a, long[] b) { 
 int mid = l + h >> 1;
if (a[t] - a[mid] >= a[mid] && a[t] - a[mid] >= b[t + 1])
    l = mid + 1;
else
    h = mid;
return l;
}


public static double func_bc35d89ff6834d039daf96da0350b03d(double l, double r) { 
 double mid = (l + r) / 2.;
double s = 0.;
return mid;
}


*********************************

#### Score: 4.29575


#### Java Tokens: mid, h-- 

public static int func_702106ef90c04534bffeb2f6c3258539(int h, int l, int t, long[] a, long[] b) { 
 while (h > l) {
    int mid = l + h >> 1;
    if (a[t] - a[mid] >= a[mid] && a[t] - a[mid] >= b[t + 1])
        l = mid + 1;
    else
        h = mid;
}
if (!(a[t] - a[h] >= a[h] && a[t] - a[h] >= b[t + 1]))
    h--;
return h;
}


public static int func_576a01f6be8549c0819ceb36fee955dd(int t, long[] a, long[] b) { 
 int l = 0;
int h = t - 1;
while (h > l) {
    int mid = l + h >> 1;
    if (a[t] - a[mid] >= a[mid] && a[t] - a[mid] >= b[t + 1])
        l = mid + 1;
    else
        h = mid;
}
if (!(a[t] - a[h] >= a[h] && a[t] - a[h] >= b[t + 1]))
    h--;
return h;
}


public static int func_7518d4c2b9cc4358a5ddb78417da4626(int l, int t, long[] a, long[] b) { 
 int h = t - 1;
while (h > l) {
    int mid = l + h >> 1;
    if (a[t] - a[mid] >= a[mid] && a[t] - a[mid] >= b[t + 1])
        l = mid + 1;
    else
        h = mid;
}
if (!(a[t] - a[h] >= a[h] && a[t] - a[h] >= b[t + 1]))
    h--;
return l;
}


*********************************

#### Score: 4.29575


#### Java Tokens: ans, mid 

public static int func_9e824afd5f494585b53b604700f9d11a(int lo, int mid, int ans) { 
 ans = mid;
lo = mid + 1;
return lo;
}


public static int func_2c3daded18bc4cdf9ea1285f71e9fc00(int lo, int mid, int ans) { 
 ans = mid;
lo = mid + 1;
return ans;
}


*********************************

#### Score: 4.29575


#### Java Tokens: mid, psum 

public static long func_4dcc7afbd4194beaa6dd5fe004f93b8f(int lo, int hi, int i, long[] psum) { 
 int mid = (lo + hi) >> 1;
long s1 = psum[mid] - psum[i];
return s1;
}


public static int func_9b4a4669e7064446a790d447007b5b5e(int lo, int hi, int i, long[] psum) { 
 int mid = (lo + hi) >> 1;
long s1 = psum[mid] - psum[i];
return mid;
}


*********************************

#### Score: 4.29575


#### Java Tokens: max, mid 

public static double func_4818b34805f0483ba09fac78e1de4e90(int W) { 
 double max = W + 0.00000001337;
double mid = 0;
return max;
}


public static double func_6c309f3477f84d4183fd132f1991cba6(int W) { 
 double max = W + 0.00000001337;
double mid = 0;
return mid;
}


*********************************

#### Score: 4.29575


#### Java Tokens: poly, mid 

public static double[] func_e0dedfdd4bbc46dc9681ef9e99f34849(double mid) { 
 double[] poly = new double[8];
poly[0] = mid;
poly[1] = 1001;
poly[2] = mid;
return poly;
}


public static double[] func_b23548b9bda943eb8b8130f97757b51c(double mid) { 
 double[] poly = new double[8];
poly[0] = mid;
poly[1] = 1001;
return poly;
}


public static double[] func_9f89cbf1863d4592999699c165fde066(double mid) { 
 double[] poly = new double[8];
poly[0] = mid;
poly[1] = 1001;
poly[2] = mid;
poly[3] = -1001;
return poly;
}


*********************************

#### Score: 4.29575


#### Java Tokens: mid, lastx 

public static double func_4d9ee975586440578c6dd036cf7c891e(double lastx) { 
 // Binary mos.search
double lo = lastx;
double hi = A.W;
double mid = 0;
return hi;
}


public static double func_ed6405c7ed7d4912ad85a9b5ba2822e9(double lastx) { 
 // Binary mos.search
double lo = lastx;
double hi = A.W;
double mid = 0;
return mid;
}


public static double func_873e7b9de88d4ff4a114f9d21c44a70d(double lastx) { 
 // Binary mos.search
double lo = lastx;
double hi = A.W;
double mid = 0;
return lo;
}


*********************************

#### Score: 4.29575


#### Java Tokens: center, mid 

public static int func_768f2ee196954ba0a4ad8cb606e3138e(int lo, int i, int hi, long[] S) { 
 int mid = (lo + hi) / 2;
long center = S[i + 1] - S[mid];
return mid;
}


public static long func_10556bf8af824bc2b85ed35ee5f03397(int lo, int i, int hi, long[] S) { 
 int mid = (lo + hi) / 2;
long center = S[i + 1] - S[mid];
return center;
}


*********************************

#### Score: 4.29575


#### Java Tokens: dds, mid 

public static double func_5c674a83a63a42d29f14a8ff44b534da(double r, double l) { 
 double dds = 0;
double mid = (l + r) / 2;
return dds;
}


public static double func_e28fd56e250e482d954d93617e6a8f66(double r, double l) { 
 double dds = 0;
double mid = (l + r) / 2;
return mid;
}


*********************************

#### Score: 4.29575


#### Java Tokens: need, mid 

public static long func_6ee0f01049d14fc096fa4402c7b5f486(long L, long need, long R) { 
 long mid = (L + R) / 2;
need = 0;
return need;
}


public static long func_d16a0e26fd004408886b820c748dfd67(long L, long need, long R) { 
 long mid = (L + R) / 2;
need = 0;
return mid;
}


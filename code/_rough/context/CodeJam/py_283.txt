### Py Tokens: best, close, in1, in2, infile 

### Py functions

def func_e4ca06fedfd241be98e47d6ad797f470(best, in1, in2, infile, s):
    if in2 < in1:
        best = s
    infile.close()
    return best

*********************************

#### Score: 4.71001


#### Java Tokens: println, system, string, solve, close, case 

public static PrintWriter func_97edbcadaa1e4fce96a75ba7c7ce5f7c(int T, PrintWriter out, Scanner in) { 
 for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


public static PrintWriter func_3d5d8d6284bd4a7c9b061b4b7e550c8b(int T, PrintWriter out, Scanner in) { 
 for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


public static PrintWriter func_d9b019cc717e4c3b8c9b99f9e5d88aa1(int T, PrintWriter out, Scanner in) { 
 for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


*********************************

#### Score: 4.47350


#### Java Tokens: output, sol, input, print, run, close, case 

public static A func_824d0ee0873c406db6d4a91abeeb84cf(int t, A sol, PrintWriter output, Scanner input) { 
 for (int i = 0; i < t; i++) {
    output.print("Case #" + (i + 1) + ": ");
    sol.run(input, output);
}
input.close();
return sol;
}


public static A func_255ac3bfd7514c3e999c0421d463e0ad(int t, A sol, PrintWriter output, Scanner input) { 
 for (int i = 0; i < t; i++) {
    output.print("Case #" + (i + 1) + ": ");
    sol.run(input, output);
}
input.close();
output.close();
return sol;
}


public static PrintWriter func_4ba97d86cfb141d8908d3783bd5f689b(int t, A sol, PrintWriter output, Scanner input) { 
 for (int i = 0; i < t; i++) {
    output.print("Case #" + (i + 1) + ": ");
    sol.run(input, output);
}
input.close();
return output;
}


*********************************

#### Score: 4.32595


#### Java Tokens: next, sub, beforehalf, half, nextint, max, best, sum, int, beforehalfsum, n--, println, min, answer, subsum, math, value, close, case 

public static PrintWriter func_9a9a24dcd694460dbbfb92447faf4d7a(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int t = 0; t < T; t++) {
    int N = in.nextInt();
    long p = in.nextInt();
    long q = in.nextInt();
    long r = in.nextInt();
    long s = in.nextInt();
    long[] A = new long[N];
    for (int n = 0; n < N; n++) {
        A[n] = (n * p + q) % r + s;
    }
    long[] best = new long[N];
    int beforeHalf = 0;
    long beforeHalfSum = 0;
    long sum = 0;
    for (int n = 0; n < N; n++) {
        sum += A[n];
        while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
            beforeHalfSum += A[beforeHalf];
            beforeHalf++;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0;
    for (int n = N - 1; n >= 1; n--) {
        subSum += A[n];
        min = Math.min(min, Math.max(subSum, best[n - 1]));
    }
    double answer = (sum - min) / (double) sum;
    out.println("Case #" + (t + 1) + ": " + answer);
}
out.close();
return out;
}


public static PrintWriter func_e0cfecc848a64ba4b500f77f3a1bb869(int T, PrintWriter out, Scanner in) { 
 for (int t = 0; t < T; t++) {
    int N = in.nextInt();
    long p = in.nextInt();
    long q = in.nextInt();
    long r = in.nextInt();
    long s = in.nextInt();
    long[] A = new long[N];
    for (int n = 0; n < N; n++) {
        A[n] = (n * p + q) % r + s;
    }
    long[] best = new long[N];
    int beforeHalf = 0;
    long beforeHalfSum = 0;
    long sum = 0;
    for (int n = 0; n < N; n++) {
        sum += A[n];
        while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
            beforeHalfSum += A[beforeHalf];
            beforeHalf++;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0;
    for (int n = N - 1; n >= 1; n--) {
        subSum += A[n];
        min = Math.min(min, Math.max(subSum, best[n - 1]));
    }
    double answer = (sum - min) / (double) sum;
    out.println("Case #" + (t + 1) + ": " + answer);
}
out.close();
return out;
}


public static int func_53a9722e999b412090cc0173455c667a(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int t = 0; t < T; t++) {
    int N = in.nextInt();
    long p = in.nextInt();
    long q = in.nextInt();
    long r = in.nextInt();
    long s = in.nextInt();
    long[] A = new long[N];
    for (int n = 0; n < N; n++) {
        A[n] = (n * p + q) % r + s;
    }
    long[] best = new long[N];
    int beforeHalf = 0;
    long beforeHalfSum = 0;
    long sum = 0;
    for (int n = 0; n < N; n++) {
        sum += A[n];
        while (beforeHalf < n && beforeHalfSum + A[beforeHalf] < sum / 2) {
            beforeHalfSum += A[beforeHalf];
            beforeHalf++;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A[beforeHalf], sum - beforeHalfSum - A[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0;
    for (int n = N - 1; n >= 1; n--) {
        subSum += A[n];
        min = Math.min(min, Math.max(subSum, best[n - 1]));
    }
    double answer = (sum - min) / (double) sum;
    out.println("Case #" + (t + 1) + ": " + answer);
}
out.close();
return T;
}


*********************************

#### Score: 4.08003


#### Java Tokens: best 

public static long[] func_b1c0c25b8751400cb9b8ed80667b2609(int N, long q, long p, long r, long s) { 
 long[] A = new long[N];
for (int n = 0; n < N; n++) {
    A[n] = (n * p + q) % r + s;
}
long[] best = new long[N];
return best;
}


public static long func_85ab28e38fbc420390f19eb9b5c50376(int n, int[] a, long[] s) { 
 for (int i = 0; i < n; i++) {
    s[i + 1] = s[i] + a[i];
}
int l = 1;
long best = s[n];
return best;
}


public static int func_47e06f70e3f14272809eef5650bf45fe(int n, int[] a) { 
 long[] s = new long[n + 1];
for (int i = 0; i < n; i++) {
    s[i + 1] = s[i] + a[i];
}
int l = 1;
long best = s[n];
return l;
}


*********************************

#### Score: 4.07115


#### Java Tokens: next, println, system, nextint, string, solve, close, int, case 

public static PrintWriter func_5f57a2edef1041caa821806cabf7e9d2(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


public static PrintWriter func_635e262b1c0747db8dc8487584a21618(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


public static PrintWriter func_8a2c51d4894943cfb610a6c0d7c52954(PrintWriter out, Scanner in) { 
 int T = in.nextInt();
for (int i = 0; i < T; i++) {
    String s = "Case #" + (i + 1) + ": " + new A().solve(in);
    out.println(s);
    System.out.println(s);
}
out.close();
return out;
}


*********************************

#### Score: 4.07115


#### Java Tokens: next, print, println, nextint, len, oppa, close, int, case 

public static PrintWriter func_4961a51e396740f1a0a0180470083812(int tN, PrintWriter pw, Scanner sc) { 
 for (int tn = 0; tn < tN; tn++) {
    int n = sc.nextInt();
    int[] p = new int[n];
    int[] len = new int[n];
    for (int i = 0; i < n; i++) {
        p[i] = sc.nextInt();
    }
    for (int i = 0; i < n; i++) {
        len[i] = sc.nextInt();
    }
    boolean[] oppa = new boolean[n];
    pw.print("Case #" + (tn + 1) + ":");
    c: for (int i = 0; i < n; i++) {
        int be = -1;
        for (int j = 0; j < n; j++) {
            if (!oppa[j]) {
                if (be == -1 || len[j] * p[be] > len[be] * p[j]) {
                    be = j;
                }
            }
        }
        oppa[be] = true;
        pw.print(" " + be);
    }
    pw.println();
}
pw.close();
return pw;
}


*********************************

#### Score: 3.89861


#### Java Tokens: next, output, sol, input, print, nextint, run, close, int, case 

public static PrintWriter func_1444e94513c44091ae8d288971a555fa(PrintWriter output, Scanner input) { 
 A sol = new A();
int t = input.nextInt();
for (int i = 0; i < t; i++) {
    output.print("Case #" + (i + 1) + ": ");
    sol.run(input, output);
}
input.close();
output.close();
return output;
}


public static A func_65a4334e0eb845aa9b2a100a0d66ce4f(PrintWriter output, Scanner input) { 
 A sol = new A();
int t = input.nextInt();
for (int i = 0; i < t; i++) {
    output.print("Case #" + (i + 1) + ": ");
    sol.run(input, output);
}
input.close();
output.close();
return sol;
}


public static PrintWriter func_3aeadd57bb984c3f8e79c995adee2257(PrintWriter output, Scanner input) { 
 A sol = new A();
int t = input.nextInt();
for (int i = 0; i < t; i++) {
    output.print("Case #" + (i + 1) + ": ");
    sol.run(input, output);
}
input.close();
return output;
}


*********************************

#### Score: 3.89861


#### Java Tokens: next, output, input, sol, print, nextint, run, close, int, case 

public static PrintWriter func_eb1e26ee4713463880a6568f9c8edd62(A sol, PrintWriter output, Scanner input) { 
 int t = input.nextInt();
for (int i = 0; i < t; i++) {
    output.print("Case #" + (i + 1) + ": ");
    sol.run(input, output);
}
input.close();
return output;
}


public static int func_879c93f6d7ae44919b4e10e27ad3420c(A sol, PrintWriter output, Scanner input) { 
 int t = input.nextInt();
for (int i = 0; i < t; i++) {
    output.print("Case #" + (i + 1) + ": ");
    sol.run(input, output);
}
input.close();
output.close();
return t;
}


public static PrintWriter func_cefe389c428946a5aef40a3e840efe00(A sol, PrintWriter output, Scanner input) { 
 int t = input.nextInt();
for (int i = 0; i < t; i++) {
    output.print("Case #" + (i + 1) + ": ");
    sol.run(input, output);
}
input.close();
output.close();
return output;
}


*********************************

#### Score: 3.80126


#### Java Tokens: imos, best 

public static long[] func_aee6bd8a543d4d07aab062b0d7b29375(int n, long[] d) { 
 long[] imos = new long[n + 1];
for (int i = 0; i < n; i++) {
    imos[i + 1] = imos[i] + d[i];
}
long best = 0;
return imos;
}


public static long func_5ab4dc6227bc4d04a7a9ebfabc6ed4c6(int n, long[] imos, long[] d) { 
 for (int i = 0; i < n; i++) {
    imos[i + 1] = imos[i] + d[i];
}
long best = 0;
return best;
}


public static long func_7addfa24a01340fba6b1c85082cc6a72(int n, long[] d) { 
 long[] imos = new long[n + 1];
for (int i = 0; i < n; i++) {
    imos[i + 1] = imos[i] + d[i];
}
long best = 0;
return best;
}


*********************************

#### Score: 3.80126


#### Java Tokens: ans, best 

public static double func_f1854eebc2fc45aea5bf43c7edf15e0b(int k, int j, double ans, double best) { 
 best = ans;
j = k;
return best;
}


public static int func_a646c22f68a7480f8b3f0c9569b494f2(int k, int j, double ans, double best) { 
 best = ans;
j = k;
return j;
}


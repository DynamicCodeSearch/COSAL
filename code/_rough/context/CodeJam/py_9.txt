### Py Tokens: ratio, cur, cur2, sqrt, math 

### Py functions

def func_fedc21211cbf40cfaac2e9e2cea7f2ea(cur, cur2, s, x, x2):
    ratio = s * 1.0 / ((cur + cur2) * (x2 - x))
    cur = math.sqrt(cur ** 2 - ratio * (cur ** 2 - cur2 ** 2))
    return x

def func_ed15d960f98b4c19aabe01eeb3faa29c(cur, cur2, s, x, x2):
    ratio = s * 1.0 / ((cur + cur2) * (x2 - x))
    cur = math.sqrt(cur ** 2 - ratio * (cur ** 2 - cur2 ** 2))
    return x2

def func_5a27b89517a742f59ff9962044eff7c6(cur, cur2, s, x, x2):
    ratio = s * 1.0 / ((cur + cur2) * (x2 - x))
    cur = math.sqrt(cur ** 2 - ratio * (cur ** 2 - cur2 ** 2))
    return x2

def func_a80e44c8f6b74d38a82d12e076d43ee4(cur, cur2, s, x, x2):
    ratio = s * 1.0 / ((cur + cur2) * (x2 - x))
    cur = math.sqrt(cur ** 2 - ratio * (cur ** 2 - cur2 ** 2))
    return x2

def func_96f128c553794df7ac903ad29b8b1baa(cur, cur2, s, x, x2):
    ratio = s * 1.0 / ((cur + cur2) * (x2 - x))
    cur = math.sqrt(cur ** 2 - ratio * (cur ** 2 - cur2 ** 2))
    return x

*********************************

#### Score: 9.46511


#### Java Tokens: sqrt, math 

public static double func_44a352339d634cb29891c263f0e6249b(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return d;
}


public static double func_0ce2725bd9c9403191aa2321c702c0d8(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
return x2;
}


public static double func_0d9ce693d3f6403b889833d31e64791f(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return x2;
}


*********************************

#### Score: 8.88690


#### Java Tokens: res, ratio 

public static double func_92a84e8f1aff4cb6964ce20870130498(int i, int[] y, int[] x, double X, double res) { 
 double ratio = (X - x[i]) / (x[i + 1] - x[i]);
res += ((2 * y[i] + (y[i + 1] - y[i]) * ratio) / 2.0 - IrregularCakes.BASE) * (X - x[i]);
return res;
}


public static double func_af72b6bee7884f72a888e89481af1d9d(int i, int[] y, int[] x, double X, double res) { 
 double ratio = (X - x[i]) / (x[i + 1] - x[i]);
res += ((2 * y[i] + (y[i + 1] - y[i]) * ratio) / 2.0 - IrregularCakes.BASE) * (X - x[i]);
return ratio;
}


*********************************

#### Score: 8.82362


#### Java Tokens: sqrt, remain, math 

public static double func_06fca538ae86406d98f30b655404918a(double k, double remain, double x, double y, double a) { 
 double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
return x2;
}


public static double func_974990c63beb4acbb6815638e81568f9(double k, double remain, double x, double y) { 
 double a = k;
double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return x2;
}


public static double func_da939346f93c492bb76d8e9a0b5bbeff(double k, double remain, double x, double y, double a) { 
 double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return c;
}


*********************************

#### Score: 8.82362


#### Java Tokens: sqrt, math, discr 

public static double func_737b9027879e41dc875f37a059f5ad46(double g, double a, double b, double c) { 
 double discr = b * b - 4 * a * c;
g = (-b + Math.sqrt(discr)) / (2 * a);
return discr;
}


public static double func_d0c5b7ceb5694757bc1ecef11d924fa7(double g, double a, double b, double c) { 
 double discr = b * b - 4 * a * c;
g = (-b + Math.sqrt(discr)) / (2 * a);
return g;
}


*********************************

#### Score: 7.78004


#### Java Tokens: res, sqrt, max, want, math 

public static double func_737e0ce9fc5148b78da051589cd67681(double k, double d1, double want) { 
 double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
double res = (t - d1) / k;
return res;
}


public static double func_c0a4fa8d79514ba0bfe32dfe2ddab429(double k, double d1, double want) { 
 double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
double res = (t - d1) / k;
return t;
}


*********************************

#### Score: 7.34991


#### Java Tokens: abs, sqrt, e-11, math, discr 

public static double func_01531d58c343421fbdf74789256cf7e4(double a, double b, double c) { 
 double g = 0;
if (Math.abs(a) >= 1e-11) {
    double discr = b * b - 4 * a * c;
    g = (-b + Math.sqrt(discr)) / (2 * a);
} else {
    g = -c / b;
}
return g;
}


*********************************

#### Score: 7.34991


#### Java Tokens: sqrt, sumsquares, squares, sum, math, value 

public static double func_74051525cd4f41fca60d8accf85c6091(double sumSquares, double[] x) { 
 for (double value : x) sumSquares += value * value;
return Math.sqrt(sumSquares);

}


public static double func_b9c6f5c4da284a55ae288840ab4dddbc(double[] x) { 
 double sumSquares = 0;
for (double value : x) sumSquares += value * value;
return Math.sqrt(sumSquares);

}


*********************************

#### Score: 7.30971


#### Java Tokens: e-9, res, length, ratio 

public static double func_3d5f2cd428d14d7d86e383c269281d91(int[] y, int[] x, double X, double res) { 
 for (int i = 0; i + 1 < x.length; i++) {
    if (x[i + 1] + 1e-9 >= X) {
        double ratio = (X - x[i]) / (x[i + 1] - x[i]);
        res += ((2 * y[i] + (y[i + 1] - y[i]) * ratio) / 2.0 - IrregularCakes.BASE) * (X - x[i]);
        break;
    } else {
        res += ((y[i + 1] + y[i]) / 2.0 - IrregularCakes.BASE) * (x[i + 1] - x[i]);
    }
}
return res;

}


public static double func_1bcda2a88f1443c8b7d4f2c31f9a73ec(int[] y, int[] x, double X) { 
 double res = 0.0;
for (int i = 0; i + 1 < x.length; i++) {
    if (x[i + 1] + 1e-9 >= X) {
        double ratio = (X - x[i]) / (x[i + 1] - x[i]);
        res += ((2 * y[i] + (y[i + 1] - y[i]) * ratio) / 2.0 - IrregularCakes.BASE) * (X - x[i]);
        break;
    } else {
        res += ((y[i + 1] + y[i]) / 2.0 - IrregularCakes.BASE) * (x[i + 1] - x[i]);
    }
}
return res;
}


*********************************

#### Score: 6.96737


#### Java Tokens: e-9, abs, sqrt, max, want, math 

public static double func_5cd9200d5c114bba822cb37ede55a524(double d2, double d1, double want, double dx) { 
 double k = (d2 - d1) / dx;
if (Math.abs(k) < 1e-9) {
    return want / d1;
}
double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
return k;
}


public static double func_f8ef227c3cde4ce88dcdf48e6db853bd(double k, double d1, double want) { 
 if (Math.abs(k) < 1e-9) {
    return want / d1;
}
double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
return t;
}


public static double func_9aadba8cdf1c47b7a0dfbd6f5323a43e(double d2, double d1, double want, double dx) { 
 double k = (d2 - d1) / dx;
if (Math.abs(k) < 1e-9) {
    return want / d1;
}
double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
return t;
}


*********************************

#### Score: 6.96737


#### Java Tokens: sss, abs, sqrt, e-11, math, discr 

public static double func_e8164d46a83e4588becc486a61d4b72d(double a, double b, double c, double sss) { 
 c -= 2 * sss;
double g = 0;
if (Math.abs(a) >= 1e-11) {
    double discr = b * b - 4 * a * c;
    g = (-b + Math.sqrt(discr)) / (2 * a);
} else {
    g = -c / b;
}
return c;
}


public static double func_ac564402d7314e7c95a7da5fe4261015(double a, double b, double c, double sss) { 
 c -= 2 * sss;
double g = 0;
if (Math.abs(a) >= 1e-11) {
    double discr = b * b - 4 * a * c;
    g = (-b + Math.sqrt(discr)) / (2 * a);
} else {
    g = -c / b;
}
return g;
}


### Py Tokens: slope, target, sqrt, range, part, len, todo, eat 

### Py functions

def func_1299ee830f1b4dc3ba42e94bbe97e8b9(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return i

def func_f6c8232b68ea464f8c199cdf2d72687c(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return part

def func_99b855b7648f451cbc320495c7de5c0b(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return Eat

def func_8120699ab79849da87fe0f2c48199e96(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return L

def func_fd0785c529944fdea6ddc18967ddaa67(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return target

*********************************

#### Score: 6.90306


#### Java Tokens: println, abs, len, sqrt, remain, format, math, e-6 

public static double func_7100e4ce730d40e1834f53761e5581b9(int x0, double remain, double x, double[] len, PrintWriter out) { 
 x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
if (Math.abs(k) > 10e-6) {
    double a = k;
    double b = 2 * (y - k * x);
    double c = k * x * x - 2 * x * y - 2 * remain;
    double d = Math.sqrt(b * b - 4 * a * c);
    double x2 = (d - b) / (2 * a);
    double x3 = -1.0 * (d + b) / (2 * a);
    if (x2 > x && x2 <= x1) {
        out.println(A.format(x2));
        x = x2;
    } else {
        out.println(A.format(x3));
        x = x3;
    }
} else {
    x += remain / y;
    out.println(A.format(x));
}
return y;
}


public static int func_d8119613097546cab8b47a3b0b86e8af(int x0, double remain, double x, double[] len, PrintWriter out) { 
 int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
if (Math.abs(k) > 10e-6) {
    double a = k;
    double b = 2 * (y - k * x);
    double c = k * x * x - 2 * x * y - 2 * remain;
    double d = Math.sqrt(b * b - 4 * a * c);
    double x2 = (d - b) / (2 * a);
    double x3 = -1.0 * (d + b) / (2 * a);
    if (x2 > x && x2 <= x1) {
        out.println(A.format(x2));
        x = x2;
    } else {
        out.println(A.format(x3));
        x = x3;
    }
} else {
    x += remain / y;
    out.println(A.format(x));
}
return x0;
}


public static int func_57070f84d6ad40ae8674b147daff33b5(int x0, double remain, double x, double[] len, PrintWriter out) { 
 x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
if (Math.abs(k) > 10e-6) {
    double a = k;
    double b = 2 * (y - k * x);
    double c = k * x * x - 2 * x * y - 2 * remain;
    double d = Math.sqrt(b * b - 4 * a * c);
    double x2 = (d - b) / (2 * a);
    double x3 = -1.0 * (d + b) / (2 * a);
    if (x2 > x && x2 <= x1) {
        out.println(A.format(x2));
        x = x2;
    } else {
        out.println(A.format(x3));
        x = x3;
    }
} else {
    x += remain / y;
    out.println(A.format(x));
}
return x0;
}


*********************************

#### Score: 6.59617


#### Java Tokens: area, println, abs, len, sqrt, remain, format, math, e-6 

public static double func_3aca2783a0c64127adcb2478cfc80d07(int x0, double area, double x, double[] len, PrintWriter out) { 
 double remain = area;
x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
if (Math.abs(k) > 10e-6) {
    double a = k;
    double b = 2 * (y - k * x);
    double c = k * x * x - 2 * x * y - 2 * remain;
    double d = Math.sqrt(b * b - 4 * a * c);
    double x2 = (d - b) / (2 * a);
    double x3 = -1.0 * (d + b) / (2 * a);
    if (x2 > x && x2 <= x1) {
        out.println(A.format(x2));
        x = x2;
    } else {
        out.println(A.format(x3));
        x = x3;
    }
} else {
    x += remain / y;
    out.println(A.format(x));
}
return y;
}


public static PrintWriter func_8fd9c4ad44ae4808929992e6a20bed2c(int x0, int g, double area, double[] len, PrintWriter out) { 
 double x = 0;
for (int i = 1; i < g; i++) {
    double remain = area;
    x0 = (int) x;
    int x1 = x0 + 1;
    double k = 1.0 * (len[x1] - len[x0]);
    double y = k * (x - x0) + len[x0];
    while (remain > (y + len[x1]) * (x1 - x) / 2) {
        remain -= (y + len[x1]) * (x1 - x) / 2;
        x = x1;
        x0 = (int) x;
        x1 = x0 + 1;
        k = 1.0 * (len[x1] - len[x0]);
        y = k * (x - x0) + len[x0];
    }
    if (Math.abs(k) > 10e-6) {
        double a = k;
        double b = 2 * (y - k * x);
        double c = k * x * x - 2 * x * y - 2 * remain;
        double d = Math.sqrt(b * b - 4 * a * c);
        double x2 = (d - b) / (2 * a);
        double x3 = -1.0 * (d + b) / (2 * a);
        if (x2 > x && x2 <= x1) {
            out.println(A.format(x2));
            x = x2;
        } else {
            out.println(A.format(x3));
            x = x3;
        }
    } else {
        x += remain / y;
        out.println(A.format(x));
    }
}
return out;
}


public static int func_5190f15114ae4acf9979e272b2fb9a80(int x0, double area, double x, double[] len, PrintWriter out) { 
 double remain = area;
x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
if (Math.abs(k) > 10e-6) {
    double a = k;
    double b = 2 * (y - k * x);
    double c = k * x * x - 2 * x * y - 2 * remain;
    double d = Math.sqrt(b * b - 4 * a * c);
    double x2 = (d - b) / (2 * a);
    double x3 = -1.0 * (d + b) / (2 * a);
    if (x2 > x && x2 <= x1) {
        out.println(A.format(x2));
        x = x2;
    } else {
        out.println(A.format(x3));
        x = x3;
    }
} else {
    x += remain / y;
    out.println(A.format(x));
}
return x0;
}


*********************************

#### Score: 6.57976


#### Java Tokens: sqrt, math 

public static double func_44a352339d634cb29891c263f0e6249b(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return d;
}


public static double func_0ce2725bd9c9403191aa2321c702c0d8(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
return x2;
}


public static double func_0d9ce693d3f6403b889833d31e64791f(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return x2;
}


*********************************

#### Score: 6.14323


#### Java Tokens: sqrt, remain, math 

public static double func_06fca538ae86406d98f30b655404918a(double k, double remain, double x, double y, double a) { 
 double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
return x2;
}


public static double func_974990c63beb4acbb6815638e81568f9(double k, double remain, double x, double y) { 
 double a = k;
double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return x2;
}


public static double func_da939346f93c492bb76d8e9a0b5bbeff(double k, double remain, double x, double y, double a) { 
 double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return c;
}


*********************************

#### Score: 6.14323


#### Java Tokens: sqrt, math, discr 

public static double func_737b9027879e41dc875f37a059f5ad46(double g, double a, double b, double c) { 
 double discr = b * b - 4 * a * c;
g = (-b + Math.sqrt(discr)) / (2 * a);
return discr;
}


public static double func_d0c5b7ceb5694757bc1ecef11d924fa7(double g, double a, double b, double c) { 
 double discr = b * b - 4 * a * c;
g = (-b + Math.sqrt(discr)) / (2 * a);
return g;
}


*********************************

#### Score: 5.57661


#### Java Tokens: total, part 

public static double func_d397d5564cfe40b6a27114e059a1b2ee(int G, int g, double total) { 
 double part = g * total / G;
double lb = 0;
return lb;
}


public static double func_70a707fa813f4b1d817a69adeff0f4c4(int G, int g, double total) { 
 double part = g * total / G;
double lb = 0;
return part;
}


public static double func_4a338ec35e204e1cbc6179ae75e170bf(int W, int G, int g, double total) { 
 double part = g * total / G;
double lb = 0;
double ub = W;
return ub;
}


*********************************

#### Score: 5.57402


#### Java Tokens: area, lastx, target 

public static double func_373a3869f55643a2a840009a1e4b1553(double area) { 
 double lastx = 0;
double target = area / A.G;
return lastx;
}


public static double func_171e573e7d07460ebeacc3f38fb921c4(double area) { 
 double lastx = 0;
double target = area / A.G;
return target;
}


*********************************

#### Score: 5.43308


#### Java Tokens: res, sqrt, max, want, math 

public static double func_737e0ce9fc5148b78da051589cd67681(double k, double d1, double want) { 
 double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
double res = (t - d1) / k;
return res;
}


public static double func_c0a4fa8d79514ba0bfe32dfe2ddab429(double k, double d1, double want) { 
 double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
double res = (t - d1) / k;
return t;
}


*********************************

#### Score: 5.23314


#### Java Tokens: area, mid, lastx, target 

public static double func_76b992678fe04896a770ba511822037e(double target, double hi, double lastx, double lo) { 
 double mid = 0;
while (hi - lo > 0.00000000001) {
    mid = (hi + lo) / 2;
    double ar = A.area(lastx, mid);
    if (ar > target)
        hi = mid;
    else
        lo = mid;
}
return mid;
}


public static double func_f18c6f66f58b4b7ea68f9c44485ea83e(double target, double hi, double mid, double lastx, double lo) { 
 double ar = A.area(lastx, mid);
if (ar > target)
    hi = mid;
else
    lo = mid;
return ar;
}


public static double func_6de328ecd5274080a8cd6f632a06bf56(double target, double hi, double mid, double lastx, double lo) { 
 double ar = A.area(lastx, mid);
if (ar > target)
    hi = mid;
else
    lo = mid;
return hi;
}


*********************************

#### Score: 5.14037


#### Java Tokens: abs, sqrt, e-11, math, discr 

public static double func_01531d58c343421fbdf74789256cf7e4(double a, double b, double c) { 
 double g = 0;
if (Math.abs(a) >= 1e-11) {
    double discr = b * b - 4 * a * c;
    g = (-b + Math.sqrt(discr)) / (2 * a);
} else {
    g = -c / b;
}
return g;
}


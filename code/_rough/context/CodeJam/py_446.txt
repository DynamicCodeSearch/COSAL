### Py Tokens: count, total, min, xrange, ymin, len 

### Py functions

def func_1118b02634034cac8fe489141c6b6c2f(x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    return total

def func_9b4654b399ff4d6abc4e2c779185019d(x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return y

def func_0b5ddf1d09554fc6b3c74b7dd10d225c(x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    return count

def func_30a12a2293cd4e4f9de25482ca6e888a(x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return x

def func_f3794172454448c69ab94039bb8a57c1(x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return i

*********************************

#### Score: 6.25394


#### Java Tokens: area, upperpointcount, total, upper, count, totalarea, point, upperpoint 

public static double func_be5e7555a33b492782748a109b6df56c(int upperPointCount, double totalArea, Point[] upperPoint) { 
 for (int i = 1; i < upperPointCount; i++) totalArea -= (upperPoint[i].x - upperPoint[i - 1].x) * (upperPoint[i].y + upperPoint[i - 1].y);
return totalArea;
}


*********************************

#### Score: 6.25394


#### Java Tokens: area, lowerpoint, lowerpointcount, total, lower, count, totalarea, point 

public static double func_90ccba97830d482a91c72a17ef83cc86(int lowerPointCount, double totalArea, Point[] lowerPoint) { 
 for (int i = 1; i < lowerPointCount; i++) totalArea += (lowerPoint[i].x - lowerPoint[i - 1].x) * (lowerPoint[i].y + lowerPoint[i - 1].y);
return totalArea;
}


public static double func_418e579954e84b52b7a9f8a4b461b5b6(int lowerPointCount, Point[] lowerPoint) { 
 double totalArea = 0;
for (int i = 1; i < lowerPointCount; i++) totalArea += (lowerPoint[i].x - lowerPoint[i - 1].x) * (lowerPoint[i].y + lowerPoint[i - 1].y);
return totalArea;
}


*********************************

#### Score: 6.18295


#### Java Tokens: leftcount, min, max, left, count, right 

public static long func_4314bd12473d4d378ec0241c32a86aa0(int i, int left, int max, int min) { 
 int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
return leftCount;
}


public static int func_1868896cd94d4e33910e57d3a7e0231b(int i, int left, int max, int min) { 
 int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
return right;
}


*********************************

#### Score: 6.18295


#### Java Tokens: leftcount, min, left, max, count, right 

public static long func_721ee9104d894bb198bf48abdb9c2936(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
return leftCount;
}


public static int func_1a051775fe4c4f6da8e486c9a1f9de92(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
return left;
}


public static int func_3842023784024eab962b977c7af4c371(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
return right;
}


*********************************

#### Score: 5.96409


#### Java Tokens: area, total, answer, part, guestcount, count, partarea, guest, totalarea 

public static double[] func_4b5e739d6ebd4aefa608c6ea94e92534(int guestCount, double totalArea) { 
 double partArea = totalArea / guestCount;
double[] answer = new double[guestCount - 1];
return answer;
}


public static double func_120eb7a0a40b40bb9568276e8a883237(int guestCount, double totalArea) { 
 double partArea = totalArea / guestCount;
double[] answer = new double[guestCount - 1];
return partArea;
}


*********************************

#### Score: 5.86496


#### Java Tokens: leftcount, min, rightcount, left, max, count, right 

public static long func_6f5a3f721d144e798a10cb25dbfa2cdd(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
if (leftCount < rightCount) {
    max = right;
} else {
    min = left;
}
return leftCount;
}


public static int func_14aadd79631c43f5b4b53925d207343d(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
if (leftCount < rightCount) {
    max = right;
} else {
    min = left;
}
return left;
}


public static int func_8d1c4434450644b996b7067952b4db12(int i, int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
if (leftCount < rightCount) {
    max = right;
} else {
    min = left;
}
return min;
}


*********************************

#### Score: 5.86496


#### Java Tokens: leftcount, min, rightcount, max, left, count, right 

public static int func_ffa9b8f1a653421f8619fcc8f384351c(int i, int left, int max, int min) { 
 int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
return right;
}


public static long func_2a1fd2741a4c407c8acc8df8406ddce5(int i, int left, int max, int min) { 
 int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
if (leftCount < rightCount) {
    max = right;
} else {
    min = left;
}
return rightCount;
}


public static long func_64b9fd3e13ab469c86439a0309ce1ed6(int i, int left, int max, int min) { 
 int right = (2 * max + min) / 3;
long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
return rightCount;
}


*********************************

#### Score: 5.86496


#### Java Tokens: leftcount, rightcount, min, left, max, count, right 

public static int func_19655147d05c47158f63507f4773e80f(int i, int right, int left, int max, int min) { 
 long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
if (leftCount < rightCount) {
    max = right;
} else {
    min = left;
}
return min;
}


public static int func_076cf8f8f4b54e5d8418700ee3486169(int i, int right, int left, int max, int min) { 
 long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
if (leftCount < rightCount) {
    max = right;
} else {
    min = left;
}
return max;
}


public static long func_e10a073d0d75451cb89c3f82e1b09328(int i, int right, int left, int max, int min) { 
 long leftCount = A.count(i, left);
long rightCount = A.count(i, right);
if (leftCount < rightCount) {
    max = right;
} else {
    min = left;
}
return leftCount;
}


*********************************

#### Score: 5.70174


#### Java Tokens: area, upperpointcount, total, abs, upper, count, math, totalarea, point, upperpoint 

public static double func_423ceeef5053432881093cc2e498a055(int upperPointCount, double totalArea, Point[] upperPoint) { 
 for (int i = 1; i < upperPointCount; i++) totalArea -= (upperPoint[i].x - upperPoint[i - 1].x) * (upperPoint[i].y + upperPoint[i - 1].y);
totalArea = Math.abs(totalArea) / 2;
return totalArea;
}


*********************************

#### Score: 5.38164


#### Java Tokens: qty, count 

public static int[] func_e3df435ec28049e9b0a6c9c8b493349d(int r, int count, int q, int s, long p) { 
 int[] qty = new int[count];
for (int i = 0; i < count; i++) qty[i] = (int) ((i * p + q) % r + s);
return qty;
}


### Py Tokens: bets, sort, xrange, len, high, nummin, cost, append, size, amountbet, min, sum, list, case, amount, num, best, max, bet, low 

### Py functions

def func_9007926156464376be27811f3e79558e(B, _T, _bets, f):
    while len(_bets) < 37:
        _bets.append(0)
    _bets.sort()
    best = 0.0
    for num_min in xrange(1, 37):
        bets = list(_bets)

        def cost(size):
            t = 0
            for i in xrange(num_min):
                assert size >= bets[i]
                t += size - bets[i]
            for i in xrange(num_min, 37):
                if bets[i] <= size:
                    t += size + 1 - bets[i]
            return t
        low = max(bets[:num_min]) - 1
        high = 10000000000000
        while high > low:
            g = (high + low + 1) / 2
            c = cost(g)
            if c > B:
                high = g - 1
            else:
                low = g
                amount_bet = g * num_min - sum(bets[:num_min])
                best = max(amount_bet * 36.0 / num_min - c, best)(
                    'Case #%d: %.9f' % (_T + 1, best))
    return high

def func_a7d4acd088954c17b418146cf8eae819(B, _T, _bets, f):
    while len(_bets) < 37:
        _bets.append(0)
    _bets.sort()
    best = 0.0
    for num_min in xrange(1, 37):
        bets = list(_bets)

        def cost(size):
            t = 0
            for i in xrange(num_min):
                assert size >= bets[i]
                t += size - bets[i]
            for i in xrange(num_min, 37):
                if bets[i] <= size:
                    t += size + 1 - bets[i]
            return t
        low = max(bets[:num_min]) - 1
        high = 10000000000000
        while high > low:
            g = (high + low + 1) / 2
            c = cost(g)
            if c > B:
                high = g - 1
            else:
                low = g
                amount_bet = g * num_min - sum(bets[:num_min])
                best = max(amount_bet * 36.0 / num_min - c, best)(
                    'Case #%d: %.9f' % (_T + 1, best))
    return best

def func_98b820fddac94089bbbc075aa5b19621(B, _T, _bets, f):
    while len(_bets) < 37:
        _bets.append(0)
    _bets.sort()
    best = 0.0
    for num_min in xrange(1, 37):
        bets = list(_bets)

        def cost(size):
            t = 0
            for i in xrange(num_min):
                assert size >= bets[i]
                t += size - bets[i]
            for i in xrange(num_min, 37):
                if bets[i] <= size:
                    t += size + 1 - bets[i]
            return t
        low = max(bets[:num_min]) - 1
        high = 10000000000000
        while high > low:
            g = (high + low + 1) / 2
            c = cost(g)
            if c > B:
                high = g - 1
            else:
                low = g
                amount_bet = g * num_min - sum(bets[:num_min])
                best = max(amount_bet * 36.0 / num_min - c, best)(
                    'Case #%d: %.9f' % (_T + 1, best))
    return _T

def func_c03014ea66f34492809072559a115dd0(B, _T, _bets, f):
    while len(_bets) < 37:
        _bets.append(0)
    _bets.sort()
    best = 0.0
    for num_min in xrange(1, 37):
        bets = list(_bets)

        def cost(size):
            t = 0
            for i in xrange(num_min):
                assert size >= bets[i]
                t += size - bets[i]
            for i in xrange(num_min, 37):
                if bets[i] <= size:
                    t += size + 1 - bets[i]
            return t
        low = max(bets[:num_min]) - 1
        high = 10000000000000
        while high > low:
            g = (high + low + 1) / 2
            c = cost(g)
            if c > B:
                high = g - 1
            else:
                low = g
                amount_bet = g * num_min - sum(bets[:num_min])
                best = max(amount_bet * 36.0 / num_min - c, best)(
                    'Case #%d: %.9f' % (_T + 1, best))
    return _bets

def func_ad2cb43281764c0dab1c5f995708d344(B, _T, _bets, f):
    while len(_bets) < 37:
        _bets.append(0)
    _bets.sort()
    best = 0.0
    for num_min in xrange(1, 37):
        bets = list(_bets)

        def cost(size):
            t = 0
            for i in xrange(num_min):
                assert size >= bets[i]
                t += size - bets[i]
            for i in xrange(num_min, 37):
                if bets[i] <= size:
                    t += size + 1 - bets[i]
            return t
        low = max(bets[:num_min]) - 1
        high = 10000000000000
        while high > low:
            g = (high + low + 1) / 2
            c = cost(g)
            if c > B:
                high = g - 1
            else:
                low = g
                amount_bet = g * num_min - sum(bets[:num_min])
                best = max(amount_bet * 36.0 / num_min - c, best)(
                    'Case #%d: %.9f' % (_T + 1, best))
    return low

*********************************

#### Score: 12.63712


#### Java Tokens: cheaters, next, amount, best, arrays, sort, bets, nextlong, long 

public static long[] func_400f562cb2ec4feda4ab805299306fc4(int bets) { 
 long[] amount = new long[37];
for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
return amount;
}


public static double func_74ace98f4ac04ab1822619ab8d0f6188(int bets) { 
 long[] amount = new long[37];
for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
return best;
}


public static double func_75b44cee596943e0a5c2399ce64aa62c(int bets, long[] amount) { 
 for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
return best;
}


*********************************

#### Score: 12.49781


#### Java Tokens: bet, amount, max, joined, expected, lower, best, math 

public static double func_b89cde6c1a5441c3a13065df01d16719(int joined, long lower, long[] amount, double best) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
// System.out.println(String.format(
// "Joined: %s, lowest bet: %s, profit: %s", joined,
// lower, expected - bet));
best = Math.max(best, expected - bet);
return best;
}


public static double func_f5e86a88280547848ee9b67225926e44(int joined, long lower, long[] amount, double best) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
// System.out.println(String.format(
// "Joined: %s, lowest bet: %s, profit: %s", joined,
// lower, expected - bet));
best = Math.max(best, expected - bet);
return expected;
}


public static double func_e3c075089100497f87a0c9d82c4b5be8(int joined, long lower, long[] amount, double best) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
// System.out.println(String.format(
// "Joined: %s, lowest bet: %s, profit: %s", joined,
// lower, expected - bet));
best = Math.max(best, expected - bet);
return bet;
}


*********************************

#### Score: 12.30330


#### Java Tokens: amount, best, arrays, sort 

public static double func_98c75ee332c54d11988b2e9a11856792(long[] amount) { 
 Arrays.sort(amount);
double best = 0.0;
return best;
}


*********************************

#### Score: 11.48787


#### Java Tokens: next, amount, middle, max, joined, lower, upper, expected, e14, best, sort, possible, bets, long, cheaters, bet, arrays, math, nextlong, budget 

public static long[] func_a1d25d5fb0814e159e74fd11824f5fd7(int bets, long budget) { 
 long[] amount = new long[37];
for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
for (int joined = 1; joined <= 37; joined++) {
    long lower = 0, upper = (long) 1e14;
    while (lower + 1 < upper) {
        long middle = (lower + upper) / 2;
        if (Cheaters.possible(amount, joined, middle, budget))
            lower = middle;
        else
            upper = middle;
    }
    if (Cheaters.possible(amount, joined, lower, budget)) {
        double expected = 0, bet = 0;
        for (int i = 0; i < joined; i++) {
            bet += Math.max(0, lower - amount[i]);
            expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
        }
        for (int i = joined; i < 37; i++) {
            bet += Math.max(0, lower + 1 - amount[i]);
        }
        // System.out.println(String.format(
        // "Joined: %s, lowest bet: %s, profit: %s", joined,
        // lower, expected - bet));
        best = Math.max(best, expected - bet);
    }
}
return amount;
}


public static double func_8538e33fcf984248a1edfb04b9ffb81c(int bets, long budget) { 
 long[] amount = new long[37];
for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
for (int joined = 1; joined <= 37; joined++) {
    long lower = 0, upper = (long) 1e14;
    while (lower + 1 < upper) {
        long middle = (lower + upper) / 2;
        if (Cheaters.possible(amount, joined, middle, budget))
            lower = middle;
        else
            upper = middle;
    }
    if (Cheaters.possible(amount, joined, lower, budget)) {
        double expected = 0, bet = 0;
        for (int i = 0; i < joined; i++) {
            bet += Math.max(0, lower - amount[i]);
            expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
        }
        for (int i = joined; i < 37; i++) {
            bet += Math.max(0, lower + 1 - amount[i]);
        }
        // System.out.println(String.format(
        // "Joined: %s, lowest bet: %s, profit: %s", joined,
        // lower, expected - bet));
        best = Math.max(best, expected - bet);
    }
}
return best;
}


public static double func_4331760ecb944c6888ac70098c155da4(int bets, long budget, long[] amount) { 
 for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
for (int joined = 1; joined <= 37; joined++) {
    long lower = 0, upper = (long) 1e14;
    while (lower + 1 < upper) {
        long middle = (lower + upper) / 2;
        if (Cheaters.possible(amount, joined, middle, budget))
            lower = middle;
        else
            upper = middle;
    }
    if (Cheaters.possible(amount, joined, lower, budget)) {
        double expected = 0, bet = 0;
        for (int i = 0; i < joined; i++) {
            bet += Math.max(0, lower - amount[i]);
            expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
        }
        for (int i = joined; i < 37; i++) {
            bet += Math.max(0, lower + 1 - amount[i]);
        }
        // System.out.println(String.format(
        // "Joined: %s, lowest bet: %s, profit: %s", joined,
        // lower, expected - bet));
        best = Math.max(best, expected - bet);
    }
}
return best;
}


*********************************

#### Score: 10.97886


#### Java Tokens: high, low, sum 

public static long func_81beb2a9a2844c0189b6fe4b1e9096f7(long sum) { 
 long low = 0;
long high = sum;
return high;
}


public static long func_f130b35bd7e44a57af243400663cb5a5(long sum) { 
 long low = 0;
long high = sum;
return low;
}


*********************************

#### Score: 10.96875


#### Java Tokens: cheaters, next, amount, arrays, sort, bets, nextlong, long 

public static long[] func_4e521c4c66dc44d1827430f3c4effbba(int bets) { 
 long[] amount = new long[37];
for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
return amount;
}


*********************************

#### Score: 10.81954


#### Java Tokens: next, amount, middle, nextint, max, joined, lower, upper, expected, e14, best, sort, possible, bets, int, long, cheaters, bet, arrays, math, nextlong, budget 

public static int func_7a5efbc8000f4e4dab3c6cd2ba29ceec(long budget) { 
 int bets = Cheaters.sc.nextInt();
long[] amount = new long[37];
for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
for (int joined = 1; joined <= 37; joined++) {
    long lower = 0, upper = (long) 1e14;
    while (lower + 1 < upper) {
        long middle = (lower + upper) / 2;
        if (Cheaters.possible(amount, joined, middle, budget))
            lower = middle;
        else
            upper = middle;
    }
    if (Cheaters.possible(amount, joined, lower, budget)) {
        double expected = 0, bet = 0;
        for (int i = 0; i < joined; i++) {
            bet += Math.max(0, lower - amount[i]);
            expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
        }
        for (int i = joined; i < 37; i++) {
            bet += Math.max(0, lower + 1 - amount[i]);
        }
        // System.out.println(String.format(
        // "Joined: %s, lowest bet: %s, profit: %s", joined,
        // lower, expected - bet));
        best = Math.max(best, expected - bet);
    }
}
return bets;
}


public static double func_5b105fd7d85c48e4a0665cd7fdf508d3(long budget) { 
 int bets = Cheaters.sc.nextInt();
long[] amount = new long[37];
for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
for (int joined = 1; joined <= 37; joined++) {
    long lower = 0, upper = (long) 1e14;
    while (lower + 1 < upper) {
        long middle = (lower + upper) / 2;
        if (Cheaters.possible(amount, joined, middle, budget))
            lower = middle;
        else
            upper = middle;
    }
    if (Cheaters.possible(amount, joined, lower, budget)) {
        double expected = 0, bet = 0;
        for (int i = 0; i < joined; i++) {
            bet += Math.max(0, lower - amount[i]);
            expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
        }
        for (int i = joined; i < 37; i++) {
            bet += Math.max(0, lower + 1 - amount[i]);
        }
        // System.out.println(String.format(
        // "Joined: %s, lowest bet: %s, profit: %s", joined,
        // lower, expected - bet));
        best = Math.max(best, expected - bet);
    }
}
return best;
}


*********************************

#### Score: 10.72945


#### Java Tokens: bet, amount, max, joined, expected, lower, math 

public static double func_4d9a6316c0484c3aa1f72f610cf4a798(int joined, long lower, long[] amount) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
return bet;
}


public static double func_85b356b2afaa47baa42034b534b0559c(int joined, long lower, long[] amount) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
return expected;
}


public static double func_5e240c55ea43403f9d45f3525aa89847(int joined, long lower, long[] amount) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
return bet;
}


*********************************

#### Score: 10.72945


#### Java Tokens: bet, amount, max, joined, lower, expected, math 

public static double func_f4233494239b4ef181115cbeb7a69d1c(int joined, long lower, long[] amount, double bet, double expected) { 
 for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
return bet;
}


public static double func_d35eb63b260c4014afe062db0413b466(int joined, long lower, long[] amount, double bet, double expected) { 
 for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
return expected;
}


*********************************

#### Score: 10.68156


#### Java Tokens: amount, middle, max, joined, lower, upper, expected, e14, best, sort, possible, cheaters, bet, arrays, math, budget 

public static double func_853e81d68633461c94ee11b2b769cadf(long budget, long[] amount) { 
 Arrays.sort(amount);
double best = 0.0;
for (int joined = 1; joined <= 37; joined++) {
    long lower = 0, upper = (long) 1e14;
    while (lower + 1 < upper) {
        long middle = (lower + upper) / 2;
        if (Cheaters.possible(amount, joined, middle, budget))
            lower = middle;
        else
            upper = middle;
    }
    if (Cheaters.possible(amount, joined, lower, budget)) {
        double expected = 0, bet = 0;
        for (int i = 0; i < joined; i++) {
            bet += Math.max(0, lower - amount[i]);
            expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
        }
        for (int i = joined; i < 37; i++) {
            bet += Math.max(0, lower + 1 - amount[i]);
        }
        // System.out.println(String.format(
        // "Joined: %s, lowest bet: %s, profit: %s", joined,
        // lower, expected - bet));
        best = Math.max(best, expected - bet);
    }
}
return best;
}


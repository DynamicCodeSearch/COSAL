### Py Tokens: nxu, min, sqrt, part, len, cuts, nxl, true, append, math 

### Py functions

def func_3f00f8e274b04d29a433a99c6252c472(L, U, cuts, part):
    iL = 0
    iU = 0
    w = U[0][1] - L[0][1]
    a = 0
    x = 0
    while True:
        sL = (L[iL + 1][1] - L[iL][1]) * 1.0 / (L[iL + 1][0] - L[iL][0])
        sU = (U[iU + 1][1] - U[iU][1]) * 1.0 / (U[iU + 1][0] - U[iU][0])
        s = sU - sL
        nxL = L[iL + 1][0]
        nxU = U[iU + 1][0]
        nx = min(nxL, nxU)
        na = 2 * w * (nx - x) + s * (nx - x) * (nx - x)
        if a + na >= part:
            dx = (part - a) * 1.0 / (w + math.sqrt(w * w + (part - a) * s))
            x += dx
            a += 2 * w * dx + s * dx * dx
            cuts.append(x)
            w += s * dx
            a = 0
        else:
            dx = nx - x
            a += 2 * w * dx + s * dx * dx
            x = nx
            w += s * dx
            if nx == nxL:
                iL += 1
            if nx == nxU:
                iU += 1
            if iL >= len(L) - 1:
                break
            if iU >= len(U) - 1:
                break
    return s

def func_d12ca81caf1d4bbe9bb83dc6ac60d580(L, U, cuts, iL, part):
    iU = 0
    w = U[0][1] - L[0][1]
    a = 0
    x = 0
    while True:
        sL = (L[iL + 1][1] - L[iL][1]) * 1.0 / (L[iL + 1][0] - L[iL][0])
        sU = (U[iU + 1][1] - U[iU][1]) * 1.0 / (U[iU + 1][0] - U[iU][0])
        s = sU - sL
        nxL = L[iL + 1][0]
        nxU = U[iU + 1][0]
        nx = min(nxL, nxU)
        na = 2 * w * (nx - x) + s * (nx - x) * (nx - x)
        if a + na >= part:
            dx = (part - a) * 1.0 / (w + math.sqrt(w * w + (part - a) * s))
            x += dx
            a += 2 * w * dx + s * dx * dx
            cuts.append(x)
            w += s * dx
            a = 0
        else:
            dx = nx - x
            a += 2 * w * dx + s * dx * dx
            x = nx
            w += s * dx
            if nx == nxL:
                iL += 1
            if nx == nxU:
                iU += 1
            if iL >= len(L) - 1:
                break
            if iU >= len(U) - 1:
                break
    return part

def func_ecfcd4f6ba154bfa9d5be201e2befe01(L, U, cuts, iL, part):
    iU = 0
    w = U[0][1] - L[0][1]
    a = 0
    x = 0
    while True:
        sL = (L[iL + 1][1] - L[iL][1]) * 1.0 / (L[iL + 1][0] - L[iL][0])
        sU = (U[iU + 1][1] - U[iU][1]) * 1.0 / (U[iU + 1][0] - U[iU][0])
        s = sU - sL
        nxL = L[iL + 1][0]
        nxU = U[iU + 1][0]
        nx = min(nxL, nxU)
        na = 2 * w * (nx - x) + s * (nx - x) * (nx - x)
        if a + na >= part:
            dx = (part - a) * 1.0 / (w + math.sqrt(w * w + (part - a) * s))
            x += dx
            a += 2 * w * dx + s * dx * dx
            cuts.append(x)
            w += s * dx
            a = 0
        else:
            dx = nx - x
            a += 2 * w * dx + s * dx * dx
            x = nx
            w += s * dx
            if nx == nxL:
                iL += 1
            if nx == nxU:
                iU += 1
            if iL >= len(L) - 1:
                break
            if iU >= len(U) - 1:
                break
    return iU

def func_43b9192e4ea64e029e398a07c77e9f78(L, U, cuts, part):
    iL = 0
    iU = 0
    w = U[0][1] - L[0][1]
    a = 0
    x = 0
    while True:
        sL = (L[iL + 1][1] - L[iL][1]) * 1.0 / (L[iL + 1][0] - L[iL][0])
        sU = (U[iU + 1][1] - U[iU][1]) * 1.0 / (U[iU + 1][0] - U[iU][0])
        s = sU - sL
        nxL = L[iL + 1][0]
        nxU = U[iU + 1][0]
        nx = min(nxL, nxU)
        na = 2 * w * (nx - x) + s * (nx - x) * (nx - x)
        if a + na >= part:
            dx = (part - a) * 1.0 / (w + math.sqrt(w * w + (part - a) * s))
            x += dx
            a += 2 * w * dx + s * dx * dx
            cuts.append(x)
            w += s * dx
            a = 0
        else:
            dx = nx - x
            a += 2 * w * dx + s * dx * dx
            x = nx
            w += s * dx
            if nx == nxL:
                iL += 1
            if nx == nxU:
                iU += 1
            if iL >= len(L) - 1:
                break
            if iU >= len(U) - 1:
                break
    return x

def func_3b77818c8df549e7a050df1deb772af1(L, U, part):
    cuts = []
    iL = 0
    iU = 0
    w = U[0][1] - L[0][1]
    a = 0
    x = 0
    while True:
        sL = (L[iL + 1][1] - L[iL][1]) * 1.0 / (L[iL + 1][0] - L[iL][0])
        sU = (U[iU + 1][1] - U[iU][1]) * 1.0 / (U[iU + 1][0] - U[iU][0])
        s = sU - sL
        nxL = L[iL + 1][0]
        nxU = U[iU + 1][0]
        nx = min(nxL, nxU)
        na = 2 * w * (nx - x) + s * (nx - x) * (nx - x)
        if a + na >= part:
            dx = (part - a) * 1.0 / (w + math.sqrt(w * w + (part - a) * s))
            x += dx
            a += 2 * w * dx + s * dx * dx
            cuts.append(x)
            w += s * dx
            a = 0
        else:
            dx = nx - x
            a += 2 * w * dx + s * dx * dx
            x = nx
            w += s * dx
            if nx == nxL:
                iL += 1
            if nx == nxU:
                iU += 1
            if iL >= len(L) - 1:
                break
            if iU >= len(U) - 1:
                break
    return nxL

*********************************

#### Score: 9.46511


#### Java Tokens: sqrt, math 

public static double func_44a352339d634cb29891c263f0e6249b(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return d;
}


public static double func_0ce2725bd9c9403191aa2321c702c0d8(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
return x2;
}


public static double func_0d9ce693d3f6403b889833d31e64791f(double a, double c, double b) { 
 double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return x2;
}


*********************************

#### Score: 8.82362


#### Java Tokens: sqrt, remain, math 

public static double func_06fca538ae86406d98f30b655404918a(double k, double remain, double x, double y, double a) { 
 double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
return x2;
}


public static double func_974990c63beb4acbb6815638e81568f9(double k, double remain, double x, double y) { 
 double a = k;
double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return x2;
}


public static double func_da939346f93c492bb76d8e9a0b5bbeff(double k, double remain, double x, double y, double a) { 
 double b = 2 * (y - k * x);
double c = k * x * x - 2 * x * y - 2 * remain;
double d = Math.sqrt(b * b - 4 * a * c);
double x2 = (d - b) / (2 * a);
double x3 = -1.0 * (d + b) / (2 * a);
return c;
}


*********************************

#### Score: 8.82362


#### Java Tokens: sqrt, math, discr 

public static double func_737b9027879e41dc875f37a059f5ad46(double g, double a, double b, double c) { 
 double discr = b * b - 4 * a * c;
g = (-b + Math.sqrt(discr)) / (2 * a);
return discr;
}


public static double func_d0c5b7ceb5694757bc1ecef11d924fa7(double g, double a, double b, double c) { 
 double discr = b * b - 4 * a * c;
g = (-b + Math.sqrt(discr)) / (2 * a);
return g;
}


*********************************

#### Score: 8.78245


#### Java Tokens: println, abs, len, sqrt, remain, format, math, e-6 

public static double func_7100e4ce730d40e1834f53761e5581b9(int x0, double remain, double x, double[] len, PrintWriter out) { 
 x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
if (Math.abs(k) > 10e-6) {
    double a = k;
    double b = 2 * (y - k * x);
    double c = k * x * x - 2 * x * y - 2 * remain;
    double d = Math.sqrt(b * b - 4 * a * c);
    double x2 = (d - b) / (2 * a);
    double x3 = -1.0 * (d + b) / (2 * a);
    if (x2 > x && x2 <= x1) {
        out.println(A.format(x2));
        x = x2;
    } else {
        out.println(A.format(x3));
        x = x3;
    }
} else {
    x += remain / y;
    out.println(A.format(x));
}
return y;
}


public static int func_d8119613097546cab8b47a3b0b86e8af(int x0, double remain, double x, double[] len, PrintWriter out) { 
 int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
if (Math.abs(k) > 10e-6) {
    double a = k;
    double b = 2 * (y - k * x);
    double c = k * x * x - 2 * x * y - 2 * remain;
    double d = Math.sqrt(b * b - 4 * a * c);
    double x2 = (d - b) / (2 * a);
    double x3 = -1.0 * (d + b) / (2 * a);
    if (x2 > x && x2 <= x1) {
        out.println(A.format(x2));
        x = x2;
    } else {
        out.println(A.format(x3));
        x = x3;
    }
} else {
    x += remain / y;
    out.println(A.format(x));
}
return x0;
}


public static int func_57070f84d6ad40ae8674b147daff33b5(int x0, double remain, double x, double[] len, PrintWriter out) { 
 x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
if (Math.abs(k) > 10e-6) {
    double a = k;
    double b = 2 * (y - k * x);
    double c = k * x * x - 2 * x * y - 2 * remain;
    double d = Math.sqrt(b * b - 4 * a * c);
    double x2 = (d - b) / (2 * a);
    double x3 = -1.0 * (d + b) / (2 * a);
    if (x2 > x && x2 <= x1) {
        out.println(A.format(x2));
        x = x2;
    } else {
        out.println(A.format(x3));
        x = x3;
    }
} else {
    x += remain / y;
    out.println(A.format(x));
}
return x0;
}


*********************************

#### Score: 8.38639


#### Java Tokens: area, println, abs, len, sqrt, remain, format, math, e-6 

public static double func_3aca2783a0c64127adcb2478cfc80d07(int x0, double area, double x, double[] len, PrintWriter out) { 
 double remain = area;
x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
if (Math.abs(k) > 10e-6) {
    double a = k;
    double b = 2 * (y - k * x);
    double c = k * x * x - 2 * x * y - 2 * remain;
    double d = Math.sqrt(b * b - 4 * a * c);
    double x2 = (d - b) / (2 * a);
    double x3 = -1.0 * (d + b) / (2 * a);
    if (x2 > x && x2 <= x1) {
        out.println(A.format(x2));
        x = x2;
    } else {
        out.println(A.format(x3));
        x = x3;
    }
} else {
    x += remain / y;
    out.println(A.format(x));
}
return y;
}


public static PrintWriter func_8fd9c4ad44ae4808929992e6a20bed2c(int x0, int g, double area, double[] len, PrintWriter out) { 
 double x = 0;
for (int i = 1; i < g; i++) {
    double remain = area;
    x0 = (int) x;
    int x1 = x0 + 1;
    double k = 1.0 * (len[x1] - len[x0]);
    double y = k * (x - x0) + len[x0];
    while (remain > (y + len[x1]) * (x1 - x) / 2) {
        remain -= (y + len[x1]) * (x1 - x) / 2;
        x = x1;
        x0 = (int) x;
        x1 = x0 + 1;
        k = 1.0 * (len[x1] - len[x0]);
        y = k * (x - x0) + len[x0];
    }
    if (Math.abs(k) > 10e-6) {
        double a = k;
        double b = 2 * (y - k * x);
        double c = k * x * x - 2 * x * y - 2 * remain;
        double d = Math.sqrt(b * b - 4 * a * c);
        double x2 = (d - b) / (2 * a);
        double x3 = -1.0 * (d + b) / (2 * a);
        if (x2 > x && x2 <= x1) {
            out.println(A.format(x2));
            x = x2;
        } else {
            out.println(A.format(x3));
            x = x3;
        }
    } else {
        x += remain / y;
        out.println(A.format(x));
    }
}
return out;
}


public static int func_5190f15114ae4acf9979e272b2fb9a80(int x0, double area, double x, double[] len, PrintWriter out) { 
 double remain = area;
x0 = (int) x;
int x1 = x0 + 1;
double k = 1.0 * (len[x1] - len[x0]);
double y = k * (x - x0) + len[x0];
while (remain > (y + len[x1]) * (x1 - x) / 2) {
    remain -= (y + len[x1]) * (x1 - x) / 2;
    x = x1;
    x0 = (int) x;
    x1 = x0 + 1;
    k = 1.0 * (len[x1] - len[x0]);
    y = k * (x - x0) + len[x0];
}
if (Math.abs(k) > 10e-6) {
    double a = k;
    double b = 2 * (y - k * x);
    double c = k * x * x - 2 * x * y - 2 * remain;
    double d = Math.sqrt(b * b - 4 * a * c);
    double x2 = (d - b) / (2 * a);
    double x3 = -1.0 * (d + b) / (2 * a);
    if (x2 > x && x2 <= x1) {
        out.println(A.format(x2));
        x = x2;
    } else {
        out.println(A.format(x3));
        x = x3;
    }
} else {
    x += remain / y;
    out.println(A.format(x));
}
return x0;
}


*********************************

#### Score: 7.78004


#### Java Tokens: res, sqrt, max, want, math 

public static double func_737e0ce9fc5148b78da051589cd67681(double k, double d1, double want) { 
 double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
double res = (t - d1) / k;
return res;
}


public static double func_c0a4fa8d79514ba0bfe32dfe2ddab429(double k, double d1, double want) { 
 double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
double res = (t - d1) / k;
return t;
}


*********************************

#### Score: 7.34991


#### Java Tokens: abs, sqrt, e-11, math, discr 

public static double func_01531d58c343421fbdf74789256cf7e4(double a, double b, double c) { 
 double g = 0;
if (Math.abs(a) >= 1e-11) {
    double discr = b * b - 4 * a * c;
    g = (-b + Math.sqrt(discr)) / (2 * a);
} else {
    g = -c / b;
}
return g;
}


*********************************

#### Score: 7.34991


#### Java Tokens: sqrt, sumsquares, squares, sum, math, value 

public static double func_74051525cd4f41fca60d8accf85c6091(double sumSquares, double[] x) { 
 for (double value : x) sumSquares += value * value;
return Math.sqrt(sumSquares);

}


public static double func_b9c6f5c4da284a55ae288840ab4dddbc(double[] x) { 
 double sumSquares = 0;
for (double value : x) sumSquares += value * value;
return Math.sqrt(sumSquares);

}


*********************************

#### Score: 7.08858


#### Java Tokens: cuts 

public static double[] func_64be54931961469088c39fcfd74dd253(int G) { 
 double g = G;
double[] cuts = new double[G - 1];
return cuts;
}


public static double func_5d36dad2b4a84f3990d6eb4eabab939b(int G) { 
 double g = G;
double[] cuts = new double[G - 1];
return g;
}


*********************************

#### Score: 6.96737


#### Java Tokens: e-9, abs, sqrt, max, want, math 

public static double func_5cd9200d5c114bba822cb37ede55a524(double d2, double d1, double want, double dx) { 
 double k = (d2 - d1) / dx;
if (Math.abs(k) < 1e-9) {
    return want / d1;
}
double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
return k;
}


public static double func_f8ef227c3cde4ce88dcdf48e6db853bd(double k, double d1, double want) { 
 if (Math.abs(k) < 1e-9) {
    return want / d1;
}
double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
return t;
}


public static double func_9aadba8cdf1c47b7a0dfbd6f5323a43e(double d2, double d1, double want, double dx) { 
 double k = (d2 - d1) / dx;
if (Math.abs(k) < 1e-9) {
    return want / d1;
}
double t = Math.sqrt(Math.max(d1 * d1 + 2 * k * want, 0));
return t;
}


### Py Tokens: firstsum, max, currentmax, minimax, min, lastsum, transistorsum 

### Py functions

def func_911a8bd98a9b4444b8a939ccff264824(firstsum, lastsum, minimax,
    transistorsum):
    currentmax = max([firstsum, lastsum, transistorsum - firstsum - lastsum])
    minimax = min(currentmax, minimax)
    return currentmax

def func_c3af124b4e24450389dfbe521cf70417(firstsum, lastsum, minimax,
    transistorsum):
    currentmax = max([firstsum, lastsum, transistorsum - firstsum - lastsum])
    minimax = min(currentmax, minimax)
    return minimax

*********************************

#### Score: 5.30661


#### Java Tokens: min, max 

public static int func_8c98f5c7c4d7479ea4c39e4462691c43(int i, int n) { 
 int min = i;
int max = n - 1;
return min;
}


public static int func_510cfd37c6274b7386ccf8e8bef4839d(int n, int h) { 
 int min = h;
int max = n - 1;
return min;
}


public static double func_d120afe8bfa04104a16940e1840c70c6(int W) { 
 double min = 0.0;
double max = W + 0.00000001337;
return max;
}


*********************************

#### Score: 4.96052


#### Java Tokens: min, max, mid 

public static double func_5fad18642ff14066a6fe74641ea01af6(int W) { 
 double min = 0.0;
double max = W + 0.00000001337;
double mid = 0;
return max;
}


public static double func_edd0616014f744f682c50158dd9ae2d1(int W) { 
 double min = 0.0;
double max = W + 0.00000001337;
double mid = 0;
return min;
}


public static double func_fb4410dc2df54416acebfee479ecc07e(int W) { 
 double min = 0.0;
double max = W + 0.00000001337;
double mid = 0;
return mid;
}


*********************************

#### Score: 4.96052


#### Java Tokens: min, max, budget 

public static long func_2b6ce4e4bbb6489c88e411c6aee59b2f(long budget) { 
 long min = 0;
long max = budget + 1;
return min;
}


public static long func_bdc3ca0a3a2a417c91b66ac82a300dd6(long budget) { 
 long min = 0;
long max = budget + 1;
return max;
}


*********************************

#### Score: 4.66033


#### Java Tokens: min, max, poly, mid 

public static double func_c31f447a3b494b5cb1466be318d28632(double min, double max) { 
 double mid = (min + max) / 2;
double[] poly = new double[8];
poly[0] = mid;
return mid;
}


public static double func_8bf44cf1b2554240ba07201da3eba62a(double min, double max) { 
 double mid = (min + max) / 2;
double[] poly = new double[8];
poly[0] = mid;
poly[1] = 1001;
poly[2] = mid;
return mid;
}


public static double[] func_5ecdfbf0421c4640bd87b3945acc54ef(double min, double max) { 
 double mid = (min + max) / 2;
double[] poly = new double[8];
poly[0] = mid;
return poly;
}


*********************************

#### Score: 4.66033


#### Java Tokens: min, max, need, mid 

public static long func_b3a1a1946e8d499dbcd49c3f4bbc3ad8(long min, long max) { 
 long mid = (min + max) / 2;
long need = 0;
return need;
}


public static long func_e9dbe619b28d4fe685aeb331612419d4(long min, long max) { 
 long mid = (min + max) / 2;
long need = 0;
return mid;
}


*********************************

#### Score: 4.66033


#### Java Tokens: min, left, max, right 

public static int func_26ea343e785e42efb3753036a0b2a5ba(int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
return right;
}


public static int func_947a3ae64cb84a41b3092ef70726de88(int max, int min) { 
 int left = (2 * min + max) / 3;
int right = (2 * max + min) / 3;
return left;
}


*********************************

#### Score: 4.66033


#### Java Tokens: min, last, max, lastx 

public static double func_515a7808cc804f33b25845fc99140891(int lastX) { 
 double min = 0;
double max = lastX;
return min;
}


public static double func_c85420328fa74166a189b942ac0f172e(int lastX) { 
 double min = 0;
double max = lastX;
return max;
}


*********************************

#### Score: 4.39749


#### Java Tokens: cur, min, max, best, math 

public static long func_3f962ac00d7b48b8ab8d40973dba07f9(int n, int r, long cur, long best, long[] s) { 
 cur = Math.max(cur, s[n] - s[r]);
best = Math.min(best, cur);
return cur;
}


public static long func_15c2af9aa3224dbd94712e22856ad765(int n, int r, int l, long best, long[] s) { 
 long cur = 0;
cur = Math.max(cur, s[l - 1]);
cur = Math.max(cur, s[r] - s[l - 1]);
cur = Math.max(cur, s[n] - s[r]);
best = Math.min(best, cur);
return cur;
}


public static long func_6bc891ef9d5146b8b2c34fd22e73c2e3(int n, int r, long cur, long best, long[] s) { 
 cur = Math.max(cur, s[n] - s[r]);
best = Math.min(best, cur);
return best;
}


*********************************

#### Score: 4.39749


#### Java Tokens: min, max, ans, sum, math 

public static int func_18e0d7a3a9004e878e1bb3e739bfcbf6(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return l;
}


public static long func_86e361714b204771a5224d744686e8da(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return ans;
}


public static long func_1bd1c810a74e498e9723f78d4fe9cfda(int n, int i, int l, long ans, long[] sum) { 
 while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
    l++;
}
ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
return ans;
}


*********************************

#### Score: 4.39749


#### Java Tokens: min, max, index, sum, math 

public static long func_0c68d71997e7428e9d7904a53e3aac09(int n, int[] a) { 
 // sout(a);
long[] sum = new long[n + 1];
sum[0] = 0;
for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + a[i];
long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
return x;
}


public static long[] func_81099636a926473db32921cd0455d201(int n, int[] a) { 
 // sout(a);
long[] sum = new long[n + 1];
sum[0] = 0;
for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + a[i];
long x = sum[n];
int index = 0;
for (int i = 0; i < n; i++) {
    while (index < n && sum[n] - sum[index + 1] > sum[index + 1] - sum[i]) index++;
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
    x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
// sout(i + " " + index);
}
return sum;
}


public static long func_96063614cbca4ad4be52c5a55f8a5c37(int i, int index, int n, long x, long[] sum) { 
 x = Math.min(x, Math.max(sum[i], Math.max(sum[index] - sum[i], sum[n] - sum[index])));
x = Math.min(x, Math.max(sum[i], Math.max(sum[index + 1] - sum[i], sum[n] - sum[index + 1])));
return x;
}


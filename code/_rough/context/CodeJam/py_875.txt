### Py Tokens: range, vsota, cum, sum, append 

### Py functions

def func_a75a752d6c1948bcbbce39bb2f8f3234(n, p, q, r, s):
    l = [((i * p + q) % r + s) for i in range(n)]
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    return s

def func_d7230b0c82e64ab1b40e00c2e920c537(n, p, q, r, s):
    l = [((i * p + q) % r + s) for i in range(n)]
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    return x

def func_a2665e3999984698b8181ab915988a9f(n, p, q, r, s):
    l = [((i * p + q) % r + s) for i in range(n)]
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    return vsota

def func_d74d8d81041b46f38e2bc9bd85319218(n, p, q, r, s):
    l = [((i * p + q) % r + s) for i in range(n)]
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    return x

def func_a98e12bc17584d629b7e20a50c029bc8(n, p, q, r, s):
    l = [((i * p + q) % r + s) for i in range(n)]
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    return l

*********************************

#### Score: 7.21801


#### Java Tokens: cum 

public static long func_24db2094c9cf47a18244f66646e16827(int a, int b, long[] cum) { 
 if (a == 0)
    return cum[b];
else {
    return cum[b] - cum[a - 1];
}

}


public static long func_bd101027a8c3491dbc7cf1d2898d0607(long L, long R, long[] cum) { 
 long M = (L + R) >> 1;
// out.println(L+" "+R+" "+M+" "+ok(M,cum));
if (A.ok(M, cum)) {
    R = M;
} else {
    L = M;
}
return R;
}


public static long func_6eba08b70c2747f5857ab065a1a0586a(long L, long R, long[] cum) { 
 long M = (L + R) >> 1;
// out.println(L+" "+R+" "+M+" "+ok(M,cum));
if (A.ok(M, cum)) {
    R = M;
} else {
    L = M;
}
return L;
}


*********************************

#### Score: 6.69929


#### Java Tokens: tot, cum 

public static long func_ad7458e49c41404faed36a25302fd505(long tot, long L, long[] cum) { 
 long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
return L;
}


public static long[] func_b5ed109ba1674a9dbe58e8f6b10c95d1(int N) { 
 long[] cum = new long[N];
long tot = 0;
return cum;
}


public static long func_dc02fe303d3a4c6fb54c44c3ec092235(long tot, long[] cum) { 
 long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
return R;
}


*********************************

#### Score: 6.69929


#### Java Tokens: arr, cum 

public static long[] func_a97a46f80de64dd8868bb7e096bbf8a7(int N) { 
 long[] arr = new long[N];
long[] cum = new long[N];
return arr;
}


public static long[] func_f3e3f5c8212d4e6f9ac4cc22fe9a79d9(int N) { 
 long[] arr = new long[N];
long[] cum = new long[N];
return cum;
}


*********************************

#### Score: 6.25427


#### Java Tokens: arr, tot, cum 

public static long func_bc93e174c1e546319c3dc7a4a04ac99d(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
return tot;
}


public static long[] func_f9dd255ad50343189bd52bacffe91a3d(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
return arr;
}


public static long func_55e00c9ca7854244ad18d4313a294949(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
return L;
}


*********************************

#### Score: 6.25427


#### Java Tokens: ans, tot, cum 

public static double func_566ffbeabd1c49aa935f1edccf17959f(long tot, long L, long R, long[] cum) { 
 while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return ans;
}


public static double func_039caa185ccb4afa8488b13df605a367(long tot, long[] cum) { 
 long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return ans;
}


public static long func_f3fa3a5793ae4ff58775d407d9a81dd4(long tot, long L, long R, long[] cum) { 
 while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return R;
}


*********************************

#### Score: 5.86828


#### Java Tokens: arr, ans, tot, cum 

public static long func_04ee2a053ede41ddb77cb58bf24c2b6b(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return R;
}


public static long func_efcea0cc06b44eb9bd91759734df338d(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return tot;
}


public static long[] func_0bb10a3aa03e43d893aca2c161207772(int N, long r, long p, long s, long q) { 
 long[] arr = new long[N];
long[] cum = new long[N];
long tot = 0;
for (int i = 0; i < N; i++) {
    arr[i] = ((i * p + q) % r) + s;
    if (i > 0)
        cum[i] = cum[i - 1] + arr[i];
    else
        cum[i] = arr[i];
    tot += arr[i];
}
long L = 0;
long R = tot + 1;
while (L + 1 < R) {
    long M = (L + R) >> 1;
    // out.println(L+" "+R+" "+M+" "+ok(M,cum));
    if (A.ok(M, cum)) {
        R = M;
    } else {
        L = M;
    }
}
// out.println(R+" "+tot);
double ans = (tot - R) * 1.0 / tot;
return arr;
}


*********************************

#### Score: 3.36283


#### Java Tokens: sum 

public static long func_fef066e8ba364fb5b2c7d6aac6e90261(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
return sum;
}


public static long[] func_ba05bec30e1c43de95db7b3a8fd0ccc3(int n) { 
 int[] t = new int[n];
long[] sum = new long[n + 1];
return sum;
}


public static long func_bf27f0e6c4444873b358bc64d4d8e6ec(int n, int r, int s, int q, long p) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((i * p + q) % r) + s;
    sum += a[i];
}
return sum;
}


*********************************

#### Score: 3.13891


#### Java Tokens: data, sum 

public static long func_60aaf6655bb345dfbc0f7272f4c0962e(int n, int[] data) { 
 // System.out.println(lo);
long sum = 0;
for (int i = 0; i < n; i++) sum += data[i];
return sum;
}


*********************************

#### Score: 3.13891


#### Java Tokens: arr, sum 

public static long func_2b5af3de29fa4cc2b915ea2ea8558d7b(int N, int[] arr, long sum, long[] LS, long[] RS) { 
 for (int i = 0; i < N; ++i) {
    LS[i] = arr[i] + (i > 0 ? LS[i - 1] : 0);
    RS[i] = arr[N - i - 1] + (i > 0 ? RS[i - 1] : 0);
}
long LO = 0;
long HI = sum;
return LO;
}


public static int[] func_598c2695e8ff482da8a773b78c6287f6(int N, int b, int d, int c, long a) { 
 int[] arr = new int[N];
long sum = 0;
for (int i = 0; i < N; ++i) {
    arr[i] = (int) ((i * a + b) % c + d);
    sum += arr[i];
}
long[] LS = new long[N];
long[] RS = new long[N];
for (int i = 0; i < N; ++i) {
    LS[i] = arr[i] + (i > 0 ? LS[i - 1] : 0);
    RS[i] = arr[N - i - 1] + (i > 0 ? RS[i - 1] : 0);
}
long LO = 0;
return arr;
}


public static long[] func_90c1e7e1d3ba4aa4b12b9037ccfe4aad(int N, long p, long r, long s, long q) { 
 long[] arr = new long[N];
long[] dp = new long[N + 1];
long sum = 0;
for (int i = 0; i < N; ++i) {
    arr[i] = ((i * p + q) % r) + s;
    sum += arr[i];
    dp[i + 1] = dp[i] + arr[i];
}
return arr;
}


*********************************

#### Score: 3.13891


#### Java Tokens: tmp, sum 

public static long func_023f48b0402f4be6a677630698a21dbb(int n, int x, int y, long sum, long[] a) { 
 long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return tmp;
}


public static long func_7372dc9491c04019a025a05a04771836(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
for (int i = 0; i < n; i++) {
    tmp += a[i];
    if (tmp * 3 <= sum) {
        x = i;
    }
    if (tmp * 3 <= sum * 2) {
        y = i;
    }
}
return sum;
}


public static int func_cdaf79ae1b7042f992fd7274207fe3cc(int n, int p, int q, int s, int r) { 
 long[] a = new long[n];
long sum = 0;
for (int i = 0; i < n; i++) {
    a[i] = ((long) i * p + q) % r + s;
    sum += a[i];
}
int x = 0, y = 0;
long tmp = 0;
return y;
}


### Py Tokens: bets, amountbet, cost, bet, min, xrange, sum, amount, high, nummin, num, low, max, best, size 

### Py functions

def func_49a7f5bc3cad4ff990890fa170b4f912(B, _T, best, bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    while high > low:
        g = (high + low + 1) / 2
        c = cost(g)
        if c > B:
            high = g - 1
        else:
            low = g
            amount_bet = g * num_min - sum(bets[:num_min])
            best = max(amount_bet * 36.0 / num_min - c, best)
    return low

def func_3d6ee65b63d04484bb09ddcaac6276b5(B, _T, best, bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    while high > low:
        g = (high + low + 1) / 2
        c = cost(g)
        if c > B:
            high = g - 1
        else:
            low = g
            amount_bet = g * num_min - sum(bets[:num_min])
            best = max(amount_bet * 36.0 / num_min - c, best)
    return high

def func_115c3475b90440f1a15a5819aae7a1aa(B, _T, best, bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    while high > low:
        g = (high + low + 1) / 2
        c = cost(g)
        if c > B:
            high = g - 1
        else:
            low = g
            amount_bet = g * num_min - sum(bets[:num_min])
            best = max(amount_bet * 36.0 / num_min - c, best)
    return bets

def func_1d12055c8b7b42f79deab94b3ce7d458(B, _T, best, bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    while high > low:
        g = (high + low + 1) / 2
        c = cost(g)
        if c > B:
            high = g - 1
        else:
            low = g
            amount_bet = g * num_min - sum(bets[:num_min])
            best = max(amount_bet * 36.0 / num_min - c, best)
    return num_min

def func_2d5f883b89ac414eb4dbd001be0ab174(B, _T, best, bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    while high > low:
        g = (high + low + 1) / 2
        c = cost(g)
        if c > B:
            high = g - 1
        else:
            low = g
            amount_bet = g * num_min - sum(bets[:num_min])
            best = max(amount_bet * 36.0 / num_min - c, best)
    return best

*********************************

#### Score: 12.49781


#### Java Tokens: bet, amount, max, joined, expected, lower, best, math 

public static double func_b89cde6c1a5441c3a13065df01d16719(int joined, long lower, long[] amount, double best) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
// System.out.println(String.format(
// "Joined: %s, lowest bet: %s, profit: %s", joined,
// lower, expected - bet));
best = Math.max(best, expected - bet);
return best;
}


public static double func_f5e86a88280547848ee9b67225926e44(int joined, long lower, long[] amount, double best) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
// System.out.println(String.format(
// "Joined: %s, lowest bet: %s, profit: %s", joined,
// lower, expected - bet));
best = Math.max(best, expected - bet);
return expected;
}


public static double func_e3c075089100497f87a0c9d82c4b5be8(int joined, long lower, long[] amount, double best) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
// System.out.println(String.format(
// "Joined: %s, lowest bet: %s, profit: %s", joined,
// lower, expected - bet));
best = Math.max(best, expected - bet);
return bet;
}


*********************************

#### Score: 10.97886


#### Java Tokens: high, low, sum 

public static long func_81beb2a9a2844c0189b6fe4b1e9096f7(long sum) { 
 long low = 0;
long high = sum;
return high;
}


public static long func_f130b35bd7e44a57af243400663cb5a5(long sum) { 
 long low = 0;
long high = sum;
return low;
}


*********************************

#### Score: 10.72945


#### Java Tokens: bet, amount, max, joined, expected, lower, math 

public static double func_4d9a6316c0484c3aa1f72f610cf4a798(int joined, long lower, long[] amount) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
return bet;
}


public static double func_85b356b2afaa47baa42034b534b0559c(int joined, long lower, long[] amount) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
return expected;
}


public static double func_5e240c55ea43403f9d45f3525aa89847(int joined, long lower, long[] amount) { 
 double expected = 0, bet = 0;
for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
return bet;
}


*********************************

#### Score: 10.72945


#### Java Tokens: bet, amount, max, joined, lower, expected, math 

public static double func_f4233494239b4ef181115cbeb7a69d1c(int joined, long lower, long[] amount, double bet, double expected) { 
 for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
return bet;
}


public static double func_d35eb63b260c4014afe062db0413b466(int joined, long lower, long[] amount, double bet, double expected) { 
 for (int i = 0; i < joined; i++) {
    bet += Math.max(0, lower - amount[i]);
    expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
}
for (int i = joined; i < 37; i++) {
    bet += Math.max(0, lower + 1 - amount[i]);
}
return expected;
}


*********************************

#### Score: 10.27991


#### Java Tokens: cheaters, next, amount, best, arrays, sort, bets, nextlong, long 

public static long[] func_400f562cb2ec4feda4ab805299306fc4(int bets) { 
 long[] amount = new long[37];
for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
return amount;
}


public static double func_74ace98f4ac04ab1822619ab8d0f6188(int bets) { 
 long[] amount = new long[37];
for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
return best;
}


public static double func_75b44cee596943e0a5c2399ce64aa62c(int bets, long[] amount) { 
 for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
return best;
}


*********************************

#### Score: 10.18981


#### Java Tokens: bet, amount, lowestbet, max, joined, math, lowest, required 

public static long func_2c113b83872c4a5594d96d4be9f8888b(int joined, long lowestBet, long required, long[] amount) { 
 for (int i = 0; i < 37; i++) {
    required += Math.max(0, i < joined ? (lowestBet - amount[i]) : (lowestBet + 1 - amount[i]));
}
return required;
}


public static long func_894d0b4574e74399bc80e2abf4a29ee7(int joined, long lowestBet, long[] amount) { 
 long required = 0;
for (int i = 0; i < 37; i++) {
    required += Math.max(0, i < joined ? (lowestBet - amount[i]) : (lowestBet + 1 - amount[i]));
}
return required;
}


*********************************

#### Score: 10.08517


#### Java Tokens: high, prefixsum, suff, low, max, prefix, suffsum, mid, sum, best, math, rsum 

public static long func_cdf80fa07a634e9f9d96054ccb97af28(int i, int n, long best, long[] rsum) { 
 int low = i;
int high = n - 1;
long prefixSum = (i == 0 ? 0 : rsum[i - 1]);
while (high - low > 1) {
    int mid = (high + low) / 2;
    long sum = (rsum[mid] - prefixSum);
    long suffSum = rsum[n - 1] - sum - prefixSum;
    if (sum <= suffSum) {
        low = mid;
    } else {
        high = mid;
    }
}
for (int j = low; j <= high; j++) {
    long sum = (rsum[j] - prefixSum);
    long suffSum = rsum[n - 1] - sum - prefixSum;
    long max = Math.max(sum, suffSum);
    max = Math.max(max, prefixSum);
    best = Math.max(best, rsum[n - 1] - max);
}
return prefixSum;
}


public static int func_c70161c30d1b4dd7a7c322e075b928fb(int low, int i, int n, long best, long[] rsum) { 
 int high = n - 1;
long prefixSum = (i == 0 ? 0 : rsum[i - 1]);
while (high - low > 1) {
    int mid = (high + low) / 2;
    long sum = (rsum[mid] - prefixSum);
    long suffSum = rsum[n - 1] - sum - prefixSum;
    if (sum <= suffSum) {
        low = mid;
    } else {
        high = mid;
    }
}
for (int j = low; j <= high; j++) {
    long sum = (rsum[j] - prefixSum);
    long suffSum = rsum[n - 1] - sum - prefixSum;
    long max = Math.max(sum, suffSum);
    max = Math.max(max, prefixSum);
    best = Math.max(best, rsum[n - 1] - max);
}
return low;
}


public static int func_c058389535084fa3a82e58cdd47ed956(int i, int n, long best, long[] rsum) { 
 int low = i;
int high = n - 1;
long prefixSum = (i == 0 ? 0 : rsum[i - 1]);
while (high - low > 1) {
    int mid = (high + low) / 2;
    long sum = (rsum[mid] - prefixSum);
    long suffSum = rsum[n - 1] - sum - prefixSum;
    if (sum <= suffSum) {
        low = mid;
    } else {
        high = mid;
    }
}
for (int j = low; j <= high; j++) {
    long sum = (rsum[j] - prefixSum);
    long suffSum = rsum[n - 1] - sum - prefixSum;
    long max = Math.max(sum, suffSum);
    max = Math.max(max, prefixSum);
    best = Math.max(best, rsum[n - 1] - max);
}
return high;
}


*********************************

#### Score: 10.08517


#### Java Tokens: high, prefixsum, suff, low, max, prefix, suffsum, mid, best, sum, math, rsum 

public static long func_b5913ed0ccaf4367b7499032196abe48(int n, long[] rsum) { 
 long best = 0;
for (int i = 0; i < n; i++) {
    int low = i;
    int high = n - 1;
    long prefixSum = (i == 0 ? 0 : rsum[i - 1]);
    while (high - low > 1) {
        int mid = (high + low) / 2;
        long sum = (rsum[mid] - prefixSum);
        long suffSum = rsum[n - 1] - sum - prefixSum;
        if (sum <= suffSum) {
            low = mid;
        } else {
            high = mid;
        }
    }
    for (int j = low; j <= high; j++) {
        long sum = (rsum[j] - prefixSum);
        long suffSum = rsum[n - 1] - sum - prefixSum;
        long max = Math.max(sum, suffSum);
        max = Math.max(max, prefixSum);
        best = Math.max(best, rsum[n - 1] - max);
    }
}
return best;
}


*********************************

#### Score: 9.96500


#### Java Tokens: next, amount, middle, max, joined, lower, upper, expected, e14, best, sort, possible, bets, long, cheaters, bet, arrays, math, nextlong, budget 

public static long[] func_a1d25d5fb0814e159e74fd11824f5fd7(int bets, long budget) { 
 long[] amount = new long[37];
for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
for (int joined = 1; joined <= 37; joined++) {
    long lower = 0, upper = (long) 1e14;
    while (lower + 1 < upper) {
        long middle = (lower + upper) / 2;
        if (Cheaters.possible(amount, joined, middle, budget))
            lower = middle;
        else
            upper = middle;
    }
    if (Cheaters.possible(amount, joined, lower, budget)) {
        double expected = 0, bet = 0;
        for (int i = 0; i < joined; i++) {
            bet += Math.max(0, lower - amount[i]);
            expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
        }
        for (int i = joined; i < 37; i++) {
            bet += Math.max(0, lower + 1 - amount[i]);
        }
        // System.out.println(String.format(
        // "Joined: %s, lowest bet: %s, profit: %s", joined,
        // lower, expected - bet));
        best = Math.max(best, expected - bet);
    }
}
return amount;
}


public static double func_8538e33fcf984248a1edfb04b9ffb81c(int bets, long budget) { 
 long[] amount = new long[37];
for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
for (int joined = 1; joined <= 37; joined++) {
    long lower = 0, upper = (long) 1e14;
    while (lower + 1 < upper) {
        long middle = (lower + upper) / 2;
        if (Cheaters.possible(amount, joined, middle, budget))
            lower = middle;
        else
            upper = middle;
    }
    if (Cheaters.possible(amount, joined, lower, budget)) {
        double expected = 0, bet = 0;
        for (int i = 0; i < joined; i++) {
            bet += Math.max(0, lower - amount[i]);
            expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
        }
        for (int i = joined; i < 37; i++) {
            bet += Math.max(0, lower + 1 - amount[i]);
        }
        // System.out.println(String.format(
        // "Joined: %s, lowest bet: %s, profit: %s", joined,
        // lower, expected - bet));
        best = Math.max(best, expected - bet);
    }
}
return best;
}


public static double func_4331760ecb944c6888ac70098c155da4(int bets, long budget, long[] amount) { 
 for (int i = 0; i < bets; i++) {
    amount[i] = Cheaters.sc.nextLong();
}
Arrays.sort(amount);
double best = 0.0;
for (int joined = 1; joined <= 37; joined++) {
    long lower = 0, upper = (long) 1e14;
    while (lower + 1 < upper) {
        long middle = (lower + upper) / 2;
        if (Cheaters.possible(amount, joined, middle, budget))
            lower = middle;
        else
            upper = middle;
    }
    if (Cheaters.possible(amount, joined, lower, budget)) {
        double expected = 0, bet = 0;
        for (int i = 0; i < joined; i++) {
            bet += Math.max(0, lower - amount[i]);
            expected += 36.0 * Math.max(0, lower - amount[i]) / joined;
        }
        for (int i = joined; i < 37; i++) {
            bet += Math.max(0, lower + 1 - amount[i]);
        }
        // System.out.println(String.format(
        // "Joined: %s, lowest bet: %s, profit: %s", joined,
        // lower, expected - bet));
        best = Math.max(best, expected - bet);
    }
}
return best;
}


*********************************

#### Score: 9.70393


#### Java Tokens: bet, amount, lowestbet, max, joined, math, lowest, required, budget 

public static boolean func_8be0c5b8958e4b44a02562ff6a55d272(int joined, long lowestBet, long required, long budget, long[] amount) { 
 for (int i = 0; i < 37; i++) {
    required += Math.max(0, i < joined ? (lowestBet - amount[i]) : (lowestBet + 1 - amount[i]));
}
return required <= budget;

}


public static boolean func_125133e8e61f4e1cab49427af2f8c1c7(int joined, long lowestBet, long budget, long[] amount) { 
 long required = 0;
for (int i = 0; i < 37; i++) {
    required += Math.max(0, i < joined ? (lowestBet - amount[i]) : (lowestBet + 1 - amount[i]));
}
return required <= budget;

}


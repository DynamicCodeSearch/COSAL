### Py Tokens: sort, crem, xrange, sum, list, append 

### Py functions

def func_c1b774a8785041f980b57b0e5d20cac5(b, cx, x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    return cx

def func_142a9962aee34df785ddd590abc35905(b, cx, x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    return x

def func_6b9747020bfc4dbb91886f9ddcc2dbe4(b, cx, x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    return x

def func_c74aa8169f8441d39609bec9e0795602(b, cx, x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    return cx

def func_7f4f1c0a79124237b1a1088535484834(b, cx, x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    return b

*********************************

#### Score: 5.81107


#### Java Tokens: add, money, array, collections, arraylist, sort, list, profit, long 

public static ArrayList<Long> func_4a04f58a6cb74b2a9a8b1fdfc39f4bdf(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return profit;
}


public static long func_778232313efd43509a2527ad2d1f3597(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return money;
}


*********************************

#### Score: 5.11213


#### Java Tokens: add, result, money, array, collections, bestresult, best, arraylist, sort, list, profit, long 

public static long func_e7456d7a6591451b8877074d7707e8f2(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return money;
}


public static double func_5984f9a79b8a49de9d1f8c26849b5b51(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return bestResult;
}


public static ArrayList<Long> func_6573ef28dcdb48b7afbf727f51c17533(long l, long money, long[] a) { 
 ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return profit;
}


*********************************

#### Score: 5.11213


#### Java Tokens: result, add, money, array, collections, startresult, start, arraylist, sort, list, profit, long 

public static double func_4934cb00bd584b12b901e972b719ddbc(long l, long money, long[] a) { 
 double startResult = -money;
ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return startResult;
}


public static ArrayList<Long> func_216eee5c0cd7466abdfa3216099f8195(long l, long money, long[] a) { 
 double startResult = -money;
ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return profit;
}


public static long func_16b1a9377e0e4bd3a704aedcb52645e1(long l, long money, long[] a) { 
 double startResult = -money;
ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
return money;
}


*********************************

#### Score: 4.95807


#### Java Tokens: add, string, max, index, integer, arraylist, list, result, size, array, builder, stringbuilder, append 

public static boolean[] func_8a7bff4180934947805842e57e503277(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return u;
}


public static StringBuilder func_40420e1a67264bd89dd150fbc26cf837(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb;
}


public static List<Integer> func_f05ac0d737f747fb9cfb0f670154f4d8(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return result;
}


*********************************

#### Score: 4.91785


#### Java Tokens: next, add, compare, nextint, double, integer, arraylist, sort, list, int, comparator, array, collections 

public static List<Integer> func_eb2aa058c9784bdebc149c09e825ed6f(int n, Scanner in) { 
 final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
Collections.sort(p, new Comparator<Integer>() {

    public int compare(Integer o1, Integer o2) {
        double a = (l[o1] / r[o1] + l[o2]) / r[o2];
        double b = (l[o2] / r[o2] + l[o1]) / r[o1];
        return Double.compare(a, b);
    }
});
return p;
}


public static double[] func_7959f4b66cd74c3ab64127a66d705fb4(int n, Scanner in) { 
 final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
Collections.sort(p, new Comparator<Integer>() {

    public int compare(Integer o1, Integer o2) {
        double a = (l[o1] / r[o1] + l[o2]) / r[o2];
        double b = (l[o2] / r[o2] + l[o1]) / r[o1];
        return Double.compare(a, b);
    }
});
return l;
}


public static double[] func_ccbb3ecced3c43c29f801e12c4462e45(int n, Scanner in) { 
 final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
Collections.sort(p, new Comparator<Integer>() {

    public int compare(Integer o1, Integer o2) {
        double a = (l[o1] / r[o1] + l[o2]) / r[o2];
        double b = (l[o2] / r[o2] + l[o1]) / r[o1];
        return Double.compare(a, b);
    }
});
return r;
}


*********************************

#### Score: 4.77768


#### Java Tokens: add, string, max, index, integer, arraylist, list, result, size, array, builder, stringbuilder, tostring, append 

public static String func_dbd49d09a3f54cc3b5d46ee5429439bd(int N, int[] P) { 
 boolean[] u = new boolean[N];
List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


public static String func_ed0632d1aaa74b17b354a457766e2b01(int N, int[] P, boolean[] u) { 
 List<Integer> result = new ArrayList<Integer>(N);
while (result.size() < N) {
    int max = -1;
    for (int i = 0; i < N; i++) {
        if (u[i])
            continue;
        if (max == -1)
            max = i;
        else if (P[i] > P[max])
            max = i;
    }
    u[max] = true;
    result.add(max);
}
StringBuilder sb = new StringBuilder();
for (Integer index : result) {
    sb.append(index + " ");
}
return sb.toString();

}


*********************************

#### Score: 4.73907


#### Java Tokens: add, bestresult, startresult, start, best, arraylist, sort, list, long, result, money, array, collections, profit 

public static ArrayList<Long> func_a1208e955539482f95828caef0394289(long l, long money, long[] a) { 
 double startResult = -money;
ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return profit;
}


public static double func_d6be7ba4c0364b21bd16f1d651f809b4(long l, long money, long[] a) { 
 double startResult = -money;
ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return startResult;
}


public static long func_b67cfa8f9e144b809745a7d722923da5(long l, long money, long[] a) { 
 double startResult = -money;
ArrayList<Long> profit = new ArrayList<>();
for (long x : a) {
    if (x < l) {
        money -= (l - x);
        profit.add(l - x);
    } else if (x == l) {
        profit.add(0L);
    }
}
// out.println("get profit " + l + " " + money);
Collections.sort(profit);
double bestResult = 0;
return money;
}


*********************************

#### Score: 4.57400


#### Java Tokens: next, add, res, compare, nextint, string, double, integer, arraylist, sort, list, int, comparator, array, collections 

public static String func_b17f580274094f2abd8f70964bacb0c5(int n, double[] l, Scanner in) { 
 final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
Collections.sort(p, new Comparator<Integer>() {

    public int compare(Integer o1, Integer o2) {
        double a = (l[o1] / r[o1] + l[o2]) / r[o2];
        double b = (l[o2] / r[o2] + l[o1]) / r[o1];
        return Double.compare(a, b);
    }
});
String res = "";
return res;
}


public static double[] func_f14be74e020140508ee67e5f2310a19c(int n, Scanner in) { 
 final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
Collections.sort(p, new Comparator<Integer>() {

    public int compare(Integer o1, Integer o2) {
        double a = (l[o1] / r[o1] + l[o2]) / r[o2];
        double b = (l[o2] / r[o2] + l[o1]) / r[o1];
        return Double.compare(a, b);
    }
});
String res = "";
return r;
}


public static double[] func_4a5c6a65e6ee46969394e1adf135ea7f(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
Collections.sort(p, new Comparator<Integer>() {

    public int compare(Integer o1, Integer o2) {
        double a = (l[o1] / r[o1] + l[o2]) / r[o2];
        double b = (l[o2] / r[o2] + l[o1]) / r[o1];
        return Double.compare(a, b);
    }
});
String res = "";
return r;
}


*********************************

#### Score: 4.42112


#### Java Tokens: next, add, res, compare, nextint, string, double, integer, arraylist, sort, list, int, comparator, array, collections, get 

public static String func_3e202f2744d94b6abe0b670ca9f2e878(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
Collections.sort(p, new Comparator<Integer>() {

    public int compare(Integer o1, Integer o2) {
        double a = (l[o1] / r[o1] + l[o2]) / r[o2];
        double b = (l[o2] / r[o2] + l[o1]) / r[o1];
        return Double.compare(a, b);
    }
});
String res = "";
for (int i = 0; i < n; i++) res += p.get(i) + " ";
return res;
}


public static double[] func_c974a9f67bcc427fbb98237aa5cd1185(Scanner in) { 
 int n = in.nextInt();
final double[] l = new double[n];
final double[] r = new double[n];
for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
Collections.sort(p, new Comparator<Integer>() {

    public int compare(Integer o1, Integer o2) {
        double a = (l[o1] / r[o1] + l[o2]) / r[o2];
        double b = (l[o2] / r[o2] + l[o1]) / r[o1];
        return Double.compare(a, b);
    }
});
String res = "";
for (int i = 0; i < n; i++) res += p.get(i) + " ";
return r;
}


public static List<Integer> func_c95638ac44684a53996605cb09210ff9(int n, double[] r, double[] l, Scanner in) { 
 for (int i = 0; i < n; i++) {
    l[i] = in.nextInt();
}
for (int i = 0; i < n; i++) {
    r[i] = 1 - in.nextInt() * 0.01;
}
List<Integer> p = new ArrayList<Integer>();
for (int i = 0; i < n; i++) {
    p.add(i);
}
Collections.sort(p, new Comparator<Integer>() {

    public int compare(Integer o1, Integer o2) {
        double a = (l[o1] / r[o1] + l[o2]) / r[o2];
        double b = (l[o2] / r[o2] + l[o1]) / r[o1];
        return Double.compare(a, b);
    }
});
String res = "";
for (int i = 0; i < n; i++) res += p.get(i) + " ";
return p;
}


*********************************

#### Score: 4.20508


#### Java Tokens: res, array, double, arraylist, list 

public static int func_873504fabd1c4926bf18a657af8bb774(int a) { 
 // System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
return a;
}


public static int func_98c4291180674054b74726faed4c5c6e(int a, int b) { 
 // System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
b = 0;
return a;
}


public static int func_1ec4a494938548cca3fefb2e49c45bd4(int a, int b) { 
 // System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
b = 0;
return b;
}


### Py Tokens: range, bar, append, area, join, res 

### Py functions

def func_ca2e2f8baf5a49ad8b564424c2ee04ce(G, i, x):
    res = []
    for i in range(G - 1):
        res.append(bar(dd, area))
    return ''.join([('\n%.6f' % x) for x in res])

def func_d4ac8eb2be0d44ce9680d3c856c46dfc(G, i, x):
    res = []
    for i in range(G - 1):
        res.append(bar(dd, area))
    return ''.join([('\n%.6f' % x) for x in res])

*********************************

#### Score: 5.46747


#### Java Tokens: area, cur, res, slice, array, double, arraylist, list 

public static double func_bbd914fe4b1f49c188d0067925327362(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
return slice;
}


public static double func_f5f5986770d84d42ab499d3e54c93f8f(int a, int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
// System.out.println(slice);
a = 0;
return slice;
}


public static double func_8b0cd3bcacb94b8594956354822ea9f4(int guests, double area) { 
 double slice = area / guests;
double cur = 0;
// System.out.println("TEST");
// System.out.println(area);
ArrayList<Double> res = new ArrayList<Double>();
return cur;
}


*********************************

#### Score: 5.11767


#### Java Tokens: res 

public static double func_a40b6d7c2584411aaa27cd3dbe6b17f2(int n, double w, double[][] p) { 
 double res = 0;
for (int i = 1; i < n; i++) {
    if (p[i][0] < w) {
        res += (p[i][0] - p[i - 1][0]) * (p[i][1] + p[i - 1][1]) / 2;
    } else {
        double y = p[i - 1][1] + (p[i][1] - p[i - 1][1]) * (w - p[i - 1][0]) / (p[i][0] - p[i - 1][0]);
        res += (w - p[i - 1][0]) * (y + p[i - 1][1]) / 2;
        break;
    }
}
return res;
}


public static double func_a1dde21c82044735ac9f3baf6a8f14bc(int i, double w, double res, double[][] p) { 
 double y = p[i - 1][1] + (p[i][1] - p[i - 1][1]) * (w - p[i - 1][0]) / (p[i][0] - p[i - 1][0]);
res += (w - p[i - 1][0]) * (y + p[i - 1][1]) / 2;
return y;
}


public static long func_ca7e009334744727b6044bcd088f1b33(int c, long res) { 
 res *= 10;
res += c - '0';
return res;
}


*********************************

#### Score: 4.75956


#### Java Tokens: res, value 

public static double func_c22cade009f14c7d98e5afa210e01f82(int to, long value, long res, long[] a) { 
 for (int i = 0; i < to; i++) {
    res += value - a[i];
}
double ss = res * 1.0 / to * 36;
return ss;
}


public static double func_b73217f5a6454efb87c24fa07ef13963(int to, long value, long[] a) { 
 long res = 0;
for (int i = 0; i < to; i++) {
    res += value - a[i];
}
double ss = res * 1.0 / to * 36;
for (int i = to; i < 37; i++) if (a[i] <= value) {
    res += value + 1 - a[i];
}
return ss;
}


public static double func_d43846674edf411297823022a7f2bc9c(int to, long value, long res, long[] a, double ss) { 
 for (int i = to; i < 37; i++) if (a[i] <= value) {
    res += value + 1 - a[i];
}
ss -= res;
return ss;
}


*********************************

#### Score: 4.75956


#### Java Tokens: res, init 

public static int func_f9491def975946428bad54b0446d32f3(long[] init, long[] have) { 
 int eq = 0;
while (true) {
    if (eq + 1 < A.C && have[eq] == have[eq + 1]) {
        eq++;
    } else {
        break;
    }
}
double res = 0;
for (int i = 0; i <= eq; i++) {
    res += (have[i] - init[i]) * 36;
}
res *= 1D / (eq + 1);
return eq;
}


public static double func_54c8d800fa7b4cda81a96dc9759c7fe7(long[] init, long[] have) { 
 int eq = 0;
while (true) {
    if (eq + 1 < A.C && have[eq] == have[eq + 1]) {
        eq++;
    } else {
        break;
    }
}
double res = 0;
for (int i = 0; i <= eq; i++) {
    res += (have[i] - init[i]) * 36;
}
return res;
}


public static double func_84bbe2e9386a41599feda146c4e6c078(int eq, long[] init, long[] have) { 
 double res = 0;
for (int i = 0; i <= eq; i++) {
    res += (have[i] - init[i]) * 36;
}
return res;
}


*********************************

#### Score: 4.75956


#### Java Tokens: res, bnd 

public static double func_a097503f5b634c84b11ec188ac2599c7(int i, double res, double bnd, Solution.Point[] p) { 
 double x1 = p[i].x;
double y1 = p[i].y;
double x2 = p[i + 1].x;
double y2 = p[i + 1].y;
if (x2 > bnd) {
    double cf = (bnd - p[i].x) / (double) (p[i + 1].x - p[i].x);
    x2 = bnd;
    y2 = p[i].y + (p[i + 1].y - p[i].y) * cf;
}
res += (x2 - x1) * (y1 + y2) / 2.0;
return res;
}


public static double func_83e95bd3f4ed46bbb4de6e74a93d318e(int i, double res, double bnd, Solution.Point[] p) { 
 double x1 = p[i].x;
double y1 = p[i].y;
double x2 = p[i + 1].x;
double y2 = p[i + 1].y;
if (x2 > bnd) {
    double cf = (bnd - p[i].x) / (double) (p[i + 1].x - p[i].x);
    x2 = bnd;
    y2 = p[i].y + (p[i + 1].y - p[i].y) * cf;
}
res += (x2 - x1) * (y1 + y2) / 2.0;
return x1;
}


public static double func_a675b37a60c24a859ad5704540a36bc2(int i, double res, double bnd, Solution.Point[] p) { 
 double x1 = p[i].x;
double y1 = p[i].y;
double x2 = p[i + 1].x;
double y2 = p[i + 1].y;
if (x2 > bnd) {
    double cf = (bnd - p[i].x) / (double) (p[i + 1].x - p[i].x);
    x2 = bnd;
    y2 = p[i].y + (p[i + 1].y - p[i].y) * cf;
}
res += (x2 - x1) * (y1 + y2) / 2.0;
return y1;
}


*********************************

#### Score: 4.75956


#### Java Tokens: res, ratio 

public static double func_92a84e8f1aff4cb6964ce20870130498(int i, int[] y, int[] x, double X, double res) { 
 double ratio = (X - x[i]) / (x[i + 1] - x[i]);
res += ((2 * y[i] + (y[i + 1] - y[i]) * ratio) / 2.0 - IrregularCakes.BASE) * (X - x[i]);
return res;
}


public static double func_af72b6bee7884f72a888e89481af1d9d(int i, int[] y, int[] x, double X, double res) { 
 double ratio = (X - x[i]) / (x[i + 1] - x[i]);
res += ((2 * y[i] + (y[i + 1] - y[i]) * ratio) / 2.0 - IrregularCakes.BASE) * (X - x[i]);
return ratio;
}


*********************************

#### Score: 4.75956


#### Java Tokens: res, length 

public static double func_6be2af99603a4b619d17de0c370f9fc9(double w, double[][] p) { 
 int n = p.length;
double res = 0;
for (int i = 1; i < n; i++) {
    if (p[i][0] < w) {
        res += (p[i][0] - p[i - 1][0]) * (p[i][1] + p[i - 1][1]) / 2;
    } else {
        double y = p[i - 1][1] + (p[i][1] - p[i - 1][1]) * (w - p[i - 1][0]) / (p[i][0] - p[i - 1][0]);
        res += (w - p[i - 1][0]) * (y + p[i - 1][1]) / 2;
        break;
    }
}
return res;
}


public static int func_71141afc91ba4d479f4d256c61b98817(double[] xs) { 
 int n = xs.length;
double res = 0;
return n;
}


public static int func_d0e64631b4984f2ebf6c903623dc5587(double w, double[][] p) { 
 int n = p.length;
double res = 0;
for (int i = 1; i < n; i++) {
    if (p[i][0] < w) {
        res += (p[i][0] - p[i - 1][0]) * (p[i][1] + p[i - 1][1]) / 2;
    } else {
        double y = p[i - 1][1] + (p[i][1] - p[i - 1][1]) * (w - p[i - 1][0]) / (p[i][0] - p[i - 1][0]);
        res += (w - p[i - 1][0]) * (y + p[i - 1][1]) / 2;
        break;
    }
}
return n;
}


*********************************

#### Score: 4.75956


#### Java Tokens: res, sum 

public static double func_611816298506408b84a5c0f25d3013af(int n, int p, int q, int r, int s) { 
 int[] t = new int[n];
long[] sum = new long[n + 1];
for (int i = 0; i < n; i++) {
    t[i] = (int) ((i * (long) p + q) % r + s);
    sum[i + 1] = sum[i] + t[i];
}
double res = 0;
return res;
}


public static long[] func_e0dce22dedb740528c1e36a98d4eaea7(int n, int p, int q, int r, int s) { 
 int[] t = new int[n];
long[] sum = new long[n + 1];
for (int i = 0; i < n; i++) {
    t[i] = (int) ((i * (long) p + q) % r + s);
    sum[i + 1] = sum[i] + t[i];
}
double res = 0;
return sum;
}


public static int[] func_826873131ee245e5965c53c43c28bc36(int n, int p, int q, int r, int s) { 
 int[] t = new int[n];
long[] sum = new long[n + 1];
for (int i = 0; i < n; i++) {
    t[i] = (int) ((i * (long) p + q) % r + s);
    sum[i + 1] = sum[i] + t[i];
}
double res = 0;
return t;
}


*********************************

#### Score: 4.75956


#### Java Tokens: res, right 

public static double func_1b1752aceaaf42aa927970849246ce9f(int n, double right, double[] xs, double[] ys) { 
 double res = 0;
for (int i = 0; i < n - 1; i++) {
    if (right < xs[i])
        continue;
    if (right < xs[i + 1]) {
        double a = (ys[i + 1] - ys[i]) / (xs[i + 1] - xs[i]);
        double b = ys[i] - a * xs[i];
        double y = a * right + b;
        res += (ys[i] + y) * (right - xs[i]) / 2;
    } else {
        res += (ys[i] + ys[i + 1]) * (xs[i + 1] - xs[i]) / 2;
    }
}
return res;
}


public static double func_60cdf9d906b34ae89b5a37031c5f779b(int i, double res, double right, double[] xs, double[] ys) { 
 double a = (ys[i + 1] - ys[i]) / (xs[i + 1] - xs[i]);
double b = ys[i] - a * xs[i];
double y = a * right + b;
res += (ys[i] + y) * (right - xs[i]) / 2;
return res;
}


public static double func_94ac1a8305364b9e93eaa3d9cf2a89cd(int n, double res, double right, double[] xs, double[] ys) { 
 for (int i = 0; i < n - 1; i++) {
    if (right < xs[i])
        continue;
    if (right < xs[i + 1]) {
        double a = (ys[i + 1] - ys[i]) / (xs[i + 1] - xs[i]);
        double b = ys[i] - a * xs[i];
        double y = a * right + b;
        res += (ys[i] + y) * (right - xs[i]) / 2;
    } else {
        res += (ys[i] + ys[i + 1]) * (xs[i + 1] - xs[i]) / 2;
    }
}
return res;

}


*********************************

#### Score: 4.75956


#### Java Tokens: res, clone 

public static double func_37fd8f7ba7fe430f80b413ae40714b35(int[] x) { 
 int[] xx = x.clone();
double res = 0;
return res;
}


### Py Tokens: part1, part2, part3, ans, max, sum, items 

### Py functions

def func_a21f27395cee4c2790cc81481ecdc8a3(_sum, i, items, part1, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _sum

def func_44e1527d70094fb8938c9d749c70886e(_sum, i, items, part1, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _sum

def func_6b07aec9a10c4aeeab415c154569ce31(_sum, i, items, part1, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part3

def func_301579d8c63948f488674fbdac4a57dc(_sum, i, items, part1, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return part3

def func_17619b3035ca4ce787e357e40f166dc6(_sum, i, items, part1, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3

*********************************

#### Score: 7.98320


#### Java Tokens: max, ans, sum, math 

public static long func_65c7102b82d645fa9e0c8269aacf7830(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
return sum;
}


public static long func_9aa7155d934f46c3af0e2c5b9c19a04c(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return ans;
}


public static long func_5d136f36cafa4e3683a603b6a16cb250(long sr, long sm) { 
 long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
return sum;
}


*********************************

#### Score: 7.51368


#### Java Tokens: rest, max, ans, sum, math 

public static double func_bb4ba1ec4c034036acf127b6ee13fe8c(int n, long sum, long[] a) { 
 long t1 = 0;
long t2 = 0;
long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return ans;
}


public static int func_49b97a1175c44377bb1beda711591c0f(int n, long sum, long[] a) { 
 long t1 = 0;
long t2 = 0;
long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return j;
}


public static long func_2d132b885b4f43998baf6743f1e4214e(int n, long t2, long sum, long t1, long[] a) { 
 long rest = sum;
int j = 0;
double ans = 0;
for (int i = 0; i < n; i++) {
    while (j < n && t2 + a[j] <= rest - a[j]) {
        t2 += a[j];
        rest -= a[j];
        j++;
    }
    double pp = 1.0 * (sum - Math.max(t1, Math.max(t2, rest))) / sum;
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (sum - Math.max(t1, Math.max(t2 + a[j], rest - a[j]))) / sum;
        ans = Math.max(ans, pp);
    }
    t1 += a[i];
    t2 -= a[i];
    if (j == i) {
        rest -= a[j];
        j++;
    }
}
return t1;
}


*********************************

#### Score: 7.51368


#### Java Tokens: min, max, ans, sum, math 

public static int func_18e0d7a3a9004e878e1bb3e739bfcbf6(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return l;
}


public static long func_86e361714b204771a5224d744686e8da(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return ans;
}


public static long func_1bd1c810a74e498e9723f78d4fe9cfda(int n, int i, int l, long ans, long[] sum) { 
 while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
    l++;
}
ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
return ans;
}


*********************************

#### Score: 7.51368


#### Java Tokens: max, ans, length, sum, math 

public static long func_191647a8fba345efbb3f6dc4af8e4128(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sm;
}


public static long func_280276b4a70c454791de2abe8192e908(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sum;
}


public static long func_7bf42b8990f9499faaea39b1ca5d25f1(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
return sl;
}


*********************************

#### Score: 7.51368


#### Java Tokens: max, ans, pref, sum, math 

public static long func_a84f023a6b79404cb10c198c9d86bdd8(int t, long rs, long sum, long[] pref) { 
 long ans = rs;
ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
return ans;
}


*********************************

#### Score: 7.51368


#### Java Tokens: rate, max, ans, maxsum, sum 

public static double func_620c5d7fa7d04f5cb15740f11614e906(long maxSum, long sum, double ans) { 
 double rate = (sum - maxSum) * 1.0 / sum;
if (rate > ans) {
    ans = rate;
}
return ans;
}


public static double func_8fae9be14d7444e4b9f9a72a4aad0e07(long maxSum, long sum, double ans) { 
 double rate = (sum - maxSum) * 1.0 / sum;
if (rate > ans) {
    ans = rate;
}
return rate;
}


*********************************

#### Score: 7.09915


#### Java Tokens: res, min, max, ans, sum, math 

public static int func_047b1e0c188c41b7a93977a8a64ae3f3(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return l;
}


public static int func_330173ad6bbb49649ae4310602de4188(int n, long ans, long[] sum) { 
 int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return l;
}


public static long func_692cf403b4954663b037b51f4188faa5(int n, int l, long ans, long[] sum) { 
 for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
double res = (double) ans / sum[n];
return ans;
}


*********************************

#### Score: 7.09915


#### Java Tokens: min, max, ans, length, sum, math 

public static long func_71e798a67e324fefbe8af096684cdfe2(long sm, long sl, long[] a) { 
 long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sum;
}


public static long func_23fdec310e3d45b2a1f3a29c6c33fd64(long sl, long[] a) { 
 long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sl;
}


public static long func_bbd2f72de3de4d6996fbe2d6c103e060(long[] a) { 
 long sl = 0;
long sm = a[0];
long sr = 0;
for (int i = 1; i < a.length; ++i) {
    sr += a[i];
}
long sum = sm + sr;
long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sr;
}


*********************************

#### Score: 7.09915


#### Java Tokens: cur, max, ans, sum, math, win 

public static long func_783db3432e544f9d9fdc21055d37b9f1(int win, long l, long[] a, double ans) { 
 long cur = 0;
for (int i = 0; i < win; i++) {
    cur += l - a[i];
}
double sum = cur;
for (int i = win; i < 35; i++) {
    if (a[i] <= l) {
        cur += l - a[i] + 1;
    }
}
// System.out.println(sum + " " + win + " " + cur + " " + l + " " + (36 * sum / win - cur));
ans = Math.max(ans, 36 * sum / win - cur);
return cur;
}


public static double func_f17f167cdc804a1588b2181974dc0560(int win, long cur, long l, long[] a, double ans) { 
 for (int i = 0; i < win; i++) {
    cur += l - a[i];
}
double sum = cur;
for (int i = win; i < 35; i++) {
    if (a[i] <= l) {
        cur += l - a[i] + 1;
    }
}
// System.out.println(sum + " " + win + " " + cur + " " + l + " " + (36 * sum / win - cur));
ans = Math.max(ans, 36 * sum / win - cur);
return ans;
}


public static long func_cf3738c08e7c4267a92a64316134bb81(int win, long cur, long l, long[] a, double ans) { 
 double sum = cur;
for (int i = win; i < 35; i++) {
    if (a[i] <= l) {
        cur += l - a[i] + 1;
    }
}
// System.out.println(sum + " " + win + " " + cur + " " + l + " " + (36 * sum / win - cur));
ans = Math.max(ans, 36 * sum / win - cur);
return cur;
}


*********************************

#### Score: 7.09915


#### Java Tokens: min, max, ans, pref, sum, math 

public static long func_30c835fdb9ca4979818148535431f2be(int t, long rs, long sum, long max, long[] pref) { 
 long ans = rs;
ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
max = Math.min(max, ans);
return ans;
}


public static long func_cac459492e1c4e069037e8565f66fc81(int t, long rs, long sum, long max, long[] pref) { 
 long ans = rs;
ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
max = Math.min(max, ans);
return max;
}


public static long func_c99dc47448f64c609053987de2c6f9bf(int t, long ans, long sum, long max, long[] pref) { 
 ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
max = Math.min(max, ans);
return max;
}


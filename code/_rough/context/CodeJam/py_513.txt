### Py Tokens: loss, range, min, ans, outcome, pos, len 

### Py functions

def func_3c049ddc54964a989dfb8d6744e00106(X, loss, my):
    ans = -loss
    outcome = min([(my[i] + X[i]) for i in range(37)])
    pos = [i for i in range(37) if my[i] + X[i] == outcome]
    N = len(pos)
    for p in pos:
        ans += my[p] * 36 / N
    return X

def func_d4892d6996cd4b4384e3a3162562ce25(X, loss, my):
    ans = -loss
    outcome = min([(my[i] + X[i]) for i in range(37)])
    pos = [i for i in range(37) if my[i] + X[i] == outcome]
    N = len(pos)
    for p in pos:
        ans += my[p] * 36 / N
    return i

def func_b2593b048bc5492b9ade5a5b47e316f8(X, loss, my):
    ans = -loss
    outcome = min([(my[i] + X[i]) for i in range(37)])
    pos = [i for i in range(37) if my[i] + X[i] == outcome]
    N = len(pos)
    for p in pos:
        ans += my[p] * 36 / N
    return my

def func_af5d1745f297424eac6dad3691c3172a(X, loss, my):
    ans = -loss
    outcome = min([(my[i] + X[i]) for i in range(37)])
    pos = [i for i in range(37) if my[i] + X[i] == outcome]
    N = len(pos)
    for p in pos:
        ans += my[p] * 36 / N
    return N

def func_76547b3d6c384e2e96198e5b981b1856(X, loss, my):
    ans = -loss
    outcome = min([(my[i] + X[i]) for i in range(37)])
    pos = [i for i in range(37) if my[i] + X[i] == outcome]
    N = len(pos)
    for p in pos:
        ans += my[p] * 36 / N
    return p

*********************************

#### Score: 6.53703


#### Java Tokens: pos 

public static int func_1196f0d0aef14fc1ac52ae7c8892dfd2(int i, int[][] pos) { 
 int nx = pos[i][0];
int ny = pos[i][1];
return ny;
}


public static int func_67d659eeef4941deb5e9de0dca048017(int l, int py, int px, int[][] pos) { 
 px = pos[l][0];
py = pos[l][1];
return px;
}


public static int func_644c113398604f858135ae9caaaf0ac7(int[][] pos) { 
 int px = pos[0][0];
int py = pos[0][1];
return py;
}


*********************************

#### Score: 6.07038


#### Java Tokens: pos, bound 

public static int func_e56fbf72e0224d66b77b40ae8b9f585b(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return py;
}


public static int func_6b9bb5b3b1cd4a60ac5a15167a40b0c6(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
return px;
}


public static int func_97cddfce9b7c452f8695797bae1d62e3(int w, int[][] pos) { 
 double[] bound = new double[w + 1];
int px = pos[0][0];
int py = pos[0][1];
return px;
}


*********************************

#### Score: 6.07038


#### Java Tokens: div, pos 

public static int func_cd9b5fe359cb40bf81b56ae592a1baa4(int nx, int i, int px, int[][] pos) { 
 int ny = pos[i][1];
double div = nx - px;
return ny;
}


public static int func_ccafa875904d402aad92ff0ee0925965(int px, int i, int[][] pos) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
return ny;
}


public static double func_9a6f36d3b0f749569eb0f7063a887413(int nx, int px, int i, int[][] pos) { 
 int ny = pos[i][1];
double div = nx - px;
return div;
}


*********************************

#### Score: 6.07038


#### Java Tokens: pos, exp 

public static int func_d0a7c296e021459dacf6b862a210eb59(int n, double[] exp) { 
 int pos = 0;
for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
return pos;
}


*********************************

#### Score: 5.67003


#### Java Tokens: div, pos, bound 

public static int func_58a39ec2b5e24e1a82950afef3b71c8a(int l, int px, int[][] pos, double[] bound) { 
 int py = pos[0][1];
for (int i = 1; i < l; ++i) {
    int nx = pos[i][0];
    int ny = pos[i][1];
    double div = nx - px;
    for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
        bound[j] -= (ny - py) / div * (j - px) + py;
    }
    px = nx;
    py = ny;
}
return py;
}


public static int func_9d99c61bf0e24d2885926eadad002202(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
px = nx;
return ny;
}


public static int func_4959f32046524c3ab41634b4b7ef81a1(int py, int px, int i, int[][] pos, double[] bound) { 
 int nx = pos[i][0];
int ny = pos[i][1];
double div = nx - px;
for (int j = px + (i == 1 ? 0 : 1); j <= nx; ++j) {
    bound[j] -= (ny - py) / div * (j - px) + py;
}
return nx;
}


*********************************

#### Score: 5.67003


#### Java Tokens: print, pos, exp 

public static PrintWriter func_177d5cfe488a4c8db123900770909d9a(int n, int pos, double[] exp, PrintWriter pw) { 
 for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
return pw;
}


public static int func_c428b901829146a491027271a1d95e14(int n, double[] exp, PrintWriter pw) { 
 int pos = 0;
for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
return pos;
}


public static int func_062ef56765224815b11b1e7607714d4f(int n, int pos, double[] exp, PrintWriter pw) { 
 for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
return pos;
}


*********************************

#### Score: 5.67003


#### Java Tokens: print, system, pos 

public static PrintWriter func_280272c3c65c47dab611101c31d78313(int pos, PrintWriter pw) { 
 pw.print(pos + " ");
System.out.print(pos + " ");
return pw;
}


*********************************

#### Score: 5.51464


#### Java Tokens: min, max, ans, sum, math 

public static int func_18e0d7a3a9004e878e1bb3e739bfcbf6(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return l;
}


public static long func_86e361714b204771a5224d744686e8da(int n, long[] sum) { 
 long ans = sum[n];
int l = 1;
for (int i = 2; i <= n; i++) {
    while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
        l++;
    }
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
}
return ans;
}


public static long func_1bd1c810a74e498e9723f78d4fe9cfda(int n, int i, int l, long ans, long[] sum) { 
 while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
    ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
    l++;
}
ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
return ans;
}


*********************************

#### Score: 5.51464


#### Java Tokens: min, max, ans, length, math 

public static long func_9327ba5dc49f4a99a27336e31b9e9a93(long sr, long sm, long sl, long[] a) { 
 long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return sr;
}


public static int func_68eaf40520ca454dbdbff670ea5a2422(long ans, long sr, long sm, long sl, long[] a) { 
 int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return l;
}


public static int func_e2c12373faae4b4391a538ad649d66ab(long sr, long sm, long sl, long[] a) { 
 long ans = Math.max(sm, sr);
int l = 0;
for (int r = 1; r < a.length; ++r) {
    sm += a[r];
    sr -= a[r];
    while (l < r && Math.max(sl + a[l], sm - a[l]) < Math.max(sl, sm)) {
        sl += a[l];
        sm -= a[l];
        ++l;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
// System.out.println(" " + l + " " + r + " " + sl + " " + sm + " " + sr + " " + ans);
}
return l;
}


*********************************

#### Score: 5.32279


#### Java Tokens: print, system, pos, exp 

public static PrintWriter func_1e4ad63a67ea4dfa919aef626af98059(int n, int pos, double[] exp, PrintWriter pw) { 
 for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
System.out.print(pos + " ");
exp[pos] = -1;
return pw;
}


public static PrintWriter func_3e968375c36e45e288f4d3b43c12475d(int pos, double[] exp, PrintWriter pw) { 
 pw.print(pos + " ");
System.out.print(pos + " ");
exp[pos] = -1;
return pw;
}


public static PrintWriter func_998020435ea94805b628b60a3c91a32c(int n, double[] exp, PrintWriter pw) { 
 int pos = 0;
for (int k = 1; k < n; k++) {
    if (exp[k] > exp[pos]) {
        pos = k;
    }
}
pw.print(pos + " ");
System.out.print(pos + " ");
exp[pos] = -1;
return pw;
}


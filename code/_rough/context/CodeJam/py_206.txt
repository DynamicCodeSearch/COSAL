### Py Tokens: upper, area, uppslope, float, start, height 

### Py functions

def func_74899a9b07364bca8ee0bb57b416490b(i, start, upper):
    uppslope = float(upper[1][1] - upper[0][1]) / upper[1][0]
    area = 0
    height = float(start)
    i = 0
    return upper

def func_69dd4828f90146eeacbac80cf1e770a9(i, start, upper):
    uppslope = float(upper[1][1] - upper[0][1]) / upper[1][0]
    area = 0
    height = float(start)
    i = 0
    return upper

def func_d3ddd3d137ae4e7b8349ee5164fb5f20(i, start, upper):
    uppslope = float(upper[1][1] - upper[0][1]) / upper[1][0]
    area = 0
    height = float(start)
    i = 0
    return height

def func_7ac1b7831f7b4f7b81f73355830bd401(i, start, upper):
    uppslope = float(upper[1][1] - upper[0][1]) / upper[1][0]
    area = 0
    height = float(start)
    i = 0
    return area

def func_f6359ee4b22748ec9c89a45a239dafbd(i, start, upper):
    uppslope = float(upper[1][1] - upper[0][1]) / upper[1][0]
    area = 0
    height = float(start)
    i = 0
    return uppslope

*********************************

#### Score: 6.82323


#### Java Tokens: area, cur, total, curl, last, upper, lower, curheight, curu, totalarea, lastx, height 

public static double func_1dd563f992634ab9877d155fc922a965(Point[] upper, Point[] lower) { 
 double totalArea = 0.0;
int curL = 1;
int curU = 1;
int lastX = 0;
double curHeight = 1.0 * upper[0].y - lower[0].y;
return totalArea;
}


public static int func_a7d464825165439088df7c0b77e845d7(Point[] upper, Point[] lower) { 
 double totalArea = 0.0;
int curL = 1;
int curU = 1;
int lastX = 0;
double curHeight = 1.0 * upper[0].y - lower[0].y;
return curL;
}


public static int func_7732ef7e3ca047ba8e1559171c43499e(Point[] upper, Point[] lower) { 
 double totalArea = 0.0;
int curL = 1;
int curU = 1;
int lastX = 0;
double curHeight = 1.0 * upper[0].y - lower[0].y;
return lastX;
}


*********************************

#### Score: 6.40768


#### Java Tokens: cur, upper, get, lower, curheight, curu, height 

public static double func_98ade43ed9ad443788728c811e4d5838(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
return curHeight;
}


public static int func_c1dc0a267e0a4bf48e5b8172af43dc23(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
return curU;
}


*********************************

#### Score: 6.40768


#### Java Tokens: cur, last, upper, lower, curheight, lastx, height 

public static int func_8a022725c9214d70bcb8353708fc63fa(Point[] upper, Point[] lower) { 
 int lastX = 0;
double curHeight = 1.0 * upper[0].y - lower[0].y;
return lastX;
}


public static double func_456b07764b49421db69aab521398d5d1(Point[] upper, Point[] lower) { 
 int lastX = 0;
double curHeight = 1.0 * upper[0].y - lower[0].y;
return curHeight;
}


*********************************

#### Score: 6.31371


#### Java Tokens: area, cur, curl, last, upper, lower, totalarea, total, size, get, curheight, curu, lastx, height 

public static int func_e3e70a58ce7d44b4bbbebf18cbfe1638(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
int curL = 1;
int u = upper.size();
int l = lower.size();
double lastX = 0;
double totalArea = 0.0;
return curU;
}


public static int func_1159e87b8394469dbe07e868e6ab86db(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
int curL = 1;
int u = upper.size();
int l = lower.size();
double lastX = 0;
double totalArea = 0.0;
return curL;
}


public static double func_c499649c1d754c51988f784b1c3fbd18(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
int curL = 1;
int u = upper.size();
int l = lower.size();
double lastX = 0;
double totalArea = 0.0;
return curHeight;
}


*********************************

#### Score: 6.22017


#### Java Tokens: area, cur, thisheight, total, curheight, totalarea, height 

public static double func_b957b488707b4459aa30c1213127f664(int curX, double curHeight, double totalArea, double lastX, double thisHeight) { 
 totalArea += (1.0 * curHeight + thisHeight) / 2 * (curX - lastX);
// //System.out.println("dist: " + (curX-lastX));
// //System.out.println("newHeight: " + thisHeight);
// //System.out.println("oldHeight: " + curHeight);
curHeight = thisHeight;
return curHeight;
}


public static double func_2a9ec32a68c645dd86ea9c05fef13140(int curX, double curHeight, double totalArea, double lastX, double thisHeight) { 
 totalArea += (1.0 * curHeight + thisHeight) / 2 * (curX - lastX);
// //System.out.println("dist: " + (curX-lastX));
// //System.out.println("newHeight: " + thisHeight);
// //System.out.println("oldHeight: " + curHeight);
curHeight = thisHeight;
return totalArea;
}


public static double func_db1fd0fb7ff54fb5b94be1f44611aa8e(int lastX, int curX, double thisHeight, double totalArea, double curHeight) { 
 totalArea += (1.0 * curHeight + thisHeight) / 2 * (curX - lastX);
// System.out.println("dist: " + (curX-lastX));
// System.out.println("newHeight: " + thisHeight);
// System.out.println("oldHeight: " + curHeight);
curHeight = thisHeight;
return totalArea;
}


*********************************

#### Score: 6.22017


#### Java Tokens: area, cur, total, curheight, upheight, totalarea, height 

public static double func_4764651797494e2aab3d61d0f22a7c53(int curX, double curHeight, double totalArea, double upHeight, double lastX) { 
 totalArea += ((1.0 * curHeight) + upHeight) / 2 * (curX - lastX);
// //System.out.println("dist: " + (curX-lastX));
// //System.out.println("newHeight: " + upHeight);
// //System.out.println("oldHeight: " + curHeight);
curHeight = upHeight;
return curHeight;
}


public static double func_237e1879599d4bf8a867139145155fd8(int lastX, int curX, double totalArea, double curHeight, double upHeight) { 
 totalArea += ((1.0 * curHeight) + upHeight) / 2 * (curX - lastX);
// System.out.println("dist: " + (curX-lastX));
// System.out.println("newHeight: " + upHeight);
// System.out.println("oldHeight: " + curHeight);
curHeight = upHeight;
return totalArea;
}


public static double func_8b2c128f0c5e483485d2c036bdc710f3(int curX, double curHeight, double totalArea, double upHeight, double lastX) { 
 totalArea += ((1.0 * curHeight) + upHeight) / 2 * (curX - lastX);
// //System.out.println("dist: " + (curX-lastX));
// //System.out.println("newHeight: " + upHeight);
// //System.out.println("oldHeight: " + curHeight);
curHeight = upHeight;
return totalArea;
}


*********************************

#### Score: 6.09458


#### Java Tokens: cur, last, upper, lower, curheight, curu, lastx, height 

public static double func_bd0484a5b47f46e19c4e1415c2b93780(Point[] upper, Point[] lower) { 
 int curU = 1;
int lastX = 0;
double curHeight = 1.0 * upper[0].y - lower[0].y;
return curHeight;
}


public static int func_c0d314ceb1d94e4db16ed7bdaefbf979(Point[] upper, Point[] lower) { 
 int curU = 1;
int lastX = 0;
double curHeight = 1.0 * upper[0].y - lower[0].y;
return lastX;
}


public static int func_d7518f11013d44698518a3ba0ab8be43(Point[] upper, Point[] lower) { 
 int curU = 1;
int lastX = 0;
double curHeight = 1.0 * upper[0].y - lower[0].y;
return curU;
}


*********************************

#### Score: 6.09458


#### Java Tokens: cur, curl, upper, get, lower, curheight, curu, height 

public static int func_309bf0aa266f4d64b5044601e1cd6b15(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
int curL = 1;
return curL;
}


public static int func_d30c898ee9554bc1b419e3c37c1ba920(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
int curL = 1;
return curU;
}


public static double func_b37a3ffa6a634b338f80193a774a1c3f(ArrayList<Point> lower, ArrayList<Point> upper) { 
 double curHeight = 1.0 * upper.get(0).y - lower.get(0).y;
int curU = 1;
int curL = 1;
return curHeight;
}


*********************************

#### Score: 5.91689


#### Java Tokens: area, cur, total, lowheight, low, curheight, totalarea, height 

public static double func_4a5728a556d949c19bdd4b3eb3db7f2a(int lastX, int curX, double totalArea, double lowHeight, double curHeight) { 
 totalArea += ((1.0 * curHeight) + lowHeight) / 2 * (curX - lastX);
// System.out.println("dist: " + (curX-lastX));
// System.out.println("newHeight: " + lowHeight);
// System.out.println("oldHeight: " + curHeight);
curHeight = lowHeight;
return curHeight;
}


public static double func_d025967e905b49f8b6baa263b642af50(int curX, double curHeight, double totalArea, double lastX, double lowHeight) { 
 totalArea += ((1.0 * curHeight) + lowHeight) / 2 * (curX - lastX);
// //System.out.println("dist: " + (curX-lastX));
// //System.out.println("newHeight: " + lowHeight);
// //System.out.println("oldHeight: " + curHeight);
curHeight = lowHeight;
return curHeight;
}


public static double func_9393bf25c4cd4f95941386069c799410(int curX, double curHeight, double totalArea, double lastX, double lowHeight) { 
 totalArea += ((1.0 * curHeight) + lowHeight) / 2 * (curX - lastX);
// //System.out.println("dist: " + (curX-lastX));
// //System.out.println("newHeight: " + lowHeight);
// //System.out.println("oldHeight: " + curHeight);
curHeight = lowHeight;
return totalArea;
}


*********************************

#### Score: 5.89292


#### Java Tokens: area, len, low, upper 

public static double func_b5fde597de7944ecba1ad3edaf9525b5(int w, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
return area;
}


public static double func_cd3e869e391a46a8b0bc42288a030043(int w, int g, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
area /= g;
return area;
}


public static double func_19bd7e074d0f4f9e90b2ec34ca11e5d0(int w, double[] len, double[] upper, double[] low) { 
 for (int i = 0; i <= w; i++) {
    len[i] = upper[i] - low[i];
}
double area = 0;
for (int i = 1; i <= w; i++) {
    area += (len[i - 1] + len[i]) / 2;
}
return area;
}


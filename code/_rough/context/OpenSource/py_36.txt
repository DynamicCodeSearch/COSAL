### Py Tokens: count, isinstance, abbb, newcount, items, counters, counter, elem, two, add, bcc, result, counts, implemented, notimplemented 

### Py functions

def __add__(self, other):

  if not isinstance(other, Counter):
    return NotImplemented
  result = Counter()
  for elem, count in self.items():
    newcount = count + other[elem]
    if newcount > 0:
      result[elem] = newcount
  for elem, count in other.items():
    if elem not in self and count > 0:
      result[elem] = count
  return result
*********************************

#### Score: 6.19239


#### Java Tokens: occurrences, code, string, counts, appears, isempty, abba, charsequence, empty, number, times, faster, tochararray, would, param, array, utils, generate, charat, given, pre, may, could, count, length, garbage, also, check, many, matches, look, str, stringutils, call, sequence, input, char, ups, returns, countmatches, since 


public static int countMatches(final CharSequence str, final char ch) {
    if (isEmpty(str)) {
        return 0;
    }
    int count = 0;
    
    for (int i = 0; i < str.length(); i++) {
        if (ch == str.charAt(i)) {
            count++;
        }
    }
    return count;
}
*********************************

#### Score: 6.19239


#### Java Tokens: larger, occurrences, sub, code, string, signature, counts, appears, isempty, abba, charsequence, substring, empty, number, times, either, found, param, utils, charsequenceutils, pre, may, index_not_found, count, length, index, check, many, matches, str, stringutils, sequence, input, char, xxx, returns, idx, indexof, countmatches, since, changed 




public static int countMatches(final CharSequence str, final CharSequence sub) {
    if (isEmpty(str) || isEmpty(sub)) {
        return 0;
    }
    int count = 0;
    int idx = 0;
    while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND) {
        count++;
        idx += sub.length();
    }
    return count;
}
*********************************

#### Score: 5.02661


#### Java Tokens: code, string, isolated, arrayutils, units, convert, codepointat, charsequence, point, pairs, points, empty, codepointcount, result, valid, character, high, array, low, param, utils, supplementary, surrogate, preceded, pre, charcount, length, count, index, converts, followed, empty_int_array, int, as-is, str, stringutils, single, sequence, converted, char, tocodepoints, returned, tostring, since 


public static int[] toCodePoints(final CharSequence str) {
    if (str == null) {
        return null;
    }
    if (str.length() == 0) {
        return ArrayUtils.EMPTY_INT_ARRAY;
    }
    final String s = str.toString();
    final int[] result = new int[s.codePointCount(0, s.length())];
    int index = 0;
    for (int i = 0; i < result.length; i++) {
        result[i] = s.codePointAt(index);
        index += Character.charCount(result[i]);
    }
    return result;
}
*********************************

#### Score: 4.23264


#### Java Tokens: stringutils, noofitems, string, utils, newstringbuilder, builder, stringbuilder, items 

private static StringBuilder newStringBuilder(final int noOfItems) {
    return new StringBuilder(noOfItems * 16);
}
*********************************

#### Score: 3.97898


#### Java Tokens: n-th, note, code, string, signature, link, lastordinalindexof, charsequence, substring, mos, search, found, finds, param, utils, find, implemented, ordinalindexof, pre, last, method, may, within, index_not_found, match, index, check, aabaabaa, str, stringutils, sequence, input, searchstr, char, handling, uses, lastindexof, ordinal, since, changed 


public static int lastOrdinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal) {
    return ordinalIndexOf(str, searchStr, ordinal, true);
}
*********************************

#### Score: 3.54972


#### Java Tokens: pre, code, abc, string, may, instances, containing, match, substringbetween, gets, nested, two, substring, str, stringutils, input, param, utils, returns, tag, tagabctag, since 




public static String substringBetween(final String str, final String tag) {
    return substringBetween(str, tag, tag);
}
*********************************

#### Score: 3.45124


#### Java Tokens: identifying, code, string, arrayutils, substrings, isempty, substring, empty, empty_string_array, matching, strlen, len, array, pos, param, utils, end, tag, close, add, searches, pre, containing, length, start, delimited, match, index, arraylist, list, substringsbetween, str, stringutils, input, size, [a][b][c], returning, toarray, returns, indexof, open, closelen, openlen, since 


public static String[] substringsBetween(final String str, final String open, final String close) {
    if (str == null || isEmpty(open) || isEmpty(close)) {
        return null;
    }
    final int strLen = str.length();
    if (strLen == 0) {
        return ArrayUtils.EMPTY_STRING_ARRAY;
    }
    final int closeLen = close.length();
    final int openLen = open.length();
    final List<String> list = new ArrayList<>();
    int pos = 0;
    while (pos < strLen - closeLen) {
        int start = str.indexOf(open, pos);
        if (start < 0) {
            break;
        }
        start += openLen;
        final int end = str.indexOf(close, start);
        if (end < 0) {
            break;
        }
        list.add(str.substring(start, end));
        pos = end + closeLen;
    }
    if (list.isEmpty()) {
        return null;
    }
    return list.toArray(new String[list.size()]);
}
*********************************

#### Score: 3.37379


#### Java Tokens: exception, counts, javadocs, upper, gusfield, discussion, trees, character, would, sizes, utils, api, calculate, using, hippo, edit, commons-text, single-dimensional, input, size, left, difference, must, starting, illegalargumentexception, another, comes, turn, immediately, matrix, two, charsequence, example, result, see, current, min, found, jth, one, possible, right, stringutils, single, leftmost, indices, abs, decreases, returning, assist, needing, run, empty, compute, either, apache, swapped, swapping, loop, stripe, fills, ignored, pre, ensure, need, modification, suppose, iterations, http://www.merriampark.com/ld.htm, leads, allocating, http, elephant, subtlety, memory, distance, string, needed, changes, proper, back, negative, param, similarity, ignore, placeholder, charat, htm, org, bound, length, way, target, levenshteindistance, time, max_value, release, deprecated, usage, entire, number, deletion, tmp, https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/similarity/levenshteindistance.html, href, text, https, rightmost, greater, shorter, reduce, large, lower, forth, horizontally, following, math, arrays, requires, algorithms, iterates, doubling, getlevenshteindistance, consume, sequences, cell, commons, strings, top, computes, get, member, copy, t_j, table, may, max, change, lead, additionally, char, width, chas, minimum, first, com, argument, dimensional, minor, emerick, use, threshold, integer, aaapppp, second, dan, find, www, html, different, border, always, swap, merriampark, follows, less, constrain, fill, illegal, sequence, entry, entries, insertion, since, levenshtein, boundary, concrete, note, substitution, code, values, necessarily, running, computing, array, diagonally, unbounded, value, allows, cost, implementation, also, instead, diagonal 


@Deprecated
public static int getLevenshteinDistance(CharSequence s, CharSequence t, final int threshold) {
    if (s == null || t == null) {
        throw new IllegalArgumentException("Strings must not be null");
    }
    if (threshold < 0) {
        throw new IllegalArgumentException("Threshold must not be negative");
    }
    
    
    int n = s.length();
    
    int m = t.length();
    
    if (n == 0) {
        return m <= threshold ? m : -1;
    } else if (m == 0) {
        return n <= threshold ? n : -1;
    } else if (Math.abs(n - m) > threshold) {
        
        return -1;
    }
    if (n > m) {
        
        final CharSequence tmp = s;
        s = t;
        t = tmp;
        n = m;
        m = t.length();
    }
    
    int[] p = new int[n + 1];
    
    int[] d = new int[n + 1];
    
    int[] _d;
    
    final int boundary = Math.min(n, threshold) + 1;
    for (int i = 0; i < boundary; i++) {
        p[i] = i;
    }
    
    
    Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);
    Arrays.fill(d, Integer.MAX_VALUE);
    
    for (int j = 1; j <= m; j++) {
        
        final char t_j = t.charAt(j - 1);
        d[0] = j;
        
        final int min = Math.max(1, j - threshold);
        final int max = j > Integer.MAX_VALUE - threshold ? n : Math.min(n, j + threshold);
        
        if (min > max) {
            return -1;
        }
        
        if (min > 1) {
            d[min - 1] = Integer.MAX_VALUE;
        }
        
        for (int i = min; i <= max; i++) {
            if (s.charAt(i - 1) == t_j) {
                
                d[i] = p[i - 1];
            } else {
                
                d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);
            }
        }
        
        _d = p;
        p = d;
        d = _d;
    }
    
    if (p[n] <= threshold) {
        return p[n];
    }
    return -1;
}
*********************************

#### Score: 3.37027


#### Java Tokens: exception, argument, eager, gwt, large:, integer, repeated, required, empty, zero, number, copies, checkargument, len, longsize, hey, large, containing, count, index, heyheyhey, check, illegal, benchmark, input, system, null, size, invalid, bounds, returns, must, illegalargumentexception, getchars, code, string, stringsrepeatbenchmark, checknotnull, count:, update, arrayindexoutofboundsexception, non, example, times, negative, concatenated, strings, array, param, arraycopy, repeat, get, length, nonnegative, specific, non-null, consisting, modify, chars 


public static String repeat(String string, int count) {
    
    checkNotNull(string);
    if (count <= 1) {
        checkArgument(count >= 0, "invalid count: %s", count);
        return (count == 0) ? "" : string;
    }
    
    final int len = string.length();
    final long longSize = (long) len * (long) count;
    final int size = (int) longSize;
    if (size != longSize) {
        throw new ArrayIndexOutOfBoundsException("Required array size too large: " + longSize);
    }
    final char[] array = new char[size];
    string.getChars(0, len, array, 0);
    int n;
    for (n = len; n < size - n; n <<= 1) {
        System.arraycopy(array, 0, array, n, n);
    }
    System.arraycopy(array, 0, array, n, size - n);
    return new String(array);
}
*********************************

#### Score: 3.32739


#### Java Tokens: n-th, abababab, empty, mos, finds, utils, find, implemented, ordinalindexof, pre, method, last, index_not_found, index, check, matches, aabaabaa, abab, str, sequence, never, input, overlap, position, ababab, starting, since, changed, note, code, string, signature, link, immediately, charsequence, substring, lastordinalindexof, search, found, unless, param, successful, means, aba, may, within, one, match, possible, incrementing, stringutils, searchstr, char, handling, uses, returned, indexof, ordinal, incremented 


public static int ordinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal) {
    return ordinalIndexOf(str, searchStr, ordinal, false);
}
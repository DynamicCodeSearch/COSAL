### Py Tokens: map, idmapl, return, string, bytes, len, fromstr, frm, long, table, ord, translation, must, use, suitable, join, idmap, tostr, list, range, value, strings, length, maketrans, error, translate, valueerror, arguments 

### Py functions

def maketrans(fromstr, tostr):

  if len(fromstr) != len(tostr):
    raise ValueError, "maketrans arguments must have same length"
  global _idmapL
  if not _idmapL:
    _idmapL = list(_idmap)
  L = _idmapL[:]
  fromstr = map(ord, fromstr)
  for i in range(len(fromstr)):
    L[fromstr[i]] = tostr[i]
  return ''.join(L)
*********************************

#### Score: 10.22375


#### Java Tokens: exception, joins, sanitizedseparator, argument, added, use, objects, empty, iterator, character, java, utils, delimiter, a,b,, join, hasnext, varargs, treated, pre, sanitized, containing, list, separator, illegal, defaultstring, must, arrays, object, since, next, illegalargumentexception, providing, code, string, provided, values, a,,b, result, strings, param, a,b, builder, lang, aslist, value, together, joined, stringutils, single, joinwith, elements, stringbuilder, tostring, append 


public static String joinWith(final String separator, final Object... objects) {
    if (objects == null) {
        throw new IllegalArgumentException("Object varargs must not be null");
    }
    final String sanitizedSeparator = defaultString(separator);
    final StringBuilder result = new StringBuilder();
    final Iterator<Object> iterator = Arrays.asList(objects).iterator();
    while (iterator.hasNext()) {
        final String value = Objects.toString(iterator.next(), "");
        result.append(value);
        if (iterator.hasNext()) {
            result.append(sanitizedSeparator);
        }
    }
    return result.toString();
}
*********************************

#### Score: 9.10663


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final byte[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
*********************************

#### Score: 9.10663


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final char[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
*********************************

#### Score: 9.10663


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final double[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
*********************************

#### Score: 9.10663


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final float[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
*********************************

#### Score: 9.10663


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final int[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
*********************************

#### Score: 9.10663


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final long[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
*********************************

#### Score: 9.10663


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final short[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
*********************************

#### Score: 8.92547


#### Java Tokens: code, string, range, validsurrogatepairat, charsequence, valid, out-of-range, character, high, strings, indexes, low, ishighsurrogate, surrogate, starts, charat, given, visible, testing, length, index, pair, visiblefortesting, sequence, char, true, islowsurrogate 


@VisibleForTesting
static boolean validSurrogatePairAt(CharSequence string, int index) {
    return index >= 0 && index <= (string.length() - 2) && Character.isHighSurrogate(string.charAt(index)) && Character.isLowSurrogate(string.charAt(index + 1));
}
*********************************

#### Score: 8.74311


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final byte[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
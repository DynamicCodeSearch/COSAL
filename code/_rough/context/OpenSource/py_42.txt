### Py Tokens: point, map, make, get, replace 

### Py functions

def _replace(self, _map=map, **kwds):
  return self._make(_map(kwds.get, ('x', 'y'), self))
*********************************

#### Score: 4.77479


#### Java Tokens: css, indexofdifference, exceeding, vary, nulls, arrayutils, integer, empty, robot, len, utils, find, loop, xyz, allstringsnull, stringpos, shorteststrlen, shortest, pre, longeststrlen, comparison, sure, index_not_found, avoids, bottom, containing, index, diff, handle, arraypos, str, sequence, entries, null, lists, difference, returns, math, position, begin, since, changed, firstdiff, checking, longest, code, string, signature, sequences, charsequence, example, across, characters, found, min, strings, array, pos, param, get, value, comparisonchar, abxyz, make, charat, anystringnull, compared, abc, may, max, abcde, length, arraylen, charsequences, compares, differ, stringutils, equal, lengths, machine, char, time, getlength, first, max_value 


public static int indexOfDifference(final CharSequence... css) {
    if (ArrayUtils.getLength(css) <= 1) {
        return INDEX_NOT_FOUND;
    }
    boolean anyStringNull = false;
    boolean allStringsNull = true;
    final int arrayLen = css.length;
    int shortestStrLen = Integer.MAX_VALUE;
    int longestStrLen = 0;
    
    for (final CharSequence cs : css) {
        if (cs == null) {
            anyStringNull = true;
            shortestStrLen = 0;
        } else {
            allStringsNull = false;
            shortestStrLen = Math.min(cs.length(), shortestStrLen);
            longestStrLen = Math.max(cs.length(), longestStrLen);
        }
    }
    
    if (allStringsNull || longestStrLen == 0 && !anyStringNull) {
        return INDEX_NOT_FOUND;
    }
    
    if (shortestStrLen == 0) {
        return 0;
    }
    
    int firstDiff = -1;
    for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {
        final char comparisonChar = css[0].charAt(stringPos);
        for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {
            if (css[arrayPos].charAt(stringPos) != comparisonChar) {
                firstDiff = stringPos;
                break;
            }
        }
        if (firstDiff != -1) {
            break;
        }
    }
    if (firstDiff == -1 && shortestStrLen != longestStrLen) {
        
        return shortestStrLen;
    }
    return firstDiff;
}
*********************************

#### Score: 4.57312


#### Java Tokens: exception, occurrences, repeats, stack, mostly, objects, upper, arrayutils, wcte, isempty, illegalstateexception, output, mos, java, utils, tcte, let, text, state, greater, replaceeach, dcte, still, goal, sure, method, index, circular, no-op, matches, input, size, guess, replacementlist, math, arrays, recursing, larger, illegalargumentexception, another, requests, recursive, example, result, search, see, min, found, strings, mos.search, get, builder, repl, protect, stackoverflowerror, nomorematchesforreplindex, aba, within, textlength, one, replaced, possible, stringutils, searchlength, buf, textindex, elements, logic, stringbuilder, outputs, argument, tempindex, inputs, replace, good, empty, reference, overflow, helper, major, loop, find, repeating, match:, replaceindex, create, replacements, buffer, ignored, repeatedly, pre, need, count, less, list, illegal, done, take, measure, replaceeachrepeatedly, keep, creates, know, timetolive, assume, replacement, since, next, note, replacementlength, code, string, searching, link, mchyzer, endless, upper-bound, error, duplicated, array, param, repeat, end, passed, track, make, live, charat, temp, abcde, bound, length, match, start, aborting, increase, earliest, equal, processed, performance, searchlist, lengths, due, corresponding, harness, time, indexof, tostring, append 


private static String replaceEach(final String text, final String[] searchList, final String[] replacementList, final boolean repeat, final int timeToLive) {
    if (isEmpty(text) || ArrayUtils.isEmpty(searchList) || ArrayUtils.isEmpty(replacementList)) {
        return text;
    }
    
    if (timeToLive < 0) {
        throw new IllegalStateException("Aborting to protect against StackOverflowError - " + "output of one loop is the input of another");
    }
    final int searchLength = searchList.length;
    final int replacementLength = replacementList.length;
    
    if (searchLength != replacementLength) {
        throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs " + replacementLength);
    }
    
    final boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];
    
    int textIndex = -1;
    int replaceIndex = -1;
    int tempIndex = -1;
    
    for (int i = 0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {
            continue;
        }
        tempIndex = text.indexOf(searchList[i]);
        
        if (tempIndex == -1) {
            noMoreMatchesForReplIndex[i] = true;
        } else {
            if (textIndex == -1 || tempIndex < textIndex) {
                textIndex = tempIndex;
                replaceIndex = i;
            }
        }
    }
    
    if (textIndex == -1) {
        return text;
    }
    int start = 0;
    
    int increase = 0;
    
    for (int i = 0; i < searchList.length; i++) {
        if (searchList[i] == null || replacementList[i] == null) {
            continue;
        }
        final int greater = replacementList[i].length() - searchList[i].length();
        if (greater > 0) {
            
            increase += 3 * greater;
        }
    }
    
    increase = Math.min(increase, text.length() / 5);
    final StringBuilder buf = new StringBuilder(text.length() + increase);
    while (textIndex != -1) {
        for (int i = start; i < textIndex; i++) {
            buf.append(text.charAt(i));
        }
        buf.append(replacementList[replaceIndex]);
        start = textIndex + searchList[replaceIndex].length();
        textIndex = -1;
        replaceIndex = -1;
        tempIndex = -1;
        
        for (int i = 0; i < searchLength; i++) {
            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {
                continue;
            }
            tempIndex = text.indexOf(searchList[i], start);
            
            if (tempIndex == -1) {
                noMoreMatchesForReplIndex[i] = true;
            } else {
                if (textIndex == -1 || tempIndex < textIndex) {
                    textIndex = tempIndex;
                    replaceIndex = i;
                }
            }
        }
    
    }
    final int textLength = text.length();
    for (int i = start; i < textLength; i++) {
        buf.append(text.charAt(i));
    }
    final String result = buf.toString();
    if (!repeat) {
        return result;
    }
    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);
}
*********************************

#### Score: 3.27473


#### Java Tokens: occurrences, pre, code, string, may, within, queued, replace, source, isempty, remove, substring, empty, str, stringutils, mos, input, search, found, removed, param, utils, removes, since 


public static String remove(final String str, final String remove) {
    if (isEmpty(str) || isEmpty(remove)) {
        return str;
    }
    return replace(str, remove, EMPTY, -1);
}
*********************************

#### Score: 3.10211


#### Java Tokens: code, string, signature, u0969, numeric, non, space, charsequence, point, empty, 12-3, character, u0967u0968u0969, param, utils, u0967u0968, isdigit, charat, digit, isnumeric, pre, isnumericspace, may, length, check, stringutils, non-null, sequence, 12.3, contains, 123, checks, char, unicode, digits, returns, decimal, ab2c, since, changed 


public static boolean isNumericSpace(final CharSequence cs) {
    if (cs == null) {
        return false;
    }
    final int sz = cs.length();
    for (int i = 0; i < sz; i++) {
        if (!Character.isDigit(cs.charAt(i)) && cs.charAt(i) != ' ') {
            return false;
        }
    }
    return true;
}
*********************************

#### Score: 3.09317


#### Java Tokens: occurrences, code, string, another, replace, reference, mos, search, see, zbz, param, utils, text, passed, replacements, aba, pre, method, may, within, max, replaces, no-op, stringutils, processed, input, replacement, searchstring 


public static String replace(final String text, final String searchString, final String replacement) {
    return replace(text, searchString, replacement, -1);
}
*********************************

#### Score: 3.05949


#### Java Tokens: occurrences, code, string, queued, replace, insensitive, source, isempty, remove, substring, empty, mos, search, found, ued, param, utils, ignore, case, replaceignorecase, removeignorecase, pre, may, within, str, stringutils, input, removed, removal, since 


public static String removeIgnoreCase(final String str, final String remove) {
    if (isEmpty(str) || isEmpty(remove)) {
        return str;
    }
    return replaceIgnoreCase(str, remove, EMPTY, -1);
}
*********************************

#### Score: 3.05949


#### Java Tokens: larger, code, string, replaceonce, another, replace, inside, reference, mos, search, see, param, utils, text, passed, replacements, aba, pre, method, may, max, replaces, no-op, stringutils, processed, input, zba, replacement, searchstring 




public static String replaceOnce(final String text, final String searchString, final String replacement) {
    return replace(text, searchString, replacement, 1);
}
*********************************

#### Score: 3.04429


#### Java Tokens: code, string, isolated, arrayutils, units, convert, codepointat, charsequence, point, pairs, points, empty, codepointcount, result, valid, character, high, array, low, param, utils, supplementary, surrogate, preceded, pre, charcount, length, count, index, converts, followed, empty_int_array, int, as-is, str, stringutils, single, sequence, converted, char, tocodepoints, returned, tostring, since 


public static int[] toCodePoints(final CharSequence str) {
    if (str == null) {
        return null;
    }
    if (str.length() == 0) {
        return ArrayUtils.EMPTY_INT_ARRAY;
    }
    final String s = str.toString();
    final int[] result = new int[s.codePointCount(0, s.length())];
    int index = 0;
    for (int i = 0; i < result.length; i++) {
        result[i] = s.codePointAt(index);
        index += Character.charCount(result[i]);
    }
    return result;
}
*********************************

#### Score: 2.96314


#### Java Tokens: occurrences, code, string, replacechars, another, replace, link, empty, mos, characters, search, character, searchchar, param, utils, modified, replacechar, pre, may, abcba, replaces, version, str, stringutils, input, char, safe, returns, aycya, chars, null-safe, since 




public static String replaceChars(final String str, final char searchChar, final char replaceChar) {
    if (str == null) {
        return null;
    }
    return str.replace(searchChar, replaceChar);
}
*********************************

#### Score: 2.93250


#### Java Tokens: larger, code, string, another, values, replace, inside, mos, reference, zbzz, number, search, param, utils, text, passed, replacements, pre, method, may, max, replaces, no-op, abaa, stringutils, zbaa, processed, input, zbza, maximum, replacement, first, searchstring 


public static String replace(final String text, final String searchString, final String replacement, final int max) {
    return replace(text, searchString, replacement, max, false);
}
### Py Tokens: ordereddict, returned, dictionary, lifo, false, reversed, keyerror, pop, iter, key, popitem, pair, ordered, remove, true, pairs, last, value, next, dict, error, fifo, order, empty 

### Py functions

def popitem(self, last=True):

  if not self:
    raise KeyError('dictionary is empty')
  key = next(reversed(self) if last else iter(self))
  value = self.pop(key)
  return key, value
*********************************

#### Score: 9.36033


#### Java Tokens: code, string, range, validsurrogatepairat, charsequence, valid, out-of-range, character, high, strings, indexes, low, ishighsurrogate, surrogate, starts, charat, given, visible, testing, length, index, pair, visiblefortesting, sequence, char, true, islowsurrogate 


@VisibleForTesting
static boolean validSurrogatePairAt(CharSequence string, int index) {
    return index >= 0 && index <= (string.length() - 2) && Character.isHighSurrogate(string.charAt(index)) && Character.isLowSurrogate(string.charAt(index + 1));
}
*********************************

#### Score: 8.99263


#### Java Tokens: sub, startswith, longest, code, string, checknotnull, prefix, validsurrogatepairat, charsequence, pairs, empty, valid, p--, min, split, commonprefix, common, strings, surrogate, starts, charat, maxprefixlength, max, length, check, pair, subsequence, sequence, null, char, returns, math, tostring, taking, care, since 


public static String commonPrefix(CharSequence a, CharSequence b) {
    checkNotNull(a);
    checkNotNull(b);
    int maxPrefixLength = Math.min(a.length(), b.length());
    int p = 0;
    while (p < maxPrefixLength && a.charAt(p) == b.charAt(p)) {
        p++;
    }
    if (validSurrogatePairAt(a, p - 1) || validSurrogatePairAt(b, p - 1)) {
        p--;
    }
    return a.subSequence(0, p).toString();
}
*********************************

#### Score: 8.99263


#### Java Tokens: sub, longest, code, string, checknotnull, maxsuffixlength, endswith, suffix, validsurrogatepairat, commonsuffix, charsequence, pairs, empty, valid, s--, min, split, common, strings, ends, surrogate, charat, max, length, check, pair, subsequence, sequence, null, char, returns, math, tostring, taking, care, since 


public static String commonSuffix(CharSequence a, CharSequence b) {
    checkNotNull(a);
    checkNotNull(b);
    int maxSuffixLength = Math.min(a.length(), b.length());
    int s = 0;
    while (s < maxSuffixLength && a.charAt(a.length() - s - 1) == b.charAt(b.length() - s - 1)) {
        s++;
    }
    if (validSurrogatePairAt(a, a.length() - s - 1) || validSurrogatePairAt(b, b.length() - s - 1)) {
        s--;
    }
    return a.subSequence(a.length() - s, a.length()).toString();
}
*********************************

#### Score: 6.74516


#### Java Tokens: code, string, charutils, substring, remove, without, empty, strlen, character, len, param, lastidx, utils, ends, charat, ret, pre, abc, last, may, chop, length, str, stringutils, input, char, idx 




public static String chop(final String str) {
    if (str == null) {
        return null;
    }
    final int strLen = str.length();
    if (strLen < 2) {
        return EMPTY;
    }
    final int lastIdx = strLen - 1;
    final String ret = str.substring(0, lastIdx);
    final char last = str.charAt(lastIdx);
    if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {
        return ret.substring(0, lastIdx - 1);
    }
    return ret;
}
*********************************

#### Score: 6.49770


#### Java Tokens: code, string, isolated, arrayutils, units, convert, codepointat, charsequence, point, pairs, points, empty, codepointcount, result, valid, character, high, array, low, param, utils, supplementary, surrogate, preceded, pre, charcount, length, count, index, converts, followed, empty_int_array, int, as-is, str, stringutils, single, sequence, converted, char, tocodepoints, returned, tostring, since 


public static int[] toCodePoints(final CharSequence str) {
    if (str == null) {
        return null;
    }
    if (str.length() == 0) {
        return ArrayUtils.EMPTY_INT_ARRAY;
    }
    final String s = str.toString();
    final int[] result = new int[s.codePointCount(0, s.length())];
    int index = 0;
    for (int i = 0; i < result.length; i++) {
        result[i] = s.codePointAt(index);
        index += Character.charCount(result[i]);
    }
    return result;
}
*********************************

#### Score: 6.14208


#### Java Tokens: occurs, isempty, empty, mos, character, either, utils, find, inclusive, blockquote, pre, last, like, index_not_found, index, aabaabaa, ffff, sequence, input, xffff, unicode, lastindexof, returns, starting, updated, since, changed, largest, code, string, signature, values, link, range, units, codepointat, charsequence, specified, point, behave, search, searchchar, found, param, value, seq, charat, charsequenceutils, within, length, match, stringutils, call, char, returned 




public static int lastIndexOf(final CharSequence seq, final int searchChar) {
    if (isEmpty(seq)) {
        return INDEX_NOT_FOUND;
    }
    return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());
}
*********************************

#### Score: 5.91063


#### Java Tokens: code, string, occurrence, isempty, substring, empty, mos, search, found, pos, param, utils, get, substringbeforelast, pre, abc, last, may, abcba, index_not_found, nothing, index, separator, gets, str, stringutils, input, lastindexof, returned, since 


public static String substringBeforeLast(final String str, final String separator) {
    if (isEmpty(str) || isEmpty(separator)) {
        return str;
    }
    final int pos = str.lastIndexOf(separator);
    if (pos == INDEX_NOT_FOUND) {
        return str;
    }
    return str.substring(0, pos);
}
*********************************

#### Score: 5.86659


#### Java Tokens: code, string, link, stripped, strips, remove, empty, zero, character, strip, strs, strings, array, param, utils, end, every, defined, ignored, pre, abc, may, start, length, stringutils, entry, input, stripall, except, time, whitespace, returned, iswhitespace 




public static String[] stripAll(final String... strs) {
    return stripAll(strs, null);
}
*********************************

#### Score: 5.84377


#### Java Tokens: code, string, occurrence, isempty, substring, empty, mos, search, found, pos, param, utils, get, pre, abc, last, may, substringafterlast, abcba, index_not_found, nothing, length, index, separator, gets, str, stringutils, input, lastindexof, returned, since 




public static String substringAfterLast(final String str, final String separator) {
    if (isEmpty(str)) {
        return str;
    }
    if (isEmpty(separator)) {
        return EMPTY;
    }
    final int pos = str.lastIndexOf(separator);
    if (pos == INDEX_NOT_FOUND || pos == str.length() - separator.length()) {
        return EMPTY;
    }
    return str.substring(pos + separator.length());
}
*********************************

#### Score: 5.83165


#### Java Tokens: splits, used, substrings, empty, zero, number, split, utils, limit, text, worker, treated, pre, including, last, created, includes, preserve, separator, str, input, returns, parsed, preserving, since, code, string, separatorchars, provided, specified, ab:cd:ef, characters, negative, found, strings, splitworker, array, param, delimiters, tokens, included, value, include, may, max, one, length, delimited, adjacent, parse, splitpreservealltokens, stringutils, elements, maximum, cd:ef, returned, whitespace, implies, separators, chars, first 


public static String[] splitPreserveAllTokens(final String str, final String separatorChars, final int max) {
    return splitWorker(str, separatorChars, max, true);
}
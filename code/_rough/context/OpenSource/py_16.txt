### Py Tokens: information, none, ordereddict, vars, instdict, items, pickling, reduce, pop, return, state, inst, ordered, copy, dict 

### Py functions

def __reduce__(self):

  items = [[k, self[k]] for k in self]
  inst_dict = vars(self).copy()
  for k in vars(OrderedDict()):
    inst_dict.pop(k, None)
  if inst_dict:
    return (self.__class__, (items,), inst_dict)
  return self.__class__, (items,)
*********************************

#### Score: 4.23264


#### Java Tokens: stringutils, noofitems, string, utils, newstringbuilder, builder, stringbuilder, items 

private static StringBuilder newStringBuilder(final int noOfItems) {
    return new StringBuilder(noOfItems * 16);
}
*********************************

#### Score: 3.93178


#### Java Tokens: occurrences, exception, outputs, repeats, argument, inputs, replace, wcte, used, illegalstateexception, reference, mos, utils, tcte, loop, repeating, text, state, replacements, replaceeach, ignored, repeatedly, pre, method, nothing, list, no-op, illegal, input, replaceeachrepeatedly, replacementlist, timetolive, arrays, replacement, since, illegalargumentexception, code, string, another, endless, example, search, strings, mos.search, param, array, passed, live, aba, within, replaces, abcde, one, length, stringutils, processed, searchlist, lengths, due, time 


public static String replaceEachRepeatedly(final String text, final String[] searchList, final String[] replacementList) {
    
    
    final int timeToLive = searchList == null ? 0 : searchList.length;
    return replaceEach(text, searchList, replacementList, true, timeToLive);
}
*********************************

#### Score: 3.40647


#### Java Tokens: css, pre, code, string, may, foo, none, check, sequences, charsequences, charsequence, empty, stringutils, sequence, isanyempty, bar, checks, bob, isnoneempty, param, utils, char, since 


public static boolean isNoneEmpty(final CharSequence... css) {
    return !isAnyEmpty(css);
}
*********************************

#### Score: 3.17895


#### Java Tokens: isnoneblank, css, blank, code, string, foo, link, none, sequences, charsequence, empty, character, bar, param, utils, defined, pre, may, check, charsequences, stringutils, sequence, checks, bob, char, isanyblank, whitespace, iswhitespace, since 


public static boolean isNoneBlank(final CharSequence... css) {
    return !isAnyBlank(css);
}
*********************************

#### Score: 3.01335


#### Java Tokens: code, string, signature, none, charsequence, empty, characters, character, tochararray, array, param, utils, xyz, invalidchars, always, pre, contain, may, check, abab, stringutils, sequence, ab1, contains, checks, char, invalid, abz, returns, containsnone, certain, chars, since, changed 


public static boolean containsNone(final CharSequence cs, final String invalidChars) {
    if (cs == null || invalidChars == null) {
        return true;
    }
    return containsNone(cs, invalidChars.toCharArray());
}
*********************************

#### Score: 2.99384


#### Java Tokens: exception, counts, javadocs, upper, gusfield, discussion, trees, character, would, sizes, utils, api, calculate, using, hippo, edit, commons-text, single-dimensional, input, size, left, difference, must, starting, illegalargumentexception, another, comes, turn, immediately, matrix, two, charsequence, example, result, see, current, min, found, jth, one, possible, right, stringutils, single, leftmost, indices, abs, decreases, returning, assist, needing, run, empty, compute, either, apache, swapped, swapping, loop, stripe, fills, ignored, pre, ensure, need, modification, suppose, iterations, http://www.merriampark.com/ld.htm, leads, allocating, http, elephant, subtlety, memory, distance, string, needed, changes, proper, back, negative, param, similarity, ignore, placeholder, charat, htm, org, bound, length, way, target, levenshteindistance, time, max_value, release, deprecated, usage, entire, number, deletion, tmp, https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/similarity/levenshteindistance.html, href, text, https, rightmost, greater, shorter, reduce, large, lower, forth, horizontally, following, math, arrays, requires, algorithms, iterates, doubling, getlevenshteindistance, consume, sequences, cell, commons, strings, top, computes, get, member, copy, t_j, table, may, max, change, lead, additionally, char, width, chas, minimum, first, com, argument, dimensional, minor, emerick, use, threshold, integer, aaapppp, second, dan, find, www, html, different, border, always, swap, merriampark, follows, less, constrain, fill, illegal, sequence, entry, entries, insertion, since, levenshtein, boundary, concrete, note, substitution, code, values, necessarily, running, computing, array, diagonally, unbounded, value, allows, cost, implementation, also, instead, diagonal 


@Deprecated
public static int getLevenshteinDistance(CharSequence s, CharSequence t, final int threshold) {
    if (s == null || t == null) {
        throw new IllegalArgumentException("Strings must not be null");
    }
    if (threshold < 0) {
        throw new IllegalArgumentException("Threshold must not be negative");
    }
    
    
    int n = s.length();
    
    int m = t.length();
    
    if (n == 0) {
        return m <= threshold ? m : -1;
    } else if (m == 0) {
        return n <= threshold ? n : -1;
    } else if (Math.abs(n - m) > threshold) {
        
        return -1;
    }
    if (n > m) {
        
        final CharSequence tmp = s;
        s = t;
        t = tmp;
        n = m;
        m = t.length();
    }
    
    int[] p = new int[n + 1];
    
    int[] d = new int[n + 1];
    
    int[] _d;
    
    final int boundary = Math.min(n, threshold) + 1;
    for (int i = 0; i < boundary; i++) {
        p[i] = i;
    }
    
    
    Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);
    Arrays.fill(d, Integer.MAX_VALUE);
    
    for (int j = 1; j <= m; j++) {
        
        final char t_j = t.charAt(j - 1);
        d[0] = j;
        
        final int min = Math.max(1, j - threshold);
        final int max = j > Integer.MAX_VALUE - threshold ? n : Math.min(n, j + threshold);
        
        if (min > max) {
            return -1;
        }
        
        if (min > 1) {
            d[min - 1] = Integer.MAX_VALUE;
        }
        
        for (int i = min; i <= max; i++) {
            if (s.charAt(i - 1) == t_j) {
                
                d[i] = p[i - 1];
            } else {
                
                d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);
            }
        }
        
        _d = p;
        p = d;
        d = _d;
    }
    
    if (p[n] <= threshold) {
        return p[n];
    }
    return -1;
}
*********************************

#### Score: 2.70213


#### Java Tokens: codepoint, capitalizes, changing, points, strlen, character, apache, len, utils, lang3, text, per, case, algorithm, based, pre, wordutils, offset, charcount, already, count, capitalize, remaining, str, input, longer, returns, word, changed, since, code, string, link, codepointat, title, newcodepoints, point, commons, newcodepoint, characters, see, param, array, cat, copy, lang, totitlecase, may, org, length, firstcodepoint, 'cat', stringutils, uncapitalize, capitalized, inoffset, cannot, ones, first, outoffset 


public static String capitalize(final String str) {
    int strLen = length(str);
    if (strLen == 0) {
        return str;
    }
    final int firstCodepoint = str.codePointAt(0);
    final int newCodePoint = Character.toTitleCase(firstCodepoint);
    if (firstCodepoint == newCodePoint) {
        
        return str;
    }
    
    final int[] newCodePoints = new int[strLen];
    int outOffset = 0;
    
    newCodePoints[outOffset++] = newCodePoint;
    for (int inOffset = Character.charCount(firstCodepoint); inOffset < strLen; ) {
        final int codepoint = str.codePointAt(inOffset);
        
        newCodePoints[outOffset++] = codepoint;
        inOffset += Character.charCount(codepoint);
    }
    return new String(newCodePoints, 0, outOffset);
}
*********************************

#### Score: 2.70213


#### Java Tokens: codepoint, uncapitalizes, changing, points, strlen, character, apache, len, utils, lang3, text, per, case, algorithm, based, pre, wordutils, offset, charcount, already, lower, count, capitalize, remaining, str, input, longer, returns, word, changed, since, code, string, link, codepointat, newcodepoints, point, commons, newcodepoint, characters, see, param, array, cat, tolowercase, copy, lang, may, org, length, firstcodepoint, stringutils, uncapitalize, capitalized, inoffset, cannot, ones, uncapitalized, first, outoffset 


public static String uncapitalize(final String str) {
    int strLen = length(str);
    if (strLen == 0) {
        return str;
    }
    final int firstCodepoint = str.codePointAt(0);
    final int newCodePoint = Character.toLowerCase(firstCodepoint);
    if (firstCodepoint == newCodePoint) {
        
        return str;
    }
    
    final int[] newCodePoints = new int[strLen];
    int outOffset = 0;
    
    newCodePoints[outOffset++] = newCodePoint;
    for (int inOffset = Character.charCount(firstCodepoint); inOffset < strLen; ) {
        final int codepoint = str.codePointAt(inOffset);
        
        newCodePoints[outOffset++] = codepoint;
        inOffset += Character.charCount(codepoint);
    }
    return new String(newCodePoints, 0, outOffset);
}
*********************************

#### Score: 2.58345


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final byte[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 2.58345


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final char[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
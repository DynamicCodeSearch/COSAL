### Py Tokens: index, end, like, int, value, find, substring, start, raises, error, found, valueerror, sub 

### Py functions

def index(s, *args):

  return s.index(*args)
*********************************

#### Score: 9.40984


#### Java Tokens: joins, ;;a, noofitems, added, use, objects, empty, iterator, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, index, list, separator, input, endindex, null, stop, items, since, sub, joining, code, a;b;c, string, provided, values, error, strings, array, param, end, together, abc, may, within, joined, start, stringutils, single, startindex, sublist, elements, first 


public static String join(final List<?> list, final char separator, final int startIndex, final int endIndex) {
    if (list == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final List<?> subList = list.subList(startIndex, endIndex);
    return join(subList.iterator(), separator);
}
*********************************

#### Score: 9.40984


#### Java Tokens: joins, ;;a, noofitems, added, use, objects, empty, iterator, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, index, list, separator, input, endindex, null, stop, items, since, sub, joining, code, a;b;c, string, provided, values, error, strings, array, param, end, together, abc, may, within, joined, start, stringutils, single, startindex, sublist, elements, first 


public static String join(final List<?> list, final String separator, final int startIndex, final int endIndex) {
    if (list == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final List<?> subList = list.subList(startIndex, endIndex);
    return join(subList.iterator(), separator);
}
*********************************

#### Score: 9.06455


#### Java Tokens: occurs, isempty, empty, mos, character, either, utils, find, inclusive, blockquote, pre, like, index_not_found, index, check, aabaabaa, sequence, input, returns, updated, since, changed, code, string, signature, smallest, values, link, units, occurrence, codepointat, charsequence, specified, point, behave, search, searchchar, found, param, value, seq, charat, charsequenceutils, may, within, match, stringutils, call, furthermore, char, returned, indexof, first 




public static int indexOf(final CharSequence seq, final int searchChar) {
    if (isEmpty(seq)) {
        return INDEX_NOT_FOUND;
    }
    return CharSequenceUtils.indexOf(seq, searchChar, 0);
}
*********************************

#### Score: 8.98342


#### Java Tokens: code, string, yabczyabcz, yabcz, substringbetween, nested, two, wx[b]yz, substring, empty, found, strings, param, utils, end, close, pre, abc, may, index_not_found, containing, start, length, match, index, gets, str, stringutils, input, returns, returned, indexof, open, first, since 




public static String substringBetween(final String str, final String open, final String close) {
    if (str == null || open == null || close == null) {
        return null;
    }
    final int start = str.indexOf(open);
    if (start != INDEX_NOT_FOUND) {
        final int end = str.indexOf(close, start + open.length());
        if (end != INDEX_NOT_FOUND) {
            return str.substring(start + open.length(), end);
        }
    }
    return null;
}
*********************************

#### Score: 8.90059


#### Java Tokens: occurs, isempty, empty, mos, character, either, utils, find, inclusive, blockquote, pre, last, like, index_not_found, index, aabaabaa, ffff, sequence, input, xffff, unicode, lastindexof, returns, starting, updated, since, changed, largest, code, string, signature, values, link, range, units, codepointat, charsequence, specified, point, behave, search, searchchar, found, param, value, seq, charat, charsequenceutils, within, length, match, stringutils, call, char, returned 




public static int lastIndexOf(final CharSequence seq, final int searchChar) {
    if (isEmpty(seq)) {
        return INDEX_NOT_FOUND;
    }
    return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());
}
*********************************

#### Score: 8.86615


#### Java Tokens: smaller, occurs, entire, isempty, empty, mos, zero, character, either, utils, find, represented, greater, always, treated, blockquote, pre, like, index_not_found, index, check, aabaabaa, searched, sequence, input, effect, restriction, unicode, returns, position, starting, updated, object, since, changed, code, string, signature, smallest, values, link, occurrence, units, codepointat, charsequence, startpos, specified, point, behave, search, negative, searchchar, found, pos, param, value, seq, charat, charsequenceutils, may, within, start, length, match, stringutils, equal, call, indices, furthermore, char, returned, indexof, first 


public static int indexOf(final CharSequence seq, final int searchChar, final int startPos) {
    if (isEmpty(seq)) {
        return INDEX_NOT_FOUND;
    }
    return CharSequenceUtils.indexOf(seq, searchChar, startPos);
}
*********************************

#### Score: 8.41022


#### Java Tokens: larger, occurrences, sub, code, string, signature, counts, appears, isempty, abba, charsequence, substring, empty, number, times, either, found, param, utils, charsequenceutils, pre, may, index_not_found, count, length, index, check, many, matches, str, stringutils, sequence, input, char, xxx, returns, idx, indexof, countmatches, since, changed 




public static int countMatches(final CharSequence str, final CharSequence sub) {
    if (isEmpty(str) || isEmpty(sub)) {
        return 0;
    }
    int count = 0;
    int idx = 0;
    while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND) {
        count++;
        idx += sub.length();
    }
    return count;
}
*********************************

#### Score: 8.02608


#### Java Tokens: empty, zero, mos, utils, find, limit, greater, case, always, regionmatches, treated, pre, index_not_found, index, in-sensitive, sensitive, check, matches, aabaabaa, str, sequence, input, position, region, since, changed, code, string, signature, indexofignorecase, endlimit, charsequence, startpos, specified, search, negative, found, pos, param, ignore, end, charsequenceutils, abc, may, within, start, length, match, stringutils, searchstr, char, first 


public static int indexOfIgnoreCase(final CharSequence str, final CharSequence searchStr, int startPos) {
    if (str == null || searchStr == null) {
        return INDEX_NOT_FOUND;
    }
    if (startPos < 0) {
        startPos = 0;
    }
    final int endLimit = str.length() - searchStr.length() + 1;
    if (startPos > endLimit) {
        return INDEX_NOT_FOUND;
    }
    if (searchStr.length() == 0) {
        return startPos;
    }
    for (int i = startPos; i < endLimit; i++) {
        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}
*********************************

#### Score: 7.78071


#### Java Tokens: code, string, abcyx, link, stripped, isempty, substring, strips, remove, empty, characters, character, strip, found, param, utils, xyz, end, charat, defined, treated, pre, set, abc, may, index_not_found, length, index, 120.00, str, stringutils, input, stripchars, end--, returns, whitespace, stripend, iswhitespace, indexof, chars 


public static String stripEnd(final String str, final String stripChars) {
    int end = length(str);
    if (end == 0) {
        return str;
    }
    if (stripChars == null) {
        while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {
            end--;
        }
    } else if (stripChars.isEmpty()) {
        return str;
    } else {
        while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND) {
            end--;
        }
    }
    return str.substring(0, end);
}
*********************************

#### Score: 7.35146


#### Java Tokens: n-th, note, code, string, signature, link, lastordinalindexof, charsequence, substring, mos, search, found, finds, param, utils, find, implemented, ordinalindexof, pre, last, method, may, within, index_not_found, match, index, check, aabaabaa, str, stringutils, sequence, input, searchstr, char, handling, uses, lastindexof, ordinal, since, changed 


public static int lastOrdinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal) {
    return ordinalIndexOf(str, searchStr, ordinal, true);
}
### Py Tokens: map, updated, ordereddict, dictionary, end, link, dictsetitem, key, pair, ordered, linked, last, list, value, creates, item, setitem, setting, dict, inherited, new, root 

### Py functions

def __setitem__(self, key, value, dict_setitem=dict.__setitem__):



  if key not in self:
    root = self.__root
    last = root[0]
    last[1] = root[0] = self.__map[key] = [last, root, key]
  return dict_setitem(self, key, value)
*********************************

#### Score: 8.73972


#### Java Tokens: occurs, isempty, empty, mos, character, either, utils, find, inclusive, blockquote, pre, last, like, index_not_found, index, aabaabaa, ffff, sequence, input, xffff, unicode, lastindexof, returns, starting, updated, since, changed, largest, code, string, signature, values, link, range, units, codepointat, charsequence, specified, point, behave, search, searchchar, found, param, value, seq, charat, charsequenceutils, within, length, match, stringutils, call, char, returned 




public static int lastIndexOf(final CharSequence seq, final int searchChar) {
    if (isEmpty(seq)) {
        return INDEX_NOT_FOUND;
    }
    return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());
}
*********************************

#### Score: 6.81171


#### Java Tokens: occurs, isempty, empty, mos, character, either, utils, find, inclusive, blockquote, pre, like, index_not_found, index, check, aabaabaa, sequence, input, returns, updated, since, changed, code, string, signature, smallest, values, link, units, occurrence, codepointat, charsequence, specified, point, behave, search, searchchar, found, param, value, seq, charat, charsequenceutils, may, within, match, stringutils, call, furthermore, char, returned, indexof, first 




public static int indexOf(final CharSequence seq, final int searchChar) {
    if (isEmpty(seq)) {
        return INDEX_NOT_FOUND;
    }
    return CharSequenceUtils.indexOf(seq, searchChar, 0);
}
*********************************

#### Score: 6.68103


#### Java Tokens: given, using, string, lower-case, lower, torootlowercase, link, source, converts, manner, locale, stringutils, param, utils, root, tolowercase, safe, case, null-safe, since 


public static String toRootLowerCase(final String source) {
    return source == null ? null : source.toLowerCase(Locale.ROOT);
}
*********************************

#### Score: 6.68103


#### Java Tokens: given, using, string, upper, link, source, converts, manner, torootuppercase, locale, stringutils, upper-case, param, utils, root, safe, touppercase, case, null-safe, since 


public static String toRootUpperCase(final String source) {
    return source == null ? null : source.toUpperCase(Locale.ROOT);
}
*********************************

#### Score: 5.76915


#### Java Tokens: smaller, occurs, entire, isempty, empty, mos, zero, character, either, utils, find, represented, greater, always, treated, blockquote, pre, like, index_not_found, index, check, aabaabaa, searched, sequence, input, effect, restriction, unicode, returns, position, starting, updated, object, since, changed, code, string, signature, smallest, values, link, occurrence, units, codepointat, charsequence, startpos, specified, point, behave, search, negative, searchchar, found, pos, param, value, seq, charat, charsequenceutils, may, within, start, length, match, stringutils, equal, call, indices, furthermore, char, returned, indexof, first 


public static int indexOf(final CharSequence seq, final int searchChar, final int startPos) {
    if (isEmpty(seq)) {
        return INDEX_NOT_FOUND;
    }
    return CharSequenceUtils.indexOf(seq, searchChar, startPos);
}
*********************************

#### Score: 5.67854


#### Java Tokens: note, code, string, use, deprecated, foo, link, endswith, remove, substring, without, bar, foobar, trailing, feature, param, utils, ends, end, baz, perl, substringbeforelast, behavior, lang, pre, closely, method, previous, last, may, chomp, instead, separator, version, matches, str, stringutils, input, removed, foooo, removeend, uses, removes, changed 


@Deprecated
public static String chomp(final String str, final String separator) {
    return removeEnd(str, separator);
}
*********************************

#### Score: 5.06949


#### Java Tokens: note, code, string, eee, http://www.unicode.org/glossary/#supplementary_character, i--, link, needing, repeated, specified, empty, zero, characters, number, character, times, negative, see, param, utils, delimiter, www, repeat, supplementary, represented, href, consider, padding, given, treated, using, pre, method, org, length, require, instead, pair, i18n, stringutils, glossary, buf, http, unicode, returns, support, full, applications 


public static String repeat(final char ch, final int repeat) {
    if (repeat <= 0) {
        return EMPTY;
    }
    final char[] buf = new char[repeat];
    for (int i = repeat - 1; i >= 0; i--) {
        buf[i] = ch;
    }
    return new String(buf);
}
*********************************

#### Score: 4.97559


#### Java Tokens: exception, occurrences, repeats, stack, mostly, objects, upper, arrayutils, wcte, isempty, illegalstateexception, output, mos, java, utils, tcte, let, text, state, greater, replaceeach, dcte, still, goal, sure, method, index, circular, no-op, matches, input, size, guess, replacementlist, math, arrays, recursing, larger, illegalargumentexception, another, requests, recursive, example, result, search, see, min, found, strings, mos.search, get, builder, repl, protect, stackoverflowerror, nomorematchesforreplindex, aba, within, textlength, one, replaced, possible, stringutils, searchlength, buf, textindex, elements, logic, stringbuilder, outputs, argument, tempindex, inputs, replace, good, empty, reference, overflow, helper, major, loop, find, repeating, match:, replaceindex, create, replacements, buffer, ignored, repeatedly, pre, need, count, less, list, illegal, done, take, measure, replaceeachrepeatedly, keep, creates, know, timetolive, assume, replacement, since, next, note, replacementlength, code, string, searching, link, mchyzer, endless, upper-bound, error, duplicated, array, param, repeat, end, passed, track, make, live, charat, temp, abcde, bound, length, match, start, aborting, increase, earliest, equal, processed, performance, searchlist, lengths, due, corresponding, harness, time, indexof, tostring, append 


private static String replaceEach(final String text, final String[] searchList, final String[] replacementList, final boolean repeat, final int timeToLive) {
    if (isEmpty(text) || ArrayUtils.isEmpty(searchList) || ArrayUtils.isEmpty(replacementList)) {
        return text;
    }
    
    if (timeToLive < 0) {
        throw new IllegalStateException("Aborting to protect against StackOverflowError - " + "output of one loop is the input of another");
    }
    final int searchLength = searchList.length;
    final int replacementLength = replacementList.length;
    
    if (searchLength != replacementLength) {
        throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs " + replacementLength);
    }
    
    final boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];
    
    int textIndex = -1;
    int replaceIndex = -1;
    int tempIndex = -1;
    
    for (int i = 0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {
            continue;
        }
        tempIndex = text.indexOf(searchList[i]);
        
        if (tempIndex == -1) {
            noMoreMatchesForReplIndex[i] = true;
        } else {
            if (textIndex == -1 || tempIndex < textIndex) {
                textIndex = tempIndex;
                replaceIndex = i;
            }
        }
    }
    
    if (textIndex == -1) {
        return text;
    }
    int start = 0;
    
    int increase = 0;
    
    for (int i = 0; i < searchList.length; i++) {
        if (searchList[i] == null || replacementList[i] == null) {
            continue;
        }
        final int greater = replacementList[i].length() - searchList[i].length();
        if (greater > 0) {
            
            increase += 3 * greater;
        }
    }
    
    increase = Math.min(increase, text.length() / 5);
    final StringBuilder buf = new StringBuilder(text.length() + increase);
    while (textIndex != -1) {
        for (int i = start; i < textIndex; i++) {
            buf.append(text.charAt(i));
        }
        buf.append(replacementList[replaceIndex]);
        start = textIndex + searchList[replaceIndex].length();
        textIndex = -1;
        replaceIndex = -1;
        tempIndex = -1;
        
        for (int i = 0; i < searchLength; i++) {
            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {
                continue;
            }
            tempIndex = text.indexOf(searchList[i], start);
            
            if (tempIndex == -1) {
                noMoreMatchesForReplIndex[i] = true;
            } else {
                if (textIndex == -1 || tempIndex < textIndex) {
                    textIndex = tempIndex;
                    replaceIndex = i;
                }
            }
        }
    
    }
    final int textLength = text.length();
    for (int i = start; i < textLength; i++) {
        buf.append(text.charAt(i));
    }
    final String result = buf.toString();
    if (!repeat) {
        return result;
    }
    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);
}
*********************************

#### Score: 4.94397


#### Java Tokens: allow, forwards, thru, string, beyond, charsequence, search, found, utils, end, ordinalindexof, charsequenceutils, set, last, initial, index_not_found, length, index, backwards, str, stringutils, sequence, searchstr, lastindex, decrement, char, lastindexof, step, indexof, ordinal 



private static int ordinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal, final boolean lastIndex) {
    if (str == null || searchStr == null || ordinal <= 0) {
        return INDEX_NOT_FOUND;
    }
    if (searchStr.length() == 0) {
        return lastIndex ? str.length() : 0;
    }
    int found = 0;
    
    
    int index = lastIndex ? str.length() : INDEX_NOT_FOUND;
    do {
        if (lastIndex) {
            
            index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);
        } else {
            
            index = CharSequenceUtils.indexOf(str, searchStr, index + 1);
        }
        if (index < 0) {
            return index;
        }
        found++;
    } while (found < ordinal);
    return index;
}
*********************************

#### Score: 4.83459


#### Java Tokens: code, string, back, used, substring, specified, empty, remember, characters, negative, param, utils, get, end, avoiding, means, pre, abc, may, negatives, last, start, length, count, handle, many, gets, exceptions, str, stringutils, input, position 




public static String substring(final String str, int start) {
    if (str == null) {
        return null;
    }
    
    if (start < 0) {
        
        start = str.length() + start;
    }
    if (start < 0) {
        start = 0;
    }
    if (start > str.length()) {
        return EMPTY;
    }
    return str.substring(start);
}
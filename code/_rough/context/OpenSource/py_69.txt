### Py Tokens: preceded, return, string, int, preceding, sign, one, possibly, atoi, characters, represented, integer, accepted, must, digits, given, consist, chosen, leading, base, defaults, octal, hexadecimal 

### Py functions

def atoi(s , base=10):

  return _int(s, base)
*********************************

#### Score: 14.90419


#### Java Tokens: exception, leading, sign, integer, isempty, empty, numberformatexception, parseint, 12-3, number, character, either, u0967u0968u0969, utils, isdigit, generate, digit, still, pre, method, test, format, check, sequence, 12.3, contains, 123, checks, +123, outside, unicode, returns, parsed, decimal, since, changed, allow, note, code, string, signature, numeric, range, respectively, non, charsequence, point, long, negative, passes, param, value, charat, isnumeric, may, parselong, length, also, positive, parse, int, stringutils, -123, non-null, char, digits, ab2c 


public static boolean isNumeric(final CharSequence cs) {
    if (isEmpty(cs)) {
        return false;
    }
    final int sz = cs.length();
    for (int i = 0; i < sz; i++) {
        if (!Character.isDigit(cs.charAt(i))) {
            return false;
        }
    }
    return true;
}
*********************************

#### Score: 8.94452


#### Java Tokens: otherwise, given, emptytonull, code, nullable, string, test, nonempty, platform, empty, null, strings, param, returns, possibly 


@Nullable
public static String emptyToNull(@Nullable String string) {
    return Platform.emptyToNull(string);
}
*********************************

#### Score: 8.81908


#### Java Tokens: otherwise, given, code, string, nullable, test, non, platform, empty, non-null, strings, param, nulltoempty, returns, possibly 


public static String nullToEmpty(@Nullable String string) {
    return Platform.nullToEmpty(string);
}
*********************************

#### Score: 8.11951


#### Java Tokens: code, string, isolated, arrayutils, units, convert, codepointat, charsequence, point, pairs, points, empty, codepointcount, result, valid, character, high, array, low, param, utils, supplementary, surrogate, preceded, pre, charcount, length, count, index, converts, followed, empty_int_array, int, as-is, str, stringutils, single, sequence, converted, char, tocodepoints, returned, tostring, since 


public static int[] toCodePoints(final CharSequence str) {
    if (str == null) {
        return null;
    }
    if (str.length() == 0) {
        return ArrayUtils.EMPTY_INT_ARRAY;
    }
    final String s = str.toString();
    final int[] result = new int[s.codePointCount(0, s.length())];
    int index = 0;
    for (int i = 0; i < result.length; i++) {
        result[i] = s.codePointAt(index);
        index += Character.charCount(result[i]);
    }
    return result;
}
*********************************

#### Score: 7.77012


#### Java Tokens: exception, com, code, string, nullable, log, valueof, logger, another, integer, tohexstring, lenient, proguard, default, see, common, strings, identity, get, warning, create, hex, lenientformat, behavior, value, class, threw, getclass, identityhashcode, created, format, google, getlogger, getname, forcing, system, lenienttostring, inline, name, com.google.common.base.strings, fixed, avoid, objecttostring, tostring, hash, object, base 

private static String lenientToString(@Nullable Object o) {
    try {
        return String.valueOf(o);
    } catch (Exception e) {
        
        String objectToString = o.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(o));
        
        Logger.getLogger("com.google.common.base.Strings").log(WARNING, "Exception during lenientFormat for " + objectToString, e);
        return "<" + objectToString + " threw " + e.getClass().getName() + ">";
    }
}
*********************************

#### Score: 6.61177


#### Java Tokens: exception, software, release, deprecated, javadocs, insensitive, via, score, character, https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/similarity/fuzzyscore.html, utils, scanned, normalize, english, text, href, https, api, case, algorithm, similar, termlowercase, lower, querylowercase, index, matches, resulting, accept, commons-text, input, mate, turning, must, matched, algorithms, illegalargumentexception, fuzzyscore, querychar, foundation, two, charsequence, commons, matching, result, characters, min, found, strings, indicates, termchar, get, yield, tolowercase, subsequent, term, necessary, one, unfortunately, right, stringutils, min_value, asf, char, logic, atom, argument, bonus, use, textmate, simple, integer, nested, queryindex, points, either, apache, find, leave, loop, html, potential, others, given, pre, termcharactermatchfound, workshop, query, insufficient, illegal, sequence, improve, position, termindex, sublime, higher, full, since, next, code, distance, string, getfuzzydistance, proper, locale, point, previously, param, similarity, value, every, fuzzy, charat, editors, previousmatchingcharacterindex, previous, org, length, match, start, room, tostring 


@Deprecated
public static int getFuzzyDistance(final CharSequence term, final CharSequence query, final Locale locale) {
    if (term == null || query == null) {
        throw new IllegalArgumentException("Strings must not be null");
    } else if (locale == null) {
        throw new IllegalArgumentException("Locale must not be null");
    }
    
    
    
    
    final String termLowerCase = term.toString().toLowerCase(locale);
    final String queryLowerCase = query.toString().toLowerCase(locale);
    
    int score = 0;
    
    
    int termIndex = 0;
    
    int previousMatchingCharacterIndex = Integer.MIN_VALUE;
    for (int queryIndex = 0; queryIndex < queryLowerCase.length(); queryIndex++) {
        final char queryChar = queryLowerCase.charAt(queryIndex);
        boolean termCharacterMatchFound = false;
        for (; termIndex < termLowerCase.length() && !termCharacterMatchFound; termIndex++) {
            final char termChar = termLowerCase.charAt(termIndex);
            if (queryChar == termChar) {
                
                score++;
                
                if (previousMatchingCharacterIndex + 1 == termIndex) {
                    score += 2;
                }
                previousMatchingCharacterIndex = termIndex;
                
                
                termCharacterMatchFound = true;
            }
        }
    }
    return score;
}
*********************************

#### Score: 6.45851


#### Java Tokens: exception, argument, cdefghijkl, integer, source, bcdefghijk, good, empty, edge, truncate, abcdefghij, utils, else, truncates, specifically, greater, raspberry, pre, offset, like, specify, peach, less, illegal, klm, str, input, left, efghijklmn, must, since, maxwidth, illegalargumentexception, works, code, string, fgh, maxwith, turn, substring, result, characters, negative, min, param, men, value, allows, abc, may, max, fghij, length, abcdefghijklmno, fghijklmno, truncated, positive, stringutils, min_value, width, cannot, maximum, time, klmno, defghijklm, max_value 


public static String truncate(final String str, final int offset, final int maxWidth) {
    if (offset < 0) {
        throw new IllegalArgumentException("offset cannot be negative");
    }
    if (maxWidth < 0) {
        throw new IllegalArgumentException("maxWith cannot be negative");
    }
    if (str == null) {
        return null;
    }
    if (offset > str.length()) {
        return EMPTY;
    }
    if (str.length() > maxWidth) {
        final int ix = offset + maxWidth > str.length() ? str.length() : offset + maxWidth;
        return str.substring(offset, ix);
    }
    return str.substring(offset);
}
*********************************

#### Score: 5.83410


#### Java Tokens: note, code, string, eee, http://www.unicode.org/glossary/#supplementary_character, i--, link, needing, repeated, specified, empty, zero, characters, number, character, times, negative, see, param, utils, delimiter, www, repeat, supplementary, represented, href, consider, padding, given, treated, using, pre, method, org, length, require, instead, pair, i18n, stringutils, glossary, buf, http, unicode, returns, support, full, applications 


public static String repeat(final char ch, final int repeat) {
    if (repeat <= 0) {
        return EMPTY;
    }
    final char[] buf = new char[repeat];
    for (int i = repeat - 1; i >= 0; i--) {
        buf[i] = ch;
    }
    return new String(buf);
}
*********************************

#### Score: 5.72359


#### Java Tokens: exception, small, argument, used, ab.., good, number, utils, else, max-abbrevmarker, specifically, greater, defined, given, using, pre, abcd., abbrevmarker, less, check, illegal, str, input, marker, must, abbrev, replacement, since, maxwidth, illegalargumentexception, code, string, another, least, turn, abbreviates, substring, result, characters, param, men, for..., a.., abbreviate, may, max, length, ..., abcd, stringutils, equal, width, maximum, time, abcdefg, abbreviated 


public static String abbreviate(final String str, final String abbrevMarker, final int maxWidth) {
    return abbreviate(str, abbrevMarker, 0, maxWidth);
}
*********************************

#### Score: 5.46746


#### Java Tokens: exception, uppercase, splits, gettype, rules, type, number, character, bar, split, java, camel, utils, lowercase_letter, case, pre, splitbycharactertypecamelcase, splitbycharactertype, foo200bar, str, input, 200, following, letter, parsed, contiguous, since, code, belong, string, rather, foo, asfrules, immediately, ab:cd:ef, number5, characters, foobar, strings, param, array, get, tokens, lang, lowercase, may, groups, uppercase_letter, token, stringutils, asf, preceding, returned, complete 


public static String[] splitByCharacterTypeCamelCase(final String str) {
    return splitByCharacterType(str, true);
}
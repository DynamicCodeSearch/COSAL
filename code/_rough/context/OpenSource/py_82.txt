### Py Tokens: formatter, long, key, get, int, isinstance, value, getvalue 

### Py functions

def get_value(self, key, args, kwargs):
  if isinstance(key, (int, long)):
    return args[key]
  else:
    return kwargs[key]
*********************************

#### Score: 7.55760


#### Java Tokens: exception, leading, sign, integer, isempty, empty, numberformatexception, parseint, 12-3, number, character, either, u0967u0968u0969, utils, isdigit, generate, digit, still, pre, method, test, format, check, sequence, 12.3, contains, 123, checks, +123, outside, unicode, returns, parsed, decimal, since, changed, allow, note, code, string, signature, numeric, range, respectively, non, charsequence, point, long, negative, passes, param, value, charat, isnumeric, may, parselong, length, also, positive, parse, int, stringutils, -123, non-null, char, digits, ab2c 


public static boolean isNumeric(final CharSequence cs) {
    if (isEmpty(cs)) {
        return false;
    }
    final int sz = cs.length();
    for (int i = 0; i < sz; i++) {
        if (!Character.isDigit(cs.charAt(i))) {
            return false;
        }
    }
    return true;
}
*********************************

#### Score: 4.19627


#### Java Tokens: exception, code, string, isempty, charsequence, thread-safety, empty, either, see, defaultsupplier, bat, param, utils, safety, get, supplier, responsible, passed, value, defaultstrsupplier, pre, may, supplied, kind, getifempty, thread, check, specific, str, stringutils, sequence, input, caller, null, defaultstring, char, returns, handling, since 


public static <T extends CharSequence> T getIfEmpty(final T str, final Supplier<T> defaultSupplier) {
    return isEmpty(str) ? defaultSupplier == null ? null : defaultSupplier.get() : str;
}
*********************************

#### Score: 3.95994


#### Java Tokens: exception, com, code, string, nullable, log, valueof, logger, another, integer, tohexstring, lenient, proguard, default, see, common, strings, identity, get, warning, create, hex, lenientformat, behavior, value, class, threw, getclass, identityhashcode, created, format, google, getlogger, getname, forcing, system, lenienttostring, inline, name, com.google.common.base.strings, fixed, avoid, objecttostring, tostring, hash, object, base 

private static String lenientToString(@Nullable Object o) {
    try {
        return String.valueOf(o);
    } catch (Exception e) {
        
        String objectToString = o.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(o));
        
        Logger.getLogger("com.google.common.base.Strings").log(WARNING, "Exception during lenientFormat for " + objectToString, e);
        return "<" + objectToString + " threw " + e.getClass().getName() + ">";
    }
}
*********************************

#### Score: 3.95994


#### Java Tokens: exception, blank, code, string, link, charsequence, thread-safety, empty, either, character, see, defaultsupplier, bat, param, utils, safety, get, supplier, responsible, passed, value, defined, defaultstrsupplier, pre, may, supplied, kind, getifblank, isblank, thread, check, specific, str, stringutils, sequence, input, caller, null, defaultstring, char, returns, handling, whitespace, iswhitespace, since 


public static <T extends CharSequence> T getIfBlank(final T str, final Supplier<T> defaultSupplier) {
    return isBlank(str) ? defaultSupplier == null ? null : defaultSupplier.get() : str;
}
*********************************

#### Score: 3.71150


#### Java Tokens: code, string, isolated, arrayutils, units, convert, codepointat, charsequence, point, pairs, points, empty, codepointcount, result, valid, character, high, array, low, param, utils, supplementary, surrogate, preceded, pre, charcount, length, count, index, converts, followed, empty_int_array, int, as-is, str, stringutils, single, sequence, converted, char, tocodepoints, returned, tostring, since 


public static int[] toCodePoints(final CharSequence str) {
    if (str == null) {
        return null;
    }
    if (str.length() == 0) {
        return ArrayUtils.EMPTY_INT_ARRAY;
    }
    final String s = str.toString();
    final int[] result = new int[s.codePointCount(0, s.length())];
    int index = 0;
    for (int i = 0; i < result.length; i++) {
        result[i] = s.codePointAt(index);
        index += Character.charCount(result[i]);
    }
    return result;
}
*********************************

#### Score: 3.13928


#### Java Tokens: 4.000, eager, gwt, padchar, reach, zero, pad, character, copies, java, always, check, resulting, formatter, input, null, util, padded, reached, returns, must, formatting, minlength, code, string, beginning, checknotnull, least, link, 2010, padend, example, result, see, negative, min, strings, appended, param, builder, end, set, capabilities, necessary, length, many, consisting, appear, richer, char, stringbuilder, returned, tostring, minimum, append 


public static String padEnd(String string, int minLength, char padChar) {
    
    checkNotNull(string);
    if (string.length() >= minLength) {
        return string;
    }
    StringBuilder sb = new StringBuilder(minLength);
    sb.append(string);
    for (int i = string.length(); i < minLength; i++) {
        sb.append(padChar);
    }
    return sb.toString();
}
*********************************

#### Score: 3.08714


#### Java Tokens: eager, gwt, padchar, reach, zero, pad, character, copies, java, always, check, resulting, formatter, input, null, util, padded, 007, reached, returns, must, formatting, padstart, prepended, minlength, code, string, beginning, checknotnull, least, link, insert, 2010, example, result, see, negative, min, strings, param, builder, end, set, capabilities, necessary, start, length, many, consisting, appear, richer, char, stringbuilder, returned, tostring, minimum, append 


public static String padStart(String string, int minLength, char padChar) {
    
    checkNotNull(string);
    if (string.length() >= minLength) {
        return string;
    }
    StringBuilder sb = new StringBuilder(minLength);
    for (int i = string.length(); i < minLength; i++) {
        sb.append(padChar);
    }
    sb.append(string);
    return sb.toString();
}
*********************************

#### Score: 2.94423


#### Java Tokens: css, indexofdifference, exceeding, vary, nulls, arrayutils, integer, empty, robot, len, utils, find, loop, xyz, allstringsnull, stringpos, shorteststrlen, shortest, pre, longeststrlen, comparison, sure, index_not_found, avoids, bottom, containing, index, diff, handle, arraypos, str, sequence, entries, null, lists, difference, returns, math, position, begin, since, changed, firstdiff, checking, longest, code, string, signature, sequences, charsequence, example, across, characters, found, min, strings, array, pos, param, get, value, comparisonchar, abxyz, make, charat, anystringnull, compared, abc, may, max, abcde, length, arraylen, charsequences, compares, differ, stringutils, equal, lengths, machine, char, time, getlength, first, max_value 


public static int indexOfDifference(final CharSequence... css) {
    if (ArrayUtils.getLength(css) <= 1) {
        return INDEX_NOT_FOUND;
    }
    boolean anyStringNull = false;
    boolean allStringsNull = true;
    final int arrayLen = css.length;
    int shortestStrLen = Integer.MAX_VALUE;
    int longestStrLen = 0;
    
    for (final CharSequence cs : css) {
        if (cs == null) {
            anyStringNull = true;
            shortestStrLen = 0;
        } else {
            allStringsNull = false;
            shortestStrLen = Math.min(cs.length(), shortestStrLen);
            longestStrLen = Math.max(cs.length(), longestStrLen);
        }
    }
    
    if (allStringsNull || longestStrLen == 0 && !anyStringNull) {
        return INDEX_NOT_FOUND;
    }
    
    if (shortestStrLen == 0) {
        return 0;
    }
    
    int firstDiff = -1;
    for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {
        final char comparisonChar = css[0].charAt(stringPos);
        for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {
            if (css[arrayPos].charAt(stringPos) != comparisonChar) {
                firstDiff = stringPos;
                break;
            }
        }
        if (firstDiff != -1) {
            break;
        }
    }
    if (firstDiff == -1 && shortestStrLen != longestStrLen) {
        
        return shortestStrLen;
    }
    return firstDiff;
}
*********************************

#### Score: 2.90052


#### Java Tokens: exception, code, string, available, substring, without, required, empty, characters, negative, len, param, utils, get, pre, abc, may, length, gets, str, stringutils, input, leftmost, left, returned 




public static String left(final String str, final int len) {
    if (str == null) {
        return null;
    }
    if (len < 0) {
        return EMPTY;
    }
    if (str.length() <= len) {
        return str;
    }
    return str.substring(0, len);
}
*********************************

#### Score: 2.90052


#### Java Tokens: exception, code, string, available, substring, without, required, empty, characters, negative, len, param, utils, get, rightmost, pre, abc, may, length, right, gets, str, stringutils, input, returned 


public static String right(final String str, final int len) {
    if (str == null) {
        return null;
    }
    if (len < 0) {
        return EMPTY;
    }
    if (str.length() <= len) {
        return str;
    }
    return str.substring(str.length() - len);
}
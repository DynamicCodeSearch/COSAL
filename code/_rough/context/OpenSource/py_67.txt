### Py Tokens: return, notation, int, within, interpreted, substring, failure, highest, optional, index, slice, end, sub, rfind, start, contained, arguments, found 

### Py functions

def rfind(s, *args):

  return s.rfind(*args)
*********************************

#### Score: 9.11182


#### Java Tokens: joins, ;;a, noofitems, added, use, objects, empty, iterator, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, index, list, separator, input, endindex, null, stop, items, since, sub, joining, code, a;b;c, string, provided, values, error, strings, array, param, end, together, abc, may, within, joined, start, stringutils, single, startindex, sublist, elements, first 


public static String join(final List<?> list, final char separator, final int startIndex, final int endIndex) {
    if (list == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final List<?> subList = list.subList(startIndex, endIndex);
    return join(subList.iterator(), separator);
}
*********************************

#### Score: 9.11182


#### Java Tokens: joins, ;;a, noofitems, added, use, objects, empty, iterator, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, index, list, separator, input, endindex, null, stop, items, since, sub, joining, code, a;b;c, string, provided, values, error, strings, array, param, end, together, abc, may, within, joined, start, stringutils, single, startindex, sublist, elements, first 


public static String join(final List<?> list, final String separator, final int startIndex, final int endIndex) {
    if (list == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final List<?> subList = list.subList(startIndex, endIndex);
    return join(subList.iterator(), separator);
}
*********************************

#### Score: 8.98342


#### Java Tokens: code, string, yabczyabcz, yabcz, substringbetween, nested, two, wx[b]yz, substring, empty, found, strings, param, utils, end, close, pre, abc, may, index_not_found, containing, start, length, match, index, gets, str, stringutils, input, returns, returned, indexof, open, first, since 




public static String substringBetween(final String str, final String open, final String close) {
    if (str == null || open == null || close == null) {
        return null;
    }
    final int start = str.indexOf(open);
    if (start != INDEX_NOT_FOUND) {
        final int end = str.indexOf(close, start + open.length());
        if (end != INDEX_NOT_FOUND) {
            return str.substring(start + open.length(), end);
        }
    }
    return null;
}
*********************************

#### Score: 8.41022


#### Java Tokens: larger, occurrences, sub, code, string, signature, counts, appears, isempty, abba, charsequence, substring, empty, number, times, either, found, param, utils, charsequenceutils, pre, may, index_not_found, count, length, index, check, many, matches, str, stringutils, sequence, input, char, xxx, returns, idx, indexof, countmatches, since, changed 




public static int countMatches(final CharSequence str, final CharSequence sub) {
    if (isEmpty(str) || isEmpty(sub)) {
        return 0;
    }
    int count = 0;
    int idx = 0;
    while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND) {
        count++;
        idx += sub.length();
    }
    return count;
}
*********************************

#### Score: 7.89001


#### Java Tokens: empty, zero, mos, utils, find, limit, greater, case, always, regionmatches, treated, pre, index_not_found, index, in-sensitive, sensitive, check, matches, aabaabaa, str, sequence, input, position, region, since, changed, code, string, signature, indexofignorecase, endlimit, charsequence, startpos, specified, search, negative, found, pos, param, ignore, end, charsequenceutils, abc, may, within, start, length, match, stringutils, searchstr, char, first 


public static int indexOfIgnoreCase(final CharSequence str, final CharSequence searchStr, int startPos) {
    if (str == null || searchStr == null) {
        return INDEX_NOT_FOUND;
    }
    if (startPos < 0) {
        startPos = 0;
    }
    final int endLimit = str.length() - searchStr.length() + 1;
    if (startPos > endLimit) {
        return INDEX_NOT_FOUND;
    }
    if (searchStr.length() == 0) {
        return startPos;
    }
    for (int i = startPos; i < endLimit; i++) {
        if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}
*********************************

#### Score: 7.78071


#### Java Tokens: code, string, abcyx, link, stripped, isempty, substring, strips, remove, empty, characters, character, strip, found, param, utils, xyz, end, charat, defined, treated, pre, set, abc, may, index_not_found, length, index, 120.00, str, stringutils, input, stripchars, end--, returns, whitespace, stripend, iswhitespace, indexof, chars 


public static String stripEnd(final String str, final String stripChars) {
    int end = length(str);
    if (end == 0) {
        return str;
    }
    if (stripChars == null) {
        while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {
            end--;
        }
    } else if (stripChars.isEmpty()) {
        return str;
    } else {
        while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND) {
            end--;
        }
    }
    return str.substring(0, end);
}
*********************************

#### Score: 7.67400


#### Java Tokens: occurrences, code, string, queued, qeed, source, isempty, remove, substring, empty, mos, character, search, found, tochararray, array, pos, param, utils, pre, may, within, index_not_found, length, index, str, stringutils, input, removed, char, removes, indexof, chars, since 


public static String remove(final String str, final char remove) {
    if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {
        return str;
    }
    final char[] chars = str.toCharArray();
    int pos = 0;
    for (int i = 0; i < chars.length; i++) {
        if (chars[i] != remove) {
            chars[pos++] = chars[i];
        }
    }
    return new String(chars, 0, pos);
}
*********************************

#### Score: 7.23664


#### Java Tokens: template, string, nullable, valueof, placeholders, run, lenient, braces, strings, extra, builder, lenientformat, placeholder, value, (object[])null, placeholderstart, format, length, start, index, substituting, args, square, lenienttostring, templatestart, arguments, stringbuilder, indexof, tostring, append, object 



public static String lenientFormat(@Nullable String template, @Nullable Object@Nullable ... args) {
    
    template = String.valueOf(template);
    if (args == null) {
        args = new Object[] { "(Object[])null" };
    } else {
        for (int i = 0; i < args.length; i++) {
            args[i] = lenientToString(args[i]);
        }
    }
    
    StringBuilder builder = new StringBuilder(template.length() + 16 * args.length);
    int templateStart = 0;
    int i = 0;
    while (i < args.length) {
        int placeholderStart = template.indexOf("%s", templateStart);
        if (placeholderStart == -1) {
            break;
        }
        builder.append(template, templateStart, placeholderStart);
        builder.append(args[i++]);
        templateStart = placeholderStart + 2;
    }
    builder.append(template, templateStart, template.length());
    
    if (i < args.length) {
        builder.append(" [");
        builder.append(args[i++]);
        while (i < args.length) {
            builder.append(", ");
            builder.append(args[i++]);
        }
        builder.append(']');
    }
    return builder.toString();
}
*********************************

#### Score: 7.19782


#### Java Tokens: n-th, note, code, string, signature, link, lastordinalindexof, charsequence, substring, mos, search, found, finds, param, utils, find, implemented, ordinalindexof, pre, last, method, may, within, index_not_found, match, index, check, aabaabaa, str, stringutils, sequence, input, searchstr, char, handling, uses, lastindexof, ordinal, since, changed 


public static int lastOrdinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal) {
    return ordinalIndexOf(str, searchStr, ordinal, true);
}
*********************************

#### Score: 7.19318


#### Java Tokens: unwraps, baa, string, nul, charutils, used, isempty, substring, unwrap, empty, quoted, properly, character, param, utils, end, ababcba, charat, aababcbaa, given, pre, abc, original, length, start, index, unwrapped, babc, str, stringutils, wrapchar, endindex, startindex, char, wrap, 'abc', since 


public static String unwrap(final String str, final char wrapChar) {
    if (isEmpty(str) || wrapChar == CharUtils.NUL || str.length() == 1) {
        return str;
    }
    if (str.charAt(0) == wrapChar && str.charAt(str.length() - 1) == wrapChar) {
        final int startIndex = 0;
        final int endIndex = str.length() - 1;
        return str.substring(startIndex + 1, endIndex);
    }
    return str;
}
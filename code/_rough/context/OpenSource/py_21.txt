### Py Tokens: set, ordered, like, keys, object, viewkeys, dict, keysview, ordereddict, providing, view 

### Py functions

def viewkeys(self):

  return KeysView(self)
*********************************

#### Score: 7.13143


#### Java Tokens: joins, providing, code, string, added, use, provided, values, link, iterable, empty, iterator, see, character, param, utils, delimiter, join, together, treated, may, containing, joined, list, separator, stringutils, single, input, examples, elements, object, since 


public static String join(final Iterable<?> iterable, final String separator) {
    if (iterable == null) {
        return null;
    }
    return join(iterable.iterator(), separator);
}
*********************************

#### Score: 6.75155


#### Java Tokens: joins, providing, code, string, added, use, provided, objects, values, link, iterable, empty, iterator, see, character, strings, param, utils, delimiter, iteration, represented, join, together, may, within, containing, joined, list, separator, stringutils, single, input, null, examples, elements, object, since 


public static String join(final Iterable<?> iterable, final char separator) {
    if (iterable == null) {
        return null;
    }
    return join(iterable.iterator(), separator);
}
*********************************

#### Score: 5.62611


#### Java Tokens: exception, joins, sanitizedseparator, argument, added, use, objects, empty, iterator, character, java, utils, delimiter, a,b,, join, hasnext, varargs, treated, pre, sanitized, containing, list, separator, illegal, defaultstring, must, arrays, object, since, next, illegalargumentexception, providing, code, string, provided, values, a,,b, result, strings, param, a,b, builder, lang, aslist, value, together, joined, stringutils, single, joinwith, elements, stringbuilder, tostring, append 


public static String joinWith(final String separator, final Object... objects) {
    if (objects == null) {
        throw new IllegalArgumentException("Object varargs must not be null");
    }
    final String sanitizedSeparator = defaultString(separator);
    final StringBuilder result = new StringBuilder();
    final Iterator<Object> iterator = Arrays.asList(objects).iterator();
    while (iterator.hasNext()) {
        final String value = Objects.toString(iterator.next(), "");
        result.append(value);
        if (iterator.hasNext()) {
            result.append(sanitizedSeparator);
        }
    }
    return result.toString();
}
*********************************

#### Score: 5.02791


#### Java Tokens: plane, zzabyycdxx, arrayutils, containsany, isempty, empty, searchlast, zero, mos, character, high, fine, utils, ishighsurrogate, given, pre, last, like, index, check, sequence, input, contains, checks, searchchars, basic, since, changed, code, string, signature, charsequence, characters, search, found, array, param, low, missing, cslength, surrogate, charat, multilingual, aba, set, may, length, match, cslast, stringutils, searchlength, char, indexof, chars 




public static boolean containsAny(final CharSequence cs, final char... searchChars) {
    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
        return false;
    }
    final int csLength = cs.length();
    final int searchLength = searchChars.length;
    final int csLast = csLength - 1;
    final int searchLast = searchLength - 1;
    for (int i = 0; i < csLength; i++) {
        final char ch = cs.charAt(i);
        for (int j = 0; j < searchLength; j++) {
            if (searchChars[j] == ch) {
                if (Character.isHighSurrogate(ch)) {
                    if (j == searchLast) {
                        
                        return true;
                    }
                    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
                        return true;
                    }
                } else {
                    
                    return true;
                }
            }
        }
    }
    return false;
}
*********************************

#### Score: 4.23399


#### Java Tokens: smaller, occurs, entire, isempty, empty, mos, zero, character, either, utils, find, represented, greater, always, treated, blockquote, pre, like, index_not_found, index, check, aabaabaa, searched, sequence, input, effect, restriction, unicode, returns, position, starting, updated, object, since, changed, code, string, signature, smallest, values, link, occurrence, units, codepointat, charsequence, startpos, specified, point, behave, search, negative, searchchar, found, pos, param, value, seq, charat, charsequenceutils, may, within, start, length, match, stringutils, equal, call, indices, furthermore, char, returned, indexof, first 


public static int indexOf(final CharSequence seq, final int searchChar, final int startPos) {
    if (isEmpty(seq)) {
        return INDEX_NOT_FOUND;
    }
    return CharSequenceUtils.indexOf(seq, searchChar, startPos);
}
*********************************

#### Score: 3.88989


#### Java Tokens: template, string, nullable, valueof, placeholders, run, lenient, braces, strings, extra, builder, lenientformat, placeholder, value, (object[])null, placeholderstart, format, length, start, index, substituting, args, square, lenienttostring, templatestart, arguments, stringbuilder, indexof, tostring, append, object 



public static String lenientFormat(@Nullable String template, @Nullable Object@Nullable ... args) {
    
    template = String.valueOf(template);
    if (args == null) {
        args = new Object[] { "(Object[])null" };
    } else {
        for (int i = 0; i < args.length; i++) {
            args[i] = lenientToString(args[i]);
        }
    }
    
    StringBuilder builder = new StringBuilder(template.length() + 16 * args.length);
    int templateStart = 0;
    int i = 0;
    while (i < args.length) {
        int placeholderStart = template.indexOf("%s", templateStart);
        if (placeholderStart == -1) {
            break;
        }
        builder.append(template, templateStart, placeholderStart);
        builder.append(args[i++]);
        templateStart = placeholderStart + 2;
    }
    builder.append(template, templateStart, template.length());
    
    if (i < args.length) {
        builder.append(" [");
        builder.append(args[i++]);
        while (i < args.length) {
            builder.append(", ");
            builder.append(args[i++]);
        }
        builder.append(']');
    }
    return builder.toString();
}
*********************************

#### Score: 3.35058


#### Java Tokens: pre, code, string, may, valueof, objectutils, check, empty, str, stringutils, either, see, bat, param, utils, defaultstring, returns, passed, tostring, value, object 


public static String defaultString(final String str) {
    return defaultString(str, EMPTY);
}
*********************************

#### Score: 3.29118


#### Java Tokens: code, {@link, emptytonull, nullable, string, references, use, methods, converting, upper, link, {@code, isempty, platform, null},, empty, reference, either, strings, param, #emptytonull}., consider, case, direction, given, method, isnullorempty, like, check, instead, null, normalizing, stringisnullorempty, nulltoempty, returns, touppercase 


public static boolean isNullOrEmpty(@Nullable String string) {
    return Platform.stringIsNullOrEmpty(string);
}
*********************************

#### Score: 3.27022


#### Java Tokens: pre, defaultstr, code, string, may, valueof, objectutils, check, str, stringutils, input, either, see, null, bat, param, utils, defaultstring, returns, passed, value, tostring, object 


public static String defaultString(final String str, final String defaultStr) {
    return str == null ? defaultStr : str;
}
*********************************

#### Score: 3.18924


#### Java Tokens: allow, forwards, thru, string, beyond, charsequence, search, found, utils, end, ordinalindexof, charsequenceutils, set, last, initial, index_not_found, length, index, backwards, str, stringutils, sequence, searchstr, lastindex, decrement, char, lastindexof, step, indexof, ordinal 



private static int ordinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal, final boolean lastIndex) {
    if (str == null || searchStr == null || ordinal <= 0) {
        return INDEX_NOT_FOUND;
    }
    if (searchStr.length() == 0) {
        return lastIndex ? str.length() : 0;
    }
    int found = 0;
    
    
    int index = lastIndex ? str.length() : INDEX_NOT_FOUND;
    do {
        if (lastIndex) {
            
            index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);
        } else {
            
            index = CharSequenceUtils.indexOf(str, searchStr, index + 1);
        }
        if (index < 0) {
            return index;
        }
        found++;
    } while (found < ordinal);
    return index;
}
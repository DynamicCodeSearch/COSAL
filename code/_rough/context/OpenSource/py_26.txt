### Py Tokens: count, elements, missing, counter, keyerror, item, zero, key, error, needed 

### Py functions

def __missing__(self, key):


  return 0
*********************************

#### Score: 5.26283


#### Java Tokens: use, used, empty, zero, character, utils, exclusive, avoiding, starts, greater, counting, based, pre, negatives, specify, count, positions, handle, check, exceptions, str, input, left, zero-based, position, relative, next, code, string, beginning, back, substring, specified, remember, characters, negative, param, ends, get, end, means, abc, may, start, length, many, gets, strictly, stringutils, offsets, returned 


public static String substring(final String str, int start, int end) {
    if (str == null) {
        return null;
    }
    
    if (end < 0) {
        
        end = str.length() + end;
    }
    if (start < 0) {
        
        start = str.length() + start;
    }
    
    if (end > str.length()) {
        end = str.length();
    }
    
    if (start > end) {
        return EMPTY;
    }
    if (start < 0) {
        start = 0;
    }
    if (end < 0) {
        end = 0;
    }
    return str.substring(start, end);
}
*********************************

#### Score: 5.12088


#### Java Tokens: exception, argument, eager, gwt, large:, integer, repeated, required, empty, zero, number, copies, checkargument, len, longsize, hey, large, containing, count, index, heyheyhey, check, illegal, benchmark, input, system, null, size, invalid, bounds, returns, must, illegalargumentexception, getchars, code, string, stringsrepeatbenchmark, checknotnull, count:, update, arrayindexoutofboundsexception, non, example, times, negative, concatenated, strings, array, param, arraycopy, repeat, get, length, nonnegative, specific, non-null, consisting, modify, chars 


public static String repeat(String string, int count) {
    
    checkNotNull(string);
    if (count <= 1) {
        checkArgument(count >= 0, "invalid count: %s", count);
        return (count == 0) ? "" : string;
    }
    
    final int len = string.length();
    final long longSize = (long) len * (long) count;
    final int size = (int) longSize;
    if (size != longSize) {
        throw new ArrayIndexOutOfBoundsException("Required array size too large: " + longSize);
    }
    final char[] array = new char[size];
    string.getChars(0, len, array, 0);
    int n;
    for (n = len; n < size - n; n <<= 1) {
        System.arraycopy(array, 0, array, n, n);
    }
    System.arraycopy(array, 0, array, n, size - n);
    return new String(array);
}
*********************************

#### Score: 4.85385


#### Java Tokens: plane, zzabyycdxx, arrayutils, containsany, isempty, empty, searchlast, zero, mos, character, high, fine, utils, ishighsurrogate, given, pre, last, like, index, check, sequence, input, contains, checks, searchchars, basic, since, changed, code, string, signature, charsequence, characters, search, found, array, param, low, missing, cslength, surrogate, charat, multilingual, aba, set, may, length, match, cslast, stringutils, searchlength, char, indexof, chars 




public static boolean containsAny(final CharSequence cs, final char... searchChars) {
    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
        return false;
    }
    final int csLength = cs.length();
    final int searchLength = searchChars.length;
    final int csLast = csLength - 1;
    final int searchLast = searchLength - 1;
    for (int i = 0; i < csLength; i++) {
        final char ch = cs.charAt(i);
        for (int j = 0; j < searchLength; j++) {
            if (searchChars[j] == ch) {
                if (Character.isHighSurrogate(ch)) {
                    if (j == searchLast) {
                        
                        return true;
                    }
                    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
                        return true;
                    }
                } else {
                    
                    return true;
                }
            }
        }
    }
    return false;
}
*********************************

#### Score: 4.09927


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final byte[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 4.09927


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final char[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 4.09927


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final double[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 4.09927


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final float[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 4.09927


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final int[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 4.09927


#### Java Tokens: joins, ;;a, noofitems, added, use, objects, empty, iterator, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, index, list, separator, input, endindex, null, stop, items, since, sub, joining, code, a;b;c, string, provided, values, error, strings, array, param, end, together, abc, may, within, joined, start, stringutils, single, startindex, sublist, elements, first 


public static String join(final List<?> list, final char separator, final int startIndex, final int endIndex) {
    if (list == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final List<?> subList = list.subList(startIndex, endIndex);
    return join(subList.iterator(), separator);
}
*********************************

#### Score: 4.09927


#### Java Tokens: joins, ;;a, noofitems, added, use, objects, empty, iterator, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, index, list, separator, input, endindex, null, stop, items, since, sub, joining, code, a;b;c, string, provided, values, error, strings, array, param, end, together, abc, may, within, joined, start, stringutils, single, startindex, sublist, elements, first 


public static String join(final List<?> list, final String separator, final int startIndex, final int endIndex) {
    if (list == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final List<?> subList = list.subList(startIndex, endIndex);
    return join(subList.iterator(), separator);
}
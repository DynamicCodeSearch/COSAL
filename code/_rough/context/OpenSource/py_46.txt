### Py Tokens: multimap, key, getitem, error, secondary, primary, keyerror 

### Py functions

def __getitem__(self, key):
  try:
    return self._primary[key]
  except KeyError:
    return self._secondary[key]
*********************************

#### Score: 2.28085


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final byte[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 2.28085


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final char[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 2.28085


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final double[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 2.28085


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final float[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 2.28085


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final int[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 2.28085


#### Java Tokens: joins, ;;a, noofitems, added, use, objects, empty, iterator, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, index, list, separator, input, endindex, null, stop, items, since, sub, joining, code, a;b;c, string, provided, values, error, strings, array, param, end, together, abc, may, within, joined, start, stringutils, single, startindex, sublist, elements, first 


public static String join(final List<?> list, final char separator, final int startIndex, final int endIndex) {
    if (list == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final List<?> subList = list.subList(startIndex, endIndex);
    return join(subList.iterator(), separator);
}
*********************************

#### Score: 2.28085


#### Java Tokens: joins, ;;a, noofitems, added, use, objects, empty, iterator, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, index, list, separator, input, endindex, null, stop, items, since, sub, joining, code, a;b;c, string, provided, values, error, strings, array, param, end, together, abc, may, within, joined, start, stringutils, single, startindex, sublist, elements, first 


public static String join(final List<?> list, final String separator, final int startIndex, final int endIndex) {
    if (list == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final List<?> subList = list.subList(startIndex, endIndex);
    return join(subList.iterator(), separator);
}
*********************************

#### Score: 2.28085


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final long[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 2.28085


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final short[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 2.20811


#### Java Tokens: joins, ;;a, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, endindex, null, stop, items, object, since, joining, a;b;c, code, string, provided, values, error, strings, array, param, builder, end, together, abc, may, within, joined, start, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final Object[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    if (array[startIndex] != null) {
        buf.append(array[startIndex]);
    }
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        if (array[i] != null) {
            buf.append(array[i]);
        }
    }
    return buf.toString();
}
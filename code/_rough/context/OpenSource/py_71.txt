### Py Tokens: used, return, string, truncated, never, padded, spaces, specified, ljust, needed, field, fillchar, width, version, instead, justified, left 

### Py functions

def ljust(s, width, *args):

  return s.ljust(width, *args)
*********************************

#### Score: 13.53955


#### Java Tokens: padding, leftpad, pre, code, original, string, may, necessary, str, stringutils, input, pad, size, padded, bat, left, param, utils, spaces 


public static String leftPad(final String str, final int size) {
    return leftPad(str, size, ' ');
}
*********************************

#### Score: 9.69070


#### Java Tokens: padding, pre, code, original, string, may, necessary, right, rightpad, str, stringutils, input, pad, size, padded, bat, param, utils, spaces 


public static String rightPad(final String str, final int size) {
    return rightPad(str, size, ' ');
}
*********************************

#### Score: 9.34493


#### Java Tokens: code, string, padchar, valueof, specified, pad, character, bat, param, utils, repeat, limit, value, padding, leftpad, pre, original, may, necessary, zzbat, length, concat, possible, str, stringutils, input, size, pads, padded, left, char, returns, zzz, pad_limit, since 


public static String leftPad(final String str, final int size, final char padChar) {
    if (str == null) {
        return null;
    }
    final int pads = size - str.length();
    if (pads <= 0) {
        
        return str;
    }
    if (pads > PAD_LIMIT) {
        return leftPad(str, size, String.valueOf(padChar));
    }
    return repeat(padChar, pads).concat(str);
}
*********************************

#### Score: 8.50497


#### Java Tokens: code, string, padlen, isempty, space, substring, specified, empty, strlen, pad, tochararray, len, bat, array, param, utils, limit, padstr, charat, padding, treated, leftpad, padchars, pre, original, may, necessary, length, concat, possible, yzyzybat, str, stringutils, single, input, size, pads, padded, left, yzbat, char, returns, zzz, pad_limit, chars 


public static String leftPad(final String str, final int size, String padStr) {
    if (str == null) {
        return null;
    }
    if (isEmpty(padStr)) {
        padStr = SPACE;
    }
    final int padLen = padStr.length();
    final int strLen = str.length();
    final int pads = size - strLen;
    if (pads <= 0) {
        
        return str;
    }
    if (padLen == 1 && pads <= PAD_LIMIT) {
        return leftPad(str, size, padStr.charAt(0));
    }
    if (pads == padLen) {
        return padStr.concat(str);
    } else if (pads < padLen) {
        return padStr.substring(0, pads).concat(str);
    } else {
        final char[] padding = new char[pads];
        final char[] padChars = padStr.toCharArray();
        for (int i = 0; i < pads; i++) {
            padding[i] = padChars[i % padLen];
        }
        return new String(padding).concat(str);
    }
}
*********************************

#### Score: 8.44364


#### Java Tokens: exception, argument, cdefghijkl, integer, source, bcdefghijk, good, empty, edge, truncate, abcdefghij, utils, else, truncates, specifically, greater, raspberry, pre, offset, like, specify, peach, less, illegal, klm, str, input, left, efghijklmn, must, since, maxwidth, illegalargumentexception, works, code, string, fgh, maxwith, turn, substring, result, characters, negative, min, param, men, value, allows, abc, may, max, fghij, length, abcdefghijklmno, fghijklmno, truncated, positive, stringutils, min_value, width, cannot, maximum, time, klmno, defghijklm, max_value 


public static String truncate(final String str, final int offset, final int maxWidth) {
    if (offset < 0) {
        throw new IllegalArgumentException("offset cannot be negative");
    }
    if (maxWidth < 0) {
        throw new IllegalArgumentException("maxWith cannot be negative");
    }
    if (str == null) {
        return null;
    }
    if (offset > str.length()) {
        return EMPTY;
    }
    if (str.length() > maxWidth) {
        final int ix = offset + maxWidth > str.length() ? str.length() : offset + maxWidth;
        return str.substring(offset, ix);
    }
    return str.substring(offset);
}
*********************************

#### Score: 7.72814


#### Java Tokens: exception, maxwidth, illegalargumentexception, argument, code, string, turn, good, substring, result, characters, truncate, param, utils, else, men, truncates, specifically, greater, pre, may, max, length, truncated, less, positive, illegal, abcd, str, stringutils, input, width, maximum, abcdef, must, time, abcdefg, since 


public static String truncate(final String str, final int maxWidth) {
    return truncate(str, 0, maxWidth);
}
*********************************

#### Score: 7.13522


#### Java Tokens: use, used, empty, zero, character, utils, exclusive, avoiding, starts, greater, counting, based, pre, negatives, specify, count, positions, handle, check, exceptions, str, input, left, zero-based, position, relative, next, code, string, beginning, back, substring, specified, remember, characters, negative, param, ends, get, end, means, abc, may, start, length, many, gets, strictly, stringutils, offsets, returned 


public static String substring(final String str, int start, int end) {
    if (str == null) {
        return null;
    }
    
    if (end < 0) {
        
        end = str.length() + end;
    }
    if (start < 0) {
        
        start = str.length() + start;
    }
    
    if (end > str.length()) {
        end = str.length();
    }
    
    if (start > end) {
        return EMPTY;
    }
    if (start < 0) {
        start = 0;
    }
    if (end < 0) {
        end = 0;
    }
    return str.substring(start, end);
}
*********************************

#### Score: 6.31075


#### Java Tokens: exception, small, argument, ghijklmno, ...is, abbrevmarkerlength, !ghijklmno, used, source, isempty, good, somewhere, ---, empty, minabbrevwidthoffset, edge, character, abcdefghij, utils, abcdefg---, greater, defined, given, isnotempty, using, pre, offset, like, going, format, specify, abbrevmarker, check, illegal, str, input, left, marker, following, ...ghij..., must, abbrev, replacement, 'ghijklmno, abra, since, note, maxwidth, illegalargumentexception, works, code, string, efghij, ::efghij::, least, turn, abbreviates, substring, necessarily, result, min, param, abcdefghi,, men, for..., allows, abbreviate, may, max, length, abcdefghi, abcdefghijklmno, abbreviation, ..., stringutils, appear, leftmost, ghij, equals, *ghijklmno, width, maximum, time, minabbrevwidth, minimum, abcdefg, abbreviated, first 


public static String abbreviate(final String str, final String abbrevMarker, int offset, final int maxWidth) {
    if (isEmpty(str) && isEmpty(abbrevMarker)) {
        return str;
    } else if (isNotEmpty(str) && EMPTY.equals(abbrevMarker) && maxWidth > 0) {
        return str.substring(0, maxWidth);
    } else if (isEmpty(str) || isEmpty(abbrevMarker)) {
        return str;
    }
    final int abbrevMarkerLength = abbrevMarker.length();
    final int minAbbrevWidth = abbrevMarkerLength + 1;
    final int minAbbrevWidthOffset = abbrevMarkerLength + abbrevMarkerLength + 1;
    if (maxWidth < minAbbrevWidth) {
        throw new IllegalArgumentException(String.format("Minimum abbreviation width is %d", minAbbrevWidth));
    }
    if (str.length() <= maxWidth) {
        return str;
    }
    if (offset > str.length()) {
        offset = str.length();
    }
    if (str.length() - offset < maxWidth - abbrevMarkerLength) {
        offset = str.length() - (maxWidth - abbrevMarkerLength);
    }
    if (offset <= abbrevMarkerLength + 1) {
        return str.substring(0, maxWidth - abbrevMarkerLength) + abbrevMarker;
    }
    if (maxWidth < minAbbrevWidthOffset) {
        throw new IllegalArgumentException(String.format("Minimum abbreviation width with offset is %d", minAbbrevWidthOffset));
    }
    if (offset + maxWidth - abbrevMarkerLength < str.length()) {
        return abbrevMarker + abbreviate(str.substring(offset), abbrevMarker, maxWidth - abbrevMarkerLength);
    }
    return abbrevMarker + str.substring(str.length() - (maxWidth - abbrevMarkerLength));
}
*********************************

#### Score: 6.19660


#### Java Tokens: code, string, padchar, valueof, batzz, specified, rightpad, pad, character, bat, param, utils, repeat, limit, value, padding, pre, original, may, necessary, length, right, concat, possible, str, stringutils, input, size, pads, padded, char, returns, zzz, pad_limit, since 


public static String rightPad(final String str, final int size, final char padChar) {
    if (str == null) {
        return null;
    }
    final int pads = size - str.length();
    if (pads <= 0) {
        
        return str;
    }
    if (pads > PAD_LIMIT) {
        return rightPad(str, size, String.valueOf(padChar));
    }
    return str.concat(repeat(padChar, pads));
}
*********************************

#### Score: 6.17617


#### Java Tokens: note, code, string, use, deprecated, foo, link, endswith, remove, substring, without, bar, foobar, trailing, feature, param, utils, ends, end, baz, perl, substringbeforelast, behavior, lang, pre, closely, method, previous, last, may, chomp, instead, separator, version, matches, str, stringutils, input, removed, foooo, removeend, uses, removes, changed 


@Deprecated
public static String chomp(final String str, final String separator) {
    return removeEnd(str, separator);
}
### Py Tokens: comparison, ordereddict, mapping, order, insensitive, sensitive, regular, dict, another, ordered, isinstance, imap 

### Py functions

def __eq__(self, other):

  if isinstance(other, OrderedDict):
    return dict.__eq__(self, other) and all(_imap(_eq, self, other))
  return dict.__eq__(self, other)
*********************************

#### Score: 7.56973


#### Java Tokens: cs1, strong, cs2, code, string, references, signature, considered, sequences, two, charsequence, without, second, characters, see, wise, param, utils, ignore, equalsignorecase, charat, case, case-sensitive, pre, comparison, abc, may, length, step-wise, sensitive, charsequences, compares, exceptions, stringutils, equal, sequence, returning, equals, handled, char, step, first, represent, since, changed, object 




public static boolean equals(final CharSequence cs1, final CharSequence cs2) {
    if (cs1 == cs2) {
        return true;
    }
    if (cs1 == null || cs2 == null) {
        return false;
    }
    if (cs1.length() != cs2.length()) {
        return false;
    }
    if (cs1 instanceof String && cs2 instanceof String) {
        return cs1.equals(cs2);
    }
    
    final int length = cs1.length();
    for (int i = 0; i < length; i++) {
        if (cs1.charAt(i) != cs2.charAt(i)) {
            return false;
        }
    }
    return true;
}
*********************************

#### Score: 7.38324


#### Java Tokens: ignorecase, sensitively, replace, insensitive, inside, isempty, empty, mos, reference, number, utils, text, replacements, case, otherwise, pre, method, index_not_found, lower, index, sensitive, no-op, abaa, input, replacement, larger, code, string, another, values, indexofignorecase, zbzz, search, found, param, tolowercase, builder, ignore, end, repl, passed, may, max, replaces, start, length, increase, stringutils, zbaa, processed, repllength, buf, zbza, maximum, stringbuilder, indexof, tostring, append, first, searchstring 


private static String replace(final String text, String searchString, final String replacement, int max, final boolean ignoreCase) {
    if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {
        return text;
    }
    if (ignoreCase) {
        searchString = searchString.toLowerCase();
    }
    int start = 0;
    int end = ignoreCase ? indexOfIgnoreCase(text, searchString, start) : indexOf(text, searchString, start);
    if (end == INDEX_NOT_FOUND) {
        return text;
    }
    final int replLength = searchString.length();
    int increase = replacement.length() - replLength;
    increase = increase < 0 ? 0 : increase;
    increase *= max < 0 ? 16 : max > 64 ? 64 : max;
    final StringBuilder buf = new StringBuilder(text.length() + increase);
    while (end != INDEX_NOT_FOUND) {
        buf.append(text, start, end).append(replacement);
        start = end + replLength;
        if (--max == 0) {
            break;
        }
        end = ignoreCase ? indexOfIgnoreCase(text, searchString, start) : indexOf(text, searchString, start);
    }
    buf.append(text, start, text.length());
    return buf.toString();
}
*********************************

#### Score: 7.29246


#### Java Tokens: startswith, code, string, references, signature, prefix, considered, two, charsequence, specified, without, see, java, param, utils, find, starts, lang, pre, comparison, abc, may, check, sensitive, exceptions, str, stringutils, equal, sequence, handled, char, abcdef, since, changed 


public static boolean startsWith(final CharSequence str, final CharSequence prefix) {
    return startsWith(str, prefix, false);
}
*********************************

#### Score: 7.21292


#### Java Tokens: code, string, references, def, signature, considered, endswith, suffix, two, charsequence, specified, without, see, java, param, utils, find, ends, lang, pre, comparison, may, cde, check, sensitive, exceptions, str, stringutils, equal, sequence, handled, char, abcdef, since, changed 


public static boolean endsWith(final CharSequence str, final CharSequence suffix) {
    return endsWith(str, suffix, false);
}
*********************************

#### Score: 7.12167


#### Java Tokens: cs1, strong, cs2, code, string, references, signature, considered, case-insensitive, insensitive, sequences, ignoring, two, charsequence, without, second, characters, see, param, utils, ignore, equalsignorecase, case, charsequenceutils, regionmatches, pre, comparison, abc, may, length, matches, charsequences, compares, exceptions, stringutils, equal, sequence, returning, equals, handled, char, region, first, represent, since, changed 


public static boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence cs2) {
    if (cs1 == cs2) {
        return true;
    }
    if (cs1 == null || cs2 == null) {
        return false;
    }
    if (cs1.length() != cs2.length()) {
        return false;
    }
    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, cs1.length());
}
*********************************

#### Score: 6.61631


#### Java Tokens: startswith, code, string, references, signature, prefix, considered, insensitive, two, charsequence, specified, without, see, java, param, utils, find, ignore, starts, lang, case, pre, comparison, abc, startswithignorecase, may, check, exceptions, str, stringutils, equal, sequence, handled, char, abcdef, since, changed 


public static boolean startsWithIgnoreCase(final CharSequence str, final CharSequence prefix) {
    return startsWith(str, prefix, true);
}
*********************************

#### Score: 6.54683


#### Java Tokens: code, string, references, def, signature, considered, insensitive, endswith, suffix, two, charsequence, specified, without, see, java, param, utils, find, ends, endswithignorecase, ignore, lang, case, pre, comparison, may, cde, check, exceptions, str, stringutils, equal, sequence, handled, char, abcdef, since, changed 


public static boolean endsWithIgnoreCase(final CharSequence str, final CharSequence suffix) {
    return endsWith(str, suffix, true);
}
*********************************

#### Score: 6.47887


#### Java Tokens: compare, code, compareignorecase, string, references, considered, differences, link, insensitive, respectively, ignoring, non, two, see, strings, param, str1, utils, str2, ignore, per, greater, value, case, blockquote, pre, comparison, abc, less, version, comparetoignorecase, str, stringutils, equal, lexicographically, non-, returning, safe, since 


public static int compareIgnoreCase(final String str1, final String str2) {
    return compareIgnoreCase(str1, str2, true);
}
*********************************

#### Score: 6.04161


#### Java Tokens: compare, code, compareignorecase, string, references, inputs, considered, differences, link, according, insensitive, respectively, ignoring, non, two, see, strings, param, str1, utils, whether, str2, parameter, ignore, consider, per, greater, value, case, blockquote, pre, nullisless, comparison, abc, less, version, comparetoignorecase, str, stringutils, equal, lexicographically, non-, returning, handled, safe, since 


public static int compareIgnoreCase(final String str1, final String str2, final boolean nullIsLess) {
    if (str1 == str2) {
        return 0;
    }
    if (str1 == null) {
        return nullIsLess ? -1 : 1;
    }
    if (str2 == null) {
        return nullIsLess ? 1 : -1;
    }
    return str1.compareToIgnoreCase(str2);
}
*********************************

#### Score: 6.03003


#### Java Tokens: occurrences, code, string, another, replace, insensitive, reference, mos, search, see, zbz, param, utils, ignore, text, passed, replacements, case, replaceignorecase, aba, pre, method, may, within, max, replaces, insensitively, no-op, stringutils, processed, input, replacement, searchstring, since 


public static String replaceIgnoreCase(final String text, final String searchString, final String replacement) {
    return replaceIgnoreCase(text, searchString, replacement, -1);
}
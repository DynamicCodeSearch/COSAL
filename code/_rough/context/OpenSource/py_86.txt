### Py Tokens: parse, formatter, formatterparser, string, format, parser, formatstring 

### Py functions

def parse(self, format_string):
  return format_string._formatter_parser()
*********************************

#### Score: 5.11060


#### Java Tokens: exception, leading, sign, integer, isempty, empty, numberformatexception, parseint, 12-3, number, character, either, u0967u0968u0969, utils, isdigit, generate, digit, still, pre, method, test, format, check, sequence, 12.3, contains, 123, checks, +123, outside, unicode, returns, parsed, decimal, since, changed, allow, note, code, string, signature, numeric, range, respectively, non, charsequence, point, long, negative, passes, param, value, charat, isnumeric, may, parselong, length, also, positive, parse, int, stringutils, -123, non-null, char, digits, ab2c 


public static boolean isNumeric(final CharSequence cs) {
    if (isEmpty(cs)) {
        return false;
    }
    final int sz = cs.length();
    for (int i = 0; i < sz; i++) {
        if (!Character.isDigit(cs.charAt(i))) {
            return false;
        }
    }
    return true;
}
*********************************

#### Score: 4.07702


#### Java Tokens: template, string, nullable, valueof, placeholders, run, lenient, braces, strings, extra, builder, lenientformat, placeholder, value, (object[])null, placeholderstart, format, length, start, index, substituting, args, square, lenienttostring, templatestart, arguments, stringbuilder, indexof, tostring, append, object 



public static String lenientFormat(@Nullable String template, @Nullable Object@Nullable ... args) {
    
    template = String.valueOf(template);
    if (args == null) {
        args = new Object[] { "(Object[])null" };
    } else {
        for (int i = 0; i < args.length; i++) {
            args[i] = lenientToString(args[i]);
        }
    }
    
    StringBuilder builder = new StringBuilder(template.length() + 16 * args.length);
    int templateStart = 0;
    int i = 0;
    while (i < args.length) {
        int placeholderStart = template.indexOf("%s", templateStart);
        if (placeholderStart == -1) {
            break;
        }
        builder.append(template, templateStart, placeholderStart);
        builder.append(args[i++]);
        templateStart = placeholderStart + 2;
    }
    builder.append(template, templateStart, template.length());
    
    if (i < args.length) {
        builder.append(" [");
        builder.append(args[i++]);
        while (i < args.length) {
            builder.append(", ");
            builder.append(args[i++]);
        }
        builder.append(']');
    }
    return builder.toString();
}
*********************************

#### Score: 3.54247


#### Java Tokens: exception, com, code, string, nullable, log, valueof, logger, another, integer, tohexstring, lenient, proguard, default, see, common, strings, identity, get, warning, create, hex, lenientformat, behavior, value, class, threw, getclass, identityhashcode, created, format, google, getlogger, getname, forcing, system, lenienttostring, inline, name, com.google.common.base.strings, fixed, avoid, objecttostring, tostring, hash, object, base 

private static String lenientToString(@Nullable Object o) {
    try {
        return String.valueOf(o);
    } catch (Exception e) {
        
        String objectToString = o.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(o));
        
        Logger.getLogger("com.google.common.base.Strings").log(WARNING, "Exception during lenientFormat for " + objectToString, e);
        return "<" + objectToString + " threw " + e.getClass().getName() + ">";
    }
}
*********************************

#### Score: 3.39353


#### Java Tokens: splits, code, string, def, use, provided, link, character, split, strings, array, param, utils, text, included, strtokenizer, defined, treated, using, pre, abc, may, one, adjacent, control, parse, separator, tokenizer, str, stringutils, input, returns, parsed, whitespace, returned, iswhitespace, separators 




public static String[] split(final String str) {
    return split(str, null, -1);
}
*********************************

#### Score: 3.35951


#### Java Tokens: ab-!-cd-!-ef, splits, code, string, provided, whole, used, specified, ab:cd:ef, split, strings, array, param, utils, delimiter, -!-, text, worker, included, treated, pre, may, containing, one, splitbywholeseparator, adjacent, parse, separator, splitbywholeseparatorworker, str, stringutils, input, returns, parsed, returned, whitespace, separators 


public static String[] splitByWholeSeparator(final String str, final String separator) {
    return splitByWholeSeparatorWorker(str, separator, -1, false);
}
*********************************

#### Score: 3.29987


#### Java Tokens: 4.000, eager, gwt, padchar, reach, zero, pad, character, copies, java, always, check, resulting, formatter, input, null, util, padded, reached, returns, must, formatting, minlength, code, string, beginning, checknotnull, least, link, 2010, padend, example, result, see, negative, min, strings, appended, param, builder, end, set, capabilities, necessary, length, many, consisting, appear, richer, char, stringbuilder, returned, tostring, minimum, append 


public static String padEnd(String string, int minLength, char padChar) {
    
    checkNotNull(string);
    if (string.length() >= minLength) {
        return string;
    }
    StringBuilder sb = new StringBuilder(minLength);
    sb.append(string);
    for (int i = string.length(); i < minLength; i++) {
        sb.append(padChar);
    }
    return sb.toString();
}
*********************************

#### Score: 3.24479


#### Java Tokens: eager, gwt, padchar, reach, zero, pad, character, copies, java, always, check, resulting, formatter, input, null, util, padded, 007, reached, returns, must, formatting, padstart, prepended, minlength, code, string, beginning, checknotnull, least, link, insert, 2010, example, result, see, negative, min, strings, param, builder, end, set, capabilities, necessary, start, length, many, consisting, appear, richer, char, stringbuilder, returned, tostring, minimum, append 


public static String padStart(String string, int minLength, char padChar) {
    
    checkNotNull(string);
    if (string.length() >= minLength) {
        return string;
    }
    StringBuilder sb = new StringBuilder(minLength);
    for (int i = string.length(); i < minLength; i++) {
        sb.append(padChar);
    }
    sb.append(string);
    return sb.toString();
}
*********************************

#### Score: 3.17011


#### Java Tokens: a:b:c, splits, code, string, use, provided, used, specified, character, split, strings, splitworker, array, param, utils, delimiter, text, worker, included, strtokenizer, treated, using, pre, may, one, a.b.c, alternative, stringtokenizer, separatorchar, adjacent, control, parse, separator, tokenizer, str, stringutils, input, a..b.c, char, returns, parsed, returned, separators, since 


public static String[] split(final String str, final char separatorChar) {
    return splitWorker(str, separatorChar, false);
}
*********************************

#### Score: 3.17011


#### Java Tokens: splits, code, string, def, separatorchars, use, provided, used, specified, ab:cd:ef, characters, split, strings, splitworker, array, param, utils, delimiters, text, worker, included, strtokenizer, treated, using, pre, abc, may, one, alternative, stringtokenizer, adjacent, control, parse, separator, tokenizer, str, stringutils, input, returns, parsed, returned, whitespace, separators, chars 


public static String[] split(final String str, final String separatorChars) {
    return splitWorker(str, separatorChars, -1, false);
}
*********************************

#### Score: 3.17011


#### Java Tokens: ab-!-cd-!-ef, splits, code, string, use, provided, whole, used, splitbywholeseparatorpreservealltokens, specified, ab:cd:ef, empty, split, strings, array, param, utils, delimiter, -!-, tokens, text, worker, included, strtokenizer, treated, pre, may, containing, adjacent, control, preserve, parse, separator, splitbywholeseparatorworker, tokenizer, str, stringutils, input, returns, parsed, returned, whitespace, separators, since 


public static String[] splitByWholeSeparatorPreserveAllTokens(final String str, final String separator) {
    return splitByWholeSeparatorWorker(str, separator, -1, true);
}
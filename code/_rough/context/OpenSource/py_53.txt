### Py Tokens: named, unicode, braced, use, keyerror, mapping, escaped, non, invalid, key, instead, fail, ascii, none, group, val, pattern, latter, value, containing, idiom, delimiter, unrecognized, template, error, str, convert, valueerror 

### Py functions

def convert(mo):
  named = mo.group('named') or mo.group('braced')
  if named is not None:
    try:


      return '%s' % (mapping[named],)
    except KeyError:
      return mo.group()
  if mo.group('escaped') is not None:
    return self.delimiter
  if mo.group('invalid') is not None:
    return mo.group()
  raise ValueError('Unrecognized named group in pattern',
                   self.pattern)
*********************************

#### Score: 10.59291


#### Java Tokens: note, \p{incombiningdiacriticalmarks}+, string, pattern, replace, convert, non, empty, characters, strip, compile, utils, stripaccents, normalize, builder, non-nls-1, convertremainingaccentcharacters, diacritical, decomposed, accents, combining, marks, matcher, replaceall, nfd, accent, remaining, stringutils, input, incombiningdiacriticalmarks, normalizer, form, nls, stringbuilder 



public static String stripAccents(final String input) {
    if (input == null) {
        return null;
    }
    
    final Pattern pattern = Pattern.compile("\\p{InCombiningDiacriticalMarks}+");
    final StringBuilder decomposed = new StringBuilder(Normalizer.normalize(input, Normalizer.Form.NFD));
    convertRemainingAccentCharacters(decomposed);
    
    return pattern.matcher(decomposed).replaceAll(EMPTY);
}
*********************************

#### Score: 10.10772


#### Java Tokens: code, string, values, non-empty, non, charsequence, empty, safevarargs, array, param, utils, xyz, varargs, value, val, isnotempty, pre, abc, test, may, firstnonempty, kind, specific, stringutils, sequence, safe, char, returns, returned, first, since 


@SafeVarargs
public static <T extends CharSequence> T firstNonEmpty(final T... values) {
    if (values != null) {
        for (final T val : values) {
            if (isNotEmpty(val)) {
                return val;
            }
        }
    }
    return null;
}
*********************************

#### Score: 9.53707


#### Java Tokens: blank, code, string, values, link, non, non-blank, charsequence, empty, character, safevarargs, array, param, utils, xyz, varargs, firstnonblank, value, defined, val, pre, abc, test, may, kind, specific, isnotblank, stringutils, sequence, safe, char, returns, whitespace, returned, iswhitespace, first, since 


@SafeVarargs
public static <T extends CharSequence> T firstNonBlank(final T... values) {
    if (values != null) {
        for (final T val : values) {
            if (isNotBlank(val)) {
                return val;
            }
        }
    }
    return null;
}
*********************************

#### Score: 8.99663


#### Java Tokens: charsetname, exception, charset, named, code, string, use, deprecated, link, platform, unsupported, param, array, utils, constants, defaultcharset, pointer, read, converts, encoding, instead, nullpointerexception, stringutils, input, null, bytes, name, toencodedstring, tostring, unsupportedencodingexception, supported, encoded, since 


@Deprecated
public static String toString(final byte[] bytes, final String charsetName) throws UnsupportedEncodingException {
    return charsetName != null ? new String(bytes, charsetName) : new String(bytes, Charset.defaultCharset());
}
*********************************

#### Score: 7.94929


#### Java Tokens: exception, argument, eager, gwt, large:, integer, repeated, required, empty, zero, number, copies, checkargument, len, longsize, hey, large, containing, count, index, heyheyhey, check, illegal, benchmark, input, system, null, size, invalid, bounds, returns, must, illegalargumentexception, getchars, code, string, stringsrepeatbenchmark, checknotnull, count:, update, arrayindexoutofboundsexception, non, example, times, negative, concatenated, strings, array, param, arraycopy, repeat, get, length, nonnegative, specific, non-null, consisting, modify, chars 


public static String repeat(String string, int count) {
    
    checkNotNull(string);
    if (count <= 1) {
        checkArgument(count >= 0, "invalid count: %s", count);
        return (count == 0) ? "" : string;
    }
    
    final int len = string.length();
    final long longSize = (long) len * (long) count;
    final int size = (int) longSize;
    if (size != longSize) {
        throw new ArrayIndexOutOfBoundsException("Required array size too large: " + longSize);
    }
    final char[] array = new char[size];
    string.getChars(0, len, array, 0);
    int n;
    for (n = len; n < size - n; n <<= 1) {
        System.arraycopy(array, 0, array, n, n);
    }
    System.arraycopy(array, 0, array, n, size - n);
    return new String(array);
}
*********************************

#### Score: 7.32331


#### Java Tokens: ab-!-cd-!-ef, splits, use, whole, used, splitbywholeseparatorpreservealltokens, substrings, cd-!-ef, empty, zero, number, split, utils, delimiter, limit, -!-, text, worker, strtokenizer, treated, pre, containing, preserve, separator, splitbywholeseparatorworker, str, input, returns, parsed, since, code, string, provided, specified, ab:cd:ef, negative, strings, array, param, tokens, included, value, include, may, max, adjacent, control, parse, tokenizer, stringutils, elements, maximum, cd:ef, returned, whitespace, implies, separators 


public static String[] splitByWholeSeparatorPreserveAllTokens(final String str, final String separator, final int max) {
    return splitByWholeSeparatorWorker(str, separator, max, true);
}
*********************************

#### Score: 7.27698


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final byte[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 7.27698


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final char[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 7.27698


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final double[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
*********************************

#### Score: 7.27698


#### Java Tokens: joins, noofitems, added, use, objects, empty, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, newstringbuilder, index, list, separator, input, 123, endindex, null, stop, items, since, joining, code, string, provided, values, error, strings, array, param, builder, end, together, may, within, joined, start, 1;2;3, stringutils, single, buf, startindex, elements, stringbuilder, tostring, append, first 


public static String join(final float[] array, final char separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    buf.append(array[startIndex]);
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        buf.append(array[i]);
    }
    return buf.toString();
}
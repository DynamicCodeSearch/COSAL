### Py Tokens: shallow, ordered, ordereddict, copy, dict 

### Py functions

def copy(self):

  return self.__class__(self)
*********************************

#### Score: 2.70213


#### Java Tokens: codepoint, capitalizes, changing, points, strlen, character, apache, len, utils, lang3, text, per, case, algorithm, based, pre, wordutils, offset, charcount, already, count, capitalize, remaining, str, input, longer, returns, word, changed, since, code, string, link, codepointat, title, newcodepoints, point, commons, newcodepoint, characters, see, param, array, cat, copy, lang, totitlecase, may, org, length, firstcodepoint, 'cat', stringutils, uncapitalize, capitalized, inoffset, cannot, ones, first, outoffset 


public static String capitalize(final String str) {
    int strLen = length(str);
    if (strLen == 0) {
        return str;
    }
    final int firstCodepoint = str.codePointAt(0);
    final int newCodePoint = Character.toTitleCase(firstCodepoint);
    if (firstCodepoint == newCodePoint) {
        
        return str;
    }
    
    final int[] newCodePoints = new int[strLen];
    int outOffset = 0;
    
    newCodePoints[outOffset++] = newCodePoint;
    for (int inOffset = Character.charCount(firstCodepoint); inOffset < strLen; ) {
        final int codepoint = str.codePointAt(inOffset);
        
        newCodePoints[outOffset++] = codepoint;
        inOffset += Character.charCount(codepoint);
    }
    return new String(newCodePoints, 0, outOffset);
}
*********************************

#### Score: 2.70213


#### Java Tokens: codepoint, uncapitalizes, changing, points, strlen, character, apache, len, utils, lang3, text, per, case, algorithm, based, pre, wordutils, offset, charcount, already, lower, count, capitalize, remaining, str, input, longer, returns, word, changed, since, code, string, link, codepointat, newcodepoints, point, commons, newcodepoint, characters, see, param, array, cat, tolowercase, copy, lang, may, org, length, firstcodepoint, stringutils, uncapitalize, capitalized, inoffset, cannot, ones, uncapitalized, first, outoffset 


public static String uncapitalize(final String str) {
    int strLen = length(str);
    if (strLen == 0) {
        return str;
    }
    final int firstCodepoint = str.codePointAt(0);
    final int newCodePoint = Character.toLowerCase(firstCodepoint);
    if (firstCodepoint == newCodePoint) {
        
        return str;
    }
    
    final int[] newCodePoints = new int[strLen];
    int outOffset = 0;
    
    newCodePoints[outOffset++] = newCodePoint;
    for (int inOffset = Character.charCount(firstCodepoint); inOffset < strLen; ) {
        final int codepoint = str.codePointAt(inOffset);
        
        newCodePoints[outOffset++] = codepoint;
        inOffset += Character.charCount(codepoint);
    }
    return new String(newCodePoints, 0, outOffset);
}
*********************************

#### Score: 1.37267


#### Java Tokens: exception, counts, javadocs, upper, gusfield, discussion, trees, character, would, sizes, utils, api, calculate, using, hippo, edit, commons-text, single-dimensional, input, size, left, difference, must, starting, illegalargumentexception, another, comes, turn, immediately, matrix, two, charsequence, example, result, see, current, min, found, jth, one, possible, right, stringutils, single, leftmost, indices, abs, decreases, returning, assist, needing, run, empty, compute, either, apache, swapped, swapping, loop, stripe, fills, ignored, pre, ensure, need, modification, suppose, iterations, http://www.merriampark.com/ld.htm, leads, allocating, http, elephant, subtlety, memory, distance, string, needed, changes, proper, back, negative, param, similarity, ignore, placeholder, charat, htm, org, bound, length, way, target, levenshteindistance, time, max_value, release, deprecated, usage, entire, number, deletion, tmp, https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/similarity/levenshteindistance.html, href, text, https, rightmost, greater, shorter, reduce, large, lower, forth, horizontally, following, math, arrays, requires, algorithms, iterates, doubling, getlevenshteindistance, consume, sequences, cell, commons, strings, top, computes, get, member, copy, t_j, table, may, max, change, lead, additionally, char, width, chas, minimum, first, com, argument, dimensional, minor, emerick, use, threshold, integer, aaapppp, second, dan, find, www, html, different, border, always, swap, merriampark, follows, less, constrain, fill, illegal, sequence, entry, entries, insertion, since, levenshtein, boundary, concrete, note, substitution, code, values, necessarily, running, computing, array, diagonally, unbounded, value, allows, cost, implementation, also, instead, diagonal 


@Deprecated
public static int getLevenshteinDistance(CharSequence s, CharSequence t, final int threshold) {
    if (s == null || t == null) {
        throw new IllegalArgumentException("Strings must not be null");
    }
    if (threshold < 0) {
        throw new IllegalArgumentException("Threshold must not be negative");
    }
    
    
    int n = s.length();
    
    int m = t.length();
    
    if (n == 0) {
        return m <= threshold ? m : -1;
    } else if (m == 0) {
        return n <= threshold ? n : -1;
    } else if (Math.abs(n - m) > threshold) {
        
        return -1;
    }
    if (n > m) {
        
        final CharSequence tmp = s;
        s = t;
        t = tmp;
        n = m;
        m = t.length();
    }
    
    int[] p = new int[n + 1];
    
    int[] d = new int[n + 1];
    
    int[] _d;
    
    final int boundary = Math.min(n, threshold) + 1;
    for (int i = 0; i < boundary; i++) {
        p[i] = i;
    }
    
    
    Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);
    Arrays.fill(d, Integer.MAX_VALUE);
    
    for (int j = 1; j <= m; j++) {
        
        final char t_j = t.charAt(j - 1);
        d[0] = j;
        
        final int min = Math.max(1, j - threshold);
        final int max = j > Integer.MAX_VALUE - threshold ? n : Math.min(n, j + threshold);
        
        if (min > max) {
            return -1;
        }
        
        if (min > 1) {
            d[min - 1] = Integer.MAX_VALUE;
        }
        
        for (int i = min; i <= max; i++) {
            if (s.charAt(i - 1) == t_j) {
                
                d[i] = p[i - 1];
            } else {
                
                d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);
            }
        }
        
        _d = p;
        p = d;
        d = _d;
    }
    
    if (p[n] <= threshold) {
        return p[n];
    }
    return -1;
}
*********************************

#### Score: 0.30047


#### Java Tokens: otherwise, given, code, string, nullable, test, non, platform, empty, non-null, strings, param, nulltoempty, returns, possibly 


public static String nullToEmpty(@Nullable String string) {
    return Platform.nullToEmpty(string);
}
*********************************

#### Score: 0.30047


#### Java Tokens: otherwise, given, emptytonull, code, nullable, string, test, nonempty, platform, empty, null, strings, param, returns, possibly 


@Nullable
public static String emptyToNull(@Nullable String string) {
    return Platform.emptyToNull(string);
}
*********************************

#### Score: 0.30047


#### Java Tokens: code, {@link, emptytonull, nullable, string, references, use, methods, converting, upper, link, {@code, isempty, platform, null},, empty, reference, either, strings, param, #emptytonull}., consider, case, direction, given, method, isnullorempty, like, check, instead, null, normalizing, stringisnullorempty, nulltoempty, returns, touppercase 


public static boolean isNullOrEmpty(@Nullable String string) {
    return Platform.stringIsNullOrEmpty(string);
}
*********************************

#### Score: 0.30047


#### Java Tokens: eager, gwt, padchar, reach, zero, pad, character, copies, java, always, check, resulting, formatter, input, null, util, padded, 007, reached, returns, must, formatting, padstart, prepended, minlength, code, string, beginning, checknotnull, least, link, insert, 2010, example, result, see, negative, min, strings, param, builder, end, set, capabilities, necessary, start, length, many, consisting, appear, richer, char, stringbuilder, returned, tostring, minimum, append 


public static String padStart(String string, int minLength, char padChar) {
    
    checkNotNull(string);
    if (string.length() >= minLength) {
        return string;
    }
    StringBuilder sb = new StringBuilder(minLength);
    for (int i = string.length(); i < minLength; i++) {
        sb.append(padChar);
    }
    sb.append(string);
    return sb.toString();
}
*********************************

#### Score: 0.30047


#### Java Tokens: 4.000, eager, gwt, padchar, reach, zero, pad, character, copies, java, always, check, resulting, formatter, input, null, util, padded, reached, returns, must, formatting, minlength, code, string, beginning, checknotnull, least, link, 2010, padend, example, result, see, negative, min, strings, appended, param, builder, end, set, capabilities, necessary, length, many, consisting, appear, richer, char, stringbuilder, returned, tostring, minimum, append 


public static String padEnd(String string, int minLength, char padChar) {
    
    checkNotNull(string);
    if (string.length() >= minLength) {
        return string;
    }
    StringBuilder sb = new StringBuilder(minLength);
    sb.append(string);
    for (int i = string.length(); i < minLength; i++) {
        sb.append(padChar);
    }
    return sb.toString();
}
*********************************

#### Score: 0.30047


#### Java Tokens: exception, argument, eager, gwt, large:, integer, repeated, required, empty, zero, number, copies, checkargument, len, longsize, hey, large, containing, count, index, heyheyhey, check, illegal, benchmark, input, system, null, size, invalid, bounds, returns, must, illegalargumentexception, getchars, code, string, stringsrepeatbenchmark, checknotnull, count:, update, arrayindexoutofboundsexception, non, example, times, negative, concatenated, strings, array, param, arraycopy, repeat, get, length, nonnegative, specific, non-null, consisting, modify, chars 


public static String repeat(String string, int count) {
    
    checkNotNull(string);
    if (count <= 1) {
        checkArgument(count >= 0, "invalid count: %s", count);
        return (count == 0) ? "" : string;
    }
    
    final int len = string.length();
    final long longSize = (long) len * (long) count;
    final int size = (int) longSize;
    if (size != longSize) {
        throw new ArrayIndexOutOfBoundsException("Required array size too large: " + longSize);
    }
    final char[] array = new char[size];
    string.getChars(0, len, array, 0);
    int n;
    for (n = len; n < size - n; n <<= 1) {
        System.arraycopy(array, 0, array, n, n);
    }
    System.arraycopy(array, 0, array, n, size - n);
    return new String(array);
}
*********************************

#### Score: 0.30047


#### Java Tokens: sub, startswith, longest, code, string, checknotnull, prefix, validsurrogatepairat, charsequence, pairs, empty, valid, p--, min, split, commonprefix, common, strings, surrogate, starts, charat, maxprefixlength, max, length, check, pair, subsequence, sequence, null, char, returns, math, tostring, taking, care, since 


public static String commonPrefix(CharSequence a, CharSequence b) {
    checkNotNull(a);
    checkNotNull(b);
    int maxPrefixLength = Math.min(a.length(), b.length());
    int p = 0;
    while (p < maxPrefixLength && a.charAt(p) == b.charAt(p)) {
        p++;
    }
    if (validSurrogatePairAt(a, p - 1) || validSurrogatePairAt(b, p - 1)) {
        p--;
    }
    return a.subSequence(0, p).toString();
}
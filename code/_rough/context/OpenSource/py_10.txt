### Py Tokens: values, ordered, iterator, itervalues, ordereddict, dict 

### Py functions

def itervalues(self):

  for k in self:
    yield self[k]
*********************************

#### Score: 6.12155


#### Java Tokens: joins, providing, code, string, added, use, provided, values, link, iterable, empty, iterator, see, character, param, utils, delimiter, join, together, treated, may, containing, joined, list, separator, stringutils, single, input, examples, elements, object, since 


public static String join(final Iterable<?> iterable, final String separator) {
    if (iterable == null) {
        return null;
    }
    return join(iterable.iterator(), separator);
}
*********************************

#### Score: 5.79783


#### Java Tokens: joins, providing, code, string, added, use, provided, objects, values, link, iterable, empty, iterator, see, character, strings, param, utils, delimiter, iteration, represented, join, together, may, within, containing, joined, list, separator, stringutils, single, input, null, examples, elements, object, since 


public static String join(final Iterable<?> iterable, final char separator) {
    if (iterable == null) {
        return null;
    }
    return join(iterable.iterator(), separator);
}
*********************************

#### Score: 5.10338


#### Java Tokens: joins, small, added, use, objects, building, empty, zero, iterator, character, java, utils, delimiter, string_builder_size, join, hasnext, buffer, treated, containing, handle, list, separator, input, size, examples, object, next, code, string, probably, provided, values, link, two, see, param, builder, together, may, joined, one, stringutils, single, buf, obj, elements, stringbuilder, tostring, first, append 


public static String join(final Iterator<?> iterator, final String separator) {
    
    if (iterator == null) {
        return null;
    }
    if (!iterator.hasNext()) {
        return EMPTY;
    }
    final Object first = iterator.next();
    if (!iterator.hasNext()) {
        return Objects.toString(first, "");
    }
    
    
    final StringBuilder buf = new StringBuilder(STRING_BUILDER_SIZE);
    if (first != null) {
        buf.append(first);
    }
    while (iterator.hasNext()) {
        if (separator != null) {
            buf.append(separator);
        }
        final Object obj = iterator.next();
        if (obj != null) {
            buf.append(obj);
        }
    }
    return buf.toString();
}
*********************************

#### Score: 5.01182


#### Java Tokens: joins, ;;a, noofitems, added, use, objects, empty, iterator, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, index, list, separator, input, endindex, null, stop, items, since, sub, joining, code, a;b;c, string, provided, values, error, strings, array, param, end, together, abc, may, within, joined, start, stringutils, single, startindex, sublist, elements, first 


public static String join(final List<?> list, final char separator, final int startIndex, final int endIndex) {
    if (list == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final List<?> subList = list.subList(startIndex, endIndex);
    return join(subList.iterator(), separator);
}
*********************************

#### Score: 5.01182


#### Java Tokens: joins, ;;a, noofitems, added, use, objects, empty, iterator, character, utils, delimiter, exclusive, represented, join, pre, pass, containing, past, index, list, separator, input, endindex, null, stop, items, since, sub, joining, code, a;b;c, string, provided, values, error, strings, array, param, end, together, abc, may, within, joined, start, stringutils, single, startindex, sublist, elements, first 


public static String join(final List<?> list, final String separator, final int startIndex, final int endIndex) {
    if (list == null) {
        return null;
    }
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final List<?> subList = list.subList(startIndex, endIndex);
    return join(subList.iterator(), separator);
}
*********************************

#### Score: 4.92368


#### Java Tokens: joins, small, added, use, objects, building, empty, zero, iterator, character, java, utils, delimiter, string_builder_size, represented, join, hasnext, buffer, containing, handle, list, separator, input, size, null, examples, object, since, next, code, string, probably, provided, values, link, two, see, strings, param, builder, iteration, together, may, within, joined, one, stringutils, single, buf, obj, elements, stringbuilder, tostring, first, append 


public static String join(final Iterator<?> iterator, final char separator) {
    
    if (iterator == null) {
        return null;
    }
    if (!iterator.hasNext()) {
        return EMPTY;
    }
    final Object first = iterator.next();
    if (!iterator.hasNext()) {
        return Objects.toString(first, EMPTY);
    }
    
    
    final StringBuilder buf = new StringBuilder(STRING_BUILDER_SIZE);
    if (first != null) {
        buf.append(first);
    }
    while (iterator.hasNext()) {
        buf.append(separator);
        final Object obj = iterator.next();
        if (obj != null) {
            buf.append(obj);
        }
    }
    return buf.toString();
}
*********************************

#### Score: 4.83878


#### Java Tokens: exception, joins, sanitizedseparator, argument, added, use, objects, empty, iterator, character, java, utils, delimiter, a,b,, join, hasnext, varargs, treated, pre, sanitized, containing, list, separator, illegal, defaultstring, must, arrays, object, since, next, illegalargumentexception, providing, code, string, provided, values, a,,b, result, strings, param, a,b, builder, lang, aslist, value, together, joined, stringutils, single, joinwith, elements, stringbuilder, tostring, append 


public static String joinWith(final String separator, final Object... objects) {
    if (objects == null) {
        throw new IllegalArgumentException("Object varargs must not be null");
    }
    final String sanitizedSeparator = defaultString(separator);
    final StringBuilder result = new StringBuilder();
    final Iterator<Object> iterator = Arrays.asList(objects).iterator();
    while (iterator.hasNext()) {
        final String value = Objects.toString(iterator.next(), "");
        result.append(value);
        if (iterator.hasNext()) {
            result.append(sanitizedSeparator);
        }
    }
    return result.toString();
}
*********************************

#### Score: 2.54722


#### Java Tokens: code, string, values, non-empty, non, charsequence, empty, safevarargs, array, param, utils, xyz, varargs, value, val, isnotempty, pre, abc, test, may, firstnonempty, kind, specific, stringutils, sequence, safe, char, returns, returned, first, since 


@SafeVarargs
public static <T extends CharSequence> T firstNonEmpty(final T... values) {
    if (values != null) {
        for (final T val : values) {
            if (isNotEmpty(val)) {
                return val;
            }
        }
    }
    return null;
}
*********************************

#### Score: 2.49551


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final byte[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
*********************************

#### Score: 2.49551


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final char[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
### Py Tokens: return, string, point, float, number, represented, floating, atof 

### Py functions

def atof(s):

  return _float(s)
*********************************

#### Score: 4.75631


#### Java Tokens: note, code, string, eee, http://www.unicode.org/glossary/#supplementary_character, i--, link, needing, repeated, specified, empty, zero, characters, number, character, times, negative, see, param, utils, delimiter, www, repeat, supplementary, represented, href, consider, padding, given, treated, using, pre, method, org, length, require, instead, pair, i18n, stringutils, glossary, buf, http, unicode, returns, support, full, applications 


public static String repeat(final char ch, final int repeat) {
    if (repeat <= 0) {
        return EMPTY;
    }
    final char[] buf = new char[repeat];
    for (int i = repeat - 1; i >= 0; i--) {
        buf[i] = ch;
    }
    return new String(buf);
}
*********************************

#### Score: 4.45413


#### Java Tokens: exception, leading, sign, integer, isempty, empty, numberformatexception, parseint, 12-3, number, character, either, u0967u0968u0969, utils, isdigit, generate, digit, still, pre, method, test, format, check, sequence, 12.3, contains, 123, checks, +123, outside, unicode, returns, parsed, decimal, since, changed, allow, note, code, string, signature, numeric, range, respectively, non, charsequence, point, long, negative, passes, param, value, charat, isnumeric, may, parselong, length, also, positive, parse, int, stringutils, -123, non-null, char, digits, ab2c 


public static boolean isNumeric(final CharSequence cs) {
    if (isEmpty(cs)) {
        return false;
    }
    final int sz = cs.length();
    for (int i = 0; i < sz; i++) {
        if (!Character.isDigit(cs.charAt(i))) {
            return false;
        }
    }
    return true;
}
*********************************

#### Score: 4.34583


#### Java Tokens: smaller, occurs, entire, isempty, empty, mos, zero, character, either, utils, find, represented, greater, always, treated, blockquote, pre, like, index_not_found, index, check, aabaabaa, searched, sequence, input, effect, restriction, unicode, returns, position, starting, updated, object, since, changed, code, string, signature, smallest, values, link, occurrence, units, codepointat, charsequence, startpos, specified, point, behave, search, negative, searchchar, found, pos, param, value, seq, charat, charsequenceutils, may, within, start, length, match, stringutils, equal, call, indices, furthermore, char, returned, indexof, first 


public static int indexOf(final CharSequence seq, final int searchChar, final int startPos) {
    if (isEmpty(seq)) {
        return INDEX_NOT_FOUND;
    }
    return CharSequenceUtils.indexOf(seq, searchChar, startPos);
}
*********************************

#### Score: 4.09296


#### Java Tokens: joins, exception, noofitems, added, use, equally, objects, b--c, empty, number, character, len, utils, delimiter, roughly, exclusive, represented, join, treated, given, pre, containing, newstringbuilder, index, list, separator, input, entries, endindex, null, stop, bounds, items, object, joining, code, string, nof, firststring, provided, values, arrayindexoutofboundsexception, a--b--c, strings, nofstrings, array, param, builder, end, together, ,,a, abc, may, within, joined, start, length, ife, stringutils, single, buf, startindex, assuming, elements, stringbuilder, tostring, append, first 


public static String join(final Object[] array, String separator, final int startIndex, final int endIndex) {
    if (array == null) {
        return null;
    }
    if (separator == null) {
        separator = EMPTY;
    }
    
    
    final int noOfItems = endIndex - startIndex;
    if (noOfItems <= 0) {
        return EMPTY;
    }
    final StringBuilder buf = newStringBuilder(noOfItems);
    if (array[startIndex] != null) {
        buf.append(array[startIndex]);
    }
    for (int i = startIndex + 1; i < endIndex; i++) {
        buf.append(separator);
        if (array[i] != null) {
            buf.append(array[i]);
        }
    }
    return buf.toString();
}
*********************************

#### Score: 3.96871


#### Java Tokens: calculation, performs, equivalent, splits, excludes, beg, arrayutils, whole, used, substrings, splitbywholeseparatorpreservealltokens, empty_string_array, empty, zero, mos, number, character, split, separatorlength, len, utils, delimiter, limit, numberofsubstrings, worker, add, treated, containing, goes, index, preserve, list, splitbywholeseparatorworker, separator, str, input, size, following, parsed, position, starting, since, next, code, string, methods, skip, occurrence, substring, point, negative, search, found, strings, array, splitworker, param, preservealltokens, tokens, end, value, include, set, may, max, one, length, adjacent, arraylist, parse, right, consecutive, token, stringutils, equals, toarray, elements, maximum, logic, whitespace, returned, implies, indexof, separators 


private static String[] splitByWholeSeparatorWorker(final String str, final String separator, final int max, final boolean preserveAllTokens) {
    if (str == null) {
        return null;
    }
    final int len = str.length();
    if (len == 0) {
        return ArrayUtils.EMPTY_STRING_ARRAY;
    }
    if (separator == null || EMPTY.equals(separator)) {
        
        return splitWorker(str, null, max, preserveAllTokens);
    }
    final int separatorLength = separator.length();
    final ArrayList<String> substrings = new ArrayList<>();
    int numberOfSubstrings = 0;
    int beg = 0;
    int end = 0;
    while (end < len) {
        end = str.indexOf(separator, beg);
        if (end > -1) {
            if (end > beg) {
                numberOfSubstrings += 1;
                if (numberOfSubstrings == max) {
                    end = len;
                    substrings.add(str.substring(beg));
                } else {
                    
                    
                    substrings.add(str.substring(beg, end));
                    
                    
                    
                    beg = end + separatorLength;
                }
            } else {
                
                if (preserveAllTokens) {
                    numberOfSubstrings += 1;
                    if (numberOfSubstrings == max) {
                        end = len;
                        substrings.add(str.substring(beg));
                    } else {
                        substrings.add(EMPTY);
                    }
                }
                beg = end + separatorLength;
            }
        } else {
            
            substrings.add(str.substring(beg));
            end = len;
        }
    }
    return substrings.toArray(new String[substrings.size()]);
}
*********************************

#### Score: 3.28301


#### Java Tokens: code, string, signature, u0969, numeric, non, space, charsequence, point, empty, 12-3, character, u0967u0968u0969, param, utils, u0967u0968, isdigit, charat, digit, isnumeric, pre, isnumericspace, may, length, check, stringutils, non-null, sequence, 12.3, contains, 123, checks, char, unicode, digits, returns, decimal, ab2c, since, changed 


public static boolean isNumericSpace(final CharSequence cs) {
    if (cs == null) {
        return false;
    }
    final int sz = cs.length();
    for (int i = 0; i < sz; i++) {
        if (!Character.isDigit(cs.charAt(i)) && cs.charAt(i) != ' ') {
            return false;
        }
    }
    return true;
}
*********************************

#### Score: 3.22145


#### Java Tokens: code, string, isolated, arrayutils, units, convert, codepointat, charsequence, point, pairs, points, empty, codepointcount, result, valid, character, high, array, low, param, utils, supplementary, surrogate, preceded, pre, charcount, length, count, index, converts, followed, empty_int_array, int, as-is, str, stringutils, single, sequence, converted, char, tocodepoints, returned, tostring, since 


public static int[] toCodePoints(final CharSequence str) {
    if (str == null) {
        return null;
    }
    if (str.length() == 0) {
        return ArrayUtils.EMPTY_INT_ARRAY;
    }
    final String s = str.toString();
    final int[] result = new int[s.codePointCount(0, s.length())];
    int index = 0;
    for (int i = 0; i < result.length; i++) {
        result[i] = s.codePointAt(index);
        index += Character.charCount(result[i]);
    }
    return result;
}
*********************************

#### Score: 3.05509


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final byte[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
*********************************

#### Score: 3.05509


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final char[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
*********************************

#### Score: 3.05509


#### Java Tokens: joins, code, string, added, use, provided, objects, values, empty, character, strings, array, param, utils, delimiter, represented, join, together, pre, may, within, containing, joined, length, list, separator, 1;2;3, stringutils, single, input, 123, null, elements, since 


public static String join(final double[] array, final char separator) {
    if (array == null) {
        return null;
    }
    return join(array, separator, 0, array.length);
}
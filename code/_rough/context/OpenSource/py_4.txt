### Py Tokens: node, traverse, curr, reversed, key, ordereddict, linked, last, reverse, list, start, dict, ordered, root, order 

### Py functions

def __reversed__(self):


  root = self.__root
  curr = root[0]                                  
  while curr is not root:
    yield curr[2]                               
    curr = curr[0]
*********************************

#### Score: 10.93029


#### Java Tokens: pre, code, string, may, link, reverse, reverses, str, stringutils, input, bat, tab, param, utils, builder, returns, stringbuilder, per, tostring, reversed 




public static String reverse(final String str) {
    if (str == null) {
        return null;
    }
    return new StringBuilder(str).reverse().toString();
}
*********************************

#### Score: 8.29776


#### Java Tokens: reversedelimited, reuse, code, c.b.a, string, probably, use, methods, arrayutils, simple, slower, character, split, java, strs, strings, array, param, utils, delimiter, delimiters, implement, join, lang, pre, manually, thus, may, could, a.b.c, delimited, separatorchar, reverse, specific, separator, reverses, way, becomes, str, stringutils, input, char, reversed, since 


public static String reverseDelimited(final String str, final char separatorChar) {
    if (str == null) {
        return null;
    }
    
    
    final String[] strs = split(str, separatorChar);
    ArrayUtils.reverse(strs);
    return join(strs, separatorChar);
}
*********************************

#### Score: 5.52446


#### Java Tokens: performs, separate, arrayutils, empty_string_array, empty, character, split, len, utils, worker, add, treated, last, preserve, list, separator, str, input, size, parsed, code, string, methods, substring, jdk1, lastmatch, strings, splitworker, array, param, preservealltokens, tokens, charat, may, one, length, start, match, separatorchar, adjacent, arraylist, parse, splitpreservealltokens, token, stringutils, jdk, performance, tuned, toarray, char, maximum, logic, separators 


private static String[] splitWorker(final String str, final char separatorChar, final boolean preserveAllTokens) {
    if (str == null) {
        return null;
    }
    final int len = str.length();
    if (len == 0) {
        return ArrayUtils.EMPTY_STRING_ARRAY;
    }
    final List<String> list = new ArrayList<>();
    int i = 0, start = 0;
    boolean match = false;
    boolean lastMatch = false;
    while (i < len) {
        if (str.charAt(i) == separatorChar) {
            if (match || preserveAllTokens) {
                list.add(str.substring(start, i));
                match = false;
                lastMatch = true;
            }
            start = ++i;
            continue;
        }
        lastMatch = false;
        match = true;
        i++;
    }
    if (match || preserveAllTokens && lastMatch) {
        list.add(str.substring(start, i));
    }
    return list.toArray(new String[list.size()]);
}
*********************************

#### Score: 4.86289


#### Java Tokens: given, using, string, lower-case, lower, torootlowercase, link, source, converts, manner, locale, stringutils, param, utils, root, tolowercase, safe, case, null-safe, since 


public static String toRootLowerCase(final String source) {
    return source == null ? null : source.toLowerCase(Locale.ROOT);
}
*********************************

#### Score: 4.86289


#### Java Tokens: given, using, string, upper, link, source, converts, manner, torootuppercase, locale, stringutils, upper-case, param, utils, root, safe, touppercase, case, null-safe, since 


public static String toRootUpperCase(final String source) {
    return source == null ? null : source.toUpperCase(Locale.ROOT);
}
*********************************

#### Score: 4.65389


#### Java Tokens: code, string, back, used, substring, specified, empty, remember, characters, negative, param, utils, get, end, avoiding, means, pre, abc, may, negatives, last, start, length, count, handle, many, gets, exceptions, str, stringutils, input, position 




public static String substring(final String str, int start) {
    if (str == null) {
        return null;
    }
    
    if (start < 0) {
        
        start = str.length() + start;
    }
    if (start < 0) {
        start = 0;
    }
    if (start > str.length()) {
        return EMPTY;
    }
    return str.substring(start);
}
*********************************

#### Score: 4.42392


#### Java Tokens: standard, performs, separate, use, arrayutils, space, empty_string_array, empty, zero, number, character, split, sizeplus, len, utils, limit, worker, add, treated, last, isspace, index, stringtokenizer, preserve, list, separator, plus, str, input, size, null, parsed, iswhitespace, code, string, separatorchars, methods, direct, optimise, substring, jdk1, lastmatch, negative, strings, splitworker, array, param, preservealltokens, tokens, value, charat, sep, include, means, may, max, one, quicker, length, start, match, adjacent, also, arraylist, parse, splitpreservealltokens, token, tokenizer, stringutils, jdk, performance, tuned, toarray, elements, maximum, uses, logic, whitespace, implies, indexof, separators, chars, sizeplus1 


private static String[] splitWorker(final String str, final String separatorChars, final int max, final boolean preserveAllTokens) {
    if (str == null) {
        return null;
    }
    final int len = str.length();
    if (len == 0) {
        return ArrayUtils.EMPTY_STRING_ARRAY;
    }
    final List<String> list = new ArrayList<>();
    int sizePlus1 = 1;
    int i = 0, start = 0;
    boolean match = false;
    boolean lastMatch = false;
    if (separatorChars == null) {
        
        while (i < len) {
            if (Character.isWhitespace(str.charAt(i))) {
                if (match || preserveAllTokens) {
                    lastMatch = true;
                    if (sizePlus1++ == max) {
                        i = len;
                        lastMatch = false;
                    }
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            lastMatch = false;
            match = true;
            i++;
        }
    } else if (separatorChars.length() == 1) {
        
        final char sep = separatorChars.charAt(0);
        while (i < len) {
            if (str.charAt(i) == sep) {
                if (match || preserveAllTokens) {
                    lastMatch = true;
                    if (sizePlus1++ == max) {
                        i = len;
                        lastMatch = false;
                    }
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            lastMatch = false;
            match = true;
            i++;
        }
    } else {
        
        while (i < len) {
            if (separatorChars.indexOf(str.charAt(i)) >= 0) {
                if (match || preserveAllTokens) {
                    lastMatch = true;
                    if (sizePlus1++ == max) {
                        i = len;
                        lastMatch = false;
                    }
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            lastMatch = false;
            match = true;
            i++;
        }
    }
    if (match || preserveAllTokens && lastMatch) {
        list.add(str.substring(start, i));
    }
    return list.toArray(new String[list.size()]);
}
*********************************

#### Score: 4.19520


#### Java Tokens: unwraps, startswith, baa, string, anther, wraplength, endswith, used, isempty, substring, unwrap, empty, quoted, properly, param, utils, ends, end, starts, aababcbaa, given, pre, abc, original, last, wraptoken, length, start, index, unwrapped, "abc", babc, token, str, stringutils, babcb, endindex, startindex, lastindexof, wrap, indexof, 'abc', since 


public static String unwrap(final String str, final String wrapToken) {
    if (isEmpty(str) || isEmpty(wrapToken) || str.length() == 1) {
        return str;
    }
    if (startsWith(str, wrapToken) && endsWith(str, wrapToken)) {
        final int startIndex = str.indexOf(wrapToken);
        final int endIndex = str.lastIndexOf(wrapToken);
        final int wrapLength = wrapToken.length();
        if (startIndex != -1 && endIndex != -1) {
            return str.substring(startIndex + wrapLength, endIndex);
        }
    }
    return str;
}
*********************************

#### Score: 4.03769


#### Java Tokens: code, string, signature, whole, charsequence, empty, mos, search, negative, found, unless, param, utils, find, ignore, greater, case, always, searches, pre, last, may, within, index_not_found, length, start, match, index, in-sensitive, sensitive, check, matches, aabaabaa, str, stringutils, sequence, input, lastindexofignorecase, searchstr, char, returns, position, first, since, changed 


public static int lastIndexOfIgnoreCase(final CharSequence str, final CharSequence searchStr) {
    if (str == null || searchStr == null) {
        return INDEX_NOT_FOUND;
    }
    return lastIndexOfIgnoreCase(str, searchStr, str.length());
}
*********************************

#### Score: 3.89243


#### Java Tokens: criteria, replace, occurs, isempty, empty, truncate, utils, greater, otherwise, pre, offset, last, targetsting, replacing, less, str, startoffset, following, replacement, since, code, string, endoffset, abbreviates, substring, characters, param, end, passed, met, abbreviate, middle, abc, original, may, supplied, abbreviatemiddle, length, start, sting, enough, abbreviation, room, target, stringutils, ab.f, neither, abcdef, returned, abbreviated, first 


public static String abbreviateMiddle(final String str, final String middle, final int length) {
    if (isEmpty(str) || isEmpty(middle)) {
        return str;
    }
    if (length >= str.length() || length < middle.length() + 2) {
        return str;
    }
    final int targetSting = length - middle.length();
    final int startOffset = targetSting / 2 + targetSting % 2;
    final int endOffset = str.length() - targetSting / 2;
    return str.substring(0, startOffset) + middle + str.substring(endOffset);
}
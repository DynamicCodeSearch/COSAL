Statement	Count	# unique files
train_df.head()	1201	245
train.head()	1029	442
test.head()	420	257
train.info()	349	254
dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')	277	276
dataset['Title'] = dataset['Title'].map(title_mapping)	274	272
dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')	272	271
dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')	271	270
"test_df[""PassengerId""],"	266	238
dataset['Age'] = dataset['Age'].astype(int)	263	253
train['Survived']	262	237
dataset['Fare'] = dataset['Fare'].astype(int)	262	256
test_df.info()	259	237
dataset['Title'] = dataset['Title'].fillna(0)	254	254
df.head()	249	97
dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1	244	243
dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2	232	232
dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1	232	231
dataset['IsAlone'] = 0	231	231
dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3	231	231
dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1	229	229
dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2	228	228
train_df.info()	226	191
dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	224	224
dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1	222	222
test_df.head()	222	185
feature_dataframe['features'].values	206	43
data.head()	205	111
test.info()	202	138
train.describe()	193	178
submission.to_csv('submission.csv', index=False)	189	185
df_train.head()	185	85
models.sort_values(by='Score', ascending=False)	174	170
feature_dataframe['features'].values,	165	43
train_df.describe()	165	159
dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	162	162
"train_df[""Survived""]"	158	156
X_train.shape, Y_train.shape, X_test.shape	156	153
guess_df.median()	154	142
test['PassengerId']	153	152
dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0	148	148
train_data.head()	147	70
train_df.head(10)	146	129
dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3	144	144
titanic_df.head()	142	102
dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	141	140
dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0	139	139
"test[""PassengerId""],"	139	103
dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)	136	136
test_df.drop(['Name'], axis=1)	134	134
"test_df.drop(""PassengerId"", axis=1).copy()"	134	134
submission.to_csv('titanic.csv', index=False)	132	130
titanic.head()	131	86
train_df.Embarked.dropna().mode()[0]	131	131
"dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	129	128
"train_df.drop(""Survived"", axis=1)"	128	128
test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)	126	126
dataset['Embarked'] = dataset['Embarked'].fillna('S')	126	125
dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),                    'Age'] = guess_ages[i,j]	124	115
train_df.drop(['FareBand'], axis=1)	123	122
coeff_df.sort_values(by='Correlation', ascending=False)	120	119
train.isnull().sum()	119	100
train_df.describe(include=['O'])	119	116
train_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	117	115
train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)	115	115
"coeff_df[""Correlation""] = pd.Series(logreg.coef_[0])"	115	115
train_df.drop(['Name', 'PassengerId'], axis=1)	115	115
train_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)	114	114
train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)	114	113
dataset.loc[ dataset['Age'] > 64, 'Age']	114	114
test_df.drop(['Ticket', 'Cabin'], axis=1)	114	114
combined.head()	114	29
train.head(3)	114	67
"train[""Survived""]"	113	108
train_df.drop(['Ticket', 'Cabin'], axis=1)	113	113
train_df.drop(['AgeBand'], axis=1)	113	113
cols[0]	113	76
train_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)	112	112
train_df.shape, test_df.shape	112	110
train_df['AgeBand'] = pd.cut(train_df['Age'], 5)	112	112
test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)	112	112
train_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()	112	112
train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)	112	112
train_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)	110	110
train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	108	108
cols[1]	107	76
train_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)	106	106
dataset['Age'].isnull().sum()	103	103
test_df.head(10)	102	102
dataset['Age'].std()	102	102
dataset['Age'].mean()	101	101
dataset['Title'] = dataset['Name'].apply(get_title)	101	99
df.copy()	101	37
titanic_df.info()	101	93
"train_df[[""SibSp"", ""Survived""]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	100	100
"train_df[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	100	100
pd.isnull(Age):	99	83
train_df.tail()	98	98
"train_df[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	97	97
test.shape	96	84
kwargs.get( 'col' , None )	95	49
kwargs.get( 'row' , None )	95	49
dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())	94	94
train_df.shape, test_df.shape, combine[0].shape, combine[1].shape	94	94
data.info()	94	50
dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list	92	92
train.drop(drop_elements, axis = 1)	89	89
dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	88	88
base_predictions_train.columns.values,	87	44
test_data.head()	87	50
test.drop(drop_elements, axis = 1)	87	87
train.shape[0]	86	86
df_test.head()	86	58
submission.head()	85	78
df.info()	82	50
data_train.head()	82	38
"titanic_df[""Survived""]"	81	81
ticket[0]	81	78
test.isnull().sum()	80	69
shape[0]	76	24
test.shape[0]	76	76
dataset.head()	75	42
titanic_df.join(pclass_dummies_titanic)	75	75
test_df.join(pclass_dummies_test)	75	75
"titanic_df[""Embarked""] = titanic_df[""Embarked""].fillna(""S"")"	74	73
"test_df[""Fare""].fillna(test_df[""Fare""].median(), inplace=True)"	73	73
"dataset.loc[ dataset['Age'] <= 16, 'Age'] 					       = 0"	73	73
titanic.describe()	73	68
"test_df[""Age""].std()"	73	73
test_df.join(embark_dummies_test)	73	73
titanic_df.join(embark_dummies_titanic)	72	72
"dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] 						        = 0"	71	71
train['CategoricalAge'] = pd.cut(train['Age'], 5)	71	71
"dataset.loc[ dataset['Fare'] > 31, 'Fare'] 							        = 3"	71	71
"test_df.drop(""PassengerId"",axis=1).copy()"	71	70
train.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)	70	70
test_df.join(person_dummies_test)	70	70
"test_df[""Age""].isnull().sum()"	69	69
test_df.drop(['Person'],axis=1,inplace=True)	68	68
np.std(train_scores, axis=1)	68	56
train.head(10)	68	57
np.mean(train_scores, axis=1)	68	56
data.copy(deep=True)	68	26
"test_df[""Age""].mean()"	68	68
df_train.info()	67	53
"titanic_df.drop(""Survived"",axis=1)"	67	67
train['CategoricalFare'] = pd.qcut(train['Fare'], 4)	67	67
test_df['Family'].loc[test_df['Family'] == 0] = 0	67	67
titanic_df.join(person_dummies_titanic)	67	67
X_train.head()	66	62
test_df['Family'].loc[test_df['Family'] > 0] = 1	66	66
titanic_df.drop(['Person'],axis=1,inplace=True)	66	66
train_df['Survived']	66	58
np.mean(test_scores, axis=1)	66	55
"test_df[""Age""][np.isnan(test_df[""Age""])] = rand_2"	66	66
train.head(5)	66	43
train.shape	66	65
np.std(test_scores, axis=1)	66	55
test_df['Age']    = test_df['Age'].astype(int)	66	66
test_df.drop(['Sex'],axis=1,inplace=True)	66	66
"titanic_df[""Age""].mean()"	65	65
test_df['Person']    = test_df[['Age','Sex']].apply(get_person,axis=1)	65	65
titanic_df['Person'] = titanic_df[['Age','Sex']].apply(get_person,axis=1)	65	65
scores.mean()	65	31
test_df.drop(['SibSp','Parch'], axis=1)	65	65
titanic_df.drop(['Sex'],axis=1,inplace=True)	65	65
test_df.drop(['Pclass'],axis=1,inplace=True)	65	65
titanic_df.drop(['Pclass'],axis=1,inplace=True)	65	65
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	64	64
row['Title'] == 'Master':	64	22
row['Title'] == 'Miss':	64	22
titanic_df['Family'].loc[titanic_df['Family'] == 0] = 0	64	64
titanic_df['Family'].loc[titanic_df['Family'] > 0] = 1	64	64
titanic_df['Age'] = titanic_df['Age'].astype(int)	64	64
predictions.append(1)	64	18
titanic_df['Fare'] = titanic_df['Fare'].astype(int)	64	64
test_df['Fare']    = test_df['Fare'].astype(int)	64	64
"titanic_df[""Age""][np.isnan(titanic_df[""Age""])] = rand_1"	64	64
"titanic_df[""Age""].std()"	64	64
"titanic_df['Family'] =  titanic_df[""Parch""] + titanic_df[""SibSp""]"	63	63
"tab.div(tab.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True)"	63	11
"titanic_df[""Age""].isnull().sum()"	63	63
row['Title'] == 'Mrs':	63	21
"test_df['Family'] =  test_df[""Parch""] + test_df[""SibSp""]"	63	63
row['Title'] == 'Mr':	63	21
train.drop(['Survived'], axis=1)	63	63
titanic_df.drop(['SibSp','Parch'], axis=1)	63	63
df_train['Survived']	62	47
"titanic_df[[""Embarked"", ""Survived""]].groupby(['Embarked'],as_index=False).mean()"	62	61
test_df.drop(['Embarked'], axis=1,inplace=True)	62	62
"titanic_df[[""Person"", ""Survived""]].groupby(['Person'],as_index=False).mean()"	62	62
person_dummies_test.drop(['Male'], axis=1, inplace=True)	61	61
test_df.drop(['Name','Ticket'], axis=1)	61	61
"titanic_df.drop(""Cabin"",axis=1,inplace=True)"	61	61
person_dummies_titanic.drop(['Male'], axis=1, inplace=True)	61	61
"titanic_df[""Fare""][titanic_df[""Survived""] == 0]"	61	61
pclass_dummies_titanic.drop(['Class_3'], axis=1, inplace=True)	61	61
"titanic_df[""Fare""][titanic_df[""Survived""] == 1]"	61	61
row['Title'] == 'Officer':	61	20
pclass_dummies_test.drop(['Class_3'], axis=1, inplace=True)	61	61
titanic_df.drop(['Embarked'], axis=1,inplace=True)	61	61
titanic_df.drop(['PassengerId','Name','Ticket'], axis=1)	60	60
"test_df.drop(""Cabin"",axis=1,inplace=True)"	60	60
titanic_df['Age'].dropna().astype(int).hist(bins=70, ax=axis1)	60	60
titanic_df['Fare'].plot(kind='hist', figsize=(15,3),bins=100, xlim=(0,50))	60	60
"titanic_df[[""Age"", ""Survived""]].groupby(['Age'],as_index=False).mean()"	60	60
titanic_df['Age'].hist(bins=70, ax=axis2)	60	60
"titanic_df[[""Family"", ""Survived""]].groupby(['Family'],as_index=False).mean()"	59	59
data.describe()	59	46
df_train.describe()	58	51
test.describe()	58	54
params['random_state'] = seed	58	58
base_predictions_train.head()	58	58
embark_dummies_titanic.drop(['S'], axis=1, inplace=True)	57	57
np.empty((NFOLDS, ntest))	56	55
train.drop('Survived', axis=1)	56	55
embark_dummies_test.drop(['S'], axis=1, inplace=True)	56	56
train.corr()	54	50
oof_test_skf.mean(axis=0)	54	53
titanic.corr()	54	54
"train['Has_Cabin'] = train[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	53	53
"test['Has_Cabin'] = test[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	53	53
train.append(test)	52	52
train['Survived'].ravel()	52	52
train_data.info()	51	43
test['Name_length'] = test['Name'].apply(len)	51	51
train['Name_length'] = train['Name'].apply(len)	51	51
mpl.style.use( 'ggplot' )	50	50
X.head()	50	45
pylab.rcParams[ 'figure.figsize' ] = 8 , 6	49	49
titanic.info()	49	31
embarked.head()	49	49
test.copy()	49	32
train.columns.values	49	49
full_X[ 0:891 ]	49	44
ticket.replace( '/' , '' )	48	48
ticket.replace( '.' , '' )	48	48
title[ 'Title' ] = title.Title.map( Title_Dictionary )	47	47
combined.info()	46	19
"StackingSubmission.to_csv(""StackingSubmission.csv"", index=False)"	46	46
imp.sort_values( [ 'Importance' ] , ascending = True )	46	46
train.append( test , ignore_index = True )	46	46
l.append( len( pd.value_counts( df[ x ] ) ) )	45	45
var.append( x )	45	45
predictions.append(0)	45	16
t.append( df[ x ].dtypes )	45	45
pclass.head()	45	45
all_data.head()	45	13
levels.sort_values( by = 'Levels' , inplace = True )	45	45
family[ 'FamilySize' ] = full[ 'Parch' ] + full[ 'SibSp' ] + 1	45	45
my_submission.to_csv('submission.csv', index=False)	44	41
title.head()	44	44
family.head()	44	44
feature_dataframe['mean'] = feature_dataframe.mean(axis= 1) # axis = 1 computes the mean row-wise	44	44
test.to_csv( 'titanic_pred.csv' , index = False )	44	44
full_X.head()	44	42
train_data.describe()	44	41
title[ 'Title' ] = full[ 'Name' ].map( lambda name: name.split( ',' )[1].split( '.' )[0].strip() )	44	44
family[ 'Family_Single' ] = family[ 'FamilySize' ].map( lambda s : 1 if s == 1 else 0 )	43	43
feature_dataframe['mean'].values	43	43
train.values # Creates an array of the train data	43	43
feature_dataframe['mean'].values,	43	43
test.values # Creats an array of the test data	42	42
train.values	42	40
family[ 'Family_Small' ]  = family[ 'FamilySize' ].map( lambda s : 1 if 2 <= s <= 4 else 0 )	42	42
ticket[ 'Ticket' ] = full[ 'Ticket' ].map( cleanTicket )	42	42
family[ 'Family_Large' ]  = family[ 'FamilySize' ].map( lambda s : 1 if 5 <= s else 0 )	42	42
test_data.info()	42	36
cabin[ 'Cabin' ] = cabin[ 'Cabin' ].map( lambda c : c[0] )	41	41
ticket.head()	41	41
imputed.head()	41	41
imputed[ 'Fare' ] = full.Fare.fillna( full.Fare.mean() )	41	41
test.values	41	41
cabin.head()	41	41
train.copy()	41	37
feature_dataframe.head(3)	40	40
base_predictions_train.astype(float).corr().values ,	40	40
row['PassengerId']	40	22
ticket.shape	40	40
imputed[ 'Age' ] = full.Age.fillna( full.Age.mean() )	40	40
row['Title'] == 'Royalty':	40	20
cabin[ 'Cabin' ] = full.Cabin.fillna( 'U' )	40	40
df.describe()	39	36
train.dtypes	38	31
X.shape	38	24
test['PassengerId'],	38	28
grp_df.iterrows():	37	19
mpl.style.use('ggplot')	36	36
df['Survived']	35	31
train.drop('Cabin',axis=1,inplace=True)	35	35
"test[""PassengerId""]"	35	31
grp_df.drop(ind)['Survived'].min()	35	18
grp_df.drop(ind)['Survived'].max()	35	18
output.to_csv('submission.csv', index=False)	34	33
data['Survived']	34	34
cm.max() / 2.	33	32
"submission.to_csv(""submission.csv"", index=False)"	33	33
df_test.info()	33	25
train_df.isnull().sum()	33	24
df.isnull().sum()	33	29
train_data['Survived']	32	30
test_data.iterrows():	32	18
itertools.product(range(cm.shape[0]), range(cm.shape[1])):	32	31
features['importance'] = clf.feature_importances_	31	30
combined.shape	31	18
np.mean(scores)	31	13
log.append(log_entry)	31	30
data.isnull().sum()	31	25
test['Fare'].fillna(train['Fare'].mean(), inplace = True)	31	17
"titanic_test[""PassengerId""],"	31	27
output.head()	30	30
le.transform(df_test[feature])	30	29
dataset.loc[ dataset['Age'] > 64, 'Age']                           = 4	30	30
traindf.head()	30	10
le.transform(df_train[feature])	30	29
train.dropna(inplace=True)	30	30
"train[""Embarked""] = train[""Embarked""].fillna(""S"")"	29	29
cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]	29	28
train.tail()	29	24
model.add(Dropout(0.5))	29	16
data_raw.describe(include = 'all')	29	16
predictions.append(test_predictions)	29	22
dfTrain['Survived']	29	5
"test.drop(""PassengerId"", axis=1).copy()"	29	29
"df_test[""PassengerId""],"	29	23
train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	29	29
MLA_compare.loc[row_index, 'MLA Name'] = MLA_name	28	27
dataset.info()	28	14
combined['Title'] = combined['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	28	28
train_ch['Survived'] = y_train	28	2
X_train.copy()	27	11
training.head()	27	10
df.corr(),	27	27
df_output['Survived'] = output	27	26
MLA_compare.loc[row_index, 'MLA Test Accuracy Mean'] = cv_results['test_score'].mean()	27	26
data_train['Survived']	27	27
scaler.transform(X_test)	27	23
MLA_compare.loc[row_index, 'MLA Time'] = cv_results['fit_time'].mean()	27	26
pylab.rcParams['figure.figsize'] = 12,8	27	27
dataset.loc[ dataset['Age'] > 64, 'Age'] = 4 ;	27	27
test_df['PassengerId']	27	27
df.Fare.fillna(-0.5)	27	26
MLA_compare.loc[row_index, 'MLA Train Accuracy Mean'] = cv_results['train_score'].mean()	27	26
dataset.loc[ dataset['Age'] > 64, 'Age'] ;	26	26
np.mean(xval)	26	26
train['Embarked'].value_counts()	26	24
plt.axes()	26	11
train['Title'].value_counts()	26	24
df.Age.fillna(-0.5)	26	25
title_mapping.items():	26	16
dataset['FareBin'] = pd.qcut(dataset['Fare'], 4)	26	26
combined.reset_index(inplace=True)	26	26
"train.drop(""Survived"", axis=1)"	26	26
X_test.head()	26	25
train.drop(['Survived', 'PassengerId'], axis=1)	26	26
MLA_compare.loc[row_index, 'MLA Parameters'] = str(alg.get_params())	26	26
ticket.replace('/','')	26	26
train_df.corr()	26	20
"submit.to_csv(""../working/submit.csv"", index=False)"	26	26
combined['Ticket'] = combined['Ticket'].map(cleanTicket)	26	26
ticket.replace('.','')	26	26
df.dtypes	25	16
dataset['FareBin_Code'] = label.fit_transform(dataset['FareBin'])	25	25
train.sample(5)	25	22
test.drop('Cabin',axis=1,inplace=True)	25	25
combined['FamilySize'] = combined['Parch'] + combined['SibSp'] + 1	25	25
combined['Title'] = combined.Title.map(Title_Dictionary)	25	25
test.head(10)	25	22
outcomes.append(accuracy)	25	25
dataset['AgeBin_Code'] = label.fit_transform(dataset['AgeBin'])	25	25
np.mean(outcomes)	25	25
"train[""Survived""].values"	25	22
model.transform(test)	25	25
X_test.copy()	24	10
train_data.head(10)	24	23
df.corr()	24	23
dfPrediction.to_csv()	24	2
MLA_compare.sort_values(by = ['MLA Test Accuracy Mean'], ascending = False, inplace = True)	24	23
features['feature'] = train.columns	24	23
dataset['Age'].fillna(dataset['Age'].median(), inplace = True)	24	23
model.transform(train)	24	24
dataset['Title_Code'] = label.fit_transform(dataset['Title'])	24	24
train.astype(float).corr(),linewidths=0.1,vmax=1.0,	24	24
dataset['Sex_Code'] = label.fit_transform(dataset['Sex'])	23	23
train.drop('Survived', axis = 1)	23	21
dataset['Fare'].fillna(dataset['Fare'].median(), inplace = True)	23	23
data.shape	23	21
df_test['Survived'] = Y_pred	23	12
df_train.isnull().sum()	23	18
df.Cabin.apply(lambda x: x[0])	23	22
"df_train[""Survived""]"	23	16
titanic_train.info()	23	16
values[0]	23	16
df.iterrows():	23	17
plt.style.use('fivethirtyeight')	23	23
titanic.isnull().sum()	23	19
matplotlib.style.use('ggplot')	23	23
train_dataset.head()	23	10
train_data.isnull().sum()	22	16
data.copy(deep = True)	22	10
k_scores.append(score)	22	22
dataset.loc[ dataset['Age'] > 64, 'Age'] = 4	22	22
Model.loc[index, 'Predict'] = 0	22	11
Model.loc[index, 'Predict'] = 1	22	11
dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)	22	22
dfFull.loc[1:891,:]	22	2
df.Cabin.fillna('N')	22	21
dfFull.loc[892:,:]	22	2
train.head(2)	22	14
dataset['Sex'] = dataset['Sex'].map(sex_mapping)	22	22
MLA_compare.loc[row_index, 'MLA Test Accuracy 3*STD'] = cv_results['test_score'].std()*3   #let's know the worst that can happen!	22	22
dataset['FamilySize'] = dataset ['SibSp'] + dataset['Parch'] + 1	22	22
"dataset[""Ticket""].head()"	22	13
dataset['AgeBin'] = pd.cut(dataset['Age'].astype(int), 5)	22	22
dataset['Embarked_Code'] = label.fit_transform(dataset['Embarked'])	22	22
plt.style.use('ggplot')	21	19
data_copy.loc[data_copy['Embarked'] == 'C', 'Embarked'] = 1	21	21
"train_data[""Survived""]"	21	20
full.head()	21	13
dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)	21	21
classifiers.append(KNeighborsClassifier())	21	21
ax[0].set_xticks(x1)	21	17
model.add(Dense(1, activation='sigmoid'))	21	21
data_copy.loc[data_copy['Embarked'] == 'Q', 'Embarked'] = 2	21	21
df.drop(['Ticket', 'Name', 'Embarked'], axis=1)	21	20
train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)	21	21
df.shape	21	15
combined.drop('Pclass',axis=1,inplace=True)	21	21
train_data.copy()	21	6
dataset['IsAlone'] = 1 #initialize to yes/1 is alone	21	21
dataset.isnull().sum()	21	18
cv_std.append(cv_result.std())	21	21
titanic_train.head()	21	16
df.head(5)	20	11
"train[""Age""] = train[""Age""].fillna(train[""Age""].median())"	20	20
dataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace = True)	20	20
row['Sex']=='male' and row['Pclass'] == 2:	20	20
ax[0].set_title('Survived')	20	20
train['Sex'] = train['Sex'].map(sex_mapping)	20	20
titanicANDtest_df.head(5)	20	10
"dataset['Title'] = dataset['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	20	20
row['Sex']=='male' and row['Pclass'] == 1:	20	20
y_all.values[train_index], y_all.values[test_index]	20	20
dataset['IsAlone'].loc[dataset['FamilySize'] > 1] = 0 # now update to no/0 if family size is greater than 1	20	20
train['Age'].mean()	20	20
cv_means.append(cv_result.mean())	20	20
train.drop('Survived',axis=1)	20	20
sc.transform(X_test)	20	15
X_all.values[train_index], X_all.values[test_index]	20	20
y.shape[0]	20	4
row['Sex']=='male' and row['Pclass'] == 3:	20	20
data_test.values	20	18
data1_dummy.head()	20	20
"Ticket.append(""X"")"	20	20
train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)	20	20
data_copy.loc[data_copy['Embarked'] == 'S', 'Embarked'] = 0	20	20
ax[1].set_title('Survived')	20	19
i['Age'] = data.transform(lambda x: x.fillna(x.mean()))	19	19
train.Survived.values	19	14
train.isnull().any()	19	13
test_data.describe()	19	16
data_copy.loc[data_copy['Sex'] == 'male', 'Sex'] = 1	19	19
train['Cabin_num']	19	16
ax[0].set_ylabel('')	19	19
train.drop(features_drop, axis=1)	19	19
row['Sex']=='female' and row['Pclass'] == 2:	19	19
df_test.describe()	19	18
train['Age'].isnull().sum()	19	14
test['Sex'] = test['Sex'].map(sex_mapping)	19	19
"test[""Age""] = test[""Age""].fillna(test[""Age""].median())"	19	18
row['Sex']=='female' and row['Pclass'] == 1:	19	19
"Ticket.append(i.replace(""."","""").replace(""/"","""").strip().split(' ')[0]) #Take prefix"	19	19
row['Sex']=='female' and row['Pclass'] == 3:	19	19
data_train.values	19	17
x_train.head()	18	10
"dataset[""Fare""] = dataset[""Fare""].map(lambda i: np.log(i) if i > 0 else 0)"	18	17
train.groupby(['Name_Title', 'Pclass'])['Age']	18	17
dataset['Pclass'].hist()	18	17
ax[1].set_yticks(range(0,110,10))	18	18
train_df.copy()	18	17
dataset['Cabin'] = dataset['Cabin'].str[:1]	18	18
np.all(valid_mask):	18	9
row['Sex'] == 'female':	18	14
data_train.info()	18	15
test.drop(features_drop, axis=1)	18	18
features.sort_values(by=['importance'], ascending=True, inplace=True)	18	18
train_df.shape	18	15
ax[0].set_ylabel('Count')	18	17
classifiers.append(SVC(random_state=random_state))	18	18
data_test['PassengerId']	18	18
train.describe(include=['O'])	18	18
X.copy()	18	10
ax[1].set_xticks(x2)	18	16
data_copy.loc[data_copy['Sex'] == 'female', 'Sex'] = 0	18	18
survived_train.values	18	16
i['Age_Null_Flag'] = i['Age'].apply(lambda x: 1 if pd.isnull(x) else 0)	18	18
train.drop('Survived',axis=1),	18	18
data1.info()	18	18
grid_result.cv_results_['std_test_score']	17	8
i['Cabin']	17	17
i['Name']	17	17
features.set_index('feature', inplace=True)	17	17
pd.isnull(age):	17	16
titanic_test.head()	17	11
"train[""Survived""] = train[""Survived""].astype(int)"	17	17
i['Cabin_Letter'] = i['Cabin'].apply(lambda x: str(x)[0])	17	17
data_val.info()	17	17
grid_result.cv_results_['mean_test_score']	17	8
df['FamilySize'] = df['SibSp'] + df['Parch'] + 1	17	17
"test[""Fare""] = test[""Fare""].fillna(test[""Fare""].median())"	17	17
classifiers.append(LogisticRegression(random_state = random_state))	17	17
combined['Cabin'] = combined['Cabin'].map(lambda c : c[0])	17	17
grid_result.cv_results_['params']	17	8
test_predictions.astype(int)	17	13
i['Embarked'] = i['Embarked'].fillna('S')	17	17
names.append(name)	17	13
ax[0].set_title('Survived vs Sex')	17	17
train['Survived'].values	17	16
train['Ticket_Len'] = train['Ticket'].apply(lambda x: len(x))	17	17
ax[0].set_yticks(range(0,110,10))	17	17
data1['Title'] = data1['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)	17	17
train['Embarked'] = train['Embarked'].fillna('S')	17	17
test_data.isnull().sum()	17	11
train1_x_bin.head()	17	17
combined.drop('Name',axis=1,inplace=True)	17	17
combined.drop('Title',axis=1,inplace=True)	17	17
train['Ticket_Lett'] = train['Ticket'].apply(lambda x: str(x)[0])	17	17
scaler.transform(X_train)	17	17
test['Embarked'] = test['Embarked'].map(embarked_mapping)	17	17
sorted_important_features.append(predictors[i])	17	9
train['Embarked'] = train['Embarked'].map(embarked_mapping)	17	17
df_full.head()	17	3
test.drop('Name', axis=1, inplace=True)	17	17
"holdout[""PassengerId""]"	17	11
data1.drop(drop_column, axis=1, inplace = True)	17	17
df['Lname'] = df.Name.apply(lambda x: x.split(' ')[0])	17	17
i['Name_Len'] = i['Name'].apply(lambda x: len(x))	17	17
i['Parch']	17	17
i['SibSp']	17	17
train['Name']	16	15
training_data.info()	16	16
plt.style.use('seaborn')	16	6
dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3	16	16
test['Title'].value_counts()	16	15
dataset['Age'].hist()	16	16
test_df.copy()	16	16
test_data[['PassengerId', 'Survived']].to_csv('submission.csv', index=False)	16	16
test_data['Survived'] = predictions	16	16
dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,	16	16
test_df.isnull().sum()	16	14
full.isnull().sum()	16	11
dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)	16	16
ax[0].set_title('Pclass and Age vs Survived')	16	16
combined['Sex'] = combined['Sex'].map({'male':1,'female':0})	16	16
std.append(cv_result.std())	16	16
i['Cabin_num1'].replace('an', np.NaN, inplace = True)	16	16
test['Age'].isnull().sum()	16	12
df['NamePrefix'] = df.Name.apply(lambda x: x.split(' ')[1])	16	16
i['Cabin_num'] = pd.qcut(train['Cabin_num1'],3)	16	16
"df[""Age""] = df[""Age""].fillna(-0.5)"	16	16
i['Ticket']	16	16
data.iterrows():	16	6
data_raw.copy(deep = True)	16	15
"train.describe(include=""all"")"	16	13
classifiers.append(RandomForestClassifier(random_state=random_state))	16	16
i['Name_Title'] = i['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	16	16
"test.describe(include=""all"")"	16	15
dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,	16	16
test['Cabin_num']	16	16
i['Cabin_num1'] = i['Cabin_num1'].apply(lambda x: int(x) if not pd.isnull(x) and x != '' else np.NaN)	16	16
i['Cabin_num1'] = i['Cabin'].apply(lambda x: str(x).split(' ')[-1][1:])	16	16
test['Cabin_num1']	16	16
accuracy.append(cv_result)	16	16
result.head()	16	12
x_list.append(x)	16	2
df_test.isnull().sum()	16	11
train.shape, test.shape	16	14
train.drop('Name', axis=1, inplace=True)	16	16
i['Ticket_Lett'] = i['Ticket_Lett'].apply(lambda x: str(x))	16	16
test_df.head(5)	16	15
train['Cabin_num1']	16	16
clf[1].set_params(**best_param)	16	15
df_output['PassengerId'] = aux['PassengerId']	16	15
train_data.shape, target.shape	16	16
data['Age'].fillna(data['Age'].median(), inplace=True)	16	16
index[0]	16	15
combined.drop('Embarked',axis=1,inplace=True)	16	16
data_train.describe()	16	14
"titanic.corr()[""Survived""]"	16	8
train_data.corr()	16	12
train['Name_Len'] = train['Name'].apply(lambda x: len(x))	16	15
i['Ticket_Len'] = i['Ticket'].apply(lambda x: len(x))	16	16
i['Ticket_Lett'] = i['Ticket'].apply(lambda x: str(x)[0])	16	16
data1.sample(10)	16	15
data.iloc[891:]	15	15
dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,	15	15
ax[1].set_title('Survived= 1')	15	14
"train[""Sex""][train[""Sex""] == ""male""] = 0"	15	15
df_train.copy()	15	14
train['Name_Title'] = train['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	15	14
"train.fillna({""Embarked"": ""S""})"	15	15
grouped_train.median()	15	15
dataset['LargeF'] = dataset['Fsize'].map(lambda s: 1 if s >= 5 else 0)	15	15
"model.add(Activation(""relu""))"	15	7
training_data.describe() # automatically summarize numeric columns	15	15
ax[1].set_title('Fares in Pclass 2')	15	15
sns.boxplot(x = 'Pclass', y = 'Fare', hue = 'Survived', data = data1, ax = axis1)	15	15
dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,	15	15
classifiers.append(DecisionTreeClassifier(random_state=random_state))	15	15
"dataset[""Ticket""] = Ticket"	15	15
dataset['Single'] = dataset['Fsize'].map(lambda s: 1 if s == 1 else 0)	15	15
sns.boxplot(x='Pclass',y='Age',data=train,palette='winter')	15	15
training_data.describe(include=['O']) # summarize columns containing strings	15	15
"predictions.to_csv('y_test15.csv', sep="","", index = False)"	15	15
dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	15	15
train.drop(['Survived'],axis=1)	15	15
train['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1, 2, 3, 4])	15	15
"test_data[""PassengerId""],"	15	15
"submission.to_csv(""submission.csv"",index=False)"	15	15
ax[2].set_title('Fares in Pclass 3')	15	15
columns.values[dtree_rfe.get_support()]	15	15
full.info()	15	9
data_train.drop(['Survived', 'PassengerId'], axis=1)	15	15
train_df.drop(['Survived'], axis=1)	15	11
test.drop(['Fare'], axis = 1)	15	15
ax[1].set_title('Sex and Age vs Survived')	15	15
df['FamilySize'] = df['SibSp'] + df['Parch']	15	11
train.drop(['Fare'], axis = 1)	15	15
corr.columns.values,	15	7
test.drop(['Ticket'], axis = 1)	15	15
train_df.drop(['Name'], axis=1)	15	15
"test_data[""PassengerId""]"	15	15
train['Survived'].groupby(train['Sex']).mean()	15	14
X_train.shape	15	15
classifiers.append(ExtraTreesClassifier(random_state=random_state))	15	15
test['FareBand'] = pd.qcut(test['Fare'], 4, labels = [1, 2, 3, 4])	15	15
"submission.to_csv(""titanic_submission.csv"", index=False)"	15	15
dataset['Age'].iloc[i] = age_pred	15	15
ax[0].set_title('Survived= 0')	15	14
data_test.head()	15	11
train['Name'].head()	15	15
dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,	15	15
dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,	15	15
"train[""Embarked""][train[""Embarked""] == ""Q""] = 2"	15	15
ax[0].set_title('Fares in Pclass 1')	15	15
submit.head()	15	14
"titanic[""Age""].dropna(),"	15	8
dataset.loc[ dataset['Age'] > 62, 'Age'] = 4	15	15
classifiers.append(GradientBoostingClassifier(random_state=random_state))	15	15
df.loc[ (df.Age.isnull()), 'Age' ] = predictedAges	15	15
dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,	15	15
plt.boxplot(data1['Age'], showmeans = True, meanline = True)	15	15
"titanic_test[""Name""].apply(get_title)"	15	15
X_train.info()	15	13
T.style.background_gradient(cmap='summer_r')	14	9
"titanic_test[""Title""] = titles"	14	14
test_df.drop(['Ticket'], axis=1)	14	14
df['Title'].value_counts()	14	9
"train[""FamilySize""] = train[""SibSp""] + train[""Parch""] + 1"	14	13
data['Fare'] = data.Fare.fillna(data.Fare.median())	14	12
train['SibSp'].value_counts()	14	14
"test[""Fare""][x] = round(train[train[""Pclass""] == pclass][""Fare""].mean(), 4)"	14	14
classifiers.append(LinearDiscriminantAnalysis())	14	14
"train['AgeGroup'] = pd.cut(train[""Age""], bins, labels = labels)"	14	14
df_train.join(dummies)	14	2
dataset['MedF'] = dataset['Fsize'].map(lambda s: 1 if 3 <= s <= 4 else 0)	14	14
"train[""Age""] = train[""Age""].fillna(-0.5)"	14	14
"dataset[""Age""].median()"	14	14
ax[1].set_title('Sex:Survived vs Dead')	14	14
"pd.isnull(test[""Fare""][x]):"	14	14
model.add(BatchNormalization())	14	5
train_df.columns.values	14	12
"train[""Fare""].fillna(train.groupby(""Pclass"")[""Fare""].transform(""median""), inplace=True)"	14	14
"titanic[""Survived""].iloc[train]"	14	7
plt.boxplot(x=data1['Fare'], showmeans = True, meanline = True)	14	14
df.head(10)	14	11
train['Cabin_num'] = train['Cabin_num'].apply(lambda x: int(x) if not pd.isnull(x) and x != '' else np.NaN)	14	13
np.append(['Survived'],cols)	14	8
df2.values	14	10
train['Sex'].value_counts(normalize=True)	14	14
scores.append(scoreCV)	14	1
df_test.copy()	14	13
"dataset[""Fsize""] = dataset[""SibSp""] + dataset[""Parch""] + 1"	14	14
train['Cabin_num'] = train['Cabin'].apply(lambda x: str(x).split(' ')[-1][1:])	14	13
"test['AgeGroup'] = pd.cut(test[""Age""], bins, labels = labels)"	14	14
dataset['Title'] = dataset['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')	14	14
"cv_results.append(cross_val_score(classifier, X_train, y = Y_train, scoring = ""accuracy"", cv = kfold, n_jobs=4))"	14	14
data['Age'] = data.Age.fillna(data.Age.median())	14	12
train['Survived'].groupby(train['SibSp']).mean()	14	14
train['Name_Title'].value_counts()	14	14
train.drop(['PassengerId'], axis=1)	14	14
training_data['Sex'].value_counts()	14	14
training_data['Sex']	14	14
data.dropna()	14	14
test.head(5)	14	9
df_test.join(dummies)	14	2
"test[""Age""].fillna(test.groupby(""Title"")[""Age""].transform(""median""), inplace=True)"	14	14
dataset['Age'].iloc[i] = age_med	14	14
train.describe(include='all')	14	11
scores.append(clf.score(X_test,y_test))	14	2
x['Title']	14	12
train['Survived'].value_counts(normalize=True)	14	14
"train[""Age""].fillna(train.groupby(""Title"")[""Age""].transform(""median""), inplace=True)"	14	14
dataset.describe()	14	13
combined.drop('Ticket', inplace=True, axis=1)	14	13
train['Survived'].groupby(train['Parch']).mean()	14	14
"dataset[""Cabin""] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in dataset['Cabin'] ])"	14	14
test_df['PassengerId'],	14	14
dataset['Fare'].hist()	14	14
train.groupby(['Ticket_Lett'])['Survived'].mean()	14	13
"titanic[""Name""].apply(get_title)"	14	14
train['Cabin_num'].replace('an', np.NaN, inplace = True)	14	13
dataset['SmallF'] = dataset['Fsize'].map(lambda s: 1 if  s == 2  else 0)	14	14
train['PassengerId']	14	13
"train[""Sex""][train[""Sex""] == ""female""] = 1"	14	14
train.sample(10)	14	7
titanic.shape	14	13
train['Survived'] = survived	13	7
test['Age'].mean()	13	13
train.drop(['Cabin'], axis = 1)	13	13
train['Ticket_Len'].value_counts()	13	13
test.drop(['Name'], axis = 1)	13	13
data_raw.sample(10) #https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sample.html	13	13
test_set.head()	13	5
titanic_data.head()	13	9
df['Survived'].values	13	13
train['Survived'].groupby(train['Name_Title']).mean()	13	13
plt.boxplot(data1['FamilySize'], showmeans = True, meanline = True)	13	13
train['Ticket']	13	12
training.loc[:,tcols].dropna()	13	7
"train_df[""Age""].mean()"	13	12
test.isnull().any()	13	9
titanic_test.describe()	13	11
train.drop('Survived',1,inplace=True)	13	13
dftrain.info()	13	2
train['Cabin_Letter'].value_counts()	13	13
combined.drop('Cabin', axis=1, inplace=True)	13	13
x[0]	13	10
data.head(2)	13	11
train['Survived'].groupby(train['Cabin_Letter']).mean()	13	13
test.drop(['Cabin'], axis = 1)	13	13
train.drop(['Ticket'], axis = 1)	13	13
train['Survived'].groupby(pd.qcut(train['Fare'], 3)).mean()	13	13
train['Survived'].groupby(pd.qcut(train['Cabin_num'], 3)).mean()	13	13
train.values[:, 1::]	13	13
predictions.astype(int)	13	13
combined.iloc[891:]	13	13
df.dropna()	13	12
train.drop(['Name'], axis = 1)	13	13
training_data[['Sex', 'Survived']]	13	13
test['Survived']	13	9
"titanic[""Title""] = titles"	13	13
"test[""Pclass""][x] #Pclass = 3"	13	13
test_data.copy()	13	6
grouped.median()	13	13
ax[1].set_title('Alone vs Survived')	13	13
train['Parch'].value_counts()	13	13
train['Survived'].corr(train['Cabin_num'])	13	13
X_test.shape	13	13
"test[""Sex""][test[""Sex""] == ""male""] = 0"	13	13
train['Survived'].groupby(pd.qcut(train['Age'],5)).mean()	13	13
data.iloc[:891]	13	13
train['Survived'].groupby(pd.qcut(train['Name_Len'],5)).mean()	13	13
accuracy.std()	13	2
accuracy.mean()	13	2
train['Survived'].groupby(train['Age'].isnull()).mean()	13	13
train['Ticket'].head(n=10)	13	13
"train.drop(labels = [""Survived""],axis = 1)"	13	13
train_df.drop(['Cabin'], axis=1)	13	13
df_train.head(5)	13	11
test_df.describe()	13	12
pd.isnull(Fare):	13	13
train.values[:, 0]	13	13
submit.sample(10)	13	13
"submission.to_csv(""kaggle.csv"", index=False)"	13	13
train['Embarked'].value_counts(normalize=True)	13	13
sns.boxplot(x = 'Pclass', y ='FamilySize', hue = 'Survived', data = data1, ax = axis3)	13	13
train_X.head()	13	5
train.iterrows():	13	6
train['Survived'].groupby(train['Embarked']).mean()	13	13
train['Cabin_Letter'] = train['Cabin'].apply(lambda x: str(x)[0])	13	13
xyz.append(cv_result.mean())	13	13
train['Age'] = train['Age'].astype(int)	13	11
model.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))	12	11
train['Age'].std()	12	12
combined['Singleton'] = combined['FamilySize'].map(lambda s: 1 if s == 1 else 0)	12	12
dataset.fillna(np.nan)	12	12
X_test.info()	12	12
x['Sex']=='Male':	12	10
combined['Singleton'] = combined['FamilySize'].map(lambda s : 1 if s == 1 else 0)	12	12
df.loc[:,cols]	12	6
"dataset[""Title""] = pd.Series(dataset_title)"	12	12
test['AgeGroup'] = test['AgeGroup'].map(age_mapping)	12	12
model.add(Activation('relu'))	12	6
titanicTrain.head()	12	1
train['Fare'] = train['Fare'].astype(int)	12	12
full.sample(5)	12	1
train_df['Title'].value_counts()	12	8
train['Ticket_Lett'].value_counts()	12	12
train['Survived'].groupby(train['Pclass']).mean()	12	12
test.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)	12	12
"data[""Survived""]"	12	9
combined_data.head()	12	2
"titanic[""NameLength""] = titanic[""Name""].apply(lambda x: len(x))"	12	12
train_df.drop(['Ticket'], axis=1)	12	12
train_df.isnull().sum().sort_values(ascending=False)	12	10
data_copy.loc[:,'Pclass'] = data_copy['Pclass'].fillna(data_copy['Pclass'].median())	12	11
data_copy.loc[:,'Sex'] = data_copy['Sex'].fillna('female')	12	11
"dataset[""Fare""] = dataset[""Fare""].fillna(dataset[""Fare""].median())"	12	11
"train[""Cabin""].fillna(train.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	12	12
train.Embarked.dropna().mode()[0]	12	12
df_output['PassengerId'] = test['PassengerId']	12	12
train.head(50)	12	12
ax[0].set_title('Family_Size vs Survived')	12	12
combined.Cabin.fillna('U', inplace=True)	12	12
combined['SmallFamily'] = combined['FamilySize'].map(lambda s : 1 if 2<=s<=4 else 0)	12	12
combined.Cabin.fillna('U',inplace=True)	12	12
dataset['Deck'] = dataset['Deck'].astype(int)	12	12
train['AgeGroup'] = train['AgeGroup'].map(age_mapping)	12	12
data1.iterrows():	12	12
df.columns.values:	12	2
combine.iloc[len(train):]	12	7
titanic_train.describe()	12	9
test_df['ParchBinary'] =   test_df[['Parch']].apply( (lambda x: int(int(x) > 0) ), axis=1)	12	12
predictions.append(1) # survived	12	8
train['Age'].describe()	12	11
titanic_df['MasterMiss'] =     titanic_df[['Name']].apply( get_masterormiss, axis=1 )	12	12
test['Ticket']	12	12
titanic_df.head(5)	12	6
titanic_df['ParchBinary'] =   titanic_df[['Parch']].apply( (lambda x: int(int(x) > 0) ), axis=1)	12	12
test_df.drop(['Cabin'], axis=1)	12	12
result['PassengerId'] = df['PassengerId']	12	12
data_copy.loc[:,'Fare'] = data_copy['Fare'].fillna(data_copy['Fare'].median())	12	11
train['Cabin']	12	11
plt.style.use('bmh')	12	6
"test[""Sex""][test[""Sex""] == ""female""] = 1"	12	12
full_test_predictions.append(test_predictions)	12	10
model.add(Dropout(0.25))	12	7
tab.div(tab.sum(1),axis=0).plot(kind='bar',stacked=True)	12	1
data_copy.loc[:,'Age'] = data_copy['Age'].fillna(data_copy['Age'].median())	12	11
combine.iloc[:len(train)]	12	7
test['Fare'] = test['Fare'].astype(int)	12	12
classifiers.append(AdaBoostClassifier(DecisionTreeClassifier(random_state=random_state),random_state=random_state,learning_rate=0.1))	12	12
ax[0].set_title('Parch vs Survived')	12	12
test_df['MasterMiss'] =     test_df[['Name']].apply( get_masterormiss, axis=1 )	12	12
train_new.shape	12	12
"test[""Fare""].fillna(test.groupby(""Pclass"")[""Fare""].transform(""median""), inplace=True)"	12	12
test['Age'] = test['Age'].astype(int)	12	11
ax[1].set_title('Parch vs Survived')	12	12
data_copy.loc[:,'Embarked'] = data_copy['Embarked'].fillna('S')	12	11
df_test['PassengerId'],	12	8
train['Fare'].hist(color='green',bins=40,figsize=(8,4))	12	12
classifiers.append(MLPClassifier(random_state=random_state))	12	12
glbl['show_figs']:	12	1
train['FareBand'] = pd.qcut(train['Fare'], 4)	12	12
ax[1].set_title('SibSp vs Survived')	12	12
X_test.columns.values,	11	2
df['Age'] = df['Age'].astype(int)	11	11
train_data.head(3)	11	8
train_df['Age'].isnull().sum()	11	9
train_df['Age'] = train_df['Age'].astype(int)	11	11
train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)	11	11
"titanic_df.drop(""Survived"", axis=1)"	11	11
"train_df[""Age""].isnull().sum()"	11	10
dataset['Deck'] = dataset['Deck'].map(deck)	11	11
train['AgeBand'] = pd.cut(train['Age'], 5)	11	11
y.mean()	11	11
test['Fare'].mean()	11	11
titanic_test.info()	11	11
train.drop(['Age'], axis = 1)	11	11
model.add(Dense(4, kernel_initializer=init, activation='relu'))	11	3
test_df['Fare'] = test_df['Fare'].fillna(0)	11	10
data_val['Survived'] = mytree(data_val).astype(int)	11	11
"test.drop(labels=[""Survived""],axis = 1,inplace=True)"	11	11
"test[""Embarked""][test[""Embarked""] == ""S""] = 0"	11	11
train_df.head(20)	11	11
"dataset[""Sex""] = dataset[""Sex""].map({""male"": 0, ""female"":1})"	11	11
"test[""Cabin""].fillna(test.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	11	11
df['Age'].mean()	11	11
titanic_df['Age'].max()	11	4
df2.head()	11	8
combined.Embarked.fillna('S',inplace=True)	11	11
dftest.info()	11	2
dftrain.head()	11	2
ax[1].set_title('Pclass:Survived vs Dead')	11	11
test_df.values	11	11
all_data.isnull().sum()	11	7
x_test.head()	11	11
a.append(pd.Series(metrics.accuracy_score(prediction,test_Y)))	11	11
Age.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='red')	11	11
train_ft.head()	11	3
test.drop(['Name'], axis=1)	11	11
"test[""Age""] = test[""Age""].fillna(-0.5)"	11	11
training.sample(5)	11	4
box.T.boxplot()	11	11
output.to_csv('titanic-predictions.csv', index = False)	11	11
models.items():	11	4
model.add(Dense(8, kernel_initializer=init, activation='relu'))	11	3
test.drop(['Age'], axis = 1)	11	11
"test[""FamilySize""] = test[""SibSp""] + test[""Parch""] + 1"	11	11
combined.drop('Ticket',inplace=True,axis=1)	11	11
data_val['Survived'] = grid_hard.predict(data_val[data1_x_bin])	11	11
X_train.shape[1]	11	10
train['Age']	11	7
combined.ix[0:890]	11	11
dataset.loc[:,'Survived']	11	11
combined.head(5)	11	2
combined.ix[891:]	11	11
Survived.mean()	11	6
model.add(Dropout(0.1))	11	6
combined['LargeFamily'] = combined['FamilySize'].map(lambda s : 1 if 5<=s else 0)	11	11
train.loc[Outliers_to_drop] # Show the outliers rows	11	11
df['Embarked'] = df['Embarked'].fillna('S')	11	11
"titanic_test[""NameLength""] = titanic_test[""Name""].apply(lambda x: len(x))"	11	11
df['IsAlone'] = 0	11	11
train['Age'].hist(bins=30,color='darkred',alpha=0.7)	11	11
submission.head(10)	11	10
"test[""Embarked""][test[""Embarked""] == ""Q""] = 2"	11	11
train_test.head()	11	3
train_df['Survived'].values	11	9
x.head()	11	6
"test[""Embarked""][test[""Embarked""] == ""C""] = 1"	11	11
dataset.loc[:,['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	11	11
test['Embarked'] = test['Embarked'].fillna('S')	11	11
data_val[['PassengerId','Survived']]	11	11
training_data[['Sex', 'Survived']].groupby(['Sex']).mean()	11	11
"test[""AgeGroup""][x] == ""Unknown"":"	10	10
df.drop('PassengerId', axis=1, inplace=True)	10	5
train_set.head(5)	10	2
test['Fare'] = test['Fare'].fillna(test['Fare'].median())	10	10
"train[[""Pclass"", ""Sex"", ""Age"", ""Fare""]].values"	10	10
testing.head()	10	4
submission.to_csv('submission.csv',index=False)	10	10
test['FamilySize'] = test['SibSp'] + test['Parch']	10	9
df['Embarked'] = pd.Categorical(df['Embarked'])	10	5
test_df.join(sex_dummies_test)	10	10
titanic_df.join(sex_dummies_titanic)	10	10
data.corr()	10	9
data_test.info()	10	9
"dataset[""Cabin""].isnull().sum()"	10	10
data['Sex'].replace(['male','female'],[0,1],inplace=True)	10	10
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Pclass'], columns=['Sex'], aggfunc=np.sum)	10	10
"dataset[""Cabin""].describe()"	10	10
plot.hist(edgecolor='black', linewidth=0.5)	10	2
data1['Random_Score'] = 0 #assume prediction wrong	10	10
models.append(('LR', LogisticRegression()))	10	6
full_predictions.append(predictions)	10	10
test_new.shape	10	10
data['Survived'].values	10	5
"df[""Survived""]"	10	7
combined.groupby(['Sex','Pclass','Title'])	10	10
pd.isnull(cabin):	10	7
train_df.values	10	10
train_df.append(test_df)	10	10
"df[""Age_categories""] = pd.cut(df[""Age""],cut_points,labels=label_names)"	10	10
y_train.head()	10	10
titanicANDtest_df.join(pclass_dummies_titanicANDtest)	10	10
"submission.to_csv(""titanic.csv"", index=False)"	10	10
data['Embarked'] = data['Embarked'].fillna('S')	10	10
df['Title'] = df['Title'].replace('Mme', 'Mrs')	10	10
predictions.append(0) # perished	10	10
"dataset[""Pclass""] = dataset[""Pclass""].astype(""category"")"	10	10
"dataset[""Title""] = dataset[""Title""].astype(int)"	10	10
"train[""AgeGroup""][x] == ""Unknown"":"	10	10
"dataset[""Name""].head()"	10	10
"test_df[""Survived""] = -1"	10	10
Age.plot.hist(ax=ax[1],color='green',bins=20,edgecolor='black')	10	10
data['FamilySize'] = data['SibSp'] + data['Parch'] + 1	10	10
combined.Fare.fillna(combined.Fare.mean(),inplace=True)	10	10
titanicANDtest_df.join(sex_dummies_titanicANDtest)	10	10
"train.describe(include = ""all"")"	10	9
sub.head()	10	10
results.head()	10	9
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Pclass'], columns=['Sex'], aggfunc=np.mean)	10	10
titanic_df.describe()	10	9
df['Title'] = df['Title'].replace('Mlle', 'Miss')	10	10
in ['Mlle', 'Ms']:	10	10
"train.pivot_table(index=""Sex"",values=""Survived"")"	10	10
data.copy()	10	10
test_data['PassengerId']	10	10
train.head(8)	10	8
"row[""Name""].split("","")[0]"	10	10
test['Age'].std()	10	10
data_train.sample(3)	10	10
data1.loc[(data1['Survived'] == data1['Random_Predict']), 'Random_Score'] = 1 #set to 1 for correct prediction	10	10
dataset['Deck'] = dataset['Deck'].fillna(0)	10	10
train.head(1)	10	8
"dataset[""Embarked""] = dataset[""Embarked""].fillna(""S"")"	10	10
"dataset.drop(labels = [""Name""], axis = 1, inplace = True)"	10	10
train_df['Fare'] = train_df['Fare'].astype(int)	10	10
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Pclass'], columns=['Sex'], aggfunc='count')	10	10
"train[""Pclass""].value_counts()"	10	10
training_data.hist(figsize=(10,10))	10	10
df.drop('Cabin', axis=1, inplace=True)	10	10
data1.set_value(index, 'Random_Predict', 1) #predict survived/1	10	10
combined.apply(lambda r : fillAges(r) if np.isnan(r['Age']) else r['Age'], axis=1)	10	10
sex.head()	10	9
data.groupby(['Sex','Survived'])['Survived'].count()	10	10
train_df.head(5)	10	9
titanic_test.isnull().sum()	10	10
dataset['relatives'] = dataset['SibSp'] + dataset['Parch']	10	10
data['Embarked'].fillna('S',inplace=True)	10	10
X.describe()	10	9
dataset['not_alone'] = dataset['not_alone'].astype(int)	10	10
"df[""Fare""] = df[""Fare""].fillna(median_fare)"	10	10
"train[""Age""].isnull().sum()"	10	7
scaler.transform(x_test)	10	6
dataset['Fare'] = dataset['Fare'].fillna(0)	10	10
test_dataset.head()	10	4
"train[[""Sex"",""Survived""]].groupby('Sex').mean()"	10	10
test['Fare'].fillna(test['Fare'].dropna().median(), inplace=True)	10	10
df_train.corr()	10	8
data1.set_value(index, 'Random_Predict', 0) #predict died/0	10	10
"dataset[""Title""] = dataset[""Title""].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	10	10
testset.loc[:,['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	10	10
training_data.corr()	10	10
combined.drop('Cabin',axis=1,inplace=True)	10	10
X2.shape[1] # Features	10	1
comb.head()	9	5
df['Name']	9	9
datasets[0]	9	1
dataset.loc[dataset['relatives'] > 0, 'not_alone'] = 0	9	9
"titanicANDtest_df[""Embarked""] = titanicANDtest_df[""Embarked""].fillna(""S"")"	9	9
train_df.drop('Survived', axis=1)	9	9
df_train.drop('Survived', axis=1)	9	9
"titanic.loc[(titanic[""FamilySize""] > 1)  &  (titanic[""FamilySize""] < 5) , ""FsizeD""] = 'small'"	9	8
data_df.head()	9	2
dataset['Title'] = dataset['Title'].map(titles)	9	9
test['Name']	9	9
cabin[0]	9	9
"titanic.loc[titanic[""FamilySize""] == 1, ""FsizeD""] = 'singleton'"	9	8
"test[""AgeGroup""][x] = age_title_mapping[test[""Title""][x]]"	9	9
in ['error', 'ignore']:	9	9
combined.drop('index', inplace=True, axis=1)	9	9
df_train.append(df_test)	9	7
data.loc[(data.Age.isnull())&(data.Initial=='Miss'),'Age']=22	9	9
std_scaler.transform(X_test)	9	6
model.add(Dropout(0.2))	9	6
"titanic[""FamilySize""] = titanic[""SibSp""] + titanic[""Parch""]+1"	9	8
df_output[['PassengerId','Survived']].to_csv('output.csv',index=False)	9	9
y.head()	9	9
data_raw.head()	9	3
all_data.info()	9	7
test['Fare'] = test['Fare'].fillna(test['Fare'].mean())	9	9
train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)	9	9
data[['Sex_male', 'Fare', 'Age','Pclass', 'SibSp']]	9	9
df_train.shape	9	9
test_data['PassengerId'],	9	9
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Female', 'MasterMiss'],                     columns=['Embarked', 'Pclass'],                     aggfunc=np.mean)	9	9
"train[""CabinBool""] = (train[""Cabin""].notnull().astype('int'))"	9	9
data.loc[(data['Age']>32)&(data['Age']<=48),'Age_band']=2	9	9
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Female', 'MasterMiss'], columns=['Pclass'],                     aggfunc='count')	9	9
test_set.isnull().sum()	9	6
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Female', 'MasterMiss'],                     columns=['Embarked', 'Pclass'],                     aggfunc=np.sum)	9	9
x['Age']	9	5
train_df.dtypes	9	8
titanicANDtest_df['MasterMiss'] =     titanicANDtest_df[['Name']].apply( get_masterormiss, axis=1 )	9	9
train_set.head()	9	8
data['Initial']=0	9	9
combined.drop('index',inplace=True,axis=1)	9	9
"titanic_test[""FamilySize""] = titanic_test[""SibSp""] + titanic_test[""Parch""]+1"	9	8
test_df['Age'].mean()	9	9
"TestFile[""PassengerId""].copy()"	9	2
df_train.dtypes	9	6
titanic_df['SibSpBinary'] =   titanic_df[['SibSp']].apply( (lambda x: int(int(x) > 0) ), axis=1)	9	9
column[0]	9	8
"dataset[""Cabin""][dataset[""Cabin""].notnull()].head()"	9	9
train['FamilySize'] = train['SibSp'] + train['Parch']	9	8
dataset.loc[dataset['Age'] <= 16, 'Age'] = 0	9	9
titanicANDtest_df['SibSpBinary'] =   titanicANDtest_df[['SibSp']].apply( (lambda x: int(int(x) > 0) ), axis=1)	9	9
"train.pivot_table(index=""Pclass"",values=""Survived"")"	9	9
data['Alone']=0	9	9
age_df.loc[ (df.Age.notnull()) ]# known Age values	9	9
train_df['Age'].mean()	9	9
titanicANDtest_df['ParchBinary'] =   titanicANDtest_df[['Parch']].apply( (lambda x: int(int(x) > 0) ), axis=1)	9	9
ticket.replace('/', '')	9	9
scaler.transform(x_train)	9	5
fresh_df.copy()	9	1
data.loc[data['Age']<=16,'Age_band']=0	9	9
DF.copy()	9	1
test_acc.append(accuracy_score(Y_test, Y_pred))	9	1
data['Fare_cat']=0	9	9
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Female', 'MasterMiss'], columns=['Pclass'],                     aggfunc=np.mean)	9	9
results.append(model_results, ignore_index = True)	9	2
"titanic[""Survived""],"	9	9
train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	9	9
training_data.head()	9	2
models.append(('KNN', KNeighborsClassifier()))	9	6
"dataset['Cabin'] = dataset['Cabin'].fillna(""U0"")"	9	9
"results.to_csv(""ensemble_python_voting.csv"",index=False)"	9	9
"titanic_test.loc[(titanic_test[""FamilySize""] >1) & (titanic_test[""FamilySize""] <5) , ""FsizeD""] = 'small'"	9	8
dataset.loc[dataset['relatives'] == 0, 'not_alone'] = 1	9	9
"titanic_test.loc[titanic_test[""FamilySize""] == 1, ""FsizeD""] = 'singleton'"	9	8
df.reset_index()	9	4
"train[""AgeGroup""][x] = age_title_mapping[train[""Title""][x]]"	9	9
ax[0].set_title('Number Of Passengers By Pclass')	9	9
train_acc.append(accuracy_score(Y_train, Y_pred_train))	9	1
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Female', 'MasterMiss'],                     columns=['Embarked', 'Pclass'],                     aggfunc='count')	9	9
np.cumsum(n_values)	9	9
ticket.replace('.', '')	9	9
test['Age'] = test[['Age','Pclass']].apply(impute_age,axis=1)	9	9
data.loc[(data.Age.isnull())&(data.Initial=='Mrs'),'Age']=36	9	9
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Female', 'MasterMiss'], columns=['Pclass'],                     aggfunc=np.sum)	9	9
"titanic_test.loc[titanic_test[""FamilySize""] >4, ""FsizeD""] = 'large'"	9	8
titanicANDtest_df.join(embark_dummies_titanicANDtest)	9	9
in ['onehot', 'onehot-dense', 'ordinal']:	9	9
dfTrain.head()	9	3
"dataset[""Title""] = dataset[""Title""].map({""Master"":0, ""Miss"":1, ""Ms"" : 1 , ""Mme"":1, ""Mlle"":1, ""Mrs"":1, ""Mr"":2, ""Rare"":3})"	9	9
titanicTest.head()	9	1
grouped_test.median()	9	9
X_int.astype(self.dtype, copy=False)	9	9
train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)	9	9
column[1]	9	8
"dataset['Deck'] = dataset['Cabin'].map(lambda x: re.compile(""([a-zA-Z]+)"").search(x).group())"	9	9
train.drop(['Name', 'PassengerId'], axis=1)	9	9
data['Age_band']=0	9	9
"dataset[""Cabin""].head()"	9	9
df_test.shape	9	8
ax[0].set_title('SibSp vs Survived')	9	9
"test[""CabinBool""] = (test[""Cabin""].notnull().astype('int'))"	9	9
scaler.transform(X)	9	8
test['Cabin']	9	9
train_X.shape	9	7
data.groupby(['Fare_Range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')	9	9
age_df.loc[ (df.Age.isnull()) ]# null Ages	9	9
train.Age.isnull().sum()	9	8
train.isnull().sum().sort_values(ascending=False)	9	8
"train.drop(""Survived"",axis=1)"	9	9
data.loc[(data.Age.isnull())&(data.Initial=='Mr'),'Age']=33	9	9
"titanic.loc[titanic[""FamilySize""] >4, ""FsizeD""] = 'large'"	9	8
"dataset[""Age""][((dataset['SibSp'] == dataset.iloc[i][""SibSp""]) & (dataset['Parch'] == dataset.iloc[i][""Parch""]) & (dataset['Pclass'] == dataset.iloc[i][""Pclass""]))].median()"	9	9
"test[""Embarked""] = test[""Embarked""].fillna(""S"")"	9	9
data.loc[(data.Age.isnull())&(data.Initial=='Master'),'Age']=5	9	9
df['Title'] = df['Title'].replace('Ms', 'Miss')	9	9
data.loc[(data['Age']>16)&(data['Age']<=32),'Age_band']=1	9	9
data.loc[(data['Age']>48)&(data['Age']<=64),'Age_band']=3	9	9
"dataset.drop(labels = [""PassengerId""], axis = 1, inplace = True)"	9	9
"titanic[""Embarked""] = titanic[""Embarked""].fillna(""S"")"	9	7
test_df['SibSpBinary'] =   test_df[['SibSp']].apply( (lambda x: int(int(x) > 0) ), axis=1)	9	9
data.loc[(data.Age.isnull())&(data.Initial=='Other'),'Age']=46	8	8
"titanic.TicketNumber.fillna(titanic[""TicketNumber""].median(), inplace=True)"	8	8
"titanic_test.loc[titanic_test[""Title""] == ""Rev"", ""Title""] = 'Rare Title'"	8	8
data[['Sex','Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])	8	8
titanic.Deck.fillna('Z', inplace=True)	8	8
grouped_median.loc['female', 3, 'Mrs']['Age']	8	8
"train.loc[train[""Sex""] == ""male"", ""Sex""] = 0"	8	8
"titanic.loc[titanic[""Sex""] == ""female"", ""Sex""] = 1"	8	8
train[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)	8	8
titanic_test['NlengthD'] = pd.cut(titanic_test['NameLength'], bins, labels=group_names)	8	8
mini_batches.append(mini_batch)	8	4
data.head(10)	8	6
model.add(Dense(units = 5, kernel_initializer = 'uniform', activation = 'relu'))	8	8
data['Title'] = data['Title'].replace('Mme', 'Mrs')	8	8
"titanic.loc[titanic[""Title""] == ""Mlle"", ""Title""] = 'Miss'"	8	8
grouped_median.loc['female', 1, 'Mrs']['Age']	8	8
"dataset[""Fare""].isnull().sum()"	8	8
grouped_median.loc['male', 2, 'Officer']['Age']	8	8
"titanic_test.loc[titanic_test[""Title""] == ""Capt"", ""Title""] = 'Rare Title'"	8	8
dataset['Embarked'] = dataset['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)	8	8
"test[""Age""].isnull().sum()"	8	6
"titanic.loc[titanic[""Title""] == ""Major"", ""Title""] = 'Rare Title'"	8	8
test_df['Age'].isnull().sum()	8	7
grouped_median.loc['female', 3, 'Miss']['Age']	8	8
shape[0] == 1:	8	2
df['Sex'] = pd.Categorical(df['Sex'])	8	5
"titanic.loc[titanic[""Title""] == ""Dona"", ""Title""] = 'Rare Title'"	8	8
"titanic_test.loc[titanic_test[""Title""] == ""Sir"", ""Title""] = 'Rare Title'"	8	8
submission.to_csv(filename, index=False)	8	7
train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean()	8	8
grouped_median.loc['male', 1, 'Mr']['Age']	8	8
PassengerId.count()	8	1
"titanic_test.loc[titanic_test[""Title""] == ""Dona"", ""Title""] = 'Rare Title'"	8	8
"titanic[""Deck""].unique() # Z is for null values"	8	8
test.tail()	8	8
test_data.values	8	8
dataset.loc[ dataset['Age'] <= 16, 'Age']                          = 0	8	8
"titanic_test.loc[titanic_test[""Title""] == ""Countess"", ""Title""] = 'Rare Title'"	8	8
grouped_median.loc['male', 2, 'Mr']['Age']	8	8
submission.to_csv(filename,index=False)	8	8
submission.sort_values('PassengerId', inplace=True)	8	3
"titanic[""Deck""]=titanic.Cabin.str[0]"	8	8
train['Age'].fillna(train['Age'].median(), inplace=True)	8	8
grouped.groups.items():	8	2
"titanic_test.loc[titanic_test[""Title""] == ""Lady"", ""Title""] = 'Rare Title'"	8	8
dataset['Sex'] = dataset['Sex'].map(genders)	8	8
test_df.values.astype(float)	8	3
"train[""Embarked""][train[""Embarked""] == ""S""] = 0"	8	8
array_name[0]	8	2
grouped_median.loc['male', 3, 'Master']['Age']	8	8
"titanic[""Title""].value_counts()"	8	8
train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()	8	8
titanic['NlengthD'] = pd.cut(titanic['NameLength'], bins, labels=group_names)	8	8
titanic_test_data.head()	8	5
"titanic_test.loc[titanic_test[""Title""] == ""Mlle"", ""Title""] = 'Miss'"	8	8
Age.hist(grid=0, edgecolor='black', bins=20, alpha=0.5)	8	2
model.add(Dense(2, activation='softmax'))	8	8
data.loc[(data['Fare']>14.454)&(data['Fare']<=31),'Fare_cat']=2	8	8
"titanic_test.loc[titanic_test[""Title""] == ""Jonkheer"", ""Title""] = 'Rare Title'"	8	8
"titanic.loc[titanic[""Title""] == ""Lady"", ""Title""] = 'Rare Title'"	8	8
data['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)	8	8
"titanic.loc[titanic[""Title""] == ""Capt"", ""Title""] = 'Rare Title'"	8	8
"titanic_test.loc[titanic_test[""Title""] == ""Col"", ""Title""] = 'Rare Title'"	8	8
modelScores.append(round(CV.mean(),3))	8	1
tab.div(tab.sum(1).astype(float), axis=0)	8	6
"titanic.loc[titanic[""Title""] == ""Sir"", ""Title""] = 'Rare Title'"	8	8
"titanic_test.loc[titanic_test[""Title""] == ""Mme"", ""Title""] = 'Mrs'"	8	8
data['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)	8	8
grouped_median.loc['female', 2, 'Mrs']['Age']	8	8
train_data.drop('Cabin', axis=1, inplace=True)	8	8
train_df.drop(['PassengerId'], axis=1)	8	8
ax.spines['right'].set_visible(False)	8	4
"train_df.drop(""Survived"",axis=1)"	8	7
"dataset[""Embarked""].isnull().sum()"	8	8
Age.hist(grid=0, edgecolor='black', bins=20)	8	2
"titanic.loc[titanic[""Title""] == ""Jonkheer"", ""Title""] = 'Rare Title'"	8	8
train['FamilySize'] = train['SibSp'] + train['Parch'] + 1	8	8
train.drop(['FareBand'], axis=1)	8	8
model.add(Dense(units = 20, kernel_initializer = 'uniform', activation = 'relu'))	8	1
df.Age.mean()	8	7
train_reduced.shape	8	8
test_df['Age'].std()	8	8
train['Embarked'].fillna('S', inplace=True)	8	8
results['mean_test_score'][candidate],	8	8
grouped_median.loc['female', 1, 'Royalty']['Age']	8	8
data.dtypes	8	5
grouped_median.loc['female', 1, 'Officer']['Age']	8	8
"titanic.loc[titanic[""Title""] == ""Ms"", ""Title""] = 'Miss'"	8	8
test.dtypes	8	7
"titanic_test[""TicketNumber""] = titanic_test[""TicketNumber""].apply(pd.to_numeric)"	8	8
dataset.loc[dataset['Fare'] <= 7.91, 'Fare'] = 0	8	8
concat.head(10)	8	2
"titanic_test.TicketNumber.fillna(titanic_test[""TicketNumber""].median(), inplace=True)"	8	8
test_reduced.shape	8	8
"cab.div(cab.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True)"	8	6
"titanic_test.loc[titanic_test[""Title""] == ""Dr"", ""Title""] = 'Rare Title'"	8	8
"titanic.loc[titanic[""Title""] == ""Don"", ""Title""] = 'Rare Title'"	8	8
"dataset[""Title""].head()"	8	8
titanic_train['Survived']	8	7
train_df.drop('Survived', 1)	8	8
in ['Don', 'Major', 'Capt', 'Jonkheer', 'Rev', 'Col']:	8	8
data.loc[(data['Fare']>31)&(data['Fare']<=513),'Fare_cat']=3	8	8
"titanic[""Embarked""] = titanic[""Embarked""].fillna('C')"	8	8
training_data[['Pclass', 'Survived', 'Sex']].groupby('Pclass').mean()	8	8
data.loc[data['Age']>64,'Age_band']=4	8	8
train.dropna()	8	8
data['Family_Size']=0	8	8
df.drop('Name', axis=1, inplace=True)	8	7
"titanic.loc[titanic[""Title""] == ""Dr"", ""Title""] = 'Rare Title'"	8	8
ax.spines['top'].set_visible(False)	8	4
"titanic[""Ticket""].tail()"	8	8
"titanic[""TicketNumber""] = titanic[""TicketNumber""].apply(pd.to_numeric)"	8	8
train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)	8	8
grouped_median.loc['male', 3, 'Mr']['Age']	8	8
"titanic_test.loc[titanic_test[""Title""] == ""Ms"", ""Title""] = 'Miss'"	8	8
trainData.shape[0],	8	1
"titanic_test.loc[titanic_test[""Title""] == ""Don"", ""Title""] = 'Rare Title'"	8	8
results.sort_values(by='Score', ascending=False)	8	8
data.loc[data['PassengerId'] == passID, 'Family_Survival'] = 1	8	4
data.loc[data['PassengerId'] == passID, 'Family_Survival'] = 0	8	4
titanic_test.Deck.fillna('Z', inplace=True)	8	8
results.append(cv_results)	8	6
Survived.count()	8	4
"titanic_test[""Deck""]=titanic_test.Cabin.str[0]"	8	8
df_raw.copy()	8	8
grouped_median.loc['male', 1, 'Officer']['Age']	8	8
"titanic[""TicketNumber""] = titanic[""Ticket""].str.extract('(\d{2,})', expand=True)"	8	8
train['Age'] = train['Age'].fillna(train['Age'].median())	8	8
result['Survived'] = yhat	8	8
"titanic_test[""TicketNumber""] = titanic_test[""Ticket""].str.extract('(\d{2,})', expand=True)"	8	8
"titanic_test.loc[titanic_test[""Title""] == ""Major"", ""Title""] = 'Rare Title'"	8	8
dataset['Embarked'] = dataset['Embarked'].map(ports)	8	8
y.shape	8	7
grouped_median.loc['male', 1, 'Royalty']['Age']	8	8
data['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)	8	8
train.drop('Cabin', axis = 1, inplace = True)	8	8
models.append(('RF', RandomForestClassifier()))	8	4
df_test.values	8	8
data.drop(['Ticket', 'Cabin'], axis = 1)	8	8
data['Fare_Range']=pd.qcut(data['Fare'],4)	8	8
final_test.head()	8	7
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr',                                            'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	8	8
titles.add(name.split(',')[1].split('.')[0].strip())	8	8
"titanic.loc[titanic[""Title""] == ""Rev"", ""Title""] = 'Rare Title'"	8	8
"titanic[""Deck""].unique() # 0 is for null values"	8	8
"titanic.loc[titanic[""Title""] == ""Col"", ""Title""] = 'Rare Title'"	8	8
train_set.describe()	8	6
train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()	8	8
grouped_median.loc['female', 1, 'Miss']['Age']	8	8
"titanic.loc[titanic[""Title""] == ""Mme"", ""Title""] = 'Mrs'"	8	8
grouped_median.loc['female', 2, 'Miss']['Age']	8	8
X.fillna(self.fill)	8	8
grouped_median.loc['male', 1, 'Master']['Age']	8	8
data.loc[(data['Fare']>7.91)&(data['Fare']<=14.454),'Fare_cat']=1	8	8
"train[""Embarked""][train[""Embarked""] == ""C""] = 1"	8	8
data.loc[data['Fare']<=7.91,'Fare_cat']=0	8	8
"titanic.corr()#[""Survived""]"	8	8
df_test['PassengerId']	8	8
in ['Countess', 'Mme']:	8	8
combined.head(891)	8	8
train['Survived'], test_size=0.30,	8	8
final_train['Survived']	8	4
"train.groupby(""Title"")[""Age""].transform(""median"")"	8	8
"titanic_test[""Title""].value_counts()"	8	8
"titanic.loc[titanic[""Title""] == ""Countess"", ""Title""] = 'Rare Title'"	8	8
grouped_median.loc['male', 2, 'Master']['Age']	8	8
data_test.isnull().sum()	8	8
train_data.dtypes	8	8
Fare.mean()	7	5
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Pch', 'Female', 'MasterMiss'],                     columns=['Embarked', 'Pclass'],                     aggfunc=np.mean)	7	7
training_df.head()	7	4
test_df['Pch'] = test_df['ParchBinary']	7	7
combined['LargeFamily'] = combined['FamilySize'].map(lambda s: 1 if 5<=s else 0)	7	7
submission['Survived'] = prediction	7	7
dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 2	7	7
dataset.loc[ dataset['Age'] <= 11, 'Age'] = 0	7	7
df['Title']=0	7	5
submit.shape	7	7
"train.loc[train[""Embarked""] == ""C"", ""Embarked""] = 1"	7	7
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Pch', 'Female', 'MasterMiss'],                     columns=['Embarked', 'Pclass'],                     aggfunc='count')	7	7
submission.shape	7	7
titanic_df.head(10)	7	5
dataset['Age_Class']= dataset['Age']* dataset['Pclass']	7	7
dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 1	7	7
X.fillna(X.mean())	7	7
"train.loc[train[""Embarked""] == ""Q"", ""Embarked""] = 2"	7	7
modelSTD.append(round(CV.std(),3))	7	1
test.describe(include='all')	7	6
dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 33), 'Age'] = 4	7	7
titanicANDtest_df['Pch'] = titanicANDtest_df['ParchBinary']	7	7
test_data.head(10)	7	6
test['Survived'] = survived	7	7
pd.pivot_table(titanic_df, values = 'Survived',              index = ['Fem', 'MMs', 'SbS', 'Pch'],              columns=['Pclass', 'Embarked'],              aggfunc=np.sum)	7	7
data.loc[data.Family_Size==0,'Alone']=1#Alone	7	7
titanic_df['m'] = titanic_df['MasterMiss']	7	7
pd.pivot_table(titanic_df, values = 'Survived',              index = ['Fem', 'MMs', 'SbS', 'Pch'],              columns=['Pclass', 'Embarked'],              aggfunc=np.mean )	7	7
X.info()	7	6
model.add(Dropout(0.3))	7	5
P_ID.head()	7	7
combined.drop(['index', 'PassengerId'], inplace=True, axis=1)	7	7
test['PassengerId'] = P_ID	7	7
df.values	7	7
cols[2]	7	5
test.drop(['PassengerId'],axis=1,inplace=True)	7	7
titanicANDtest_df['Sb'] = titanicANDtest_df['SibSpBinary']	7	7
dataset.loc[ dataset['Fare'] > 31, 'Fare']                                  = 3	7	7
testingset.head()	7	1
test_df['MMs'] = test_df['MasterMiss']	7	7
titanic_df['s'] = titanic_df['SibSpBinary']	7	7
solution.to_csv('./my_prediction.csv', index = False)	7	7
train['Survived'], test_size = 0.30,	7	7
data.drop(['Name','Age','Ticket','Fare','Cabin','Fare_Range','PassengerId'],axis=1,inplace=True)	7	7
test['Age']	7	5
X.values	7	7
dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 66), 'Age'] = 6	7	7
"ax[0].set_ylabel(""Survived Fraction"")"	7	1
"test_df[""YourCoin5""] = test_df[ [""Female"",""MasterMiss"",""SibSpBinary"",""ParchBinary"",""Pclass"",""Embarked""] ].apply(myCoin5, axis=1)"	7	7
test.isnull().sum().sort_values(ascending=False)	7	6
test_data.drop('Cabin', axis=1, inplace=True)	7	7
"train[""Embarked""][train[""Embarked""] == ""S"" ] = 0"	7	7
data['Embarked'].fillna('S', inplace=True)	7	7
df.loc[df['FamilySize'] == 1, 'IsAlone'] = 1	7	7
data_to_submit.to_csv('csv_to_submit.csv', index = False)	7	7
test['Fare'].fillna(mean, inplace=True)	7	7
"test[[""Pclass"", ""Sex"", ""Age"", ""Fare""]].values"	7	6
all_data.shape	7	4
"titanic.loc[titanic[""Embarked""] == ""Q"", ""Embarked""] = 2"	7	7
model.add(Dense(32, kernel_initializer=init, activation='relu'))	7	1
missing_data.head(5)	7	7
test_data.loc[np.isnan(test_data.Age), 'Age'] = np.mean(data['Age'])	7	7
models.append(('GBC', GradientBoostingClassifier()))	7	3
titanicANDtest_df['Pc'] = titanicANDtest_df['ParchBinary']	7	7
test.drop(['Ticket', 'Cabin'], axis=1)	7	7
final_train.head()	7	7
test_set.head(n=10)	7	1
test['Survived'] = np.nan	7	7
titanic_test.head().T	7	7
"train.loc[train[""Embarked""] == ""S"", ""Embarked""] = 0"	7	7
titanicANDtest_df['m'] = titanicANDtest_df['MasterMiss']	7	7
dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 27), 'Age'] = 3	7	7
titanicANDtest_df['p'] = titanicANDtest_df['ParchBinary']	7	7
"train.drop([""Survived""], axis = 1)"	7	5
titanic['Survived']	7	7
x_train.shape	7	7
titanic_df['F'] = titanic_df['Female']	7	7
train['Cabin'].unique()	7	7
titanicANDtest_df['MMs'] = titanicANDtest_df['MasterMiss']	7	7
train['Fare'].describe()	7	7
T.style.background_gradient(cmap='summer_r') #Checking the Initials with the Sex	7	7
"titanic[""Age""] = titanic[""Age""].fillna(titanic[""Age""].median())"	7	6
data['Pclass'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'],ax=ax[0])	7	7
model.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu'))	7	7
corr.columns.values,yticklabels=corr.columns.values,mask=mask, cmap=cmap, vmax=1, center=0,	7	2
scores.append(np.mean(scoreCV))	7	1
X_train.shape, y_train.shape, X_test.shape	7	7
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['Pch', 'Female', 'MasterMiss'],                     columns=['Embarked', 'Pclass'],                     aggfunc=np.sum)	7	7
model.add(Dense(16, kernel_initializer=init, activation='relu'))	7	1
labels.append(col)	7	6
data.groupby('Pclass').mean()['Fare'].plot(kind='bar',figsize=(13,8), ax = ax)	7	7
titanic_df['Age'].mean()	7	7
train['Age'] = train[['Age','Pclass']].apply(AgeImputation,axis=1)	7	7
titanic_df['SbS'] = titanic_df['SibSpBinary']	7	7
"titanic.loc[titanic[""Sex""] == ""male"", ""Sex""] = 0"	7	7
train_df['Embarked'].value_counts()	7	6
test_df['p'] = test_df['ParchBinary']	7	7
model.add(Dense(1, kernel_initializer=init, activation='sigmoid'))	7	3
sml.train.head()	7	3
index.values	7	4
titanicANDtest_df['SbS'] = titanicANDtest_df['SibSpBinary']	7	7
train_data.shape	7	7
test['IsAlone'] = 0	7	7
"testing[""PassengerId""],"	7	7
"train.loc[train[""Sex""] == ""female"", ""Sex""] = 1"	7	7
"test_df[""YourCoin5""].tail(5)"	7	7
test.loc[:,cols]	7	7
train.head(20)	7	7
train_set['Survived']	7	6
test.loc[:,'PassengerId'],	7	7
"titanic.loc[titanic[""Embarked""] == ""C"", ""Embarked""] = 1"	7	7
df.isnull().sum()/len(df)	7	7
titanic_df['p'] = titanic_df['ParchBinary']	7	7
titanic_df['Pch'] = titanic_df['ParchBinary']	7	7
titanicANDtest_df['Ms'] = titanicANDtest_df['MasterMiss']	7	7
data_train.isnull().sum()	7	6
df['Age'].std()	7	7
test_df['s'] = test_df['SibSpBinary']	7	7
"train[""Embarked""][train[""Embarked""] == ""C"" ] = 1"	7	7
X_train.values	7	6
df.to_csv('submission.csv',header=True, index=False)	7	7
test_df['Pc'] = test_df['ParchBinary']	7	7
"dataset[""Age""].isnull().sum()"	7	7
test_df['F'] = test_df['Female']	7	7
df['Age'].isnull().sum()	7	7
col[0]	7	6
dataset['Survived']	7	7
train_df.head(3)	7	6
df_test.loc[:,cols]	7	7
train['Embarked'].fillna('S',inplace=True)	7	7
train.Age.mean()	7	7
combined['SmallFamily'] = combined['FamilySize'].map(lambda s: 1 if 2<=s<=4 else 0)	7	7
y_test.astype(int)	7	4
titanic_df['Fem'] = titanic_df['Female']	7	7
dataset['Fare_Per_Person'] = dataset['Fare_Per_Person'].astype(int)	7	7
train.drop('Cabin', axis=1, inplace=True)	7	7
trainData.head()	7	6
Age.mean()	7	2
train.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)	7	7
df['Title'] = df.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	7	7
train.drop(['Ticket', 'Cabin'], axis=1)	7	7
test['PassengerId'] # Saving for later	7	7
"train_df[""Embarked""] = train_df[""Embarked""].fillna(""S"")"	7	7
accuracies.mean()	7	5
test.drop('PassengerId', axis=1, inplace=True)	7	7
test_df['Ms'] = test_df['MasterMiss']	7	7
test.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)	7	7
test['Age'] = test[['Age','Pclass']].apply(AgeImputation,axis=1)	7	7
df.sample(10)	7	5
coeff_df['Correlation'] = pd.Series(logreg.coef_[0])	7	7
combined.drop('Title', axis=1, inplace=True)	7	7
test_df.shape	7	6
dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 40), 'Age'] = 5	7	7
train_df.as_matrix()	7	6
data['Fare'] = data['Fare'].astype(int)	7	7
train.drop(['PassengerId'],axis=1,inplace=True)	7	7
train['Family'] = train['SibSp'] + train['Parch'] + 1	7	7
data_copy['Fare'] = data_copy['Fare'].fillna(data_copy['Fare'].median())	7	7
train.head(30)	7	7
data['Age'] = data['Age'].astype(int)	7	7
titanic_df['Ms'] = titanic_df['MasterMiss']	7	7
test_df['Sb'] = test_df['SibSpBinary']	7	7
df.drop('SibSp',axis=1,inplace=True)	7	3
titanicANDtest_df['s'] = titanicANDtest_df['SibSpBinary']	7	7
titanicANDtest_df['F'] = titanicANDtest_df['Female']	7	7
df_train.dropna()	7	5
np.median(oof_test_skf,axis=0)	7	6
pd.pivot_table(titanic_df, values = 'Survived',              index = ['Fem', 'MMs', 'SbS', 'Pch'],              columns=['Pclass', 'Embarked'],              aggfunc='count')	7	7
in ['Age', 'Fare']:	7	4
models.append(('SVM', SVC()))	7	4
test_df['Fem'] = test_df['Female']	7	7
train.Age.describe()	7	7
df.sample(5)	7	5
test_df['SbS'] = test_df['SibSpBinary']	7	7
y_train.shape	7	7
train_df['Title'] = train_df['Title'].replace('Mme', 'Mrs')	7	7
data['Family_Size']=data['Parch']+data['SibSp']#family size	7	7
dataset.loc[dataset['Age'] > 64, 'Age'] = 4	7	7
CV.mean()	7	1
model.add(Dense(2, kernel_initializer=init, activation='relu'))	7	1
mask.sum()==0:	7	1
"titanic.loc[titanic[""Embarked""] == ""S"", ""Embarked""] = 0"	7	7
titanic_df['MMs'] = titanic_df['MasterMiss']	7	7
titanic_df['Sb'] = titanic_df['SibSpBinary']	7	7
test_df['m'] = test_df['MasterMiss']	7	7
"titanic.assign(Deck=titanic.Deck.astype(object)).sort(""Deck"")"	7	7
train_x.head()	7	3
train_df['not_alone'].value_counts()	7	7
titanicANDtest_df['Fem'] = titanicANDtest_df['Female']	7	7
training_data[['Age', 'Survived']].groupby('Age').mean()	7	7
col[1]	7	6
testdf.head()	7	6
sc.transform(x_test)	7	6
dataset.shape	7	5
titanic_df['Pc'] = titanic_df['ParchBinary']	7	7
train['Fare'].hist(bins=30,figsize=(10,4))	7	7
bin_s_label.insert(0, '_')	6	3
data['Title'] = data['Title'].fillna(0)	6	6
dataset.head(10)	6	5
combined.iloc[891:].groupby(['Sex','Pclass','Title'])	6	6
test.drop('PassengerId', axis=1).copy()	6	6
test.loc[test['FamilySize'] == 1, 'IsAlone'] = 1	6	6
combined.iloc[891:].Embarked.fillna('S', inplace=True)	6	6
combined.head(891).Embarked.fillna('S', inplace=True)	6	6
train.drop(['Name'], axis=1)	6	6
train2.head()	6	3
train['Title'] = train['Title'].replace('Ms', 'Miss')	6	6
pd.isnull(train).sum()	6	5
model.add(layers.Dense(10, activation='relu'))	6	2
train.iloc[:, :-1].values	6	3
combine['Fare_eff_cat'] = np.where(combine['Fare_eff']>16.0, 2, 1)	6	6
data['Title'] = data['Name'].apply(get_title)	6	6
output.to_csv('submission.csv', index = False)	6	6
"dataset[""Age""].copy()"	6	6
combined.iloc[:891]	6	6
data_train.isnull().any()	6	3
full.head(3)	6	1
enc.transform([[0, 1, 1], [1, 0, 4]]).toarray()	6	6
test.loc[:,cols].fillna(method='pad')	6	6
data['Fare'].fillna(data['Fare'].median(), inplace=True)	6	6
grouped_median_train.head()	6	6
train_data.drop('Survived', axis=1)	6	5
"test_df.drop([                 ""Name"",""Sex"",""Ticket"",""Cabin"",""Embarked"",""Age"",""MMs"",""Ms"",""m"",""Pch"",""Pc"",""p"",""SbS"",""Sb"",""s"",""Fem"",""F"",""Male"",""YourCoin5"", ""Survived""], axis=1, inplace=True)"	6	6
data_copy['Age'] = data_copy['Age'].fillna(data_copy['Age'].median())	6	6
"parch.div(parch.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True)"	6	6
foo.values	6	6
train['Survived'].value_counts()	6	6
data.isnull().sum() #checking for total null values	6	6
data.head(5)	6	6
results.append(roc)	6	2
dataset['Fare_Per_Person'] = dataset['Fare']/(dataset['relatives']+1)	6	6
test['Family'] = test['SibSp'] + test['Parch'] + 1	6	6
"dataset[""Age""] = age_slice"	6	6
"sns.boxplot(x=""Fare"", y=""Age"", data=train)"	6	3
models.append(('LSVM', LinearSVC()))	6	2
prediction.astype(int)	6	5
df_data.loc[df_data['PassengerId'] == passID, 'Family_Survival'] = 1	6	3
df_data.loc[df_data['PassengerId'] == passID, 'Family_Survival'] = 0	6	3
plt.rcParams['xtick.labelsize'] = 12	6	6
dataset.iterrows():	6	3
train_df['Ticket'].describe()	6	6
test['Survived'] = 0	6	6
train.drop(['AgeBand'], axis=1)	6	6
test['FamilySize'] = test['SibSp'] + test['Parch'] + 1	6	6
data['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)	6	6
scale.transform(X_test)	6	4
df['Deck'] = 999	6	6
test.drop('Cabin', axis=1, inplace=True)	6	6
dfTest.head()	6	2
traindf.info()	6	4
test.drop(['Name'],axis=1)	6	6
test['Fare'].iloc[152] = combine['Fare'][combine['Pclass'] == 3].dropna().median()	6	6
data_copy['Pclass'] = data_copy['Pclass'].fillna(data_copy['Pclass'].median())	6	6
testing.loc[:,tcols].dropna()	6	6
data['Fare'].fillna(data['Fare'].mean(), inplace=True)	6	6
train.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)	6	6
X_train.describe()	6	5
data.Embarked.isnull().any()# Finally No NaN values	6	6
submission_df['Survived'] = y_pred	6	6
"test[""Age""].fillna(test[""Age""].mean(), inplace=True)"	6	6
submission_df['PassengerId'] = test_df['PassengerId']	6	6
training_data.iterrows():	6	5
parameters['W2']	6	5
df_train.head(10)	6	6
df.drop('Ticket', axis=1, inplace=True)	6	6
"train['Embarked'].iloc[829] = ""C"""	6	6
"survived[""Age""].plot.hist(alpha=0.5,color='red',bins=50)"	6	6
df.loc[df0['Embarked']=='S', 'Embarked'] = 1	6	6
data.isnull().sum().sort_values(ascending = False)	6	6
x_test.info()	6	6
in ['Master']:	6	6
combined.iloc[891:].Fare.fillna(combined.iloc[891:].Fare.mean(), inplace=True)	6	6
result['Age'].max()	6	2
df_train.tail()	6	6
training.describe()	6	6
df_all.loc['train']	6	1
train['Age']*train['Pclass']	6	5
dataset['Title']=dataset['Title'].map(title_mapping)	6	6
"temp.to_csv(""../working/submission.csv"", index = False)"	6	6
test.Age.mean()	6	6
"train.loc[:,[""Sex"",""Embarked""]].head()"	6	6
test_df[['PassengerId', 'Survived']]	6	3
X.corr()	6	4
"sib.div(sib.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True)"	6	6
y_pred2.head(10)	6	1
train_set.isnull().sum()	6	4
test.fillna(0)	6	6
data.reset_index(inplace=True)	6	4
df['Title'] = pd.Categorical(df['Title'])	6	3
train['Title'] = train['Title'].replace('Mlle', 'Miss')	6	6
data['Initial']=data.Name.str.extract('([A-Za-z]+)\.') #lets extract the Salutations	6	6
plt.rcParams['axes.labelsize'] = 14	6	6
test_data['FamilySize'] = test_data['SibSp'] + test_data['Parch'] + 1	6	6
train['Survived'].astype(int)	6	6
combine['Bad_ticket'] = combine['Ttype'].isin(['3','4','5','6','7','8','A','L','W'])	6	6
train_score.append(clf.score(X_train,y_train))	6	1
df.loc[df0['Embarked']=='Q', 'Embarked'] = 3	6	6
combined['Cabin'] = combined['Cabin'].map(lambda c: c[0])	6	6
train.groupby('Embarked').Survived.value_counts()	6	6
fit.transform(X_test)	6	6
ax.spines['bottom'].set_visible(True)	6	2
parameters['b3']	6	5
"train[""Age""].mean()"	6	6
combined.head(891).groupby(['Sex','Pclass','Title'])	6	6
plt.style.use('seaborn-deep')	6	2
_train_df.copy()	6	1
nullData.head()	6	1
dataset['Embarked'] = dataset['Embarked'].fillna(common_value)	6	6
df_train.describe(include='all')	6	5
df.loc[tmp['Deck']=='E', 'Deck'] = 5	6	6
df_train['Survived'].value_counts()	6	5
train['Fare'].value_counts()	6	4
df.loc[tmp['Deck']=='B', 'Deck'] = 2	6	6
train['Survived'].sort_values().unique()	6	1
test.Age.isnull().sum()	6	6
test_score.append(clf.score(X_test,y_test))	6	1
dataTrain.head()	6	1
dataset.loc[ dataset['Fare'] <= 7.91, 'Fare']                               = 0	6	6
"train[""Age""].describe()"	6	6
df.loc[tmp['Deck']=='G', 'Deck'] = 7	6	6
combined.drop('Embarked', axis=1, inplace=True)	6	6
df.drop('Parch',axis=1,inplace=True)	6	2
df.loc[tmp['Deck']=='T', 'Deck'] = 8	6	6
test['Family'] = test['SibSp'] + test['Parch']	6	6
train.nunique()	6	6
combine['Fare_eff_cat'] = np.where(combine['Fare_eff']<8.5,0,combine['Fare_eff_cat'])	6	6
test.drop(['SibSp','Parch'],axis=1,inplace=True)	6	6
"my_solution.to_csv(""my_tree_one.csv"", index_label = [""PassengerId""])"	6	6
y_train.values	6	5
summary['Median'] = summary.median(1)	6	6
"train_df[""Age""].hist(bins=15, density=True, stacked=True, color='teal', alpha=0.6)"	6	3
train_df.isnull().any()	6	4
dataset.loc[ dataset['Age'] > 66, 'Age'] = 6	6	6
df_train.groupby(['Sex']).Survived.sum()	6	6
df.loc[tmp['Deck']=='A', 'Deck'] = 1	6	6
df['Ticket']	6	6
training.info()	6	2
combine['Ticket_group'] = combine.groupby('Ticket')['Name'].transform('count')	6	6
submission.to_csv('titanic_submission.csv', index=False)	6	6
"train[""Survived""].value_counts()"	6	6
dataset.loc[dataset['Fare'] > 31, 'Fare'] = 3	6	6
train['Title'] = train['Title'].replace('Mme', 'Mrs')	6	6
train_cl.loc[:, Ycol]	6	2
"data_test[""PassengerId""],"	6	6
"C.shape == (2,2), ""Confusion matrix should be from binary classification only."""	6	6
tmp['Deck'] = [e[0] for e in tmp['Cabin']]	6	6
deck.head()	6	6
"test.loc[test[""Sex""] == ""female"", ""Sex""] = 1"	6	6
df.head(2)	6	5
dataframe.head(10)	6	1
train.drop(['SibSp','Parch'],axis=1,inplace=True)	6	6
"titanic_df.drop([""PassengerId"",""Name"",""Sex"",""Ticket"",""Cabin"",""Embarked"",""Age"",""MMs"",""Ms"",""m"",""Pch"",""Pc"",""p"",""SbS"",""Sb"",""s"",""Fem"",""F"",""Male""], axis=1, inplace=True)"	6	6
training_set.head(n=10)	6	1
train.append(test, ignore_index=True)	6	6
Age.dropna(),	6	2
combined_train_test.shape	6	2
dftest.head()	6	2
data['Age'].mean()	6	6
"submission_df[""Survived""] = r_predictions"	6	2
train['Embarked']=train['Embarked'].fillna('S')	6	6
df.loc[df0['Embarked']=='C', 'Embarked'] = 2	6	6
df.loc[tmp['Deck']=='F', 'Deck'] = 6	6	6
train_df['Title'] = train_df['Title'].replace('Ms', 'Miss')	6	6
row['Sex'] == 'male':	6	6
scorevector.append(acc_log)	6	1
data_dum.iloc[:891]	6	6
combine['Shared_ticket'] = np.where(combine.groupby('Ticket')['Name'].transform('count') > 1, 1, 0)	6	6
plt.rcParams['ytick.labelsize'] = 12	6	6
"train_df[""Age""].std()"	6	5
X_test.values	6	5
combine['Fare_cat'] = pd.DataFrame(np.floor(np.log10(combine['Fare'] + 1))).astype('int')	6	6
result_df.set_index('Score')	6	6
train[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)	6	6
train_test.head(5)	6	1
s.head()	6	2
params['X_train'], y_train,	6	1
parameters['W3']	6	5
df.columns.values	6	6
"titanic[""Survived""]"	6	6
X.head(20)	6	5
"test.loc[test[""Sex""] == ""male"", ""Sex""] = 0"	6	6
my_prediction.shape	6	6
train.drop('Survived', 1, inplace=True)	6	6
result_df.head(9)	6	5
"train[[""Pclass"", ""Age"", ""Sex"", ""Fare"", ""SibSp"", ""Parch"", ""Embarked""]].values"	6	4
testing.drop('Name', axis=1, inplace=True)	6	6
"test_set[""PassengerId""],"	6	6
data.drop('Ticket', axis=1, inplace=True)	6	6
combined_train_test.info()	6	2
test_df.head(25)	6	6
train_df['Age'].std()	6	6
df.drop(['Ticket', 'Cabin'], axis=1)	6	6
tickets.add(cleanTicket(t))	6	6
train.groupby('Ticket')	6	6
t_list.values,	6	1
age_train.head()	6	1
"train['Embarked'].iloc[61] = ""C"""	6	6
parameters['W1']	6	5
df.loc[tmp['Deck']=='C', 'Deck'] = 3	6	6
"died[""Age""].plot.hist(alpha=0.5,color='blue',bins=50)"	6	6
"test_df[""Fare""] = test_df[""Fare""].fillna(myMean)"	6	6
"titanic_test[""Fare""] = titanic_test[""Fare""].fillna(titanic_test[""Fare""].median())"	6	6
confusion_scores.append(get_confusion_scores(LogisticRegression(), X, y))	6	1
train['Survived'].copy()	6	6
train['Embarked'].isnull().sum()	6	5
np.empty(len(dep))	6	3
train.drop('Cabin',axis=1)	6	6
tmp.loc[df0['Cabin'].isnull(), 'Cabin'] = '?9999'	6	6
index.values,	6	1
"traindf[""Survived""]"	6	3
combined.drop('PassengerId', inplace=True, axis=1)	6	6
train.iloc[:, -1].values	6	3
combined.head(891).Fare.fillna(combined.head(891).Fare.mean(), inplace=True)	6	6
train.dropna(), vars=cols, size=1.5,	6	6
test.Fare[152] = test.Fare.median()	6	6
dataset['FamilySizeGroup'] = dataset['FamilySizeGroup'].map(family_mapping)	6	6
"test[""Fare""].fillna(test[""Fare""].median(), inplace=True)"	6	6
test_df.isnull().any()	6	4
only_Survived.head()	6	2
parameters['b2']	6	5
df_train.drop(labels=['Survived','PassengerId'],axis=1)	6	2
notNullData.head()	6	1
train_data['Age'].mean()	6	4
my_submission.to_csv('submission.csv', index = False)	6	5
data.drop(column, axis=1)	6	6
grouped_median_train.reset_index()[['Sex', 'Pclass', 'Title', 'Age']]	6	6
data.head(3)	6	6
scores.append(new_entry)	6	2
data.count()	6	4
titanic_df['Survived'].as_matrix(),	6	4
test_df['Fare'] = test_df['Fare'].astype(int)	6	6
params['X_attribs'],	6	1
ax.spines['left'].set_visible(True)	6	2
combine['Ttype'] = combine['Ticket'].str[0]	6	6
"train_df[""Age""].plot(kind='density', color='teal')"	6	3
train_df['Title'] = train_df['Title'].replace('Mlle', 'Miss')	6	6
"titanic_df[""Fare""].mean()"	6	6
data['Title'] = data.Name.str.extract('([A-Za-z]+)\.', expand=False)	6	6
data['Age'].isnull().sum()	6	6
train.drop(['Survived'], 1, inplace=True)	6	6
"X_train[""Survived""]"	6	4
df_raw.dtypes	6	5
"sns.boxplot(x=""Pclass"", y=""Fare"", hue=""Survived"", data=train);"	6	6
data_train.head(10)	6	6
plot.hist()	6	5
df.loc[tmp['Deck']=='D', 'Deck'] = 4	6	6
parameters['b1']	6	5
row['Age']	6	5
med_l[0]	6	3
res.boxplot(ax=ax)	6	1
train['Family'] = train['SibSp'] + train['Parch']	6	5
scores.append(score)	6	4
all_data['FamilySize'] = all_data['SibSp'] + all_data['Parch'] + 1	5	5
combine['Deck'] = combine['Deck'].fillna(value='U')	5	5
_df.head()	5	1
submission.to_csv('submission.csv', index = False)	5	5
titanic_df['Age'].median()	5	5
train_data.head(20)	5	5
"train[""Age""].std()"	5	5
test.loc[(test['Age'] > 32) & (test['Age'] <= 48), 'Age'] = 2	5	5
data['IsAlone'] = 0	5	5
data.tail()	5	5
df_train.head(3)	5	5
model.add(layers.Dense(1, activation='sigmoid'))	5	4
"train_data.drop(""Survived"", axis=1)"	5	5
df['Fare'] = df['Fare'].fillna(df['Fare'].mean())	5	5
x_test.head(5)	5	4
list_scoreO.append(1-mean_absolute_error(predictions, ytestO))	5	1
"train.drop([""PassengerId"", ""Survived""], axis=1).columns"	5	3
values.append(titanic[col].isnull().sum())	5	5
titanic_df['Age'] = titanic_df['Age'].fillna(age_median)	5	5
test_df.drop(['Embarked'], axis=1)	5	5
np.mean(train_scores, axis = 1)	5	5
test.drop(['PassengerId'],axis=1)	5	4
model.add(Activation(relu))	5	1
dataset.loc[dataset['FamilySize'] >= 5, 'FamilySizeGroup'] = 'Big'	5	5
titanic_df['Survived'].as_matrix()	5	5
test.loc[ test['Age'] <= 16, 'Age'] = 0	5	5
test.drop(['Ticket'], axis=1)	5	5
"combine[""Embarked""].cat.categories = [0,1,2]"	5	5
df['Title'] = df['Title'].map(titles_dict)	5	3
"my_solution.to_csv(""my_solution_one.csv"", index_label = [""PassengerId""])"	5	5
"combine[""Sex""] = combine[""Sex""].astype(""int"")"	5	5
combined.iloc[891:]['Cabin']:	5	5
train_data.loc[cv_fold, 'Survived']	5	1
submission.astype('int64')	5	1
"test[""Age""].mean()"	5	5
"combine[""Embarked""] = combine[""Embarked""].astype(""int"")"	5	5
"df[""Embarked""] = df[""Embarked""].fillna(""S"")"	5	5
dataset.head(5)	5	5
"data_train[""Survived""]"	5	5
test_cabin.add(c[0])	5	5
features.sort_values(['importance'],ascending=False)	5	5
full.corr()	5	4
df['Sex'] = 999	5	5
data_copy['Embarked'] = data_copy['Embarked'].fillna('S')	5	5
dataset.dtypes	5	5
"combine[""Deck""] = combine[""Deck""].astype(""category"")"	5	5
"titanic_test.loc[titanic_test[""Embarked""] == ""S"", ""Embarked""] = 0"	5	5
"titanic_test[""FamilySize""] = titanic_test[""SibSp""] + titanic_test[""Parch""]"	5	5
df['SibSp'] = df0['SibSp'].apply(lambda e: 999 if pd.isnull(e) else e)	5	5
dataset['IsAlone'].loc[dataset['FamilySize'] > 1] = 0	5	5
"train[""Embarked""].value_counts()"	5	5
combine['Alone']  = (combine['SibSp'] + combine['Parch']) == 0	5	5
test.dropna(inplace=True)	5	5
imp.transform(X)	5	2
result_df.head()	5	5
test.Fare.isnull().sum()	5	5
train_df.drop(['Survived'], axis=1).values.astype(float)	5	3
data.groupby('Initial')['Age'].mean() #lets check the average age by Initials	5	5
df.loc[df0['Sex']=='male', 'Sex'] = 2	5	5
train_set.shape[0]	5	3
train_cabin.add(c[0])	5	5
test.loc[(test['Age'] > 48) & (test['Age'] <= 64), 'Age'] = 3	5	5
in ['Age', 'Fare', 'FamilySize']:	5	1
f_train.drop(['Survived'], axis=1),	5	4
combined['SmallFamily'] = combined['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)	5	5
X_train.shape, X_test.shape	5	5
np.std(train_scores, axis = 1)	5	5
"sns.boxplot(x=""Pclass"", y=""Fare_eff"", hue=""Survived"", data=train)"	5	5
copy.dropna(inplace = True)	5	5
pca.transform(X_test)	5	5
"combine[""Sex""] = combine[""Sex""].astype(""category"")"	5	5
combined.iloc[:891]['Cabin']:	5	5
submission.info()	5	5
train.pop('Survived')	5	5
full_data.iloc[:891,:]	5	1
combined.Embarked.fillna('S', inplace=True)	5	5
train_set.info()	5	4
df.tail()	5	5
train.loc[(train['Fare'] > 14.454) & (train['Fare'] <= 31), 'Fare']   = 2	5	5
new_train.head()	5	3
mnosurv['Age'].dropna().values, bins=range(0, 81, 1), kde=False, color=nosurv_col,	5	5
submission.to_csv('titanic_submission.csv', index = False)	5	5
tf.transpose(Y)	5	5
row['Survived'] == 1:	5	2
train.groupby('Pclass').Survived.value_counts()	5	5
df_train['Embarked'].unique()	5	5
"test[""Age""].std()"	5	5
"test.drop(""Cabin"", axis=1, inplace=True)"	5	5
X_train.shape[0]	5	5
combined.Fare.fillna(combined.iloc[:891].Fare.mean(), inplace=True)	5	5
"test_df[""Survived""] = test_df[ [""YourCoin5""] ].apply(myFlip3 , axis=1)"	5	5
"titanic_test.loc[titanic_test[""Sex""] == ""female"", ""Sex""] = 1"	5	5
train.Fare.hist()	5	5
test['Embarked']=test['Embarked'].fillna('S')	5	5
df['PassengerId']	5	5
Y.shape	5	4
data_test.loc[ (data_test.Age.isnull()), 'Age' ] = predictedAges	5	5
data['Child'].sum()+data['Woman'].sum()+data['Man'].sum()	5	1
combine['Child'] = combine['Age']<=10	5	5
X_train.shape, y_train.shape, X_test.shape, y_test.shape	5	5
df.dropna(inplace=True)	5	4
train_set.shape	5	5
s[0]	5	4
X.isnull().sum()	5	5
plot.hist(stacked=False, alpha=0.5);	5	1
dv.transform(titanic_df[feature_names].to_dict(orient='records')),	5	5
"train[""Child""] = float('NaN')"	5	5
"test.loc[test[""Embarked""] == ""Q"", ""Embarked""] = 2"	5	5
"titanic[""FamilySize""] = titanic[""SibSp""] + titanic[""Parch""]"	5	5
train.groupby('Sex').Survived.value_counts()	5	5
df.shape[0]	5	4
titanic_test['Fare'] = titanic_test['Fare'].fillna(titanic_test['Fare'].median())	5	5
train_cabin.add('U')	5	5
train_label.head()	5	1
test_df['Age'] = test_df['Age'].astype(int)	5	5
data['Family_Size'] = data['Parch'] + data['SibSp']	5	5
train.Embarked.isnull().sum()	5	4
data_dum.iloc[891:]	5	5
combine['Young'] = (combine['Age']<=30) | (combine['Title'].isin(['Master','Miss','Mlle']))	5	5
train.loc[ train['Fare'] <= 7.91, 'Fare'] = 0	5	5
df_train['Survived'],	5	2
train[['Survived']]	5	4
data.Age.isnull().any() #So no null values left finally	5	5
data.loc[data['FamilySize'] == 1, 'IsAlone'] = 1	5	5
sc.transform(X_train)	5	3
trainML['Survived'].values	5	1
combined['Age'] = combined.apply(lambda row: fill_age(row) if np.isnan(row['Age']) else row['Age'], axis=1)	5	5
testdf.info()	5	3
train['Age'].unique()	5	5
train.loc[(train['Fare'] > 7.91) & (train['Fare'] <= 14.454), 'Fare'] = 1	5	5
predictions.shape	5	5
data.Age.isnull().sum()	5	5
df.sample(frac=1).reset_index(drop=True)	5	4
test.loc[(test['Age'] > 16) & (test['Age'] <= 32), 'Age'] = 1	5	5
combined.drop('Name', axis=1, inplace=True)	5	5
df_train['Embarked'] = df_train['Embarked'].fillna('S')	5	5
titanic_df['Survived']	5	5
"combine[""Sex""].cat.categories = [0,1]"	5	5
output.to_csv('prediction.csv', index=False)	5	5
data.drop('PassengerId', axis=1, inplace=True)	5	5
dataset['IsAlone'] = 1	5	5
test.loc[(test['Fare'] > 14.454) & (test['Fare'] <= 31), 'Fare']   = 2	5	5
df.sample(2)	5	2
test['Age']=test['Age'].astype(int)	5	5
test['family'] = test['SibSp'] + test['Parch']	5	5
combine.iloc[np.where(combine.groupby('Ticket')['Fare'].transform('std') > 0)]	5	5
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	5	5
df['Pclass'] = df0['Pclass'].apply(lambda e: 999 if pd.isnull(e) else e)	5	5
train['Pclass'].value_counts()	5	5
result.to_csv('submission.csv', index=False)	5	5
"df[""Age""],"	5	1
"test.drop(columns = [""PassengerId""])"	5	3
ax.artists[1]	5	5
train.loc[:,['Survived','Cabin']].dropna().head(8)	5	5
df['Embarked'] = 999	5	5
df_titanic.head()	5	3
test['PassengerId'].values	5	5
test_data.drop('SibSp', axis=1, inplace=True)	5	5
test_df['Title'] = test_df['Name'].apply(extract_title)	5	5
all_data['IsAlone'] = 0	5	5
df['Cabin']	5	5
"in [""Age"", ""Fare""]:"	5	3
"Submission.to_csv(""Submission.csv"", index=False)"	5	5
train_df.isnull().sum()/train_df.isnull().count()*100	5	5
X_train.head(10)	5	5
"test[[""Pclass"", ""Age"", ""Sex"", ""Fare"", ""SibSp"", ""Parch"", ""Embarked""]].values"	5	4
test_df['Title'] = test_df['Title'].replace('Mme', 'Mrs')	5	5
train_n.drop(['Survived'], axis=1)	5	2
train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)	5	5
row['Pclass'] < 3:	5	3
"titanic_test.loc[titanic_test[""Embarked""] == ""C"", ""Embarked""] = 1"	5	5
X['Survived']	5	5
df_train['Survived'].values	5	5
nosurv['Age'].dropna().values, bins=range(0, 81, 1), kde=False, color=nosurv_col,	5	5
Accuracy.append(np.round(accuracy_score(y_test,y_test_p),4))	5	1
train_dataset.describe()	5	4
all_data.loc[all_data['FamilySize'] == 1, 'IsAlone'] = 1	5	5
combined['LargeFamily'] = combined['FamilySize'].map(lambda s: 1 if 5 <= s else 0)	5	5
test['Survived'] = test['Survived'].astype(int)	5	5
trainingData['Survived']	5	3
X.as_matrix()	5	5
"X_train.corr()[""Survived""]"	5	2
test['Family_Size']=test['SibSp']+test['Parch']	5	5
"test.loc[test[""Embarked""] == ""S"", ""Embarked""] = 0"	5	5
test_df['Age'] = test_df['Age'].fillna(age_median)	5	5
train.describe(include = 'all')	5	4
dataset.loc[dataset['FamilySize'] == 1, 'FamilySizeGroup'] = 'Alone'	5	5
rawdata.info()	5	1
dataset.loc[ dataset['Fare'] > 250, 'Fare'] = 5	5	5
data['Title'] = data['Title'].replace('Mlle', 'Miss')	5	5
x.describe()	5	3
scaler.transform(test)	5	5
all_data.dtypes	5	3
fold_accuracy.append(valid_acc)	5	4
fnosurv['Age'].dropna().values, bins=range(0, 81, 1), kde=False, color=nosurv_col,	5	5
full.copy()	5	4
test_data.drop('Parch', axis=1, inplace=True)	5	5
df['Parch'] = df0['Parch'].apply(lambda e: 999 if pd.isnull(e) else e)	5	5
models.append(('LDA', LinearDiscriminantAnalysis()))	5	3
titanic_df['Title'] = titanic_df['Name'].apply(extract_title)	5	5
list_score.append(1-mean_absolute_error(predictions, ytest))	5	1
train['Embarked'].mode()	5	5
"combine[""Deck""].cat.categories = [0,1,2,3,4,5,6,7,8]"	5	5
Age.hist()	5	3
submission.to_csv('./submission.csv', index=False)	5	5
df['Fare'] = df['Fare'].astype(int)	5	5
train_dataset.info()	5	5
df['Age'] = df0['Age'].apply(lambda e: 999 if pd.isnull(e) else e)	5	5
"titanic_test.loc[titanic_test[""Embarked""] == ""Q"", ""Embarked""] = 2"	5	5
accuracies.append(avg)	5	4
Precision.append(np.round(precision_score(y_test,y_test_p),4))	5	1
train['Fare'].iplot(kind='hist',bins=30,color='green')	5	5
df['Sex'] = df['Sex'].cat.codes	5	5
related_people.reset_index(inplace=True)	5	1
train_data.drop('SibSp', axis=1, inplace=True)	5	5
df_test.drop(['Name'], axis=1)	5	5
training_log_losses.append(training_log_loss)	5	4
train_df.drop(['PassengerId'], axis=1, inplace=True)	5	5
train_df.dropna()	5	5
"combine.where((combine['Embarked'] !='Q') & (combine['Pclass'] < 1.5) &     (combine['Sex'] == ""female"")).groupby(['Embarked','Pclass','Sex','Parch','SibSp']).size()"	5	5
df.drop(['Name', 'Ticket', 'Cabin'], axis=1)	5	5
all_data.iterrows():	5	1
test['Age'] = test['Age'].fillna(test['Age'].median())	5	5
row['Pclass'] == 1:	5	3
test.head(1)	5	4
dataset.loc[:, 'Survived']	5	5
all.shape	5	1
training.copy()	5	5
combine['Family'] = combine['SibSp'] + combine['Parch']	5	5
"titanic_train[""Survived""]"	5	5
combined.iloc[:891].groupby(['Sex','Pclass','Title'])	5	5
df.to_csv('submission.csv',header=True)	5	5
df.items():	5	2
combine['Fare_eff'] = combine['Fare']/combine['Ticket_group']	5	5
test_set.describe()	5	3
"res.describe().T.sort_values(by=""mean"", ascending=False)"	5	1
data.groupby('Initial')['Age'].mean()	5	5
full.drop(drop, axis = 1, inplace = True)	5	1
training['Survived']	5	3
combine['Cabin_known'] = combine['Cabin'].isnull() == False	5	5
feature_dataframe.head()	5	5
dv.transform(test_df[feature_names].to_dict(orient='records'))	5	5
data['Title'] = data['Title'].replace('Ms', 'Miss')	5	5
train['IsAlone'] = 0	5	5
"test.drop(""PassengerId"",axis=1).copy()"	5	5
data['Title'] = data['Title'].map(title_mapping)	5	5
X.shape[1]	5	5
titanic_data.isnull().sum()	5	3
df.loc[df0['Sex']=='female', 'Sex'] = 1	5	5
dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare'] = 2	5	5
preds.shape	5	5
x_train.info()	5	5
df.Age.isnull().sum()	5	3
df_test.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)	5	5
df_train.describe(include=['O'])	5	5
test.loc[(test['Fare'] > 7.91) & (test['Fare'] <= 14.454), 'Fare'] = 1	5	5
titanic_df['Survived'],	5	5
test_X.head()	5	4
"testing[""Fare""].fillna(testing[""Fare""].median(), inplace = True)"	5	5
test_df['PassengerId'].values	5	5
train_data.drop('Parch', axis=1, inplace=True)	5	5
df.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)	5	5
df['Title'] = df['Name'].apply(get_title)	5	5
test_data.shape	5	5
np.sum(combine.groupby('Ticket')['Fare'].transform('std') > 0)	5	5
combined['Sex'] = combined['Sex'].map({'male':1, 'female':0})	5	5
dataset['FamilySizeGroup'] = 'Small'	5	5
test_set.head(5)	5	2
data.drop('Name', axis=1, inplace=True)	5	5
df_full.info()	5	2
combined['Ticket']:	5	5
train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()	5	5
results.mean()	5	2
row['Age'] < 10:	5	3
train.drop(['PassengerId'], axis=1, inplace=True)	5	5
train.Age.std()	5	5
train['Embarked'] = train['Embarked'].fillna('C')	5	5
train_data.dropna()	5	5
submission['Survived'] = submission['Survived'].astype(int)	5	5
combine['Deck'] = combine['Cabin'].str[0]	5	5
df['Age'].describe()	5	4
"train[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	5	5
models.keys()	5	3
nonumeric_values.append(column)	5	3
df.drop('Survived', axis=1)	5	5
train.head(100)	5	5
combine['Large_Family'] = (combine['SibSp']>2) | (combine['Parch']>3)	5	5
data['Title'] = data['Title'].replace(['Mlle', 'Ms'], 'Miss')	5	5
combine['Age_known'] = combine['Age'].isnull() == False	5	5
"combine[""Embarked""] = combine[""Embarked""].astype(""category"")"	5	5
model.add(layers.Dropout(0.1))	5	1
data['Age'].std()	5	5
df_test.drop(labels=['PassengerId'],axis=1)	5	1
test_cabin.add('U')	5	5
x.shape	5	4
df.isna().sum()	5	3
train_data.drop(['Survived'], axis=1)	5	5
"titanic_test[""FamilyId""] = family_ids"	5	5
clean_data['Survived']	5	1
data['Name']:	5	5
test['Title'] = test['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	5	3
train_dataset['Survived']	5	5
models.append(('DTC', DecisionTreeClassifier()))	5	2
df['fem_perc'] = (df[df.columns[0]]/(df[df.columns[0]] + df[df.columns[1]]))	5	1
test_df['Survived'] = 0	5	5
dummy['Age'].hist(by=dummy['Title'], bins=np.arange(0,81,1))	5	5
df[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]	5	4
titanic_df.isnull().sum()	5	4
test_df['Fare'].fillna(test_df['Fare'].median(), inplace=True)	5	5
df3.head()	5	4
"dataset['Has_Cabin'] = dataset[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	5	5
summary.sort_values('Median', ascending=False)	5	5
data['Age_band'].value_counts().to_frame().style.background_gradient(cmap='summer')#checking the number of passenegers in each band	5	5
np.where(pd.notnull(cabin),str(cabin)[0].upper(),'Z')	5	4
combine.groupby('Ticket')['Fare'].transform('std').hist()	5	5
tune_model.cv_results_['split'+str(i)+'_train_score'][tune_model.best_index_],	5	1
"combine[""Deck""] = combine[""Deck""].astype(""int"")"	5	5
training.drop('Name', axis=1, inplace=True)	5	5
"test.loc[test[""Embarked""] == ""C"", ""Embarked""] = 1"	5	5
titanic_df.head()['Name']	5	5
df.fillna(df.mean())	5	5
Recall.append(np.round(recall_score(y_test,y_test_p),4))	5	1
data.describe(include=['O'])	5	5
"df_train.drop(""Survived"", axis=1)"	5	5
dataset.loc[(dataset['Fare'] > 31) & (dataset['Fare'] <= 99), 'Fare']   = 3	5	5
train_cl.loc[:, Xcol]	5	2
Y_train.head()	5	5
ndarray.shape	5	1
"titanic_test.loc[titanic_test[""Sex""] == ""male"", ""Sex""] = 0"	5	5
dataset.loc[(dataset['Fare'] > 99) & (dataset['Fare'] <= 250), 'Fare']   = 4	5	5
"training[""Embarked""].fillna(""S"", inplace = True)"	5	5
train_dataset.isnull().sum()	5	3
"dataset[""Age""] = train_df[""Age""].astype(int)"	5	5
df['FamilySize'] = df['Parch'] + df['SibSp'] + 1	5	5
"combine['Title'] = combine['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	5	5
f_valid.drop(['Survived'], axis=1),	5	4
df.drop(['Name'], axis=1)	5	5
dataset['Embarked']=dataset['Embarked'].fillna('S')	4	4
df_class.iloc[0,0]/df_class.iloc[:,0].sum()*100	4	4
plt.style.use('seaborn-colorblind')	4	4
train['Age'].value_counts()	4	4
test[['PassengerId','Survived']]	4	4
"all_data.dtypes[all_data.dtypes != ""object""].index"	4	4
df_train.drop(['PassengerId'], axis=1)	4	4
train.drop(['Cabin'], axis=1)	4	4
data.Embarked.isnull().any()	4	4
df.loc[:,['Survived','NotSurvived']].plot.bar(stacked=True,figsize=(20,8))	4	1
kwargs.get('row',None)	4	2
df.loc[ idx, 'Age'] = df.loc[ idx, 'Age'].fillna(median)	4	1
X.Embarked.isnull()	4	4
df.drop(['Name','Ticket','Cabin'], axis=1, inplace=True)	4	2
dt_scores.mean()	4	2
data.values	4	4
data.drop(['Cabin', 'Name', 'PassengerId', 'Ticket'], axis=1, inplace=True)	4	4
plt.boxplot([ df['normal'], df['random'], df['gamma'] ], whis='range')	4	2
"data['Last_Name'] = data['Name'].apply(lambda x: str.split(x, "","")[0])"	4	4
titanic_df['Age'].isnull().sum()	4	3
train_df['Embarked'].dropna().mode()[0]	4	4
oof_test_single.mean(axis=0)	4	4
merged.iloc[:891, :]	4	2
data['Embarked'].value_counts()	4	4
train_orig.copy()	4	4
"train_data.drop(""Survived"", axis = 1)"	4	4
train.loc[train['FamilySize'] == 1, 'IsAlone'] = 1	4	4
combined_df.info()	4	3
train.groupby('SibSp').Survived.value_counts()	4	4
test['Age'] = test['Age'].fillna(np.mean(test['Age']))	4	3
df_test_ml.fillna(df_test_ml.mean(), inplace=True)	4	3
df_data.groupby('Ticket'):	4	4
survived_correlation.axes[0]	4	1
"test.drop([""Name"", ""Ticket"", ""Cabin""], axis=1)"	4	3
"dataset[""Embarked""] = dataset[""Embarked""].map({""C"": 0, ""Q"": 1, ""S"": 2})"	4	4
df_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean()	4	3
train_test.info()	4	3
test_data.drop('Cabin', axis=1)	4	4
training_data.Survived.values	4	1
missing_values.append(s)	4	2
"testing.loc[testing[""Embarked""] == ""Q"", ""Embarked""] = 2"	4	4
train['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)	4	4
"c.where(c[""Pclass""] == i)"	4	2
titles.replace(word,'Rare')	4	2
titanic_train_test_merged.shape	4	1
"training.loc[training[""Sex""] == ""female"", ""Sex""] = 1"	4	4
train.iloc[:,1]	4	4
df_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5	4	4
df_train['Age'].mean()	4	4
full_set.head()	4	2
temp['Survived'] = list(map(int, y_pred))	4	2
df_train['Age'] = df_train['Age'].fillna(df_train['Age'].mean())	4	4
Xtest.head()	4	4
train.drop('PassengerId', axis=1, inplace=True)	4	4
df.at[idx_nan_age.values, 'Imputed'] = 1	4	2
titanic_df.head(2)	4	3
df_train['Title'].value_counts()	4	4
model.transform(X_train)	4	4
df['male_perc'] = (df[df.columns[1]]/(df[df.columns[0]] + df[df.columns[1]]))	4	1
combdata.head()	4	2
train_df[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)	4	4
train.Fare.isnull().sum()	4	4
df_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2	4	4
train.drop('Age',axis=1,inplace=True)	4	4
test_data['Sex'] = test_data['Sex'].replace('male',0)	4	4
out.data.max(1, keepdim=True)[1] # get the index of the max log-probability	4	1
dataset['AgeGroup']=pd.cut(dataset['Age'], age_bins, labels=age_labels)	4	2
np.mean(tprs, axis=0)	4	2
df['Age'].fillna(df['Age'].median(), inplace=True)	4	3
data['Age'] = data['Age'].fillna(data['Age'].median())	4	4
df['Cost']	4	2
data['TitleCode'] = label.fit_transform(data['Title'])	4	2
feature_dataframe['features'].values, data=feature_dataframe	4	1
train_data.head(2)	4	3
Fare.hist()	4	2
"dataset[""IsAlone""] = 0"	4	4
train_data['Sex'] = train_data['Sex'].replace('female',1)	4	4
test['Fare'].fillna(test['Fare'].median(),inplace=True)	4	4
comb.info()	4	1
"testing.loc[testing[""Embarked""] == ""S"", ""Embarked""] = 0"	4	4
df_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7	4	4
df_class.iloc[0,2]/df_class.iloc[:,2].sum()*100	4	4
train.hist(figsize=(15,20))	4	4
df.fillna(0)	4	4
df_train['Age_cat'] = 0	4	4
"test_data['TravelAlone']=np.where((test_data[""SibSp""]+test_data[""Parch""])>0, 0, 1)"	4	4
"s.where(s[""Pclass""] == i)"	4	2
df_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age']=5	4	4
train_data['Sex'] = train_data['Sex'].replace('male',0)	4	4
train.head(40)	4	2
"model_performance.sort_values(by=""Accuracy"", ascending=False)"	4	4
submit['Survived'] = rf_res	4	4
std_scale.transform(titanic[['Age', 'Fare']])	4	4
features_imp.sort_values(by=['importance'], ascending=True, inplace=True)	4	1
train_df['Sex'].replace(['male','female'],[0,1],inplace=True)	4	4
"testing[""FamSize""] = testing[""SibSp""] + testing[""Parch""] + 1"	4	4
dataset['FamilySize']=dataset['SibSp']+dataset['Parch']+1	4	4
"training.loc[training[""Embarked""] == ""S"", ""Embarked""] = 0"	4	4
scaler.transform(test_X)	4	4
train_df['Embarked'].describe()	4	4
model.add(Dense(2))	4	4
data['Cabin'] = data['Cabin'].replace(['B', 'C'], 'H')	4	4
df['Title'] = df['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	4	4
df_train.head(50)	4	4
tmodel.add(Activation('relu'))	4	2
plot.hist(alpha=0.5)	4	1
train['Embarked'].describe()	4	3
test_df.count()	4	3
data_test.loc[ (data_test.Fare.isnull()), 'Fare' ] = 0	4	4
train_data['Age'].head(20)	4	4
titanic_test.apply(get_family_id, axis=1)	4	4
model.add(Dense(activation='relu',units=128))	4	1
dft.isna().sum()	4	1
df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age']=5	4	4
grid_result.best_params_['batch_size']	4	2
train_df[['Age', 'Survived']].groupby(['Age'], as_index=False).mean()	4	3
test['Age'] = test[['Age','Pclass']].apply(impute_age, axis = 1)	4	4
train['Age'][np.isnan(train['Age'])] = age_null_random_list	4	4
training_set.describe(include='all')	4	1
data_set.copy(deep = True)	4	1
train.shape,test.shape	4	2
Survival.describe()	4	3
Submission.head()	4	4
colors.append((red, green, blue, 1))	4	1
train.loc[(train['Age'] > 16) & (train['Age'] <= 32), 'Age'] = 1	4	4
temp.shape[0]	4	2
kwargs.get('col',None)	4	2
data['Cabin'] = data['Cabin'].replace(['F', 'G'], 'L')	4	4
train_df.head(2)	4	4
dataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace=True)	4	4
dt[0]	4	2
model.add(Activation('tanh'))	4	2
costs.append(epoch_cost)	4	4
grid_result.best_params_['init']	4	2
models.append(('GNB', GaussianNB()))	4	2
data_df['Name']:	4	4
test_dataset.isnull().sum()	4	2
df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})	4	4
model.add(Dense(16, input_dim=X.shape[1], kernel_initializer=init, activation='relu'))	4	3
corr_matrix['Survived'].sort_values(ascending=False)	4	3
"titanic[""FamilyId""] = family_ids"	4	4
train.groupby('Parch').Survived.value_counts()	4	4
df_test.drop(columns = ['Survived'], axis = 1)	4	2
ind.fitness.values = fit	4	2
titanic.hist(bins=10,figsize=(9,7),grid=False);	4	4
data.Age.isnull().any()	4	4
train.Cabin.isnull().sum()	4	4
test_df['Age']	4	4
"df_test[""PassengerId""]"	4	4
my_submission.head()	4	4
"train.drop(""Cabin"", axis=1, inplace=True)"	4	4
train['Title'] = train['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	4	4
"training[""IsAlone""] = training.FamSize.apply(lambda x: 1 if x == 1 else 0)"	4	4
dataset['Title'] = dataset['Title'].astype(int)	4	4
test['Title'] = test['Title'].replace('Mme', 'Mrs')	4	4
titanic.drop(columns=['Survived','Embarked','Cabin','Name','Ticket'],axis=1)	4	2
features.head()	4	4
train_df2.head()	4	2
testing.info()	4	2
test[['Pclass', 'Sex', 'Age', 'Fare']].values	4	4
sample_submission_df['Survived'] = y_pred	4	4
classifier.add(Dense(9,kernel_initializer=kernel_init,activation=act_func))	4	1
train_data.describe(include=['O'])	4	4
parameters['b4']	4	3
"train[[""Pclass"", ""Sex"", ""Age"", ""Fare"", ""SibSp"", ""Parch"", ""Embarked""]].values"	4	4
train_data.Fare.mean()	4	4
data.set_index('PassengerId', inplace=True)	4	1
df['Family'] = df['SibSp'] + df['Parch'] + 1	4	4
df['Title'] = df['Name'].str.extract('([A-Za-z]+)\.', expand=False)	4	3
"train.loc[:,""Survived""]"	4	2
df_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3	4	4
test_data['Survived'] = 1	4	4
df['Sex'] = df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	4	4
importances.sort_values('importance', ascending=False).set_index('feature')	4	4
train_df['Title'] = train_df.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	4	4
df['Pclass'] = pd.Categorical(df['Pclass'])	4	2
x.isnull().sum()	4	2
train.corr(),	4	4
Modified_data.head()	4	1
"test[[""Pclass"", ""Sex"", ""Age"", ""Fare"", ""SibSp"", ""Parch"", ""Embarked""]].values"	4	4
train.fillna(0)	4	4
"train_dataset[""Survived""].values"	4	4
"train[""Survived""],"	4	2
y_pred['Survived'] = y_pred[0]	4	1
train['Age'] = train['Age'].fillna(train['Age'].mean())	4	4
data_train.drop('Survived', axis=1)	4	4
titanic_train.corr()	4	4
test.drop('PassengerId', axis=1)	4	4
df.count()	4	4
title_xt.div(title_xt.sum(1).astype(float), axis=0)	4	3
train_dataset['PassengerId']	4	4
train_df['Embarked'].fillna(train_df['Embarked'].mode()[0], inplace = True)	4	4
category_group.unstack().head()	4	1
Y.shape[1]	4	3
df_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6	4	4
test_csv['Survived'] = y_pred2['Predicted']	4	1
train_df.head(1)	4	4
df.groupby(['Pclass', 'Embarked']).Fare.median()	4	3
X.drop(['Name'], axis=1)	4	4
dataset['FamilySize'] = dataset['SibSp']+dataset['Parch'] + 1	4	2
"q.where(q[""Pclass""] == i)"	4	2
new_data_train.isnull().sum().sort_values(ascending=False).head(10)	4	4
sample_submission_df['PassengerId'] = test_df['PassengerId']	4	4
test.drop('Age',axis=1,inplace=True)	4	4
train.values[0::, 1::]	4	2
temp['Survived'] = y_pred	4	4
ax[0].grid(True)	4	1
df.to_csv('submission.csv', header = True)	4	4
my_data.head()	4	1
df_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1	4	4
dataset['IsChildandRich'] = 0	4	4
train_df['Family'].loc[train_df['Family'] == 0] = 0	4	4
dataset['Title'] = dataset['Title'].replace(['Mlle', 'Ms'], 'Miss')	4	4
dataset['Sex'].unique(): # For each gender	4	1
test.drop(['Cabin'],axis=1)	4	4
aucs.append(roc_auc)	4	2
data['Embarked'] = data['Embarked'].fillna(freq_port)	4	4
grid_result.best_params_['epochs']	4	2
value[0]	4	1
data['Cabin'] = data['Cabin'].map({'X': 0, 'L': 1, 'M': 2, 'H': 3}).astype(int)	4	4
test['Age'] = test['Age'].fillna(test['Age'].mean())	4	4
train['Survived'] = train['Survived'].astype(int)	4	4
dataset.loc[~dataset['Pclass'].isnull(),'Pclass'].unique(): # For each class	4	1
df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch']	4	4
titanic_train_data.head()	4	3
train_df.drop(['Embarked'], axis=1)	4	4
df_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3	4	4
np.std(tprs, axis=0)	4	2
y_test2.head(10)	4	1
df_train['Embarked'].fillna('S', inplace=True)	4	4
plot.rcParams.update(params)	4	4
titanic['Embarked'] = titanic['Embarked'].fillna('S')	4	4
test_data['Age'] = test_data['Age'].astype(int)	4	4
train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)	4	4
titanic_df['Sex'] = sex_encoder.transform(titanic_df['Sex'].values)	4	4
df_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})	4	4
dset.head()	4	1
train['Family_Size']=train['SibSp']+train['Parch']	4	4
x.info()	4	4
df_full.isnull().sum()	4	2
testing.sample(5)	4	3
sub.to_csv('submission.csv',index=False)	4	4
missing_data.head(20)	4	3
test['Title'] = test['Title'].replace('Ms', 'Miss')	4	4
merged.head()	4	3
titanic.isna().any()	4	2
legs[0].set_text('No')	4	2
training_set.head()	4	1
"df.loc[ (df.Cabin.notnull()), 'Cabin' ] = ""Yes"""	4	4
feature_survived.apply(lambda r: r/r.sum(), axis=1)	4	2
test_df.drop(['Ticket','Cabin','Fare'], axis=1)	4	4
holdout['PassengerId']	4	4
x['Fare_Per_Person']	4	1
test.drop(['Sex','Embarked','Name','Ticket','PassengerId'],axis=1,inplace=True)	4	4
pp.axes(axes[0])	4	1
X.fillna(self.most_frequent)	4	4
df_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6	4	4
train.Fare.describe()	4	4
missing_data.head()	4	2
dataset['Sex'] = dataset['Sex'].map({'female': 1, 'male': 0}).astype(int)	4	4
"df.loc[df[""Survived""] == True]  # Survivors"	4	1
traindf[['Fare', 'Age']].describe()	4	2
df['Survived'].sum()/df['PassengerId'].count()	4	1
train_data['Fare'] = train_data['Fare'].astype(int)	4	4
np.empty(len(neighbors))	4	1
data.groupby('Ticket'):	4	4
"train[[""Embarked"", ""Survived""]].groupby(['Embarked'],as_index=False).mean()"	4	3
final_predictions.astype(int)	4	4
"train_set.drop(""Survived"", axis=1)"	4	4
MLA_compare.sort_values(by = ['MLA Test Accuracy'], ascending = False, inplace = True)	4	4
df.Embarked.fillna('C', inplace=True)	4	3
train['Cabin_l'] = train['Cabin'].apply(extract_cabin)	4	2
dataset['Age'].median()	4	4
data['Title'] = data['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Miss'})	4	4
titanic_df['Age'].hist(bins=70)	4	4
titles.replace('Mme','Mrs')	4	2
"df.loc[ (df.Cabin.isnull()), 'Cabin' ] = ""No"""	4	4
train_df.count()	4	4
train.drop(['Survived'], axis = 1)	4	4
df.loc[df['PassengerId'] == passID, 'Family_Survival'] = 1	4	2
df.loc[df['PassengerId'] == passID, 'Family_Survival'] = 0	4	2
test_data.drop(['PassengerId'], axis=1)	4	4
df_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5	4	4
dc['Age'].replace(0,np.NaN)	4	1
full.shape	4	4
lr_scores.mean()	4	2
concat.head()	4	3
"train[[""Survived""]]"	4	3
train.drop(['Cabin'],axis=1)	4	4
results.to_csv('results.csv', index=False)	4	4
train.drop(col,axis=1,inplace=True)	4	4
data['fare'] = data['fare'].fillna(data['fare'].median())	4	2
df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})	4	4
"model.add(Dense(1, activation=""sigmoid""))"	4	3
test_df['Sex'] = sex_encoder.transform(test_df['Sex'].values)	4	4
comb_data.head()	4	1
data.Age.isna().sum()	4	1
sns.boxplot(x= 'Pclass', y = 'Age', data = train)	4	4
train_set.copy()	4	4
df_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)	4	3
test.drop('PassengerId',axis=1)	4	4
train['under15'] = train['Age'].apply(under15)	4	4
"test_dataset[""PassengerId""],"	4	4
train.loc[(train['Age'] > 32) & (train['Age'] <= 48), 'Age'] = 2	4	4
y_pred['PassengerId'] = df_test['PassengerId']	4	1
"dftest.loc[idx,""Survived""]=0"	4	1
history_dict['acc']	4	3
"df_train[""Fare""] = df_data[""Fare""][:891]"	4	3
rcParams['figure.figsize'] = 10,8	4	4
test_dataset.info()	4	4
data_df.loc[data_df['PassengerId'] == passID, 'Family_Survival'] = 1	4	2
data_df.loc[data_df['PassengerId'] == passID, 'Family_Survival'] = 0	4	2
traindf['Survived']	4	4
"df[""FamilySize""] = df[""SibSp""] + df[""Parch""] + 1"	4	4
test['Age'].fillna(test['Age'].median(), inplace=True)	4	4
test.isna().sum()	4	3
data_all['Title'] = data_all['Title'].replace('the', 'Miss')	4	2
y_test.iloc[i]:	4	1
test['Age']*test['Pclass']	4	4
dataset.loc[(dataset['Age'] > 14) & (dataset['Age'] <= 32), 'Age'] = 1	4	4
test_data.isnull().any()	4	3
whole.loc[idx]	4	1
titanic.dtypes	4	4
titles.replace('Ms','Miss')	4	2
data_train.head(5)	4	3
test_d.info()	4	1
test.drop('Sex',axis = 1,inplace = True)	4	4
self.clf_and_params.append((clf, params))	4	1
combine.info()	4	3
dataset.loc[np.isnan(dataset['Age']), 'Age'] = age_null_random_list	4	4
train_df['Family'].loc[train_df['Family'] > 0] = 1	4	4
df_test.drop(['Age'], axis=1, inplace=True)	4	4
train['Age']=train['Age'].astype(int)	4	4
predictions.head()	4	4
combined_train_test['Fare'] = combined_train_test[['Fare']].fillna(combined_train_test.groupby('Pclass').transform('mean'))	4	2
df_train.drop(['Survived', 'PassengerId'], axis=1)	4	3
trainONS.copy()	4	1
"train.drop(""Cabin"",axis=1,inplace=True)"	4	4
testing.drop('Ticket', axis=1, inplace=True)	4	4
df['Fare'] = df0['Fare'].apply(lambda e: -999 if pd.isnull(e) else e)	4	4
train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)	4	4
submission.to_csv('titanic_submission.csv',index=False)	4	4
means.to_dict()	4	2
train.drop('Sex',axis = 1,inplace = True)	4	4
train['Age'][train['Age'].isnull()==True] = filling	4	4
test.loc[ test['Fare'] <= 7.91, 'Fare'] = 0	4	4
train.count()	4	4
test.Age.std()	4	4
train_df['Age'].fillna(train_df['Age'].median(), inplace = True)	4	4
"combdata[""Title""].unique()"	4	2
cv_results['test_score']	4	1
test.drop(dropping,axis=1, inplace=True)	4	4
new_data_train.head()	4	4
row['Name']:	4	1
"training[""FamSize""] = training[""SibSp""] + training[""Parch""] + 1"	4	4
tprs.append(interp(mean_fpr, fpr, tpr))	4	2
sns.boxplot(train['Survived'],train['Fare'], hue= train['Embarked'])	4	3
df['Ticket'] = [int(str.isnumeric(e)) for e in df0.Ticket]	4	4
train_data.drop(['Survived'],axis=1)	4	4
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))	4	4
test['Age'][np.isnan(test['Age'])] = age_null_random_list	4	4
row['Age'] == -1:	4	3
"data[""Embarked""] = data[""Embarked""].fillna('S')"	4	4
traind.head()	4	1
dataTest.head()	4	1
parameters['W4']	4	3
train.loc[train_fold] # Extract train data with cv indices	4	3
grouped.Age.median()	4	4
select.transform(X_train_poly)	4	2
test['under15'] = test['Age'].apply(under15)	4	4
model.add(Dense(512, activation='relu'))	4	2
train_data.isnull().any()	4	3
"train[""NameLength""] = train[""Name""].apply(lambda x: len(x))"	4	4
test_df.isnull().sum().sort_values(ascending=False)	4	3
df_comb.head(3)	4	1
combine_df['womenchild'] = combine_df['Sex'].apply(lambda x: 1 if x == 'female' else 0) + combine_df['Age'].apply(lambda x: 1 if x <=18 else 0)	4	2
test['Fare'].fillna(train['Fare'].mean(), inplace=True)	4	4
guess.median()	4	4
features_imp['feature'] = features_names	4	1
test_df['Sex'].replace(['male','female'],[0,1],inplace=True)	4	4
dataset['FamilySize'] = dataset['SibSp'] +  dataset['Parch'] + 1	4	4
dataset.copy(deep=True)	4	2
test['Title'] = test['Title'].replace('Mlle', 'Miss')	4	4
train_data['FamilySize'] = train_data['SibSp'] + train_data['Parch'] + 1	4	4
train.values[0::, 0]	4	2
Y.head()	4	4
df_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2	4	4
dataset.groupby(['Pclass', 'Embarked']).Fare.median()	4	2
cost.append(np.sum(np.abs(a_3-y))/y.shape[0])	4	1
df_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0	4	4
"test_df[""PassengerId""]"	4	4
train.loc[ train['Fare'] > 31, 'Fare'] = 3	4	4
x['Age'].isnull().sum()	4	2
df_train['Fare'] = df_train['Fare'].fillna(df_train['Fare'].mean())	4	4
test['Fare'] = test[['Fare','Pclass']].apply(impute_fare,axis=1)	4	4
train_df.reset_index(inplace=True)	4	2
dataset['Title'] = dataset['Title'].replace(['Mrs', 'Miss'], 'MM')	4	4
validation_log_losses.append(validation_log_loss)	4	4
titanic[['Age', 'Fare']] = std_scale.transform(titanic[['Age', 'Fare']])	4	4
full_dataset.info()	4	1
train_data['Embarked'] = train_data['Embarked'].fillna('S')	4	4
"testing[""Name""]:"	4	4
train.Age.hist(grid=0, edgecolor='black', bins=20)	4	2
train['young'] = train['Age'].apply(young)	4	4
row['Fare'] < 25:	4	2
train_df.drop('Survived',axis=1)	4	4
df.copy(deep=True)	4	4
titanic_df.drop('Survived',axis=1,inplace=True)	4	4
kind_type[0]	4	1
data_pruned.head()	4	1
df_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})	4	4
df.fillna(0,inplace=True)	4	1
data['Cabin'] = data['Cabin'].apply(lambda x: str(x)[0])	4	4
df['Age'].hist()	4	4
concat_le.head()	4	2
train.loc[valid_fold] # Extract valid data with cv indices	4	3
output.to_csv('prediction-ann.csv', index=False)	4	4
df_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age']=33	4	4
c.astype('category').cat.as_ordered()	4	3
train.loc[(train['Age'] > 48) & (train['Age'] <= 64), 'Age'] = 3	4	4
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data=titanic);"	4	4
df_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age']=37	4	4
data['Title'] = data.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\.', x).group(1))	4	4
test['Age'][test['Age'].isnull()==True]=filling	4	4
traindf['Age'].describe()	4	2
training.isna().sum()	4	2
basic_expl.T	4	2
dataset['Title'] = dataset['Title'].replace(['Dr', 'Major', 'Col'], 'DMC')	4	4
shape[1]	4	4
test_set.info()	4	3
df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age']=37	4	4
df_test.filter(regex='Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')	4	4
test_df['Title'] = test_df['Title'].replace('Ms', 'Miss')	4	4
test_df['Title'] = test_df['Title'].replace('Mlle', 'Miss')	4	4
df_test['Age_cat'] = 0	4	4
dataset.loc[(dataset['Age'] <= 0) & (dataset['Pclass'] == 1 ),'IsChildandRich'] = 1	4	4
test['Fare'].fillna(test['Fare'].median(), inplace=True)	4	4
x['Pclass']	4	2
titanic.head(10)	4	4
train.drop(['Survived','Fare'],axis=1)	4	4
levels.append(level[0])	4	4
train_df.loc[:,tcols].dropna()	4	1
train_df.drop(['Parch', 'SibSp'], axis=1)	4	4
data['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	4	4
"in [""male"", ""female""]:"	4	2
np.std(scores)	4	2
df.isnull().sum().sort_index()/len(df)	4	2
"train_df[""Age""].fillna(train_df[""Age""].mean(), inplace=True)"	4	4
df['Imputed'] = 0	4	2
df.isnull().sum().sort_values(ascending=False)	4	4
X.drop(['Embarked'], axis=1)	4	4
df_train.drop('Cabin', axis=1, inplace=True)	4	4
df_train_ml['Survived']	4	2
df['Age'] = pd.cut(df['Age'], bins=[0, 12, 50, 200], labels=['Child','Adult','Elder'])	4	2
age_grouping['Survived'].plot.bar()	4	4
train_df.head(15)	4	4
train['Age'] = train[['Age','Pclass']].apply(impute_age, axis = 1)	4	4
train.drop(dropping,axis=1, inplace=True)	4	4
dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\.', expand=False)	4	4
model.add(Activation('softmax'))	4	4
titanic.loc[titanic['Embarked'] == 'Q', 'Embarked'] = 2	4	4
positive_survived_correlation.max()	4	1
"training.loc[training[""Embarked""] == ""Q"", ""Embarked""] = 2"	4	4
sns.boxplot(x = 'Pclass', y = 'Age', data = train)	4	4
"testing.loc[testing[""Sex""] == ""female"", ""Sex""] = 1"	4	4
dataset['Title'] = dataset['Title'].replace(['Mme', 'Ms', 'Lady', 'Sir', 'Mlle', 'Countess'],'MMLSMC' )	4	4
df_output[['PassengerId','Survived']].to_csv('./output.csv',index=False)	4	4
comb_data.select_dtypes(include=['category']).columns:	4	1
test_df['Age'].fillna(test_df['Age'].median(), inplace = True)	4	4
train.loc[Outliers_to_drop]	4	4
pd.merge(staff_df, student_df, how='left', left_on='Name', right_on='Name')	4	2
titanic_df.drop(['PassengerId','Ticket','Cabin','Fare'], axis=1)	4	4
submission.tail()	4	4
test.drop(columns = ['Name', 'Ticket', 'Cabin'])	4	2
row['Survived'] == survived:	4	4
train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean()	4	4
"df_test[""Fare""] = df_data[""Fare""][891:]"	4	3
data_train.groupby(['SibSp','Survived'])	4	4
df['Sex'] = df['Sex'].astype('category')	4	4
sc_X.transform(X_test)	4	4
predictions.describe()	4	1
train_data.append(test_data)	4	4
np.round(final_predictions)	4	4
train.drop(['PassengerId','Name','Ticket'],axis=1)	4	4
train['Survived'],	4	3
df_test_ml.info()	4	3
np.std(aucs)	4	2
data_train_all.info()	4	1
data.loc[(data['Age'] > 32) & (data['Age'] <= 48), 'Age'] = 2	4	4
history_dict['val_acc']	4	3
train.isna().sum()	4	4
test['young'] = test['Age'].apply(young)	4	4
train_df['Family'] = train_df['SibSp'] + train_df['Parch']	4	4
sns.boxplot(x = 'Pclass', y = 'Age', data = test)	4	4
df_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0	4	4
original_train_data.corr()	4	1
titanic_df.iloc[:,fit.support_]	4	4
"testing.loc[testing[""Sex""] == ""male"", ""Sex""] = 0"	4	4
"testing.loc[testing[""Embarked""] == ""C"", ""Embarked""] = 1"	4	4
"train[""Name""].str.extract(' ([A-Za-z]+)\.',expand=False)"	4	4
tem_factor_df.append(pd.pivot_table( i, values='Survived',index='Sex_Code',columns='Pclass').round(3))	4	1
df.loc[np.isnan(df['Age'])].index	4	2
data_test[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]	4	4
df_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7	4	4
np.std(test_scores, axis = 1)	4	4
pp.axes(axes[1])	4	1
"testing[""Age""].fillna(testing[""Age""].median(), inplace = True)"	4	4
test_set.describe(include='all')	4	1
train_df.sample(5)	4	2
data['Cabin'] = data['Cabin'].fillna('X')	4	4
submission.describe()	4	4
data.groupby('Title').Age.mean()	4	4
titles.replace('Mlle','Miss')	4	2
final_train.drop(target,axis=1)	4	1
df['Title'] = df['Title'].map(title_mapping)	4	4
"training[""Name""]:"	4	4
train_filtered.Age.hist(grid=0, edgecolor='black', bins=20)	4	2
Age.round(0).dropna()	4	1
dft.head()	4	3
df_raw.groupby('Title')['Age'].mean()	4	2
train.drop(['Sex','Embarked','Name','Ticket','PassengerId'],axis=1,inplace=True)	4	4
test_df.drop('Survived', axis=1, inplace=True)	4	2
train_df.shape[0]	4	4
result.loc[idx_ok, 'Survived'] = yhat	4	4
model.add(Dropout(0.4))	4	2
data_train.sample(5)	4	4
new_data_test.isnull().sum().sort_values(ascending=False).head(10)	4	4
train.drop(['Ticket'], axis=1)	4	4
df_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4	4	4
df_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)	4	3
df_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4	4	4
"training[""Age""].fillna(training[""Age""].median(), inplace = True)"	4	4
df.set_index('PassengerId')	4	4
train_df['FamilySize'] = train_df['SibSp'] + train_df['Parch'] + 1	4	4
data_test.isnull().any()	4	3
df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age']=33	4	4
train.head(6)	4	2
tf.add(tf.matmul(W4, A3), b4)	4	4
merged.iloc[891:, :]	4	2
y.head(5)	4	4
final_test['IsMinor']=np.where(final_test['Age']<=16, 1, 0)	4	4
Train_Master.append(Test_Master)	4	1
"training.loc[training[""Sex""] == ""male"", ""Sex""] = 0"	4	4
train.fillna(np.nan)	4	4
data['Cabin'] = data['Cabin'].replace(['A', 'D', 'E', 'T'], 'M')	4	4
std_scale.transform(titanic_test[['Age', 'Fare']])	4	4
sns.boxplot(x = 'Pclass', y = 'Fare', data = test)	4	4
train_data['Survived'].values	4	4
raw_test_df['PassengerId'],	4	2
dataset['isAlone'] = 0	4	4
df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1	4	3
test['Fare'] = test[['Fare','Pclass']].apply(impute_fare, axis = 1)	4	4
df.Age.median()	4	4
test.drop(['PassengerId'], axis=1)	4	4
testing.drop('Sex_female', axis=1, inplace=True)	4	4
combine_df.info()	4	2
dataset.loc[ dataset['Age'] <= 14, 'Age'] = 0	4	4
df_test['Embarked'] = df_test['Embarked'].fillna('S')	4	4
columns[0]	4	3
train_df['Age'].value_counts()	4	4
"training[""Survived""] #define training label set"	4	4
regressor.add(Dropout(0.2))	4	1
"training.loc[training[""Embarked""] == ""C"", ""Embarked""] = 1"	4	4
y_pred.shape	4	4
Xy_train_df.drop('Survived',axis=1)[select_vars]	4	1
test_df.drop(['Parch', 'SibSp'], axis=1)	4	4
grid_result.best_params_['optimizer']	4	2
"train[""Embarked""] = train[""Embarked""].fillna('S')"	4	4
"dataset[""Title""] = dataset[""Title""].fillna(0)"	4	4
data['Has_Cabin'] = ~data.Cabin.isnull()	4	4
"testing[""IsAlone""] = testing.FamSize.apply(lambda x: 1 if x == 1 else 0)"	4	4
titanic_train_df.head()	4	1
train_df.join(person_dummies_train)	4	4
np.mean(test_scores, axis = 1)	4	4
train_data.head(0)	4	1
data.loc[(data['Age'] > 48) & (data['Age'] <= 64), 'Age'] = 3	4	4
model_cat.add(BatchNormalization())	4	1
train.loc[ train['Age'] <= 16, 'Age'] = 0	4	4
np.empty(size)	4	1
test.drop(col,axis=1,inplace=True)	4	4
df['Fare'].fillna(df['Fare'].median(), inplace=True)	4	4
titanic_test[['Age', 'Fare']] = std_scale.transform(titanic_test[['Age', 'Fare']])	4	4
test_df.drop('PassengerId', axis=1).copy()	4	4
train[['Sex','Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])	4	4
df_train.drop('Survived', axis=1).values	4	4
train_data.Embarked.dropna().mode()[0]	4	3
importances.sort_values('importance',ascending=False).set_index('feature')	4	4
train['family'] = train['SibSp'] + train['Parch']	4	4
x['Name']	4	2
dataset.loc[(dataset['Age'] <= 0) & (dataset['Pclass'] == 2 ),'IsChildandRich'] = 1	4	4
train_pivot.style.applymap(color_negative_red)	4	2
data_test_all.info()	4	1
features_imp.set_index('feature', inplace=True)	4	1
df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age']=22	4	4
"train_df[[""Embarked"", ""Survived""]].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	4	4
"titanic_test[""Embarked""] = titanic_test[""Embarked""].fillna(""S"")"	4	4
str[1]	4	3
df_class.iloc[0,1]/df_class.iloc[:,1].sum()*100	4	4
ax[1].grid(True)	4	1
accuracy.append(tmp_accuracy)	4	2
df.groupby('Title').Age.transform('median')	4	3
y_pred.drop(0,axis=1,inplace=True)	4	1
df['Age'] = df['Age'].fillna(df['Age'].median())	4	4
result.to_csv('result.csv', index=False)	4	4
array_sign[0]	4	2
test.loc[ test['Fare'] > 31, 'Fare'] = 3	4	4
dataset['Title']=dataset['Title'].fillna(0)	4	4
data.isnull().sum().sort_values(ascending=False)	4	4
df_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age']=22	4	4
test_data['Sex'] = test_data['Sex'].replace('female',1)	4	4
df_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1	4	4
"new_data[""Name""] = new_data[""Name""].str.replace(""Mme"",""Mrs"")"	4	1
df['Title'].unique()	4	4
submission['Survived'] = predictions	4	4
titanic_df.dtypes	4	2
train_data['Sex'].value_counts()	3	3
full.set_value(full.Age.isnull(), 'Age', pred)	3	3
df['Gender']=df['Sex'].map({'female':0, 'male':1}).astype(int)	3	1
"testing.loc[testing[""Title""] == ""Mr"", ""Title""] = 1"	3	3
testing.drop('PassengerId', axis=1, inplace=True)	3	3
df_embark.iloc[0,1]/df_embark.iloc[:,1].sum()*100	3	3
test.loc[test['Sex'] == 'female','Survived'] = 1	3	3
gridscgdbt.best_params_['learning_rate'],	3	1
data['Fare'].hist()	3	3
df_test['training_set'] = False	3	3
survived.head()	3	3
data['Embarked'].mode()[0]	3	3
train.drop(labels=['PassengerId', 'Name', 'Names', 'Cabin', 'Ticket', 'Age', 'Fare'], axis=1, inplace=True)	3	3
test['Pclass1'] = test['Pclass']	3	1
titanic_train.head(5)	3	3
df[['Age','Fare','Parch','SibSp','Pclass']]	3	3
test['EmbarkedS'] = test['Embarked']	3	1
fix_funcs.append(fix_embarked)	3	3
test['Ticket'] = lbl.transform(list(test['Ticket'].values))	3	3
full.set_value(full.Group_num==1, 'Group_size', 'S')	3	3
dataset['Fare'] = dataset['Fare'].fillna(dataset['Fare'].median())	3	3
dataset.loc[(dataset['Age'] == 0) & (dataset['Sex']==1), 'Boys'] = 1	3	3
train.drop(drop_elements,axis=1)	3	3
"df_test[""Age""] = df_data['Age'][891:]"	3	3
df1['FareLevel'] = df1['FareLevel'].apply(lambda x: sum([x >= b.left for b in fare_bin]))	3	3
data['IsAlone'] = 1	3	3
pd.isnull(fare):	3	3
test_df.join(test_pclass_dummies)	3	3
data['FamilySize'] = (data['SibSp'] + data['Parch']).astype(int)	3	3
Columns[0]	3	1
test[['Age', 'Fare', 'TraveledAlone', 'Pclass_1', 'Pclass_2', 'Sex_male', 'Embarked_C']]	3	1
"df.loc[(df.Age.isnull())&(df.Title=='Mrs'),'Age']= df.Age[df.Title==""Mrs""].mean()"	3	3
training.drop(columns = ['Survived'])	3	1
full.head(n=3)	3	1
y_test.count()	3	1
"training.loc[training[""Title""] == ""Miss"", ""Title""] = 0"	3	3
scores.std()	3	2
class_sex_grouping['Survived'].plot.bar()	3	3
data['Embarked'].head()	3	2
df.to_html()	3	3
data['IsAlone'] = (data['SibSp'] + data['Parch'] == 0).astype(int)	3	3
traindf.head(2)	3	2
train.drop('Ticket', axis=1)	3	3
model.add(Dense(32, activation='relu'))	3	3
df_data.info()	3	2
dataset.copy()	3	3
"df_train[""Name""]"	3	3
_df.copy()	3	3
Xmat.iloc[:train.shape[0],:]	3	3
"train_data[""Age""].mean()"	3	3
test_label.head()	3	1
dataset['Age']=dataset['Age'].astype(int)	3	3
train['Embarked'].unique()	3	3
train_dataset['Embarked']	3	3
train_dataset['Parch']	3	3
traindat.info()	3	1
train['Embarked'].fillna(value = 'S', inplace = True)	3	3
data.drop('SibSp', axis=1, inplace=True)	3	3
le.transform(embarked)	3	3
train_X.values	3	2
df_train['Initial']=0	3	3
df1.fillna(df1.mean())	3	2
dataset_train.drop(['Survived'], axis=1).columns.values	3	1
"sns.boxplot(x=""Fare"", y=""Age"", data=test )"	3	3
titanic_train_df['Age'].isnull().sum()	3	1
cabin_list.isnull()	3	1
df.to_csv('submission.csv', index=False)	3	3
classifiers.append(SGDClassifier(random_state=random_state))	3	3
x.shape[0]	3	2
df.loc[(df.Age.isnull()), 'Age'] = predict_age	3	3
test_dataset['Title'] = test_dataset.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	3	3
"test_set.select_dtypes(include=[""object""]).columns"	3	1
train_df.drop(drop_column, axis=1, inplace = True)	3	3
axs[0].legend()	3	3
X.drop(['Embarked_S'], axis=1)	3	3
"train_data[""Age""].fillna(train_df[""Age""].median(skipna=True), inplace=True)"	3	3
test_df['Fare'].fillna(test_df['Fare'].mean(), inplace=True)	3	3
test.drop(['Name','Ticket','Cabin'],axis=1)	3	3
full.head(10)	3	3
df_data.loc[(df_data['Age'].isnull()) & (df_data['Title'] == title), 'Age'] = age_to_impute	3	3
submit['Survived'] = submit['Survived'].apply(int)	3	3
df['Sex'] = df['Sex'].replace('male', 1)	3	3
train_df['Embarked'] = train_df['Embarked'].fillna('S')	3	3
dataset_train.head()	3	2
"dftotal.loc[index,""KNNsNbr""]=len(nbours_index)"	3	1
ds['Age'].median()	3	3
importances.head(15)	3	3
"test[""family_size""] = test[""SibSp""] + test[""Parch""] + 1"	3	3
train_x.isnull().sum()	3	3
"df[""Age""].fillna(df[""Age""].mean(), inplace=True)"	3	3
"train[""Sex""].unique()"	3	2
test_df.loc[ test_df['Fare'] <= 7.91, 'Fare'] = 0	3	3
data_df.groupby('Title')['Age'].median()[titles.index(title)]	3	3
Y.drop_duplicates(inplace=True)	3	1
df.Fare.mean()	3	3
df['Age'] = df.apply(lambda row: fill_age(row) if np.isnan(row['Age']) else row['Age'], axis=1)	3	3
ax[0].legend()	3	1
data.dropna(inplace=True)	3	3
new_test.head()	3	1
fix_funcs.append(wrap_fix_bin_and_cross())	3	3
x['SureName']	3	1
df_test.drop('training_set', axis=1)	3	3
test.columns.values	3	3
df['Section'] = np.trunc(pd.to_numeric(tmp['Section']).values / 10)	3	3
"df_test[""Title""] = df_data['Title'][891:]"	3	3
traindf.isnull().sum()	3	3
df2.fillna(df2.mean())	3	3
all_data['Fare'] = all_data['Fare'].astype(int)	3	3
data.drop('Cabin', axis=1, inplace=True)	3	3
"test_data[""Age""].isnull().sum()"	3	3
curated_data.head()	3	1
data.drop(columns, axis=1)	3	3
full.set_value(full.index, 'Room', rooms)	3	3
dataset.loc[dataset['Age'] > 62, 'Age'] = 4	3	3
train_df.join(train_pclass_dummies)	3	3
test['SexM'][i] = 0	3	1
test['SexM'][i] = 1	3	1
data['Initial']=data.Name.str.extract('([A-Za-z]+)\.')	3	3
a.to_csv('result.csv')	3	3
train['Family'].loc[train['Family'] == 0] = 0	3	3
output.describe()	3	1
data['Title'] = data['Title'].map(title_map).astype(int)	3	3
"test_data[""Age""].fillna(train_df[""Age""].median(skipna=True), inplace=True)"	3	3
df['AgeBin_Code'] = label.fit_transform(df['AgeBin'])	3	3
classifiers.append(DecisionTreeClassifier(random_state = random_state))	3	3
"final_train[[""Age"", ""Survived""]].groupby(['Age'], as_index=False).mean()"	3	3
out.to_csv('submission.csv', index=False)	3	3
"train_dataset[""Age""].mean() + train_dataset[""Age""].std(),"	3	3
train.set_value(train.index, col, full[:891][col].values)	3	3
X_test.columns.values	3	3
full['Group_size'] = pd.Series('M', index=full.index)	3	3
df['Initial']=0	3	3
dataset.tail()	3	2
"test.drop(""PassengerId"", axis=1)"	3	3
"test_df.drop(""Parch"", axis=1)"	3	3
y.as_matrix()	3	2
columns.append('Build_time_'+solver)	3	1
ans.to_csv(fname, index=False)	3	3
"dataset.drop([""Ticket""], axis = 1, inplace = True)"	3	3
df_test[['PassengerId', 'Survived']].to_csv('predictions.csv', index=False)	3	3
"test[""Fare""] = test[""Fare""].fillna(train[""Fare""].mean())"	3	3
titanic_test_df.isnull().sum()	3	1
"train[""Fare""][train[""Survived""] == 1]"	3	3
"test[""Fare""].mean()"	3	2
submit.head(5)	3	2
Submission['Survived']=gd.best_estimator_.predict(X_test2)	3	1
train['Cabin'].value_counts()	3	3
train_df.head()for dataset in combine:	3	1
"train_df[""Embarked""].value_counts()"	3	3
cols[0:12]	3	3
result.shape	3	3
train_df.sample(10)	3	2
train_features.pop('Survived').astype(int)	3	2
dataset['Boys'] = 0	3	3
model_num.add(Dropout(0.1))	3	1
df_train['Ticket'] = le.fit_transform(df_train['Ticket'])	3	3
train_all.loc[:,feature_list]	3	1
test_df['Sex'] = test_df['Sex'].astype(int)	3	3
titanic_df.drop(['Embarked'],axis=1,inplace=True)	3	3
selected_features.copy()	3	3
"submission['PassengerId'] = csv_gender_submit[""PassengerId""]"	3	1
fix_funcs.append(fix_df_drop_fields)	3	3
X.shape[0]	3	3
result_df.head(11)	3	1
"train_df.drop(""not_alone"", axis=1)"	3	3
submission.to_csv('gender_submission.csv', index=False)	3	3
res_df_solver_C['C'],	3	1
train.loc[ train['Age'] > 64, 'Age'] = 4	3	3
xgb_scores.mean()	3	1
titles.append(title)	3	3
final_train['IsMinor']=np.where(final_train['Age']<=16, 1, 0)	3	3
test.drop(['Ticket'], axis=1, inplace=True)	3	3
"train_data[""Age""].hist(bins=15, density=True, stacked=True, color='orange', alpha=0.5)"	3	3
"test[""NameLength""] = test[""Name""].apply(lambda x: len(x))"	3	3
full.set_value(full.Cabin.isnull(), 'Cabin', 'U0')	3	3
dfTrain.info()	3	2
data_df.replace({'Title': mapping}, inplace=True)	3	3
"test_df.drop(""not_alone"", axis=1)"	3	3
"X_test[[""PassengerId""]]"	3	1
result.info()	3	3
data_df.info()	3	1
data.drop('Parch', axis=1, inplace=True)	3	3
test['Sex'][test['Sex'] == 'male'] = 0	3	3
title_mean_age[1][j]	3	3
test_df.loc[ test_df['Age'] <= 16, 'Age'] = 0	3	3
tf.transpose(Z3)	3	3
"plt.hist(temp, histtype=""barstacked"", bins=3)"	3	2
tmp['Section'] = [e[1:].split(' ')[0] for e in tmp['Cabin']]	3	3
train.drop(['Embarked'],axis=1,inplace=True)	3	3
x['Age_bin']=np.nan	3	2
title_and_sex[['Title', 'Sex']].groupby(['Title'], as_index=False).agg(['mean', 'count', 'sum'])	3	3
"new_data[""Pclass""] = new_data[""Pclass""] -1"	3	1
d['age_bin'] = list(pd.cut(df1['AgeLevel'], 5).unique())	3	3
data['Age']	3	3
"training.replace({""Title"": title_replacements}, inplace=True)"	3	3
data.loc[(data['Age'] > 16) & (data['Age'] <= 32), 'Age'] = 1	3	3
train_dataset['Cabin']	3	3
model.add(Dense(8, activation='relu'))	3	3
df_train.loc[(df_train['Age'] > 32) & (df_train['Age'] <= 48), 'Age'] = 2	3	3
kind_type[4]	3	1
df[['Embarked']] = df[['Embarked']].fillna(value=df['Embarked'].value_counts().idxmax())	3	3
testing.isna().sum()	3	1
d['fare_bin'] = list(pd.qcut(df1['FareLevel'], 4).unique())	3	3
train['Survived'] = Survived	3	2
data['Age'].copy()	3	3
df.loc[(df['Age'] > 32) & (df['Age'] <= 48), 'Age'] = 2	3	3
df['Sex'] = df['Sex'].map({'male':0, 'female':1})	3	3
df_test_ml.head()	3	3
train_df.isna().sum()	3	2
df['Survived'].value_counts()	3	3
test['Pclass3'][i] = 1	3	1
"titanic.loc[titanic[""NameLength""]>37 , ""NlengthD""] = 'long'"	3	3
dataset['Sex']=dataset['Sex'].map(sex_mapping)	3	3
my_imputer.transform(test_X)	3	3
df.drop('Embarked', axis=1)	3	3
testset[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	3	3
trainData['Survived']	3	3
np.where(train.Sex=='female', 0, 1)	3	3
feature_columns.append(tf.feature_column.numeric_column(key=key))	3	3
test.drop('Ticket', axis=1)	3	3
Merged_data.head()	3	2
titanic_df['Name'].apply(extract_title).unique()	3	3
X_train['Survived']	3	2
test.drop('Embarked',axis = 1,inplace = True)	3	3
xtrain.head()	3	2
X.iloc[train_index], X.iloc[test_index]	3	3
X['Title'] = X['Title'].replace('Mme', 'Mrs')	3	3
predictions.append(0) # survived	3	1
test_data.drop(['PassengerId']+cols_with_missing_values, axis=1)	3	3
hist_s.insert(0, 0.0)	3	3
test['Embarked'].mode()	3	3
dataset['Title'] = dataset['Title'].fillna(3)	3	3
"test_dataset[""Fare""].fillna(test_dataset[""Fare""].median(), inplace=True)"	3	3
dataset.Embarked.isnull().sum()	3	2
"train.drop([""Name"", ""Ticket"", ""Cabin""], axis=1, inplace=True)"	3	3
dataset['FamilySize'] = dataset['Parch'] + dataset['SibSp'] + 1	3	3
"dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',  	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')"	3	3
train_y.head()	3	3
train.set_value(train.Embarked.isnull(), 'Embarked', 'C')	3	3
known_data.copy()	3	1
titanic.isnull().sum().sort_values(ascending=False)	3	2
lsvc_scores.mean()	3	1
df_train.shape, df_test.shape	3	2
full.describe()	3	2
"new_data.drop(""Embarked"", axis=1)"	3	1
test_data.drop(['Survived'],axis=1)	3	3
df_train.drop('training_set', axis=1)	3	3
acc_lst.append(acc.mean())	3	3
param.copy()	3	1
data_copy['Sex']=data_copy['Sex'].fillna('male')	3	3
fix_funcs.append(fix_df_cabin_and_ticket)	3	3
x_train.shape, x_test.shape	3	2
train.head(80)	3	3
titanic_df['Age'].std()	3	3
passenger['Sex'] == 'female':	3	2
X.groupby('Name').mean()['Age'].plot(kind='bar',figsize=(13,8), ax = ax)	3	3
cabin_floor_list.append(min(cabin_floor))	3	1
"titanic[""Fare""] = titanic[""Fare""].fillna(titanic[""Fare""].median())"	3	3
sol.to_csv('solution3.csv', index=False)	3	3
"train_df.describe(include=[""O""])"	3	3
df_sex.male[0]/df_sex.male.sum()*100	3	3
test_df.shape[0]	3	3
self.digits_rev.append(dict([(_v,_k) for (_k,_v) in dig_d.items()]))	3	3
test.drop(['S','Q'],axis=1,inplace=True)	3	3
"testing.drop(labels = [""Cabin"", ""Ticket""], axis = 1, inplace = True)"	3	3
df['Age'] = df['Age'].fillna(df['Age'].mean())	3	3
train[['Title', 'Survived']].groupby(['Title'], as_index=False).agg(['mean', 'count', 'sum'])	3	3
data_df.head(n=3)	3	1
in ['Age','Fare']:	3	2
"train[""Child""][train[""Age""] < 18] = 1"	3	3
df_test.head(5)	3	3
df.drop('Survived', axis = 1)	3	3
df['second_perc'] = (df[df.columns[1]]/(df[df.columns[0]] + df[df.columns[1]] + df[df.columns[2]]))	3	1
test_df.reset_index(inplace=True)	3	1
"df.loc[(df.Age.isnull())&(df.Title=='Other'),'Age']= df.Age[df.Title==""Other""].mean()"	3	3
df_test.drop('PassengerId',axis=1).copy()	3	3
data['Age_band'].value_counts().to_frame().style.background_gradient(cmap='summer')	3	3
"df_test['Cabin'] = df_test['Cabin'].fillna(""None"")"	3	3
"training.loc[training[""Title""] == ""Mrs"", ""Title""] = 2"	3	3
title_mean_age.append(X.groupby('Name').Age.mean())	3	3
test_df.loc[(test_df['Age'] > 32) & (test_df['Age'] <= 48), 'Age'] = 2	3	3
df_test['Title'].value_counts()	3	3
train_df[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(by='Survived',ascending=False)	3	3
test_data['Title'] = test_data['Title'].replace('Mlle', 'Miss')	3	3
df.head(15)	3	3
test.sample(10)	3	2
str.join('_', kl)	3	3
df_test.drop('Cabin', axis=1, inplace=True)	3	3
data.apply(lambda r: r.Age if pd.notnull(r.Age) else age_ref[r.Title] , axis=1)	3	3
dataset['Title'].value_counts()	3	2
in ['Pclass']:	3	3
med_l.append(df1['Age'].median())	3	3
"test_data['Has_Cabin'] = test_data[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	3	3
train_df['Age'].isnull().any()	3	2
train.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)	3	3
X.tail()	3	2
"titanic_train[""Survived""].iloc[train]"	3	2
"test_dataset[""Age""].mean() - test_dataset[""Age""].std(),"	3	3
df_train.append(df_test) # The entire data: train + test.	3	3
"test.drop([""Name""], axis = 1)"	3	3
"test_df.drop(""PassengerId"", axis=1)"	3	3
train.groupby('Pclass').count()	3	3
X_test['PassengerId'],	3	3
test_dataset['Ticket']	3	3
test_dataset['Cabin']	3	3
fix_funcs.append(wrap_fix_age())	3	3
ax[1].legend()	3	1
related_people.update(Y)	3	1
X_train2.describe()	3	1
df1['Embarked'] = df1['Embarked'].fillna(most_repeated_value)	3	3
train_data[['Survived']]	3	3
df['Name_length'] = df['Name'].apply(len)	3	3
x_train.shape[1]	3	2
importances_df.sort_values(by=['Feature_Importance'], ascending=False, inplace=True)	3	3
dataset['Title'] = dataset['Title'].replace('Mme','Mrs')	3	3
df_titanic['Age'].isnull().sum()	3	1
classifiers.append(GaussianNB())	3	3
"trainData.groupby([""Sex"", ""Survived""])[""Survived""].count()"	3	3
data['Fare'] = data['Fare'].fillna(data['Fare'].mean())	3	3
X['Title'] = X['Name'].apply(get_title)	3	3
train.Embarked.fillna('S', inplace=True)	3	3
df.drop('Name',axis=1,inplace=True)	3	3
row['Cabin']	3	3
df['Alone'] = 0	3	3
train_df.drop(['SibSp','Parch'], axis=1)	3	3
"test_df[""FamilySize""] = test_df[""SibSp""] + test_df[""Parch""] + 1"	3	3
test[['PassengerId','Survived']].set_index('PassengerId')	3	1
dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} )	3	3
df.loc[ df['Fare'] <= 7.91, 'Fare'] = 0	3	3
test['Age'].fillna(test['Age'].mean(),inplace=True)	3	3
data['TicketPrefix'].value_counts()	3	1
X_test.join(dummies)	3	1
ada_scores.mean()	3	1
test_dataset['Embarked']	3	3
Age.median()	3	3
enc.transform(temp)	3	1
titanic_data.describe()	3	3
titanic_test.loc[titanic_test['Embarked'] == 'S', 'Embarked'] = 0	3	3
gender.head()	3	3
d['fare_bin'].sort()	3	3
TitanicTrain.drop(['Survived','Type'],axis=1)	3	1
data_test.describe()	3	3
"titanic_test[""Age""].std()"	3	3
max_depth.append(None)	3	3
etc_scores.mean()	3	1
data['Title'] = data['Title'].replace(['Lady', 'Dona', 'Mme', 'Countess'], 'Mrs')	3	3
df['CuicoHijoUnico'] = (4-df['Pclass'])/(df['Parch']+1)	3	3
"train.pivot_table(index=""Age_categories"",values='Survived')"	3	3
X_test.head(10)	3	2
testset.loc[:,['Pclass','Sex','Age','Fare','Embarked']]	3	3
dataset['Sex'] = dataset['Sex'].map({'female': 0, 'male': 1}).astype(int)	3	3
df['Survived'],	3	3
sub_df.age.std()	3	1
training_data[['Pclass', 'Survived']].groupby(['Pclass']).mean()	3	3
"data.drop([""Survived""], axis=1)"	3	3
"new_data[""Fare""] = new_data[""Fare""]/ 20"	3	1
train['FamilySize'] = train['Parch'] + train['SibSp'] + 1	3	3
tr_df.head()	3	1
"dftotal.at[index,""KNNs""]=nbours_index.values"	3	1
s.append(bucket_id)	3	3
"df_data[""Deck""] = df_data.Cabin.str.extract('([A-Za-z])', expand=False)"	3	2
d['age_bin']	3	3
y[1]	3	2
train_df['Sex'].value_counts()	3	3
df_data.groupby('Title')['Age'].median()[title]	3	3
test_dataset['FamilySize']	3	3
X.iloc[:,1]=pd.DataFrame(got).Name.str.split('\s+').str[1]	3	3
"new_data[""Parch""] = preprocessing.maxabs_scale(data[""Parch""])"	3	1
dataset['Salutation'] = dataset.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	3	3
"submission.to_csv(""titanic-submission.csv"", index=False)"	3	3
gbc_scores.mean()	3	1
test_data['Title'] = test_data.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	3	3
test.drop(['Ticket'],axis=1)	3	3
base_predictions_train.astype(float).corr().values,	3	3
"test_data[""Fare""].fillna(train_df[""Fare""].median(skipna=True), inplace=True)"	3	3
"train.Embarked.fillna(""C"", inplace=True)"	3	3
Data.info()	3	1
data['Pclass'].unique():	3	2
"train[""Age""].fillna(train[""Age""].mean(), inplace=True)"	3	3
test.drop('young',axis=1)	3	3
"dataset.loc[ dataset['Age'] <= 14, 'Age'] 						          = 0"	3	3
df.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')	3	3
train_X.shape, train_Y.shape, test_X.shape	3	2
train['Embarked']	3	2
test_data.loc[:,feature_list]	3	1
"df_data[""Title""] = df_data[""Title""].replace('Mlle', 'Miss')"	3	3
train.drop(['PassengerId', 'AgeBand', 'FareBand'], axis=1)	3	3
df_test.drop('Survived', axis=1)	3	3
"titanic_test[""Age""].mean()"	3	3
train['Sex'].value_counts()	3	3
train['Age'] = train['Age'].fillna(np.mean(train['Age']))	3	3
testset.loc[:, ['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	3	3
full['Room'] = full.Room/full.Room.sum()	3	3
s.fillna('_N/A_')	3	3
"train_set.select_dtypes(include=[""object""]).columns"	3	1
data.loc[(data['Age'].isnull()) & (data['Title'] == title), 'Age'] = age_to_impute	3	3
train['Deck'] = train['Cabin'].str[0]	3	3
a[0]	3	3
strat_train_set.head()	3	1
df_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)	3	2
"df_train[""Age""] = df_data['Age'][:891]"	3	3
df_train.loc[(df_train['Age'] > 16) & (df_train['Age'] <= 32), 'Age'] = 1	3	3
train['Cabin'].describe()	3	3
"res.describe().T.loc[:, [""mean"", ""50%"", ""75%"", ""25%""]].plot(ax=ax)"	3	1
test_data['Age'] = test_data['Age'].fillna(test_data['Age'].mean())	3	2
"test.drop(""Cabin"",axis=1,inplace=True)"	3	3
ax[1].set_title('Data Missingness for Test Data',fontsize=16)	3	1
X_test.head(5)	3	3
df_sex.female[0]/df_sex.female.sum()*100	3	3
ax[1].set_title('Sex: Survived vs Dead')	3	3
Age.dropna().values, bins=range(0, 81, 1), kde=False,	3	1
data['Died'] = 1 - data['Survived']	3	3
df_train.Embarked.dropna().mode()[0]	3	3
test['Embarked'].fillna(value = 'S', inplace = True)	3	3
df.loc[(df['Age'] > 48) & (df['Age'] <= 64), 'Age'] = 3	3	3
train_df['Age'].hist(bins=70, ax=axis1)	3	2
score.append(clf.score(X, y))	3	2
data_dum.head()	3	3
"train[[""Has_Cabin"", ""Survived""]].groupby(['Has_Cabin'], as_index=False).sum().sort_values(by='Survived', ascending=False)"	3	3
titanic_df.dropna(axis=0,how='any')	3	3
train.drop('Name', axis = 1, inplace = True)	3	3
train[['Age', 'Fare', 'TraveledAlone', 'Pclass_1', 'Pclass_2', 'Sex_male', 'Embarked_C']]	3	1
df_test.drop(['PassengerId', 'Name',  'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)	3	3
test[['Age', 'Fare']] = std_scale.transform(test[['Age', 'Fare']])	3	3
df.dropna(subset = ['Embarked'], inplace = True)	3	3
answer.to_csv('answer.csv')	3	3
str.join('_', fields)	3	3
str[1].str.split('.').str[0].str.strip()	3	3
df1.info()	3	3
train_df.drop(['Ticket','Cabin'],axis=1)	3	3
_df['Cabin'] = df_train['Cabin'].apply(lambda x: x[0] if type(x) == str else 'nan')	3	3
in ['Sex', 'Embarked', 'Deck']:	3	1
"train[""FamilySize""] = train[""SibSp""] + train[""Parch""]"	3	3
X.columns.values	3	2
df['Name']:	3	3
np.append(y_true, labels[test])	3	1
row['Pclass'] == 2:	3	2
test.drop(columns = ['Pclass'])	3	1
in ['male','female']:	3	2
data['Sex'] = data['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	3	3
test_X.isnull().sum()	3	3
"res_c[""std_test_score""]"	3	1
train.dropna(inplace = True)	3	3
titanic_df['person'].value_counts()	3	3
test.drop('Cabin', axis=1)	3	3
whole.set_value(idx, 'Age', age)	3	1
"train_data[""Embarked""].fillna(""S"", inplace=True)"	3	3
"train_dataset[""Embarked""].fillna('S', inplace=True)"	3	3
tf.add(tf.matmul(W3, A2), b3)	3	3
df1['Age'] = df1['Age'].apply(lambda x: str(int(x / 10) * 10))	3	3
full.set_value(full.index, 'Names', names)	3	3
df['Title']=df['Name'].map(lambda x: substrings_in_string(x, title_list))	3	3
train_clean.sample(5)	3	1
df1['Fare'] = df1['Fare'].fillna(med)	3	3
titanic.Age.isnull().sum()	3	2
train['Family'].loc[train['Family'] > 0] = 1	3	3
test[['PassengerId']]	3	3
train_dataset['Title'] = train_dataset.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	3	3
"train_df.drop([""Survived""], axis=1)"	3	3
train_df['Survived'] = Survived	3	3
"test_df.drop(""PassengerId"",axis=1)"	3	3
x['Embarked']	3	1
"df[""Age""].isnull().sum()"	3	3
"df_train['Embarked'] = df_train['Embarked'].fillna(""S"")"	3	3
"dataset[""SibSp""][x]==0:"	3	1
train['Family']=train['SibSp']+train['Parch']	3	3
columns.append('Val_acc_'+solver)	3	1
train_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head()	3	3
"df[[""SibSp"", ""Survived""]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	3	2
"train[""Title""] = extracted_titles.map(titles)"	3	3
my_submission.head(10)	3	3
df_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})	3	3
dataset.corr()	3	3
"survived_correlation.drop(""Survived"")"	3	1
axs[0].set_title('female')	3	1
"train_data['Has_Cabin'] = train_data[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	3	3
train_data.drop(['PassengerId'], axis=1)	3	3
tit_df_san.info()	3	1
df[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean()	3	1
df_train.drop(['Survived'], axis=1)	3	3
train.Age.groupby([train.Pclass,train.Sex,train.Social_name]).median()	3	1
"testdf.drop(""PassengerId"", axis=1).copy()"	3	2
train_df.drop(['Cabin'],inplace=True,axis=1)	3	3
Embarked.mode()	3	3
train_data['Age'].std()	3	3
df_train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	3	3
df.iloc[:891].copy()	3	3
"df_test[""Name""]"	3	3
test_df['Family'] = test_df['SibSp'] + test_df['Parch']	3	3
test.loc[ test['Age'] > 64, 'Age'] = 4	3	3
sns.boxplot(x='Pclass',y='Age',data=train,ax=ax[0,2])	3	3
dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 50), 'Age']        = 3	3	3
"train_set[""Survived""].copy()"	3	3
self.digits.append(dig_d)	3	3
train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()	3	3
df_train.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)	3	3
d['age_med'] = df1['Age'].median()	3	3
df['Title']=df.apply(replace_titles, axis=1)	3	3
data.head(20)	3	3
raw_train.head()	3	3
Merged_data.info()	3	2
test_data.drop(['Name'], axis=1)	3	3
Columns [2]	3	1
test['Embarked'].fillna('S',inplace=True)	3	3
test['SexF'] = test['Sex']	3	1
train_df['Cabin'].isnull().sum()	3	2
train_df['Survived'].ravel()	3	3
hist_t_by_s.append([])	3	3
df.Sex.astype('category')	3	3
test_passenger_id.copy()	3	3
test_df.drop(['Pclass'], axis=1, inplace=True)	3	3
"testing.loc[testing[""Title""] == ""Mrs"", ""Title""] = 2"	3	3
y_test.shape	3	3
"train[""Cabin_type""] = train[""Cabin""].str[0]"	3	3
df_grp.iterrows():	3	2
"dataset[""Sex""] = dataset[""Sex""].map({""male"":0, ""female"":1})"	3	3
df3_test.shape	3	2
"train.pivot_table(index=""Age_categories"", values=""Survived"")"	3	3
R.reset_index(inplace=True)	3	1
X.values[train_index], X.values[test_index]	3	3
train_df['Fare'].fillna(train_df['Fare'].dropna().median(), inplace=True)	3	3
np.std(1 - train_scores, axis = 1)	3	3
lda.transform(X_test)	3	2
df_test['Embarked'] = le.fit_transform(df_test['Embarked'])	3	3
train.drop(['Survived'], axis=1, inplace=True)	3	3
x['Fare_bin']=np.nan	3	2
ax[2].legend()	3	1
test_data['Fare'] = test_data['Fare'].fillna(30.0)	3	3
_df['Ticket'] = df_train['Ticket'].apply(lambda x: x[0] if type(x) == str else 'num')	3	3
"in [""Pclass"",""Sex"",""Age_categories""]:"	3	3
"df.loc[(df.Age.isnull())&(df.Title=='Master'),'Age']= df.Age[df.Title==""Master""].mean()"	3	3
train_dataset['Port'] = train_dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	3	3
x_train.isnull().sum()	3	2
title_mean_age[0][j]:	3	3
"train.drop(""Name"", axis=1, inplace=True)"	3	3
forest_scores.mean()	3	3
scaler.transform(df_test_ml)	3	3
df.dropna(axis = 0, how = 'any')	3	3
svc_scores.mean()	3	1
dataset.loc[~dataset['Age'].isnull(),'Age'].unique(): # For each age	3	1
my_submission.describe()	3	3
train_df['Sex'] = train_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	3	3
d['fare_med'] = df1['Fare'].median()	3	3
axs[1].set_title('male')	3	1
df_test['Fare'] = df_train['Fare'].fillna(df_train['Fare'].mean())	3	3
train_data['Embarked'].value_counts()	3	3
df_embark.iloc[0,0]/df_embark.iloc[:,0].sum()*100	3	3
"trainData[""Survived""].fillna(0).as_matrix()"	3	3
test_predict_result.astype(np.int32)	3	3
trainDf.groupby(response).count().index.values	3	1
age_data.head()	3	1
train_data['Age'] = train_data['Age'].astype(int)	3	3
MLA_compare.loc[row_index, 'MLA Test Accuracy 3*STD'] = cv_results['test_score'].std()*3	3	3
sml.test.info()	3	3
dataset['Embarked'] = dataset['Embarked'].fillna(0)	3	3
df.groupby('Title')['Age'].mean().to_dict()	3	1
data['Age'].fillna(data['Age'].median(),inplace=True)	3	3
pd.DataFrame.from_dict(st_pred_items, orient='index')	3	1
"test_dataset[""Embarked""].fillna('S', inplace=True)"	3	3
train.drop(['PassengerId','Name','Ticket'], axis = 1, inplace = True)	3	3
titanic.to_csv('Improved_predictions.csv', index = False)	3	3
test.drop(drop_elements,axis=1)	3	3
test_new.head()	3	3
dummy_encoded_train_predictors.values	3	1
test_df.loc[(test_df['Age'] > 48) & (test_df['Age'] <= 64), 'Age'] = 3	3	3
test_dataset['Age']    = test_dataset['Age'].astype(int)	3	3
test_df.describe(include=['O'])	3	3
train_X[0:5]	3	3
train_data['Age'] = train_data['Age'].fillna(30.0)	3	3
ticketClass.count() / data[(data.survived == 1)].ticketClass.count()	3	1
test.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)	3	3
model.add(tf.keras.layers.Dense(512,activation = tf.nn.relu))	3	1
Fare.median()	3	3
"testing.loc[testing[""Title""] == ""Miss"", ""Title""] = 0"	3	3
train_df[['Title','Survived']].groupby(['Title'],as_index=False).mean()	3	2
test_df['Survived']	3	3
"young.div(young.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True)"	3	1
np.sum((y-t)*x[:, d])	3	2
test_df['Survived'] = test_pred	3	2
"testing.replace({""Title"": title_replacements}, inplace=True)"	3	3
Columns[1]	3	1
df['FareBin_Code'] = label.fit_transform(df['FareBin'])	3	3
"new_data[""Fare""] = preprocessing.maxabs_scale(data[""Fare""])"	3	1
test_df.loc[(test_df['Fare'] > 7.91) & (test_df['Fare'] <= 14.454), 'Fare'] = 1	3	3
df['Sex'] = df['Sex'].replace('female', 0)	3	3
train.corr()['Survived']	3	3
train.get(['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked'])	3	1
dataset.loc[:,['Pclass','Sex','Age','Fare','Embarked']]	3	3
d['fare_med']	3	3
models.keys():	3	3
missing_age_train['Age']	3	3
"data_train.drop(""Survived"", axis=1)"	3	3
test.apply(lambda x: sum(x.isnull()),axis=0)	3	1
train_df.corr(method = 'pearson')	3	2
trainDf.groupby(explanatory).count().index.values	3	1
df_titanic['Cabin'].unique()	3	2
data_df.loc[(data_df['Age'].isnull()) & (data_df['Title'] == title), 'Age'] = age_to_impute	3	3
data['Age'].plot.hist()	3	2
df_raw.head()	3	2
series.max()	3	3
dataset.drop(drop_column, axis=1, inplace = True)	3	3
df_train.drop(['Name'], axis=1)	3	3
"dtype_df.groupby(""Column Type"").aggregate('count').reset_index()"	3	3
fields.append(str(dig_rev_d[digit]))	3	3
cnf_matrix.astype('float') / cnf_matrix.sum(axis=1)[:, np.newaxis]	3	3
"train[""Age""].hist();"	3	3
hist_t_by_s.insert(0, [0.0])	3	3
test['Fare'].fillna(test['Fare'].median(), inplace = True)	3	3
raw_data.info()	3	3
in ['NorAge', 'NorFare', 'NorNames', 'Group_num']:	3	3
X_test.isnull().sum()	3	3
test_df['Title'].value_counts()	3	2
train_df['Survived'].value_counts()	3	3
test.drop(['Name','Ticket'],axis=1,inplace=True)	3	3
test['EmbarkedC'][i] = 0	3	1
test['EmbarkedC'][i] = 1	3	1
df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age']=45	3	3
df_train['Sex'] = le.fit_transform(df_train['Sex'])	3	3
"evaluation.to_csv(""evaluation_submission.csv"",index=False)"	3	3
"df_test[""Fare""].fillna(df_test.groupby(""Pclass"")[""Fare""].transform(""median""), inplace=True)"	3	3
train.drop(['PassengerId','Name','Ticket'], axis=1)	3	3
"test_data[""Fare""].fillna(test_data[""Fare""].median(), inplace=True)"	3	3
train_clean.isnull().sum()	3	1
train_df.Age.describe()	3	3
submission.to_csv('titanic.csv',index=False)	3	3
original_train.copy()[['Name', 'Sex']]	3	3
data_copy.loc[:, 'Embarked'] = data_copy['Embarked'].fillna('S')	3	3
X.mean()	3	3
df_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1	3	2
dataset['Salutation'] = dataset['Salutation'].replace('Ms', 'Miss')	3	3
"test_df[""Survived""]"	3	3
"new_data[""Pclass""] = preprocessing.maxabs_scale(data[""Pclass""])"	3	1
df['Embarked'].fillna('S', inplace=True)	3	3
df.Fare.fillna(median_fare, inplace=True)	3	2
Y_pred.astype(int)	3	3
test.drop('Ticket',axis=1,inplace=True)	3	3
X.shape[1] # Features	3	1
titanic.head(3)	3	2
train_df['Age'].hist(bins=70, ax=axis2)	3	3
submit.to_csv('submit.csv')	3	3
title_and_sex['Title'] = title_and_sex['Name'].apply(get_title)	3	3
final_training_df.head()	3	1
submit.set_index('PassengerId',inplace=True)	3	3
models.loc[-1]=new_row	3	1
train_df.drop('Cabin', axis = 1, inplace = True)	3	3
_df2['Age'] = _df2['Age'].fillna(100)	3	3
data['AgeBin_Code'] = label.fit_transform(data['AgeBin'])	3	3
train['logFare'] = np.where(train.Fare != 0, np.log(train.Fare), train.Fare)	3	1
ticket.append(x.replace('.','').replace('/','').strip().split(' ')[0])	3	3
df.drop(['Cabin'], axis=1)	3	3
"train_data[""Age""].plot(kind='density', color='orange')"	3	3
comb_data.dtypes	3	1
train['Age'].median()	3	3
train.drop('Survived', axis=1, inplace=True)	3	3
train_data.drop(['PassengerId','Survived']+cols_with_missing_values, axis=1)	3	3
df['family'] = df['SibSp'] + df['Parch'] + 1	3	3
titanic_df['Pmm'] =     titanic_df[['Pclass','Male','MasterMiss']].apply( get_malem, axis=1 )	3	3
df_test.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)	3	3
test.drop(columns = ['Sex'])	3	1
test.Fare.fillna(test.Fare.mean(), inplace=True)	3	3
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data=titanic)"	3	3
submission.to_csv('submit.csv', index=False)	3	3
model_params.update({'solver': solver})	3	1
new.append(dataset)	3	1
data.isnull().sum() # check each column.	3	1
test_df['Title'] = test_df['Name'].apply(get_title)	3	3
"titanic[""Age""].median()"	3	3
train.size	3	3
tit_df_test.info()	3	1
data['FareBin'] = pd.qcut(data['Fare'], 4)	3	3
full['Embarked'].value_counts()	3	3
df['Age'].max()	3	3
"processed_dataframe[""IsAlone""] = dataframe[""IsAlone""].map({""yes"": 1, ""no"": 0})"	3	1
train[['Age', 'Fare']] = std_scale.transform(train[['Age', 'Fare']])	3	3
combined.loc[train.index]	3	1
testing.shape	3	3
full.drop(labels=['PassengerId', 'Name', 'Cabin', 'Survived', 'Ticket', 'Fare'], axis=1, inplace=True)	3	3
train.drop(['Survived'], axis=1).values	3	3
X_all.info()	3	1
"train_dataset[""Age""].mean() - train_dataset[""Age""].std(),"	3	3
train['Pclass'] = train['Pclass'].astype(object)	3	3
"train_set.select_dtypes(exclude=[""object""]).columns"	3	1
"train[""Title""] = titles"	3	3
test.drop(['Fare'],axis=1)	3	3
history.history['loss']	3	3
dataset.loc[ dataset['Fare'] > 31, 'Fare']  = 3	3	3
test_dataset['SibSp']	3	3
comb['Embarked'] = comb['Embarked'].fillna('S')	3	3
df.keys()	3	3
in ['Mr']:	3	3
x_train['Age'] = x_train['Age'].fillna(x_train['Age'].mean())	3	3
"dataset.loc[ dataset['Fare'] <= 2.7, 'Fare'] 						      = 0"	3	3
train_df[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False)	3	3
data.Name.tail()	3	3
select.transform(X)	3	1
name.head()	3	1
merged_df.head()	3	1
train_data[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	3	2
data['FareBin_Code'] = label.fit_transform(data['FareBin'])	3	3
train.drop('Embarked',axis = 1,inplace = True)	3	3
data.drop('Cabin',axis=1,inplace=True)	3	3
dataset['Embarked'] = dataset['Embarked'].replace(['0', '2'], '0')	3	3
test[['PassengerId', 'Survived']]	3	3
test.PassengerId.values	3	2
train.describe(include='O')	3	2
df.isnull().any()	3	2
test_dataset['Name']	3	3
Train_Master['Embarked'] = Train_Master['Embarked'].fillna('S')	3	1
Xmat.iloc[train.shape[0]:,:]	3	3
data['Family_Survival'] = DEFAULT_SURVIVAL_VALUE	3	3
test.Age.fillna(test.Age.median(),inplace=True)	3	3
full_data.iloc[891:,:]	3	1
combined_df.head()	3	2
test_df['Fare'].fillna(test_df['Fare'].mean(),inplace=True)	3	3
"titanic_df[""Embarked""].unique()"	3	2
Survive_Corr[1:9] # remove the 'Survived'	3	2
plt.hist([y1,y2], bins = bins, color = [vert,rouge], label = ['Survécu','Non-Survécu'])	3	1
"training[""Title""] = training[""Name""].str.extract(""([A-Za-z]+)\."",expand=True)"	3	3
ticket.append('N')	3	3
"survived[""Age""].plot.hist(alpha=0.5, color=""red"", bins=50)"	3	2
dataset['Sex'] = dataset['Sex'].fillna(0)	3	3
train.drop(['Survived','young'],axis=1)	3	3
validation.drop(columns = ['Survived'])	3	1
"titanic_df[""Sex""].unique()"	3	2
train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()	3	3
dataset.sample(5)	3	2
test.drop(columns = ['Embarked'])	3	1
dataset['Title'] = dataset['Title'].replace(['Mme'], 'Mrs')	3	3
train.Age.hist()	3	3
"train_data[""Embarked""].fillna(train_df['Embarked'].value_counts().idxmax(), inplace=True)"	3	3
"dataset[""SibSp""][x]==3:"	3	1
train.drop('Ticket',axis=1,inplace=True)	3	3
cols[4]	3	3
columns.append('Train_acc_'+solver)	3	1
temp.div(temp.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True, color=['orchid','cornflowerblue'], grid=False, figsize=(8, 5))	3	2
titanic_df.iterrows():	3	1
self.transform(X)	3	3
df_submit['PassengerId'] = df_test['PassengerId']	3	3
dataset.loc[(dataset['FamilySize'] == 1), 'IsAlone'] = 1	3	3
data['Sex'] = data['Sex'].astype(int)	3	3
dataset['Salutation'] = dataset['Salutation'].replace('Mme', 'Mrs')	3	3
"train.pivot_table(index = ""Sex"", values = ""Survived"")"	3	3
hist_s_new.append(hist_s[i - 1])	3	3
s.astype(str)	3	3
copy.copy(self.field_info[k])	3	3
train_df['Embarked'].isnull().sum()	3	2
df_embark.iloc[0,2]/df_embark.iloc[:,2].sum()*100	3	3
data_copy.loc[:, 'Sex'] = data_copy['Sex'].fillna('female')	3	3
"dataset.loc[ dataset['Fare'] > 2.7, 'Fare'] 							  = 3"	3	3
train.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)	3	3
"train[""Cabin_type""] = train[""Cabin_type""].fillna(""Unknown"")"	3	3
df_train['Embarked'] = le.fit_transform(df_train['Embarked'])	3	3
final_train.drop('Survived', axis=1)	3	1
train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).agg(['mean', 'count', 'sum'])	3	3
train_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)	3	3
df['title'] = df.apply(lambda row: re.split('[,.]+', row['Name'])[1], axis=1)	3	3
axes[2].set_title('Class 3')	3	2
data.iloc[:,2],	3	1
df['third_perc'] = (df[df.columns[2]]/(df[df.columns[0]] + df[df.columns[1]] + df[df.columns[2]]))	3	1
data_test.tail()	3	2
data.drop('Survived',axis=1)	3	3
test['Pclass1'][i] = 0	3	1
X_full.isnull().sum()	3	1
"train_df[[""Embarked"", ""Survived""]].groupby(['Embarked'],as_index=False).mean()"	3	3
test_dataset['Parch']	3	3
"train[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	3	3
"train.drop([""Survived""], axis=1)"	3	3
train.shape[0] # 891	3	3
df.Embarked.fillna('S',inplace=True)	3	3
dataset_test.values	3	2
"new_data.drop(""Name"", axis=1)"	3	1
df['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	3	3
test['Embarked'] = lbl.transform(list(test['Embarked'].values))	3	3
"df.to_csv(""submission.csv"", index=False)"	3	2
numpy.transpose(train.Survived)	3	1
df_test['FamilySize'] = df_test['SibSp'] + df_test['Parch']	3	3
test_orig.copy()	3	3
"titanic_test.loc[titanic_test[""NameLength""]>37 , ""NlengthD""] = 'long'"	3	3
test['Deck'] = test['Cabin'].str[0]	3	3
"new_data[""SibSp""] = preprocessing.maxabs_scale(data[""SibSp""])"	3	1
train_df.tail(10)	3	3
df_test['Ticket'] = le.fit_transform(df_test['Ticket'])	3	3
combined_df.describe()	3	2
X['Title'] = X['Title'].replace('Mlle', 'Miss')	3	3
sample_submission_df.to_csv('basic_decision_tree.csv', index=False)	3	3
df['Fare'].fillna(df['Fare'].mean(), inplace=True)	3	3
X.drop(['Survived'], axis=1)       # remove the dependent variable from the dataframe X	3	3
train.drop('PassengerId',axis=1,inplace=True)	3	3
df_test['Age'] = df_train['Age'].fillna(df_train['Age'].mean())	3	3
test.drop('male',axis=1,inplace=True)	3	3
test['Age'][i] = train['Age'].mean()	3	1
train['Age']=train[['Age','Pclass']].apply(impute_age,axis=1)	3	3
train_dataset['Embarked'].value_counts()	3	2
traindf.describe()	3	3
X.loc[row_index,'Embarked']='S'	3	3
train['Deck'].value_counts()	3	2
"processed_dataframe[""IsFemale""] = dataframe[""Sex""].map({""female"": 1, ""male"": 0})"	3	1
Series_feat_imp.sort_values(ascending=True).plot.barh()	3	3
df['Title'].head()	3	3
train['Title'] = train['Title'].map(title_mapping)	3	3
train_df['Title'] = train_df['Name'].apply(get_title)	3	3
test['family_size'] = test['SibSp'] + test['Parch'] + 1	3	3
df1['Embarked'].mode()[0]	3	3
clfs.append(md)	3	1
train_test_data[0], train_test_data[1]	3	1
df['first_perc'] = (df[df.columns[0]]/(df[df.columns[0]] + df[df.columns[1]] + df[df.columns[2]]))	3	1
df1.head()	3	3
test['EmbarkedQ'][i] = 0	3	1
test['EmbarkedQ'][i] = 1	3	1
df1['AgeLevel'] = df1['Age'].fillna(age_med)	3	3
df1['FamilyNum'] = df1['SibSp'] + df1['Parch'] + 1	3	3
test['EmbarkedS'][i] = 0	3	1
test['EmbarkedS'][i] = 1	3	1
"dataset[""Embarked""].fillna(""S"", inplace = True)"	3	3
"train.drop(""Ticket"", axis=1, inplace=True)"	3	3
train.Age.fillna(train.Age.mean(), inplace=True)	3	3
fields.append('na')	3	3
full['Group_num'] = full.Parch + full.SibSp + 1	3	3
dataset['Title'] = dataset['Title'].replace(['Don', 'Rev', 'Capt', 'Jonkheer'],'DRCJ')	3	3
"train_data[""Age""].isnull().sum()"	3	3
titanic_df['Cabin'].dropna()	3	3
"corr_matrix[""Survived""].sort_values(ascending=True)"	3	1
test_df2.values	3	3
df[['Age','Fare']]	3	1
full_name[0]	3	3
"testData[[""PassengerId"", ""Survived""]]"	3	3
"df.loc[(df.Age.isnull())&(df.Title=='Miss'),'Age']= df.Age[df.Title==""Miss""].mean()"	3	3
test['SexM'] = test['Sex']	3	1
"testing[""Title""] = testing[""Name""].str.extract(""([A-Za-z]+)\."",expand=True)"	3	3
df['AgeFill'] = df['Age']	3	3
train.groupby(['Survived'])	3	1
out.append(' '.join(p))	3	3
test_df.drop(['PassengerId'], axis=1)	3	3
data[['Sex', 'Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])	3	3
"dataset[""SibSp""][x]==2:"	3	1
dataset['Cabin'] = dataset.Cabin.str.extract('([A-Za-z])', expand=False)	3	3
submission.to_csv(prediction[i],index=False)	3	2
test['Pclass1'][i] = 1	3	1
submission['Survived'] = y_pred	3	3
data['Title'] = data['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	3	3
dataset['Sex'] = dataset['Sex'].map({'male':0, 'female':1})	3	3
df['Age'][np.isnan(df['Age'])] = age_null_random_list	3	3
df_train_ml.info()	3	3
np.append(['Survived'],colsRF)	3	1
submission['Survived'] = p_survived	3	2
all_data.loc[(all_data['Fare'] > 7.91) & (all_data['Fare'] <= 14.454), 'Fare'] = 1	3	3
data['FamilySize'] = data ['SibSp'] + data['Parch'] + 1	3	3
dataset.head(1)	3	2
train.Survived.mean()	3	2
data_raw.describe()	3	3
"training.drop(labels = [""Cabin"", ""Ticket""], axis = 1, inplace = True)"	3	3
datasets[1]	3	1
train.apply(lambda x: sum(x.isnull()),axis=0)	3	1
result['Survived']	3	1
res_df_solver_tol['tol'],	3	1
submission['PassengerId'] = df_test.index	3	2
full.set_value(full.index, 'Deck', deck)	3	3
train_set.head(10)	3	3
"titanic_test.loc[titanic_test[""NameLength""]<38 , ""NlengthD""] = 'short'"	3	3
"train_data.drop(""Survived"",axis=1)"	3	3
"dataset[""Title""] = dataset[""Name""].str.extract(' ([A-Za-z]+)\.', expand=False)"	3	3
"df_train[""Cabin""]"	3	2
train_dataset['Name']	3	3
test.isnull().sum().sort_values(ascending = False)	3	2
train['FamilySize'] = train.SibSp + train.Parch	3	1
dataset['Title'] = dataset['Title'].replace('Ms','Miss')	3	3
df_train2.reindex(np.random.permutation(df_train2.index))	3	3
full['Title'].value_counts()	3	2
all_data['Fare'] = all_data['Fare'].fillna(all_data['Fare'].median())	3	3
df['Cabin'].value_counts()	3	3
"data.drop(""PassengerId"", axis=1, errors=""ignore"")"	3	1
model.add(Dropout(.4))	3	1
titanic_test.loc[titanic_test['Embarked'] == 'C', 'Embarked'] = 1	3	3
output['Survived']=pd.DataFrame(ho_predictions)	3	1
data['AgeBin'] = pd.cut(data['Age'].astype(int), 5)	3	3
train_set.drop('Survived', axis=1)	3	3
train['Cabin'] = lbl.transform(list(train['Cabin'].values))	3	3
dataset['Fare'] = dataset['Fare'].fillna(train_data['Fare'].median())	3	3
dataset['Title'] = dataset['Name'].str.split(',').str[1].str.split('.').str[0].str.strip()	3	3
"data.drop([""Ticket""], axis=1)"	3	1
bin_s_new.append(bin_s[0])	3	3
df['Title'] = df0['Name'].apply(label_titles)	3	3
test_data['Fare'] = test_data['Fare'].fillna(test_data['Fare'].mean())	3	3
df_test['Sex'] = le.fit_transform(df_test['Sex'])	3	3
combined.sort_values(['Fare','PassengerId'], ascending=[0,1]).head()	3	1
"data.drop(""Survived"", axis=1, errors=""ignore"")"	3	1
np.abs(int(np.random.normal(mu, sigma, None)))	3	1
train.drop(['S','Q'],axis=1,inplace=True)	3	3
df['Sex'] = df['Sex'].apply(lambda e : 1 if e=='male' else (2 if e=='female' else None))	3	2
df.loc[df['Section'].isnull(), 'Section'] = 999	3	3
test.drop(['Sex'],axis=1,inplace=True)	3	3
df.loc[ df['Fare'] > 31, 'Fare'] = 3	3	3
Age.hist(bins=10)	3	1
df['Title'] = df['Title'].fillna(0)	3	3
"train[""Child""][train[""Age""] >= 18] = 0"	3	3
data['Title'] = data['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)	3	3
"new_data[""Embarked""] = new_data[""Embarked""].fillna("""")"	3	1
df_all.groupby('Initial').mean()	3	3
df['Survived'].count()	3	3
gender_submission.head()	3	3
"train[""Age""].median()"	3	2
train_df.drop(['Survived'],axis=1)	3	3
"df_test[""Cabin""]"	3	2
df['IsAlone'] = (df['FamilySize'] > 1).astype(int)	3	3
dataset['AgeBin'] = pd.cut(dataset['Age'], 5)	3	3
mlp_scores.mean()	3	1
dfTrain.isnull().sum()	3	1
test.fillna(np.nan)	3	3
titanic_df.drop(['Name'], axis=1)	3	3
sub.to_csv('submission.csv', index=False)	3	3
submission.to_csv('titanic.csv', index = False)	3	3
dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping).astype(int)	3	3
test['Family'].loc[test['Family'] == 0] = 0	3	3
df_test['Cabin'] = le.fit_transform(df_test['Cabin'])	3	3
train.drop(['Survived','young','C'],axis=1)	3	3
train_data.values	3	3
"train1[""Survived""]"	3	2
combined.dtypes	3	2
"dataset[""Title""].fillna(0, inplace = True)"	3	3
"df_train['Cabin'] = df_train['Cabin'].fillna(""None"")"	3	3
submission.to_csv('titanic_csv_submission.csv', index=False)	3	3
df_train.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)	3	3
test['Pclass2'][i] = 0	3	1
test['Pclass2'][i] = 1	3	1
submission.head(15)	3	3
acc[0].predict(test)	3	1
test_data.drop(drop_elements, axis = 1)	3	3
comb.loc[comb['Survived'].isin([np.nan]) == False]	3	3
train_y[0:5]	3	3
y.values.ravel()	3	1
"test_dataset[""Age""][np.isnan(test_dataset[""Age""])] = test_random_ages"	3	3
titanic_test.loc[titanic_test['Embarked'] == 'Q', 'Embarked'] = 2	3	3
test['Embarked'][i] = 'S'	3	1
xy_train.head()	3	1
test_df.drop(['Age'], axis=1)	3	3
pd.DataFrame.from_records(temp_data, columns=col_names)	3	1
d.get(v, 0) + 1	3	3
df_test['Title_num'] = [title_to_num(i) for i in df_test['Title']]	3	2
"dataset[""Family""] = dataset[""Name""].str.split(',').str.get(0) # extract family name"	3	1
train_df.drop(['Person'],axis=1,inplace=True)	3	3
"dataset[""SibSp""][x]==1:"	3	1
train_df.nunique()	3	2
test['EmbarkedQ'] = test['Embarked']	3	1
df1['AgeLevel'] = df1['AgeLevel'].apply(lambda x: sum([x >= b.left for b in age_bin]))	3	3
test_data.drop(['Name','Ticket','Cabin'],axis=1)	3	3
df1.corr()	3	2
df_train['Survived']  #target variable	3	3
dataset[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	3	3
ax[0].set_title('Data Missingness for Training Data',fontsize=16)	3	1
example['PassengerId'],	3	1
in ['Cabin', 'Ticket']:	3	3
bin_s.append(len(bin_s))	3	3
dataset['Title'] = dataset['Title'].replace(['Mlle','Ms'],'Miss')	3	3
training_data.shape[1]	3	3
"df_data[""Title""] = df_data[""Title""].replace('Master', 'Master')"	3	3
df.Embarked.fillna('S')	3	3
"X_test[""PassengerId""],"	3	3
full.set_value(full.index, 'Title', title)	3	3
test['Family'].loc[test['Family'] > 0] = 1	3	3
train['Embarked'] = lbl.transform(list(train['Embarked'].values))	3	3
res_df_solver_max_iter['max_iter'],	3	1
train_dataset['Ticket']	3	3
train_data.drop('Cabin', axis=1)	3	3
"train[""Fare""][train[""Survived""] == 0]"	3	3
test_df['Age']  = test_df['Age'].astype(int)	3	3
tit_df_san.head(2)	3	1
X_final_test.info()	3	1
_df.loc[mask, :]	3	1
titanic.tail()	3	3
test.drop(['PassengerId','Name','Ticket','Cabin'], axis = 1, inplace = True)	3	3
"dataset.drop([""Parch""], axis = 1, inplace = True)"	3	3
_df['SibSp_Parch'] = _df['SibSp'] + _df['Parch']	3	3
test['Pclass3'] = test['Pclass']	3	1
"train_df[[""Person"", ""Survived""]].groupby(['Person'],as_index=False).mean()"	3	3
dataset.loc[ dataset['Deck'] <= 1, 'Deck'] = 1	3	3
df_train['Embarked'].value_counts()	3	3
test['EmbarkedC'] = test['Embarked']	3	1
data.drop(['Survived'], axis=1)	3	3
d['fare_bin']	3	3
X.dtypes	3	3
train['Sex'].replace(['male','female'],[0,1],inplace=True)	3	3
df.loc[(df['Age'] > 16) & (df['Age'] <= 32), 'Age'] = 1	3	3
titanic.copy()	3	3
ax[2].grid(True)	3	1
train_df.append(test_df) # The entire data: train + test.	3	3
knn_scores.mean()	3	1
train.groupby('Survived').mean()	3	3
"df_train[""Fare""].fillna(df_train.groupby(""Pclass"")[""Fare""].transform(""median""), inplace=True)"	3	3
"training.loc[training[""Title""] == ""Mr"", ""Title""] = 1"	3	3
train_dataset['FamilySize']	3	3
train.tail(10)	3	3
data['Title'].value_counts()	3	3
all_data.shape[0] - nona	3	1
train_d.info()	3	1
np.dot(features,weights)	3	1
label.head()	3	3
cnt_srs.values[::-1],	3	1
dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\.')	3	3
test['Pclass2'] = test['Pclass']	3	1
all_data.head(10)	3	3
"new_data[""Age""] = preprocessing.maxabs_scale(data[""Age""])"	3	1
copy.copy(field_info)	3	3
"df_data[""Title""] = df_data[""Title""].replace(['Mme', 'Dona', 'Ms'], 'Mrs')"	3	3
X_test.isna().sum()	3	2
train['Ticket'] = lbl.transform(list(train['Ticket'].values))	3	3
"full[""Title""].value_counts()"	3	1
sml.train.info()	3	3
"died[""Age""].plot.hist(alpha=0.5, color=""blue"", bins=50)"	3	2
df_all.append(df_train, ignore_index = True)	3	3
df_test['Survived'] = df_test.Sex == 'female'	3	3
Submission.set_index('PassengerId', inplace=True)	3	2
df['Gender'] = df['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	3	3
data['Title'] = data['Name'].str.extract('([A-Za-z]+)\.', expand=False)	3	3
combined.isnull().sum()	3	3
test['Cabin'] = lbl.transform(list(test['Cabin'].values))	3	3
sc.transform(X_valid)	3	1
trainData.describe()	3	3
titanic_train_df.isnull().sum()	3	1
"predictions.to_csv(""dtree_predictions.csv"", index=False)"	3	3
df_test.drop(['Name', 'Ticket', 'Cabin'], axis=1)	3	3
dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch']+1	3	3
test.set_value(test.index, col, full[891:][col].values)	3	3
train_df.drop(columns=['Survived'], axis=1),	3	1
"test_df[""PassengerId""].values"	3	3
X_train.shape, Y_train.shape, test.shape	3	3
csv_train.describe()	3	1
res_df.head()	3	3
train_df['Age']	3	3
"testing.loc[testing[""Title""] == ""Master"", ""Title""] = 3"	3	3
submission.to_csv('titanic_submission.csv', header = True, index = False)	3	3
df1['Fare'] = df1['Fare'].apply(lambda x: str(int(x / 100) * 100))	3	3
dataset_train.info()	3	3
train.append(test, ignore_index = True)	3	3
train['Title'] = titles	3	3
"data['Title'] = data['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	3	3
sns.boxplot(x='Pclass',y='Age',data=df_train)	3	3
xtest.drop(['Survived'], axis=1)	3	1
train_df.astype(float).corr(),linewidths=0.1,vmax=1.0,	3	3
train['CategoricalFare'] = pd.qcut(train['Fare'],4)	3	3
df1['FareLevel'] = df1['Fare'].fillna(fare_med)	3	3
x_train.describe()	3	3
combine.head()	3	3
df['Embarked']	3	3
xtrain.drop(['Survived'], axis=1)	3	1
"train_dataset[""Survived""]"	3	3
plt.style.use('seaborn-pastel')	3	2
"dataset[""Title""] = dataset[""Title""].map({""Mr"":0, ""Miss"":1, ""Mrs"":2 , ""Master"": 3, ""Other"" :4})"	3	3
"train_df.drop(""Parch"", axis=1)"	3	3
scaler.transform(trainX)	3	3
bin_s_new.append(bv)	3	3
"df[""Age_categories""] = pd.cut(df[""Age""], cut_points, labels=label_names)"	3	3
dataset['Cabin'] = dataset['Cabin'].fillna('U')	3	3
row['Pclass']	3	2
med_l.append(df1['Fare'].median())	3	3
"data[""Age""].median()"	3	3
dataset.Ticket.head(10)	3	2
test['HasCabin'] = 0	3	2
net.eval()	3	1
df.as_matrix(columns=['Survived'])	3	2
ax.artists[2]	3	3
df_final['Survived']	3	1
train.drop('male',axis=1,inplace=True)	3	3
train_test.isnull().sum()	3	1
_df['Fare'].median()	3	3
X_train_na.append(X_test_na, ignore_index=True)	3	1
combine.isnull().sum()	3	3
test['SexF'][i] = 1	3	1
test['SexF'][i] = 0	3	1
df.join(enbarked_one_hot)	3	3
row['Title'] == 'Dr':	3	1
sub_df.age.mean()	3	1
obs.reset_index()	3	1
"train_data[""Embarked""] = train_data[""Embarked""].fillna(""S"")"	3	3
train['Fare']	3	3
accuracy.append(acc_lst)	3	3
train['Title'] = train['Name'].apply(get_title)	3	3
train_data.drop(drop_elements, axis = 1)	3	3
df.Survived.values	3	3
train['Age'].fillna(train['Age'].mean(), inplace=True)	3	3
"train['Pclass'].value_counts().plot(kind=""bar"");"	3	3
fix_funcs.append(fix_parch)	3	3
final_test[['PassengerId','Survived']]	3	3
trainData.info()	3	3
dt_train.head()	3	1
df_train_ml.head()	3	2
train['Age'].fillna(train.Age.mean(), inplace=True)	3	3
titanic_test_data.head(5)	3	1
title_and_sex['Sex'] = title_and_sex['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	3	3
d['age_med']	3	3
test_data['Age'] = test_data['Age'].fillna(30.0)	3	3
training.drop('Sex_female', axis=1, inplace=True)	3	3
testdata.head()	3	2
history.history['val_loss']	3	3
X_train_features.head(5)	3	1
df_train.append(df_test, sort=False)	3	3
x_train.shape[0]	3	3
"test[""Embarked""] = test[""Embarked""].fillna('S')"	3	3
titanic.hist(bins=10,figsize=(9,7),grid=False)	3	3
test_df['Pmm'] =     test_df[['Pclass','Male','MasterMiss']].apply( get_malem, axis=1 )	3	3
df.groupby('Sex').Age.median()	3	2
test_df.set_index('PassengerId',inplace=True)	3	3
cabin_floor_list.append(GuestRoom_random_floor[np.random.randint(2)])	3	1
train_y.values	3	3
train['Title'] = train.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	3	3
test_df.as_matrix()	3	3
data.groupby('Pclass').mean()['Fare'].plot(kind='bar', figsize=(25, 7), ax = ax);	3	3
train_data.iterrows():	3	2
d['age_bin'].sort()	3	3
"train[""Embarked""].isnull().sum()"	3	2
"test_set.select_dtypes(exclude=[""object""]).columns"	3	1
data_copy['Sex'] = data_copy['Sex'].fillna('male')	3	3
"dataset[""Title""] = dataset[""Title""].replace([""Dr"", ""Rev"", ""Major"", ""Col"", ""Mlle"", ""Don"", ""Jonkheer"", ""Lady"", ""Mme"", ""Countess"", ""Ms"", ""Sir"", ""Capt""], ""Other"")"	3	3
train['family_size'] = train['SibSp'] + train['Parch'] + 1	3	3
dataset['IsAlone']=1	3	3
data['Embarked'] = data['Embarked'].map({'S': 0, 'Q': 1, 'C': 2}).astype(int)	3	3
dataset.loc[ dataset['Age'] > 60, 'Age'] = 4	3	3
df['Age_bin']=np.nan	3	3
fix_funcs.append(fix_sibsp)	3	3
train['Ticket'].head()	3	3
train_all.loc[:,['Survived']]	3	1
df.loc[(df['Fare'] > 7.91) & (df['Fare'] <= 14.454), 'Fare'] = 1	3	3
"ax2.hist(prob_pos, range=(0, 1), bins=10,histtype=""step"", lw=2);"	3	1
data.drop(['SibSp', 'Parch'], axis=1, inplace=True)	3	3
df.describe(include='all')	3	3
"train[""family_size""] = train[""SibSp""] + train[""Parch""] + 1"	3	3
test.drop(['young','C'],axis=1)	3	3
model.add(Dense(64, activation='relu'))	3	3
np.mean(1- train_scores, axis = 1)	3	3
titanic_test_df.info()	3	2
"full.groupby(""Title"").Title.count()"	3	1
train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean()	3	3
x.loc[ x['Age'] <= i*10, 'Age_bin'] = i	3	2
"titanic_train[""Embarked""].value_counts()"	3	2
fix_funcs.append(wrap_fix_fare())	3	3
df.drop('index', axis=1, inplace=True)	3	1
train_data['Title'] = train_data['Title'].replace('Mlle', 'Miss')	3	3
train_df.describe(include='all')	3	3
df.drop(['PassengerId'], axis=1)	3	2
"training.loc[training[""Title""] == ""Master"", ""Title""] = 3"	3	3
y_test.shape[0]	3	1
test_df.drop('Cabin', axis=1, inplace=True)	3	3
train.Pclass.hist()	3	3
train_df['Survived'].copy()	3	3
all_df.head()	3	3
titanic_train.head(10)	3	1
train_d.describe()	3	1
age.mean()	3	3
df_FULL.tail()	3	1
t_data.head()	3	1
train.drop(['Ticket'],axis=1)	3	3
final_training_df.Survived.values.reshape(-1,1)	3	1
df.drop('Survived', axis=1, inplace=True)	3	3
dataset['Title'] = dataset['Title'].replace('Mlle','Miss')	3	3
submission.Survived.astype(int)	3	3
full_set.isnull().sum()	3	1
data.groupby('Pclass').mean()['Fare'].plot(kind='bar',figsize=(15,8), ax = ax)	3	3
"train_data[""Age""].std()"	3	3
"df_train[""Title""] = df_data['Title'][:891]"	3	3
train['Age'].fillna(train['Age'].median(), inplace = True)	3	3
test_df['Fare'].fillna(test_df['Fare'].median(), inplace = True)	3	3
validation['Survived']	3	1
feature_important.sort_values(by=['importance'], ascending=True)	3	3
training.shape	3	3
training.drop('Ticket', axis=1, inplace=True)	3	3
test_df.loc[:,colsRF]	3	1
train['Age'].isnull()	3	2
sns.boxplot(x='Pclass', y='Age', data=train)	3	3
in ['Deck', 'Room', 'Group_size', 'Group_num', 'Names', 'Title']:	3	3
train_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean().sort_values(by='Survived', ascending=False)	3	3
titanic_train_data.isnull().sum()	3	2
x.fillna(x.mean())	3	3
df.drop('Name', axis=1)	3	3
s.fillna(0.0)	3	3
full.set_value(full.Group_num>4, 'Group_size', 'L')	3	3
passengers.items():	3	3
"train.drop([""Name""], axis = 1)"	3	3
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',    'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	3	3
axes[0].set_title('Class 1')	3	2
test['Fare'][i] = train['Fare'].mean()	3	1
X_test.shape[0],	3	1
test_dataset['Port'] = test_dataset['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)	3	3
"train[[""SibSp"", ""Survived""]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	3	3
df_train.loc[(df_train['Age'] > 48) & (df_train['Age'] <= 64), 'Age'] = 3	3	3
"df_test.drop(""PassengerId"", axis=1).copy()"	3	3
test_dataset['PassengerId']	3	3
test_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].mean())	3	3
train.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis=1, inplace=True)	3	3
X['Title'] = X['Title'].replace('Ms', 'Miss')	3	3
comb.loc[comb['Survived'].isin([np.nan]) == True]	3	3
"dataset[""FamilySize""] = dataset[""SibSp""]+dataset[""Parch""]+1"	3	3
data.drop('Ticket', axis=1)	3	3
sc.transform(X_test_df)	3	3
titanic['Family'] = titanic['SibSp'] + titanic['Parch']	3	3
train_df['Fare']	3	3
test_df.drop(['Embarked'],axis=1,inplace=True)	3	3
df_train['Cabin'] = le.fit_transform(df_train['Cabin'])	3	3
classifiers.append(Perceptron(random_state=random_state))	3	3
titanic.apply(get_family_id, axis=1)	3	3
train_df['Name']	3	3
fix_funcs.append(fix_df_pclass_to_cat)	3	3
df_test[['PassengerId','Survived']]	3	3
testData.head()	3	2
test.set_value(test.Fare.isnull(), 'Fare', 8.05)	3	3
hist_t_by_s_new.append(hist_t_by_s[i - 1])	3	3
train_df['Embarked'].unique()	3	3
test.Fare[152]=test.Fare.median()	3	2
"dataframe[""Survived""].copy()"	3	1
data_train.Fare.describe()	3	3
train_dataset['SibSp']	3	3
test['Fare'] = test['Fare'].fillna(np.mean(test['Fare']))	3	3
test['Family']=test['SibSp']+test['Parch']	3	3
full.iterrows():	3	2
df['Ticket']:	3	3
df[['Fare']] = df[['Fare']].fillna(value=df[['Fare']].mean())	3	3
X_test.describe()	3	3
"res_c[""mean_test_score""]"	3	1
"df[""Embarked""] = df[""Embarked""].fillna('C')"	3	3
df['Age'][df['Age'].notnull()]	3	3
data_train_all.head()	3	1
Fare.hist(bins=100, ax=ax)	3	3
Y.values	3	2
rf_cv_score.mean()	3	1
"df_test['Embarked'] = df_test['Embarked'].fillna(""S"")"	3	3
dataset.drop(['PassengerId','Cabin','Ticket','Fare', 'Parch', 'SibSp'], axis=1)	3	3
Age.fillna(nan_sub)	3	1
submissions.head(5)	3	3
test.drop('Fare', axis=1, inplace=True)	3	3
"train[""Embarked""]=train[""Embarked""].fillna(""S"")"	3	3
dataset['Salutation'] = dataset['Salutation'].replace('Mlle', 'Miss')	3	3
df['Title'] = df['Title'].fillna(df['Title'].mode().iloc[0])	3	2
df_test['Initial']=0	3	3
target.head()	3	3
"dataset.drop([""SibSp""], axis = 1, inplace = True)"	3	3
df_train['Title_num'] = [title_to_num(i) for i in df_train['Title']]	3	2
df[['Age']] = df[['Age']].fillna(value=df[['Age']].mean())	3	3
train_raw.dtypes	3	3
df_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age']=45	3	3
np.std(l)	3	3
ResultsDF['Accuracy'].idxmax()	3	1
train.drop(['Sex'],axis=1,inplace=True)	3	3
scores.append(cv_scores.mean())	3	2
"ax[1].set_xlabel(""People Count"")"	3	1
df_train_ml.corr()	3	3
df.loc[:,colsRF]	3	1
"train_dataset[""Age""][np.isnan(train_dataset[""Age""])] = train_random_ages"	3	3
titanic.loc[titanic['Embarked'] == 'C', 'Embarked'] = 1	3	3
error_rate.append(np.mean(pred_i != y_test))	3	3
s.append([])	3	3
all_data.drop(['Survived'], axis=1, inplace=True)	3	3
df_train['FareBand'] = pd.qcut(df_train['Fare'], 4)	3	3
dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\.', expand = False)	3	3
dataset['Title'] = dataset['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]	3	3
df.astype('int64')	3	1
model.add(Dense(64, input_dim=X.shape[1], kernel_initializer=init, activation='relu'))	3	1
df.iloc[891:].copy()	3	3
df_all.drop('Survived', axis = 1).loc[:,df_all.isnull().any()].isnull().sum()	3	3
train.groupby('Sex').mean()	3	3
"test[""Age""] = test[""Age""].astype(int)"	3	3
feature_importance.abs().sort_values()	3	3
train_dataset[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean()	3	3
"dataset.drop([""Cabin""], axis = 1, inplace = True)"	3	3
in ['PassengerId']:	3	1
test['Title'] = test['Name'].apply(get_title)	3	3
sol['Survived'] = pd.Series(predicted.reshape(-1)).map({True:1, False:0})	3	3
encoded_train_data.head()	3	1
hist_t_by_s_new.append(hv)	3	3
"res.describe().T.sort_values(by=""50%"", ascending=False)"	3	1
data['IsAlone']=0	3	3
train_df.pop('Survived')	3	3
df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)	3	3
"train_data[""Age""].fillna(28, inplace=True)"	3	3
titanic_train['Age'] = titanic_train['Age'].fillna(titanic_train['Age'].median())	3	3
test_df.drop('Cabin', axis = 1, inplace = True)	3	3
test.drop(columns=['Name', 'Ticket', 'Cabin'], inplace=True)	3	3
"titanic.loc[titanic[""NameLength""]<38 , ""NlengthD""] = 'short'"	3	3
test['Sex'][test['Sex'] == 'female'] = 1	3	3
test_df['passengerid'],	3	1
"dataset.drop([""Name""], axis = 1, inplace = True)"	3	3
y_train.head(3)	3	3
"train_data['TravelAlone']=np.where((train_data[""SibSp""]+train_data[""Parch""])>0, 0, 1)"	3	3
data.loc[(data['Fare'] > 7.91) & (data['Fare'] <= 14.454), 'Fare'] = 1	3	3
df1['Age'] = df1['Age'].fillna(med)	3	3
test['Title_Sir'] = pd.Series(0, index=test.index)	3	3
test['Pclass3'][i] = 0	3	1
classifiers.append(LinearSVC(random_state=random_state))	3	3
encoded_test_data.head()	3	1
test['Age'] = test['Age'].fillna(train['Age'].median())	3	3
test.drop(labels=['Name', 'Names', 'Cabin', 'Ticket', 'Age', 'Fare'], axis=1, inplace=True)	3	3
title_mean_age.append(list(set(X.Name)))  #set for unique values of the title, and transform into list	3	3
bin_s.insert(0, 0)	3	3
prediction.shape	3	3
titanic_df['Age'].isnull().any()	3	2
df['HasCabin'] = df['Cabin'].notna().astype(int)	3	3
data.groupby('Title')['Age'].median()[titles.index(title)]	3	3
app_train.head()	3	1
"test_dataset[""Age""].mean() + test_dataset[""Age""].std(),"	3	3
df1.join(df_bin)	3	3
"titanic_test[""Age""] = titanic_test[""Age""].fillna(titanic_test[""Age""].median())"	3	3
data_test.shape	3	3
"df.loc[(df.Age.isnull())&(df.Title=='Mr'),'Age']= df.Age[df.Title==""Mr""].mean()"	3	3
train_dataset['Age'] = train_dataset['Age'].astype(int)	3	3
x_test.shape	3	3
self.multipiliers.append(1)	3	3
df_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})	3	3
a.sum()	3	3
test.shape[0] # 418	3	3
data['Embarked'].fillna(data['Embarked'].mode()[0],inplace=True)	3	3
df['Age_band']=0	3	3
dataset['Age'] = dataset['Age'].fillna(dataset['Age'].mean())	3	3
train.boxplot(column='Fare', by=['Embarked','Pclass'], ax=ax)	3	3
rf_scores.mean()	3	1
df_train['Age_cat_2'] = df_train['Age'].apply(category_age)	3	3
df_test.drop(['Ticket', 'Cabin'], axis=1)	3	3
classifiers.append(RandomForestClassifier(random_state = random_state))	3	3
"df_data[""Title""] = df_data[""Title""].replace(['Lady', 'Countess','Sir'], 'Honor')"	3	3
train['FamilySize']=train['SibSp']+train['Parch']+1	3	3
tit_df_test.head(2)	3	1
submission.to_csv('submission1.csv', index=False)	3	3
df_data['Deck'] = df_data['Deck'].map(deck_mapping)	3	2
x['Survived']	3	3
X['PassengerId']	3	3
X_train.join(dummies)	3	1
"model.add(Activation(""softmax""))"	3	3
df1.drop(k, axis = 1, inplace = True)	3	3
X_data.head(3)	3	1
test_df.drop(['PassengerId'],axis=1)	3	3
test_df.loc[(test_df['Age'] > 16) & (test_df['Age'] <= 32), 'Age'] = 1	3	3
np.where(test.Sex=='female', 0, 1)	3	3
df['Fare'].isnull().sum()	2	2
train.Age.astype(int)	2	2
DataFile['FareBin'] = pd.qcut(DataFile['Fare'], 5)	2	2
train['Fare'] = train_fare_trans.transform(f)	2	2
"combdata[""Ticket""].unique()"	2	2
output['SibSp'] = data['SibSp'] / 8	2	2
sol['PassengerId'] = test_data['PassengerId']	2	2
test_data['CabinNUll'] = (test_data['Cabin'] == -999)	2	2
"train_df[""Age""] = train_df[""Age""].fillna(np.mean(train_df[""Age""]))"	2	2
"df_train[""FareBand""] = pd.qcut(df_train['Fare'], 4, labels = [1, 2, 3, 4]).astype('category')"	2	2
train['is_alone'] = [1 if i<2 else 0 for i in train.family_size]	2	2
"df_test.replace(""male"", 0).replace(""female"", 1)"	2	2
"passenger_id.append(data[""PassengerId""])"	2	1
X.dropna()	2	2
"test.loc[test[""Family""] >4, ""FamilySize""] = 'large'"	2	2
all_data.replace(np.inf, np.nan) # important	2	1
sns.boxplot(x = 'Embarked', y = 'Fare', data = data_raw)	2	2
"train_df[[""FamilySize"",""Survived""]].groupby([""FamilySize""],as_index = False).mean().sort_values(by=""FamilySize"",ascending=True)"	2	2
"corr_matrix[""Survived""].sort_values(ascending=False)"	2	2
output.to_csv(output_filename, index=False)	2	1
titanic_df['Embarked']= titanic_df['Embarked'].fillna('S')	2	2
nullData.drop('Name',1)	2	1
np.where(X.dtypes != np.float)[0]	2	2
data.Age.fillna(data.Age.mean(),inplace=True)	2	2
dfa.join(enbarked_one_hot)	2	2
train.loc[train['Family'] == 1, 'FamilyType'] = 'singleton'	2	2
test['Age'] = test[['Age','Pclass']].apply(fill_age,axis=1)	2	2
train_df['Age'] = train_df['Age'].fillna(train_df['Age'].median())	2	2
"new_data[""Mrs""] = new_data[""Name""].str.contains(""Mrs"").astype(int)"	2	1
tf_variables.append(Age_bucket)	2	1
train.set_value(index,'Embarked_S',1)	2	2
titledict.items():	2	2
df_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 # 자신을 포함해야하니 1을 더합니다	2	2
"test.loc[test[""Family""] == 1, ""FamilySize""] = 'singleton'"	2	2
train.loc[v[i], 'ChildOnBoard'] = 1	2	2
train_data.drop(self.to_predict_col, inplace=False, axis=1)	2	2
dataset['LargeFamily'] = dataset['FamilySize'].apply(lambda r: 0 if r<=4 else 1)	2	2
train_x.values, train_y, valid_x, valid_y	2	2
train_data.head(5)	2	2
"dataset.loc[(dataset[""Fare""] > 14.454) & (dataset[""Fare""] <= 24.479), ""Fare""] = 4"	2	2
final.head()	2	2
df.Age.fillna(df.Age.mean(), inplace=True)	2	2
df['Family'].value_counts()	2	1
train_df.loc[0]	2	1
dfFull['Title'] = dfFull.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
np.mean(kfold_score)	2	1
submission['Survived'] = y_test	2	1
"df_titanic[""Age""].dropna()"	2	1
raw_data['Cabin'] = cabin_num(c)	2	2
"test_df.drop([""girl1"",""girl2"",""3rdGirls"",""BoyClass""], axis = 1, inplace = True)"	2	2
data_all['Title'] = data_all['Title'].map(title_mapping)	2	2
data_train['logFare'] = data_train['Fare'].apply(lambda x: np.log(x + 1))	2	1
train['Sex']=train['Sex'].astype('category')	2	2
Train_Master.head()	2	1
dataset['Salutation'] = pd.factorize(dataset['Salutation'])[0]	2	2
train_df['Gender'] = train_df['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	2	2
train_df['Embarked'] = train_df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	2	2
df['Age'].unique()	2	2
PassengerGroup.copy()	2	1
age_exist.values[:, 1:]	2	1
df['Title']=df.Name.str.extract('([A-Za-z]+)\.') #lets extract the Salutations	2	2
processed_data['pclass'] = pd.Series(raw_data['Pclass'], dtype=np.float64)	2	2
test.loc[np.isnan(test.Age), 'Age'] = np.mean(data['Age'])	2	2
df['Age'] = np.where(df['Age'] < 1, 0, df['Age'])	2	1
titanic_train_df.shape	2	1
df_train['AgeBand'] = pd.cut(df_train['Age'], 5)	2	2
r['Age']	2	2
"R.set_index(""RGroup"",inplace=True)"	2	1
train_data['Title'] = train_data['Title'].replace('Mme', 'Mrs')	2	2
"df_test[""Deck""] = df_data['Deck'][891:]"	2	2
series.min()	2	2
test_data['Fare'] = test_data['Fare'].astype(int)	2	2
"combined_train_test['Original_Name'] = combined_train_test['Name'].str.split(""\((.*?)\)"").str[1].str.strip(""\"""").str.strip()"	2	2
submission.to_csv('LGBM.csv',index=False)	2	1
combined_features['SmallFamily'] = combined_features['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)	2	1
X_train['random'] = np.random.random(size=len(X_train))	2	1
df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1)	2	2
final_train.drop('Survived',axis=1)	2	2
train_df.groupby('Person', as_index=False)['Person','Survived'].mean()	2	2
full_df['Age'][~np.isnan(full_df['Age'])].hist(ax=axs[0], bins=16)	2	1
df.plot.hist(alpha=0.7);	2	2
to_test['Sex'] = np.unique(test_x['Sex'], return_inverse=True)	2	2
train.drop(['PassengerId','Survived','Name','Ticket','Cabin'],axis=1)	2	2
row['Embarked'] == 'Q' else 0	2	1
train_df['Survived'].groupby(train_df['Name_Head']).mean()	2	1
s.iteritems():	2	2
results['accuracy'].append(acc)	2	1
df.Age.isnull()	2	2
X_train.drop(['Sex', 'Embarked'], axis=1)	2	2
row['Name']	2	2
test_data.drop('Cabin',axis=1,inplace=True)	2	2
train_df.values[:,0]	2	1
"clf_results.append(cross_val_score(clf, X_train, y=y_train, scoring = ""accuracy"", cv=kfold, n_jobs=1))"	2	1
"combdata[""Cabin""] = pd.Series([i[0] if not pd.isnull(i) else 'U' for i in combdata['Cabin'] ])"	2	2
np.sum(t * np.log(y) + (1-t) * np.log(1-y))	2	2
all_data['Cabin4'] = all_data['Cabin'].apply(split_cabin, num=4)	2	2
scaler.transform(data_all)	2	2
ax[0].set_title('Fare')	2	1
X_test.drop(['Sex', 'Embarked'], axis=1)	2	2
dataTest[['Age', 'Embarked', 'Fare', 'Pclass', 'Sex', 'Family_Size', 'Title2','Ticket_info','Cabin']]	2	2
"train_set.loc[train_set[""Embarked""] == ""C"", ""Embarked""] = 1"	2	2
train.drop(['Name','Ticket'],axis=1,inplace=True)	2	2
df_train.drop(['FareBand'], axis=1)	2	2
sml.train[['Ticket', 'Ticket_density']].head()	2	2
td_not_survived.head(5)	2	2
passenger['SibSp']	2	1
X_train.drop(['Pclass_1','Sex_female','TitleGroup_Master','AgeRange_15-','FareRange_10-','Family_alone'], axis=1)	2	2
train['Female_Friends_NotSurvived'] = 0	2	2
train.loc[v[i], 'Male_Friends_Survived'] = train[(train.Ticket==k)&(train.index!=v[i])&(train.Sex=='male')&(train.Survived==1)].Survived.count()	2	2
combined.drop('Name', inplace=True, axis=1)	2	2
np.std(1 - test_scores, axis = 1)	2	2
model.add(layers.Dense(10, activation='relu', input_shape=(6,)))	2	1
train0.head(10)	2	1
X_train.shape                          # (n_x: input size, m : number of examples in the train set)	2	2
"DataFile[""Name""].str.split(""[,.]"")"	2	2
data['Sex'][i] = 0	2	2
"train_data[""Age""].median()"	2	2
df_train.sort_values(by=['Fare'], ascending=False)	2	1
train['Fare_cheap']=0	2	2
"test[""Alone""] = 0"	2	2
df.Survived.astype(int)	2	1
"test_data[[""Pclass"", ""Fare"", ""Embarked""]].groupby([""Pclass"", ""Embarked""]).mean()"	2	2
train['MotherOnBoard'] = 0	2	2
le.transform(dfTest[feature])	2	2
train_df.loc[Outliers_to_drop] # Show the outliers rows	2	2
data['FamliySize'] = data['SibSp'] + data['Parch'] + 1	2	2
dataset.loc[(dataset['Age'] > 14) & (dataset['Age'] <= 30), 'Age']        = 5	2	2
test.loc[test[(test['Title']=='Master')&(test['Age'].isnull())].index, 'Age'] = master_age_mean	2	2
dfFull['ParchCat'] = dfFull.Parch.copy().astype(int)	2	2
test.loc[test['Cabin'].notnull(),'HasCabin'] = 1	2	1
temp.pop(5) #remove ticket	2	1
ftrain['CategoricalAge'] = ftrain['CategoricalAge'].map( {'VY': 0, 'Y': 1, 'M': 2, 'O': 3, 'VO': 4} ).astype(int)	2	2
np.transpose(x_test_data)	2	2
"models.append((""LR"", LogisticRegression))"	2	1
full_data.describe()	2	2
df_test.Embarked.fillna(MedEmbarked,inplace=True)	2	2
train['Age']=ohe(sparse=False).fit_transform(z1.reshape(len(z1),1))	2	2
validation.loc[:, 'PassengerId']	2	2
plt.hist(df.Age, bins=20, color='c')	2	1
test_df['Survived'] = test_df.Survived.apply(lambda x: int(x))	2	2
"test[""AgeGroups""][x] = title_age_map[train[""Title""][x]]"	2	2
model_results.set_index('model', inplace = True)	2	2
train.drop('Fare',inplace = True, axis =1) #now we don't need the fare column	2	2
"dataAgeNull.loc[:,""Age""] = ageNullValues"	2	2
"df[""Embarked""].mode()[0]"	2	2
Y_train.T	2	2
train.drop(['Survived','Fare','young'],axis=1)	2	2
train_df.calculated_fare.mode()	2	2
plt.hist(x[:curr], bins=bins)	2	2
df_train['Family'] = df_train['SibSp'] + df_train['Parch'] + 1	2	2
titanic_df.count()	2	1
new_data_train['Age'].fillna(new_data_train['Age'].mean(), inplace=True)	2	2
pd.isnull(train_raw_data).sum()	2	2
result.append(0)	2	2
model_results.reset_index(inplace = True)	2	2
train.Pclass.astype(str)	2	2
"evaluation[""Survived""]=test_predict_result"	2	2
"test_df.drop([""Ticket"",""Cabin""],axis=1)"	2	2
full.set_value(index, 'Title', 'Miss')	2	1
train_original.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)	2	2
dataset['Age'] * dataset['Pclass']	2	2
"test[""Sex""] = test[""Sex""].astype(""category"")"	2	2
title_arr.append('Mr')	2	1
test['Cabin_first_ltr'] = np.where(test['Cabin'].isnull(), 'Null', 'Not Null')	2	1
train.describe(include = ['O'])	2	2
df['has_cabin'] = df['Cabin'].apply(lambda x: 0 if pd.isnull(x) else 1)	2	2
data.loc[(data.Age.isnull()), 'Age'] = age_hat	2	1
validationSTD['Survived']	2	1
plot.hist(ax=ax[1],color='green',bins=20,edgecolor='black')	2	1
df['Gender'] = 3	2	1
train.groupby('Pclass').mean()['Age']	2	2
dataset.loc[dataset['Age']>62, 'Age']=4	2	2
df_train.loc[ df_train['Age'] <= 16, 'Age'] = 0	2	2
df['Age']	2	2
titanic['Embarked'] = titanic['Embarked'].apply(trans_embark)	2	1
shape[0] /(1.0*df_train[df_train.Fare==0].shape[0]),	2	1
data['Name'].unique()	2	2
data_all['Title'] = data_all['Title'].fillna(0)	2	2
train.sample(frac = 1.0)	2	1
test['Fare'] = scaler.transform(test['Fare'].values.reshape(-1, 1))	2	2
df.loc[df['train'].idxmin()]	2	1
df['fare_pp_cat'] = df['fare_pp_cat'].astype(int)	2	2
"train[""Survived""][-120:]"	2	2
"X_test[""PassengerId""]"	2	2
ax[1].set_title('Survived (female)')	2	2
staff_df.reset_index()	2	2
df['Age'].values.reshape(-1, 1),	2	1
train.drop(columns=['PassengerId', 'Survived'], axis=1).values,	2	1
"train_set[""Age""]      = train_set[""Age""].fillna(train_set[""Age""].median())"	2	2
"new_data[""NotEmbarked""] = new_data[""Embarked""].isna().astype(int)"	2	1
sub_df.tail()	2	2
best_params['max_depth'],	2	1
data.loc[data['Fare']<=7.91, 'Fare_cat'] = 0	2	2
df['GroupID'] = df['Ticket']	2	1
cat_grouped_by_cat_target.rename({0:'Victims', 1:'Survivors'}, axis = 'columns', inplace = True)  # Renaming the columns	2	2
train.sample(20)	2	2
validation['Title'] == 'Mrs'	2	2
df_train.groupby('Pclass').mean()['Fare'].plot(kind='bar',figsize=(7,3), ax = ax)	2	2
df_study_svc.loc[ind, 'mean_train_score']	2	1
model.add(Dense(4, activation='relu'))	2	1
train_labels.values	2	2
titanic_train_df['Agecat'] = titanic_train_df[['Age','Sex']].apply(age_cat,axis=1)	2	1
test.drop(columns = ['Survived'])	2	1
df['Embarked'].value_counts(dropna=False)	2	2
"dev_instance.drop(labels=[""Survived""], axis=1)"	2	1
all_data[0]	2	1
df_train.loc[ df_train['Age'] > 64, 'Age'] = 4	2	2
train_df['family_size'] = train_df.SibSp + train_df.Parch+1	2	2
ds.Fare.std()	2	1
df_train.isnull()	2	2
test_df_raw.copy()	2	1
"train_df[""Gender""] = train_df[""Sex""].map({""female"": 0, ""male"": 1}).astype(int)"	2	2
models.append(('CART', DecisionTreeClassifier()))	2	2
train_df.Age.astype(int)	2	2
all_data['CabinNum4'] = all_data['Cabin4'].apply(get_cabin_num)	2	2
all_data['Cabin2'] = all_data['Cabin'].apply(split_cabin, num=2)	2	2
combined.iloc[:891,:]	2	1
df_tmp.head()	2	1
died_data['Parch']	2	1
"test1.drop(labels=[""Survived""],axis = 1,inplace=True)"	2	1
"data['Title'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare', inplace=True)"	2	2
train.loc[:, features]	2	1
sub.head(n=10)	2	1
qaxis[1].set_title('Sex vs Pclass Survival Comparison')	2	2
row['Fare']	2	2
dfTrain[['Pclass','Sex','ParchCat','Embarked','Fare','TitleCat']]	2	2
"df_train['Cabin'].fillna(df_train.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	2	2
"train[""Age""] = train[""Age""].fillna(train[""Age""].median()) # 年齢の欠損値を中央値で埋める"	2	1
output_data_frame['Survived'] = test_predict	2	2
Y.astype(int)	2	2
"submit.to_csv(""mlbox.csv"", index=False)"	2	2
variable.plot.hist(density = True, color = 'coral')	2	2
train_x['Sex'] = np.unique(train_x['Sex'], return_inverse=True)	2	2
df_train.drop('Survived',axis=1)	2	2
"parameters[""W2""]"	2	1
combined_df_imputed.describe()	2	1
dfFull.loc[dfFull.Parch > 2,'ParchCat'] = 3	2	2
DataFile.groupby('Title')['Age'].median()[titles.index(title)]	2	2
"df[""Deck""][df[""Deck""] == ""D""] = 4"	2	2
full.ix[(full.TPP==4)&(full.Sex=='female')&(full.Pclass==3),'TPP']=2	2	2
train['Pclass'].describe()	2	2
train['Fare'][train['Survived']==1]	2	2
train.shape[0] - train.dropna().shape[0]	2	2
dataset.loc[(dataset['Sex']==0) & (dataset['Embarked']==2), 'Gender_Embarked'] = 1	2	2
df_test.Cabin.fillna('Unknown',inplace=True)	2	2
"dataset.drop([""FamilySize""], axis = 1, inplace = True)"	2	2
train_x.head(5)	2	2
df.groupby(['Title_cat'])['Age'].median().to_dict()	2	2
test4.drop('PassengerId', axis=1, inplace=True)	2	2
df['Family_Size'] = df['Parch'] + df['SibSp']	2	2
df['NameLength'] = df['Name'].apply(len)	2	2
original_train_data['Ticket']:	2	1
array_name[2]	2	2
train['Salutation'] = train['Salutation'].replace('Ms', 'Miss')	2	2
"dataset[""Title""] = dataset[""Title""].replace(['the Countess', 'Sir', 'Lady', 'Don','Jonkheer', 'Dona'], 'Noble')"	2	2
data['Sex'] = gender_encoder.fit_transform(data['Sex'])	2	1
train['Categorical_Age'] = data['Categorical_Age'][:len(train)]	2	2
"plt.rcParams[""legend.fontsize""] = Font"	2	2
X_train.drop(['Ticket', 'Cabin'], axis=1)	2	1
df['Cabin_Letter'] = df['Cabin'].apply(lambda x: x[0])	2	1
dfFull['TicketCat'] = dfFull['Ticket'].copy()	2	2
"survivors_2.plot.hist(fc=(1, 0, 0, 0.5), label=""Class 2"")"	2	1
data['TicketHead'] = data['TicketHead'].replace('PC', '4')	2	2
train.set_value(index, 'Fare_cheap', 1)	2	2
"train_df.loc[train_df[""Fare""] > 150, ""Fare""] = train_df.loc[train_df[""Fare""] > 150, ""Fare""].apply(lambda x: 100)"	2	2
"train.select_dtypes(include = [""object""]).columns"	2	1
df['Fare'].fillna(df['Fare'].median(), inplace = True)	2	2
train.sample(50)	2	2
df_test[['Pclass','Fare','Parch','Sex','Embarked','SibSp','Age']]	2	1
train_data['CategoricalFare'] = pd.qcut(train_data['Fare'], 4,duplicates='drop')	2	2
train_raw_data.drop(['Survived'], axis=1, inplace=False)	2	2
row['Age'] < 16:	2	2
X_train.to_csv('X_train.csv', index=False)	2	2
TrainFile.shape	2	2
train_data.groupby(['Parch', 'Survived'], as_index=False).count()	2	2
train_set.drop(columns='Survived')	2	1
prediction['Survived'] = final_predict.astype('int')	2	2
select.transform(X_poly)	2	2
df1.describe()	2	2
Y.iloc[x], Y.iloc[y]	2	1
df.head(train_num), df.tail(validate_num)	2	2
s[1:5]	2	2
df.loc[ (df.AgeFill>60),'AgeCat'] = 'aged'	2	2
nn_scores.append(score)	2	2
"gender.to_csv(""result.csv"")"	2	2
train_data['Age'].iloc[i] = pred_age	2	2
all_data['Type'].unique()	2	2
np.where(pred_probs >= 0.5)	2	1
test.loc[:, features2]	2	1
gender['Survived'] = result	2	2
train.columns.values.tolist():	2	1
dataPrepare.head()	2	1
full['Family'] = full['Family'].apply(impute_alone)	2	2
"trainData[['Pclass', ""Age"", ""Sex"", ""SibSp"", ""Parch"", 'Fare', 'Embarked']]"	2	1
temp_df.shape[0]	2	2
dataset['Title'] = dataset['Name'].str.extract('([A-Za-z]+)\.', expand = False)	2	2
validation['Fare'].fillna(validation[validation['Pclass'] == 3].Fare.median(), inplace = True)	2	2
"plt.rcParams[""axes.labelsize""] = Font"	2	2
cabin_df.iterrows():	2	1
"dataset[""Fare""]=dataset[""Fare""].fillna(median_fare)"	2	2
titanic_submission.to_csv('titanic_submission.csv', index=False)	2	2
"results.to_csv(""class_predictions.csv"", sep=',', encoding='utf-8', index=False)"	2	2
"df_data[""Family_Survival""] = DEFAULT_SURVIVAL_VALUE"	2	2
all_data['CabinNum2'] = all_data['Cabin2'].apply(get_cabin_num)	2	2
staff_df.set_index('Name')	2	2
test4.drop('Name', axis=1, inplace=True)	2	2
"train_df[""AgeIsNaN""] = train_df[""Age""].isna()"	2	2
train_df.values[:,1::]	2	1
dataset['Cabin'] = dataset['Cabin'].astype(int)	2	2
np.round(precision_score*100, 2)	2	2
test_clean.sample(5)	2	1
axes[1].set_xticklabels(labels = sorted_labes,rotation=20)	2	1
df['NamePrefix'] = df.Name.apply(lambda x:x.split(' ')[1])	2	2
accuracies.std()	2	2
le.transform(df['HighLow'])	2	2
combine.iloc[len(train):,]	2	1
test_df['Fare']	2	2
df['Embarked'] = df['Embarked'].map( {'Q': 0, 'S': 1, 'C': 2} ).astype(int)	2	2
dfa[['Fare']] = dfa[['Fare']].fillna(value=dfa[['Fare']].mean())	2	2
df_full.loc[df_full['Age'] >= 18, 'Categ_Age'] = 2	2	2
combine_df['titlename'] = combine_df['Name'].str.extract(r' ([a-zA-Z]+)\.',expand=False)	2	2
full['Age'] = (full['Age'] - full['Age'].mean()) / full['Age'].std()	2	2
"train_data[""Survived""],"	2	1
test_pclass_dummies.drop('Class3',axis=1,inplace=True)	2	2
"x_train[""PassengerId""]"	2	2
train['Age'] = train['Age'].fillna(Age_mean)	2	2
model.add(layers.Dropout(0.6))	2	1
axes1.hist(initial_age_values, **color_settings)	2	2
passenger['Parch']	2	1
all_data['CabinNum3'] = all_data['Cabin3'].apply(get_cabin_num)	2	2
df['Survived'] = result.astype(int)	2	1
train_loss_collect.append(train_loss)	2	2
train_ch.groupby('FareBin').sum()	2	2
best_params['n_estimators'],	2	1
"titanic_df.drop([""Name"",""Sex"",""Age"",""Embarked"",""Male"",""Parch"", ""SibSp"",""ParchBinary"",""SibSpBinary"",""Pclass"",""Class1"",""Class2"",""Class3"",""ClassSex"",""Female"",""MasterMiss"",""S"",""1male"",""2male"",""3male"",""Boy""], axis=1, inplace=True)"	2	2
"train.Ticket_Cat.apply(lambda x: re.sub(""[^a-zA-Z]"", '', str(x)))"	2	1
Y_train.values[train_index], Y_train.values[test_index]	2	2
train_df.join(embark_dummies_train)	2	2
titanic_traindf.head(2)	2	1
"test.set_index(""PassengerId"", inplace=True)"	2	2
np.multiply((1 - y), np.log(1 - sigmoid(X * theta.T)))	2	2
train_df.loc[ train_df['Fare'] > 31, 'Fare'] = 3	2	2
"train[""Fare""] = train[""Fare""].map(lambda i: np.log(i) if i > 0 else 0)"	2	2
z.astype('f')	2	2
dataset.loc[(dataset['Age'] > 25) & (dataset['Age'] <= 26), 'Age'] = 3	2	2
train[['Parch', 'Survived']].groupby(['Parch']).count().sort_values(by='Survived', ascending=False)	2	2
data['Ticket'] = data.Ticket.str.replace('.', '')	2	2
diff.groupby(['Title','Pclass'])['Survived'].agg([('average','mean'),('number','count')])	2	2
data.fillna(0, inplace = True)	2	1
submission.to_csv('titanic_Luke.csv', index=False)	2	2
all_data.drop(['Cabin','Ticket','Name','SibSp','Parch','PassengerId'],axis=1,inplace=True)	2	2
full.loc[(full.Fare>7.854)&(full.Fare<=10.5),'FareCut']=2	2	2
train_set['Survived']  # Relocate Survived target feature to y_train	2	2
dataset.Name.head()	2	2
"train[[""Pclass"", ""Survived""]].groupby([""Pclass""], as_index = False).mean().sort_values(by=""Pclass"")"	2	2
combined_df[['Age', 'title', 'Survived']].groupby(by='title').agg({'Age':['median','count'], 'Survived' : 'mean'})	2	1
data.loc[data['Age']>64, 'Age_band'] = 4	2	2
"train.drop([""Name""], axis=1)"	2	2
df_data_x.iloc[:891, :]  # 前891个数据是训练集	2	2
result.loc[:, 'Survived'] = 0	2	2
data['Cabin'] = data['Cabin'].str[:1]	2	2
corr.Survived.sort_values(ascending=False)	2	2
df_test['Title'].unique()	2	2
"train_df[[""Age"", ""Fare""]] = scaler.fit_transform(train_df[[""Age"", ""Fare""]])"	2	2
test['SibSp'].fillna(-1, inplace=True)	2	2
"result[""PassengerId""],"	2	2
"train_set[""Embarked""].fillna(train_set[""Embarked""].value_counts().index[0], inplace=True)"	2	2
answer.head()	2	1
feature_imp_sorted_rf.head(top_n_features)['feature']	2	2
tf.add(tf.matmul(W1, X), b1)	2	2
df[['Age', 'Parch', 'SibSp', 'Sex']].values	2	2
df_full.corr()	2	2
scaler.transform(test['Age*Class'].values.reshape(-1, 1))	2	2
results.astype(int)	2	2
all_data['Ticket_Sign1'] = all_data['Ticket'].apply(get_ticket_sign_1)	2	2
data['Cabin'].fillna('U', inplace=True)	2	2
"new_data[""Age""] = new_data[""Age""]/15"	2	1
"test[""Survived""] = LRmodel.predict(Xt)"	2	1
"df['Last_Name'] = df['Name'].apply(lambda x: str.split(x, "","")[0])"	2	2
full.isnull().mean()	2	1
"train.loc[train[""Title""] == ""Ms"", ""Title""] = 'Miss'"	2	2
X_test['random'] = np.random.random(size=len(X_test))	2	1
model.add(Dense(32, input_dim=X_train.shape[1], activation='relu'))	2	2
scaler.transform(X_test_transformed)	2	2
dataset1.loc[dataset1['Embarked']=='Q','Embarked'] = 1	2	2
concat['Surname'] = surnames	2	2
train_x['Title'] = train_x['Title'].replace('Ms', 'Miss')	2	2
train_x.drop(['Survived'], inplace=True, axis=1)	2	2
df['Class_Age'] = df.loc[:,'Age']*df.loc[:,'Pclass']	2	1
df['PassengerId'] = df.index	2	2
"train_df.drop([""Name"",""PassengerId""],axis=1)"	2	2
test['Sex']=test['Sex'].astype('category')	2	2
df['fare_pp'] = df['Fare'] / df['ticket_count']	2	2
train.loc[v[i], 'Male_Friends_NotSurvived'] = train[(train.Ticket==k)&(train.index!=v[i])&(train.Sex=='male')&(train.Survived==0)].Survived.count()	2	2
x.append(3.3)	2	2
test['Age'] = test['Age'].fillna(Age_mean)	2	2
"test_df[""FamilySize""] = test_df[['SibSp', 'Parch']].apply(get_family_size, axis=1)"	2	2
df_train[['Name','Sex','Pclass','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked']],	2	1
train.drop(labels=['Age'], axis=1,inplace = True)	2	2
full.loc[full.Fare>41.579,'FareCut']=5	2	2
train_data['Age'][train_data['Age'].isnull()].index	2	2
X_train.T	2	2
holdout.drop(['IsTrain','PassengerId','Survived'],axis=1,inplace=True)	2	2
df_full.loc[df_full['Age'] >= 25, 'Categ_Age'] = 3	2	2
"test[""AgeCategory""] = ""Adult"""	2	2
test_df_clean['Cabin_h'] = test_df_clean['Cabin'].map(lambda x: x[0])	2	1
train_df.drop(['Fare'], axis=1)	2	2
result['Alone']	2	2
d.drop(drop_column, axis=1, inplace = True)	2	1
valid_soft_pred_matrix.set_index([X_test.index])	2	1
all_dummy_df.head()	2	1
data.drop('Name', axis=1)	2	2
data_train.append(data_test)	2	2
test.loc[v[i], 'FatherOnBoard'] = 1	2	2
axes.update(wspace=0.25, hspace=0.25)	2	2
trainingset.head()	2	1
dataset.loc[dataset['Age']<=16, 'Age']=0,	2	2
dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1	2	2
"df[""Deck""][df[""Deck""] == ""A""] = 1"	2	2
l.append(i)	2	2
df.FareRange.astype('int64')	2	1
data_train.corr()	2	2
sns.boxplot(x='Pclass', y='FamilySize', hue='Survived', data=data1, ax=ax3)	2	2
output['Fare'] = data['Fare'] / 512	2	2
mod_data.Age.fillna(test_mean_age)	2	1
dfTest[['Pclass','Sex','ParchCat']]	2	2
age.head()	2	2
df_study_svc.loc[ind, 'params']	2	1
df_train.drop(columns = ['Survived'], axis = 1) # Input matrix as pandas dataframe (dim:891*47).	2	2
train.groupby(['SibSp','Survived']).count()['Pclass']	2	2
"new_data[""Name""] = new_data[""Name""].str.replace(""Col"",""Mr"")"	2	1
theta.shape	2	1
df_study_lr.loc[ind, 'params']	2	1
data['Fare'] = data['Fare'].fillna(0)	2	2
train[['Title','Survived']].groupby(['Title']).size()	2	1
le.transform(train[feature])	2	2
data_all['Title_Miss'] = (data_all['Title']==2) + 0	2	2
x_train.drop(labels=['Embarked_-999'], axis=1)	2	2
df.rename(columns={'Pclass': 'pclass'})	2	2
"ax[0].set_ylabel(""Number"")"	2	1
y_train.mean()	2	2
test_df['IsHusband3'] = test_df['Male3']	2	2
X.iloc[:,valid]     # contains only columns that are not bool and not category	2	1
pd.merge(staff_df, student_df, how='left', left_index=True, right_index=True)	2	2
test_data_orig.shape	2	2
cv_scores.std()	2	1
best_prediction[1]:	2	2
result.append(titanic_train)	2	2
train_data.Age.mean()	2	2
result['Alone'].loc[result['Alone'] == 0] = 'Alone'	2	2
full_name[1].str.split('.', n=0, expand=True)	2	2
df.drop('Age',axis=1,inplace=True)	2	2
"train_df.Pclass.astype(""category"")"	2	1
axs[0].set_xlabel('Boosting round')	2	2
train_ch.groupby('Ticket_No').sum()	2	2
plt.hist(df['gamma'], bins=100)	2	2
train.pivot_table(index=group, columns='Survived', values = 'Fare', aggfunc='count')	2	2
train['Age'][train['Survived']==1].dropna().hist(bins=8, color='b',alpha=0.75,label='Survived') # Survived passengers	2	2
training_df.ix[:, training_df.columns != 'Survived']	2	2
test_data.drop(columns='Name')	2	2
"titanic_test[""Age""].isnull().sum()"	2	2
train['Salutation'] = train.Name.str.extract(' ([A-Za-z]+).', expand=False)	2	2
data.groupby(['Sex', 'Survived'])['Survived'].count()	2	2
training_data.sample(6)	2	2
test_df['3fs'] =     test_df[['Pclass','Female','S']].apply( get_3fs, axis=1 )	2	2
"train_data['TravelBuds']=train_data[""SibSp""]+train_data[""Parch""]"	2	2
train_set[['Age','Survived']].copy().dropna(axis=0)	2	2
data_all['Mother'] = ((data_all['Female']==1) & (data_all['Parch']>0) & (data_all['Age'] > 18) & (data_all['Title_Miss']==0)) + 0	2	2
data['SibSp'] = StandardScaler().fit_transform(data['SibSp'].values.reshape(-1, 1))	2	2
Train_Master.drop('Survived', axis=1)	2	1
data.copy(deep=True)#make a new copy to keep original data intact	2	1
"model[""hyperparameters""],"	2	2
tmodel.add(Activation('linear'))	2	2
dataset['Title'] = dataset['Title'].replace(['Lady','Countess','Capt','Col','Don', 'Dr','Major','Rev','Sir,Jonkheer','Dona'],'Rare')	2	2
"train.loc[train[""Title""] == ""Dona"", ""Title""] = 'Rare Title'"	2	2
"train_df2[""Survived""]"	2	2
train_df['Pclass'].value_counts()	2	2
np.std(valid_scores, axis=1)	2	1
sgd_scores.mean()	2	2
scaler.transform(all_data)	2	2
adf['Date'] = pd.Series({0: 'December 1', 2: 'mid-May'})	2	2
Age.plot.hist(ax=ax[1], bins=20, edgecolor='black', color='green')	2	2
plt.hist(initial_age_values,**color_settings)	2	2
df['NameLength'] = df.Name.fillna('').str.len()	2	1
titanic[['Survived']]	2	2
in ['Master','Miss','Mr','Mrs','Rare']:	2	2
data['Fare_cat'] = 0	2	2
"test.loc[test[""Title""] == ""Jonkheer"", ""Title""] = 'Rare Title'"	2	2
train.groupby('Pclass').mean()	2	2
np.min(np.where(tpr > 0.95)) # index of the first threshold for which the sensibility > 0.95	2	2
concat.Title.values[concat.Title.isin(['Mme', 'Mlle'])] = 'Mlle'	2	2
list_sil.append(silhouette_avg)	2	1
train.append(test, sort=False)	2	2
titanic.groupby(['Pclass','Sex'])	2	2
train.drop(['Sex','Embarked'],axis=1,inplace=True)	2	2
ax[0].set_title('Passenger Breakdown Based on Sex')	2	2
y_test.values[i] == 1:	2	1
titanic_data['FamilySize'] = titanic_data['SibSp'] + titanic_data['Parch'] + 1	2	2
test['source']='test'	2	2
"trainData.describe(include=[""O""])"	2	2
data['Pclass'] = StandardScaler().fit_transform(data['Pclass'].values.reshape(-1, 1))	2	2
dfTest.set_index(['PassengerId'],inplace=True)	2	2
"rates[""Percentage""]=0"	2	1
"df_titanic[""Fare""],"	2	1
gain_g.append(np.sum(measure_p)/m)	2	1
"combdata.loc[combdata['source']==""train""]"	2	2
"data[""family_or_alone""]= data.SibSp + data.Parch"	2	2
data_train['Survived'].values	2	1
train[['Pclass', 'Fare']].groupby(['Pclass'], as_index=False).agg(['mean', 'median', 'std', 'min', 'max'])	2	1
valid_hard_pred_matrix.set_index([X_test.index])	2	1
traindf.drop(drop_column, axis=1, inplace = True)	2	2
sc.transform(test)	2	2
data['Fare'].describe()	2	2
df_test['Ticket']	2	2
test_n.rename(columns={'male':'Sex', 'Q':'Queenstown', 'S':'Southampton',2:'Pclass2',3:'Pclass3'}, inplace=True)	2	2
"df[""Age""].std()"	2	2
"titanic[""Age""]=titanic[""Age""].fillna(titanic[""Age""].median())"	2	2
train_set[['Embarked','Survived']].copy().dropna(axis=0)	2	2
combined_train_test['Embarked'].fillna(combined_train_test['Embarked'].mode().iloc[0], inplace=True)	2	2
"training.groupby(""Title"")[""Age""].transform(""median"")"	2	2
train.Ticket_Cat.isnull().sum()	2	1
"test_dataset['Has_Cabin'] = test_dataset[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	2	2
titanic_df.loc[ titanic_df['Age'] <= 16, 'Age'] = 0	2	2
"test[""Deck""] = test[""Cabin""].apply(cab_to_deck)"	2	2
train['Fare'].median()	2	2
"train_data[[""Survived""]]"	2	2
sns.boxplot(x=train.Fare)	2	1
all_data.drop('Name', axis=1)	2	2
missing_age_test.drop(['Age'], axis = 1)	2	2
df.loc[df['Deck']=='No Cabin','Deck'] = 'N/A'	2	2
"train[""Embarked""].fillna(train.Embarked.mean(), inplace=True)"	2	2
plt.rcParams.update(params)	2	2
df['y'] = target	2	2
train_ch.groupby('CabinType2').sum()	2	2
train_data.drop(['SibSp','Parch'],axis=1)	2	2
test.loc[(test['Family'] > 1) & (test['Family'] < 5), 'FamilyType'] = 'small'	2	2
test_dataset['Port']	2	2
df_study_rf.loc[ind, 'val_score']	2	1
titanic_df[0:10]	2	2
train_df.drop(columns = ['Ticket', 'Cabin', 'Name'])	2	2
"sns.boxplot(x='Embarked', y=""Fare"", data=data)"	2	1
train_df.loc[row_null_age, :].head()	2	1
data.drop(['Age', 'Fare'], axis=1)	2	2
"DataFile[""Title""] = titles"	2	2
data_for_analysis.iloc[:,0].values	2	2
df['Sex'] = df['Sex'].map({'male':0, 'female':1}).astype(int)	2	2
guess_df.mean()	2	2
df.loc[(df['Age']>32)&(df['Age']<=48),'Age_band']=2	2	2
modifiedFlights.drop(['AgeGroup'], axis = 1)	2	1
dataset1.loc[dataset1['Embarked']=='C','Embarked'] = 2	2	2
train_df.loc[ train_df['Age'] <= 16, 'Age'] = 0	2	2
"data[""Name""] = data[""Name""].str.split(';', expand=True)[1]"	2	1
dataset['IsAlone'].loc[dataset['FamilySize']>1]=0	2	2
"X[""Sex""] = X[""Sex""].map(sex_map)"	2	2
"legs[1].set_text(""yes"")"	2	2
train.describe(include=['O'])  #Categorical Variables	2	2
train_df['Family'].loc[train_df['Family'].isin(np.arange(4,11,1))] = 'With_big_family'	2	2
df_scores.sort_values(by='Score', ascending=False)	2	1
test['Embarked']=test['Embarked'].astype('category')	2	2
all_data['Cabin1'] = all_data['Cabin'].apply(split_cabin, num=1)	2	2
train_df[['Parch','Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)	2	2
data_raw['FamilySize'].value_counts()	2	2
pd.isnull(cabin_code):	2	2
ds.loc[ds['FamilySize'] == 1, 'IsAlone'] = 1	2	1
all_data['Fare'] = all_data['Fare'] / all_data['TicketCount']	2	2
combined_train_test['Pclass_Fare_Category'] = combined_train_test.apply(pclass_fare_category, args=(Pclass_1_mean_fare, Pclass_2_mean_fare, Pclass_3_mean_fare), axis = 1)	2	2
X['Sex']=pd.get_dummies(X['Sex'])	2	2
dfcopy.Age.median()	2	1
submission.assign(PassengerId = test.PassengerId, Survived = y_pred)	2	1
train_set.drop('Survived', axis=1),	2	2
sub.iterrows():	2	1
train.set_value(index,'royalty',1)	2	2
in ['Sex', 'Embarked']:	2	2
x_train.drop(['Survived'],axis=1)	2	1
df.reset_index(inplace=True)	2	2
concat_reduce.head()	2	2
df['Alone'] = (df['SibSp'] == 0) & (df['Parch'] == 0)	2	2
df.drop(['Pclass','Sex','Cabin','Embarked'], axis = 1)	2	2
"training_targets[""Survived""],"	2	1
df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1, inplace = True)	2	1
df['Alone'] = df['family_size'].apply(lambda x: 1 if x==0 else 0)	2	2
train_data.drop(['Survived', 'Age','PassengerId'], axis = 1)	2	1
"point[""Sex""], point[""Age""], point[""SibSp""], point[""Parch""], point[""Fare""],"	2	1
dfFull.combine_first(agePrediction)	2	2
df_train[['Pclass','Fare','Parch','Sex','Embarked','SibSp','Age']]	2	1
data_all.drop(['Name', 'Ticket', 'Cabin', 'Survived', 'Title', 'Pclass', 'Sex', 'Embarked',  'PassengerId'], axis=1)	2	2
train['Age'] = train['Age'].fillna(0)	2	2
data.Fare.fillna(data.Fare.mean(),inplace=True)	2	2
train.loc[master_mask, 'Age'] = train.loc[master_mask, 'Age'].fillna(train[train.Title == 'Master'].Age.mean())	2	2
models.append(('SVC', SVC()))	2	2
data['Age'].fillna(data['Age'].median(skipna=True), inplace=True)	2	2
updated_test_data['PassengerId']	2	1
train_raw_data['Survived']	2	2
train.groupby(['Pclass','Sex']).mean()	2	2
df_submission.to_csv('./result1.csv', index=False)	2	2
df.groupby(['Sex','Pclass','Title'])	2	2
tt.head()	2	1
dataset['Gender_Embarked'] = 0	2	2
test.drop(['Name', 'Ticket', 'Cabin'], axis=1)	2	2
X['Sex'] = labelencoder_y.fit_transform(X['Sex'])	2	2
titanic_df['Age'].fillna(titanic_df['Age'].mean(), inplace=True)	2	2
"model.add(Dense(16, activation=""relu""))"	2	2
full['Embarked'].fillna('S',inplace=True)	2	2
train[['Parch','Survived']].groupby(['Parch']).mean().sort_values(by='Survived', ascending=False)	2	2
x_train.head(3)	2	2
train_df[['Person', 'Survived']].groupby(['Person'], as_index=False).mean()	2	2
missing_data.sort_values('missing_count', ascending=False)	2	1
combined_train_test['Cabin_Letter'] = combined_train_test['Cabin'].apply(lambda x: str(x)[0]  if(pd.notnull(x)) else x)	2	2
combined_train_test['Name_Length_Category'] = combined_train_test['Name_Length'].map(name_len_category)	2	2
model.add(Dense(10, activation='relu'))	2	2
test['Embarked'] = test['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)	2	2
all_data['AgeNull'] = all_data['Age'].apply(lambda x: 1 if pd.isnull(x) else 0)	2	2
train.Survived.astype(int)	2	2
ticket['SharedTicket'] = ticket['SharedTicket'].astype(int)	2	1
"df_test[""Age""] = df_test[""Age""].fillna(df_test[""Age""].median())"	2	2
train_df.loc[ (train_df.Age.isnull()), 'Age'] = median_age	2	2
"plt.rcParams[""figure.figsize""] = (15, 6)"	2	2
new_xvals.append(item+0.3)	2	2
y.astype(int)	2	1
"submission.to_csv(""titanic_predictions.csv"", index=False)"	2	2
df['NameCluster'] = cluster_predict(clu, vec, df0['Name'])	2	2
data['Fare'] = StandardScaler().fit_transform(data['Fare'].values.reshape(-1, 1))	2	2
one_hot_encoded_train_data.describe()	2	2
titanic_train_x.values	2	2
best_params['max_features'],	2	1
test['MotherSurvived'] = 0	2	2
dataset['FamilySize']=dataset['FamilySize'].map(family_mapping)	2	2
column[2]	2	1
df_train.drop('Survived',axis=1),	2	2
test['Male_Friends_NotSurvived'] = 0	2	2
test_df.iloc[:,0]	2	2
df.Fare.fillna(mean_fare, inplace=True)	2	2
dataset.loc[dataset['Age'] <= 16, 'Age'] = 0,	2	2
dfTest[['Pclass','Sex','ParchCat','SibSpCat','Embarked','Fare','TitleCat','Age','TicketCat']]	2	2
full_pipeline.transform(test_set_X)	2	2
"df_test[""Embarked""] = df_data['Embarked'][891:]"	2	2
imputer_test.info()	2	1
np.std(scores) < std:	2	2
temp['Survived'] = train_data.groupby(['TicketHead'])[['Survived']].sum()	2	2
"x[""title""] != 0:"	2	1
"titanic_df[""ChildSex""] = titanic_df[""Child""].map(str) + titanic_df[""Sex""]"	2	2
"train[""Survived""].value_counts(normalize=True)"	2	2
data.drop('Survived', axis=1, inplace=True)	2	2
train_data[['Sex', 'Survived']].groupby('Sex').mean().Survived.plot('bar')	2	2
dfTest[['Pclass','Sex','ParchCat','Embarked','Fare']]	2	2
combined.loc[(combined['Age'] > 48) & (combined['Age'] <= 64), 'Age'] = 3	2	2
df['Embarked'] = embarked_encoder.transform(df['Embarked'])	2	2
df_train[['Sex','Age','Survived']].groupby(['Sex','Age'],as_index=False).mean()	2	1
df_missing.head()	2	1
df1.copy()	2	2
data['Fare'].fillna(data['Fare'].median(), inplace = True)	2	2
train.append(test, sort=True)	2	2
preprocess_pipeline.transform(test_df)	2	2
train_ds.head()	2	2
df_train.groupby('Initial').mean()	2	2
data_train.sample(10)	2	2
submission.head(20)	2	2
one_hot_test.head()	2	2
ndf.head()	2	1
le.transform(df['Sex'])	2	2
train['Alone']=train['Family_Size'].transform(lambda f:aloner(f))	2	2
"X_test.drop(""Parch"", axis = 1)"	2	2
dataset['Title'] = get_title(dataset, 'Name')	2	2
"train_df[""FamilySize""] = train_df[""SibSp""] + train_df[""Parch""] + 1"	2	2
scaler.transform(test[columns])	2	1
X[['Pclass', 'Sex', 'SibSp', 'Parch']]	2	1
dataset.Age.fillna(title_age_median , inplace=True)	2	2
test_df.drop('Parch', axis=1, inplace=True)	2	2
Xy_train_df.head()	2	1
plt.hist(train_data['Pclass'], color='lightblue')	2	2
g.axes.ravel():	2	1
train_df.loc[(train_df.Age.isnull())&(train_df.Initial=='Mrs'),'Age']=36	2	1
dc['Fare'].replace(0,np.NaN)	2	1
ax[0].set_title('Survived=0')	2	2
train.loc[train['Embarked']=='C', 'Embarked'] = 0	2	2
"train[[""FamilySize"", ""Survived""]].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	2	2
test.drop('PassengerId',axis=1).copy()	2	2
test['PassengerId'] = ID	2	1
data['isAlone'] = 0	2	1
df_interesting.astype(float).corr(),linewidths=0.1,vmax=1.0,	2	1
list_sil_test.append(silhouette_avg)	2	1
"train[""AgeCategory""].loc[train[""Age""] > 50 ] = ""Old"""	2	2
df['ticket_count'].value_counts()	2	2
df.Embarked.fillna(port_mode)	2	2
predictedOutput['Survived'] = cls.predict(test_data[features])	2	1
test.describe(include = ['O'])	2	2
test.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)	2	2
"new_data[""Age""] = new_data[""Age""].fillna(new_data[""Age""].mean())"	2	1
"results.sort_values(by=[""Test_Score""], ascending=False, inplace=True)"	2	1
data_train['Deck'] = data_train['Cabin'].str.extract('(^[A-Z]{1})', expand=True).fillna('G')	2	1
combined_train_test[['Age', 'Fare']] = scale_age_fare.transform(combined_train_test[['Age', 'Fare']])	2	2
test_df.loc[ (test_df.Age.isnull()), 'Age'] = median_age	2	2
test_df['title'] = test_df['Name'].apply(get_title).apply(title_map)	2	2
np.round(y_test_nn)	2	1
titanic_data['Title'] = titanic_data['Title'].map(title_mapping)	2	2
train_df.groupby(['embarked']).size().sort_values(ascending=False)	2	1
results.append(correct_guesses.mean())	2	1
titanic_df['Alone'] =   titanic_df[['FamilySize']].apply( (lambda x: int(int(x) ==1) ), axis=1)	2	2
data_all['Cabin_C'] = (data_all['Cabin']=='C')+0	2	2
train[['Pclass', 'Sex', 'Age', 'Parch', 'Fare', 'Embarked', 'Has_Cabin', 'FamilySize', 'Title', 'Survived']].groupby(['Survived'], as_index=False).mean().sort_values(by='Pclass', ascending=False)	2	2
"train[""Embarked""].fillna(""S"", inplace = True)"	2	2
"test_df.drop([""Name"",""Sex"",""Age"",""Embarked"",""Male"", ""Survived"",""Parch"",""SibSp"",""ParchBinary"",""SibSpBinary"",""Pclass"",""Class1"",""Class2"",""Class3"",""ClassSex"",""Female"",""MasterMiss"",""S"",""1male"",""2male"",""3male"",""Boy""], axis=1, inplace=True)"	2	2
df['Cabin'].str[0]	2	2
"new_data[""Name""] = new_data[""Name""].str.split(';', expand=True)[1]"	2	1
train.Age.median()	2	2
combined_features.drop('index', axis=1, inplace=True)	2	1
df['Age_norm'] = pd.cut(df['Age'],[0,5,18,35,60,80])	2	2
data['Sex'][i] = 1	2	2
le.transform(test_data[feature])	2	2
scaler.transform(transf)	2	2
"models.append((""NB"", GaussianNB))"	2	1
together.head(5)	2	1
dataset.loc[dataset['Pclass']==2,'Survived'].value_counts()	2	2
ss.transform(testset.iloc[:, i-1:i])	2	1
titanic_df['CategoricalFare'] = pd.qcut(titanic_df['Fare'], 4)	2	1
concat_le.dtypes	2	2
validation['Title'] == 'Master'	2	2
X['Pclass'] - 2	2	2
model.add(Dense(units = 4, kernel_initializer = 'uniform', activation = 'sigmoid'))	2	1
clean_data.head()	2	1
data_train.copy(deep=True)	2	2
df_full.drop('PassengerId', axis=1)	2	2
train_data['Title'] = train_data['Title'].replace(['Dr', 'Rev', 'Col', 'Major', 'Countess', 'Sir', 'Jonkheer', 'Lady', 'Capt', 'Don'], 'Others')	2	2
axs[1].set_title('Feature importance')	2	2
result['person'].value_counts()	2	2
"train[[""Sex"", ""Survived""]].groupby(['Sex']).count().sort_values(by='Survived', ascending=False)"	2	2
"df[""Embarked""].fillna(""S"", inplace=True)"	2	2
test_df['IsHusband1'].loc[ test_df['SibSp'] == 0 ] = 0	2	2
train.loc[train['Embarked']=='C','Embarked']=1	2	2
data['CatAge'] = pd.qcut(data.Age, q=4, labels=False)	2	2
c_range[0] = 1	2	2
test.drop('Ticket', axis=1, inplace=True)	2	2
train_df.drop(['Survived', 'PassengerId'], axis=1)	2	2
"X[""Title""] = X[""Title""].map(title_mapping)"	2	2
"dataset[""Sex""] = dataset[""Sex""].map({""female"":1,""male"":0}).astype(int)"	2	2
solution.head(10)	2	2
titanic_df['IsHusband'] = titanic_df['Male']	2	2
"_res.sort_values(by=""acc"", axis=0, ascending=False).iloc[20: , :]"	2	1
test['Fare'].groupby(test['Pclass'])	2	2
combined_features.Cabin.fillna('U', inplace=True)	2	1
df_proportions['category'][i],	2	1
df['Sex'] = df['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	2	2
dfFull.loc[dfFull.Ticket == ticket, 'TicketCat'] = i	2	2
solution.head()	2	2
df['PassengerId'] = test_labels.astype(int)	2	1
df.Age.astype('int64')	2	1
train['Survived_C'] = np.where(train['Survived']==0,'No','Yes')	2	2
np.squeeze(cost)	2	2
model.add(Dense(128, activation='relu'))	2	2
cab[0]	2	2
dfFull.loc[dfFull.Ticket == ticket, 'TicketCat'] = 0	2	2
train.info() # We have 891 observations & 12 columns. See the mix of variable types.	2	2
data_all['Title_Rare'] = (data_all['Title']==5) + 0	2	2
df.loc[ (df.Fare_Per_Person<8) ,'HighLow'] = 'Low'	2	2
train['Embarked'] = train['Embarked'].fillna(0)	2	2
train['Salutation'] = train['Salutation'].replace('Mme', 'Mrs')	2	2
df1.count()	2	1
df['Sex']	2	2
df_train.count()	2	1
train['Survived'].as_matrix()	2	2
pred_dict['class_ids'][0]	2	2
dataset['Title'] = dataset['Title'].replace('Mme', 'Miss')	2	2
"train_df[""AgeBand""] = pd.qcut(train_df[""Age""],8)"	2	2
full.loc[(full.Title==i)&(full.Pclass==j)&(full.Parch==g)&(full.Survived.notnull()),'Survived'].mean()>=0:	2	2
train.copy() # Using 'copy()' allows to clone the dataset, creating a different object with the same values	2	2
train_y.values[train_index], train_y.values[test_index]	2	2
skewness.dropna()	2	2
"train_df[[""FareBand"",""Survived""]].groupby([""FareBand""],as_index=False).mean().sort_values(by=""FareBand"",ascending=True)"	2	2
df['nomiss_perc'] = (df[df.columns[0]]/(df[df.columns[0]] + df[df.columns[1]]))	2	1
merged.Ticket.apply(lambda x : x[0])	2	2
titanic_train_dataset.info()	2	1
train.groupby(['Age_Group', 'Survived'])['Survived'].count().unstack().fillna(0)	2	2
all_data['Age'] = all_data['Age'].astype(int)	2	2
titanic_df.drop(['Age'],axis=1)	2	2
curated_data.head(20)	2	1
"in ["" Mr"", "" Mrs"", "" Miss"", "" Master""]:"	2	1
train_X.isnull().sum()	2	2
data_full.sample(5)	2	1
data.iloc[:len(train)]	2	2
test_df.join(boy_dummies_test)	2	2
full['Title']=full['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())	2	2
train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean()	2	2
data['Embarked'][0] = 0	2	2
training.head(30)	2	2
test.drop(columns=['PassengerId'])	2	2
"train[[""Pclass"",""Age"",""Sex"",""Fare"", ""SibSp"", ""Parch"", ""Embarked""]].values"	2	2
train.loc[train.Fare.argmax()]	2	2
df.Cabin.apply(lambda x:x[0])	2	2
train_filtered.corr()	2	2
"test.loc[(test[""Family""] > 1)  &  (test[""Family""] < 5) , ""FamilySize""] = 'small'"	2	2
dataset.loc[(dataset['Sex']==1) & (dataset['Embarked']==2), 'Gender_Embarked'] = 3	2	2
ftrain.values # Creates an array of the train data	2	2
data['SexCode'] = label.fit_transform(data['Sex']) # same results with data['sex_code'] = np.where(data['Sex']=='male',1,0)	2	2
dfa.drop('Embarked', axis=1)	2	2
df_test.drop('PassengerId', axis=1)	2	2
temp['SurviveRatio'] = temp['Survived'] / temp['Count']	2	2
Pclass2.mean().Age	2	1
data['TicketHead'] = data['TicketHead'].replace(classes, '1')	2	2
row[3] == 'female':	2	1
raw_test.head()	2	2
test_predictions.astype(np.int64)	2	2
i[0] > i[1]:	2	1
a.max()	2	2
train['CategoricalAge']=pd.cut(train['Age'],5)	2	2
titanic.drop(['Embarked'], axis=1, inplace=True) # then drop the original column	2	2
df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)	2	2
train.drop(cols_to_drop, axis=1)	2	1
models['set3']['num_attrs'] = ['Fare', 'Age', 'Family_total']	2	1
plt.style.available	2	2
scaler.transform(X_pred)	2	2
"dataset.drop([""PassengerId""], axis = 1, inplace = True)"	2	2
titanic_df['IsHusband1'].loc[ titanic_df['SibSp'] == 0 ] = 0	2	2
train_data.drop('Survived', axis = 1)	2	2
y.astype(np.float32).values	2	2
all_data['Embarked'] = all_data['Embarked'].fillna('S')	2	2
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['ParchBinary', 'Female', 'MasterMiss'],                     columns=['Embarked', 'Pclass'],                     aggfunc='count')	2	2
data.drop(['Ticket', 'Cabin', 'Name'], axis = 1)	2	2
"test.select_dtypes(exclude = [""object""]).columns"	2	1
test_data['Age'].fillna(test_data['Age'].mean(), inplace=True)	2	2
train_features.head()	2	2
model.add(Dense(units=1, activation='sigmoid'))	2	2
data.loc[data['Sex']==0, 'SexByAge'] = data.loc[data['Sex']==0, 'Age']	2	2
np.std(test_scores,axis=1)	2	2
test_data.dropna(inplace=True)	2	2
sml.feature.drop(['Cabin'])	2	2
result['Alone'].loc[result['Alone'] >0] = 'With Family'	2	2
"df['EmbarkedC'] = np.where(df['Embarked']==""C"", 1, 0)"	2	2
"df[""Deck""][df[""Deck""] == ""B""] = 2"	2	2
df['Ticket']=x_Ticket.astype(np.float)	2	2
"Titanic[""Major""] = Titanic.apply(lambda row: IsMajor(row[""Age""]), axis=1)"	2	1
"test[""FamilySize""] = test[""SibSp""] + test[""Parch""]"	2	2
df_test.drop('Embarked', axis=1)	2	2
test_data.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)	2	2
dataset['CategoricalFare'] = pd.qcut(dataset['Fare'],4,labels = [1,2,3,4])	2	2
train.loc[train['Embarked']=='Q','Embarked']=2	2	2
dataset.iloc[:, 1]	2	2
test_df['Family_number'] = test_df.SibSp + test_df.Parch # number of family members on board	2	2
ages.std()	2	2
data['Embarked'].describe()	2	2
submit.to_csv('submit.csv', index= False)	2	2
df.drop(['SibSp','Parch','FamilySize'],axis=1,inplace=True)	2	2
train.where(train ['Age']==30)	2	2
"train_df[""Name""].apply(get_title)"	2	1
model.add(LeakyReLU())	2	1
"array_name[1].split(""."")"	2	2
df_train['Title'].unique()	2	2
train.groupby(group_by_age).mean()	2	2
models.append(('DT', DecisionTreeClassifier()))	2	2
ship.head()	2	1
train_data.iloc[:,1]	2	2
td_not_survived.groupby('Pclass').size()	2	2
"titanic_df[""Age""].hist(bins=15, color='teal', alpha=0.8)"	2	2
combdata['Age'].iloc[i] = filled_age	2	2
data['Family'] = data['Family'].map(family_mapping)	2	2
Pclass1[['Embarked', 'Fare']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Fare', ascending=False)	2	2
temp.head()	2	2
train_df.iloc[:, 1:]	2	2
plt.hist(v2, alpha=0.7, bins=np.arange(-50,150,5), label='v2');	2	2
train['Age'][(train['Title']=='Mr')&(train['Age']>0)].mean()	2	2
"train.loc[train[""Title""] == ""Jonkheer"", ""Title""] = 'Rare Title'"	2	2
"titanic_test[""Age""][np.isnan(titanic_test[""Age""])] = rand_2"	2	2
"combdata[""Title""] = combdata[""Title""].map({""Master"":0, ""Miss"":1, ""Ms"" : 1 , ""Mme"":1, ""Mlle"":1, ""Mrs"":1, ""Mr"":2, ""Rare"":3})"	2	2
np.mean(test_scores,axis=1)	2	2
classifiers.append(XGBClassifier(random_state=random_state))	2	2
train_df.groupby('SibSp',as_index=False)['SibSp','Survived'].mean()	2	2
test['Name_Title'] = test['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	2	2
df.loc['Store 1']['Cost']	2	2
output.to_csv('submission.csv',index=False)	2	2
data['Categorical_Fare'] = pd.qcut(data['Fare'], 4, labels=False)	2	2
train.align(test, join='outer', axis=1)	2	2
train.shape[0] #this gets the number rows in the traning dataset	2	2
"x_train.drop(labels=['Name', 'Ticket', ""PassengerId"", ""Cabin""], axis=1)"	2	2
"dataframe[""Survived""]"	2	2
combine.loc[combine.Age.isnull()]	2	2
titanic_df.drop('Survived',axis=1)	2	2
train_df.drop('Pclass', axis=1, inplace=True)	2	2
data['Cabin'].value_counts()	2	2
train['Age'][(train['Title']=='Miss')&(train['Age']>0)].mean()	2	2
df_data['Minor'] = df_data['Minor'] * 1	2	2
all_data['Title'] = all_data['Name'].apply(get_title)	2	2
test['FamilySize'] = test['Family']	2	2
dfTrain['Cabin_Letter'] = dfTrain['Cabin'].apply(lambda x: str(x)[0])	2	1
train.drop(['Name','Ticket','Cabin'],axis=1)	2	2
df_data['Age_copy'] = df_data['Age'].fillna(-1)	2	2
DataFile['AgeBin'] = pd.qcut(DataFile['Age'], 4)	2	2
features.join(dummy_units)	2	1
one_hot_train.drop('Survived', axis=1)	2	2
pd.pivot_table(train, values= 'Survived',index=['Embarked'],columns='Pclass',aggfunc=np.mean, margins=True)	2	2
combined_train_test['Name_Length_Category'] = le_fare.transform(combined_train_test['Name_Length_Category'])	2	2
total.loc[total['PassengerId'] == passID, 'Family_Survival'] = 1	2	1
total.loc[total['PassengerId'] == passID, 'Family_Survival'] = 0	2	1
train['Title'] = train['Title'].replace('Mlle', 'Miss').replace('Ms', 'Miss').replace('Mme', 'Mrs').replace(['Dr', 'Major', 'Col', 'Rev', 'Lady', 'Jonkheer', 'Don', 'Sir', 'Dona', 'Capt', 'the Countess'], 'Special')	2	2
"test_df.drop(""PassengerId"", axis = 1).copy()"	2	2
train['Deck'].unique() #查看船舱	2	1
df.loc[ (df['Fare'] > 7.9) & (df['Fare'] <= 10.5), 'fare_cat'] = 1	2	2
np.mean(1 - test_scores, axis = 1)	2	2
dataset['Sex'] = dataset['Sex'].map({'male': 0, 'female': 1}).astype(int)	2	2
"combine.drop([""Parch"", ""SibSp"", ""Cabin"", ""Name""], axis=1)"	2	2
train['Salutation'] = train['Salutation'].fillna(0)	2	2
data_set.groupby(['TicketHead'])[['Fare']].mean()	2	2
_train_df.copy().append(_test_df)	2	1
caches.append(cache)	2	1
train_df.describe(percentiles=[.61, .62])	2	2
"combdata[""Fare""] = np.log1p(combdata[""Fare""])"	2	2
df.Age.dropna().values, bins=range(0, 81, 1), kde=False,	2	1
X_test['PassengerId']	2	2
train['Solo'] = train['FamilySize'].apply(lambda x: 0 if x>0 else 1)	2	2
"X_train.drop(""Ticket"", axis = 1)"	2	2
dataset.loc[dataset['Survived'] != -777, 'Age':'AgeState_Child'].values	2	2
data_all['Title_Master'] = (data_all['Title']==4) + 0	2	2
"_df[""sex""]        = _df.sex.map(sex_dict)"	2	1
data['SharedSurname'] = data['Surname'].map(Shares)	2	1
train_data.drop('PassengerId', axis=1, inplace=True)	2	2
df['Embarked'] = df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	2	2
data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)	2	2
data_all['Cabin_B'] = (data_all['Cabin']=='B')+0	2	2
"train_df[""Embarked""].dropna().mode()[0]"	2	2
new_train_data.columns.values.tolist()[1:],	2	1
val_data.drop(drop_columns_test, axis=1, inplace = True)	2	2
"model[""estimator""],"	2	2
train[['CategoricalFare', 'Survived']].groupby(['CategoricalFare'], as_index=False).mean()	2	2
titanic_train_data_X.info()	2	2
data1.drop(drop_column, axis=1, inplace=True)	2	2
output['Sex_Age'] = output['Age']*output['Sex']	2	2
test_set.drop(columns='Survived')	2	1
drop_train.head()	2	2
train['Embarked'] = data['Embarked'][:len(train)]	2	2
titanic.drop(['PassengerId','Name', 'Ticket', 'Cabin'], axis =1)	2	2
"new_data[""Miss""] = new_data[""Name""].str.contains(""Miss"").astype(int)"	2	1
dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 31), 'Age'] = 4	2	2
titanic_test_df.head()	2	2
train.drop(['Embarked'],axis=1)	2	2
in ['Cabin_categorical', 'Ticket_categorical']:	2	1
train_df.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)	2	2
test.drop('Name',axis=1,inplace=True)	2	2
test_data['Age'].iloc[i] = pred_age	2	2
input_df.info()	2	1
"train.groupby(""Pclass"")[""Fare""].mean()"	2	2
"X_test.drop(""SibSp"", axis = 1)"	2	2
kaggle_df['PassengerId'] = titanic_test_org['PassengerId']	2	1
X.drop(['Cabin'], axis=1)	2	2
dataset.loc[ dataset['Deck'] > 6, 'Deck'] = 0	2	2
dataset.loc[(dataset['Age'] > 50) & (dataset['Age'] <= 60), 'Age']        = 2	2	2
"data_val1[""PassengerId""],"	2	2
sns.boxplot(x=train_df['Fare'],fliersize=3,**color_settings)	2	2
"df.to_csv(""{}.csv"".format(model_label),header=True,index=False)"	2	1
axes[1].set_title('Fare for df_Not_Survived')	2	1
df1.drop(labels=['Name', 'Ticket'], axis=1)	2	2
"ax[1].set_xlabel(""Survived Count"")"	2	1
"df[""Deck""] = df[""Deck""].fillna(0)"	2	2
df['HighLow']=df['Pclass']	2	2
validation_labels.count()	2	1
model.add(Dense(16, activation='relu'))	2	2
full.loc[full['Fare'].isnull(),'Fare'] = full['Fare'].mean()	2	2
combined_train_test.describe()	2	2
TD_X.drop( Field2Drop,axis=1,inplace=True)	2	1
data.loc[(data['Fare']>7.91) & (data['Fare']<=14.454), 'Fare_cat'] = 1	2	2
"test.replace(""male"",0).replace(""female"",1).replace(""S"",0).replace(""C"",1).replace(""Q"",2)"	2	2
ship['Age'] = ship_numeric['Age'].copy()	2	1
train['Age'][(train['Title']=='Mrs')&(train['Age']>0)].mean()	2	2
unique_cabin_letter[0]	2	1
df.drop(['Age','Fare'], axis = 1)	2	2
best_parameters['C'],	2	1
data['TicketHead'] = data['TicketHead'].replace('', 'NULL')	2	2
df['title'] = df['title'].replace('Mme.', 'Mrs.')	2	2
model.add(layers.Dropout(0.3))	2	1
train['Name_length'].value_counts()	2	2
train_data[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)	2	2
"train[""Age""].fillna(train.Age.mean(), inplace=True)"	2	2
df['Class_Age'] = df['Class_Age'].fillna(df['Class_Age'].median())	2	1
test_set['Title'].value_counts()	2	2
Submission.to_csv('submission.csv', index=False)	2	2
temp['Count'] = data_set.groupby(['TicketHead'])['Fare'].count()	2	2
all_data['TicketLett'] = all_data['Ticket'].apply(lambda x: str(x)[0])	2	2
df_train.drop(['Cabin'], axis = 1)	2	2
dfTrain.groupby('Sex').Survived.mean().plot(kind='bar')	2	2
all_data.drop('Cabin1', axis=1)	2	2
processed_data.drop(['title'], axis=1, inplace=True)	2	2
in ['Age', 'Ticket_numerical']:	2	1
titanic_df.loc[(titanic_df['Age'] > 32) & (titanic_df['Age'] <= 48), 'Age'] = 2	2	2
"train[""family_size""] = 0"	2	2
test_cl.Age.isnull().nonzero()[0]	2	1
df_train.groupby(['Deck']).size()	2	1
"test['Title'] = test[""Name""].map(lambda name : name.split(""."")[0].split("" "")[-1])"	2	2
X.copy(deep=True)	2	1
combined_train_test['Ticket_Letter'] = combined_train_test['Ticket'].str.split().str[0]	2	2
df1.select_dtypes(include=[np.number]).columns	2	2
trainSet['Age'].hist()	2	2
dfTrain.set_index(['PassengerId'],inplace=True)	2	2
train['Family']=train['SibSp']+train['Parch']+1	2	2
combined_train_test['Fare'].groupby(by = combined_train_test['Pclass']).mean().get([2]).values[0]	2	2
ResultsDF.sort_values(by=['Accuracy'],ascending=False)	2	1
test.fillna(test.mean())	2	2
MLA_compare.sort_values(by=['MLA Test Accuracy Mean'], ascending=False, inplace=True)	2	2
data['Alone'] = np.where(data.FamilySize>1,0,1)	2	2
"train_df[[""SibSp"",""Survived""]].groupby([""SibSp""],as_index=False).mean().sort_values(by=""Survived"",ascending=False)"	2	2
output['Parch'] = data['Parch'] / 6	2	2
train['Age']=train['Age'].fillna(train['Age'].median())	2	2
"combdata[""Embarked""].isnull().sum()"	2	2
df['Guess'] = make_guesses(df)	2	1
"test_df.drop([""AdultF"",""AdultM"",""Girl"",""ChildSex""], axis=1, inplace = True)"	2	2
submission.PassengerId.astype(int)	2	2
df['Title'].value_counts()[:9]  # [df['Title'].value_counts() > 1]	2	2
train_df.fillna(train_df.mean())	2	2
train_data.groupby(['Title'])[['Survived']].count()	2	2
df.Name.head()	2	1
train['CategoricalAge'] = pd.cut(train['Age'],5)	2	2
merged.loc[:, ['Pclass', 'Sex', 'Embarked', 'Cabin', 'Title', 'Family_size', 'Ticket']] = merged.loc[:, ['Pclass', 'Sex', 'Embarked', 'Cabin', 'Title', 'Family_size', 'Ticket']].astype('category')	2	2
titanic_final.info()	2	1
titanic_df['IsHusband'].loc[ titanic_df['SibSp'] == 0 ] = 0	2	2
df_test.loc[:, ['PassengerId']]	2	1
"test.drop([""Age""], axis = 1)"	2	2
DataFile['Fare'].fillna(DataFile['Fare'].median(), inplace=True)	2	2
"test_df.drop(""PassengerId"", axis=1).copy() # test data (kaggle)"	2	2
df_submit['Survived'] = test_label	2	2
"train_df[[""Title"",""Survived""]].groupby([""Title""],as_index=False).mean()"	2	2
train_df.describe().transpose()	2	2
train_df_final['Survived']	2	2
data.loc[mask_w, 'Woman'] =1	2	1
tr2['LName'] = tr2.apply(lambda r:lnameMap[getLName(r['Name'])], axis=1)	2	2
test_df['SmallFamily'] =   test_df[['FamilySize']].apply( (lambda x: int(int(x) >= 2 and int(x)<=4) ), axis=1)	2	2
df.loc[ (df['Age'] > 32) & (df['Age'] <= 48), 'Age'] = 2	2	2
"train[""Title""].head()"	2	2
df.loc[idx_nan_age,'Age'].loc[idx_nan_age] = df['Title'].loc[idx_nan_age].map(map_means)	2	2
X_data.copy(deep=True)	2	1
df_train['Sex'] = df_train['Sex'].map(genders)	2	2
train['Categorical_Fare'] = data['Categorical_Fare'][:len(train)]	2	2
train4_X.head()	2	1
df['Gender'] = df['Sex'].map({'female':0,'male':1}).astype(int)	2	1
df.loc[ (df['fare_pp'] > 8.05) & (df['fare_pp'] <= 11.73), 'fare_pp_cat'] = 2	2	2
train.head(5) # Ticket & Cabin variables are alphanumeric	2	2
test.replace(to_replace=np.nan, value=0, inplace=True)	2	2
dfFull['Embarked'] = dfFull['Embarked'].map({'S': 0, 'Q': 1, 'C': 2}).astype(int)	2	2
full.ix[(full.TPP==4)&(full.Sex=='male')&(full.Pclass!=3),'TPP']=2	2	2
train_x['Title'] = train_x['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don',                                             'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],                                             'Rare')	2	2
df_train['Title'].value_counts(), df_test['Title'].value_counts()	2	2
df['Sex'] = df['Sex'].astype('int8')	2	2
all_data.iloc[train.shape[0]:,:]	2	2
df_data['Title'] = df_data['Title'].replace(['Mlle', 'Ms','Mme'],'Miss')	2	2
"X_test.drop(""Age"", axis = 1)"	2	2
test['Age'] = data['Age'][891:]	2	2
"ax[0].set_ylabel(""Count of Parch"")"	2	2
samp_df.head()	2	2
df_test.loc[(df_test.Sex == 'female')&((df_test.Pclass == 1)|(df_test.Pclass == 2)|((df_test.Age >= 50)&(df_test.Age < 70)))]	2	1
"df['is_female'] = np.where(df['Sex']==""female"", 1, 0)"	2	2
df.loc[(df.Age.isnull())&(df.Initial=='Master'),'Age']=5	2	2
train_data.select_dtypes(['category']).columns	2	1
combined_features['Singleton'] = combined_features['FamilySize'].map(lambda s: 1 if s == 1 else 0)	2	1
"train_set[""Fare""]     = train_set[""Fare""].fillna(train_set[""Fare""].median())"	2	2
df_train.iloc[train_idx],y[train_idx]	2	1
classifiers.append(LogisticRegression(random_state=random_state))	2	2
x.append(i)	2	1
"titanic_train[""NameLength""] = titanic_train[""Name""].apply(lambda x: len(x))"	2	2
train.loc[train_index]	2	2
DataFile['AgeBin'] = label.fit_transform(DataFile['AgeBin'])	2	2
"combined_train_test['Last_Name'].fillna(combined_train_test['Name'].str.split(""\."").str[1].str.strip())"	2	2
train.loc[train[train['Age']<13].index, 'TitleInt'] = 5	2	2
data['Cabin'] = data['Cabin'].map(cabin_mapping)	2	2
dfTrain['Survived'].groupby(pd.qcut(dfTrain['Fare'], 5)).mean()	2	1
train['fare_pp_cat'] = pd.qcut(x=train['fare_pp'], q=5)	2	2
df.loc[df['Family_size']==1, 'isAlone'] = 1	2	2
test_df.drop(['SibSp','Parch'], axis=1, inplace=True)	2	2
combine['EmbarkedTemp'] = combine['Embarked'].map({0: 'S', 1: 'Q', 2: 'C'})	2	2
train.iloc[:,1:].values	2	2
train4.drop('Ticket', axis=1, inplace=True)	2	2
plt.boxplot(df['normal'], whis='range')	2	2
dataset['FamilySize'] = dataset['SibSp'] + train_set['Parch']	2	2
test_df['Family'] =  test_df['Parch'] + test_df['SibSp']	2	2
train.set_value(index,'Mrs',1)	2	2
data['Cabin'] = data['Cabin'].apply(lambda x: replacement.get(x))	2	2
important_features.sort_values(ascending = True)	2	2
df.describe(include=['O'])	2	2
test_data_1.isnull().any()	2	1
results.append(result)	2	2
titles.append('mrs')	2	1
df_test['Family'] = df_test['Family'].apply(lambda x : FamilySize(x))	2	2
df['Age_' + str(idx)] = np.where((df['Age'] > previous_age_group) & (df['Age'] <= age_group), 1, 0)	2	1
test.loc[test['Embarked']=='Q', 'Embarked'] = 1	2	2
test.drop(['Parch', 'SibSp'], axis=1)	2	2
stack_score.mean(),stack_score	2	2
df.iloc[:,1:]	2	1
test_data.assign(Title=titles_test)	2	1
big_X['Age'].value_counts().to_frame()	2	2
df['family_size'] = df['Parch'] + df['SibSp']	2	2
DataFile.loc[DataFile['PassengerId'] == passID, 'Family_Survival'] = 1	2	1
DataFile.loc[DataFile['PassengerId'] == passID, 'Family_Survival'] = 0	2	1
data['Family_Size'] = data['Parch'] + data['SibSp'] + 1	2	2
df_train.drop('Embarked', axis=1)	2	2
"Ttest[""Fare""].median()"	2	2
df2.dropna(axis = 0, how = 'any')	2	1
df2['Survived'].values.reshape(-1,1)	2	2
data.loc[pd.isna(data[self.to_predict_col[0]]), self.train_cols]	2	2
"model.add(Dense(40, activation=""relu""))"	2	1
dataset.loc[(dataset['Fare']>17) & (dataset['Fare']<=30), 'Fare']=1,	2	2
df[['Family', 'Survived']].groupby(['Family'], as_index=False).mean()	2	1
missing_age_test['Age'] = missing_age_test[['Age_GB', 'Age_LRF']].mean(axis = 1)	2	2
tr.shape	2	1
params['X_train'],	2	1
df.loc[df['Cabin_Number'].isna(),'Cabin_Number'] = 0	2	1
df_analysis.tail(5)	2	1
df.groupby(['Embarked','Age'])['PassengerId'].count()	2	2
one_hot_test.isnull().sum().sort_values(ascending=False)	2	1
"train.drop([""Age""], axis = 1)"	2	2
df_age_nan.drop(['Age', 'Survived'], axis=1).values.astype(float)	2	2
survived_summary.mean().reset_index()	2	1
temp_df.shape[0]>0:	2	2
train['Name']:	2	2
df['Grpmean'] = df.groupby([x]).transform('mean')[y].values	2	1
df_train['TicketNumber'] = df_train['Ticket'].apply(lambda x: Ticket_Number(x))	2	2
test_df.drop('Pclass', axis=1, inplace=True)	2	2
titanic_df['SmallFamily'] =   titanic_df[['FamilySize']].apply( (lambda x: int(int(x) >= 2 and int(x)<=4) ), axis=1)	2	2
"train_df[""Age""].dropna().median()"	2	2
testset1.loc[testset1['Embarked']=='Q','Embarked'] = 1	2	2
data['Age'][np.isnan(data['Age'])] = age_null_random_list	2	2
name_title.append(re.findall(title_pattern, name)[0])	2	1
test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]	2	2
trainSTD2['SexM'] = trainSTD[:,7]	2	1
titanic['Sex'] = titanic['Sex'].apply(trans_sex)	2	1
"testData[['Pclass', ""Age"", ""Sex"", ""SibSp"", ""Parch"", 'Fare', 'Embarked']]"	2	1
"titanic_train.loc[titanic_train[""Age""].argmax()]"	2	1
X_test.head(0)	2	2
df.drop(['Survived'], axis=1)	2	2
"test.loc[test[""Title""] == ""Major"", ""Title""] = 'Rare Title'"	2	2
"test_df.drop(""Cabin"", axis=1, inplace=True)"	2	2
data['Age'].fillna(data['Age'].median(), inplace = True)	2	2
sns.boxplot(outlier).set_title('%s' %outlier.name + title, fontsize = title_size)	2	2
test_data['Age'].mean()	2	2
test.sample(5)	2	2
outcome.append(accuracy)	2	2
"titanicTest[""PassengerId""],"	2	1
"new_data_test[""Age""].fillna(new_data_test[""Age""].mean(), inplace=True)"	2	2
Ticket.sample(10)	2	1
train.join(title_dummies_train)	2	2
age_train.dropna(axis=0)	2	1
train.drop(['Parch', 'SibSp'], axis=1)	2	2
submission.to_csv('./my_first_submission.csv', index=False)	2	2
Y_pred.shape	2	2
data.drop(['Survived'], axis=1), data['Survived']	2	2
dfFull.corr().Age	2	2
dt[1].split(' ')	2	2
train[['Pclass', 'Survived']].groupby(['Pclass']).count().sort_values(by='Survived', ascending=False)	2	2
df_train.groupby(['Sex', 'Survived']).size()	2	2
"testing.loc[testing[""Title""] == ""Other"", ""Title""] = 4"	2	2
dataset['Salutation'] = dataset['Salutation'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	2	2
sns.boxplot(df['Survived'], df['Fare']);	2	2
test_df['Fare'] = train_df['Fare'].astype(int)	2	2
df_test['Age'][i] = 5	2	1
test_data.drop('PassengerId',axis=1).copy()	2	2
dataset.loc[ dataset['Age'] > 64, 'Age' ] = 4	2	2
df_test['Age'] = df_test.groupby(['Sex','Pclass','Title'])['Age'].apply(lambda x: x.fillna(x.median()))	2	2
train_final.to_csv('./data/train_final.csv', index=False)	2	2
"X_test.drop(""Name"", axis = 1)"	2	2
np.round(specificity_score*100, 2)	2	2
df['AgeCat']=df['AgeFill']	2	2
validation.loc[mrs_mask, 'Age'] = validation.loc[mrs_mask, 'Age'].fillna(validation[validation.Title == 'Mrs'].Age.mean())	2	2
test['Fare']	2	2
X_train.isnull().any()	2	1
X_test.drop('Survived', axis=1, inplace=True)	2	2
test_original.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)	2	2
train[['FamSize', 'Survived']].groupby(['FamSize'], as_index=False).mean()	2	1
"X['Embarked'] = X['Embarked'].fillna(""S"")"	2	2
train[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False)	2	2
"test.drop(""Name"", axis=1, inplace=True)"	2	2
"train.Embarked.fillna(""S"",inplace=True)"	2	2
"train[""AgeGroups""][x] == ""Unknown"":"	2	2
"training.loc[training[""Title""] == ""Other"", ""Title""] = 4"	2	2
full.drop('Name',axis=1,inplace=True)	2	2
test.loc[v[i], 'Friends'] = 1	2	2
train['Male_Friends_Survived'] = 0	2	2
train['Age'].dropna()	2	2
dataset.loc[dataset['Fare']<=17, 'Fare']=0,	2	2
df_train['Family'] = df_train['Family'].apply(lambda x : FamilySize(x))	2	2
merged.Title.replace({'Mlle':'Miss', 'Ms':'Miss', 'Mme':'Mrs'}, inplace = True)	2	2
test.drop(['Embarked'],axis=1,inplace=True)	2	2
temp_df.assign(Deck = deck_series.values)	2	1
"test.loc[test[""Title""] == ""Dr"", ""Title""] = 'Rare Title'"	2	2
test_df.drop(drop_elements, axis = 1)	2	2
test_data[['PassengerId']].astype('int')	2	1
"combdata.drop(labels = [""PassengerId""], axis = 1, inplace = True)"	2	2
full.drop(['SibSp','Parch','Family'],inplace=True,axis=1)	2	2
test_data.head(2)	2	2
"my_solution.to_csv(""my_solution.csv"", index_label = [""PassengerId""])"	2	2
all_data.groupby(['Title', 'Pclass'])['Age']	2	2
df_train_ml.dropna(inplace=True)	2	2
"test_set.loc[test_set[""Parch""] == 9, ""Parch""] = 6"	2	2
sml.feature.drop(['Ticket'])	2	2
full.loc[(full.Title=='Mr')&(full.Pclass==1)&(full.Parch==0)&((full.SibSp==0)|(full.SibSp==1)),'MPPS']=1	2	2
train3.corr()	2	2
train[0]	2	2
"test.loc[test[""Title""] == ""Ms"", ""Title""] = 'Miss'"	2	2
acc_svc.std(), acc_knn.std(), acc_log.std(),	2	2
dataset.loc[(dataset['Sex']==0) & (dataset['Embarked']==0), 'Gender_Embarked'] = 0	2	2
nwdata1.head()	2	1
test_x.copy(True)	2	2
"X[""Embarked""] = X[""Embarked""].map(Embark_map)"	2	2
variable.describe()	2	2
test_filtered.Title.fillna(4, inplace=True)	2	2
titanic_df.loc[ titanic_df['Fare'] <= 7.91, 'Fare'] = 0	2	2
df_test['Age'] = df_test[['Age','Sex','Pclass']].apply(ImputeAge,axis=1)	2	1
test_df.loc[(test_df['Age'] > 64), 'Age'] = 4	2	2
train1['Sex'] = le.fit_transform(train1['Sex'])	2	2
data.head()['Cabin']	2	2
df_test_ml['PassengerId']	2	2
new_data_test['Age'].fillna(new_data_test['Age'].mean(), inplace=True)	2	2
"train[[""Age"", ""Survived""]].groupby(['Age'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	2	2
df_train.groupby(['Family']).mean()	2	2
tr['Title'] =tr['Title'].replace('Mlle',2)	2	1
selection.transform(X_train)	2	2
train.drop('Name',axis=1,inplace=True)	2	2
count[0]	2	1
train_dataset.groupby('Title').sum()['Survived']	2	1
clean_train.head()	2	2
pd.pivot_table(full,index=['Cabin'],values=['Survived']).plot.bar(figsize=(8,5))	2	2
train_df['Age'].copy().dropna().astype(int)	2	2
df_test['Family'] =  df_test['Parch'] + df_test['SibSp']	2	2
"training[""Cabin""].fillna(training.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	2	2
data.Embarked.shape	2	1
dataset.loc[(dataset.Age < 16),'Sex'] = 'Child'	2	2
np.sum(cnf_matrix[:,1])	2	1
np.round(clf.predict(X_test))	2	2
train['Ageband']=pd.cut(train['Age'],5)	2	2
full.loc[full.Age<=16.136,'AgeCut']=1	2	2
titanic_df.drop(['PassengerId','Name','Ticket'],axis=1)	2	2
td_survived.groupby('Sex').size()	2	2
classifier.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))	2	1
train['Sex'][train['Sex']=='male'].count()	2	2
df_train.drop(features_remove, axis=1)	2	2
final_gain.append(np.sum(measure_p)/m)	2	1
"test.loc[test[""Title""] == ""Don"", ""Title""] = 'Rare Title'"	2	2
dfTrain.head(1).info()	2	2
"train.select_dtypes(exclude = [""object""]).columns"	2	1
"train[[""Title"", ""Survived""]].groupby(['Title'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	2	2
dfTest[['Pclass','Sex','ParchCat','Embarked','Fare','TitleCat']]	2	2
"dataset[""Title""] = dataset[""Title""].replace('Mlle', 'Miss')"	2	2
test.drop('Survived',1).values	2	2
df.SibSp.astype('category')	2	2
all_data['Pclass'] = all_data['Pclass'].astype(str)	2	2
MLA_compare.loc[row_index, 'MLA Train Accuracy'] = round(alg.score(x_train, y_train), 4)	2	2
scores[1]*100	2	1
X_train.drop(['HasCabin','Embarked'], axis=1)	2	2
le.transform(concat.Title)	2	2
full.shape,full_dummies.shape	2	2
test_data.drop(columns=['Ticket', 'PassengerId', 'Cabin'])	2	2
train['officer'] = 0	2	2
full_title.apply(impute_title)	2	2
rst.astype(np.int32).reshape(m,1)	2	2
df_study_svc.loc[ind, 'mean_test_score']	2	1
df.loc[ df.Cabin.isnull()==True,'Cabin'] = 0.5	2	2
raw_data_1.replace({'Sex': sex_mapping, 'Embarked': embark_mapping}, inplace=True)	2	2
train['Name'].head(10)	2	2
row['Embarked']	2	2
X_test[['Pclass','Sex','Age','SibSp','Parch','Fare', 'Embarked']]	2	2
test.Fare.fillna(test.Fare.value_counts().idxmax(),inplace=True)	2	2
submission['PassengerId'] = test.PassengerId	2	2
train_data[['Pclass', 'Survived']].groupby('Pclass').mean().Survived.plot('bar')	2	2
accuracies.append(accuracy_score(testy, pred))	2	1
train['FamilySize'] = train['Family']	2	2
"related_people.set_index(""PassengerId"",inplace=True)"	2	1
"ALL_DATA[""Title""].unique()"	2	1
X_dict.sum(axis=0)	2	1
axs[1].bar(x=np.arange(len(importances)), height=importances['importance'])	2	2
df_group.drop(idx)['PassengerId'].tolist()	2	1
training.drop(['PassengerId'], axis=1)	2	2
X_train.keys():	2	2
data['Name'] = StandardScaler().fit_transform(data['Name'].values.reshape(-1, 1))	2	2
test.drop('Survived', axis=1).values	2	1
"combdata[""Fare""] = combdata[""Fare""].fillna(combdata[""Fare""].median())"	2	2
test.drop(['Name', 'Cabin', 'Ticket'], axis=1)	2	2
my_submission.to_csv('submission.csv',index=False)	2	2
X_train.columns.values	2	2
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['ParchBinary', 'Female', 'MasterMiss'],                     columns=['Embarked', 'Pclass'],                     aggfunc=np.mean)	2	2
np.mean(women_only_stats.astype(np.float))	2	2
test_df['IsHusband2'] = test_df['Male2']	2	2
combine_df.head(3)	2	2
"test_set[""Fare""] = test_set[""Fare""].fillna(test_set[""Fare""].median())"	2	2
room.append('Unknown')	2	1
train_data['Age'] = imp.fit_transform(train_data['Age'].values.reshape(-1,1)).reshape(-1)	2	2
Ttest.dropna(axis = 0, how = 'any')	2	2
df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']]	2	2
all_data['Title'] = all_data['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	2	2
kaggle.shape	2	1
"plt.rcParams[""axes.labelsize""] = 15"	2	2
titanic_data['Cabin'] = titanic_data[['Cabin', 'Pclass']].apply(cabin_approx, axis=1)	2	2
data['PassengerCat']=data['PassengerCat'].astype(int)	2	1
data.loc[(data['Age'] > 16) & (data['Age'] <= 26),'Age'] = 1,	2	2
test['Title'] = test['Name'].map(getTitle)	2	2
train['isAlone'] = 0	2	2
df_test.drop(['Ticket'], axis = 1)	2	2
full.ix[whole_index]	2	2
"Ttest.loc[Ttest[""Embarked""] == ""S""]"	2	2
"train.loc[:, ""Survived""]"	2	2
train.loc[train['Embarked'].isnull()]	2	2
X_train.loc[X_train['Sex'] == 'female', 'Sex'] = 1	2	2
full_data['Age'].mean()	2	2
df.Pclass.astype('category')	2	2
df.rename(columns={0: 'Grades'}, inplace=True)	2	2
le.transform(df_train[F])	2	1
"df[""Deck""][df[""Deck""] == ""F""] = 6"	2	2
df['Fare_scale'] = scaler.fit_transform(df['Fare'].values.reshape(-1,1), fare_scale)	2	2
"model.add(Dense(32, activation=""relu""))"	2	2
x['Sex']	2	2
ftest['Sex'] = ftest['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	2	2
test.drop('C',axis=1)	2	2
data_df['FareBin_Code'] = label.fit_transform(data_df['FareBin'])	2	2
dataAgeNull.append(dataAgeNotNull)	2	2
y.append(np.mean(cvs(tr, df_train, out_train, cv = 10)))	2	1
row['Age'] < 64:	2	2
combine_df['titlename'] = combine_df['titlename'].replace(['Don','Dr','Mme','Major','Lady','Sir','Mlle','Col','Countess','Jonkheer','Dona'],'HighClass')	2	2
df['Age_scaled'] = scaler.fit_transform(df['Age'].values.reshape(-1,1), age_scale_param)	2	2
data_all['Sex'] = data_all['Sex'].map(sex_mapping)	2	2
final_test['Survived'] = log_clf.predict(final_test[Selected_features])	2	2
self.losses.append(logs.get('loss'))	2	2
train_data['Survived'].value_counts()	2	2
df.loc[(df.Age.isnull())&(df.Initial=='Mrs'),'Age']=36	2	2
test_df.to_csv('test-wrangled.csv',index=False)	2	2
dataset['Title'] = dataset['Title'].replace(['Mlle','Ms'], 'Miss')	2	2
"data.describe(include=""all"")"	2	2
df_test[['PassengerId', 'Survived']].to_csv('1st_dec_tree.csv', index=False)	2	2
df['Fare_bin']=np.nan	2	2
data_raw.drop(drop_column, axis=1, inplace=True)	2	2
train.loc[mr_mask, 'Age'] = train.loc[mr_mask, 'Age'].fillna(train[train.Title == 'Mr'].Age.mean())	2	2
data_cpy.head()	2	1
dataset['Cabin']=dataset['Cabin'].str[:1]	2	2
test_set.head(10)	2	2
"new_data[""Name""] = new_data[""Name""].str.replace(""Capt"",""Mr"")"	2	1
df.groupby(['Sex','Pclass'])['Fare'].mean().unstack()	2	1
train['Family_scaled'] = (train.Family_Size - train.Family_Size.mean())/train.Family_Size.std()	2	2
trainSTD2['Pclass2'] = trainSTD[:,10]	2	1
"dataset[""Title""] = dataset[""Title""].map(title_mapping)"	2	2
importances[0:15].plot.bar()	2	2
df['Fare'] = categories.cat.codes	2	2
X['Cabin'] = X['Cabin'].apply(extract_cabin)	2	2
"training[""Age""].fillna(training.groupby(""Title"")[""Age""].transform(""median""), inplace=True)"	2	2
int_id.append(int(i))	2	1
titanic_train_data_X.shape	2	2
data['Alone'] = data['Alone'].astype(int)	2	2
dfTrain['Survived'].groupby(dfTrain['Cabin_Letter']).mean()	2	1
titanic_df.groupby('Sex').size()	2	1
df.Fare.fillna(df.Fare.mean(), inplace=True)	2	2
train_x['Title'] = train_x.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
"DataSetTrain[""Survived""].value_counts().nlargest(10)"	2	1
test['Categorical_Fare'] = data['Categorical_Fare'][len(train):]	2	2
"df.rename(index = {1: ""Life"", 0: ""Death""}, inplace = False)"	2	1
"ax[0].set_title(""Feature importance in Random Forest"");"	2	1
mpl.rcParams['figure.figsize'] = (sizex,sizey)	2	2
combine.loc[combine['CommonSurname']==0, 'Surname'] = 'Rare'	2	2
submission.to_csv('submission.csv', columns=['Survived'])	2	1
train.groupby(['Parch','Survived']).count()['Pclass']	2	2
dataset1.head()	2	2
test.Pclass.astype(str)	2	2
train.insert(0, 'Age', front)	2	2
test_df.drop('Person', axis=1, inplace=True)	2	2
test_df.drop(['PassengerId'], axis=1, inplace=True)	2	2
train['Ticket_Lett'] = train['Ticket_Lett'].apply(lambda x: str(x))	2	2
y_test.head(5)	2	2
train['EmbarkedInt'] = train['Embarked'].map(embark_to_int)	2	2
original.sample(5)	2	1
"train[[""Sex"", ""Survived""]].groupby(['Sex']).mean().sort_values(by='Survived', ascending=False)"	2	2
axes[1].set_title('Class 2')	2	1
df.to_dict(orient='series')	2	1
df.CorrectGuess.mean()	2	1
df_test.iloc[:,0:1]	2	1
Train_Master.drop('Cabin', axis=1, inplace=True)	2	1
"df_test.drop(""PassengerId"", axis = 1).copy()"	2	2
"data[""Age""].hist(bins=15, density=True, stacked=True, color='teal', alpha=0.6)"	2	1
ds.Fare.mean()	2	1
train_data_orig.shape	2	2
df['Title'].replace(['Ms','Mlle'],'Miss',inplace=True)	2	2
"output.to_csv(""submission.csv"", index=False)"	2	1
train['Title'] = train['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	2	2
X.Cabin.fillna(-1,inplace=True)	2	1
full_data.Age.mean()	2	1
plt.boxplot(train[~train.FamilySize.isnull()]['FamilySize'],showmeans=True, meanline=True)	2	2
dfres.to_csv('results.csv')	2	2
test_data_orig.head()	2	2
df.loc[ (df.Age.isnull()) & (df.Title == 'Mr') ,'AgeFill'] = mean_ages[2]	2	2
test_data_orig['Survived'] = 0	2	2
"new_data[""Name""] = new_data[""Name""].str.replace(""Rev"",""Mr"")"	2	1
num_encoded_train_data.head()	2	1
train.drop(['PassengerId', 'Ticket'], axis=1, inplace=True)	2	2
reduce_dim_param_grid.items():	2	1
train_data.set_index('PassengerId', inplace=True)	2	2
dataset1.loc[train_index],label.loc[train_index],dataset1.loc[test_index],label.loc[test_index]	2	2
train.drop(['Name'],axis=1)	2	2
to_test['Title'] = to_test['Title'].replace('Mme', 'Mrs')	2	2
test['Salutation'] = test['Salutation'].replace('Mme', 'Mrs')	2	2
train_dataset.corr()	2	2
data.drop(['PassengerId', 'Survived'], axis=1)	2	2
df.Age.astype(int)	2	2
data['CabinCode'] = data['Cabin'].str[0]	2	2
dict_clf.keys():	2	2
train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']].corr()	2	2
"df[""Master""] = df[""Name""].apply(lambda x: x.count(""Master.""))"	2	2
"temp[[""FamilySize"", ""Survived""]].groupby(['FamilySize'],as_index=False).mean()"	2	2
test_ticket.groupby(['Ticket'])	2	2
"train.loc[train[""Title""] == ""Rev"", ""Title""] = 'Rare Title'"	2	2
train['fare_bin'] = pd.cut(train.Fare,bins,right=False)	2	2
train_df['Parch']	2	2
port_class_groups.groupby('Survived').count()*100/port_class_groups.count()	2	1
"train.groupby(""Title"")[""Age""].mean()"	2	1
Output.shape[0]	2	1
df.drop('Cabin', axis=1)	2	2
training_df.ix[:, training_df.columns == 'Survived']	2	2
"test_set.loc[test_set[""Sex""] == ""female"", ""Sex""] = 1"	2	2
sns.boxplot(x='Pclass',y='Age',data=test,palette='winter')	2	2
pclass_dummies_train.drop(['Class_3'], axis=1, inplace=True)	2	2
"dataset.loc[ dataset['Name_length'] <= 23, 'Name_length'] 						            = 0"	2	2
train.loc[miss_mask, 'Age'] = train.loc[miss_mask, 'Age'].fillna(train[train.Title == 'Miss'].Age.mean())	2	2
in ['Countess', 'Mme','Mrs']:	2	2
train_df_female_sex.groupby(age_groups_female)['Survived'].mean()	2	2
train_filtered['Cabin'] = np.where(train_filtered['Cabin'].isnull(), 0, 1)	2	2
train_df.drop('Male', axis=1, inplace=True)	2	2
df_train['Family'] =  df_train['Parch'] + df_train['SibSp']	2	2
"train.drop([""PassengerId"", ""Survived""], axis=1).values"	2	1
titanic_df_test.head()	2	1
X['Deck'] = X['Cabin']	2	2
data['Fare'] = data['Fare'].fillna(data['Fare'].median())	2	2
dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0, 'Child': 2} ).astype(int)	2	2
df.loc[df['fare_pp'] <= 7.73, 'fare_pp_cat'] = 0	2	2
test_df['Gender'] = test_df['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	2	2
data.hist(figsize=(12,8))	2	2
test.join(title_dummies_test)	2	2
notNullData.drop('PassengerId',1)	2	1
df.corr()['Survived'].sort_values()	2	2
a.mean()	2	2
dfTrain.groupby('Pclass').Survived.mean().plot(kind='bar')	2	2
"combdata[""Fsize""] = combdata[""SibSp""] + combdata[""Parch""] + 1"	2	2
Age.mean() + np.random.randint(-2,2)	2	1
test.drop(['Name','Ticket'], axis=1)	2	2
train_df.to_csv('train-wrangled.csv',index=False)	2	2
df_full['IsAlone'] = 0	2	2
dataset['Age'] = df.transform(lambda x: x.fillna(x.mean()))	2	2
"plt.rcParams[""figure.figsize""] = (15,2)"	2	1
data_df.isnull().sum()	2	2
ax[1].set_yticks(range(0, 110, 10))	2	2
test_df.Fare.fillna(test_df.Fare.mean(), inplace=True)	2	2
pd.isnull(df[col])	2	2
dfresult.to_csv('submissions.csv')	2	1
combine_df.select_dtypes(['object']).columns	2	2
scaler.transform(numeric_data_complete)	2	1
"train[""Embarked""].fillna(0, inplace=True)"	2	2
dataset.loc[dataset['FamilySize'] == 0, 'Family'] = 'alone'	2	2
Data.reset_index(inplace=True, drop=True)	2	1
train_df.columns.values[5]	2	1
"model.add(Dense(128, activation=""relu"", kernel_initializer=""he_normal""))"	2	1
preprocess_pipeline.transform(test_data)	2	1
"in [""Title"",""Cabin_type""]:"	2	2
"train['Embarked']=train['Embarked'].fillna(""S"")"	2	2
dataset.loc[dataset['Survived'] != -777, 'Survived'].values	2	2
"test_data.loc[np.isnan(test_data[""Fare""]),""Fare""] = test_data[""Fare""].median()"	2	2
"combdata[""Title""] = pd.Series(salutation)"	2	2
test_df['IsAgeNaN'].loc[ test_df['Age'].isnull() ] = 1	2	2
combine[1].copy()	2	1
dataset.Embarked.fillna('C', inplace=True)	2	2
Testdata['Sex'] = number.fit_transform(Testdata['Sex'].astype('str'))	2	2
train['fare_cat'] = pd.qcut(x=train['Fare'], q=5)	2	2
processed_data.loc[pd.isnull(processed_data['family_size']), 'family_size'] = 1	2	2
trainSTD2['Age'] = trainSTD[:,0]	2	1
all_data['FamilyNum'] = all_data['SibSp'] + all_data['Parch'] + 1	2	2
tf.abs((y - y_pred_sigmoid))	2	1
train_features.head(10)	2	2
train_data.drop(['Survived'], axis = 1)	2	2
rates.reset_index(inplace=True)	2	1
"df[""Embarked""][df[""Embarked""] == ""C""] = 1"	2	2
test['Age'].fillna(test.groupby('Title')['Age'].transform('median'), inplace=True)	2	2
df.isnull().sum() / len(df)	2	2
np.dot(features_array, theta_gradient_descent)	2	1
submission.to_csv('Submission',index=False)	2	2
df_full.loc[df_full['Age'] >= 10, 'Categ_Age'] = 1	2	2
pd.isnull(train_df).sum()	2	2
imputer.transform(X)	2	1
test['Cabin'].fillna('No Cabin',inplace=True)	2	2
df_data.groupby('Title')['Age'].median().values	2	2
train_df['Honoric'].value_counts().plot(kind='bar', fontsize=12, figsize=(8, 3))	2	1
row['Age'] < 48:	2	2
train_data['Title'] = train_data['Title'].map({'Master':0, 'Miss':1, 'Mr':2, 'Mrs':3, 'Others':4})	2	2
full['Title']=full.apply(girl,axis=1)	2	2
combine_df['Embarked'] = combine_df['Embarked'].fillna(combine_df['Embarked'].value_counts().idxmax())	2	2
df_all.head(10)	2	1
full['Fare'] = full['Fare'].astype(int)	2	1
data['SibSp'] = data['SibSp'].apply(lambda x: replacement.get(x))	2	2
"train_data['Age'][((train_data.SibSp == train_data.iloc[i][""SibSp""]) & (train_data.Parch == train_data.iloc[i][""Parch""]) & (train_data.Pclass == train_data.iloc[i][""Pclass""]))].median()"	2	2
prep.transform(X_val)	2	1
np.round(train_accuracy*100, 2)	2	2
df_train2.to_csv('train-age-predicted.csv')	2	2
df.loc[(df.Cabin.isnull()),'Cabin'] = 'N'	2	2
data['SharedTicket'] = np.where(data.groupby('Ticket')['Fare'].transform('count') > 1, 1, 0)	2	2
test_df['Alone'] =   test_df[['FamilySize']].apply( (lambda x: int(int(x) ==1) ), axis=1)	2	2
dataset['Survived'].astype('int')	2	2
df[['last_name', 'first_name']] = df['Name'].str.split(',', expand=True, n=2)	2	2
Xd.shape[0]	2	1
"Ticket.append(i.replace(""."","""").replace(""/"","""").strip().split(' ')[0])"	2	2
test.loc[test[((test['Title']=='Miss')|(test['Title']=='Ms'))&(test['Age'].isnull())].index, 'Age'] = miss_age_mean	2	2
train_df.columns.values[12]	2	1
data['Cabin'].unique()	2	2
"output.to_csv(""output.csv"", index=False)"	2	2
submission['Survived'] = tree.predict(new_data_test)	2	2
"X_test.drop(""Ticket"", axis = 1)"	2	2
"train.to_csv(""submission_train.csv"", index=False)"	2	2
"dataset.loc[index, ""FamSurv""] = 1"	2	1
test['Fare'] = test_fare_trans.transform(f)	2	2
"name_with_type[0].replace("" "","""")"	2	2
"title_Dict.update(dict.fromkeys([""Mme"", ""Ms"", ""Mrs""], ""Mrs""))"	2	2
val_y.values[i][0]:	2	1
titanic_train_y.values	2	2
plt.hist(v1, alpha=0.7, bins=np.arange(-50,150,5), label='v1');	2	2
data1.head(10)	2	2
test.drop(['Ticket'], axis = 1, inplace = True)	2	2
df.isnull().sum(axis=0).reset_index()	2	2
concat['FamilySize'] = concat.SibSp.values + concat.Parch.values + 1	2	2
train2_df.isnull().sum()	2	1
train_data.drop(['Name'], axis=1)	2	2
train.groupby('Pclass')['Survived'].mean()	2	2
train.drop(['Survived_C','Cabin'], axis=1, inplace=True)	2	2
dfTrain[['Pclass','Sex','ParchCat','Embarked','Fare','TitleCat','Age','TicketCat']]	2	2
test.head(6)	2	2
"test_df[""Embarked""] = test_df[""Embarked""].fillna(""S"")"	2	2
data.loc[data['Fare'] <= 17, 'Fare'] = 0,	2	2
train['Embarked'].sort_values().unique()	2	1
"plt.style.use(""ggplot"")"	2	2
dataset.head(2)	2	2
test_data_orig.loc[:, 'PassengerId'],	2	2
train_df['Survived'] = survived	2	1
df['ticket_count'] = df.groupby('Ticket')['PassengerId'].transform('count')	2	2
df_full.loc[df_full['Age'] >= 65, 'Categ_Age'] = 7	2	2
df_test['Survived'] = df_test.Survived.apply(lambda x: int(x))	2	2
"titanic_df[""BoyClass""] = titanic_df[""Boy""].map(str) + titanic_df[""Pclass""].map(str)"	2	2
test_data['Age'] = test_data[['Age', 'Pclass']].apply(age_approx, axis=1)	2	2
model.add(Dense(output_dim=64))	2	2
X_train_analysis['AgeRange'] = X_train_analysis['AgeRange'].map(agerange_dict).astype(int)	2	2
test_ToPred.info()	2	1
model.add(Dense(units=1, activation='tanh'))	2	2
test_df['IsAgeNaN'].loc[ test_df['Age'].notnull() ] = 0	2	2
df_train.shape,df_target.shape	2	2
"train_df[[""Sex"",""Survived""]].groupby([""Sex""],as_index=False).mean().sort_values(by=""Survived"",ascending=False)"	2	2
"train_df[[""Sex"", ""Survived""]].groupby([""Sex""], as_index=False).mean()"	2	2
train[1042:1044]	2	1
df.loc[ df['Age'] > 64, 'Age']                      = 4	2	2
diff.describe()	2	2
data_one_hot.head()	2	1
full.loc[full.PassengerId==797,'Title']='Rarewoman'	2	2
train.set_value(index, 'Sex', 1)	2	2
dataset['Title'] = dataset.Title.fillna(0)	2	2
traindf['Age'] = imp.fit_transform(traindf[['Age']])	2	2
X_train_analysis['FareRange'] = X_train_analysis['FareRange'].map(farerange_dict).astype(int)	2	2
dfTest[['Pclass','Sex','ParchCat','Embarked','Fare','CabinCat']]	2	2
"train[""Title""].value_counts()"	2	1
titanic_data['Fare'] = titanic_data['Fare'].astype(int)	2	2
positions.append(1.0 + offset)	2	2
train_df.iloc[:,1:2].values	2	2
np.mean(train_scores_mean)	2	2
train4.drop('Name', axis=1, inplace=True)	2	2
data['EmbarkedCode'] = data['Embarked'].fillna('S').map({'S':0,'C':1,'Q':2})	2	2
models['set1']['cat_encode'] = 'OneHot'	2	1
train_data.groupby(['Cabin'])[['Fare']].mean()  # mean fare of each cabin class	2	2
raw_data.head(10)	2	1
"test_set[""Survived""].copy()"	2	2
data_p.loc[~data_p['Age'].isnull(), :].drop('Age', 1)	2	1
train_df.append(test_df, ignore_index=True)	2	2
df.loc[(df['Fare'] > 14.454) & (df['Fare'] <= 31), 'Fare']   = 2	2	2
axs[0].set_title('Training performance')	2	2
dataset['Title'] =  dataset.Name.map(lambda x : GetTitle(x))	2	2
train_df['calculated_fare'] = train_df.Fare/train_df.family_size	2	2
all_data['Type'] = [val if val in ['Mr', 'Mrs', 'Miss', 'Ms', 'Master'] else 'Others' for val in all_data['Type']]	2	2
values[0] == True:	2	1
student_df.set_index('Name')	2	2
df['AgeClass']=df['AgeFill']*df['Pclass']	2	2
testdat.info()	2	1
test_filtered.Fare.fillna(test_filtered.groupby('Pclass').Fare.transform('mean'))	2	2
df['isAlone'] = 0	2	2
ss[0]:	2	1
dataset['AgeRange'] = pd.cut(dataset['Age'], bins=age_bins, labels=age_labels, include_lowest=True)	2	2
ports.head()	2	2
train.loc[:,'Pclass':'Embarked'],	2	2
output.to_csv('output.csv', index=False)	2	2
"new_data[""Fare""] = new_data[""Fare""].astype(int)"	2	1
data.head()['Embarked']	2	2
titanic_train.shape	2	2
test_n['No_of_Passengers_on_Ticket'] = test_n.SibSp + test_n.Parch + 1	2	2
test_df['Title_num'].isnull().any()	2	1
combined_df['Prefix'].value_counts()	2	1
train_df['Age'].fillna(24, inplace=True)	2	2
train_df.drop(['Age','calculated_fare'],axis=1,inplace=True)	2	2
sml.feature.add('FamilySize', 1)	2	2
Testdata.drop(['PassengerId'], axis =1)	2	2
df_study_lr.loc[ind, 'estimator']	2	1
df.loc[ df['Age'] <= 16, 'Age'] = 0	2	2
model.add(Dense(1, init='normal', activation='sigmoid'))	2	2
dfFull['TitleCat']=dfFull['Title']	2	2
"train.loc[train[""Title""] == ""Col"", ""Title""] = 'Rare Title'"	2	2
X_train.fillna(np.nan)	2	2
df['Deck'] = df['Cabin'].astype(str).map(lambda x: substrings_in_string(x, cabin_list))	2	2
data['Family_Size'] = data['SibSp'] + data['Parch'] + 1	2	2
dfa_pred['Age'] = np.where(pd.isnull(dfa_pred['Age']), dfa_pred['Age_pred'] , dfa_pred['Age'])	2	2
test_set['Age'] = combine.iloc[len(train_set):]['Age']	2	2
"test.drop([""Name""], axis=1)"	2	2
dfTest[['Pclass','Sex','ParchCat','SibSpCat','Embarked','Fare','TitleCat','Age','TicketCat','CabinCat']]	2	2
df.Sex.astype(pd.api.types.CategoricalDtype(categories = ordered_sex, ordered = True)).cat.codes	2	1
full.groupby('Ticket'):	2	2
"titanic_train[""Age""].describe()"	2	1
X.loc[(X['Fare'] > 7.91) & (X['Fare'] <= 14.454), 'Fare'] = 1	2	2
data['Age_band'] = 0	2	2
data_all['Female'] = (data_all['Sex']==1)+0	2	2
test_df['Age'].fillna(21, inplace=True)	2	2
np.where(test_data.Fare != test_data.Fare, avg_test_fare, test_data.Fare)	2	2
np.dot(X,self.w)+self.b	2	2
ax.axes.get_yaxis().set_visible(False)	2	1
train_df.drop(['Embarked'], axis=1,inplace=True)	2	2
dataset.loc[(dataset['Age'] > 36.5) & (dataset['Age'] <= 45), 'Age'] = 6	2	2
df_test2.drop(['Survived'], axis=1)	2	2
concat.copy()	2	2
df.loc[mask_c, 'Child'] =1	2	1
"dataset.loc[dataset[""Fare""] <= 7.75, ""Fare""] = 0"	2	2
test.loc[v[i], 'Female_Friends_NotSurvived'] = temp_df[(temp_df.Sex=='female')&(temp_df.Survived==0)].shape[0]	2	2
sml.feature.replace('Title', 'Ms', 'Miss')	2	2
processed_data['title'] = processed_data['title'].replace('Mlle', 'Miss')	2	2
whole_training_df.ix[:, whole_training_df.columns != 'Survived']	2	2
features['feature'] = X_train.columns	2	2
train['Family']= train['Parch']+ train['SibSp']+1	2	2
train_data.drop('Ticket', axis=1, inplace=True)	2	2
"train.drop(""Fare"", axis=1, inplace=True)"	2	2
df.loc[df['Fare'] <= 7.9, 'fare_cat'] = 0	2	2
"pd.isnull(train[""Age""][x]):"	2	2
columns[1]	2	2
df_train.head(1)	2	1
df.AgeRange.astype('int64')	2	1
training_data.dtypes	2	2
tf.add(tf.matmul(W2, A1), b2)	2	2
"test.drop([""Cabin""],axis = 1)"	2	2
X_test.apply(lambda x: (x - np.min(x)) / (np.max(x) - np.min(x)))	2	2
sales_record['price'],	2	2
np.std(train_scores,axis=1)	2	2
test_df['Fare'].isnull().sum()	2	1
temp['Count'].plot(kind='bar', title='Ticket Head:Count')	2	2
test['Friends'] = 0	2	2
train['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)	2	2
train['Embarked'] = train['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)	2	2
train_acc_collect.append(train_acc)	2	2
df.drop(columns=['Cabin'])	2	2
notNullData.drop('Ticket',1)	2	1
ages.mean()	2	2
row['Sex'] == 'female' and row['Pclass'] == 2:	2	2
titanic.Embarked.fillna(most_embarked)	2	2
processed_data['title'] = processed_data['title'].replace('Ms', 'Miss')	2	2
"train['Title'] = train[""Name""].map(lambda name : name.split(""."")[0].split("" "")[-1])"	2	2
combined_train_test['Fare'].describe()	2	2
df['SibSp'].values.reshape(-1, 1),	2	1
df_train.drop(['AgeBand'], axis=1)	2	2
"combdata[""Age""].median()"	2	2
train_df_male_sex.groupby(age_groups_male)['Survived'].mean()	2	2
dataset[['Pclass','SibSp','Parch','Fare','Age']]	2	1
"test_df[""Age""] = test_df[""Age""].fillna(np.mean(test_df[""Age""]))"	2	2
val_score.append(accuracy_score(y_val,y_val_pred))	2	1
train_set['Age'] = combine.iloc[:len(train_set)]['Age']	2	2
df['Cabin'] = df['Cabin'].cat.codes	2	2
sml.feature.sum(new='FamilySize', a='Parch', b='SibSp')	2	2
titanic_df['IsHusband2'] = titanic_df['Male2']	2	2
train['ChildNotSurvived'] = 0	2	2
df['Fare'] = df.Fare.fillna(-0.5)	2	2
df_test.dropna()	2	2
train_data['Sex'] = LabelEncoder().fit_transform(train_data['Sex'])	2	2
train['Pclass'] = train['Pclass'].apply(str)	2	2
row['Age'] <= 5:	2	1
model.add(Dropout(0.7))	2	2
dataset.loc[(dataset['Sex']==1) & (dataset['Embarked']==1), 'Gender_Embarked'] = 5	2	2
df3_train.shape	2	2
train.set_value(index, 'Fare_costly',1)	2	2
trainingSTD['Survived']	2	1
full_data['Embarked'] = full_data['Embarked'].fillna('S')	2	2
train_df.drop(['Fare'], 1, inplace=True)	2	2
df_train.drop('Ticket', axis=1)	2	2
df['Date'] = ['December 1', 'January 1', 'mid-May']	2	2
all_data['FareBin'] = pd.cut(all_data.Fare, 10, labels=False)	2	2
titanic_df.drop(['Title'],axis=1,inplace=True)	2	2
combined_train_test['Fare'].groupby(by = combined_train_test['Pclass']).mean().get([1]).values[0]	2	2
row['Age'] <= 15:	2	2
train['Ticket'].describe()	2	2
x.items():	2	2
plt.hist(x=[train[(train.Survived==1)&(~train.FamilySize.isnull())]['FamilySize'],train[(train.Survived==0)&(~train.FamilySize.isnull())]['FamilySize']],stacked=True,color=['g','r'],label=['Survived','Dead'])	2	2
merged.drop(columns = ['Name', 'Age', 'Fare'], inplace = True, axis = 1)	2	2
x_collect.append(e)	2	2
"train_df.corr()[""Survived""]"	2	2
data_all['Title'] = data_all.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
submission.head(3)	2	2
train_data['SibSp'],	2	1
feature_imp_sorted_ada.head(top_n_features)['feature']	2	2
one_hot_X_test.copy()	2	1
input['Fare'].fillna(input['Fare'].dropna().median(), inplace=True)	2	2
test_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].median())	2	2
train_x.head(10)	2	2
new_train.append(df)	2	1
"dftest.isnull(), cmap=""viridis"", yticklabels=False"	2	1
"new_df.Pclass.astype(""int"")"	2	2
test_data['Age'][test_data['Age'].isnull()].index	2	2
concat.Title.values[concat.Title.isin(['Capt', 'Don', 'Major', 'Sir'])] = 'Sir'	2	2
df.Age.fillna(df_med_age)	2	2
"train['Ticket_Lett']=train['Ticket_Lett'].replace(""1"",1).replace(""2"",2).replace(""3"",3).replace(""0"",0).replace(""S"",3).replace(""P"",0).replace(""C"",3).replace(""A"",3)"	2	2
combine_df.tail(4)	2	2
data.drop(drop_column, axis=1, inplace = True)	2	2
"res.sort_values(by=""acc"", axis=0, ascending=False).iloc[:20, :]"	2	1
train_pclass_dummies.drop('Class3',axis=1,inplace=True)	2	2
train_df['Survived'].sum()	2	2
data_raw.info()	2	2
data_copy.loc[:,'Fare']=data_copy['Fare'].fillna(data_copy['Fare'].median())	2	2
X['Cabin'].str.contains('F')*1	2	2
test.loc[test['Embarked']=='C','Embarked']=1	2	2
df['Title'] = df['title']	2	2
X_test.fillna(np.nan)	2	2
df.loc[ (df.AgeFill<=10) ,'AgeCat'] = 'child'	2	2
train['Fare'] = scaler.transform(train['Fare'].values.reshape(-1, 1))	2	2
"cache[""A2""]"	2	1
df['SibSp']	2	2
all_data.drop('CabinNum4', axis=1)	2	2
"train.loc[train[""Family""] == 1, ""FamilySize""] = 'singleton'"	2	2
"traindata[""Sex""] = traindata[""Sex""].map({""male"":0,""female"":1})"	2	1
dmodel.add(Dense(150, activation = 'relu'))	2	1
student_df.reset_index()	2	2
concat_le.head(10)	2	2
X['Family'] = X['SibSp'] + X['Parch']	2	1
data_copy['Embarked']=data_copy['Embarked'].fillna('S')	2	2
data_train.loc[(data_train['Pclass']==3) & (data_train['Sex']=='female'),'Survived'].value_counts().plot(kind='bar',ax=ax2,label='female lower class',color='pink')	2	1
sub_svc['Survived'] = pred_all_svc	2	2
second_layer_train.head()	2	2
train.loc[v[i], 'Female_Friends_Survived'] = train[(train.Ticket==k)&(train.index!=v[i])&(train.Sex=='female')&(train.Survived==1)].Survived.count()	2	2
training['Title'].value_counts()	2	2
data.Age.hist()	2	2
train.set_value(index,'Embarked_unknown',1)	2	2
"titanic.loc[(titanic[""Sex""] == ""male""),""Sex""] = 0"	2	1
"combine_df['Aloneperson'] = combine_df[""familytot""].apply(lambda x:1 if x <=1 else 0)"	2	2
"treated_df[""PassengerId""],"	2	1
"Ttest.loc[Ttest[""Embarked""] == ""C""]"	2	2
data_raw.sample(10)	2	2
full_set['Survived'] = y_train	2	1
Pclass.head(5)	2	2
"test[""Fare""].fillna(train.Fare.mean(), inplace=True)"	2	2
"ax[0].set_title(""No of Parch"")"	2	2
dt.info()	2	1
df['Fare']	2	2
"test[""Age""]= test[""Age""].fillna(-0.5)"	2	2
resultsF1.append(f1_results)	2	2
model.add(Dense(30, activation='relu'))	2	2
"train[""Survived""][train[""Sex""] == 'female'].value_counts(normalize = True)[1]"	2	2
"titanic_df[""ClassSex""] = titanic_df[""Pclass""].map(str) + titanic_df[""Sex""]"	2	2
x_test['Age'] = x_test['Age'].fillna(x_test['Age'].mean())	2	2
df_train['Title'] = df_train.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
test_df.loc[ (test_df.Fare.isnull()) & (test_df.Pclass == f+1 ), 'Fare'] = median_fare[f]	2	2
titanictest.head()	2	2
test_data['Sex'] = test_data['Sex'].map({'male':0, 'female':1})	2	2
"train_df.describe(include=""all"")"	2	2
train.Age.fillna(train.Age.mean(),inplace=True)	2	2
test['Salutation'] = test['Salutation'].fillna(0)	2	2
dataset.loc[ (dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age' ] = 1	2	2
plt.boxplot([ df['normal'], df['random'], df['gamma'] ] )	2	2
pd.isnull(test).sum()	2	1
train_data.drop('TravelBuds', axis=1, inplace=True)	2	2
"train_set.loc[train_set[""Embarked""] == ""Q"", ""Embarked""] = 2"	2	2
train.Embarked.describe()	2	2
df['Fare_scaled'] = scaler.fit_transform(df['Fare'].values.reshape(-1,1), fare_scale_param)	2	2
dfFull.groupby(['Embarked','Sex']).Name.count()	2	2
train2.describe()	2	2
X['Cabin'].str.contains('B')*1	2	2
combine['CommonSurname'] = np.where(combine.groupby(['Surname'])['Pclass'].transform('count') > 1, 1, 0)	2	2
test['IsAlone'] = data['IsAlone'][len(train):]	2	2
row['Sex'] == 'male' else 0	2	1
test_X.isnull().any()	2	1
df_train['Age'] = df_train['Age'].astype(int)	2	2
df.drop('Cabin',axis=1,inplace=True)	2	2
combine_df['Cabin'] = combine_df['Cabin'].fillna(0)	2	2
df.drop(['Name','Ticket','Cabin'],axis=1)	2	2
input_test_data.loc[input_test_data['PassengerId']==row['PassengerId'], 'Survived'] = row['Survived']	2	1
title_arr.append('Miss')	2	1
df.loc[traindex, :]	2	2
test['Fare'].fillna(test['Fare'].dropna().median(),inplace=True)	2	2
self.update(eta, grad)	2	2
df.groupby(['Fare_Range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')	2	2
features.loc[ (data.Age.isnull()) ]# null Ages	2	2
data['Sex']=data['Sex'].map(gender_mapping)	2	2
newDF.head(5)	2	1
dfFull['CabinCat'] = dfFull['CabinCat'].map({'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'Z': 6}).astype(int)	2	2
y_pred_final.astype(int)	2	2
np.where(train_data.Fare != train_data.Fare, avg_train_fare, train_data.Fare)	2	2
all_data['CabinType4'] = all_data['Cabin4'].apply(get_cabin_type)	2	2
find_cabin.append(temp)	2	1
"dataset.loc[ dataset['Name_length'] > 40, 'Name_length'] 							        = 3"	2	2
train.drop('Name',inplace=True, axis=1)	2	2
history_dict['loss']	2	2
train_data.loc[:,'Survived']	2	2
"dftrain.isnull(), cmap=""viridis"", yticklabels=False"	2	1
"train[""Family""]=train['SibSp']+train['Parch']"	2	1
train['FamilySize']*train['Pclass']	2	1
"test[""Age""][x] = age_title_mapping[test[""Title""][x]]"	2	2
data['TicketNumLen'] = data['Ticket'].apply(lambda x: len(str(x).split(' ')[-1])).astype(int)	2	2
train_df.join(family_dummies_train)	2	2
data.drop(['Cabin'], axis=1, inplace=True)	2	2
test_df.reset_index(0)	2	1
dataset_toDelete.append(train_dataset.iloc[i,:])	2	1
dataset.head(20)	2	2
combine_df.select_dtypes(['category']).columns	2	2
df_all['Age'].median()	2	2
full.drop('Pclass',axis=1,inplace=True)	2	2
titanic_test.loc[titanic_test['Sex'] == 'male', 'Sex'] = 0	2	2
test_filtered['Cabin'] = np.where(test_filtered['Cabin'].isnull(), 0, 1)	2	2
"df_train[""Age""].fillna(df_train.groupby(""Title"")[""Age""].transform(""median""), inplace=True)"	2	2
"train[""Age""].fillna(train[""Age""].median(), inplace=True)"	2	2
np.mean(men_only_stats.astype(np.float))	2	2
df_data['Title'] = df_data.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
input['Fare'] = input.Fare.fillna(-0.5)	2	2
dfFull.loc[[1044]]	2	2
"submission.to_csv(""submission3.csv"", index=False)"	2	2
df_train.drop(['Ticket', 'Cabin'], axis=1)	2	2
best_parameters['penalty'],	2	1
df2.isnull().sum()	2	1
df.Sex.head(5)	2	1
pd.merge(model_summary,df4,how='outer')	2	1
dfFull.TitleCat.replace('Miss',2,inplace=True)	2	2
input_train_featured.head()	2	1
TEST['Survived']	2	1
"data.drop([""PassengerId"",""Name"", ""Ticket"",""Cabin""], axis=1)"	2	1
combined_train_test['Family_Size_Category'] = le_family.transform(combined_train_test['Family_Size_Category'])	2	2
combined_train_test['Family_Size'] = combined_train_test['Parch'] + combined_train_test['SibSp'] + 1	2	2
X_test.isnull().any()	2	1
df_test['Title'] = df_test['Name'].apply(lambda x: (re.search(' ([a-zA-Z]+)\.', x)).group(1))	2	2
titanic_df.shape	2	2
train.describe()#Numerical Variables	2	2
test_x.head()	2	2
dataset.loc[(dataset['FamilySize'] > 3) & (dataset['FamilySize'] <= 6), 'Family'] = 'medium'	2	2
data['Age'].iloc[i] = age_med	2	2
data.loc[ (data.Age.isnull()), 'Age' ] = predictedAges	2	2
MLA.append(accuracy_score(pred , y_test))	2	2
titanic_df['IsAgeNaN'] = titanic_df['Age']	2	2
"all_data['Title'] = all_data['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	2	2
df['Initial']=df.Name.str.extract('([A-Za-z]+)\.') #lets extract the Salutations	2	2
data.loc[data['Age'] > 62,'Age']= 4	2	2
train.loc[v[i], 'MotherSurvived'] = temp[temp.SexInt==0].Survived.sum()	2	2
tmp.head()	2	2
"test.to_csv(""submission_test.csv"", index=False)"	2	2
train['Pclass'].value_counts().plot.pie(autopct='%1.1f%%', shadow=True, explode = (0.1,0,0), startangle=90, colors=colors, ax=ax[0]).axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.	2	2
dfFull.Age.dropna()	2	2
df_train.iloc[valid_idx],y[valid_idx]	2	1
data['Survived'].value_counts().plot(kind='bar')	2	2
test_df['calculated_fare'] = test_df.Fare/test_df.family_size	2	2
df['AgeCat'] =x_age.astype(np.float)	2	2
df_train.head(n=4)	2	2
"X[""Fare""].fillna(X.groupby(""Pclass"")[""Fare""].transform(""median""), inplace = True)"	2	2
"test[""FamilySize""] = train[""SibSp""] + train[""Parch""] + 1"	2	2
numeric_features.corr()	2	1
train.Title.isnull().sum()	2	1
dfTrain['Cabin_Letter'].value_counts()	2	1
poly.transform(X_test_transformed_scaled)	2	2
"train[""Title""].fillna(""Others"", inplace=True)"	2	2
df['Age_Known'] = df['Age'].apply(lambda x: 1 if x % 1.0 == 0 else 0)	2	1
ax[1].set_ylabel('Survival Count')	2	1
full_data['Title'] = full_data['Title'].replace('Ms', 'Miss')	2	2
submission.head(418)	2	2
train_df['Cabin'].head(10)	2	1
some_df.Age.values.reshape(some_df.shape[0],1)	2	1
MLA_compare.loc[row_index,'MLA Name'] = MLA_name	2	2
np.append(arr=np.ones((training_number,1)).astype(int),values = x, axis=1)	2	1
_df.loc[i, :]	2	1
stats.skew(chi_squared_df5)	2	2
df['HighLow']=x_hl.astype(np.float)	2	2
train[['CategoricalAge', 'Survived']].groupby(['CategoricalAge'], as_index=False).mean()	2	2
subset.Survived.values:	2	1
df.drop(label, axis=1)	2	2
combined_train_test.drop(['Group_Ticket'], axis = 1, inplace = True)	2	2
df['FamilySize'] = df['SibSp'] + df['Parch'] + 1 #himself	2	2
"train['Sex'] = train.Sex.apply(lambda x: 0 if x == ""female"" else 1)"	2	2
df.to_csv('submission.csv', header=True, index=False)	2	2
td_survived.groupby('Pclass').size()	2	2
train.drop(dropping,axis=1)	2	2
df['Title'] =x_title.astype(np.float)	2	2
"train_data[""Pclass""].value_counts()"	2	2
data_copy.loc[:, 'Fare'] = data_copy['Fare'].fillna(data_copy['Fare'].median())	2	2
train['Age'] = train[['Age', 'Pclass']].apply(impute_age, axis=1)	2	2
seq.add(Dropout(0.1))	2	1
clf_means.append(clf_result.mean())	2	1
dfTest[['Pclass','Sex','ParchCat','Embarked','Fare','TitleCat','Age','TicketCat']]	2	2
df['Cabin'] = df['Cabin'].fillna('N')	2	2
"traindata[""Embarked""] = traindata[""Embarked""].map({""C"":0,""Q"":1,""S"":2})"	2	1
result['Survived'] = 0 #Default prediction is death	2	2
"train.drop(columns=[""Survived""])[:-120]"	2	2
m.shape	2	2
dataset['Fare']=dataset['Fare'].astype(int)	2	2
train['Alone']=0	2	2
person_dummies_train.drop(['Male'], axis=1, inplace=True)	2	2
titanic_df.loc[(titanic_df['Fare'] > 14.454) & (titanic_df['Fare'] <= 31), 'Fare'] = 2	2	2
in ['Mr','Master','Mme']:	2	1
df.loc[ (df['Age'] > 19) & (df['Age'] <= 25), 'age_cat'] = 1	2	2
combdata['LargeF'] = combdata['Fsize'].map(lambda s: 1 if s >= 5 else 0)	2	2
train_ori.head(5)	2	1
clf.cv_results_['mean_test_score']	2	2
df.drop(['Cabin', 'Name', 'Ticket', 'PassengerId'], axis=1, inplace=True)	2	2
in ['Mlle','Ms','Miss']:	2	1
df_test['Age_scaled'] = scaler.fit_transform(df_test['Age'].values.reshape(-1,1), age_scale_param)	2	2
"X[""CabinBool""] = (X[""Cabin""].notnull().astype('int'))"	2	2
pd.merge(staff_df, student_df, how='right', left_index=True, right_index=True)	2	2
pd.isnull(combined).sum()	2	2
df.groupby('Ticket', as_index=False)['Ticket'].transform(lambda s: s.count())	2	2
df_data.loc[(df_data['Fare'].isnull()) & (df_data['Pclass'] == aclass), 'Fare'] = fare_to_impute	2	2
df_test.drop([i], axis=1)	2	2
"test_set.loc[test_set[""Embarked""] == ""S"", ""Embarked""] = 0"	2	2
dfFull.Cabin.str[0].value_counts(dropna=False)	2	2
df['Title'] = pd.Categorical(titles, categories=[x for x, y in cats.items()])	2	2
test.drop(['Name','Ticket'],axis = 1)	2	2
"train_data[""Sex""].value_counts()"	2	2
train_df.loc[(train_df.Age.isnull())&(train_df.Initial=='Other'),'Age']=46	2	1
train.iloc[:,[2,4,5,6,7,9,11]]	2	2
train_p.info()	2	1
X.shape[1]                  # number of training examples	2	2
y_train.to_csv('y_train.csv', index=False)	2	2
test_df['Age'] = test_df.groupby(['Pclass'])['Age'].transform(lambda x: x.fillna(x.mean()))	2	2
"train['FamilySize'].loc[train['Family'] > 1] = ""Medium"""	2	2
titanic.groupby(['Sex','Pclass','Title'])	2	2
"test_data[""Embarked_3""]= 0"	2	1
agehist.head()	2	2
X_train.head(3)	2	2
test['Solo'] = test['FamilySize'].apply(lambda x: 0 if x>0 else 1)	2	2
qaxis[0].set_title('Sex vs Embarked Survival Comparison')	2	2
train_data_orig.append(test_data_orig)	2	2
DataFile['Sex'].replace(['male','female'],[0,1],inplace=True)	2	2
test['Sex'].value_counts()	2	2
train.drop(['Survived'], axis=1).columns	2	1
np.where(train_data.Age != train_data.Age, avg_train_age, train_data.Age)	2	2
all_data['CabinType1'] = lbl.transform(list(all_data['CabinType1'].values))	2	2
pct_cat_grouped_by_cat_target.rename({0:'Victims(%)', 1:'Survivors(%)'}, axis = 'columns', inplace = True)	2	2
data['FamilySize'] = data['SibSp'] + data['Parch']	2	2
df['Embarked'].fillna('S',inplace=True)	2	2
np.dot(W.T,dZ)            # Gradient of cost w.r.t. dA_prev	2	1
dfTrain[['Pclass','Sex','ParchCat','SibSpCat','Embarked','Fare','TitleCat','Age','TicketCat']]	2	2
train.drop(['SibSp', 'Parch'], axis=1, inplace=True)	2	2
base_predictions_train.astype(float).corr()	2	2
clf_dict.items():	2	1
X_train.shape,Y_train.shape,X_test.shape	2	2
"dftrain.loc[:,[""Parch"", ""SibSp"", ""Survived""]]"	2	1
combined_train_test['Pclass_Fare_Category'] = le_fare.transform(combined_train_test['Pclass_Fare_Category'])	2	2
sc.transform(X)	2	2
df['Grpcount'] = df.groupby([x, y]).transform('count')['index'].values	2	1
"train_data[""Name""]"	2	2
train['IsTrain'] = 1	2	2
"train[""Sex""] = train[""Sex""].astype(""category"")"	2	2
df_test.loc[(df_test['Age'] > 32) & (df_test['Age'] <= 48), 'Age'] = 2	2	2
ticketV.loc[ticketV ==1].index.tolist()  # Creates a list of tickets used by individual(single) passemgers	2	1
temp[1] = gender_lookup[temp[1]]	2	1
x.values():	2	2
dataset.groupby('Title').Age.transform('median')	2	2
in ['Title', 'Ticket_Cat', 'Embarked', 'Cabin_Cat']:	2	1
"test.loc[test[""Title""] == ""Sir"", ""Title""] = 'Rare Title'"	2	2
test['Family_Size'] = data['Family_Size'][len(train):]	2	2
train['Mrs'] = 0	2	2
param['silent'] = 1	2	1
submit_ray.to_csv(index = False)	2	1
grades.head()	2	2
df['Ticket'].value_counts()	2	1
titanic_df.loc[(titanic_df['Age'] > 64), 'Age'] = 4	2	2
train['N']	2	1
combined_train_test['Embarked'],	2	2
df_full.drop('Name', axis=1)	2	2
sml.feature.drop(['Parch', 'SibSp'])	2	2
test['Title'] = test.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
df_comb.head(5)	2	1
test_df1['Age'].isna().sum()	2	1
dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1), 'Age'] = guess_ages[i,j]	2	2
titanic.isnull().values.any()	2	1
"train_df[""Family""]=train_df[""SibSp""]+train_df[""Parch""]+1"	2	1
sns.boxplot(x='Pclass',y='Age',data=train)	2	2
axes[1].legend()	2	1
train.astype(float).corr(),	2	2
df_full['Fare'] = df_full['Fare'].fillna(df_full['Fare'].median())	2	2
"test.loc[test[""Title""] == ""Capt"", ""Title""] = 'Rare Title'"	2	2
model_data.head(2)	2	1
df['Relatives'] = df['SibSp'] + df['Parch']	2	2
"df_test[""FareBand""] = pd.qcut(df_test['Fare'], 4, labels = [1, 2, 3, 4]).astype('category')"	2	2
"all_data.drop(""Ticket"", axis=1)"	2	2
dfres.set_index('PassengerId', inplace=True)	2	2
df_raw.shape	2	2
"test['FamilySize'].loc[test['Family'] > 5] = ""Large"""	2	2
name_class_df.append(df, ignore_index=True)	2	2
test_df.join(test_person_dummies)	2	2
data.drop(['SibSp','Parch'], axis=1)	2	2
train['Title'] = train['Title'].fillna(0)	2	2
data_df['Family_Survival'] = DEFAULT_SURVIVAL_VALUE	2	2
test_one['Survived'][test_one['Sex'] == 'female'] = 1	2	2
corr.abs().sort_values(by='Survived', ascending=False).index	2	1
df.Cabin.fillna('X')	2	2
data['TicketHead'] = data['TicketHead'].astype(int)	2	2
"test_set.loc[test_set[""Embarked""] == ""Q"", ""Embarked""] = 2"	2	2
test_data['Fare'].fillna(test_data['Fare'].mean(), inplace=True)	2	2
in ['Sex']:	2	1
"model.add(Activation(""sigmoid""))"	2	1
test.drop(['Sex','Embarked'],axis=1,inplace=True)	2	2
df_train.groupby(('Survived', feature)).size().unstack()	2	2
train_df.drop('Alone', axis=1, inplace=True)	2	2
test['Salutation'] = test['Salutation'].replace(['Lady', 'Countess','Capt', 'Col',         'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	2	2
Pclass1.mean().Age	2	1
rows['Name'][start_pos+2:end_pos]	2	1
have_nan_cols.append(column)	2	1
"train_df[[""Embarked"",""Survived""]].groupby([""Embarked""],as_index=False).mean().sort_values(by=""Survived"",ascending=False)"	2	2
plt.boxplot(train['Fare'],showmeans=True, meanline=True)	2	2
test['ChildNotSurvived'] = 0	2	2
"train.drop([""Survived"", ""Name"", ""Ticket"", ""Cabin""], axis=1)"	2	1
model.add(Dense(units=128, activation='relu'))	2	1
fulldata.head(2)	2	1
copy_df['Name']	2	2
"test.loc[test[""Title""] == ""Mlle"", ""Title""] = 'Miss'"	2	2
df_train['Survived'] # Output vector as pandas series (dim:891*1)	2	2
df_study_svc.loc[ind, 'estimator']	2	1
test['Fare']=test['Fare'].astype(int)	2	2
df['age_cat'] = 0	2	2
full.iloc[len(train):len(full)]	2	2
train['Age'].copy()	2	1
train.loc[v[i], 'Female_Friends_NotSurvived'] = train[(train.Ticket==k)&(train.index!=v[i])&(train.Sex=='female')&(train.Survived==0)].Survived.count()	2	2
estimators.append(('mlp', KerasRegressor(build_fn=age_model, epochs=100, batch_size=5, verbose=verbose)))	2	2
train_df[['isAlone', 'Survived']].groupby('isAlone', as_index=False).mean()	2	2
train_df['Parch'].value_counts()	2	2
y_test.values	2	2
models['set4'] = {}	2	1
"combdata[""Fare""].isnull().sum()"	2	2
df_train['TicketPrefix'] = df_train['Ticket'].apply(lambda x: Ticket_Prefix(x))	2	2
titanic[['Age','Pclass']].groupby('Pclass').mean()	2	1
"train[""FamSize""] = train[""SibSp""] + train[""Parch""] + 1"	2	2
dataset.loc[ dataset['Age'] > 45, 'Age'] = 7	2	2
train_Y.values	2	1
"train[""Age""][((train['SibSp'] == train.iloc[i][""SibSp""]) & (train['Parch'] == train.iloc[i][""Parch""]) & (train['Pclass'] == train.iloc[i][""Pclass""]))].median()"	2	1
"test_df[""Age""].fillna(df.Age.median(), inplace=True)"	2	2
Age.dropna().values, bins=range(0, 81, 5), kde=False,	2	1
in ['Embarked', 'Sex']:	2	2
train_data.groupby(['Cabin'])[['Survived']].count()	2	2
titanic_data_bucket['no'].plot(kind='bar',alpha=0.5)	2	2
data['SibSp']	2	1
"X_test_original[""PassengerId""],"	2	2
data.loc[data['Sex']==1, 'SexByAge'] = data.loc[data['Sex']==1, 'Age'] + 5	2	2
full.loc[(full.Age>32.102)&(full.Age<=48.068),'AgeCut']=3	2	2
dataset.loc[dataset['Sex']=='female','Survived'].value_counts()	2	2
"train_df[""Pclass""].value_counts()"	2	2
"Ttest.loc[Ttest[""Embarked""] == ""Q""]"	2	2
"full_train_set[""Survived""]"	2	1
titanic_test.set_index('PassengerId')	2	1
df_gs['Survived'] = y_pred	2	2
test_df['FamilySize'] = test_df['SibSp'] + test_df['Parch'] + 1	2	2
dataset['Title'] = dataset['Title'].replace(['Jonkheer', 'Don','Sir'], 'Royalty')	2	2
combined_train_test['Sex'],	2	2
concat.FamilyID.values[concat.FamilyID.isin(freq[:,0])] = 'Small'	2	2
combined_train_test['Original_Name'],	2	2
data['Surname'] = data['Name'].apply(lambda x: str(x).split('.')[1].split(' ')[1])	2	2
dataset['Title']=dataset['Name'].str.extract('([A-Za-z]+)\.', expand=False)	2	2
all_data.drop('Ticket_No', axis=1)	2	2
"df.drop(""title"",axis = 1)"	2	1
data['SexByPclass'] = data['SexByPclass'].astype(int)	2	2
pclass_dummy.head()	2	1
train['Cabin'].fillna('No Cabin',inplace=True)	2	2
cv_scores.mean()	2	1
trainSTD.drop(columns = ['Survived'])	2	1
titles.append('mr')	2	1
dataset['Embarked']=dataset['Embarked'].map(embarked_mapping)	2	2
copy.copy(dataset[train_objs_num:])	2	2
"temp.to_csv(""submission.csv"", index = False)"	2	2
all_data.drop('Survived', axis=1, inplace=True)	2	2
embark_dummies_train.drop(['S'], axis=1, inplace=True)	2	2
data.groupby(['CabinCode'],as_index=False).mean()	2	2
"train1.drop(labels = [""Survived""],axis = 1)"	2	1
"new_data[""Name""] = new_data[""Name""].str.replace(""."","";"")"	2	1
"combdata[[""Fsize"", ""Survived""]].groupby(['Fsize']).mean().sort_values(by='Survived', ascending=False)"	2	2
axes[0].set_title('Fare for df_Survived')	2	1
train_df.loc[(train_df['Age'] > 32) & (train_df['Age'] <= 48), 'Age'] = 2	2	2
train_df['Survived'].count()	2	2
X_test.index.values	2	2
test.loc[test[test['Age']<13].index, 'TitleInt'] = 5	2	2
df.loc[df['Age']<=16,'Age_band']=0	2	2
titanic_df.drop(['Pclass'], axis=1, inplace=True)	2	2
reader_test[['Pclass', 'SibSp', 'Parch', 'Fare']]	2	2
sns.boxplot(x='Pclass',y='Age',data=data)	2	2
data.loc[data['Sex']==1, 'SexByPclass'] = data.loc[data['Sex']==1, 'Pclass'] + 3	2	2
"df.drop([""Name"", ""SibSp"", ""Parch"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked""], axis=1)"	2	2
raw_df.copy()	2	1
df_test.drop(['Age','Fare'], axis = 1)	2	2
a.std()	2	2
test_data[['PassengerId', 'Survived']]	2	2
"titanic_train[""Embarked""] = titanic_train[""Embarked""].fillna('S')"	2	2
train_df['Parch'].unique()	2	2
"df_train[""Age""].describe()"	2	2
pd.isnull(row['Age'])	2	2
X.loc[X['Sex']=='male','Sex']=0	2	1
train['Survived'].mean()	2	2
train2.iloc[testing_data][target]	2	1
df_study_lr.loc[ind, 'val_score']	2	1
test.drop('Survived', axis=1, inplace=True)	2	2
diff.groupby(['Title','Pclass','Parch','SibSp'])['Survived'].agg([('average','mean'),('number','count')])	2	2
rr.append(y[val_index][pred!=y[val_index]].index.values)	2	2
df['Title'].replace('Mme','Mrs',inplace=True)	2	2
test['Ticket_Len'] = test['Ticket'].apply(lambda x: len(x))	2	2
data['Age'].plot.hist(edgecolor='black', linewidth=0.5)	2	2
full.groupby(['Title'])[['Title','Survived']].mean().plot(kind='bar',figsize=(10,7))	2	2
X.loc[X['Embarked']=='Q','Embarked']=1	2	1
"data_val[""Fare""][x] = round(data_raw[data_raw[""Pclass""] == pclass][""Fare""].mean(), 4)"	2	2
test_data['Title'] = test_data['Title'].map({'Master':0, 'Miss':1, 'Mr':2, 'Mrs':3, 'Others':4})	2	2
test['FatherSurvived'] = 0	2	2
same_ticket_count_gp.rename(columns={0: 'TicketCount'})	2	2
combine.loc[combine.Age.isnull(), 'Age'] = predict_ages	2	2
titanic.fillna((titanic.median()))	2	2
"train[[""Embarked"", ""Survived""]].groupby([""Embarked""], as_index = False).mean().sort_values(by = ""Embarked"")"	2	2
y_hat.shape[0] # Sample size	2	2
all_data.drop('Cabin', axis=1)	2	2
"X[""Sex""] = X[""Sex""].replace([""male"", ""female""], [0, 1])"	2	1
X_data.iloc[0:10, :]	2	1
df['Grades'].astype('category').head()	2	2
axs[0].plot(evaluation_results['Test']['binary_logloss'], label='Test')	2	2
"ax[0].set_xlabel(""Parch"")"	2	2
df2['Survived'].values #.reshape(-1,1)	2	2
dfFull['NameLen'] = dfFull['Name'].apply(len)	2	2
gridscgdbt2.best_params_['max_depth'],	2	1
test['FamSize'] = test['SibSp'] + test['Parch']	2	2
full['NorNames'] = pd.Series(scaler.fit_transform(full.Names.reshape(-1,1)).reshape(-1), index=full.index)	2	2
titanic_ytest.head()	2	2
train_df.loc[(train_df.Age.isnull())&(train_df.Initial=='Mr'),'Age']=33	2	1
dfTicket.loc[dfTicket == 1].index.tolist()	2	2
dataset.loc[(dataset['Age'] > 31) & (dataset['Age'] <= 36.5), 'Age'] = 5	2	2
test['ChildSurvived'] = 0	2	2
test_data.drop(['PassengerId', 'Age'], axis = 1)	2	1
"train_df.drop(""Survived"", axis=1)          # data: Features"	2	2
test.drop(['Embarked'],axis=1)	2	2
features_train.append(features_test)	2	1
clf.cv_results_['std_test_score']	2	2
data.drop(['Ticket'], axis=1, inplace=True)	2	2
"test[[""Age"", ""Fare""]] = scaler.fit_transform(test[[""Age"", ""Fare""]])"	2	2
train['Sex'][train['Sex'] == 'male'] = 0	2	2
"test_df[""BoyClass""] = test_df[""Boy""].map(str) + test_df[""Pclass""].map(str)"	2	2
x_train.shape,x_test.shape	2	2
all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]	2	1
train_copy[['High_Fare_Female', 'first_class_female', 'age_division', 'Fare', 'Sex']].values	2	1
test_data.drop(['Survived'], axis = 1)	2	2
self.val_losses.append(logs.get('val_loss'))	2	2
train_data[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)	2	2
"title_Dict.update(dict.fromkeys([""Master""], ""Master""))"	2	2
train_data.tail()	2	2
test_df.drop(['Ticket', 'Cabin', 'Name'], axis=1)	2	2
test.head(3)	2	2
data['Categorical_Age'] = pd.cut(data['Age'], 5, labels=False)	2	2
dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),'Age'] = guess_ages[i,j]	2	2
data.loc[(data['Fare'] > 17) & (data['Fare'] <= 30),'Fare'] = 1,	2	2
train_df['Age'] = train_df['Age'].fillna(train_df['Age'].mean())	2	2
data.shape[1]	2	2
FirstClass.multiply(eg4,2)	2	2
df.loc[ (df['Fare'] > 14.454) & (df['Fare'] <= 31), 'Fare'] = 2	2	2
test_df1.head()	2	2
sns.boxplot(x = cat, y = num)	2	2
train_df['Age'].hist()	2	2
train_data.drop(['SibSp','Parch'], axis=1)	2	2
"test.loc[test[""Fare""] > 150, ""Fare""] = test.loc[train_df[""Fare""] > 150, ""Fare""].apply(lambda x: 100)"	2	2
best_params['bootstrap']	2	1
"rates.loc[row, ""Percentage""] = round((rates.loc[row,""PassengerId""]/num_males)*100,2)"	2	1
test_data.set_index('PassengerId', inplace=True)	2	2
train['Friends'] = 0	2	2
Sex_le[0:10]	2	2
X_transformed['Fare'] = boxcox(X_transformed['Fare'] + 1)[0]	2	2
dfTrain[['Pclass','Sex','ParchCat']]	2	2
test_df['Title'] = test_df.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
train_data.drop(['PassengerId','Name','Ticket'], axis=1)	2	2
data_pred.round(decimals=0)	2	1
traindf['ratioFareClass'] = traindf['Fare']/traindf['Pclass']	2	2
train[['SibSp', 'Survived']].groupby(['SibSp']).count().sort_values(by='Survived', ascending=False)	2	2
data_df['Title'].value_counts()	2	2
training_data.loc[(training_data['Survived']==0)]	2	2
plt.hist(x=[train[(train.Survived==1)&(~train.Age.isnull())]['Age'],train[(train.Survived==0)&(~train.Age.isnull())]['Age']],stacked=True,color=['g','r'],label=['Survived','Dead'])	2	2
test_data.fillna(0)	2	2
item['Adult']=item['Age'].apply(lambda x:0 if x<10 else 1)	2	1
train[['Age', 'Survived']].groupby(['Age'], as_index=False).mean()	2	2
ds.Age.mean()	2	1
test.loc[test['Family'] == 1, 'FamilyType'] = 'singleton'	2	2
"train_df[""title""].value_counts()"	2	1
"combdata[""Ticket""] = Ticket"	2	2
train_df.groupby('Sex').mean()	2	2
dataset['FareBin']=dataset['FareBin'].map(cleanup_FareBin).astype(int)	2	2
df.Fare.fillna(fare_median,inplace=True)	2	1
model.add(Dense(8))	2	2
df['Fare'] / df['Number of Ticket Uses']	2	2
le.transform(test[feature])	2	2
test['Fare']=ohe(sparse=False).fit_transform(z1.reshape(len(z1),1))	2	2
df_study_rf.loc[ind, 'estimator']	2	1
in ['Mrs']:	2	1
ax[1].set_yticks(range(0,600,50))	2	1
test_data.fillna(-999, inplace = True)	2	2
singleFitness.append([fit[0], fit[1], fit[2]])	2	1
"X_train.describe(include = ""all"")"	2	2
df_test['Cabin'] = df_test['Cabin'].map(lambda x : x[0])	2	2
scores['train_' + clf_name].append(acc_train)	2	1
df.loc[ (df['Age'] > 32) & (df['Age'] <= 42), 'age_cat'] = 3	2	2
row['SibSp']	2	1
all.head()	2	1
embark.head()	2	2
df.TitleNumber.astype('int64')	2	1
samp_df.copy()	2	2
diff.describe(include=['O'])	2	2
train_df['Family_number'] = train_df.SibSp + train_df.Parch # number of family members on board	2	2
in ['Sex', 'Embarked', 'Title', 'Ticket_Cat', 'Cabin_Cat', 'FareBin', 'AgeBin']:	2	1
dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\.',expand=False)	2	2
train['Survived'].groupby(pd.qcut(train['Name_Len'],5)).mean(),	2	2
testing_data.head(5)	2	1
eg4.multiply(2)	2	2
train_data['Age'].max()	2	1
models.sort_values(by = 'Score', ascending = False)	2	2
acc_random_forest.mean(), acc_gaussian.mean(), acc_perceptron.mean(),	2	2
cvscores.append(scores[1] * 100)	2	2
df['Fare'] = df['Fare'].fillna(appended_data['Fare'].median())	2	2
train1['Survived']	2	2
titanic_test.drop('PassengerId', axis=1)	2	1
"df.drop(""Pclass"", axis = 1)"	2	1
train['Fare']=ohe(sparse=False).fit_transform(z1.reshape(len(z1),1))	2	2
"train[""AgeGroups""][x] = title_age_map[train[""Title""][x]]"	2	2
data['Sex'] = data['Sex'].map({'male': 1, 'female': 2})	2	2
dataset['Title']=dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	2	2
df.loc[df['Deck']!='No Cabin','Deck'] = df[df['Cabin']!='No Cabin']['Cabin'].str.split().apply(lambda x: np.sort(x)).str[0].str[0]	2	2
"dataset[""FamilySize""] = dataset[""FamilySize""].map({""Solo"":0, ""Medium"":1, ""Big"":2})"	2	2
test_le.to_csv('./data/test_le.csv', index=False)	2	2
df['Title']=df_raw['Name'].str.extract('([A-Za-z]+)\.', expand=False)  # Use REGEX to define a search pattern	2	2
train_df['Title'].unique()	2	2
"survivors_1.plot.hist(fc=(0, 0, 1, 0.5), label=""Class 1"")"	2	1
concat_reduce.iloc[891:].copy()	2	2
"test[""Embarked""]=test[""Embarked""].fillna(""S"")"	2	2
df.loc[ (df.Age.isnull()) & (df.Title == 'Master') ,'AgeFill'] = mean_ages[3]	2	2
df.loc[df['Age'] < 0, 'Age'] = 0	2	2
result['PassengerId'] = test['PassengerId']	2	2
titles[0]	2	2
"df[""SibSp""].value_counts()"	2	1
data['Age'].hist()	2	2
train.drop(labels=['Survived'], axis=1, inplace=True)	2	2
data_for_age.loc[(data.Age.isnull())]	2	1
test.loc[ (test.Fare.isnull()), 'Fare' ] = 0	2	2
test_df.drop(['PassengerId', 'Name',                         'Ticket', 'Cabin'], axis = 1)	2	2
test_features.head()	2	2
history_dict['val_loss']	2	2
"train_df[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean()"	2	2
test_df.drop(['Fare'], axis=1)	2	2
"df_train[""Age""] = df_train[""Age""].fillna(df_train[""Age""].median())"	2	2
processed_data['is_alone'] = pd.Series(processed_data['family_size'] == 1, dtype=np.float64)	2	2
"train.groupby([""Sex"", ""Name""]).size().unstack(fill_value=0)"	2	1
cabin[0] == ('F' or 'G'):	2	2
output_data_frame['PassengerId'] = test_raw_data['PassengerId']	2	2
df['FareBin'] = pd.qcut(df['Fare'], 5)	2	2
test['Categorical_Age'] = data['Categorical_Age'][len(train):]	2	2
data_train.isnull().sum().sort_values(ascending=False)	2	2
dataset.loc[dataset['FamilySize'] > 6, 'Family'] = 'large'	2	2
df.Title.replace('Mlle', 'Miss')	2	2
X_data.iloc[:, 0]	2	1
np.sum(1 - np.abs(t-y))	2	2
df.drop(['PassengerId', 'Survived', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)	2	2
df_train[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)	2	2
"data[""age_type""]=[""children"" if x<17  else ""adult"" if x<81 else ""none"" for x in data.Age]"	2	2
testset1.loc[testset1['Sex']=='female','Sex'] = 1	2	2
dfTrain[['Pclass']]	2	2
d.info()	2	1
train['Mr'] = 0	2	2
df_train['Cabin'] = df_train['Cabin'].map(lambda x : x[0])	2	2
Xmat.fillna(Xmat.median())	2	2
processed_data['embarked_s'] = pd.Series(raw_data['Embarked'] == 'S', dtype=np.float64)	2	2
"test[""Title""] = test[""Title""].map({""Mr"" : ""Mr"", ""Mrs"" : ""Mrs"", ""Miss"" : ""Miss"", ""Master"" : ""Master""})"	2	2
y.iloc[train_index], y.iloc[test_index]	2	2
"data_train[""Embarked""] = data_train[""Embarked""].fillna(""S"")"	2	2
train['Ticket_Lett'] = np.where((train['Ticket_Lett']).isin(['1', '2', '3', 'S', 'P', 'C', 'A']), train['Ticket_Lett'], np.where((train['Ticket_Lett']).isin(['W', '4', '7', '6', 'L', '5', '8']), '0','0'))	2	2
test_df['NameLength'] = test_df['Name'].apply(len)	2	2
test['ChildOnBoard'] = 0	2	2
test_filtered['Title'] = test.Name.str.extract(r',\s*([^\.]*)\s*\.', expand=False)	2	2
full.Cabin.isnull().sum()	2	2
test_df['age_class'] = test_df['Age'] * test_df['Pclass']	2	2
train_df['SibSp'].unique()	2	2
test.to_csv( 'svm_lin_selction.csv' , index = False )	2	1
all_data['AgeBin'] = pd.cut(all_data.Age, 10, labels=False)	2	2
test_set.at[414, 'TitleGroup'] = 'Noble' # A record with Dona title	2	2
train_df.drop('Name', axis=1, inplace=True)	2	2
X_data['PassengerId']	2	2
train_data.groupby(['SibSp', 'Survived'], as_index=False).count()	2	2
scaler.transform(ds_onehot)	2	2
feature_extractor.transform(data_train.drop(['Survived'], axis=1))	2	1
result.append(1)	2	2
combine.describe()	2	1
df['Alone']=0	2	2
titanic_df.drop(['SibSp','ParchBinary','Parch','MasterMiss','FamilySize','SmallFamily','S','C','Fc','Alone'],axis=1,inplace=True)	2	2
ticket_count.head()	2	2
data.drop('index',inplace=True,axis=1)	2	2
"df['EmbarkedQ'] = np.where(df['Embarked']==""Q"", 1, 0)"	2	2
all_data.drop('Cabin3', axis=1)	2	2
dfFull['SibSpCat'] = dfFull.SibSp.copy().astype(int)	2	2
df_train_features.iloc[:,9]:	2	1
train['Family_Size'] = train.SibSp + train.Parch	2	2
PassID.shape[0]	2	2
train_df['CategoricalFare'] = pd.qcut(train_df['Fare'], 4)	2	2
train.drop('Embarked', inplace = True, axis = 1) #Dropped column 'Embarked'	2	2
train['Sex']	2	2
dZ.dot(A_prev.T) + (lambd/m) * W # Gradient of cost w.r.t. W	2	1
ans.head()	2	2
combdata['Single'] = combdata['Fsize'].map(lambda s: 1 if s == 1 else 0)	2	2
dfTest[['Pclass','Sex','ParchCat','SibSpCat']]	2	2
train_df.groupby(['Embarked'])['PassengerId'].count()	2	2
sns.boxplot(x='Title',y ='Age', data=Titanic_Master,ax=ax[1])	2	1
train.loc[(train['Age'] <= 13), 'age_cat'] = 'young'	2	2
train_df.index.copy()	2	1
models['set2']['num_scaling'] = 'std_scaler'	2	1
"titanic.loc[titanic['Cabin'].isnull(),'IsCabin'] = 0  # Populate ""IsCabin"" with value '0' where ""Cabin"" is Null/NaN"	2	1
s['Golf']	2	2
sns.boxplot(x = 'Pclass', y = 'Fare', hue = 'Survived', data = train, ax = axis1)	2	2
test['Fare'] =  test['Fare'].fillna(med)	2	2
data['Alone'] = data['Alone'] = (data['SibSp'] == 0) & (data['Parch'] == 0)	2	2
valid_loss_collect.append(val_loss)	2	2
train_agg.head()	2	1
"i[1][""Embarked""].lower()"	2	1
full_data['Sex'] = full_data['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	2	2
all_data['Is_Alone'] = all_data['FamilyNum'] == 1	2	2
df.loc[ (df['Fare'] > 39), 'fare_cat'] = 4	2	2
ax2.hist(df['gamma'], bins=100)	2	2
titanic_data_bucket['yes_percent'].plot(kind='bar', stacked=True)  # 各年龄段乘客存活百分比	2	2
train_df['SibSp']	2	2
train.loc[:,'Survived']	2	2
np.mean(family_survive_list)	2	1
train.loc[v[i], 'ChildSurvived'] = temp[temp.Survived==1].shape[0]	2	2
"submission.to_csv(""../working/submission.csv"", index=False)"	2	2
full_data['Embarked'] = full_data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	2	2
df_train[['Initial', 'Survived']].groupby(['Initial'], as_index=False).mean()	2	1
test['Title'] = titles	2	2
dataset['FareRange'] = pd.cut(dataset['Fare'], bins=fare_bins, labels=fare_labels, include_lowest=True)	2	2
all_data.fillna(all_data.mean())	2	2
data_df['Title']=data_df['Name'].str.extract('([A-Za-z]+)\.',expand=True)	2	2
titanic_df.join(titles_dummies_titanic)	2	2
Testdata.info()	2	2
sub['PassengerId'] = test_id	2	2
df['Fare'].median()	2	2
test['Sex'] = test['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	2	2
"train_df.drop([""AgeBand""],axis=1)"	2	2
train['age_cat'] = pd.qcut(x=train['Age'], q=5)	2	2
data.loc[(data['Fare'] > 14.454) & (data['Fare'] <= 31), 'Fare']   = 2	2	2
X['Cabin']	2	2
"train_df.groupby(""title"")[""survived""].mean()"	2	1
all_data[1]	2	1
train[0].keys()	2	2
df.loc[df['Age']>64,'Age_band']=4	2	2
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)	2	2
train_data['FamilySize'],	2	1
plt.hist(train.Parch)	2	2
X.drop('Name',axis=1,inplace=True)	2	2
"test.drop([""CabinBool""],axis = 1)"	2	2
test.insert(0, 'Age', front)	2	2
c_t.append(np.sum(np.abs(a_t-y))/y.shape[0])	2	1
dfResult.sort_values().plot(kind='bar',title='LeaderBoard result (%)')	2	2
plt.hist(ageOfMr)	2	1
df_train.shape, df_Test.shape	2	1
"test_x[""PassengerId""],"	2	2
dfTest[['Pclass','Sex','ParchCat','Embarked','Fare','TitleCat','Age','TicketCat','NameLen']]	2	2
test_x.shape,x.shape	2	1
test_filtered['Family'] = 0	2	2
train.drop(['Name', 'Cabin', 'Ticket'], axis=1)	2	2
Y_data.values	2	2
feature.astype(int)	2	1
df['Title'] = df['Title'].astype(int)	2	2
df['FamilySize'] = df['SibSp']+df['Parch']	2	2
train_set.isnull().sum().sort_values(ascending = False)	2	2
df_comb.info()	2	1
data['Embarked'] = data['Embarked'].map(embarked_mapping)	2	2
"train_df.drop(columns = [""Survived"", ""PassengerId""])"	2	2
np.mean(train_scores_std)	2	2
"df_test_tmp[""Fare""].fillna(df_test_tmp[""Fare""].median(), inplace=True)"	2	2
train_ds['Survived']	2	2
"models[0][""model""]"	2	1
"sns.boxplot(x=""Title"", y=""Age"",hue=""Survived"", data=data_raw)"	2	2
submission.to_csv('submisison.csv',index=False)	2	2
train['Sex'] = LabelEncoder().fit_transform(train.Sex)	2	2
train.drop(train.columns[[0,2,3,4,5,6,7,8]], axis=1)	2	2
all_data['Fare'].fillna(all_data['Fare'].mean(), inplace = True)	2	2
full['_CabinType'] = pd.Categorical(full.CabinType).codes	2	1
train_final.head()	2	1
X_stack.shape,y_stack.shape,X_test_stack.shape	2	2
pd.pivot_table(titanic_df, values = 'Survived',              index = ['Female', 'MasterMiss', 'SibSpBinary', 'ParchBinary'],              columns=['Pclass', 'Embarked'],              aggfunc='count')	2	2
"test.Fare[152] = test[""Fare""].median()"	2	2
df_train.Fare.median()	2	2
raw_training_df.drop(['Name', 'Ticket'], axis=1)	2	2
df_age_pred.set_index('PassengerId', inplace=True)	2	2
"title_Dict.update(dict.fromkeys([""Mr"", ""Ms""], ""Mr""))"	2	2
Y_train.values	2	2
merged.Fare.fillna(value = merged.Fare.median(), inplace = True)	2	2
"dataset['Title'] = dataset['Title'].map({""Mr"": 1, ""Miss"": 2, ""Mrs"": 3, ""Master"": 4, ""Rare"": 5})"	2	2
df.fillna(df.mean())  # There is one missing value in 'Fare'	2	2
test_df.join(child_dummies_test)	2	2
df_test['Sex'] = df_test['Sex'].replace(numsex)	2	2
models.sort_values(by='KFoldScore', ascending=False)	2	2
df.drop(df[pd.isnull(df['Embarked'])].index, inplace=True)  # Get index of points where Embarked is null	2	2
data['Fam_Size'] = data.Parch + data.SibSp	2	2
train['Child'][train['Age'] < 18] = 1	2	2
train_df.drop(['Cabin'], axis=1, inplace=True)	2	2
tmodel.add(Dense(units=1))	2	2
np.sum(s)	2	2
"train[[""Embarked"", ""Survived""]].groupby(['Embarked']).mean().sort_values(by='Survived', ascending=False)"	2	2
test_df['Age']=data_df['Age'][891:]	2	2
master_df['deck'] = master_df['deck'].apply(change_deck_entries)	2	1
"test_df['Sex'] = test_df.Sex.apply(lambda x: 0 if x == ""female"" else 1)"	2	2
test.loc[v[i], 'MotherOnBoard'] = 1	2	2
df_test['Sex']	2	2
full_data['Title'] = full_data['Title'].replace('Mme', 'Mrs')	2	2
train_df.dtypes.reset_index()	2	1
train.loc[train['Family'] > 4, 'FamilyType'] = 'large'	2	2
concat['Embarked'].fillna('0')	2	2
data_val.head()	2	1
plt.boxplot(results)	2	1
res.head()	2	2
classifier_update['Score'] = np.round(classifier_update['Score'], decimals = 4)	2	2
data_test['Fare'].fillna(data_test['Fare'].mean(), inplace = True)	2	2
combined_train_test['Age_Category'] = le_age.transform(combined_train_test['Age_Category'])	2	2
"all_data['Cabin'] = all_data['Cabin'].fillna(""Undefined"")"	2	2
out['Survived'] = Y	2	2
new_data_train.drop('Survived', axis=1)	2	2
df_train['Ticket']	2	2
plt.hist(titanic['Age'],bins='auto')	2	1
dataset.loc[(dataset['Age'] > 21) & (dataset['Age'] <= 25), 'Age'] = 2	2	2
combined_train_test['Fare'].groupby(by = combined_train_test['Pclass']).mean().get([3]).values[0]	2	2
"test_df[""ChildSex""] = test_df[""Child""].map(str) + test_df[""Sex""]"	2	2
acc_svc.mean(), acc_knn.mean(), acc_log.mean(),	2	2
df_test.head(3)	2	2
holdout.drop(['PassengerId'],axis=1)	2	1
train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean()    #各组的存活率	2	1
"testing.drop(""PassengerId"", axis=1).copy()"	2	2
df.set_index('Survived')	2	2
"test[""Sex""].unique()"	2	1
df_full['Pclass'].isin([1, 2])	2	1
difference.drop(['Training Score','Test Score'],axis=1)	2	1
train['Female_Friends_Survived'] = 0	2	2
"titanic_df[""Child""] = titanic_df[[""MasterMiss"", ""Age"", ""Sex""]].apply(get_child, axis = 1)"	2	2
df.Age.fillna(r(), inplace=True)	2	1
cluster_df['cluster'] = clusters	2	1
all_data['Embarked'].fillna('S', inplace = True) #all_data['Embarked'].mode() doesn't work because of NAs	2	2
in ['Ms','Mlle','Miss']:	2	2
in ['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona']:	2	1
train['Salutation'] = train['Salutation'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	2	2
"train_df[""predictions""] = predictions"	2	1
df_train.sample(5)	2	2
full_data.loc[(full_data['Age'] > 16) & (full_data['Age'] <= 32), 'Age'] = 1	2	2
name_row['Title'].copy()	2	1
dfFull.loc[dfFull.Fare <= fareMean,'Fare']=0	2	2
full.Fare.fillna(full[full.Pclass==3]['Fare'].median(),inplace=True)	2	2
nullData.drop('Cabin',1)	2	1
ftest.values # Creats an array of the test data	2	2
xn_train.shape, xn_test.shape, yn_train.shape, yn_test.shape	2	2
dfTest.info()	2	2
test.loc[test[(test['Title']=='Mrs')&(test['Age'].isnull())].index, 'Age'] = mrs_age_mean	2	2
"test['mrs'] = np.where(test['Name'].str.contains(""Mrs. ""), 1, 0)"	2	1
testframe.shape	2	2
dftr['Survived']	2	1
train_filtered.Age.apply(lambda x: train_age_hist_dist.rvs() if np.isnan(x) else x)	2	2
train['Cabin_Lett'] = train['Cabin'].apply(lambda x: str(x)[0])	2	2
dataset.loc[(dataset['Name_length'] > 23) & (dataset['Name_length'] <= 28), 'Name_length']  = 1	2	2
train_data['Sex'] = train_data['Sex'].map({'male':0, 'female':1})	2	2
dfFull['ageBins'] = pd.cut(dfFull['Age'],list(range(0,80,5)))	2	2
model.add(Dense(54, activation='relu'))	2	1
ax[0].set_title('Survived (male)')	2	2
train.Fare.mean()	2	2
test['is_alone'] = [1 if i<2 else 0 for i in test.family_size]	2	2
data.loc[ data['Age'] > 64, 'Age']	2	2
np.where(pred_probs >= threshold)	2	1
"test_df.drop(['Ticket','Name','family_size',""Fare"",'Cabin'], axis=1, inplace=True)"	2	2
df_test['Age'].mean()	2	2
scores.astype(float)	2	1
ticket.groupby(['Ticket'])	2	2
"df_data[""Fare""]=df_data[""Fare""].fillna(np.median(df_data[""Fare""]))"	2	2
all_data.drop('PassengerId', axis=1)	2	2
train_df['Family'].loc[train_df['Family'].isin([1,2,3])] = 'With_family'	2	2
le.transform(df['Title'])	2	2
test.Age.astype(int)	2	2
data.loc[ data['Fare'] <= 7.91, 'Fare'] = 0	2	2
temp['Survived'] = prediction	2	2
"combine[""Deck""] = combine['Cabin'].apply(extractDeck)"	2	2
missingdata.head(5)	2	1
dfTest[['Pclass']]	2	2
"data[""Name""] = data[""Name""].str.replace(""Mme"",""Mrs"")"	2	1
train_df['Pclass'].unique()	2	2
combined_features.reset_index(inplace=True)	2	1
test_df['IsHusband1'] = test_df['Male1']	2	2
"df[""Miss""] = df[""Name""].apply(lambda x: x.count(""Miss.""))"	2	2
trainSTD2['EmbarkedS'] = trainSTD[:,5]	2	1
test.loc[test[(test['Title']=='Mrs')&(test['Age'].isnull())].index, 'Age'] = dr_age_mean	2	2
x_train_preprocessed.head()	2	1
data['Embarked'].fillna(('S'), inplace=True)	2	2
train.set_value(index,'Embarked_C',1)	2	2
titanic_df['FareClass'].isnull().sum()	2	1
x_train.values # Creates an array of the train data	2	2
test['Age'].fillna(train['Age'].mean(), inplace=True)	2	2
dfTrain.groupby('CabinCat').Survived.mean().plot(kind='bar')	2	2
"train.drop(""Cabin"", axis=1)"	2	2
"train_df[""Sex""].value_counts()"	2	2
df_gs['Survived'].value_counts()	2	2
ax[0].set_title('Proportion of Passengers Per Pclass')	2	2
"data_raw[""Survived""]"	2	2
test_na.drop(test_na[test_na == 0].index).sort_values(ascending=False)[:30]	2	2
train_X.values[train_index], train_X.values[test_index]	2	2
df_train.dropna(inplace=True)	2	2
NameSplit.head()	2	2
titanic_test_x.values	2	2
tt.to_csv('G.csv',index=False)	2	2
dataset['Age_bin'] = pd.cut(dataset['Age'], bins=[0,12,20,40,120], labels=['Children','Teenage','Adult','Elder'])	2	2
newDF.shape	2	1
ftest['Embarked'] = ftest['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	2	2
heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,	2	2
fill_age_df.head(2)	2	1
train.drop(train.columns[[6,9]], axis=1)	2	2
test['isAlone'] = 0	2	2
temp[2] = 0	2	1
"train[""Survived""][:-120]"	2	2
data.loc[(data['Fare'] > 30) & (data['Fare'] <= 100),'Fare'] = 2,	2	2
rcParams['figure.figsize'] =5,4	2	1
in ['SibSp', 'Parch', 'Pclass']:	2	1
model.add(Dense(50))	2	1
dfTrain.groupby('Title')['Survived'].sum()	2	1
df_train['Pclass'],	2	2
test_df['Family'].loc[test_df['Family'].isin([1,2,3])] = 'With_family'	2	2
df['Cabin']:	2	2
all_data['Type'] = all_data['Name'].apply(get_type_from_name)	2	2
"df[""Title""] = df.Name.str.replace('(.*, )|(\\..*)', '')"	2	2
df['title'] = df['title'].replace('Mlle.', 'Miss.')	2	2
df.iloc[event.ind[0]]['origin']	2	2
df['Parch']	2	2
concat_reduce.iloc[:891].copy()	2	2
fare.count() / data[(data.survived == 1)].fare.count()	2	1
x['female']	2	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Sir', 'Jonkheer', 'Dona'], 'Royal')	2	2
tree_count_df.mean(axis=1),	2	1
data['Embarked'] = number.fit_transform(data['Embarked'].astype('str'))	2	2
train_df.drop(['Cabin', 'family_size','Ticket','Name', 'Fare'], axis=1, inplace=True)	2	2
test.drop(['Name','SibSp','Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],axis=1)	2	2
X_train.values[train_index], X_train.values[test_index]	2	2
"X[""Survived""]"	2	2
"res_c[""param_n_estimators""].astype(np.float32)"	2	1
svm_scores.mean()	2	2
"train_raw.describe(include=""all"")"	2	2
test['EmbarkedInt'] = test['Embarked'].map(embark_to_int)	2	2
v.append(i)	2	1
df_full['InCabin'] = df_full['Cabin'].apply(lambda x: 0 if type(x) == float else 1)	2	2
"df_test['Cabin'].fillna(df_test.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	2	2
train_df.groupby('Embarked').size()	2	2
sml.feature.fillna(a='Cabin', new='Z')	2	2
td['Age'].plot.hist()	2	1
sub['EMBARKED'] = sub['EMBARKED'].astype('category')	2	1
train_x['Title'] = np.unique(train_x['Title'], return_inverse=True)	2	2
"test['Ticket_Lett']=test['Ticket_Lett'].replace(""1"",1).replace(""2"",2).replace(""3"",3).replace(""0"",0).replace(""S"",3).replace(""P"",0).replace(""C"",3).replace(""A"",3)"	2	2
"df.query(""ischild == 0"").Age.dropna().astype(np.uint8).value_counts().sort_index().plot(kind=""bar"", color=""b"")"	2	1
"dataset.loc[(dataset[""Fare""] > 7.75) & (dataset[""Fare""] <= 7.91), ""Fare""] = 1"	2	2
dataset['Name_length'] = train['Name'].apply(len)	2	2
df_pred.count()	2	1
train['Fare'].groupby(train['Pclass'])	2	2
df_train.head(100)	2	2
"df_data[""Title""] = df_data.Name.str.extract(' ([A-Za-z]+)\.', expand=False)"	2	2
"processed_data[""Age""]"	2	1
output.to_csv('submission_madhu_rf.csv',index_label=False,index=False)	2	2
"i[1][""Ticket""].lower()"	2	1
df.loc['Store 2']	2	2
"data_df['Last_Name'] = data_df['Name'].apply(lambda x: str.split(x, "","")[0])"	2	2
df_raw['Title'] = df['Title']	2	2
full.loc[(full.Title==i)&(full.Pclass==j)&(full.Parch==g)&(full.Survived.notnull()),'Survived'].mean()>=0.5:	2	2
dataset.loc[dataset.Cabin =='T','Cabin'] = np.NaN	2	2
row['Name'].split(',')[0]	2	1
full.Age.fillna(999,inplace=True)	2	2
"data[""Fare""] = data[""Fare""].fillna(data[""Fare""].dropna().median())"	2	2
"df_test_tmp[""Age""].fillna(df_test_tmp[""Age""].median(), inplace=True)"	2	2
"df_train[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	2	2
train_df['Title'] = train_df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	2	2
"train_dataset.drop(""Survived"",axis=1)"	2	2
titanic_data['IsAlone'] = 0	2	2
train_df.drop(['Ticket', 'Cabin'], axis=1, inplace=True)	2	2
pred_dict['probabilities'][class_id]	2	2
"dataset[""Title""] = dataset[""Title""].replace(['Miss', 'Mme','Mrs','Ms','Mlle'], 'Woman')"	2	2
"test_df.drop([""Parch"",""SibSp""],axis=1)"	2	2
my_imputer.transform(imputed_one_hot_X_test_plus)	2	1
train_data.describe(include='all')	2	2
train_df.query('Survived==1')	2	1
train['Age']=train['Age'].fillna(train['Age'].mean())	2	2
train.iloc[:,0]	2	2
"traindata[""Survived""]"	2	1
dfFull.loc[indEmb,'Embarked'] = predictedEmbarked[0]	2	2
together.shape	2	1
train.copy(deep=True)	2	2
data_all['Title'] = data_all['Title'].replace('Ms', 'Miss')	2	2
training.drop('PassengerId', axis=1, inplace=True)	2	2
X_data.dropna()	2	2
data_all['Cabin_D'] = (data_all['Cabin']=='D')+0	2	2
train_df['IsAlone'] = 0	2	2
data_all['Cabin'] = data_all['Cabin'].apply(lambda x: x.split()[0][0])	2	2
test_df.drop(['Cabin'], axis=1, inplace=True)	2	2
train_df_male_sex.groupby(age_groups_male)['Survived'].count()*3	2	2
tem.count() > 1:	2	2
X_data.values	2	2
MLA_compare.loc[row_index, 'MLA AUC'] = auc(fp, tp)	2	2
my_submission.to_csv('submission-160518.csv', index=False)	2	2
dataset['FamilySize'] = dataset.Parch + dataset.SibSp + 1 # 1 for self	2	2
full.drop('Sex',axis=1,inplace=True)	2	2
corrmat.nlargest(k, 'Survived')['Survived'].index	2	2
titanic_final.head()	2	1
filtered.loc[filtered.age == filtered.age.min()]	2	1
df_train.drop(['PassengerId'],axis=1)	2	2
kwargs.get('col', None)	2	1
dataset['CategoricalFare'] = dataset['CategoricalFare'].astype(int)	2	2
titanic['Title'].value_counts()	2	2
"df_train[""Deck""] = df_data['Deck'][:891]"	2	2
"df_train[""Embarked""] = df_data['Embarked'][:891]"	2	2
df_submission.isnull().sum()	2	1
X_train['Family'] = X_train['SibSp'] + X_train['Parch']	2	2
cv_score.mean(), cv_score.std()	2	1
test['Fare'].fillna(stat.mode(test['Fare']),inplace=True)	2	2
only_Survived['Survived'].count()	2	2
np.multiply(-y, np.log(sigmoid(X * theta.T)))	2	2
titanic.loc[titanic['Sex'] == 'male', 'Sex'] = 0	2	2
data.append(row[0:])	2	1
df['Age'] = df.Age.fillna(df.Age.median())	2	2
combined_train_test['Ticket_Number'].fillna(0, inplace = True)	2	2
train.drop(drop_list, axis = 1)	2	2
train['Cabin'] = LabelEncoder().fit_transform(train.Cabin)	2	2
tr2.apply(lambda r:getLName(r['Name']), axis=1).unique()	2	2
train_df1.head()	2	1
training_set.isnull().sum()	2	2
ax[1].set_title('Survived=1')	2	2
item['Age']	2	1
df_full.drop('Age', axis=1)	2	2
X.drop('Survived',axis=1,inplace=True)	2	2
train_data.drop('Name', axis=1, inplace=True)	2	2
train['Parch']	2	2
label_positions.append(1 + offset)	2	2
data['PassengerId']	2	2
test_df['Family'] = test_df['Parch'] + test_df['SibSp']	2	2
data['Name'] = data['Name'].apply(lambda x: replacement.get(x))	2	2
df.loc[df['Sex'] == 'male','Sex'] = 1	2	2
"train_df[[""Title"", ""Age""]].groupby([""Title""]).mean()"	2	1
sns.boxplot(x='Title', y='Age', data=data)	2	1
train_df.groupby('Sex').size()	2	2
submission_test.head()	2	1
data['TicketHead'] = data.Ticket.str.extract('(\D*)', expand=False)	2	2
df.loc[df['Embarked'].isnull()==True, 'Embarked'] = 'S'	2	2
dataset['Age'].describe()	2	2
titanic_data['Survived']	2	2
"data[""TitleClean""] = data[""Name""].str.extract('(\w*\.)', expand=True)"	2	1
df.loc[ (df.Fare.isnull())&(df.Pclass==1),'Fare'] =np.median(df[df['Pclass'] == 1]['Fare'].dropna())	2	2
combined['Age'] = combined['Age'].astype(int)	2	2
mean_ages[3]=np.average(df[df['Title'] == 'Master']['Age'].dropna())	2	2
ftrain['Sex'] = ftrain['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	2	2
notNullData.drop('Cabin',1)	2	1
test_df.join(classSex_dummies_test)	2	2
processed_data['title'] = processed_data['title'].replace('Mme', 'Mrs')	2	2
X['Cabin'].str.contains('D')*1	2	2
train_x.dropna(inplace=True)	2	2
testData[['PassengerId']]	2	1
np.empty((len(gamma_range),len(c_range),))	2	2
model.add(Dense(8, input_dim=(8)))	2	1
corr.values	2	2
dataframe.copy()	2	1
"train_set.loc[train_set[""Sex""] == ""male"", ""Sex""]   = 0"	2	2
train['Parch'].value_counts()   # 各组的总人数	2	1
train_data['Parch'],	2	1
regressor.add(LSTM(units=50, return_sequences=True))	2	1
train.drop('Survived',axis=1).values	2	2
Ticket.append('X')	2	2
ds.Age.std()	2	1
data_df.groupby('Ticket'):	2	2
"titanic_df[""FamilySize""] = titanic_df[['SibSp', 'Parch']].apply(get_family_size, axis=1)"	2	2
processed_data['has_cabin'] = pd.Series(raw_data['Cabin'].notna(), dtype=int)	2	2
"dataset.loc[(dataset[""Fare""] >24.479) & (dataset[""Fare""] <= 31), ""Fare""] = 5"	2	2
rows_to_predict.head(5)	2	1
test_single.mean(axis=1)	2	2
train['Title'] = train['Name'].map(getTitle)	2	2
X.reset_index(inplace=True)	2	1
"in [""embarked"", ""sex"", ""pclass""] :"	2	1
row['Age'] < 32:	2	2
validation.loc[master_mask, 'Age'] = validation.loc[master_mask, 'Age'].fillna(validation[validation.Title == 'Master'].Age.mean())	2	2
df_test.isnull().sum()                 #compute number of missing values for each att	2	1
processed_data['age'] = processed_data['age'].apply(cutAge)	2	2
data['Sex'] = labelencoder_y.fit_transform(data['Sex'])	2	2
titanic_df['title'] = titanic_df['Name'].apply(get_title).apply(title_map)	2	2
df.as_matrix()	2	2
test_df.drop('Alone', axis=1, inplace=True)	2	2
"test_df[""ClassSex""] = test_df[""Pclass""].map(str) + test_df[""Sex""]"	2	2
training.isnull().sum()	2	2
"rates.loc[row, ""Percentage""] = round((rates.loc[row,""PassengerId""]/num_females)*100,2)"	2	1
concat['Title'] = titles	2	2
y.copy()	2	2
"df_all['Age_cut']=pd.cut(df_all[""Age""], bins=age_bins)"	2	1
np.sum(rank.Predicted.values == rank.Real.values)	2	2
df['AgeIsNull'] = pd.isnull(df.Age).astype(int)	2	2
full_data['Age'].std()	2	2
train_filtered.Family.loc[(train_filtered.SibSp!=0) | (train_filtered.Parch!=0)] = 1	2	2
dfTrain[['Pclass','Sex','ParchCat','Embarked','Fare','CabinCat']]	2	2
train_df['Name']:	2	2
test_mod.reset_index(inplace = True)	2	1
male_record.head()	2	1
pd.isnull(column)	2	1
combined_train_test['Ticket_Number'] = combined_train_test['Ticket'].apply(lambda x: pd.to_numeric(x, errors='coerce'))	2	2
concat.shape	2	2
dataset['Fare'] = dataset['Fare'].fillna(dataset['Fare'].mean())	2	2
fullName[0]	2	2
"df_data[""Title""] = df_data[""Title""].replace(['Jonkheer','Don'],'Mr')"	2	2
"dataset[""Title""] = dataset[""Title""].replace(['Rev'], 'Religious')"	2	2
all_data.isnull().sum().sort_values(ascending=False)	2	1
"test.loc[test[""Title""] == ""Rev"", ""Title""] = 'Rare Title'"	2	2
testset1.loc[testset1['Embarked']=='C','Embarked'] = 2	2	2
stats.skew(chi_squared_df2)	2	2
train.loc[v[i], 'FatherSurvived'] = temp[temp.SexInt==1].Survived.sum()	2	2
test['Deck'] = test['Deck'].fillna('Z')	2	2
titanictest.info()	2	2
train_filtered['Embarked'] = np.where(train_filtered['Embarked']=='C', 0, np.where(train_filtered['Embarked']=='Q',1,2))	2	2
dataset.loc[(dataset['Age'] > 17) & (dataset['Age'] <= 21), 'Age'] = 1	2	2
df_train.groupby(['Pclass', 'Sex'])['Survived'].value_counts(normalize=True)	2	2
Xtest_noage[['Pclass', 'Sex', 'SibSp', 'Parch']]	2	1
name_row['Name'].copy()	2	1
train_data_orig.info()	2	2
predictions.append(1)  # survived	2	1
missing_age_df.shape	2	2
"test[""AgeCategory""].loc[train[""Age""].isnull()] = ""MissingData"""	2	2
concat_le.iloc[:891].copy()	2	2
comb2.head()	2	2
cluster_map_data['cluster'] = km_data.labels_	2	1
df['Title'] = df.Name.map(lambda n : get_title(n))	2	1
"df['Counts'] = """" # A trick to skip using an axis (either x or y) on splitting violinplot"	2	2
scaler.transform(test_set[predictors])	2	2
full_data.head()	2	2
train_df[['IsAlone','Survived']].groupby(['IsAlone'], as_index=False).mean()	2	2
train_df.loc[(train_df['Age'] > 16) & (train_df['Age'] <= 32), 'Age'] = 1	2	2
df_full['Fare'].fillna(df_full['Fare'].median(), inplace=True)	2	2
"sns.boxplot(x=""Pclass"", y=""Fare"", hue=""Survived"", data=train)"	2	2
piP_list.append(pi[label]*np.exp(-0.5*xTsigmax)/np.sqrt(dS))	2	1
reader_train[['Pclass', 'SibSp', 'Parch', 'Fare']]	2	2
combined_train_test.loc[(combined_train_test.Age.isnull()), 'Age'] = fill_missing_age(missing_age_train, missing_age_test)	2	2
dfTest[['Pclass','Sex']]	2	2
df_all.Fare.skew()	2	1
train['Cabin'].value_counts().head()	2	2
x['Group_Size']	2	1
"train_two[[""Pclass"", ""Sex"", ""Age"", ""Fare"", ""SibSp"", ""Parch"", ""family_size""]].values"	2	2
kwargs.get('rowVar', None)	2	1
data.drop('Embarked',axis=1,inplace=True)	2	2
train.loc[v[i], 'Age']<19:	2	2
combined_train_test['Age_Category'] = combined_train_test['Age'].map(age_group_cat)	2	2
train_data_orig.describe()	2	2
all_data.drop('CabinNum1', axis=1)	2	2
pd.pivot_table(titanic_df, values = 'Survived',              index = ['Female', 'MasterMiss', 'SibSpBinary', 'ParchBinary'],              columns=['Pclass', 'Embarked'],              aggfunc=np.sum)	2	2
df.loc[mask_w, 'Woman'] =1	2	1
submission['Survived'] = vote_preds_test[:,0]	2	2
data_raw.describe(include='all')	2	2
df['Family_size'] = df['SibSp']+df['Parch']+1	2	2
dataset['Fare_Bin']=pd.qcut(dataset.Fare, 4, labels=['very_low','low','high','very_high'])	2	2
feature_dataframe.head(10)	2	2
apts['shenzhen']=70000	2	1
combined_train_test['Age_Category'],	2	2
pd.isnull(x['Fare'])	2	2
df.groupby(['Sex', 'Pclass', 'title']).median().reset_index()[['Sex', 'Pclass', 'title', 'Age']]	2	2
"train.drop(columns=[""Survived""])[-120:]"	2	2
X_test.drop(['Pclass_1','Sex_female','TitleGroup_Master','AgeRange_15-','FareRange_10-','Family_alone'], axis=1)	2	2
out.apply(pd.Series)	2	1
"train_df[""predictions_proba""] = np.round(predictions_proba, 2)"	2	1
"new_data[""Age""] = new_data[""Age""].astype(int)"	2	1
x.head(5)	2	2
dataset.loc[(dataset['FamilySize'] > 0) & (dataset['FamilySize'] <= 3), 'Family'] = 'small'	2	2
full.drop('Ticket',axis=1,inplace=True)	2	2
titanic_training_df.head()	2	1
train_df.Age.apply(age_category)	2	1
data.loc[mask_c, 'Child'] =1	2	1
df.tail(5)	2	2
"submission.to_csv(""Titanic_Baseline_Model_Submission.csv"", index=False)"	2	2
"sns.boxplot(data = X_train, x = ""Age Group"", y = ""Age"");"	2	2
df['Title'] = df['Title'].map(title_map)	2	2
all_data['Age'] = data.transform(lambda x: x.fillna(x.mean()))	2	2
input['Age'].fillna(input['Fare'].dropna().median(), inplace=True)	2	2
accs.append(train_accuracy)	2	1
X['Embarked'] == 'S'	2	2
train['Pclass'] = train['Pclass'].astype('category')	2	2
combine_df.head(5)	2	2
df_train['Age'].isnull().sum(), df_test['Age'].isnull().sum()	2	1
trainingData.head()	2	2
"dataset[""Cabin""] = dataset[""Cabin""].where(dataset[""Cabin""].isnull(), 1).fillna(0)"	2	1
data_to_submit.astype(int)	2	2
combined_train_test.drop(['Name', 'PassengerId', 'Embarked', 'Sex', 'Title', 'Fare_Category', 'Family_Size_Category', 'Age_Category', 'First_Name', 'Last_Name', 'Original_Name', 'Name_Length_Category'], axis = 1, inplace = True)	2	2
Ttest.head()	2	2
test.drop('Cabin',axis=1)	2	2
data['Title'] = data['Name']	2	2
train['Social_name']=[search_pattern(counter) for counter in range(train.shape[0]) ]	2	1
row['Embarked'] == 'S' else 0	2	1
test_df['Honoric'].value_counts().plot(kind='bar', fontsize=12, figsize=(8, 3))	2	1
"X_train.drop(""Survived"", axis = 1)"	2	2
train['Age'] = train[['Age','Pclass']].apply(fill_age,axis=1)	2	2
dataframe.drop(feature,axis=1)	2	2
plt.boxplot(resultsAccuracy)	2	2
test['Sex'] = test['Sex'].apply(lambda x: 1 if x == 'female' else 0)	2	2
processed_data['male'] = pd.Series(raw_data['Sex'] == 'male', dtype=np.float64)	2	2
train_df['Title'] = train_df['Title'].map(title_mapping)	2	2
poly.transform(X_transformed_scaled)	2	2
train['Embarked_C'] = 0	2	2
raw_data_1['Cabin'] = cabin_num(c1)	2	2
le.transform(dfTrain[feature])	2	2
data.loc[data['Sex']==0, 'SexByPclass'] = data.loc[data['Sex']==0, 'Pclass']	2	2
dataset.corr()['Survived']	2	2
all_gain.append(1-ssd(a_g,y))	2	1
train.drop('Ticket', inplace= True, axis = 1)	2	2
data['Fare'].fillna(-1, inplace=True)	2	2
full.loc[full['Age'].isnull(),'Age'] = ages	2	2
"output[""Survived""]=predictions"	2	2
"train.loc[train[""Title""] == ""Sir"", ""Title""] = 'Rare Title'"	2	2
X_Age['Age'] = X_Age['Age'].apply(lambda x: 10*(x//10))	2	1
ax[0].set_yticks(range(0, 110, 10))	2	2
"train[""Family""] = train[""SibSp""] + train[""Parch""]"	2	2
full_data.loc[(full_data['Fare'] > 7.91) & (full_data['Fare'] <= 14.454), 'Fare'] = 1	2	2
combine_df['Fare'] = combine_df['Fare'].fillna(combine_df.groupby(by=combine_df['Pclass'])['Fare'].transform('mean'))	2	2
data_copy.loc[:, 'Age'] = data_copy['Age'].fillna(data_copy['Age'].median())	2	2
test.fillna(method='ffill')	2	2
pd.isnull(test_df).sum()	2	2
testd.head()	2	1
plt.hist(train.SibSp)	2	2
X_n_test.shape	2	2
data['Title_Code'] = le.fit_transform(data['Title'])	2	2
"test.fillna({""Embarked"": ""S""})"	2	2
"new_data[""Name""] = new_data[""Name""].str.replace(""Major"",""Mr"")"	2	1
"test[""AgeGroups""] = pd.cut(test.Age,labels=labels, bins=bins)"	2	2
df.loc[(df['Age']>48)&(df['Age']<=64),'Age_band']=3	2	2
to_test['Title'] = np.unique(to_test['Title'], return_inverse=True)	2	2
df.Embarked.fillna('S', inplace=True)	2	2
train['Male_Friends_NotSurvived'] = 0	2	2
axes[0].set_yticks(np.arange(0.0,1.1,0.1))	2	1
df_1.dropna(axis=0)	2	1
data['Title'] = data.Title.map(Title_Dictionary)	2	2
dfFull.loc[dfFull.SibSp > 2,'SibSpCat'] = 3	2	2
sns.boxplot(x='Pclass', y='Fare', hue='Survived', data=data1, ax=ax1)	2	2
ocp_info.keys():	2	1
title_arr.append('Rare')	2	1
df.drop(labels=['Name', 'Ticket'], axis=1)	2	2
df['miss_perc'] = (df[df.columns[1]]/(df[df.columns[0]] + df[df.columns[1]]))	2	1
"df[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	2	2
dfFull.loc[nullFares]	2	2
df.loc[df['Age'] <= 19, 'age_cat'] = 0	2	2
"famele_survive[""Age""]"	2	1
test_df['Parch']	2	2
data_all['NumFamily'] = data_all['SibSp'] + data_all['Parch']	2	2
"model.add(Dense(32, activation=""relu"", input_dim=11))"	2	2
df.loc[df['FamilySize']==1, 'IsAlone'] = 1	2	2
mod_df['Cabin'] = df['Cabin'].fillna('unknown')	2	2
df.isnull()	2	2
X_data.drop(['PassengerId', 'Survived'], axis=1)	2	2
df3['Sex'].value_counts()	2	1
train['Greeting'] = LabelEncoder().fit_transform(train.Greeting)	2	2
temp.pop(1) #remove name	2	1
df_train.describe(include = 'all')	2	1
ensembles.append(('RF', RandomForestClassifier()))	2	2
params['X_test'],	2	1
x_train.fillna(-999, inplace = True)	2	2
train['Age'].fillna(train['Age'].mean(),inplace=True)	2	2
train_df['fare_group'] = train_df['calculated_fare'].map(fare_group)	2	2
df['is_single'] = np.where(np.logical_and(df['SibSp']==0, df['Parch']==0), 1, 0)	2	2
full_df['AgeFill'].hist(ax=axs[1], bins=16)	2	1
df['Title'] = titles	2	2
train[['PassengerId','Survived']]	2	2
full.loc[(full.Title==i)&(full.Pclass==j)&(full.Parch==g),'TPP']=4	2	2
full.loc[(full.Title==i)&(full.Pclass==j)&(full.Parch==g),'TPP']=2	2	2
full.loc[(full.Title==i)&(full.Pclass==j)&(full.Parch==g),'TPP']=3	2	2
full.loc[(full.Title==i)&(full.Pclass==j)&(full.Parch==g),'TPP']=1	2	2
"train[""CabinBool""] = (train.Cabin.notnull().astype(""int""))"	2	2
"dataset.loc[dataset[""Fare""] > 69.487, ""Fare""] = 7"	2	2
data.head()['SibSp']	2	2
train.iloc[:,1:]	2	2
df['CabChar'] = cab_char.astype('category')	2	2
feature_list.append('np'+str(i))	2	1
"train[[""Name_length"", ""Survived""]].groupby(['Name_length'],as_index=False).mean()"	2	2
train.loc[train['Sex']=='female', 'Sex'] = 0	2	2
test_df['Family'].loc[test_df['Family'] == 0] = 'Alone'	2	2
"x[""Age""] > 0:"	2	1
full.loc[(full.Age==999)&(full.Title==i),'Age']=full.loc[full.Title==i,'Age'].median()	2	2
out['Survived'] = d['Survived']	2	2
"results[""wrong_prediction_percetage""] = (100 * results[""wrong_label_count""]) / results[""label_count""]"	2	1
"X_train.drop(""Name"", axis = 1)"	2	2
df_test['Fare'] = df_test.groupby(['Pclass'])['Fare'].apply(lambda x: x.fillna(x.median()))	2	2
dataset.Fare.fillna(8.05, inplace=True)	2	2
"test_df['HasCabin'] = test_df[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	2	2
titanic_df['IsAgeNaN'].loc[ titanic_df['Age'].notnull() ] = 0	2	2
features_imp['importance'] = model.feature_importances_	2	1
combined.sample(5)	2	1
"training_targets[""target""],"	2	1
titanic_test['Embarked'] = titanic_test['Embarked'].fillna('S')	2	2
np.mean(scores) == highest_score:	2	2
test.loc[v[i], 'Male_Friends_NotSurvived'] = temp_df[(temp_df.Sex=='male')&(temp_df.Survived==0)].shape[0]	2	2
test_df.drop('Sex', axis=1, inplace=True)	2	2
all_data['CabinType2'] = all_data['Cabin2'].apply(get_cabin_type)	2	2
train_df['NameLength'] = train_df['Name'].apply(len)	2	2
train.loc[(train['Family'] > 1) & (train['Family'] < 5), 'FamilyType'] = 'small'	2	2
"titanic_df[""Man""] = titanic_df[[""Sex"", ""Child""]].apply(man, axis=1)"	2	2
train_data['CategoricalAge'] = pd.cut(train_data['Age'], 5)	2	2
new_data_train['Survived']	2	2
pd.merge(staff_df, student_df, how='inner', left_on=['First Name','Last Name'], right_on=['First Name','Last Name'])	2	2
train['family_size'] = train.SibSp + train.Parch+1	2	2
XEval['Pclass'] = XEval['Pclass'] - 1	2	2
"train.loc[train[""Title""] == ""Capt"", ""Title""] = 'Rare Title'"	2	2
train[['Embarked', 'Survived']].groupby(['Embarked']).count().sort_values(by='Survived', ascending=False)	2	2
train_data['Embarked'] = train_data['Embarked'].fillna(2)	2	2
whole.set_value(idx, 'Age', np.random.randint(1,15,1)[0])	2	1
train_df[['Embarked', 'Survived']].groupby(['Embarked']).count()	2	1
models['set3'] = {}	2	1
dataset['Ticket']=Ticket	2	1
test_df.tail()	2	2
"train_instance[""Survived""]"	2	1
df.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)	2	2
combine['Title'] = combine['Title'].replace('Mlle', 'Miss')	2	2
"df_train[""Title""] = df_train.Name.str.extract('([A-Za-z]+)\.', expand=False)"	2	1
df_test_output['Survived'] = df_test_output['Survived'].astype(int)	2	2
submission.to_csv('../output/submission.csv', index=False)	2	2
np.sum(first - second) / (len(X))	2	2
X.loc[X['Sex']=='female','Sex']=1	2	1
all_data['Type'] = all_data['Type'].replace('Mlle', 'Miss')	2	2
test.loc[v[i], 'ChildSurvived'] = temp[(temp.Age<19)&(temp.Survived==1)].shape[0]	2	2
col_data.isnull().sum()	2	1
train_validate_metrics.append(train_metrics, ignore_index = True)	2	2
train_df.groupby('Survived').Fare.hist(alpha=0.6);	2	2
merged.Survived.dropna().astype('int')#Converting without dropping NaN throws an error.	2	2
test['Age'].fillna(test['Age'].median() , inplace=True)	2	2
train_raw_data.shape[0]	2	2
"sns.boxplot(x=""Embarked"", y=""Age"", hue=""Pclass"", data=df)"	2	2
train['CategoricalAge'] = train.apply(lambda row: Age(row), axis=1)	2	2
"train_df[""Survived""]                       # data: Labels"	2	2
X['Age'].map(AgeCategory)	2	2
X_train_norm.head()	2	2
y.values[train_index], y.values[test_index]	2	2
df_test['TicketNumber'] = df_test['Ticket'].apply(lambda x: Ticket_Number(x))	2	2
data.Embarked.isnull().sum()	2	2
full.MPPS.fillna(4,inplace=True)	2	2
X_all.head()	2	1
models.append(model)	2	2
df.loc[ (df['fare_pp'] > 26.55), 'fare_pp_cat'] = 4	2	2
"test.drop(""Fare"", axis=1, inplace=True)"	2	2
"training[""Fare""].fillna(training.groupby(""Pclass"")[""Fare""].transform(""median""), inplace=True)"	2	2
test.drop(drop_list, axis = 1)	2	2
train['Age'] = train.apply(lambda r:plugAge(r), axis=1)	2	2
train['Family'] = train['Parch'] + train['SibSp']	2	2
all_data.drop('CabinNum3', axis=1)	2	2
test['Survived'] = Survived	2	1
"data[""TicketClean""].head()"	2	1
data_test['PassengerId'],	2	2
data.loc[data['Fare'] > 100,'Fare']= 3	2	2
train_data['Embarked'].isnull().sum()	2	2
combdata['SmallF'] = combdata['Fsize'].map(lambda s: 1 if  s == 2  else 0)	2	2
train_df.Embarked.dropna().mode()	2	2
final_test['PassengerId'] = test_df['PassengerId']	2	2
data['Age'].fillna(-1, inplace=True)	2	2
"train.drop([""CabinBool""],axis = 1)"	2	2
farehist.head()	2	2
train['Age'][(train['Title']=='Master')&(train['Age']>0)].mean()	2	2
train.Embarked.fillna('S', inplace=True) #filling in missing Embarked with S	2	2
axes[1].set_yticks(np.arange(0.0,1.1,0.1))	2	1
dfTrain[['Pclass','Sex']]	2	2
data['Title'].fillna(0, inplace=True)	2	2
test_df.drop(['Age','calculated_fare'],axis=1,inplace=True)	2	2
combdata['Age'].iloc[i] = median_age	2	2
test_data.Fare.mean()	2	2
freq.shape	2	2
train[['Pclass', 'Survived']].groupby(['Pclass']).mean().sort_values(by='Survived', ascending=False)	2	2
result['Alone'] =  result.Parch + result.SibSp	2	2
df_train['Age'][i] = 25	2	1
"df_train.loc[:, [""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"", ""Survived""]]"	2	2
test_cl.copy()	2	1
test_df.isnull().sum().sort_index()/len(df)	2	2
trainSet.head()	2	2
df['Deck'] = df['Cabin']	2	2
all_data.drop('Cabin2', axis=1)	2	2
parch_data['survived_n']+	2	1
titanic_df['FamilySize'] = titanic_df ['SibSp'] + titanic_df['Parch'] + 1	2	2
test['Sex'] = test['Sex'].map({'female': 0, 'male': 1}).astype(int)	2	2
full.loc[(full.Title=='Miss')&(full.Pclass==3)&(full.Parch==0)&(full.SibSp==0),'MPPS']=3	2	2
combined['Cabin'][combined.Cabin.isnull()] = 'U0'	2	2
"df.drop(""Sex"", axis = 1)"	2	1
test['MotherOnBoard'] = 0	2	2
data_all.head()	2	2
result['person'] = result[['Age','Sex']].apply(male_female_child,axis=1)	2	2
"data[""Sex""]=le.transform(data[""Sex""])"	2	2
train[['Age']].describe()	2	1
X['Fare'] = X['Fare'].astype(int)	2	2
in ['Mme','Mrs']:	2	2
score.append(accuracy_score(predicted, y_val))	2	1
df_gender_submission.to_csv('gender_submission.csv',index=False)	2	2
titanic_df['Embarked'].value_counts()	2	1
feature['Age'].fillna(feature['Age'].median(), inplace = True)	2	2
"test_set.loc[test_set[""Sex""] == ""male"", ""Sex""]   = 0"	2	2
df.loc[ (df['fare_pp'] > 7.73) & (df['fare_pp'] <= 8.05), 'fare_pp_cat'] = 1	2	2
training.head(50)	2	2
df.select_dtypes(['category']).columns	2	2
df_full.loc[df_full['FamilySize'] == 1, 'IsAlone'] = 1	2	2
data_raw.copy(deep=True)	2	2
full.Embarked.mode()	2	2
test.info() # We have 417 observations & 11 columns (no response 'Survived' column).	2	2
df_test['Initial']= df_test.Name.str.extract('([A-Za-z]+)\.') #lets extract the Salutations	2	2
"df[""Embarked_bool""] = df.Embarked.map(context2)"	2	2
"titanic_test_df[""PassengerId""],"	2	2
train['Cabin'] = train.Cabin.apply(lambda x: x[0] if pd.notnull(x) else 'X')	2	2
full_bin_final.head()	2	1
np.max(cv_data['test-Accuracy-mean'])	2	2
test_df['Sex'] = test_df['Sex'].map(genders_mapping).astype(int)	2	2
"test[""AgeGroups""] = test[""AgeGroups""].map(Age_map)"	2	2
test['Sex'].replace(['male','female'],[0,1], inplace=True)	2	2
train.loc[train['Embarked']=='Q', 'Embarked'] = 1	2	2
train['Sex'] = train['Sex'].astype(int)	2	2
batches.append(mini_batch)	2	1
"trainData[[""PassengerId"",""Survived"", ""Pclass"", ""Age"", ""SibSp"", ""Parch"", ""Fare""]].corrwith(trainData.Survived)"	2	2
grouped.Age.apply(lambda x:x.fillna(x.median()))	2	2
"train_df[""FareBand""] = pd.qcut(train_df[""Fare""],4)"	2	2
all_data.loc[all_data['PassengerId'] == passID, 'Family_Survival'] = 1	2	1
all_data.loc[all_data['PassengerId'] == passID, 'Family_Survival'] = 0	2	1
dataset.loc[dataset['Embarked']=='C','Survived'].value_counts()	2	2
"data.loc[data[""Sex""] == ""male"", ""Sex""] = 0"	2	2
combined_train_test['Last_Name'],	2	2
df_test['Fare_scaled'] = scaler.fit_transform(df_test['Fare'].values.reshape(-1,1), fare_scale_param)	2	2
combined.loc[(combined['Age'] > 16) & (combined['Age'] <= 32), 'Age'] = 1	2	2
train['Age'][(train['Title']=='Dr')&(train['Age']>0)].mean()	2	2
data['Embarked'] = StandardScaler().fit_transform(data['Embarked'].values.reshape(-1, 1))	2	2
full.loc[(full.Title=='Mr')&(full.Pclass!=1)&(full.Parch==0)&(full.SibSp==0),'MPPS']=2	2	2
train_df['Age'] = train_df['Age'].astype('O')	2	1
one_hot_encoded_dataset1.head()	2	2
all_data['Age'].fillna(all_data['Age'].mean(),inplace=True)	2	2
dfFull.loc[dfFull.Age <11,'Age'] = 0	2	2
data_p.loc[data_p['Age'].isnull(), :].drop('Age', 1)	2	1
"df[""Fare""].fillna(df[""Fare""].median(), inplace=True)"	2	2
data['Embarked'][i] = 0	2	2
data['Embarked'][i] = 1	2	2
data['Embarked'][i] = 2	2	2
train_df['Age_cats'] = np.ceil(train_df.Age / 18) # Creating Age ranges to split into categories	2	2
dfa['Sex'] = dfa['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	2	2
train['royalty'] = 0	2	2
"sns.boxplot(x=""Survived"", y=""Fare"", data=train_df[(train_df[""Sex""] == ""female"") & (train_df[""Fare""] < 100)], ax = axs[1][1])"	2	2
"new_data['Cherbourg'] = new_data[""Embarked""].str.contains(""C"").astype(int)"	2	1
train_df.drop(['Title_Rev','age_group_old','age_group_teenager','age_group_senior_citizen','Embarked_Q'],axis=1,inplace=True)	2	2
train.groupby(by = ['Sex','Pclass'])['Age'].describe()	2	1
train_ch.groupby('FamilyNum').sum()	2	2
test['Embarked']	2	2
"train[""Title""] = train[""Title""].map({""Mr"" : 0, ""Mrs"" : 1, ""Miss"" : 2, ""Master"" : 3, ""Others"" : 4})"	2	2
test_df['IsHusband'] = test_df['Male']	2	2
all_data.drop('CabinType2', axis=1)	2	2
"df[""Survived""].value_counts()"	2	1
test.drop('Embarked', axis=1)	2	2
np.mean(res_clf_lr), np.mean(res_knn),	2	1
dataset.loc[dataset['Pclass']==1,'Survived'].value_counts()	2	2
X_train['Survived'].copy()	2	2
model.add(Dense(200))	2	1
train.isnull().values.any(), test.isnull().values.any()	2	2
train['Sex'][(train['Sex']=='male')&(train['Survived']==1)].count()	2	2
train.Cabin.fillna('N').str[:1]	2	1
train_df_copy.head(3)	2	1
all_data.drop('CabinType4', axis=1)	2	2
titanic_train_data.info()	2	2
test['Age'] = test['Age'].fillna(0)	2	2
test_data['Embarked'] = test_data['Embarked'].map({'C':0, 'Q':1, 'S':2})	2	2
df['PassengerId'].values	2	2
tf_variables.append(tf.feature_column.numeric_column(index))	2	1
cabin[0] == ('A' or 'D' or 'E' or 'T'):	2	2
"df_data[""Title""] = df_data[""Title""].replace(['Capt','Major', 'Col','Rev','Dr'], 'Millitary')"	2	2
df.loc[(df.Age.isnull()),'Age'] = 0	2	1
df_train.tail(10)	2	2
"modifiedFlights[""AgeGroup""]"	2	1
models['set3']['cat_attrs'] = ['Pclass', 'Sex', 'Deck', 'Cabin_bool']	2	1
"test_data.loc[test_data.Parch == 9,""Parch""] = 6"	2	2
val_acc.append(vali / 50)	2	1
titanic_train.isnull().sum()	2	2
train.set_value(index,'Sex',0)	2	2
"test.loc[test[""Title""] == ""Mme"", ""Title""] = 'Mrs'"	2	2
tot.iterrows():	2	1
df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Honorable'),'Age']=45	2	1
train_df.Survived.astype(int)	2	2
train_predictors.head(20)	2	2
combined.loc[(combined['Age'] > 32) & (combined['Age'] <= 48), 'Age'] = 2	2	2
data_p.loc[~data_p['Age'].isnull(), :]['Age']	2	1
train.drop('PassengerId', axis=1)	2	2
full.groupby(['Title'])[['Age','Title']].mean().plot(kind='bar',figsize=(8,5))	2	2
mean_ages[1]=np.average(df[df['Title'] == 'Mrs']['Age'].dropna())	2	2
df['Surname'] = df['Name'].str.split(',').str[0]	2	2
data2_final_predicted_data.iterrows():	2	1
titanic_test['Age'] = titanic_test['Age'].fillna(titanic_test['Age'].median())	2	2
combine['Age'] = combine['Age'].astype(int)	2	2
ax.axes.get_yaxis().set_visible(False) # turn off the y axis label	2	1
test[['Age','Fare','Parch','SibSp','Pclass']]	2	2
"holdout[""Fare""] = holdout[""Fare""].fillna(train[""Fare""].mean())"	2	2
merged['Age_binned'] = pd.cut(merged.Age, cut_points, labels = label_names)	2	2
clean_test.head()	2	2
test_data.as_matrix()	2	2
"titanic_train[""Name""].apply(get_title)"	2	2
test['Embarked'].fillna('S', inplace=True)	2	2
"df.reindex(columns = [""PassengerId"", ""Survived""])"	2	2
df_train['PassengerId']	2	2
cnf_matrix.astype('float') / cnf_matrix.sum(axis = 1)[:, np.newaxis]	2	2
test_data['Embarked'].fillna('S', inplace=True)	2	2
raw_data.replace({'Sex': sex_mapping, 'Embarked': embark_mapping}, inplace=True)	2	2
X.loc[X['Embarked']=='C','Embarked']=0	2	1
test_df.loc[(test_df['Fare'] > 14.454) & (test_df['Fare'] <= 31), 'Fare'] = 2	2	2
"df[""Deck""][df[""Deck""] == ""E""] = 5"	2	2
td_survived.sample(10)	2	2
train['Cabin'].fillna(train.groupby('Pclass')['Cabin'].transform('median'), inplace=True)	2	2
y.iloc[train_index],y.iloc[test_index]	2	2
test_n.shape	2	2
traindf.shape	2	2
train['ChildSurvived'] = 0	2	2
df['fare_cat'] = df['fare_cat'].astype(int)	2	2
"new_data[""Name""] = new_data[""Name""].str.replace(""Lady"",""Miss"")"	2	1
ensembles.append(('ET', ExtraTreesClassifier()))	2	2
"fare_set_mod['Counts'] = """""	2	2
"dataset.loc[(dataset[""Fare""] > 7.91) & (dataset[""Fare""] <= 9.841), ""Fare""] = 2"	2	2
df_train[['Title','Age']].groupby(['Title'],as_index = False).mean().sort_values(by='Age')	2	1
test['age_cat'] = None	2	2
processed_data.reset_index().merge(one_hot, left_index=True, right_index=True, how='outer')	2	2
"dftotal.loc[index,""KSurvivalRate""]=dftotalindex.loc[nbours_index,""Survived""].mean()"	2	1
titanic_df.join(classSex_dummies_titanic)	2	2
"df_test_tmp.loc[:, [""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked""]]"	2	2
appended_data['Age'].mean()	2	2
"test[""AgeCategory""].loc[train[""Age""] > 50 ] = ""Old"""	2	2
"titanic_df.drop([""AdultF"",""AdultM"",""Girl"",""ChildSex""], axis=1, inplace = True)"	2	2
np.mean(outcome)	2	2
dataset['Ticket'].head()	2	2
titanic_df['Age'].describe()	2	2
test['TitleInt'] = test['Title'].map(title_to_int)	2	2
"train.loc[train[""Title""] == ""Mlle"", ""Title""] = 'Miss'"	2	2
titanic_test_df['Agecat'] = titanic_test_df[['Age','Sex']].apply(age_cat,axis=1)	2	1
dataset['AgeState']=np.where(dataset['Age'] >= 18, 'Adult', 'Child')	2	2
raw_data_1.fillna(raw_data.median(), inplace=True)	2	2
variable.quantile(0.25), variable.quantile(0.75)	2	2
dataset.loc[:, ['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	2	2
titanic_train.drop('Survived', axis=1)	2	1
sub['SEX'] = sub['SEX'].astype('category')	2	1
trainingData.drop(['Survived', 'is_test'], axis=1)	2	1
test_df['is_alone'] = [1 if i<2 else 0 for i in test_df.family_size]	2	2
titanic_df['top_cabin'] = titanic_df['Cabin'].astype(str).str[0]	2	1
complete_age.drop('Survived',axis=1)	2	1
ytrain.head()	2	1
data['Parch'] = data['Parch'].apply(lambda x: replacement.get(x))	2	2
corrmat.nlargest(k, 'Age')['Age'].index	2	1
df['Title']=df_raw['Name'].str.extract('([A-Za-z]+)\.', expand=False)	2	2
row['Embarked'] == 'C' else 0	2	1
"df_train[""Age""] = df_train[""Age""].fillna(df_train[""Age""].mean())"	2	2
feature_imp_sorted_et.head(top_n_features)['feature']	2	2
"test[""Age""].fillna(train.Age.mean(), inplace=True)"	2	2
c_g.append(np.sum(np.abs(a_g-y))/y.shape[0])	2	1
train.set_value(index,'Fare_average',1)	2	2
combine['Title'] = combine['Title'].replace('Ms', 'Miss')	2	2
train['Sex'] = lbl.transform(list(train['Sex'].values))	2	2
dataset['Name_length'] = dataset['Name'].apply(len)	2	2
s[0], s[4], s[-1]	2	2
appended_data['Age'].std()	2	2
"new_data[""Name""] = data[""Name""]"	2	1
train_df['Age'].loc[train_df['Age'].isnull()] = rand_train	2	2
train['SmallFamily']*train['Pclass']	2	1
dataset['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)	2	2
train['Fare'] = train['Fare'].fillna(train['Fare'].median())	2	2
train_df.head(n=5)	2	1
df_train['Embarked'].isnull().any()	2	2
X_train.shape,X_test.shape,y_train.shape,y_test.shape	2	2
X_train.shape, Y_train.shape	2	2
test.columns.values.tolist():	2	1
"row[""Pclass""] == 1 :"	2	1
df.Embarked.isnull().sum()	2	2
test['Ticket_Lett'] = test['Ticket_Lett'].apply(lambda x: str(x))	2	2
room.append(letter[0])	2	1
train['Embarked'].fillna('N', inplace=True)	2	2
"df.drop(""Embarked"",axis = 1)"	2	1
test['Name']:	2	2
decision.astype(np.int)	2	2
csv_train['Sex']	2	1
train['Sex'] == 'male'	2	2
data.loc[data['Age']<=16, 'Age_band'] = 0	2	2
stats.kurtosis(distribution)	2	2
X['Embarked'] == 'C'	2	2
dataset['ageClass'] = dataset['Age']/15	2	1
"data[""Age""].plot(kind='density', color='teal')"	2	1
all_data_PassengerId.iloc[train.shape[0]:]	2	2
"combdata[""Title""] = combdata[""Title""].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	2	2
titanic_df['Sex'].value_counts()	2	2
submission.to_csv('/kaggle/working/submission.csv', index=False)	2	2
data['Ticket'] = data.Ticket.str.replace('/', '')	2	2
x.dropna(inplace = True)	2	2
train[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False)	2	2
temp.pop(6) # remove cabin	2	1
combine_df['surname'] = combine_df['Name'].str.extract(r'([a-zA-Z]+)',expand=False)	2	2
test.loc[:,['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	2	2
"test_df[""Age""] = test_df[""Age""].astype(int)"	2	2
test.loc[test['Embarked']=='C', 'Embarked'] = 0	2	2
all_data.groupby('Ticket', as_index=False).size().reset_index()	2	2
df1.select_dtypes(include=['category']).columns	2	2
train.loc[train['Family']==1,'Family']=0	2	2
"titanic_train[""Sex""].value_counts()"	2	1
data_train_df.info()	2	1
X.iloc[x], X.iloc[y]	2	1
deck_series.loc[i] = j['Cabin'].split()[0][0]	2	1
train['SibSp']	2	2
test.drop(columns = ['Age', 'SibSp', 'Parch', 'Fare', 'EmbarkedC', 'EmbarkedS', 'EmbarkedC', 'EmbarkedQ', 'SexM', 'SexF', 'Pclass1', 'Pclass2', 'Pclass3'])	2	1
train['FatherOnBoard'] = 0	2	2
"test[""Embarked""] = test[""Embarked""].astype(""category"")"	2	2
cost_t.append(np.mean(c_t))	2	1
full.loc[(full.Title==i)&(full.Pclass==j)&(full.Parch==g)&(full.Survived.notnull()),'Survived'].mean()>=0.8:	2	2
x_val_score.sort_values(by = 'X_val_score(%)', ascending = False)	2	2
model.add(Dense(8, kernel_initializer='normal', activation='relu'))	2	2
df.loc[ (df['Age'] > 25) & (df['Age'] <= 32), 'age_cat'] = 2	2	2
df_data.loc[(df_data.Age.isnull()) & (df_data.Title == i),'Ti_Age'] = Ti_pred[i]	2	2
"test[""FamSize""] = test[""SibSp""] + test[""Parch""] + 1"	2	2
combine_df['titlename'] = combine_df['titlename'].str.replace('Ms','Miss')	2	2
df['Sex'] = df['Sex'].map({'female': 0, 'male': 1}).astype(int)	2	2
train.pivot_table(index=group, columns='Survived', values = 'Age', aggfunc='count')	2	2
pd.merge(staff_df, student_df, how='inner', left_index=True, right_index=True)	2	2
"new_data[""Name""] = new_data[""Name""].str.replace(""Dr"",""Mr"")"	2	1
df.groupby(['Embarked','Sex'])['PassengerId'].count()	2	2
df_test['Fare'].fillna(df_test['Fare'].dropna().median(), inplace=True)	2	2
df_test.drop(['Pclass', 'Sex', 'Cabin', 'Embarked'], axis=1)	2	2
df_test.iloc[:,:]	2	2
X.ndim, y.ndim	2	1
all_data.drop('Ticket_Sign2', axis=1)	2	2
Fare.hist(density = True)	2	1
plt.hist(train_df['Fare'], bins = 'auto')	2	1
in ['Mlle', 'Ms','Miss']:	2	2
pred.eq(target.data.view_as(pred)).sum().item()	2	1
"df_test[""Age""].fillna(df_test.groupby(""Title"")[""Age""].transform(""median""), inplace=True)"	2	2
train_data['Embarked'] = train_data['Embarked'].map({'C':0, 'Q':1, 'S':2})	2	2
K_X.drop( Field2Drop,axis=1,inplace=True)	2	1
"X_train.drop(""Age"", axis = 1)"	2	2
data.drop('Cabin', axis = 1)	2	2
all_data['CabinNum1'] = all_data['Cabin1'].apply(get_cabin_num)	2	2
"pd.isnull(test[""Age""][x]):"	2	2
dfTrain[['Pclass','Sex','ParchCat','Embarked']]	2	2
test_data.sample(5)	2	2
df_full.loc[df_full['Age'] >= 35, 'Categ_Age'] = 4	2	2
tick.apply(lambda x: len(str(x)))	2	2
data['SurnameLen'] = data['Name'].apply(lambda x: len(str(x).split('.')[1])).astype(int)	2	2
train['Title'] == 'Dr'	2	2
mod_df['Age'] = df['Age'].fillna(math.ceil(df['Age'].mean()))	2	2
traindf.tail(10)	2	2
dfTest.head(1).info()	2	2
"df.loc[df[""Embarked""] == ""Q""]"	2	2
all_data['TicketLen'] = all_data['Ticket'].apply(lambda x: len(x))	2	2
x['Cabin']	2	1
df['age_cat'] = df['age_cat'].astype(int)	2	2
dataset.loc[(dataset['Age']>26) & (dataset['Age']<=36), 'Age']=2,	2	2
train_filtered['Sex'] = np.where(train_filtered['Sex']=='male', 0, 1)	2	2
evdev['accuracy'],	2	1
train.drop('Sex', axis=1)	2	2
s.set_value(label, value+2)	2	2
df.loc[ (df['Age'] > 16) & (df['Age'] <= 32), 'Age'] = 1	2	2
data['Parch'] = StandardScaler().fit_transform(data['Parch'].values.reshape(-1, 1))	2	2
train['age_T'].value_counts()	2	1
train_df['Survived'].value_counts(normalize=True)	2	2
dfsubmit.reset_index(drop=True)	2	2
tf_variables.append(Fare_bucket)	2	1
"combdata[""Title""] = combdata[""Title""].astype(int)"	2	2
validation['Title'] == 'Mr'	2	2
train.Fare.loc[50:]	2	2
dataset['HasCabin'] = dataset['Cabin'].notnull().astype(int) # NaN Cabins will become 0, otherwise 1	2	2
feature_list.append('ap'+str(i))	2	1
test_df.drop(['Ticket','Cabin'], axis=1)	2	2
df['Delivered'] = True	2	2
test_df_final.head()	2	2
df['SibSp'] + df['Parch']	2	2
scaler.transform(df_train_ml.drop('Survived',axis=1))	2	2
data.Embarked.fillna(data.Embarked.value_counts().index[0],inplace=True)	2	2
y_train.astype('category').cat.codes	2	1
X_train.apply(lambda x: (x - np.min(x)) / (np.max(x) - np.min(x)))	2	2
test.describe(include=['O'])	2	2
titanic_df.loc[(titanic_df['Age'] > 16) & (titanic_df['Age'] <= 32), 'Age'] = 1	2	2
train.set_index('PassengerId')	2	2
test_df.drop(['Name'],axis=1)	2	2
df_train['Family'].value_counts()	2	2
x.dot(y) # dot product  1*4 + 2*5 + 3*6	2	2
dataset['Age'][i]= 2	2	1
df.Age.fillna(title_age_median , inplace=True)	2	1
df_test2.to_csv('test-age-predicted.csv')	2	2
titanic_df['PchM1'] =     titanic_df[['ParchBinary','Male','Pclass']].apply( get_malepm, axis=1 )	2	2
"df.drop(labels=[""PassengerId"", ""Cabin"", ""Name"", ""Ticket""], axis=1, inplace=True)"	2	2
filtered.loc[filtered.age == filtered.age.max()]	2	1
model.add(keras.layers.core.Dropout(0.2))	2	2
"test[""AgeGroups""][x] == ""Unknown"":"	2	2
dataset.loc[dataset['Pclass']==3,'Survived'].value_counts()	2	2
train.groupby(['Embarked'])['Survived'].mean()	2	1
train['Age'][np.isnan(train['Age'])] = rand_age	2	2
titanic_test_data['Fare'].isna().sum()	2	1
fit.transform(X_train)	2	2
test_df.drop('PassengerId', axis=1, inplace=True)	2	2
data.loc[(data['Age'] > 26) & (data['Age'] <= 36),'Age'] = 2,	2	2
friends_survive_list.append(train_data['Survived'][j])	2	1
"titanic_training_data[""Survived""].iloc[train]"	2	1
"train_df[""Age""][np.isnan(train_df[""Age""])] = rand_1"	2	2
df.loc[ (df['Fare'] > 10.5) & (df['Fare'] <= 21.7), 'fare_cat'] = 2	2	2
df.loc[ df['Age'] <= i*10, 'Age_bin'] = i	2	2
"processed_dataframe[""NormalizedAge""] = dataframe[""NormalizedAge""].copy()"	2	1
title_col.append(title_mapper[title])	2	1
test_data.drop(['PassengerId','Name','Ticket'], axis=1)	2	2
data_all['Title'] = data_all['Title'].replace('Mme', 'Miss')	2	2
"ax[1].set_title(""Fares in Pclass 2"")"	2	2
train.iloc[dev_index]	2	1
test_df['Family'].loc[test_df['Family'].isin(np.arange(4,11,1))] = 'With_big_family'	2	2
fig.layout.update({'showlegend':False})	2	1
output['Survived'] = predictions	2	2
"test_df[""Man""] = test_df[[""Sex"", ""Child""]].apply(man, axis=1)"	2	2
axs[0].plot(evaluation_results['Train']['binary_logloss'], label='Train')	2	2
train['Cabin_Lett'] = train['Cabin_Lett'].apply(lambda x: str(x))	2	2
titanic_df['Age'] = titanic_df.groupby(['Pclass'])['Age'].transform(lambda x: x.fillna(x.mean()))	2	2
Submission['PassengerId'] = df_test['PassengerId']	2	2
clean_data.info()	2	1
data['Age'].fillna(data['Age'].mean(), inplace=True)	2	2
data.Survived.sum()	2	2
"sns.boxplot(x=""Pclass"", y=""Age"",hue=""Survived"", data=data_raw)"	2	2
"train.drop([""Ticket""],axis = 1)"	2	2
X['Cabin'].str.contains('E')*1	2	2
np.std([tree.feature_importances_ for tree in model.estimators_], axis=0)	2	2
"df[""Sex""][df[""Sex""] == ""male""] = 0"	2	2
data['Deck'] = data['Cabin'].str.slice(0,1)	2	2
X_fewer_columns.as_matrix()	2	1
joined['Survived'].map({np.nan: np.nan, 1: 'gray', 0: 'black'})	2	1
"combined_train_test['Last_Name'] = combined_train_test['Name'].str.split(""\."").str[1].str.strip()"	2	2
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',                                                 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	2	2
"i[1][""Name""].lower()"	2	1
full_data.loc[(full_data['Age'] > 48) & (full_data['Age'] <= 64), 'Age'] = 3	2	2
test.loc[(test['Age'] <= 13), 'age_cat'] = 'young'	2	2
train_df[['Pclass','Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	2	2
dataset.iloc[:, 0].values	2	2
dataset['CategoricalAge'] = pd.cut(dataset['Age'],5,labels = [1,2,3,4,5])	2	2
data.Embarked.fillna('S',inplace=True)	2	2
train_df.drop('Person', axis=1, inplace=True)	2	2
train_df['Age'].isna().sum()	2	1
ftrain['Survived'].ravel()	2	2
dset['Age'].groupby(dset['Title']).mean()	2	1
train.set_value(index,'Embarked_Q',1)	2	2
train['Title'] == 'Miss'	2	2
train.groupby('Embarked').Survived.mean()	2	2
df_full.loc[df_full['Age'] < 10, 'Categ_Age'] = 0	2	2
xtrainO.drop(['Survived'], axis=1)	2	1
train_dataset['Age'].isnull().sum()	2	1
all_data['TicketLett']= all_data['TicketLett'].apply(lambda x: str(x))	2	2
train.drop(['Name','SibSp','Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],axis=1)	2	2
"train.drop(""PassengerId"", axis=1, inplace=True)"	2	2
pred.append(0)	2	2
embarked_dummy.head()	2	1
pd.merge(staff_df, student_df, how='outer', left_index=True, right_index=True)	2	2
TestFile.shape	2	2
"train.loc[train[""Title""] == ""Lady"", ""Title""] = 'Rare Title'"	2	2
x['SibSp']+x['Parch']	2	1
df['AgeGroup'] = df['Age']	2	2
test.loc[(test['Age'].isnull())&(test['Sex_cat'] == i)&(test['Pclass'] == j+1),'Age'] = age_test[i,j]	2	2
dataset.replace(replace)	2	1
train_df.iloc[:, [2, 4, 5, 6, 11, 12]].values	2	2
dfTrain[['Pclass','Sex','ParchCat','Embarked','Fare']]	2	2
"data[""Name""] = data[""Name""].str.replace("","","";"")"	2	1
data_all['Title_Mrs'] = (data_all['Title']==3) + 0	2	2
df['importance_normalized'].head(15),	2	2
test1['Sex'] = le.fit_transform(test1['Sex'])	2	2
combined.reset_index(inplace = True)	2	2
valid_acc_collect.append(val_acc)	2	2
titanic['title'].value_counts()	2	1
submission.to_csv('predictions.csv', index=False)	2	2
dataset['Fare'].describe()	2	2
test_df.drop(['Age'], 1, inplace=True)	2	2
data['Age'].describe()	2	2
titanic.drop('Survived', axis=1)	2	2
full.loc[full.Cabin.isnull(),'Cabin']=0	2	2
titanic.drop(['Ticket'],1)	2	2
self.transform(data)	2	2
train_df['Person'] = train_df[['Age','Sex']].apply(get_person,axis=1)	2	2
train_df['FareBand'] = pd.qcut(train_df['Fare'], 6)	2	2
"title_Dict.update(dict.fromkeys([""Mlle"", ""Miss""], ""Miss""))"	2	2
test.Title.isnull().sum()	2	1
df_train.age.describe()	2	1
"df[""Fare""] = df[""Fare""].map(lambda i: np.log(i) if i > 0 else 0)"	2	2
diff.groupby(['Title'])['Survived'].agg([('average','mean'),('number','count')])	2	2
"data[""Age""] = data[""Age""].fillna(data[""Age""].dropna().median())"	2	2
train['Age_scaled'] = (train.Age - train.Age.mean())/train.Age.std()	2	2
"new_data[""Name""] = new_data[""Name""].str.replace(""Master"",""Mr"")"	2	1
df.drop('Embarked', axis=1, inplace=True)	2	2
test['Fare'].replace('0',None,inplace=True)	2	2
dummies.head()	2	2
np.mean(final_score_rs) # 0.883	2	1
train[['Embarked','Survived']].groupby(train['Embarked']).mean()	2	1
X['Pclass'] = X['Pclass'] - 1	2	2
train.loc[v[i], 'ChildNotSurvived'] = temp[temp.Survived==0].shape[0]	2	2
data.isna().sum()	2	1
df['Fare'] = df['Fare'].fillna(df['Fare'].median())	2	2
result.head(3)	2	1
test_data.Title.fillna(title_mode)	2	2
df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	2	2
combined_features['FamilySize'] = combined_features['Parch'] + combined_features['SibSp'] + 1	2	1
X_train.head(5)	2	2
train_df.drop('Sex', axis=1, inplace=True)	2	2
"train_df[""Survived""] = t_train"	2	2
full['Fare'] = (full['Fare'] - full['Fare'].mean()) / full['Fare'].std()	2	2
missing_df.head()	2	2
no_of_test.append(i)	2	1
df_train['Initial']= df_train.Name.str.extract('([A-Za-z]+)\.') #lets extract the Salutations	2	2
titanic_df['IsAgeNaN'].loc[ titanic_df['Age'].isnull() ] = 1	2	2
training_df['Age'] = training_df['Age'].fillna(math.ceil(training_df['Age'].mean()))	2	2
train.drop(['Survived'],axis=1,inplace=True)	2	2
all_data.iloc[:train.shape[0],:]	2	2
df.replace({'male': 1, 'female': 0}, inplace=True)	2	1
sns.boxplot(x='Pclass', y='Age', data=test)	2	2
pd.isnull(c).sum():	2	1
output['Sex_Fare'] = output['Fare']*output['Sex']	2	2
processed_test_df.count()	2	1
all_data['CabinCount'] = all_data['Cabin'].apply(get_cabin_num)	2	2
clean_test_data.head()	2	1
predictors2.isnull().sum()	2	1
train.drop(['PassengerId','Survived'], axis=1)	2	2
test.iloc[index]['Sex'] == 'female' and row[1] == 0:	2	1
test_df.drop('Male', axis=1, inplace=True)	2	2
df_train['Title'] = df_train.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\.', x).group(1))	2	2
pred.rename(columns={0:'Survived'},inplace=True)	2	2
scaler.transform(test_filtered)	2	2
df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	2	2
combined_data.tail()	2	2
test.drop(delete_columns, axis = 1, inplace = True)	2	2
combine_df['familytot'] = combine_df['SibSp'] + combine_df['Parch'] + 1	2	2
titanic_data.info()	2	2
test_raw.copy(deep = True)	2	2
train_ch.groupby('Type').sum()	2	2
df['Embarked'] = df['Embarked'].cat.codes + 1	2	2
train['calculated_fare'] = train.Fare/train.family_size	2	2
test_df.loc[[152]]	2	1
total_missing.sort_values(ascending=False)	2	1
submit.to_csv('titanic.csv',index=False)	2	2
np.round(grid.best_score_*100, 2)	2	2
titanic_test.loc[titanic_test['Sex'] == 'female', 'Sex'] = 1	2	2
df['Survived'] > 0	2	2
all_df.iloc[:train_size]	2	1
"combine[""Pclass""]=combine[""Pclass""].astype(""str"")"	2	2
sub['Survived'] = np.int32(predsTest>0.5)	2	1
matplotlib.rcParams['figure.figsize'] = (18.0, 9.0)	2	1
colors.append('red')	2	2
X.loc[(X['Fare'] > 14.454) & (X['Fare'] <= 31), 'Fare']   = 2	2	2
train['Sex'] = train['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	2	2
train.reset_index()	2	1
dataset['Sex']=dataset['Sex'].map(cleanup_sex).astype(int)	2	2
"train.loc[train[""Title""] == ""Dr"", ""Title""] = 'Rare Title'"	2	2
values.astype(float)	2	2
model.add(Dense(output_dim=64, input_dim=3))	2	2
y_pred.astype(int)	2	2
df.iloc[891:, :][['PassengerId','Survived']]	2	2
model.add(Dense(100))	2	1
df_all_age_not_null.corr()	2	1
df_data['Ti_Age'] = df_data['Ti_Age'].astype('int')	2	2
"test[""normalizedFare""] = scale.transform(test['Fare'].reshape(-1,1))"	2	2
stats.skew(distribution)	2	2
df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	2	2
titanic_df.dropna()	2	2
df['title'] = df['title'].replace('Ms.', 'Miss.')	2	2
df.copy()  # Save original data set, just in case.	2	2
cluster_df['class'] = y	2	1
df['Family_Size'] = df['Parch'] + df['SibSp'] + 1 # including the person in the row	2	2
sml.feature.replace(a='Title', match=['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], new='Rare')	2	2
dfFull['Sex'] = dfFull['Sex'].map({'male': 0, 'female': 1}).astype(int)	2	2
processed_data['female'] = pd.Series(raw_data['Sex'] == 'female', dtype=np.float64)	2	2
ds[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]	2	1
"test.drop(""Name"",axis=1)"	2	2
train.set_value(index,'Mr',1)	2	2
train_ch.groupby('CabinType1').sum()	2	2
all_data.drop('TicketCount', axis=1)	2	2
test['Title']=test.apply(replace_titles, axis=1)	2	2
test_df['Name'].str.extract('.*, (.*)\.')	2	2
train.drop(['Survived','C'],axis=1)	2	2
data['Title'] = data['Name'].str.extract('([A-Za-z]+)\.', expand=True)	2	2
dfFull.corr().TitleCat	2	2
"train[""Name""].apply(get_title)"	2	2
train_n.drop(columns=['Sex','Pclass','Embarked','Name','PassengerId','Ticket','Group_Size'],axis=1, inplace=True)	2	2
models.append(knn)	2	1
merged.Title.replace(to_replace = ['Dona', 'Jonkheer', 'Countess', 'Sir', 'Lady', 'Don'], value = 'Aristocrat', inplace = True)	2	2
dataset['Embarked']=dataset['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)	2	2
x.head(n=3)	2	1
dataset['Title'] = dataset['Title'].replace(['Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev'], 'Officer')	2	2
traindat.head()	2	1
dfa.drop(['Name', 'Ticket', 'Cabin'], axis=1)	2	2
"train['FamilySize'].loc[train['Family'] > 5] = ""Large"""	2	2
my_submission_XGB.to_csv('submission_XGB.csv', index=False)	2	2
cost_r.append(np.mean(c_r))	2	1
df['ClassFare']=df['Pclass']*df['Fare_Per_Person']	2	2
scaler.transform(X_val)	2	2
"X_train.drop(""SibSp"", axis = 1)"	2	2
df.drop(cols, axis = 1, inplace = True)	2	2
data_frame.copy();	2	1
data_train.loc[(data_train['Pclass']!=3) & (data_train['Sex']=='female'),'Survived'].value_counts().plot(kind='bar',ax=ax1,label='female upper class',color='#FA2479')	2	1
train['FatherSurvived'] = 0	2	2
final_gain.append(1-ssd(a_g,y_test))	2	1
"train_data[""Ticket""].isnull().sum()"	2	2
test['Pclass'] = test['Pclass'].apply(str)	2	2
costs.append(loss_step)	2	1
submission.to_csv('submission-manual-cleansing.csv', index=False)	2	2
"test[""CabinBool""] =  (train.Cabin.notnull().astype(""int""))"	2	2
"train_df[""Deck""] = train_df[""Cabin""].apply(cab_to_deck)"	2	2
split_data.append(df[df.Survived==survived])	2	2
test_df.iloc[:, [1, 3, 4, 5, 10, 11]].values	2	2
X_validation.isnull().any()	2	1
train_df['type'],test_df['type'] = 'training', 'testing'	2	2
plt.boxplot(train[~train.Age.isnull()]['Age'],showmeans=True, meanline=True)	2	2
"new_data[""Name""] = new_data[""Name""].str.replace(""the Countess"",""Mme"")"	2	1
titanic_df['Age'].value_counts()	2	1
combined_train_test['Fare_Category'] = le_fare.transform(combined_train_test['Fare_Category'])	2	2
X['Title'] = X['Title'].replace(['Capt', 'Col', 'Dr', 'Major', 'Rev'], 'Officer')	2	2
preds.append(1)	2	2
full_data.loc[(full_data['Age'] > 32) & (full_data['Age'] <= 48), 'Age'] = 2	2	2
mod_data.sample(n=450)	2	1
full.drop('PassengerId',axis=1,inplace=True)	2	2
"df.drop(""surname"",axis = 1)"	2	1
all_data['Ticket_Sign1'] = all_data['Ticket_Sign1'].replace('STON', 'SOTON')	2	2
result['Age'].hist(bins=70)	2	2
data.Cabin.fillna('U',inplace=True)	2	2
train_raw.copy(deep = True)	2	2
"row[""Family""] == row2[""Family""] and (row[""Survived""] == 1 or row2[""Survived""] == 1):"	2	1
"dataset[""Title""] = dataset[""Title""].replace(['Capt', 'Col','Major'], 'Crew/military')"	2	2
"ax[0].set_title(""Correlation Matrix"")"	2	1
train_data[['Survived','Embarked']]	2	2
train_data.drop(columns='Survived')	2	2
combined.drop('Pclass', axis=1, inplace=True)	2	2
df.loc[df['Name'].str.contains('Countess'), 'title'] = 'Countess'	2	2
df_train.isnull().sum().sort_values(ascending=False)	2	2
array_sign[1]	2	2
df_features.head(5)	2	1
df_study_svc.loc[ind, 'val_score']	2	1
data['Pclass'][i] = data['Pclass'].mean()	2	2
train.drop(['fare_bin'],axis=1) # 'fare_bin' only generatad for visualization purposes	2	2
"df.loc[df[""Embarked""] == ""C""]"	2	2
"train.loc[train[""Title""] == ""Don"", ""Title""] = 'Rare Title'"	2	2
train['Age'] = train['Age'].map(age_mapping)	2	2
X_train.corr()	2	2
train_ds.columns.values	2	1
"titanic_df[""Family""] = titanic_df[['SibSpBinary', 'ParchBinary']].apply(get_family, axis=1)"	2	2
all_data['NameLen'] = all_data['Name'].apply(lambda x: len(x))	2	2
train.Fare.fillna(train.Fare.mean(), inplace=True)	2	2
comb['Embarked'].unique()	2	2
dv.transform(titanic_df[feature_names].to_dict(orient='records'))	2	2
df.Survived.groupby(df.Pclass).agg(['mean', 'count'])	2	2
full.loc[(full.Fare>21.558)&(full.Fare<=41.579),'FareCut']=4	2	2
test_raw_data.shape[0]	2	2
raw_test.info()	2	2
data_frame.update(df_out_1);	2	1
data_pruned['Embarked'] = Embarked.values	2	1
plt.hist(x=[train[train.Survived==1]['Fare'],train[train.Survived==0]['Fare']],stacked=True,color=['g','r'],label=['Survived','Dead'])	2	2
"train[[""Has_Cabin"", ""Survived""]].groupby(['Has_Cabin'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	2	2
"test[""Age""][test_nas] = impute_age_test"	2	2
test_df.drop(['Ticket','Cabin'],axis=1)	2	2
test_df.loc[test_df['Fare'] > 31, 'Fare'] = 3	2	2
combined_train_test['Family_Size_Category'] = combined_train_test['Family_Size'].map(family_size_category)	2	2
df['Title'] = df['Name'].str.split(', ').str[1].str.split('.').str[0]	2	2
final_data.iterrows():	2	1
combine_df.describe(include='all')	2	2
frequency_titles.append(title_list.count(i))	2	2
df_raw['Name'].unique()[:10]	2	2
all_data.drop('Cabin4', axis=1)	2	2
cabin[0] == ('C' or 'B'):	2	2
data1.head()	2	1
test['Age']=test[['Age','Pclass']].apply(impute_age,axis=1)	2	2
df['Title'] = df.Name.str.extract(' ([A-Za-z]+)\.', expand=False).astype('category')	2	2
df['Cabin'] = df['Cabin'].apply(lambda x: x[0])	2	2
df_raw['Title'] = df['Title']  # To simplify data handling	2	2
merged.loc[:, ['Sex', 'Pclass', 'Embarked', 'Title', 'Family_size', 'Parch', 'SibSp', 'Cabin', 'Ticket']]	2	2
df_train['Age'] = df_train[['Age','Sex','Pclass']].apply(ImputeAge,axis=1)	2	1
np.sum(Z)/(rows*cols)	2	2
train_c.info()	2	1
"row[""Pclass""] == 2 :"	2	1
train_data.drop(drop_columns_train, axis=1, inplace = True)	2	2
"dataset[[""Pclass"", ""Sex_enc"", ""SibSp"", ""Parch"", ""Fare"", ""CabinArea_enc"",                                       ""Embarked_enc"", ""Salutation_enc"", ""FamilyMember""]]"	2	2
train_data['Age'].iloc[i] = train_data['Age'].median()	2	2
Pclass.hist(density = True)	2	1
features.insert(0, 'x0', 1)	2	1
df['NameLen'] = df.Name.apply(lambda x : len(x))	2	2
pd.merge(titanic_ytest,titanic_test, how='inner', on=['PassengerId'])	2	2
"tempDf.rename(columns={""Name"": y})"	2	1
test_data_orig.describe()	2	2
objectcols.apply(le.fit_transform)	2	1
corr.index.values,	2	2
data.Ticket.head()	2	1
combined_train_test['Title'] = combined_train_test['Name'].str.extract('.+,(.+)').str.extract('^(.+?)\.').str.strip()	2	2
test_final.to_csv('./data/test_final.csv', index=False)	2	2
row['Female']:	2	1
df.drop(['SibSp', 'Parch'], axis=1)	2	2
submit['Survived'] = submit['Survived'].astype(int)	2	2
df['Age'].head()	2	2
embarked_locs_mapping['S']	2	1
td_not_survived.groupby('Sex').size()	2	2
train_filtered.Title.fillna(4, inplace=True)	2	2
dfFull.Fare.mean()	2	2
test['Sex'] = encoder.fit_transform(test['Sex'])	2	2
test_df['SibSp']	2	2
"df_data[""Deck""] = df_data[""Deck""].fillna(""0"")"	2	2
df['male'] = df['Sex'].map({'female':0, 'male':1}).astype(int)	2	2
df.loc[ (df['Fare'] > 7.91) & (df['Fare'] <= 14.454), 'Fare'] = 1	2	2
importance.sort_values(by = 'Importance', ascending = False).set_index('Feature')	2	2
data.groupby('Surname').apply(lambda x: x.shape[0])	2	1
ticket.loc[ticket.Ticket.duplicated(False)]	2	2
"train[""Fare""].fillna(train[""Fare""].median(), inplace=True)"	2	2
train_filtered['Title'] = train.Name.str.extract(r',\s*([^\.]*)\s*\.', expand=False)	2	2
df_train.pivot_table('PassengerId', 'Pclass', 'Survived', 'count').plot(kind='bar', stacked=True)	2	2
all_data.loc[all_data['Age'] <= 16, 'Age'] = 0	2	2
pd.pivot_table(titanic_df, values = 'Survived',              index = ['Female', 'MasterMiss', 'SibSpBinary', 'ParchBinary'],              columns=['Pclass', 'Embarked'],              aggfunc=np.mean )	2	2
dfa_pred.drop(['Age_pred'], axis=1)	2	2
data_train['Survived'].value_counts().plot(kind='bar')	2	2
"test[""Survived""]"	2	2
df['Embarked']=x_emb.astype(np.float)	2	2
train['Age_Group'] = pd.cut(train['Age'], bins=bins, labels=level)	2	2
"df_data[""Last_Name""] = df_data['Name'].apply(lambda x: str.split(x, "","")[0])"	2	2
"dataset.loc[ dataset['Age'] > 60, 'Age'] 							      = 4"	2	2
all_data['Cabin3'] = all_data['Cabin'].apply(split_cabin, num=3)	2	2
train.loc[train['Embarked']=='S', 'Embarked'] = 2	2	2
"result[""Survivor""] = result.Survived.map({0: ""no"", 1: ""yes""})"	2	2
predicted_ages['Title'] = predicted_ages.Name.apply(extractTitle)	2	1
train_df.groupby('Survived').mean()	2	2
fi['feature'] = feature	2	1
train.set_value(index,'officer',1)	2	2
best_params['min_samples_split'],	2	1
test_filtered.Family.loc[(test_filtered.SibSp!=0) | (test_filtered.Parch!=0)] = 1	2	2
submission.to_csv('kaggle.csv', index=False)	2	2
train['Embarked']= t['Embarked']	2	2
df['fare_pp_cat'] = 0	2	2
"ax[1].set_title(""Feature importance in XGBoost"");"	2	1
"solution.to_csv(""random_forest_solution.csv"", index = False)"	2	2
train['HasCabin'] = 0	2	2
test.Fare.median()	2	2
df['Age'] = categories.cat.codes	2	2
df.fillna(method='ffill')	2	2
train_df.drop(['PassengerId','Ticket','Cabin','Name','Embarked'],axis=1,inplace=True)	2	2
missing_age_test['Age_GB'] = gbm_reg_grid.predict(missing_age_X_test)	2	2
titles_ls.append(title)	2	1
submission.to_csv('titanic_lin.csv', index=False)	2	2
train['Title'] == 'Master'	2	2
test_df.insert(1, 'Survived', 0)	2	2
TrainFile.append(TestFile)	2	2
train[['SortAge', 'Survived']].groupby(['SortAge'], as_index=False).mean()	2	1
df.Age.describe()	2	2
test_features.copy()	2	2
processed_data['embarked_c'] = pd.Series(raw_data['Embarked'] == 'C', dtype=np.float64)	2	2
X_test.drop(['Ticket', 'Cabin'], axis=1)	2	1
train['Greeting'].value_counts()	2	2
train_df.loc[(train_df['Fare'] > 14.454) & (train_df['Fare'] <= 31), 'Fare']   = 2	2	2
titanicAll.groupby('Title').size()	2	1
data_all['Cabin_A'] = (data_all['Cabin']=='A')+0	2	2
train_df['age_group'] = train_df['Age'].map(age_group_fun)	2	2
df['TickNumLength'] = tick_num_lenght.astype('category')	2	2
dfTrain.groupby('SibSp').Survived.mean().plot(kind='bar')	2	2
train_filtered['Survived']	2	2
df_full['Age'] = df_full['Age'].fillna(df_full['Age'].median())	2	2
test_data['Title'] = test_data['Title'].replace('Mme', 'Mrs')	2	2
test['Family'] = test['Parch'] + test['SibSp']	2	2
"x[""Alone""] != 0:"	2	1
train['SibSp'].value_counts()   # 各组的总人数	2	1
data.as_matrix()	2	1
test['SexInt'] = test['Sex'].map(sex_to_int)	2	2
test.iloc[152]	2	2
original_sports.append(cricket_loving_countries)	2	2
axs[1].set_xticklabels(importances['features'])	2	2
"new_data[""Cabin""] = new_data[""Cabin""].isna().astype(int)"	2	1
combine['Title'] = combine.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
footballers.loc[footballers['Position'].isin(['ST', 'RW', 'LW'])],	2	1
"test[""Title""] = test[""Title""].map({""Mr"" : 0, ""Mrs"" : 1, ""Miss"" : 2, ""Master"" : 3, ""Others"" : 4})"	2	2
"test_data[""Fare""].isnull().sum()"	2	2
"X_train.drop(""Survived"", axis=1)"	2	2
df_full.drop('Ticket', axis=1)	2	2
copy.copy(dataset[:train_objs_num])	2	2
dfTrain.groupby('ParchCat').Survived.mean().plot(kind='bar')	2	2
dataset1.loc[dataset1['Embarked']=='S','Embarked'] = 0	2	2
"plt.boxplot([svm_scores, forest_scores], labels=(""SVM"",""Random Forest""))"	2	2
train['Fare'].replace('0',None,inplace=True)	2	2
model.add(Dense(units=30, kernel_initializer='uniform'))	2	1
top_histogram.hist(X, bins=100, normed=True)	2	2
test_data.dropna()	2	2
train_df.loc[(train_df['Age'] > 48) & (train_df['Age'] <= 64), 'Age'] = 3	2	2
sns.boxplot(x='Embarked', y='Age', data=df_train)	2	2
combined_train_test['Family_Size_Category'],	2	2
"X_train.drop(""Parch"", axis = 1)"	2	2
train_x.drop(['SibSp', 'Parch', 'Ticket', 'Embarked', 'Name',        'Cabin', 'PassengerId', 'Fare', 'Age'], inplace=True, axis=1)	2	2
train['Sex'] = train['Sex'].map({'female': 1, 'male': 0})	2	2
train['AgeGroup'] = pd.cut(train['Age'], 5)	2	2
train_df[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by='Survived',ascending=False)	2	2
combine['PassengerId']:	2	1
dataset.loc[(dataset['Deck'] > 1) & (dataset['Deck'] <= 6), 'Deck']  = 3	2	2
combined_features.head(891).Fare.fillna(combined_features.head(891).Fare.mean(), inplace=True)	2	1
full['Embarked'].fillna('S',inplace = True)	2	2
test.loc[v[i], 'Age']<19:	2	2
"train.pivot_table(index=""Age_categories"",values=""Survived"")"	2	2
"df['EmbarkedS'] = np.where(df['Embarked']==""S"", 1, 0)"	2	2
"titanic.loc[(titanic[""Sex""] == ""female""),""Sex""] = 1"	2	1
train_df['FamilySize'].value_counts()	2	2
df_train.head(30)	2	2
df.loc[ (df.Fare.isnull())&(df.Pclass==3),'Fare'] = np.median(df[df['Pclass'] == 3]['Fare'].dropna())	2	2
ship.sample(5)	2	1
train['Embarked_S'] = 0	2	2
df_test.loc[df_test['Title'] == k, 'Title'] = v	2	2
test_data.drop('Surname', axis=1)	2	2
df_train.drop(['AgeRange'], axis=1)	2	2
X_test.to_csv('X_test.csv', index=False)	2	2
models['set1']['num_scaling'] = 'std_scaler'	2	1
test['calculated_fare'] = test.Fare/test.family_size	2	2
titanic.Survived.copy() # copy “y” column values out	2	2
dataset['Family'] = ''	2	2
data['Sex']	2	2
train.drop(['SibSp','Parch'], axis=1)	2	2
result_rm.mean(), result_gnb.mean(), result_adb.mean(),	2	2
model.add(Dropout(0.50))	2	1
age.groupby(age).count()	2	2
df['NameCluster'] = tmp	2	2
train[['Ageband','Survived']].groupby(['Ageband'],as_index=False).mean().sort_values(by='Ageband',ascending=True)	2	2
data['TicketHead'] = data['TicketHead'].replace(['CA', 'FCC', 'PPP', 'SC', 'SCAH', 'SCPARIS', 'SCParis', 'WC', 'NULL'], '3')	2	2
train.apply(lambda f:f.fillna(f.mode()[0]))	2	2
"submission.to_csv(""../working/submission.csv"", index = False)"	2	2
test_data.drop('Ticket', axis=1, inplace=True)	2	2
trainingData.drop(['Survived'], axis=1)	2	2
test.iloc[index]['Sex'] == 'male' and row[1] == 1:	2	1
test_data['AgeNull'] = (test_data['Age'] == -999)	2	2
data['Embarked'] = data['Embarked'].apply(lambda x: replacement.get(x))	2	2
row['Sex'] == 'female' and row['Pclass'] == 3:	2	2
x_train['Survived']	2	2
train.drop(columns='Survived')	2	2
test_data_orig.info()	2	2
train.loc[train[(train['Title']=='Mrs')&(train['Age'].isnull())].index, 'Age'] = mrs_age_mean	2	2
test['withfamily'] = np.where(test['FamilySize'] > 0, 1, 0)	2	1
train_data.drop('Surname', axis=1)	2	2
"df_train[""Family_Survival""] = df_data['Family_Survival'][:891]"	2	2
test['EmbarkedInt'] = test['EmbarkedInt'].fillna(0)	2	2
std_scaler.transform(X)	2	1
train['Survived'] =train['Survived'].astype(np.int)	2	1
df_test['Sex'] = df_test['Sex'].map(genders)	2	2
train['Title'] == 'Mr'	2	2
df.drop(['Name', 'Ticket'], axis=1)	2	2
test_set.drop(['PassengerId','Name','Age','Fare','Ticket','Cabin','SibSp','Parch','Title','FamilySize'], axis=1)	2	2
full.loc[full.Cabin.notnull(),'Cabin']=1	2	2
"dftrain.loc[idx,""Ticket""]"	2	1
df_full['FamilySize'] = df_full.SibSp + df_full.Parch + 1	2	2
"plt.rcParams[""figure.figsize""] = [6,6]"	2	1
"rates.loc[row,""Sex""]==""male"":"	2	1
"test_set.drop(""Survived"", axis=1)"	2	2
dataset1.loc[dataset1['Sex']=='female','Sex'] = 1	2	2
train.loc[train[(train['Title']=='Mr')&(train['Age'].isnull())].index, 'Age'] = mr_age_mean	2	2
le.transform(concat.Sex)	2	2
"combdata[""Embarked""] = combdata[""Embarked""].fillna(""S"")"	2	2
test_set.isnull().sum().sort_values(ascending = False)	2	2
df_test.drop('Name',axis=1, inplace=True)	2	2
X['Embarked'].fillna('S', inplace=True)	2	2
big.loc[big['PassengerId'] == passID, 'Family_Survival'] = 1	2	1
big.loc[big['PassengerId'] == passID, 'Family_Survival'] = 0	2	1
coltypes.items():	2	1
fullfinal.copy()	2	1
"traindata[""title""] = traindata[""Name""].apply(lambda x: x.split()[1].split()[0]).map({'Mr.':0, 'Mrs.':1, 'Miss.':2, 'Master.':3,""Dr."":4})"	2	1
complete_age['Age']	2	1
np.mean(scores),	2	2
tmp.append('ind')	2	1
x['Age'].mean()	2	2
dc['Fare_Per_Person'].replace(0,np.NaN)	2	1
titanic_df['3fs'] =     titanic_df[['Pclass','Female','S']].apply( get_3fs, axis=1 )	2	2
test.join(embark_dummies_test)	2	2
df['Fare_Bin'] = pd.qcut(df.Fare, 4, labels=['very_low','low','high','very_high'])	2	2
train.loc[dr_mask, 'Age'] = train.loc[dr_mask, 'Age'].fillna(train[train.Title == 'Dr'].Age.mean())	2	2
nwdata1.describe()	2	1
trainSTD2['Fare'] = trainSTD[:,3]	2	1
rare_titles.append(title)	2	1
test['PassengerId'].copy()	2	2
test['IsTrain'] = 0	2	2
combine.iloc[:len(train),]	2	1
train_data.drop(['Survived'], axis=1).values	2	2
test_df.drop('Survived', axis=1, inplace=True, errors='ignore')	2	1
df_train.loc[df_train['Title'] == k, 'Title'] = v	2	2
data.loc[data['Family_Size'] == 1, 'IsAlone'] = 1	2	2
plt.style.use('bmh')                    # Use bmh's style for plotting	2	2
to_test['Title'] = to_test['Title'].replace('Mlle', 'Miss')	2	2
df_test['Title'] = df_test.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
train_data.groupby(['Pclass', 'Survived'], as_index=False).count()	2	2
testingData.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Embarked', 'Cabin'], axis=1)	2	2
"X_test.replace({""Sex"": gender_map, ""Embarked"": embarked_map})"	2	2
"train.loc[train[""Title""] == ""Mme"", ""Title""] = 'Mrs'"	2	2
titanic_df.loc[(titanic_df['Fare'] > 7.91) & (titanic_df['Fare'] <= 14.454), 'Fare'] = 1	2	2
train.loc[x,'Cabin'] = train.loc[x,'Cabin'][0]	2	1
all_data['Type'] = all_data['Type'].replace('Ms', 'Miss')	2	2
dfFull.TitleCat.replace('Mrs',3,inplace=True)	2	2
ticket['SharedTicket'] = 0	2	1
df_target.head()	2	2
passengers.copy()	2	1
np.dot(X.T,grad)/m	2	2
test['Salutation'] = test['Salutation'].map(Salutation_mapping)	2	2
np.round(f1_score*100, 2)	2	2
plot.hist(ax=ax[0],bins=20,edgecolor='black',color='red')	2	1
train.append(test) # The entire data: train + test.	2	2
Age_Corr[1:10] # remove the 'Survived'	2	2
sales_record['person'],	2	2
test.loc[(test.Age.isnull()),'Age'] = pred_age	2	2
"titanic_train[""Age""].mean()"	2	2
test['Cabin_Lett'] = test['Cabin_Lett'].apply(lambda x: str(x))	2	2
df.Fare.fillna(median_fare)	2	2
df_group.iterrows():	2	1
drop_test.head()	2	2
grp_df.drop(PassID)['Survived'].max()	2	1
pylab.rcParams['figure.figsize']=12,8	2	2
dfFull.loc[nullFares,'Fare'] = dfFull[(dfFull.ParchCat == 0) & (dfFull.Pclass ==3 ) & (dfFull.Embarked == 0)].Fare.mean()	2	2
test.loc[v[i], 'Male_Friends_Survived'] = temp_df[(temp_df.Sex=='male')&(temp_df.Survived==1)].shape[0]	2	2
test4.drop('Ticket', axis=1, inplace=True)	2	2
test_cl.loc[:, Xcol + ['Age']]	2	1
df_study_lr.loc[ind, 'mean_test_score']	2	1
miss_test.head()	2	2
bins[0]:	2	1
np.where(test_filtered.Ticket.duplicated(), 1,0)	2	2
df['AgeState'].value_counts()	2	2
train['Sex'][train['Sex'] == 'female'] = 1	2	2
"train.drop([""Name"", ""Ticket"", ""Cabin""], axis=1)"	2	2
data.drop(['PassengerId', 'Ticket', 'Cabin', 'Name'], axis=1, inplace=True)	2	2
classifier.add(Dense(output_dim = 7, init = 'uniform', activation = 'relu'))	2	1
data['SexByAge'] = data['SexByAge'].astype(int)	2	2
guess_df.median() if ~np.isnan(guess_df.median()) else guess_title_df.median()	2	2
df_train.select_dtypes(include='number').columns	2	1
submission.to_csv('catboost.csv',index=False)	2	2
df['Location'] = None	2	2
variable.drop(outliers.index, axis = 0)	2	2
"test_data[""Age""].std()"	2	2
"dataset[""Title""] = dataset[""Title""].replace(['Lady', 'Countess', 'Dona'],""Rare_Female"")"	2	2
"df_full['Embarked'] = df_full['Embarked'].fillna(""U"")"	2	2
test['Deck'].unique() #查看船舱	2	1
"train_set.loc[train_set[""Sex""] == ""female"", ""Sex""] = 1"	2	2
test['Alone']=test['Family_Size'].transform(lambda f:aloner(f))	2	2
base_predictions_train.head(10)	2	1
log['Classifier']=acc_dict.keys()	2	2
dfFull.loc[dfFull.CabinCat=='T','CabinCat']= 'Z'	2	2
test_df.index.copy()	2	1
np.round(x_val_score*100, 2)	2	2
df_test.head(1)	2	1
data_all.loc[ (data_all.Age.isnull()) & (data_all.Sex == i+1) & (data_all.Pclass == j+1),                    'Age'] = guess_ages[i,j]	2	2
test['Age'] = test.apply(lambda r:plugAge(r), axis=1)	2	2
corr.head()	2	2
train[['Age', 'Survived']].groupby(['Age'],as_index=False).count()	2	2
reader_train[['Survived']]	2	2
all_data['Deck'] = all_data['Cabin'].apply(lambda x: str(x)[0])	2	2
train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index = False).mean()	2	2
"test_df[""Gender""] = test_df[""Sex""].map({""female"": 0, ""male"": 1}).astype(int)"	2	2
feature['Embarked'].fillna(feature['Embarked'].mode()[0], inplace = True)	2	2
test.drop('Sex', axis=1)	2	2
df['Sex_Age']   = df.loc[:,'Sex']*df.loc[:,'Age']	2	1
df['title'] = df['title'].replace(['Countess', 'Lady.', 'Dona.'], 'Special_female')	2	2
train.Cabin.fillna('N',inplace=True)	2	1
test_df.join(family_dummies_train)	2	2
"train[""AgeGroups""] = train[""AgeGroups""].map(Age_map)"	2	2
"new_data_train[""Survived""]"	2	2
df.loc[ (df.Age.isnull()) & (df.Title == 'Miss') ,'AgeFill'] = mean_ages[0]	2	2
titanic_train_dataset[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()	2	1
df.drop(['Age', 'Cabin', 'Embarked', 'Fare', 'Name', 'Parch', 'PassengerId', 'SibSp', 'Ticket', 'title', 'Last_Name', 'FareBin', 'AgeBin'], axis=1, inplace=True)	2	2
df.loc[:,['Name', 'Cost']]	2	2
t.astype(np.integer)	2	2
trained_models.append(model)	2	2
s[3]	2	2
df.loc[ df['Fare'] <= i*50, 'Fare_bin'] = i	2	2
test_df.drop(['Parch'], axis=1)	2	2
model.add(Dense(500, activation='relu'))	2	1
scaler.transform(test_data)	2	2
all_data['FamSz'] = all_data['SibSp'] + all_data['Parch']	2	2
"train.loc[train[""Title""] == ""Countess"", ""Title""] = 'Rare Title'"	2	2
resultsAccuracy.append(accuracy_results)	2	2
dfFull.TitleCat.replace('Master',4,inplace=True)	2	2
test_n.drop(columns=['PassengerId', 'Ticket', 'Pclass', 'Name', 'Sex', 'Cabin', 'Embarked'], axis=1, inplace=True)	2	2
test2['PassengerId']	2	2
ensembles.append(('AB', AdaBoostClassifier()))	2	2
log['Accuracy']=acc_dict.values()	2	2
classifier_update['Model']	2	2
data.iloc[len(train):]	2	2
test['Female_Friends_NotSurvived'] = 0	2	2
test_df['AgeFill'] = test_df['Age']	2	2
X_test['Family'] = X_test['SibSp'] + X_test['Parch']	2	2
kpca.transform(X_test)	2	2
train_set[['Fare','Survived']].copy()	2	2
all_data.drop('CabinNum2', axis=1)	2	2
one_hot_train.head()	2	2
titanic_df['IsHusband2'].loc[ titanic_df['SibSp'] == 0 ] = 0	2	2
train_df.columns.values:	2	2
test['Age']    = test['Age'].astype(int)	2	2
trainingSTD.drop(columns = ['Survived'])	2	1
df_test.set_index('PassengerId')	2	2
validation['Title'] = validation['Title'].replace('Mlle', 'Miss').replace('Ms', 'Miss').replace('Mme', 'Mrs').replace(['Dr', 'Major', 'Col', 'Rev', 'Lady', 'Jonkheer', 'Don', 'Sir', 'Dona', 'Capt', 'the Countess'], 'Special')	2	2
row['SibSp'] <= 2:	2	1
dataset['Title'] = dataset.Title.map(title_mapping)	2	2
predictions.append(pred)	2	1
all_data['Ticket_Sign1'] = all_data['Ticket_Sign1'].str.replace('.', '')	2	2
X.iloc[train_index],X.iloc[test_index]	2	2
df.Title.fillna('Missing')	2	2
train_raw.copy()	2	2
df.drop(['PassengerId','Name','Age','Cabin'], axis=1) #remove Name,Age and PassengerId	2	2
np.sum(grad)/m	2	2
missing_age_test['Age_LRF'] = lrf_reg_grid.predict(missing_age_X_test)	2	2
train.loc[v[i], 'MotherOnBoard'] = 1	2	2
df['Name'], df['Embarked'], df['Ticket'], df['Cabin']	2	1
sales_record['num_items'],	2	2
df.loc[:len_df1-1]	2	2
test_df['family_size'] = test_df.SibSp + test_df.Parch+1	2	2
"train_two[""family_size""] = train_two[""SibSp""]+train_two[""Parch""]+1"	2	2
titanic_df['IsHusband3'].loc[ titanic_df['SibSp'] == 0 ] = 0	2	2
dataset.loc[(dataset.Sex == 'female') & (dataset.Title == 'Dr'),'Title'] = 'Mrs'	2	2
result[0:10]	2	2
pd.merge(all_data, same_ticket_count_gp, on='Ticket', how='left')	2	2
full_data['Title'] = full_data['Title'].replace('Mlle', 'Miss')	2	2
titanic_df['IsHusband1'] = titanic_df['Male1']	2	2
xtestO.drop(['Survived'], axis=1)	2	1
X_train_analysis['Sex'] = X_train_analysis['Sex'].map({'male': 0, 'female': 1}).astype(int)	2	2
dataset.loc[dataset['Embarked']=='S','Survived'].value_counts()	2	2
test_df['child'] = [1 if i<16 else 0 for i in test_df.Age]	2	2
cluster_map_data['data_index'] = data.index.values	2	1
"test['FamilySize'].loc[test['Family'] == 1] = ""Small"""	2	2
train_df.drop(extra_features, axis=1)	2	1
validationSTD.drop(columns = ['Survived'])	2	1
train['Salutation'] = train['Salutation'].map(Salutation_mapping)	2	2
df_test['Family'] = df_test['Parch'] + df_test['SibSp']	2	2
"Accuracy[""logisticRegression""] = accuracy"	2	2
legs[1].set_text('Yes')	2	2
test.loc[test['Sex']=='female', 'Sex'] = 0	2	2
data['Sex'].value_counts()	2	2
numpy.transpose(cv.Survived)	2	1
train_dummies.info()	2	2
titles.append('none')	2	1
test_n.head()	2	2
"train_df['HasCabin'] = train_df[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	2	2
dfFull.Age.isnull().sum()	2	2
train_df[['pclass', 'age', 'survived']]	2	1
df_train['Fare'] = df_train['Fare'].astype(int)	2	2
train_le.to_csv('./data/train_le.csv', index=False)	2	2
train['Sex'] = train['Sex'].map(sex_map)	2	2
dataframe.iterrows():	2	1
df_train.groupby('Initial')['Survived'].mean().plot.bar()	2	2
"train.groupby(""Survived"")"	2	2
df['Title']	2	1
testing['Title'].value_counts()	2	2
passengers.groupby('age_bins')['age_bins'].count()	2	1
"plt.rcParams[""legend.fontsize""] = 15"	2	2
top_histogram.hist(X, bins=100)	2	2
df['fare_cat'] = 0	2	2
"test[""Title""].fillna(""Others"", inplace=True)"	2	2
test['age_T'] = raw_test['age_T']	2	1
DataFile.info()	2	2
"data_test_ori[""PassengerId""]"	2	2
z.T.shape	2	2
"train.drop([""Survived""], axis=1).append(test).drop([""PassengerId"", ""Ticket""], axis=1)"	2	2
"sns.boxplot(data = X_train, x = ""Title"", y = ""Age"");"	2	2
in ['female','male','child']:	2	1
"model.add(Dense(300, activation=""relu""))"	2	1
testd.info()	2	1
train_data[['Title', 'Survived']].groupby('Title').mean().Survived.plot('bar')	2	2
trainSTD2['SexF'] = trainSTD[:,8]	2	1
train_n.rename(columns={'male':'Sex', 'Q':'Queenstown', 'S':'Southampton',2:'Pclass2',3:'Pclass3'}, inplace=True)	2	2
_train.head()	2	1
data.loc[data.Family_Size==0, 'Alone'] = 1	2	2
data_raw['FamilySize'][data_raw['Survived'] == 1].value_counts()	2	2
df_train['training_set'] = True #assing an extra variable to training and testing dataset before joining them	2	2
np.sum(cnf_matrix[:,0])	2	1
out['PassengerId'] = [i for i in range(train.shape[0]+1,train.shape[0]+x_test.shape[0]+1)]	2	2
y_train.copy()	2	2
test_accuracy.max()	2	1
train_data[['Pclass', 'Survived']].groupby('Pclass').sum()	2	2
"df.groupby(""Pclass"").Age.mean()"	2	2
test_df.drop('Name', axis=1, inplace=True)	2	2
df.loc[ (df.Fare_Per_Person>=8) ,'HighLow'] = 'High'	2	2
train_dataset.dtypes.reset_index()	2	2
df_train['Age'].max(), df_train['Age'].min(), df_test['Age'].max(), df_test['Age'].min()	2	1
X_test[['PassengerId']]	2	2
scaler.transform(train['Age*Class'].values.reshape(-1, 1))	2	2
"test[""Age""].fillna(test[""Age""].median(), inplace=True)"	2	2
dataset['Sex'] = pd.factorize(dataset['Sex'])[0]	2	2
train_df['child'] = [1 if i<16 else 0 for i in train_df.Age]	2	2
test_df['Name']:	2	2
"new_data_train.drop(""Survived"", axis=1)"	2	2
dataset['Sex'] = dataset['Sex'].map(gender_mapping)	2	2
train_set.shape # This exactly matches the original training set	2	2
"df['NameLength'] = df[""Name""].apply(lambda x: len(x))"	2	2
testdata.info()	2	1
train_df.head(6)	2	2
train_data.Title.mode()[0]	2	2
test_data['Title'] = test_data['Title'].replace(['Dr', 'Rev', 'Col', 'Major', 'Countess', 'Sir', 'Jonkheer', 'Lady', 'Capt', 'Don'], 'Others')	2	2
"data_val[""Pclass""][x] #Pclass = 3"	2	2
estimators.append(('standardize', StandardScaler()))	2	2
title.append(row.split(',')[1])	2	1
df['Family_Survival'] = 0.5	2	2
"dataset.loc[dataset[""FamilySize""] == 1,""IsAlone""] = 1"	2	2
X_train_analysis['TitleGroup'] = X_train_analysis['TitleGroup'].map(titlegroup_dict).astype(int)	2	2
df.loc[(df.Age.isnull())&(df.Initial=='Miss'),'Age']=22	2	2
train_df['CabinInfo'].unique()	2	1
history.history['binary_accuracy']	2	2
df_train.Cabin.fillna('Unknown',inplace=True)	2	2
merged['Fare_binned'] = pd.cut(merged.Fare, cut_points, labels = groups)	2	2
test['Embarked'] = data['Embarked'][len(train):]	2	2
"trainingData[""Sex""] = trainingData[""Sex""].astype(""int"")"	2	2
model.add(Dense(16, kernel_initializer='normal', activation='relu'))	2	2
df.filter(regex='Survived|Age_.*|Family|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')	2	1
df_data['Title'] = df_data['Title'].replace(['Lady'],'Mrs')	2	2
df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1)	2	2
temp[6] = embarked_lookup[temp[6]]	2	1
train_df.drop(['Age'], 1, inplace=True)	2	2
in ['Dr', 'Col', 'Capt','Major','Don','Rev','Dona','Jonkheer']:	2	1
"new_data[""Name""] = new_data[""Name""].str.replace(""Mlle"",""Miss"")"	2	1
coeff.sort_values(by='Correlation', ascending=False)	2	2
full['Family'] = (full['SibSp'] + full['Parch'] + 1)	2	2
"new_data[""Sex""] = data[""Sex""].str.contains(""female"").astype(int)"	2	1
comb2.loc[comb2['Survived'].isin([np.nan]) == False]	2	2
X_train.head(0)	2	2
train['Pclass'].unique()	2	2
train_df.copy().append(test_df)	2	1
test.drop(['Sex','Embarked','PassengerId','Name','Ticket','Cabin'],axis=1)	2	2
titanic_data_bucket['yes'].plot(kind='bar',alpha=0.5)              # 各年龄段乘客存活/未存活数分布，通过柱状图展示	2	2
df_test['Fare'].fillna(df_test['Fare'].mean(), inplace=True)	2	2
"df[""Embarked""][df[""Embarked""] == ""S""] = 0"	2	2
dataset.loc[(dataset['Age']>36) & (dataset['Age']<=62), 'Age']=3,	2	2
"train['Family'] = train[""Parch""] + train[""SibSp""]"	2	2
combine_df.head(10)	2	2
pd.isnull(targets).sum()	2	2
self.losses.append(error)	2	2
train_df[['FareBand', 'Survived']].groupby('FareBand').mean()	2	2
df_test.loc[(df_test['Age'] > 16) & (df_test['Age'] <= 32), 'Age'] = 1	2	2
train.loc[:, train.isnull().any()].head()	2	1
train.groupby(['Title', 'Pclass'])['Age']	2	2
"test['Cabin_Lett']=test['Cabin_Lett'].replace(""A"",1).replace(""B"",2).replace(""C"",1).replace(""0"",0).replace(""D"",2).replace(""E"",2).replace(""F"",1).replace(""G"",1)"	2	2
sml.train[['Name', 'Title']].head()	2	2
test['Salutation'] = test['Salutation'].replace('Ms', 'Miss')	2	2
df['Title'].replace(['Dr','Rev','Col','Major','Dona','Don','Sir','Lady','Jonkheer','Capt','the Countess'],'Others',inplace=True)	2	2
label_encoder.transform(label_encoder.classes_)	2	1
model.add(Dense(16, activation='relu', input_shape=(3,)))	2	2
X.loc[train_index],X.loc[test_index]	2	2
raw_test['PassengerId']	2	2
np.empty((nfolds, ntest))	2	2
data['Pclass'] = data['Pclass'].map({1: 3, 2: 2, 3:1}).astype(int)	2	2
clfs.items():	2	1
df['Fare_Per_Person']=df['Fare']/(df['Family_Size']+1)	2	2
"df_data[""Deck""]=df_data[""Deck""].astype('int')"	2	2
test['Fare']=test['Fare'].fillna(test['Fare'].mean())	2	2
title_arr.append('Master')	2	1
full_dummies.head()	2	2
train.replace(to_replace=np.nan, value=0, inplace=True)	2	2
item['Class']=item['Pclass'].apply(lambda x:1 if (x==1 or x==2) else 0)	2	1
test.loc[v[i], 'ChildNotSurvived'] = temp[(temp.Age<19)&(temp.Survived==0)].shape[0]	2	2
train['Honorific']=train['Name'].transform(lambda f:re.findall('(Mr|Mrs|Master|Miss)',f))	2	2
train.drop('Survived', axis = 1, inplace = True)	2	2
farehist.plot.hist(bins=30,figsize=(15,8),alpha=0.3,stacked=True,color=['blue','red'])	2	2
df_age_train.drop(['Age', 'Survived'], axis=1).values.astype(float)	2	2
accuracy.eval(fd_train)	2	1
test.drop(['PassengerId','Name','Ticket'],axis=1)	2	2
test_df.fillna(test_df.mean())	2	2
combined_train_test.loc[combined_train_test.Fare == 0, 'Fare'] = np.nan	2	2
cluster_map_test['data_index'] = test.index.values	2	1
np.where(pred_probs < 0.5)	2	1
features.loc[ (data.Age.notnull()) ]# known Age values	2	2
sml.feature.replace('Title', 'Mlle', 'Miss')	2	2
dataset['Title'] = dataset['Title'].map(title_map)	2	2
data.Fare.fillna(data.Fare.median())	2	2
"test_data.drop(labels=['Name', 'Ticket', ""PassengerId"", ""Cabin""], axis=1)"	2	2
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data=df)"	2	2
titanic.head(1)	2	2
df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode().iloc[0])	2	2
"Titanic[""AgeGroup""] = Titanic.apply(lambda row: AgeGroup(row[""Age""]), axis=1)"	2	1
test['Age'].fillna(test['Age'].mean(), inplace=True)	2	2
poly.transform(X_train_transformed_scaled)	2	2
dfFull['Age'] = dfFull.Age.round()	2	2
dataset['AgeGroup']=dataset['AgeGroup'].map(cleanup_agegroup).astype(int)	2	2
titanic_df['Fare'].isnull().sum()	2	1
data_all['Title'] = data_all['Title'].replace('Mlle', 'Miss')	2	2
dataset['Fare'].plot(kind='hist')	2	2
"parameters[""b2""]"	2	1
processed_data['title'] = processed_data['title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	2	2
train['Title'] = train['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	2	2
subm_df.head()	2	2
submission.to_csv('submission1.csv',index = False)	2	2
df_train.columns.values	2	2
train_y.as_matrix()	2	2
combined_train_test['Age_Null'] = combined_train_test['Age'].apply(lambda x: 1 if(pd.notnull(x)) else 0)	2	2
full.ix[(full.TPP==4)&(full.Sex=='male')&(full.Pclass==3),'TPP']=3	2	2
train['Age'].fillna(-1,inplace=True)	2	2
model.add(Dropout(dropout))	2	1
train_df.join(pclass_dummies_train)	2	2
np.mean(res_clf_rbf), np.mean(res_clf_gb), np.mean(res_rf),	2	1
test_df.isnull().sum().to_frame('Missing values').transpose()	2	1
data_all['Cabin_F'] = (data_all['Cabin']=='F')+0	2	2
df.loc[len_df1:]	2	2
models.sort_values(by='Score',ascending=False)	2	2
train.drop(['PassengerId','Survived'],axis=1)	2	2
test['Sex'] = test['Sex'].map(sex_map)	2	2
train.describe() #Checking for any missing values due to manipulation	2	2
row['Fare'] >30 and  row['Fare'] <= 70.0:	2	2
y_predicted.size	2	1
data['Age'] = StandardScaler().fit_transform(data['Age'].values.reshape(-1, 1))	2	2
combined_train_test['Title'],	2	2
test_filtered.Age.fillna(test_filtered.groupby('Pclass').Age.transform('mean'))	2	2
test_label['Survived']	2	2
test_df['Person'] = test_df[['Age','Sex']].apply(passengers, axis=1)	2	2
"train_df[""Survived""],"	2	1
to_test.drop(['SibSp', 'Parch', 'Ticket', 'Embarked', 'Name', 'Cabin',                        'PassengerId', 'Fare', 'Age'], axis=1)	2	2
test_agg.head()	2	1
trainSTD2['EmbarkedC'] = trainSTD[:,4]	2	1
train_df.Fare.median()	2	2
int_pred.append(int(y))	2	1
le.transform( df['Ticket'])	2	2
Submission['Survived']=randomf.predict(X_test)	2	1
"titanic_df.groupby(['Pclass','Survived']).apply(replace_all_null, ""Age"")"	2	1
full.loc[full.Age>64.034,'AgeCut']=5	2	2
test_data['Title'] = test_data['Title'].replace('Ms', 'Miss')	2	2
test_df['Fare'].isnull()	2	2
Pclass3.mean().Age	2	1
dataset.loc[(dataset['Fare']>30) & (dataset['Fare']<=100), 'Fare']=2,	2	2
ticketV.loc[ticketV > 1].index.tolist()  # Creates a list of tickets shared by group of passemgers	2	1
train[['SibSp','Survived']].groupby(['SibSp']).mean().sort_values(by='Survived', ascending=False)	2	2
data_train['Embarked'].value_counts()	2	2
all_data['CabinType3'] = all_data['Cabin3'].apply(get_cabin_type)	2	2
test.iloc[:,0]	2	2
cv_set.drop('Survived', axis=1),	2	2
training.drop('Survived', axis=1)	2	2
axes[1].grid(True)	2	2
train['Sex'][train['Sex']=='female'].count()	2	2
Data['Title1'].head(3)	2	1
df1['SibSp'] = df1['SibSp'].apply(lambda x: 'no' if x == 0 else 'less' if x <= 2 else 'many')	2	2
"dataset[""Age""]=dataset[""Age""].fillna(median_age)"	2	2
pd.merge(model_summary,df3,how='outer')	2	1
"survivors_3.plot.hist(fc=(0, 1, 0, 0.5), label=""Class 3"")"	2	1
test_df.drop(['Embarked'], axis=1, inplace=True)	2	2
le.transform(test_df[feature])	2	2
"testing[""FamilySize""] = testing[""SibSp""] + testing[""Parch""] + 1"	2	2
dataset.loc[dataset['FamilySize'] == 1, 'isAlone'] = 1	2	2
"train[""Embarked""] = train[""Embarked""].fillna('C')"	2	2
df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)	2	2
"test['Embarked']=test['Embarked'].fillna(""S"")"	2	2
df['family_size'] = df['SibSp'] + df['Parch'] + 1	2	2
dataset.shape[0]   #number of rows	2	2
test_df.drop(['Cabin'],inplace=True,axis=1)	2	2
"test[""Fare""].fillna(test[""Fare""].mean(), inplace = True)"	2	2
df['Cabin'].fillna('UNK', inplace=True)	2	1
item['Age']=item['Age'].fillna(item['Age'].median())	2	1
"test['Sex'] = test.Sex.apply(lambda x: 0 if x == ""female"" else 1)"	2	2
"dataset[""Embarked""] = dataset[""Embarked""].fillna(freq_port)"	2	2
dfTest[['Pclass','Sex','ParchCat','Embarked']]	2	2
"test.loc[test[""Title""] == ""Lady"", ""Title""] = 'Rare Title'"	2	2
test.drop('Cabin', axis = 1, inplace = True)	2	2
train.set_value(index,'Miss',1)	2	2
"df[""Fare_categories""] = pd.cut(df[""Fare""],cut_points,labels=label_names)"	2	2
list_iter_score.append(max_val)	2	1
missing_age_df.info()	2	2
"df[""FamilySize""] = df.Parch + df.SibSp + 1"	2	2
original_test.loc[:,'PassengerId'],	2	1
test['Family']= test['Parch']+ test['SibSp']+1	2	2
train.iloc[:,0].values	2	2
test_data.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)	2	2
whole_training_df.ix[:, whole_training_df.columns == 'Survived']	2	2
plt.hist(rootFareUnder181)	2	1
full['NorAge'] = pd.Series(scaler.fit_transform(full.Age.reshape(-1,1)).reshape(-1), index=full.index)	2	2
df.groupby('Embarked').count()	2	1
df_train.Embarked.fillna(MedEmbarked,inplace=True)	2	2
"df[""Mr""] = df[""Name""].apply(lambda x: x.count(""Mr.""))"	2	2
all_df.loc[PassID, 'Family survival'] = 0	2	1
all_df.loc[PassID, 'Family survival'] = 1	2	1
raw_data.fillna(raw_data.median(), inplace=True)	2	2
Titanic_Master.reset_index(inplace=True, drop=True)	2	1
df.loc[ df['Age'] > 64, 'Age'] = 4	2	2
z.shape	2	2
df_full[['Fare']] = scaler.fit_transform(df_full[['Fare']])	2	2
df1.isna().sum()	2	1
train_df[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False)	2	2
df_all_age_not_null.drop(['Survived'], 1)	2	1
titanic_df['BigFamily'] =   titanic_df[['FamilySize']].apply( (lambda x: int(int(x) >= 5) ), axis=1)	2	2
"traindf.drop(""Survived"", axis=1)"	2	2
df_test.tail()	2	1
"holdout[""Cabin_type""] = holdout[""Cabin""].str[0]"	2	2
"data.drop(""Survived"",axis=1)"	2	2
axes2.hist(train_df['Age'], color=sns.xkcd_rgb['light grey'])	2	2
ax[0].set(xlabel='tol', ylabel='Accuracy')	2	1
train_data.groupby(['Sex', 'Survived'], as_index=False).count()	2	2
train['family_size'] = 1 + train['SibSp'] + train['Parch']	2	2
tit_df.info()	2	2
oneHot_X_train.head()	2	1
test.loc[test['Sex'] == sex[i], 'Sex'] = i	2	1
train['age_cat'] = None	2	2
row['Sex'] == 'female' and row['Pclass'] == 1:	2	2
"df[""Deck""][df[""Deck""] == ""C""] = 3"	2	2
"train1[""Survived""] = train1[""Survived""].astype(int)"	2	1
combined_train_test['Fare_Category'],	2	2
num.groupby(cat).mean().sort_values( ascending = False)	2	2
df_test.describe(include='all')	2	2
df_test['TicketPrefix'] = df_test['Ticket'].apply(lambda x: Ticket_Prefix(x))	2	2
dataset['Relatives'] = dataset['SibSp'] + dataset['Parch']	2	2
Train_data['Survived'].value_counts(normalize = True)	2	1
dfTest[['Pclass','Sex','ParchCat','Embarked','Fare','TitleCat','Age']]	2	2
x_train.head(2)	2	2
z.T	2	2
comb2.loc[comb2['Survived'].isin([np.nan]) == True]	2	2
"titanic_df.drop([""girl1"",""girl2"",""3rdGirls"",""BoyClass""], axis = 1, inplace = True)"	2	2
models['set1'] = {}	2	1
mean_ages[2]=np.average(df[df['Title'] == 'Mr']['Age'].dropna())	2	2
X_train_analysis['Family'] = X_train_analysis['Family'].map({'alone': 0, 'small': 1, 'medium': 2, 'large': 3}).astype(int)	2	2
"dataset.loc[(dataset[""Fare""] > 31) & (dataset[""Fare""] <= 69.487), ""Fare""] = 6"	2	2
trainSTD.copy()	2	1
"X_test.drop(""PassengerId"", axis = 1)"	2	2
_both_df.loc[_train_idxs, :], _both_df.loc[_test_idxs, :]	2	1
"_df[""embarked""]   = _df.embarked.apply(lambda x : x if x not in [""S"", ""C"", ""Q""] else embarked_dict[x] )"	2	1
test_data['Age'].iloc[i] = train_data['Age'].median()	2	2
full_data['Survived']	2	2
MLA_compare.loc[row_index, 'MLA Recall'] = recall_score(y_test, predicted)	2	2
test.drop('Sex', axis=1, inplace=True)	2	2
train.fillna(train.mean())	2	2
train_na.drop(train_na[train_na == 0].index).sort_values(ascending=False)[:30]	2	2
train_data['TravelAlone']=np.where(train_data['TravelBuds']>0, 0, 1)	2	2
df_train.head(n=10)	2	2
models['set2'] = {}	2	1
idx.head()	2	1
X['Embarked'] == 'Q'	2	2
dataset.loc[~dataset['Embarked'].isnull(),'Embarked'].unique(): # For each port	2	1
df.loc[ df.Cabin.isnull()==False,'Cabin'] = 1.5	2	2
TRAIN['Survived']	2	1
"Ttest[""Fare""] = Ttest[""Fare""].fillna(m)"	2	2
"dfFamily[""FamilyName""]"	2	1
data.isnull().mean()	2	2
"data[""Age""] = scaler.fit_transform(data[""Age""].values.reshape(-1,1))"	2	2
train.loc[v[i], 'FatherOnBoard'] = 1	2	2
na_dict.copy()	2	1
test_df['family_group'] = test_df['family_size'].map(family_group)	2	2
X.loc[X['Embarked']=='S','Embarked']=-1	2	1
train['Fare'].fillna(train['Fare'].mean(), inplace=True)	2	2
accResult.sort_values(by='Score', ascending=False)	2	1
train['source']='train'	2	2
"test[""Fare""].fillna(test[""Fare""].mean(), inplace=True)"	2	2
"train_features[""Survived""]"	2	1
test['FatherOnBoard'] = 0	2	2
"new_data['Queenstown'] = new_data[""Embarked""].str.contains(""Q"").astype(int)"	2	1
df['Deck'] = df['Cabin'].str[0]	2	2
"new_data[""Name""] = new_data[""Name""].str.replace("","","";"")"	2	1
cost_s.append(np.mean(c_s))	2	1
"train.replace(""male"",0).replace(""female"",1).replace(""S"",0).replace(""C"",1).replace(""Q"",2)"	2	2
"test_df[""Family""] = test_df[['SibSpBinary', 'ParchBinary']].apply(get_family, axis=1)"	2	2
"train_kaggle[""dt_prediction""] = dt_model.predict(train_kaggle[dt_col])"	2	1
test.head(2)	2	2
data.shape[0]	2	2
classifier_update.sort_values(by='Score', ascending=False)	2	2
s.loc['Golf']	2	2
df_train.drop(columns = ['PassengerId'], axis = 1)	2	2
test.drop(['Embarked'], axis=1, inplace=True)	2	2
test_clean.sample(10)	2	1
train.iloc[train_index]	2	1
"dataset[""Sex""] = dataset[""Sex""].map({""male"": 0, ""female"": 1})"	2	2
s.loc['Animal'] = 'Bears'	2	2
df.loc[df.Age > 70]	2	2
"X[""Embarked""] = X[""Embarked""].replace([""S"", ""C"", ""Q""], [0, 1, 2])"	2	1
train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]	2	2
data['Cabin'] = StandardScaler().fit_transform(data['Cabin'].values.reshape(-1, 1))	2	2
test['Embarked'] = encoder.fit_transform(test['Embarked'])	2	2
train_ch.groupby('Is_Alone').sum()	2	2
full['NorFare'] = pd.Series(scaler.fit_transform(full.Fare.reshape(-1,1)).reshape(-1), index=full.index)	2	2
test_df.drop(['PassengerId','Survived'],axis=1)	2	2
best_params['min_samples_leaf'],	2	1
my_list.append(number)	2	2
train_ch.groupby('AgeBin').sum()	2	2
data['Parch']	2	1
"titanic_df[""Age""].median(skipna=True)"	2	2
tr2['Titles'] = tr2.apply(lambda r:titleMap[getPName(r['Name'])], axis=1)	2	2
sns.boxplot(x = 'Pclass', y = 'Fare', data = data_raw)	2	2
train_raw.copy(deep=True)	2	2
all_data['Pclass'] = ['c_' + str(x) for x in all_data.Pclass]	2	2
output['Age'] = PrepareAge(data) / 80	2	2
Title.append(title)	2	2
new_train.iloc[:,[0,1,4,6]].values	2	1
train_data['Title'] = train_data['Title'].replace('Ms', 'Miss')	2	2
output_df.head()	2	2
x['SibSp']	2	2
"train[[""SibSp"", ""Survived""]].groupby(['SibSp']).mean().sort_values(by='Survived', ascending=False)"	2	2
train['Age'].iloc[i] = age_pred	2	2
data_all['Cabin'] = data_all.Cabin.fillna('ZZ')	2	2
"test_dataset.drop(""PassengerId"",axis=1).copy()"	2	2
train_ch.groupby('Ticket_Sign2').sum()	2	2
train_data.drop(columns=['Ticket', 'PassengerId', 'Cabin'])	2	2
train.shape[0] + test.shape[0]	2	2
frame.loc[i] = [value,                        len(train_data[(train_data['Survived'] == 1) & (train_data[key] == value)]),                        len(train_data[(train_data['Survived'] == 0) & (train_data[key] == value)])]	2	2
same_ticket_count_gp.head()	2	2
dataset.loc[(dataset.Sex == 'male')   & (dataset.Title == 'Dr'),'Title'] = 'Mr'	2	2
"df[""Mrs""] = df[""Name""].apply(lambda x: x.count(""Mrs.""))"	2	2
train_x['Survived']	2	2
selector.transform(X)	2	1
dataset['TitleGroup'] = dataset.Title.map(title_dict)	2	2
df.loc[df['has_cabin']==0, 'cabin_level'] = 'T' # T isn't actually a floor of the ship	2	2
"data.loc[data[""Sex""] == ""female"", ""Sex""] = 1"	2	2
full.drop('Embarked',axis=1,inplace=True)	2	2
models.sort_values(by='valid_score', ascending=False)	2	1
df['Family_size'] = df['SibSp'] + df['Parch'] + 1	2	2
"df_train_tmp[""Embarked""].fillna(df_train_tmp[""Embarked""].median(), inplace=True)"	2	2
np.where(train_filtered.Ticket.duplicated(), 1,0)	2	2
item['Male']=item['Sex'].apply(lambda x:0 if x=='female' else 1)	2	1
out['Survived']	2	2
"train[""Age""][x] = age_title_mapping[train[""Title""][x]]"	2	2
X_data[['PassengerId','Survived', 'Pclass','Sex','Age','SibSp','Parch','Fare', 'Embarked']]	2	2
pd.pivot_table(train, values= 'Survived',index=['Title', 'Pclass'],columns='Sex',aggfunc=np.mean, margins=True)	2	2
test['Age'][(test['Sex_cat'] == i) & (test['Pclass'] == j+1)].mean()	2	2
"dataset[""FamilySize""] = dataset[""Parch""] + dataset[""SibSp""] + 1"	2	2
np.mean(valid_scores, axis=1)	2	1
"title_Dict.update(dict.fromkeys([""Capt"", ""Col"", ""Major"", ""Dr"", ""Rev""], ""Officer""))"	2	2
age.count() / data[(data.survived == 1)].age.count()	2	1
item['EmbarkedNum']=item['Embarked'].apply(lambda x:0 if x=='S' else (1 if x=='C' else 2 ))	2	1
train['Title1'].head(3)	2	1
trainSTD2['EmbarkedQ'] = trainSTD[:,6]	2	1
"train.drop(""Survived"",axis = 1)"	2	2
titanic_test_data_X.shape	2	2
k.T	2	1
df['Sex']=x_sex.astype(np.float)	2	2
X['Age'].fillna(X['Age'].mean(), inplace=True)	2	2
df_test['Family'] = df_test['SibSp'] + df_test['Parch'] + 1	2	2
data_copy.loc[:, 'Pclass'] = data_copy['Pclass'].fillna(data_copy['Pclass'].median())	2	2
data_pruned['Title']=Title.values	2	1
index[0],	2	1
x_train.iterrows():	2	1
row.replace('.',',').replace(' ','')	2	1
accs.append(targ - m.score(X, y_train))	2	1
train['Age'][(train['Sex_cat'] == i) & (train['Pclass'] == j+1)].mean()	2	2
df_test['Survived'] = np.nan	2	2
one_hot_X_train.copy()	2	1
train.sort_values(['No_of_Passengers_on_Ticket'], ascending=True)	2	2
test_df.join(titles_dummies_test)	2	2
"train[""Embarked""] = train[""Embarked""].astype(""category"")"	2	2
embark_dummies_titanic.head()	2	1
train.drop('Survived',axis=1,inplace=True)	2	2
train['Sex'].replace(['male','female'],[0,1], inplace=True)	2	2
titanic_df['Bc'] =     titanic_df[['Child','BigFamily']].apply( get_Bc, axis=1 )	2	2
df.loc[df.Fare == df.Fare.max()]	2	2
df.loc[(df.Cabin.notnull()),'Cabin'] = 'Y'	2	2
test.loc[v[i], 'Female_Friends_Survived'] = temp_df[(temp_df.Sex=='female')&(temp_df.Survived==1)].shape[0]	2	2
survived_data['Parch']	2	1
test['CategoricalAge'] = test.apply(lambda row: Age(row), axis=1)	2	2
"val_dataset.drop(labels=[""Survived""], axis=1).values"	2	2
submission.to_csv('results.csv', index=False)	2	2
df['Family']=df['SibSp']*df['Parch']	2	2
colData.append(float(row[col]))	2	1
train.loc[train[(train['Title']=='Dr')&(train['Age'].isnull())].index, 'Age'] = dr_age_mean	2	2
"train.set_index(""PassengerId"")"	2	2
"dataset[""Fare""] = dataset[""Fare""].astype(int)"	2	2
data['RoomBand'] = pd.cut(data['Room'], 5, labels=range(5)).astype(int)	2	2
"train_df[[""Pclass"",""Survived""]].groupby([""Pclass""],as_index=False).mean().sort_values(by=""Survived"",ascending=False)"	2	2
train_data[['Parch', 'Survived']].groupby('Parch').mean().Survived.plot('bar')	2	2
to_test['Title'] = to_test['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don',                                                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],                                                'Rare')	2	2
test_n.dropna(how='any')	2	2
model.add(Dense(128))	2	1
titanic_test['Fare']=titanic_test['Fare'].fillna(titanic_test['Fare'].median())	2	2
full['Name'].apply(lambda x: x.split()[1])	2	2
df_train3.reset_index(drop = True)	2	2
train['Sex'].sort_values().unique()	2	1
concat.FamilyID.values[concat.FamilySize.values <= 2] = 'Small'	2	2
axes[2].set_yticks(np.arange(0.0,1.1,0.1))	2	1
subm.to_csv('subm.csv', index=False)	2	2
test_data.drop('Name', axis=1)	2	2
test_data['Age'].std()	2	2
test_data['Family_Size']=test_data['SibSp']+test_data['Parch']+1	2	1
train_set['Survived'].copy()	2	2
sml.feature.replace('Title', 'Mme', 'Mrs')	2	2
"train_df.drop([""PassengerId"",""Name"",""Ticket""], axis=1)"	2	2
data.loc[data['Age'] <= 16, 'Age'] = 0,	2	2
"new_data[""Name""] = new_data[""Name""].str.replace(""Sir"",""Mr"")"	2	1
Y_train.shape	2	2
dataset['Sex'].replace(['male','female'],[0,1],inplace=True)	2	2
data['Cabin'] = data['Cabin'].apply(lambda x: x[0])	2	2
data['Name'] = data['Name'].map(lambda x: x.split(',')[1].split('.')[0].strip())	2	2
dataset.loc[(dataset['Age'] > 30) & (dataset['Age'] <= 40), 'Age']        = 1	2	2
"test['miss'] = np.where(test['Name'].str.contains(""Miss. ""), 1, 0)"	2	1
list_new.append(ele)	2	1
x_train['AgeNull'] = (x_train['Age'] == -999)	2	2
"title_Dict.update(dict.fromkeys([""Jonkheer"", ""Don"", ""Sir"", ""the Countess"", ""Dona"", ""Lady""], ""Royalty""))"	2	2
test_filtered['Sex'] = np.where(test_filtered['Sex']=='male', 0, 1)	2	2
df['AgeBin'] = pd.qcut(df['Age'], 4)	2	2
"sns.boxplot(data=X[~X.Age.isnull()], x=""titles"", y='Age')"	2	1
combined_features['Sex'] = combined_features['Sex'].map({'male':1,'female':0})	2	1
sns.boxplot(y='Age',x='Pclass', data=train).set_title('Age and Pclass')	2	2
dtypes.astype('str').values.reshape(-1,)	2	1
"train.loc[train[""Title""] == ""Major"", ""Title""] = 'Rare Title'"	2	2
df['Feedback'] = ['Positive', None, 'Negative']	2	2
full.loc[full['PassengerId'] == passID, 'Connected_Survival'] = (lived-died)/(lived+died)	2	1
predictions.shape[0]	2	1
group_class_sex.Survived.mean()	2	2
"pd.isnull(data_val[""Fare""][x]):"	2	2
train4.head(5)	2	2
oneHot_test.head()	2	2
dataset['Embarked'].fillna(dataset['Embarked'].mode()[0],inplace = True) # The missing embarked data is filled in with mode	2	2
"train[""Embarked""] = train[""Embarked""].fillna(train[""Embarked""].mode()[0]) #出港地の欠損値を最頻値で埋める"	2	1
c_s.append(np.sum(np.abs(a_s-y))/y.shape[0])	2	1
all_data['PassengerId']	2	2
X_selected_df.shape	2	1
full.ix[(full.TPP==4)&(full.Sex=='female')&(full.Pclass!=3),'TPP']=1	2	2
ds.fillna(0)	2	1
df['Age'] = df['Age'].astype('int')	2	2
dfFull['CabinCat'] = dfFull.Cabin.str[0].fillna('Z')	2	2
all_data.loc[all_data['Fare'] <= 7.91, 'Fare'] = 0	2	2
df_full.drop('Cabin', axis=1)	2	2
variable.plot.hist(figsize = fig_size, color = 'salmon')	2	2
train['CategoricalFare'] = pd.qcut(train['Fare'], 3)	2	2
df_train.append(df_test, ignore_index=True)	2	2
svc_train_scores.append(svc.score(adj_train_df,y))	2	1
train_df['Age']=data_df['Age'][:891]	2	2
titanic_df.join(child_dummies)	2	2
df.loc[idx_nan_age, 'Age'] = df['Title'].loc[idx_nan_age].map(map_means)	2	2
df['Title_cat'] = title.apply(lambda x: title_map[x])	2	2
"models.append((""XGB"", XGBClassifier))"	2	1
combined_train_test['First_Name'],	2	2
axs[0].set_ylabel('Log loss')	2	2
dataset.loc[dataset['Age'] > 64, 'Age']	2	2
groupbysex.Survived.mean()	2	2
train['Embarked'][train['Embarked'] == 'C'] = 1	2	2
acc_random_forest.std(), acc_gaussian.std(), acc_perceptron.std(),	2	2
combined_train_test.loc[combined_train_test.Age < 0, 'Age'] = np.nan	2	2
"train[""Age""][train_nas] = impute_age_train"	2	2
testset1.loc[testset1['Sex']=='male','Sex'] = 0	2	2
titanic_df.drop('Cabin', axis=1, inplace=True)	2	2
validation.loc[ms_mask, 'Age'] = validation.loc[ms_mask, 'Age'].fillna(validation[validation.Title == 'Miss'].Age.mean())	2	2
raw_test_df['Sex'],	2	2
dataset['Title']=dataset['Name'].apply(get_title)	2	2
df.drop(['Parch'], axis=1, inplace=True)	2	2
dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2	2	2
train_data[['SibSp', 'Survived']].groupby('SibSp').mean().Survived.plot('bar')	2	2
"train[""AgeGroups""] = pd.cut(train.Age,labels=labels, bins=bins)"	2	2
combined_train_test['Ticket_Letter'] = combined_train_test['Ticket_Letter'].apply(lambda x: np.NaN if x.isnumeric() else x)	2	2
"X_test.drop(""Cabin"", axis = 1)"	2	2
df_full.loc[df_full['Age'] >= 45, 'Categ_Age'] = 5	2	2
X_val.iloc[[row_to_show]]	2	2
"train[""Title""] = train[""Title""].map({""Mr"" : ""Mr"", ""Mrs"" : ""Mrs"", ""Miss"" : ""Miss"", ""Master"" : ""Master""})"	2	2
df.loc['Store 1']	2	2
df_test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']]	2	2
test_data.drop(['SibSp','Parch'], axis=1)	2	2
df.iloc[:,[0,1,4,6]].values	2	1
train['Title'].unique()	2	2
train_df['Sex'].unique()	2	2
"train_instance.drop(labels=[""Survived""], axis=1)"	2	1
"df[""Embarked""] = df[""Embarked""].fillna(self.embarked_mode)"	2	1
X_train.shape, Y_train.shape, X_dev.shape, Y_dev.shape, X_test.shape	2	1
data_all['Age'] = data_all['Age'].astype(int)	2	2
"solution.to_csv(""solution.csv"", index=False)"	2	1
"train_df[[""Ticket""]].values.tolist()"	2	1
train.loc[train[(train['Title']=='Master')&(train['Age'].isnull())].index, 'Age'] = master_age_mean	2	2
family_survive_list.append(train_data['Survived'][j])	2	1
titanic_test_df.shape	2	1
"data_all['Title'] = data_all['Title'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	2	2
"new_data[""Name""] = new_data[""Name""].str.replace(""Don"",""Mr"")"	2	1
age.iloc[i,1]	2	1
dataset['Title'] = dataset['Title'].replace(['Capt', 'Col', 'Major','Rev'], 'Officer')	2	2
np.round(clf_final.predict(test_df)).astype(int)	2	2
train_raw.head()	2	2
training.drop(features_drop, axis=1)	2	2
test_filtered.Age.apply(lambda x: test_age_hist_dist.rvs() if np.isnan(x) else x)	2	2
train['Singleton']*train['Pclass']	2	1
submission['Survived']=test_predicted	2	1
test_set.shape # This exactly matches the original test set	2	2
td_survived.Age.hist()	2	2
combined_train_test['Pclass'].replace([1, 2, 3],[Pclass_1_mean_fare, Pclass_2_mean_fare, Pclass_3_mean_fare], inplace = True)	2	2
data['SibSp'][i] = data['SibSp'].mean()	2	2
full_df.head()	2	1
data.loc[(data['Age'] > 36) & (data['Age'] <= 62),'Age'] = 3,	2	2
dataset['Sex'] = dataset['Sex'].map( {'female':1, 'male':0}).astype(int)	2	2
data_test['PassengerId'].values	2	2
"train_set.loc[train_set[""Embarked""] == ""S"", ""Embarked""] = 0"	2	2
titanic_df.loc[(titanic_df['Age'] > 48) & (titanic_df['Age'] <= 64), 'Age'] = 3	2	2
"df_test[""Family_Survival""] = df_data['Family_Survival'][891:]"	2	2
data['Age'][i] = data['Age'].mean()	2	2
"models.append((""LDA"", LinearDiscriminantAnalysis))"	2	1
df_test['Fare_scale'] = scaler.fit_transform(df_test['Fare'].values.reshape(-1,1), fare_scale)	2	2
dataset['Age_null'] =data_raw['Age'].isnull()*1	2	2
df_train['Age'] = df_train.groupby(['Sex','Pclass','Title'])['Age'].apply(lambda x: x.fillna(x.median()))	2	2
"dataset[""Title""] = dataset[""Title""].replace(['Master', 'Dr'], 'Prof')"	2	2
processed_data['fare'] = pd.Series(raw_data['Fare'])	2	2
test_df['Salutation'] = enc.fit_transform(test_df['Salutation'].astype(str))	2	1
"train[""Age""]"	2	2
tmp[['Age','Sex','Pclass','Fare','SibSp','Parch','Embarked','Cabin']]	2	1
"trainingData[""Sex""] = trainingData[""Sex""].astype(""category"")"	2	2
row['Embarked'] == 'C':	2	2
full.groupby('Title')['Title'].count()	2	1
"scaled_data[[""Fare"",""Age""]] = scaler.fit_transform(scaled_data[[""Fare"",""Age""]])"	2	1
train.iloc[:,0:1]	2	2
data.copy(deep= True)	2	2
ftrain['Embarked'] = ftrain['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	2	2
selection.transform(X_test)	2	2
np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1)) / prediction_size	2	1
X_test_submission['Survived'] = np.round(y_test_pred).astype(int)	2	2
"test_df[""Child""] = test_df[[""MasterMiss"", ""Age"", ""Sex""]].apply(get_child, axis = 1)"	2	2
titanic.join(ports)	2	2
titanic_df['IsHusband3'] = titanic_df['Male3']	2	2
tf.add(tf.matmul(W3, A2), b3)  # Z3 = np.dot(W3,Z2) + b3	2	1
full_data['Title'] = full_data['Title'].map(title_mapping)	2	2
results['Survived'] = predictions	2	2
together['Cabin'].values[:20]	2	1
titanic_df.iloc[ : , fit.support_ ]	2	2
dfTrain[['Pclass','Sex','ParchCat','SibSpCat','Embarked','Fare','TitleCat','Age','TicketCat','CabinCat']]	2	2
df_test['Age_scale'] = scaler.fit_transform(df_test['Age'].values.reshape(-1,1), age_scale)	2	2
prices.hist()	2	2
data['Initial'].replace(['Mr', 'Mrs', 'Miss', 'Master', 'Other'], [0, 1, 2, 3, 4], inplace=True)	2	2
resultDf['total'] = resultDf.sum(axis=1)	2	1
dataset.loc[ dataset['Age'] <= 17, 'Age'] = 0	2	2
combined_train_test['Sex'] = lb_sex.transform(combined_train_test['Sex'])	2	2
df_test.shape[0] * 100      #compute percentage of missing values	2	1
df_study_rf.loc[ind, 'mean_train_score']	2	1
X_tr.copy()	2	2
train2_df.head(10)	2	1
titanictest.drop(['Name', 'Ticket', 'Cabin'], axis =1)	2	2
plt.boxplot(resultsF1)	2	2
validation['Title'] == 'Miss'	2	2
"parameters[""b1""]"	2	1
train_x['Title'] = train_x['Title'].replace('Mlle', 'Miss')	2	2
test_dataset['Age'].isnull().sum()	2	2
t.values,	2	1
test_set.values	2	2
np.where(test_data.Age != test_data.Age, avg_test_age, test_data.Age)	2	2
train[['Pclass','Sex','Age','SibSp','Parch','Mr','Mrs','Miss','royalty','officer','Embarked_S','Embarked_C','Embarked_Q','Embarked_unknown','Fare_cheap','Fare_average','Fare_costly']]	2	2
feature['Fare'].fillna(feature['Fare'].median(), inplace = True)	2	2
df_test.drop('Ticket', axis=1)	2	2
df.groupby(['Embarked']).mean()	2	2
DataFile['FareBin'] = label.fit_transform(DataFile['FareBin'])	2	2
train.groupby('Title')['PassengerId'].count().sort_values(ascending=False)	2	1
test_df['Sex'] = test_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	2	2
"df_test[""HadCabin""] = df_data[""HadCabin""][891:]"	2	2
resultDf.loc['total'] = resultDf.sum(axis=0)	2	1
sns.boxplot(x='Survived',y='Fare',data=train_df)	2	2
mod_df['Fare'] = df['Fare'].fillna(math.ceil(df['Fare'].mean())) # This is a new line see next line for explanation	2	2
ticket['SharedTicket'] = (ticket['Ticket'].eq(ticket['Ticket'].shift(1)) | ticket['Ticket'].eq(ticket['Ticket'].shift(-1)))	2	1
train.drop(['Survived','Sex','Embarked','PassengerId','Name','Ticket','Cabin'],axis=1)	2	2
test_data.drop('PassengerId',axis=1)	2	2
train_data.Age.describe()	2	2
train_filtered['Family'] = 0	2	2
titanic_data_bucket[['no_percent','yes_percent']] = titanic_data_bucket.apply(lambda x: x / x.sum()*100, axis=1)	2	2
temp[6] = 0	2	1
"X[""Deck""] = X[""Deck""].map(deck_map)"	2	2
X_train.loc[X_train['Sex'] == 'male', 'Sex'] = 0	2	2
dataset.drop(['Cabin','Name','Ticket','Parch','SibSp','Sex'],axis=1,inplace=True)	2	2
df_test['Fare'] = df_test['Fare'].astype(int)	2	2
train_df.Survived.values	2	2
best_params['criterion'],	2	1
dataset.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	2	1
"train.Embarked.fillna(""S"", inplace=True)"	2	2
df_predict.head()	2	1
only_Survived.dropna()	2	2
submission.to_csv('submission.csv', header=True, index=False)	2	2
raw_train['Age'].hist(bins=100, normed=True, alpha=0.5, color='gray')	2	1
df['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)	2	2
titanic['Fare'].unique()	2	1
combined_features['LargeFamily'] = combined_features['FamilySize'].map(lambda s: 1 if 5 <= s else 0)	2	1
predictions.append(validation_predictions)	2	1
original_test_data['PassengerId']	2	2
pivottable.style.background_gradient(cmap='Blues')	2	1
"model.add(Dense(256, activation=""relu"", kernel_initializer=""he_normal""))"	2	1
full.drop('Cabin',axis=1,inplace=True)	2	2
"dataset[""Cabin""].unique()"	2	1
test_df['Fc'] =     test_df[['C','Male']].apply( get_fmalec, axis=1 )	2	2
train_df.drop(['Sex'],axis=1,inplace=True)	2	2
output_data_frame.to_csv(output_file_name, index=False)	2	2
test_df.drop(['Ticket','Cabin','Name','Embarked'],axis=1,inplace=True)	2	2
np.empty((5,n_test))	2	2
ax[0].set_ylabel('Passenger Count')	2	1
TRAIN_DATA.head()	2	1
some_df.Fare.values.reshape(some_df.shape[0],1)	2	1
np.size(df[df['Age'] < limit_1]['Age'].unique())	2	2
train_df['Survived'],	2	2
le.transform(data[feature])	2	2
submission.Ticket_numerical_temp.isnull().sum()	2	1
ax[0].set_xlim(-50, 300)	2	1
"testing[""Age""].fillna(testing.groupby(""Title"")[""Age""].transform(""median""), inplace=True)"	2	2
full['Group_num'] = pd.Series(scaler.fit_transform(full.Group_num.reshape(-1,1)).reshape(-1), index=full.index)	2	2
test_data.Fare.fillna(fare_mean)	2	2
df_study_rf.loc[ind, 'params']	2	1
ann_model.add(Dense(units = 20, kernel_initializer='uniform',activation='relu'))	2	1
"submission.to_csv(""titanic.csv"", index = False)"	2	2
row['Age'] <= 1:	2	1
test['Ticket_Lett'] = test['Ticket'].apply(lambda x: str(x)[0])	2	2
train_data.drop(columns='Name')	2	2
titanic['Sex'] == 'female'	2	2
axs[1].set_ylabel('Feature importance (# times used to split)')	2	2
ftrain.drop(['Survived'], axis=1)	2	2
data1.set_value(index, 'Random_Predict', 0)	2	2
data_for_analysis.iloc[:,1:].values	2	2
df.Title.replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	2	2
train_df.loc[(train_df['Fare'] > 7.91) & (train_df['Fare'] <= 14.454), 'Fare'] = 1	2	2
X.isnull().sum().sort_values(ascending = False)	2	2
result['Cabin'].dropna()	2	2
train_df.calculated_fare.mean()	2	2
sml.feature.drop(['Name'])	2	2
train_data[['Embarked', 'Survived']].groupby('Embarked').mean().Survived.plot('bar')	2	2
data.Embarked.fillna('S', inplace=True)	2	2
test['Age']=ohe(sparse=False).fit_transform(z1.reshape(len(z1),1))	2	2
"train[""Sex""]"	2	2
self.x.append(self.i)	2	2
processed_data['title'] = raw_data['Name'].apply(get_title)	2	2
titanic_train_df.corr()['Survived']	2	1
train_df.isnull().sum().to_frame('Missing values').transpose()	2	1
submission_test.isnull().sum()	2	1
input['Age'] = input.Age.fillna(-0.5)	2	2
"titanic_train[""Age""].std()"	2	2
test.drop(drop_columns, axis=1)	2	2
test['Parch'].fillna(-1, inplace=True)	2	2
np.append(trainfeatures.toarray(), feature1, 1)	2	1
"test[""Title""].head()"	2	2
"df_test_tmp[""Embarked""].fillna(df_test_tmp[""Embarked""].median(), inplace=True)"	2	2
all_data.drop(['Fare', 'Age'], axis=1)	2	2
df.groupby(['Title'])['PassengerId'].count()	2	2
combined.iloc[891:,:].drop('Survived',axis=1)	2	1
data['Fare'].fillna(np.mean(data['Fare']), inplace=True)	2	2
df['Title'] = df.Title.map(Title_Dictionary)	2	2
test_df['PchM1'] =     test_df[['ParchBinary','Male','Pclass']].apply( get_malepm, axis=1 )	2	2
df_data['Ti_Age'] = df_data['Age']	2	2
train[['AgeGroup', 'Survived']].groupby(['AgeGroup'], as_index=False).mean().sort_values(by='AgeGroup', ascending=True)	2	2
row['Fare'] >= 300:	2	1
"df_train.hist(""Fare"", by=[""Embarked"", ""Pclass""],layout=[4,3], figsize = [15,15], bins=10)"	2	1
train_x.head(3)	2	2
df['Pclass1'] = np.where(df['Pclass']==1, 1, 0)	2	2
preds.append(0)	2	2
complete_age['Survived']	2	1
X['Cabin'].str.contains('A')*1	2	2
df['Age'].fillna(1000, inplace=True)	2	2
test.Age.fillna(test.Age.mean(),inplace=True)	2	2
testing.isnull().sum()	2	2
df_full.loc[df_full['Age'] >= 55, 'Categ_Age'] = 6	2	2
"combined.loc[pid,""Age_cat""] != ""NA"":        continue"	2	1
np.size(df[df['Age'] < limit_2]['Age'].unique())	2	2
train.loc[:, train.columns != 'Survived']	2	2
X_train.as_matrix(), y_train.as_matrix(), epochs=epochs, batch_size=32,	2	2
title.append('aris')	2	1
"new_data[""Name""] = new_data[""Name""].str.replace(""Jonkheer"",""Mr"")"	2	1
dfTrain[['Pclass','Sex','ParchCat','Embarked','Fare','TitleCat','Age','TicketCat','NameLen']]	2	2
"test_df[""Age""].dropna().median()"	2	2
merged.Family_size.replace(to_replace = [1], value = 'single', inplace = True)	2	2
classifiers.items():	2	2
full.loc[full['PassengerId'] == passID, 'Family_Survival'] = 1	2	1
copy_df.drop('Store 1')	2	2
train.loc[train['Sex'] == sex[i], 'Sex'] = i	2	1
combined_train_test['Name_Length_Category'],	2	2
test['Female_Friends_Survived'] = 0	2	2
train['Fare_average']=0	2	2
item['FamilySize']=item['Parch']+item['SibSp']	2	1
df.set_index(['PassengerId','Survived'], inplace=True)	2	2
fi.sort_values('importance',ascending=False).plot.bar(figsize=(11,7))	2	2
test_data.drop('PassengerId', axis=1).copy() # data to predict	2	1
scaler.transform(X_submit)	2	1
merged.groupby(['Title', 'Pclass'])['Age'].transform(lambda x: x.fillna(x.median()))	2	2
X.drop('Survived', axis=1)	2	2
testset1.loc[testset1['Embarked']=='S','Embarked'] = 0	2	2
train['SibSp'].fillna(-1, inplace=True)	2	2
df_train['Embarked'],	2	1
classifiers.append(AdaBoostClassifier(DecisionTreeClassifier(random_state=random_state),random_state=random_state))	2	2
train_df[['Name', 'Sex']]	2	1
train.drop('Name', axis=1)	2	2
full.loc[(full.Fare>10.5)&(full.Fare<=21.558),'FareCut']=3	2	2
train['Greeting'] = train.groupby('Greeting')['Greeting'].transform(lambda x: 'Rare' if x.count() < 9 else x)	2	2
age_slice.astype(int).hist(bins=70, ax=axis2)	2	1
sib.corr()	2	1
pp.hist(died_sibsp, bins, normed=1, facecolor='red', alpha=0.5)	2	1
tf.add(tf.matmul(W2, A1), b2)  # Z2 = np.dot(W2, a1) + b2	2	1
df.loc[df['Sex'] == 'female','Sex'] = 0	2	2
passengers['age_bins'] = pd.cut(passengers['Age'],bins=bins,labels=bins[:-1]+1.5)	2	1
data['Family_Size'] = 0	2	2
dataset['Fare'],	2	1
withPeer['peer'] = withPeer['PassengerId'] > 1	2	1
big_X['Fare'] = big_X['Fare'].fillna(big_X['Fare'].median())	2	2
df_train.drop('Embarked', axis=1, inplace=True)	2	2
df_train['Embarked'].fillna('S',inplace=True)	2	2
df['Pclass2'] = np.where(df['Pclass']==2, 1, 0)	2	2
df_test.head(4)	2	2
train['MotherSurvived'] = 0	2	2
np.round(mlp.predict(x_test_data).reshape(-1))	2	1
test.drop('PassengerId', axis=1).values	2	1
test_df['Age'].loc[test_df['Age'].isnull()] = rand_test	2	2
"train_df[[""AgeBand"",""Survived""]].groupby([""AgeBand""],as_index = False).mean().sort_values(by=""AgeBand"",ascending=True)"	2	2
model.add(Dropout(.40))	2	2
correlation.agg(LabelEncoder().fit_transform)	2	2
X_test.head(3)	2	2
"train.pivot_table(index=""Pclass"", values=""Survived"")"	2	2
data1.loc[(data1['Survived'] == data1['Random_Predict']), 'Random_Score'] = 1	2	2
train_df.set_index('PassengerId',inplace=True)	2	2
df.drop('Name',axis=1)	2	2
"train[[""Parch"", ""Survived""]].groupby(['Parch']).mean().sort_values(by='Survived', ascending=False)"	2	2
train_df['Title']=data_df['Title'][:891]	2	2
in ['Mr','Don', 'Major', 'Capt', 'Jonkheer', 'Rev', 'Col']:	2	2
full['_CabinType2'] = pd.Categorical(full.CabinType2).codes	2	1
train_original.sample(10)	2	2
dataset.loc[dataset['FamilySize'] ==1, 'IsAlone'] = 1	2	2
"test.groupby([""Sex"", ""Name""]).size().unstack(fill_value=0)"	2	1
df_train.drop('Survived', axis=1) #drop target variable from training dataset	2	2
genderData.head()	2	1
data.fillna(value)	2	1
matplotlib.style.use('fivethirtyeight')	2	2
data.dropna() #error withou drop NA	2	1
"train[[""Age"", ""Survived""]].groupby(['Age'],as_index=False).mean()"	2	2
train_ch.corr()['Survived'].sort_values()	2	2
score.append(scores.mean())	2	2
train.drop(['Embarked'], axis=1, inplace=True)	2	2
df['Title'] = df['Name'].str.split(',').str[1].str.split().str[0]	2	2
"train_data['Age'][((train_data.SibSp == test_data.iloc[i][""SibSp""]) & (train_data.Parch == test_data.iloc[i][""Parch""]) & (test_data.Pclass == train_data.iloc[i][""Pclass""]))].median()"	2	2
"train.set_index(""PassengerId"", inplace=True)"	2	2
train_heatmap.astype(float).corr(),linewidths=0.1,vmax=1.0,	2	2
row['Age'] <= 40 and row['Age'] >= 30:	2	1
"dfFamilytest[""FamilyName""]"	2	1
combine['Title'] = combine['Title'].replace('Mme', 'Mrs')	2	2
df.sample(frac=1.0)	2	1
test.drop(labels=['Age'], axis=1,inplace = True)	2	2
dfTrain[['Pclass','Sex','ParchCat','SibSpCat']]	2	2
dfFull.loc[1:891,:].groupby(['Sex','ageBins']).Name.count()	2	2
test.head(20)	2	2
X['Cabin'].str.contains('C')*1	2	2
list_new.append(survived)	2	1
test.loc[v[i], 'FatherSurvived'] = temp[(temp.SexInt==1)&(temp.Age>18)].Survived.sum()	2	2
titanic.drop(['PassengerId'],1,inplace=True)	2	2
dfTicket.head()	2	2
test_df['Bc'] =     test_df[['Child','BigFamily']].apply( get_Bc, axis=1 )	2	2
merged['Title'] = merged.Name.str.extract('([A-Za-z]+)\.')	2	2
test.loc[test['Family'] > 4, 'FamilyType'] = 'large'	2	2
y.rolling(window=30).mean().plot()	2	1
res_cv.mean()	2	1
"test_set[""Age""] = test_set[""Age""].fillna(test_set[""Age""].median())"	2	2
mean.append(cv_result.mean())	2	2
data_all['Male'] = (data_all['Sex']==2)+0	2	2
full[['FareCut','Survived']].groupby(['FareCut']).mean().plot.bar(figsize=(8,5))	2	2
titanic_test_data.describe()	2	1
train_accuracy.sort_values(by = 'Train_accuracy(%)', ascending = False)	2	2
one_hot_encoded_test_data.describe()	2	2
combine_df['HasCabin'] = combine_df['CabinString'].apply(lambda x: 0 if pd.isnull(x) else 1)	2	2
side_histogram.hist(Y, bins=100, orientation='horizontal', normed=True)	2	2
"train[""Cabin""].notnull().astype('int')"	2	2
result['Survived'] = p	2	1
"gs_raw.describe(include=""all"")"	2	2
np.where(rounded_preds==Y_valid)[0]	2	1
df.loc[ (df.Fare.isnull())&(df.Pclass==2),'Fare'] =np.median( df[df['Pclass'] == 2]['Fare'].dropna())	2	2
train4.drop('PassengerId', axis=1, inplace=True)	2	2
train_data.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)	2	2
"test_data[""Embarked""].fillna(""S"", inplace=True)"	2	2
df_train.drop(['Name'], axis = 1)	2	2
data_all['Cabin_E'] = (data_all['Cabin']=='E')+0	2	2
train['Pclass'].sort_values().unique()	2	1
data['Sex'] = LabelEncoder().fit_transform(data['Sex'])	2	2
train['EmbarkedInt'] = train['EmbarkedInt'].fillna(0)	2	2
train['TitleInt'] = train['Title'].map(title_to_int)	2	2
pd.isna(input_test_data.loc[input_test_data['PassengerId']==row['PassengerId'], 'Survived']).bool():	2	1
test[['Female','Children','Parch','SibSp','Class1_Premium','Class1','Class2']]	2	1
count[1]	2	1
"df_train_tmp[""Fare""].fillna(df_train_tmp[""Fare""].median(), inplace=True)"	2	2
data['AgeBin'] = pd.qcut(data['Age'], 4)	2	2
data['Embarked'].replace(['S', 'C', 'Q'], [0, 1, 2], inplace=True)	2	2
train['Deck'] = train['Deck'].fillna('Z')	2	2
temp_data.append((threshold, count_tp, count_fp))	2	1
train_df.drop(['Ticket','Cabin'], axis=1)	2	2
tr2.apply(lambda r:getPName(r['Name']), axis=1).unique()	2	2
df['Fare'] / (df['Family_Size'] + 1)	2	2
imputer_train.info()	2	1
data['FareBand'] = 0	2	2
"train_set[""Embarked""] = train_set[""Embarked""].fillna(train_set[""Embarked""].median())"	2	2
"submission.to_csv(""submission_file.csv"", sep=',', encoding='utf-8', index=False)"	2	2
train['Name'].apply(get_title)	2	2
dataset['IsAlone']=0	2	2
"dataset[""Embarked""] = dataset[""Embarked""].map({""S"":0,""C"":1,""Q"":2}).astype(int)"	2	2
"testdata[""PassengerId""],"	2	2
train_df_female_sex.groupby(age_groups_female)['Survived'].count()*3	2	2
new_data_test['Fare'].fillna(new_data_test['Fare'].mean(), inplace=True)	2	2
data.iloc[idx].Pclass	2	1
df.Title.replace('Mme', 'Mrs')	2	2
combined_train_test['Fare_Category'] = combined_train_test['Fare'].map(fare_category)	2	2
train_df.groupby(fare_groups)['Survived'].count()*3	2	2
df['CorrectGuess'] = df.Guess == df.Survived	2	1
dataset.Age.hist()	2	2
results['f1'].append(f1)	2	1
sml.train[['Age', 'Age_density']].head()	2	2
data.fillna(data.mean())	2	2
test_data['Sex'] = test_data['Sex'].apply(lambda x: int(x == 'male'))	2	2
dfsubmit.to_csv('TestPredictADABOOST.csv')	2	2
test['Cabin'].fillna(test.groupby('Pclass')['Cabin'].transform('median'), inplace=True)	2	2
"df[""Embarked""][df[""Embarked""] == ""Q""] = 2"	2	2
"data[""family_type""]= [""alone"" if x==0 else ""small_family"" if x<5 else ""big_family"" for x in data.family_or_alone ]"	2	2
titanic_df.drop('Survived', axis=1, inplace=True)	2	2
df_interesting['Person_Class'] = encoder.fit_transform(df_interesting['Person_Class'])	2	1
"dataset[""FamSurv""] = 0"	2	1
df_full['Categ_Age'] = 0	2	2
test['Embarked_cat']=test['Embarked'].cat.codes	2	2
train_df.groupby('Parch',as_index=False)['Parch','Survived'].mean()	2	2
df.loc[ (df.AgeFill>30) & (df.AgeFill <=60) ,'AgeCat'] = 'senior'	2	2
train_n.head()	2	2
np.where(test_data.Embarked != test_data.Embarked, pd.value_counts(test_data.Embarked, sort=True, ascending=False).index[0], test_data.Embarked)	2	2
train_df['SibSp'].value_counts()	2	2
combine_df['Survived'] = combine_df['Survived'].fillna(0).astype('int')	2	2
X['SibSp'] - 3	2	2
np.shape(X_NumPy_Mat_NM)	2	1
combine.copy()	2	1
unique_tickets[0]	2	1
"df[""Title""] = TitleAttributeAdder().transform(df)[""Title""]"	2	1
train['Deck'] = train['Cabin'].apply(lambda x: str(x)[0])	2	2
"df_train[""HadCabin""] = df_data[""HadCabin""][:891]"	2	2
"submission[""Survived""] = test_predictions"	2	2
"train['FamilySize'].loc[train['Family'] == 1] = ""Small"""	2	2
data_copy.loc[data_copy['Embarked']=='Q','Embarked']=2	2	2
Pclass1[['Embarked', 'Fare']].groupby(['Embarked'], as_index=False).describe()	2	2
df.drop('Store 1')	2	2
dataset.loc[ (dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age' ] = 2	2	2
"test.loc[test[""Title""] == ""Dona"", ""Title""] = 'Rare Title'"	2	2
ftest['CategoricalAge'] = ftest['CategoricalAge'].map( {'VY': 0, 'Y': 1, 'M': 2, 'O': 3, 'VO': 4} ).astype(int)	2	2
fi.sort_values('importance',ascending=False)	2	2
difference['Difference']= errorplot.iloc[:,1]- errorplot.loc[:,'Test Score']	2	1
data['FareBin'] = pd.qcut(data['Fare'], 5)	2	2
train_x['Title'] = train_x['Title'].replace('Mme', 'Mrs')	2	2
sub_svc['PassengerId'] = df_test['PassengerId']	2	2
"new_data[""Mr""] = new_data[""Name""].str.contains(""Mr"").astype(int)"	2	1
"result_test8[""Survived""] = y_pred_voting.astype(int)"	2	2
titanic_test['Age'] = titanic_test[['Age','Pclass']].apply(impute_age,axis=1)	2	2
df['Pclass']	2	1
X['titles'] = X.Name.apply(get_title)	2	1
axes[0].set_xticklabels(labels = sorted_labes,rotation=20)	2	1
df_comb.head()	2	1
train['Parch'].fillna(-1, inplace=True)	2	2
train.drop('Embarked', axis=1)	2	2
Testdata['Embarked'] = number.fit_transform(Testdata['Embarked'].astype('str'))	2	2
result.head(10)	2	2
dataset.loc[dataset['Survived'] == -777, 'Age':'AgeState_Child']	2	2
"df_train_tmp.replace(""male"", 0).replace(""female"", 1)"	2	2
data.loc[pd.isna(data[self.to_predict_col[0]]), self.to_predict_col] = self.model.predict(predict_data)	2	2
"ax[2].set_title(""Fares in Pclass 3"")"	2	2
train_df['Family'].loc[train_df['Family'] == 0] = 'Alone'	2	2
dataset['Deck'] = dataset['Cabin'].map(lambda x : get_deck(x))	2	2
train['Family_Size'] = data['Family_Size'][:len(train)]	2	2
"sns.boxplot(x=""Pclass"", y=""Fare"", hue=""Survived"", data=train_data);"	2	2
c_r.append(np.sum(np.abs(a_r-y))/y.shape[0])	2	1
train['Age'].iloc[i] = age_med	2	2
ds['IsAlone'] = 0	2	1
test.Age.describe()	2	2
data_copy.loc[data_copy['Embarked']=='C','Embarked']=1	2	2
"new_data_test[""Fare""].fillna(new_data_test[""Fare""].mean(), inplace=True)"	2	2
tumveri['Age'].dropna().median()	2	1
"test_data[""Age""].fillna(28, inplace=True)"	2	2
titanic_train['Fare'] = titanic_train['Fare'].fillna(titanic_train['Fare'].median())	2	2
"data[""PassengerId""],"	2	2
ax.artists[0]	2	2
MLA_compare.loc[row_index, 'MLA Test Accuracy'] = round(alg.score(x_test, y_test), 4)	2	2
DataFile.describe()	2	2
to_test['Title'] = to_test.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
"dataset.loc[dataset[""Age""] <= 12,""IsChildren""] = 1"	2	2
df['Embarked'].value_counts()	2	2
train['Child'][train['Age'] >= 18] = 0	2	2
all_countries.loc['Cricket']	2	2
trainSTD2['Pclass1'] = trainSTD[:,9]	2	1
data_train.columns.values,	2	1
df['Survived'] = df['Survived'].astype('category')	2	2
data_all['Cabin_G'] = (data_all['Cabin']=='G')+0	2	2
df['Embarked'].value_counts().idxmax()	2	2
r.copy()	2	2
test.apply(lambda f:f.fillna(f.mode()[0]))	2	2
df.loc[ (df['Fare'] > 21.7) & (df['Fare'] <= 39), 'fare_cat'] = 3	2	2
test['Salutation'] = test['Salutation'].replace('Mlle', 'Miss')	2	2
predictedOutput.to_csv('gender_submission.csv', sep=',', index=False)	2	1
"new_data[""Name""] = new_data[""Name""].str.replace(""Ms"",""Mrs"")"	2	1
train_df.drop('Family', axis=1, inplace=True)	2	2
"my_solution.to_csv(""my_test_Y.csv"", index_label = [""PassengerId""])"	2	1
intcols.apply(le.fit_transform)	2	1
train['Sex'][(train['Sex']=='female')&(train['Survived']==1)].count()	2	2
TestFile.copy()	2	2
df_train.groupby(['Survived','Sex'])['Survived'].count()	2	2
train_df.drop('PassengerId', axis=1, inplace=True)	2	2
dfTrain.groupby('Embarked').Survived.mean().plot(kind='bar')	2	2
test_df.drop('Family', axis=1, inplace=True)	2	2
model.add(Dense(1, kernel_initializer='normal'))	2	2
"df[""Survived""].shape[0]"	2	1
train['Embarked_Q'] = 0	2	2
X_train_analysis['Embarked'] = X_train_analysis['Embarked'].map({'C': 0, 'Q': 1, 'S': 2}).astype(int)	2	2
df_train.select_dtypes(include=[np.number])	2	1
train_df['Alone'] = 0	2	2
df.groupby('Ticket'):	2	2
"output.to_csv(""output.csv"",index=False)"	2	2
train_data['Age'] = train_data['Age'].fillna(train_data['Age'].mean())	2	1
combined_train_test['Age'] = combined_train_test[['Age']].fillna(combined_train_test.groupby('Title').transform('mean'))	2	2
train_df['Embarked'].value_counts().idxmax()	2	2
df.T.loc['Cost']	2	2
"train[""AgeCategory""].loc[train[""Age""].isnull()] = ""MissingData"""	2	2
full_set.corr()['Survived'].abs().sort_values(ascending = False)	2	1
train.groupby(['fare_bin']).size().values	2	2
svc_test_scores.append(svc.score(adj_test_df,y_test))	2	1
null_rows.any() == True:	2	2
df.to_csv('result.csv')	2	1
combdata['MedF'] = combdata['Fsize'].map(lambda s: 1 if 3 <= s <= 4 else 0)	2	2
list_nan[0]:	2	1
test_df['age_group'] = test_df['Age'].map(age_group_fun)	2	2
data['Title']=data['Title'].map(title_mapping)	2	2
confusion[1][1]; TN = confusion[0][0]; FP = confusion[0][1]; FN = confusion[1][0];	2	1
df.loc[ (df['fare_pp'] > 11.73) & (df['fare_pp'] <= 26.55), 'fare_pp_cat'] = 3	2	2
titanic.shape[0]	2	2
classifier_update['Score']	2	2
data['CatFare'] = pd.qcut(data.Fare, q=4, labels=False)	2	2
"dev_instance[""Survived""]"	2	1
tmodel.add(Dropout(.25))	2	2
Y_train.shape[0]                            # n_y : output size	2	2
dfcopy.Age.fillna(median_age, inplace=True)	2	1
"Pclass_dummies.drop([""Pclass3""], axis=1)"	2	1
"df['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	2	2
y_test.copy()	2	2
df_test.dtypes	2	2
titanic_test_data_X.info()	2	2
row['Fare'] <= 30.0 :	2	2
cluster_map_test['cluster'] = km_test.labels_	2	1
"submission.to_csv(""titanic.csv"",index=False)"	2	2
df_train['Age'][i] = 5	2	1
train['Miss'] = 0	2	2
all_data.drop('CabinType3', axis=1)	2	2
test_dataframe['PassengerId'].values	2	1
dataset.loc[(dataset['Sex']==1) & (dataset['Embarked']==0), 'Gender_Embarked'] = 4	2	2
"train_dataset['Has_Cabin'] = train_dataset[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	2	2
data['TicketHead'] = data['TicketHead'].replace(['FC', 'WEP', 'SOC'], '2')	2	2
combined['Title'].unique()	2	1
mod_data.info()	2	1
passengers['Age'].isna()	2	1
train['Age'].fillna(train.groupby('Title')['Age'].transform('median'), inplace=True)	2	2
test['Salutation'] = test.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
train['Sex_cat']=train['Sex'].cat.codes	2	2
"validation_targets[""Survived""],"	2	1
train_label.corr()	2	1
"train[[""Name_length"", ""Survived""]].groupby(['Name_length'],as_index=False).sum()"	2	2
test['FamilySize'] = test['Parch'] + test['SibSp'] + 1	2	2
train['Sex'].value_counts().plot.pie(autopct='%1.f%%', shadow=True, explode=(.1,0), startangle=90, ax=ax[0]).axis('equal')	2	2
data['Sex'].replace(['male', 'female'], [0, 1], inplace=True)	2	2
"test.Cabin.fillna(""N"", inplace=True)"	2	2
df['Fare'] = df.Fare.fillna(df.Fare.median())	2	2
np.std(distribution)	2	2
"gs.best_params_[""min_samples_split""],min_samples_leaf=gs.best_params_[""min_samples_leaf""],"	2	1
dataset.loc[dataset['Embarked']=='Q','Survived'].value_counts()	2	2
x_test['Age'].isnull().sum()	2	1
train.join(embark_dummies_train)	2	2
np.mean(scores) > highest_score:	2	2
X.isnull().values.any()	2	1
dataset['CategoricalAge'] = dataset['CategoricalAge'].astype(int)	2	2
dataset_test.info()	2	2
test_df.drop('SibSp', axis=1, inplace=True)	2	2
"train_data[""Embarked""].value_counts()"	2	2
data['Title'].replace(['Mlle','Ms','Mme'],['Miss','Miss','Mrs'], inplace=True)	2	2
dftest.ix[[152]]	2	1
tempDF.groupby(column,as_index=False).mean().sort_values(by='Survived',ascending=False)	2	1
trainSTD2['Parch'] = trainSTD[:,2]	2	1
titanic['FamilySize']=titanic['Parch']+titanic['SibSp']+1	2	2
train_df.loc[[0, 2]]	2	1
train_data.describe().transpose()	2	2
submission['PassengerId']=TestId	2	1
test.loc[test['Embarked']=='Q','Embarked']=2	2	2
test.drop(dropping,axis=1)	2	2
processed_data['parch'] = pd.Series(raw_data['Parch'], dtype=np.float64)	2	2
combine_df.head()	2	1
train_df.drop(['Age'], axis=1)	2	2
data_combined['Cabin'].fillna('N',inplace=True)	2	1
test['Age'][np.isnan(test['Age'])] = rand_age	2	2
"test_raw.describe(include=""all"")"	2	2
test_df.drop(['Fare'], 1, inplace=True)	2	2
in ['Pclass','Age','Fare']:	2	1
"train[""Age""]=train[""Age""].fillna(train[""Age""].median())"	2	1
positions.append(0.2 + offset)	2	2
"df[""Embarked""].fillna(""S"",inplace=True)"	2	2
results_df.head()	2	2
tf.add(tf.matmul(W1, X), b1)  # Z1 = np.dot(W1, X) + b1	2	1
row['Fare'] == -1:	2	2
"holdout[""Name""].str.extract(' ([A-Za-z]+)\.',expand=False)"	2	2
test_df.drop(['Title_Rev','age_group_old','age_group_teenager','age_group_senior_citizen','Embarked_Q'],axis=1,inplace=True)	2	2
"dataset[""Title""] = dataset[""Title""].map(title_map)"	2	2
train['Age'].dropna().hist(bins=8, color='m',alpha=0.5,label='Onboard') # All passengers onboard	2	2
"test[""Fare""].fillna(train.groupby(""Pclass"")[""Fare""].transform(""median""), inplace=True)"	2	2
"dataset.loc[(dataset[""Fare""] > 9.841) & (dataset[""Fare""] <= 14.454), ""Fare""] = 3"	2	2
data_all[0:891].T	2	2
train_raw.describe()	2	2
guess_df.mode()[0]	2	1
dfFull.TitleCat.replace('Mr',1,inplace=True)	2	2
train_df.drop(['SibSp','Parch'], axis=1, inplace=True)	2	2
submission.to_csv('submission_rf.csv', index = False)	2	2
sns.plt.axes()	2	1
train.astype('str')	2	2
"test[""AgeCategory""].loc[train[""Age""] < 18 ] = ""Child"""	2	2
data['Fare'].fillna(data['Fare'].mode()[0],inplace=True)	2	2
full.loc[:891],	2	1
train_df['Embarked'] = train_df['Embarked'].fillna(freq_port)	2	2
trainTitanic.head()	2	1
df_modelo.head()	2	1
"test.loc[test[""Title""] == ""Col"", ""Title""] = 'Rare Title'"	2	2
df.Embarked.fillna(df.Embarked.value_counts().idxmax(), inplace=True)	2	2
df_train.groupby(['Pclass', 'Family'])['Survived'].mean()	2	2
plt.rcParams['figure.figsize']=(15,7)	2	2
s.iloc[3]	2	2
np.mean(accuracies)	2	1
data.loc[data.Fare.isnull(), 'Fare'] = data['Fare'].mean()	2	2
df.loc[pd.isnull(df['title']), 'title'] = 'none'	2	2
titanic_df.join(boy_dummies_titanic)	2	2
test.loc[(test['Age'] > 13), 'age_cat'] = 'adult'	2	2
X.isna().any()	2	2
"test.loc[test[""Title""] == ""Countess"", ""Title""] = 'Rare Title'"	2	2
combined.loc[ combined['Age'] <= 16, 'Age'] = 0	2	2
df_real_test.to_excel(writer,'Sheet1')	2	1
sibsp_data['survived_n']+	2	1
train_df.groupby(fare_groups)['Survived'].mean()	2	2
cabin_code[0]	2	2
train['ChildOnBoard'] = 0	2	2
data['Embarked'].isnull().sum()	2	2
data.Survived.values	2	2
test_data.drop(['Ticket', 'Cabin'], axis=1)	2	2
train_data.as_matrix()	2	2
prediction.to_csv('predict.csv',index = False)	2	2
"test['FamilySize'].loc[test['Family'] > 1] = ""Medium"""	2	2
history.history['val_binary_accuracy']	2	2
data.isnull()	2	2
df['Embarked'].fillna('UNK', inplace=True)	2	1
train['Embarked']=train['Embarked'].astype('category')	2	2
"df.loc[df[""Embarked""] == ""S""]"	2	2
cabin.rename(index={0:'no cabin',1:'cabin'},columns={0.0:'Dead',1.0:'Survived'},inplace=True)	2	2
test_df['fare_group'] = test_df['calculated_fare'].map(fare_group)	2	2
merged.Family_size.replace(to_replace = [2,3], value = 'small', inplace = True)	2	2
test_y.head()	2	2
dataset['Cabin_null'] =data_raw['Cabin'].isnull()*1	2	2
df['isAlone']=0	2	2
"test_data[""Age""].mean()"	2	2
df_test['Survived'] = 0	2	2
nullData.drop('Age',1)	2	1
frequency_title.update({i :(title_list.count(i))})	2	1
mpl.rcParams['figure.figsize'] = (8, 6)	2	2
train_data['Age'].fillna(train_data['Age'].mean(), inplace=True)	2	2
dataset['Fare'].fillna(dataset['Fare'].median(),inplace=True)	2	2
le.transform(train_df[feature])	2	2
df1['Parch'] = df1['Parch'].apply(lambda x: 'no' if x == 0 else 'less' if x <= 3 else 'many')	2	2
data['SibSp'].unique()	2	2
X['Title'] = X['Title'].replace(['Lady', 'Countess', 'Don', 'Sir', 'Jonkheer', 'Dona'], 'Noble')	2	2
"train[""Cabin""].isnull().sum()"	2	1
dataset['Title'] = dataset['Title'].replace(['Capt', 'Col', 'Sir', 'Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Rev', 'Countess', 'Lady', 'Dona'], 'Rare')	2	2
train_x['Title'].value_counts()	2	2
train.drop('PassengerId', axis = 1, inplace = True)	2	2
dataset['Age'][np.isnan(dataset['Age'])]=age_null_random_list	2	2
np.mean(friends_survive_list)	2	1
df.loc[(df['Age']>16)&(df['Age']<=32),'Age_band']=1	2	2
test_df['IsHusband'].loc[ test_df['SibSp'] == 0 ] = 0	2	2
dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0}).astype(int)	2	2
"sns.boxplot(x=var, y=""Fare"", data=data)"	2	1
temp_df.loc[temp_df['Cabin'].notnull(), :]	2	1
train['Fare'] = train['Fare'].fillna(train['Fare'].mean())	2	2
train['Embarked'][train['Embarked'] == 'Q'] = 2	2	2
train_df.drop('Survived', axis=1, inplace=True)	2	2
model.add(Dense(14, activation='relu'))	2	1
"Ticket.append(""U"")"	2	2
X_train_norm.apply(lambda x: (x - np.mean(x)) / (np.max(x) - np.min(x)))	2	2
"train_df[""Survived""].value_counts()"	2	2
titles.append('miss')	2	1
"combine_df['Age']= combine_df[""Age""].fillna(combine_df.groupby(by = combine_df['titlename'])['Age'].transform('mean'))"	2	2
df_test.drop(features_remove, axis=1)	2	2
train['Embarked_cat']=train['Embarked'].cat.codes	2	2
"train_df.drop([""Ticket"",""Cabin""],axis=1)"	2	2
X_data['Survived']	2	2
"train_df[""Cabin""].isna().sum() / len(train_df[""Cabin""])"	2	2
processed_data['age'] = pd.Series(raw_data['Age'])	2	2
train['Embarked_unknown'] = 0	2	2
sub_df.to_csv('submission.csv', index=False)	2	2
score_knn_list.append(score_knn.mean())	2	2
row['Pclass'] <= 2:	2	1
data_train['Name']:	2	1
processed_data['title'] = processed_data['title'].fillna(0)	2	2
all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:50]	2	2
sns.boxplot(x = 'Pclass', y ='FamilySize', hue = 'Survived', data = train, ax = axis3)	2	2
train_df['Name'].value_counts()	2	1
"trainingData[""Sex""].cat.categories = [0,1]"	2	2
mean_ages[0]=np.average(df[df['Title'] == 'Miss']['Age'].dropna())	2	2
titanic.loc[titanic['Embarked'] == 'S', 'Embarked'] = 0	2	2
df['Sex_bool']=df.Sex.map(context1)	2	2
dfFull.groupby(['Embarked','Pclass']).Name.count()	2	2
df_all['Age']=df_all['Age'].fillna(age_med)	2	2
whole.set_value(idx, 'Age', np.random.randint(30,45,1)[0])	2	1
train.dropna(subset=['Embarked'])	2	2
one_hot_encoded_dataset1[['Age', 'Fare']] = MinMaxScaler().fit_transform(dataset1[['Age', 'Fare']])	2	2
dataset.drop(['Survived'],axis=1)	2	2
all_data.drop('FamilyNum', axis=1)	2	2
data_train.loc[(data_train['Pclass']==3) & (data_train['Sex']=='male'),'Survived'].value_counts().plot(kind='bar',ax=ax4,label='male upper class',color='lightblue')	2	1
temp['Fare'].plot(kind='bar', title='Ticket Head:Mean Fare')	2	2
x_train['CabinNUll'] = (x_train['Cabin'] == -999)	2	2
"frame[[""Pclass"", ""Survived""]]"	2	1
sns.boxplot(x='CabinCode',y='Fare',data=data)	2	2
merged.Embarked.fillna(value = 'S', inplace = True)	2	2
trainSTD2['Pclass3'] = trainSTD[:,11]	2	1
"X_train.drop(""Cabin"", axis = 1)"	2	2
means.head()	2	2
DataFile.replace({'Title': mapping}, inplace=True)	2	2
test_df.head(20)	2	2
train_df.drop('Cabin', axis=1).dropna()	2	1
"train.fillna({""Embarked"":""S""})"	2	2
vec.transform(arr2)	2	2
MLA_compare.loc[row_index, 'MLA Precission'] = precision_score(y_test, predicted)	2	2
prediction.head()	2	2
submission.to_csv('submission_gbc.csv', index = False)	2	2
train_df['Person'] = train_df[['Age','Sex']].apply(passengers, axis=1)	2	2
train['Title'] == 'Mrs'	2	2
side_histogram.hist(Y, bins=100, orientation='horizontal')	2	2
X_train_transformed['Fare'] = boxcox(X_train_transformed['Fare'] + 1)[0]	2	2
merged.Family_size.replace(to_replace = [4,5], value = 'medium', inplace = True)	2	2
"df.drop(labels=[""Sex"", ""Embarked"", 'Pclass'], axis=1, inplace=True)"	2	2
combine_df['CabinString'] = combine_df['Cabin'].str.extract(r'([A-Za-z]+)', expand=False)	2	2
training.head(6)	2	2
X_test.drop(['HasCabin','Embarked'], axis=1)	2	2
train_set.drop(['Survived','PassengerId','Name','Age','Fare','Ticket','Cabin','SibSp','Parch','Title','FamilySize'], axis=1)	2	2
m.add(Dropout(dropout))	2	1
"test[""AgeIsNaN""] = test[""Age""].isna()"	2	2
"new_data_train[""Age""].fillna(new_data_train[""Age""].mean(), inplace=True)"	2	2
full_data['Title'] = full_data['Title'].fillna(0)	2	2
traind.describe()	2	1
"submission.to_csv(""Submission.csv"", index=False)"	2	2
combine[0].shape,combine[1].shape	2	2
data.loc[data[self.to_predict_col[0]].notna(), np.append(self.train_cols, self.to_predict_col)]	2	2
data.drop(['Name', 'Age', 'Ticket', 'Fare', 'Cabin', 'Fare_Range', 'PassengerId'], axis=1, inplace=True)	2	2
values.astype('float32')	2	1
submission.to_csv('submission_RF.csv', index=False)	2	2
test_x.shape	2	2
le.transform(df['AgeCat'])	2	2
test['family_size'] = test.SibSp + test.Parch+1	2	2
test.loc[test['Family']==1,'Family']=0	2	2
full_data['Fare'] = full_data['Fare'].astype(int)	2	2
df['Title'] = df['Name'].astype(str).map(lambda x: substrings_in_string(x, title_list))	2	2
full.loc[full.Age.isnull(), 'Age'] = p1	2	1
df_result.sort_values(by=['Means'], ascending=False)	2	1
df.drop('Survived', axis = 1),	2	1
train_dataset['Port']	2	2
df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	2	2
df_train.groupby(['Cabin']).mean()	2	2
data.loc[index, 'Fare'] = medians[row['Pclass']]	2	2
"train_df['Sex'] = train_df.Sex.apply(lambda x: 0 if x == ""female"" else 1)"	2	2
"data.drop([""PassengerId"",""Ticket"",""Fare"",""Cabin""],axis=1,inplace=True)"	2	2
sc_x.transform(x_test)	2	2
le.transform(df['Embarked'])	2	2
titanic_data['Age'] = titanic_data[['Age', 'Pclass']].apply(age_approx, axis=1)	2	2
X_test_transformed['Fare'] = boxcox(X_test_transformed['Fare'] + 1)[0]	2	2
train_df.drop('Survived', 1, inplace=True)	2	2
train['Sex'] = train['Sex'].apply(lambda x: 1 if x == 'male' else 0)	2	2
output.to_csv('submission1.csv', index=False)	2	2
shape[0] /(1.0*df_train[df_train.Fare==1].shape[0]),	2	1
train['Fare_costly']=0	2	2
axes[2].set_xticklabels(labels = sorted_labes,rotation=20)	2	1
X['Cabin'].str.contains('T')*1	2	2
"train.drop(""Name"",axis=1)"	2	2
df['Age'] = df.apply(imput_age, axis=1)	2	1
data['Sex'] = number.fit_transform(data['Sex'].astype('str'))	2	2
train.loc[v[i], 'Friends'] = 1	2	2
pd.isnull(col)	2	2
deck_series.loc[i] not in self.allowed_decks:	2	1
"test_set.loc[test_set[""Embarked""] == ""C"", ""Embarked""] = 1"	2	2
"df_test[""Title""] = df_test.Name.str.extract('([A-Za-z]+)\.', expand=False)"	2	1
train_df.loc[(train_df.Age.isnull())&(train_df.Initial=='Master'),'Age']=5	2	1
df.reset_index(drop=True)	2	2
"train[""AgeCategory""].loc[train[""Age""] < 18 ] = ""Child"""	2	2
dataset['Name'].head()	2	2
test.fillna(test.mean(), inplace=True)	2	2
notNullData.drop('Name',1)	2	1
train_data.drop(['PassengerId', 'Ticket', 'Cabin', 'Name'], inplace=True, axis=1)	2	2
test_df.pop('PassengerId')	2	2
"testing[""Fare""].fillna(testing.groupby(""Pclass"")[""Fare""].transform(""median""), inplace=True)"	2	2
to_test['Title'] = to_test['Title'].replace('Ms', 'Miss')	2	2
trainSTD2['SibSp'] = trainSTD[:,1]	2	1
train.isnull()	2	2
test.drop(['PassengerId'], axis=1, inplace=True)	2	2
df.filter(regex = feature_columns)	2	2
df['Embarked'].fillna('Null', inplace=True)	2	2
df_study_lr.loc[ind, 'mean_train_score']	2	1
X_test.Fare.fillna(X_test.Fare.mean(),inplace=True)	2	2
"train.loc[(train[""Family""] > 1)  &  (train[""Family""] < 5) , ""FamilySize""] = 'small'"	2	2
all_data['Ticket_Sign2'] = all_data['Ticket'].apply(get_ticket_sign_2)	2	2
"train_df[[""IsAlone"",""Survived""]].groupby([""IsAlone""],as_index=False).mean().sort_values(by=""Survived"",ascending=False)"	2	2
dataset.loc[(dataset['Fare'] > 21.679) & (dataset['Fare'] <= 39.688), 'Fare'] = 3	2	2
traindata.head()	2	2
"df[""Deck""][df[""Deck""] == ""T""] = 8"	2	2
full.loc[full['PassengerId'] == passID, 'Family_Survival'] = 0	2	1
titanic.loc[titanic['Sex'] == 'female', 'Sex'] = 1	2	2
"new_data[""Fare""] = new_data[""Fare""].fillna(new_data[""Fare""].mean()) #some null values in test_data"	2	1
dataset['Age'].fillna(dataset['Age'].median(), inplace=True)	2	2
test_df.drop(drop_column,axis=1,inplace=True)	2	2
test['Sex'] = lbl.transform(list(test['Sex'].values))	2	2
all_data['CabinType1'] = all_data['Cabin1'].apply(get_cabin_type)	2	2
all_data['Ticket_No'] = all_data['Ticket'].apply(get_ticket_no)	2	2
validation.loc[mr_mask, 'Age'] = validation.loc[mr_mask, 'Age'].fillna(validation[validation.Title == 'Mr'].Age.mean())	2	2
X['Parch'] - 2	2	2
data['Age'].iloc[i] = age_pred	2	2
models['set3']['cat_encode'] = 'OneHot'	2	1
df.set_index(['PassengerId', 'Survived'])	2	2
test_filtered['Embarked'] = np.where(test_filtered['Embarked']=='C', 0, np.where(test_filtered['Embarked']=='Q',1,2))	2	2
test_df['Survived'] = -777	2	2
score_list.append(cross_val_score(clf, dataset1, label,cv=5).mean())	2	2
test_data.drop('Name', axis=1, inplace=True)	2	2
"data_test1[""PassengerId""],"	2	1
data['Sex'] = data['Sex'].map({'female': 1, 'male':0})	2	2
df.loc[ (df['Age'] > 42), 'age_cat'] = 4	2	2
axs[1].set_xticks(np.arange(len(importances)))	2	2
train_df['family_group'] = train_df['family_size'].map(family_group)	2	2
train.drop('Survived', axis=1).values	2	2
processed_data['title'] = processed_data['title'].map(title_mapping)	2	2
concat['FamilyID'] = concat.Surname.str.cat(concat.FamilySize.astype(str), sep='')	2	2
df['Age'].isnull().values.any()	2	2
combine_df.tail(5)	2	2
train['Embarked'].fillna('S')	2	2
X_test.shape[0]	2	2
S2.head(5)	2	1
train['Pclass'] = LabelEncoder().fit_transform(train.Pclass)	2	2
submit.head(10)	2	2
df.drop(['SibSp'], axis=1, inplace=True)	2	2
full_data.Age.std()	2	1
df['Title'] = df['Name'].str.split(',').str[1].str.split(' ').str[1]	2	2
"train_df[[""Parch"",""Survived""]].groupby([""Parch""],as_index = False).mean().sort_values(by=""Survived"",ascending=False)"	2	2
tick.apply(lambda x: str(x)[:1])	2	2
df.loc[(df.Age.isnull())&(df.Initial=='Other'),'Age']=46	2	2
combined_train_test['Name_Length'] = combined_train_test['Name'].str.len()	2	2
df_test.drop(['Cabin'], axis = 1)	2	2
df_test_features.iloc[:,9]:	2	1
dataset['Embarked']= pd.factorize(dataset['Embarked'])[0]	2	2
test['Title'] = test['Title'].map(title_mapping)	2	2
train['No_of_Passengers_on_Ticket']= train['SibSp'] + train['Parch'] + 1 #+1 for those travelling alone	2	2
features.corr()	2	2
"df[""Age""].mean()"	2	2
data_train1['Survived']	2	2
X_train_analysis.corr(),	2	2
train_df['is_alone'] = [1 if i<2 else 0 for i in train_df.family_size]	2	2
missing_age_train.drop(['Age'], axis = 1)	2	2
dataTrain[['Survived', 'Age', 'Embarked', 'Fare',  'Pclass', 'Sex', 'Family_Size', 'Title2','Ticket_info','Cabin']]	2	2
data['Alone'] = 0	2	2
dc.iloc[:891]	2	1
df['Cabin'] = df['Cabin'].map(lambda c : c[0])	2	2
le.transform(concat.FamilyID)	2	2
array_name[1]	2	2
"traindf[""Survived""],"	2	2
np.where(train_data.Embarked != train_data.Embarked, pd.value_counts(train_data.Embarked, sort=True, ascending=False).index[0], train_data.Embarked)	2	2
tunned_scores.sort_values(by = 'Tunned_accuracy(%)', ascending = False)	2	2
item['Parch']	2	1
predicted_ages['Title'] = predicted_ages.Title.apply(encodeTitle)	2	1
X['Cabin'].str.contains('G')*1	2	2
train[['SortFare', 'Survived']].groupby(['SortFare'], as_index=False).mean()	2	1
test.loc[v[i], 'ChildOnBoard'] = 1	2	2
"titanic_train[""Title""] = titles"	2	2
df1['Survived'].values.reshape(-1,1)	2	2
nullData.drop('Ticket',1)	2	1
train['normalizedFare'] = scale.fit_transform(train['Fare'].reshape(-1,1))	2	2
df_all['TicketCount'] = df_all['Ticket'].map(d_ticket_count)	2	1
df_data['Minor'] = (df_data['Age_copy'] < 14.0) & (df_data['Age_copy']>= 0)	2	2
titanic_df['Sex'] = titanic_df['Sex'].map(genders_mapping).astype(int)	2	2
train_filtered.Age.fillna(train_filtered.groupby('Pclass').Age.transform('mean'))	2	2
traindf1.isnull().sum()	2	1
titanic_df['Pclass'].value_counts()	2	2
"dataset[""Age""].fillna(dataset[""Age""].median(), inplace=True)"	2	2
"train.Cabin.fillna(""N"", inplace=True)"	2	2
test.loc[test[(test['Title']=='Mr')&(test['Age'].isnull())].index, 'Age'] = mr_age_mean	2	2
full.Age.isnull().sum()	2	1
training_df['Cabin'] = training_df['Cabin'].fillna('unknown') # Mean age of the passengers happens to be 30.	2	2
df_test.drop(['Name'], axis = 1)	2	2
dfTicket.loc[dfTicket > 1].index.tolist()	2	2
df_train.isnull().sum(), df_test.isnull().sum()	2	1
test['Sex_cat']=test['Sex'].cat.codes	2	2
a[1]	2	2
"combine[""title""] = combine['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)"	2	2
prediction.eval(fd_test)	2	1
X.apply(standardize, axis=0)	2	1
df_test['Age'][i] = 25	2	1
test.loc[v[i], 'MotherSurvived'] = temp[(temp.SexInt==0)&(temp.Age>18)].Survived.sum()	2	2
titanic_df.loc[ titanic_df['Fare'] > 31, 'Fare'] = 3	2	2
concat.Title.values[concat.Title.isin(['Dona', 'Lady', 'the Countess', 'Jonkheer'])] = 'Lady'	2	2
testing.drop(features_drop, axis=1)	2	2
train_data.drop('Cabin',axis = 1, inplace = True)	2	2
"train[""Age""] = train[""Age""].astype(int)"	2	2
"temp.to_csv(""../working/submission3.csv"", index = False)"	2	2
full.iloc[0:len(train)]	2	2
validation['Title'] == 'Ms'	2	2
data['FamilySizeBand'] = 0	2	2
train_data_orig.head()	2	2
df_study_rf.loc[ind, 'mean_test_score']	2	1
fi['importance'] = importance	2	1
tmp_df.corr()	2	1
train_data[['Pclass', 'Survived']].groupby('Pclass').count()	2	2
full.loc[(full.Age>48.068)&(full.Age<=64.034),'AgeCut']=4	2	2
data_train.loc[(data_train['Pclass']!=3) & (data_train['Sex']=='male'),'Survived'].value_counts().plot(kind='bar',ax=ax3,label='male upper class',color='blue')	2	1
le.transform(df_test[F])	2	1
"ax[0].set_title(""Fares in Pclass 1"")"	2	2
train_data['Title'] = train_data.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	2	2
data_whole.describe()	2	1
df_train['Title'] = df_train['Name'].apply(lambda x: (re.search(' ([a-zA-Z]+)\.', x)).group(1))	2	2
df.dropna(axis=0)	2	1
"new_data['Southampton'] = new_data[""Embarked""].str.contains(""S"").astype(int)"	2	1
dfTrain.groupby('Parch').Survived.mean().plot(kind='bar')	2	2
df.loc[ (df.AgeFill>10) & (df.AgeFill <=30) ,'AgeCat'] = 'adult'	2	2
"data.drop([""Name"",""family_or_alone"",""family_type"",""age_type""],axis=1,inplace=True)"	2	2
train['Embarked'].fillna(max_emb, inplace=True)	2	2
test['Cabin_Lett'] = test['Cabin'].apply(lambda x: str(x)[0])	2	2
data_all['Cabin_T'] = (data_all['Cabin']=='T')+0	2	2
DataFile.loc[(DataFile['Age'].isnull()) & (DataFile['Title'] == title), 'Age'] = imputed_age	2	2
df_data.groupby('Pclass')['Fare'].median()[aclass]	2	2
df_test.loc[(df_test['Age'] > 48) & (df_test['Age'] <= 64), 'Age'] = 3	2	2
test_df['Age_cats'] = np.ceil(test_df.Age / 18) # Creating Age ranges to split into categories	2	2
dataset['IsMale'] = np.where(dataset.Sex == 'male', 1, 0)	2	2
titanic_train_dataset['Cabin']:	2	1
train.loc[mrs_mask, 'Age'] = train.loc[mrs_mask, 'Age'].fillna(train[train.Title == 'Mrs'].Age.mean())	2	2
train['Embarked'][train['Embarked'] == 'S'] = 0	2	2
cv_scores.mean(),	2	2
train.loc[train[(train['Title']=='Miss')&(train['Age'].isnull())].index, 'Age'] = miss_age_mean	2	2
dfTrain[['Pclass','Sex','ParchCat','Embarked','Fare','TitleCat','Age']]	2	2
Test_Master['Fare'] = Test_Master['Fare'].fillna(Titanic_Master.Fare.median())	2	1
"df_data[""HadCabin""] = (df_data[""Cabin""].notnull().astype('int'))"	2	2
training_data.Age.isnull().sum()	2	1
train_data['Pclass'].value_counts()	2	2
test_ori.head(5)	2	1
"val_dataset[""Survived""].values"	2	2
dataset['age'] = dataset['age'].astype(int)	2	1
titanic_train_data['Embarked'].isnull().sum()	2	1
combined_df['Embarked'].fillna('S', inplace=True)	2	2
dfa[['Embarked']] = dfa[['Embarked']].fillna(value=dfa['Embarked'].value_counts().idxmax())	2	2
data.drop('Survived', axis=1).values	2	1
train_data.loc[train_data['Age'].isnull()]	2	1
"ALL_DATA[""Cabin""].unique()"	2	1
train.loc[(train['Age'].isnull())&(train['Sex_cat'] == i)&(train['Pclass'] == j+1),'Age'] = age_train[i,j]	2	2
test.iloc[:,:]	2	2
dfFull.loc[indEmb].Fare.mean()	2	2
x_train.shape, y_train.shape, x_test.shape	2	2
df.Title.replace('Ms', 'Miss')	2	2
Submission['Survived']=clf.predict(test)	2	2
full.loc[(full.Age>16.136)&(full.Age<=32.102),'AgeCut']=2	2	2
submission.to_csv('submission-simple-cleansing.csv', index=False)	2	2
df_full['Name']:	2	1
combdata['Pclass'].unique()	2	2
result.to_csv('./my_prediction.csv', index = False)	2	2
Age.plot.hist(ax=ax[0], bins=20, edgecolor='black', color='red')	2	2
"titanic_train[""Embarked""] = titanic_train[""Embarked""].fillna(""S"")"	2	2
dataset.loc[(dataset['Name_length'] > 28) & (dataset['Name_length'] <= 40), 'Name_length']  = 2	2	2
df['Pclass3'] = np.where(df['Pclass']==3, 1, 0)	2	2
"train_dataset.drop(labels=[""Survived""], axis=1).values"	2	2
submission.to_csv('titanic_rf4.csv', index=False)	2	2
X_test_submission['Survived'].to_csv('submission.csv', header=True)	2	2
"test[""Name""].str.extract(' ([A-Za-z]+)\.',expand=False)"	2	2
titanic_data_bucket.rename(columns={1:'yes', 0:'no'}, inplace=True)	2	2
data['Ticket'] = data.Ticket.str.replace(' ', '')	2	2
test.drop('Name', axis = 1, inplace = True)	2	2
df['Family_Size']=df['SibSp']+df['Parch']	2	2
models_dict.items():	2	1
test['FamilySize']=test['SibSp']+test['Parch']+1	2	2
dataset['AgeState'].value_counts()	2	2
combined.drop('SibSp', inplace=True, axis=1)	2	2
"train[[""Sex"", ""Survived""]].groupby([""Sex""], as_index = False).mean().sort_values(by=""Survived"", ascending = False)"	2	2
"dataset[""Fare""].fillna(dataset[""Fare""].median(), inplace=True)"	2	2
classifiers.keys():	2	2
df['title'] = df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip()).map(title_dict)	2	2
df.sort_values('importance', ascending = False).reset_index()	2	2
combined_train_test['Title'] = combined_train_test['Title'].map(title_Dict)	2	2
"DataFile[""SibSp""] + DataFile[""Parch""] + 1"	2	2
X.head(1)	2	1
train.drop(drop_columns, axis=1)	2	2
titanic_df['Name'].str.extract('.*, (.*)\.')	2	2
test_df.drop(['SibSp','ParchBinary','Parch','MasterMiss','FamilySize','SmallFamily','S','C','Fc','Alone'],axis=1,inplace=True)	2	2
axes[1].yaxis.set_major_locator(MaxNLocator(integer=True))	2	1
train_df.groupby('Family', as_index=False)['Family','Survived'].mean()	2	2
X_train.index.values	2	2
df.loc[(df.Age.isnull())&(df.Initial=='Mr'),'Age']=33	2	2
dataset['FareBin']=pd.cut(dataset['Fare'], Fare_Bins, labels=Fare_Labels)	2	2
ensembles.append(('GBM', GradientBoostingClassifier()))	2	2
nullData.drop('PassengerId',1)	2	1
names[1]	2	2
full.ix[whole_index].head()	2	2
ticketnos.append(''.join([n for n in s.split() if n.isdigit()]))	2	1
combine[0].copy()	2	1
train_df.Fare.plot.hist(ax=ax[0],bins=20,edgecolor='black')	2	1
"DataFile['Embarked'].fillna(""S"", inplace=True)"	2	2
pred.append(1)	2	2
dataset.loc[dataset['Sex']=='male','Survived'].value_counts()	2	2
"train.loc[train[""Family""] >4, ""FamilySize""] = 'large'"	2	2
"test_df[""Fare""].fillna(test_df[""Fare""].dropna().median(),inplace=True)"	2	2
dfFull.loc[(dfFull.Age >=10),'Age'] = 1	2	2
validation.loc[miss_mask, 'Age'] = validation.loc[miss_mask, 'Age'].fillna(validation[validation.Title == 'Miss'].Age.mean())	2	2
train_set[['Fare','Survived']].copy() # Copy dataframe so method won't leave Counts column in train_set	2	2
title_arr.append('Mrs')	2	1
"ax[0].set_ylabel(""Population"")"	2	1
combine[1].head()	2	2
dfFull.loc[dfPrediction.index,['TitleCat','Title','Sex','SibSpCat','ParchCat']]	2	2
combined_features.iloc[891:].Fare.fillna(combined_features.iloc[891:].Fare.mean(), inplace=True)	2	1
full.loc[full.Fare<=7.854,'FareCut']=1	2	2
train_score.append(accuracy_score(y_train1,y_train_pred))	2	1
prediction_test.astype(int)	2	2
titanic['Title']=titanic.Name.apply(lambda name:name.split(',')[1].split('.')[0].strip() )	2	2
model.add(Activation('sigmoid'))	2	2
"df_train_tmp.replace(""C"", 0).replace(""Q"", 1).replace(""S"", 2)"	2	2
train_ch.groupby('Ticket_Sign1').sum()	2	2
X_train.shape, Y_train.shape, X_test.shape, Y_test.shape, X_predict.shape	2	1
train_data.dropna(inplace = True)	2	2
"test_df.drop([""Name""],axis=1)"	2	2
"train[""Survived""].value_counts(normalize = True)"	2	2
row['Pclass'] == 3:	2	2
dfFull.loc[dfFull.Fare > fareMean,'Fare']=1	2	2
train['IsAlone'] = data['IsAlone'][:len(train)]	2	2
trainSet['Pclass'].hist()	2	2
data['Survived'][data['Sex'] == 'male'].value_counts().sort_index()	2	1
a.min()	2	2
test['Embarked'].fillna('S', inplace = True)	2	2
train.loc[train['Sex']=='male', 'Sex'] = 1	2	2
np.mean(train_scores,axis=1)	2	2
df.loc['Store 1', 'Cost']	2	2
train2.iloc[training_data][training_features], # the feature data	2	1
train_df.loc[(train_df.Age.isnull())&(train_df.Initial=='Miss'),'Age']=22	2	1
"parameters[""W1""]"	2	1
data['AgeBand'] = pd.cut(data['Age'], 5, labels=range(5)).astype(int)	2	2
cost_g.append(np.mean(c_g))	2	1
X_train_t.head()	2	1
submission.to_csv(submit_name, index=False)	2	2
df_train.groupby('Survived').Fare.describe()	2	2
df['Sex_binary']=df['Sex'].map({'male':1,'female':0})	2	2
test_df['BigFamily'] =   test_df[['FamilySize']].apply( (lambda x: int(int(x) >= 5) ), axis=1)	2	2
dataset['Title'] = dataset['Name'].str.extract('([A-Za-z]+)\.', expand=False)	2	2
combined.Fare.fillna(combined.Fare.mean(), inplace=True)	2	2
data.loc[ data['Fare'] > 31, 'Fare'] = 3	2	2
df_age_train['Age'].values.astype(float)	2	2
df['male'] = df['Sex'].map({'male': 1, 'female': 0})	2	2
model.add(Dense(50, kernel_initializer='uniform', activation='relu'))	2	1
pd.isnull(train.loc[x,'Cabin']):	2	1
trainingData.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Embarked', 'Cabin'], axis=1)	2	2
"train[""AgeCategory""] = ""Adult"""	2	2
all_data.drop('CabinCount', axis=1)	2	2
test['Male_Friends_Survived'] = 0	2	2
train_data.groupby(['Cabin'])[['Survived']].sum()	2	2
data.loc[data.Ticket == tk, 'Fare']	2	1
data_copy.loc[:,'Embarked']=data_copy['Embarked'].fillna('S')	2	2
col.median()	2	2
X_train.head(2)	2	2
test['Honorific']=test['Name'].transform(lambda f:re.findall('(Mr|Mrs|Master|Miss)',f))	2	2
processed_data['family_size'] = pd.Series(raw_data['SibSp'] + raw_data['Parch'] + 1, dtype=np.float64)	2	2
model.add(Dense(output_dim=2))	2	2
master_df.sample(5)	2	1
row['Parch']	2	1
titanic.groupby(['Sex'])	2	2
test['Age']=test['Age'].fillna(test['Age'].mean())	2	2
dfFull.loc[dfFull.CabinCat=='G','CabinCat']= 'Z'	2	2
df_train.groupby('Embarked').count()['PassengerId']	2	2
row['Sex'] == 'male' and row['Pclass'] == 1:	2	2
test_df.dropna(inplace=True)	2	2
test['Family']=test['SibSp']+test['Parch']+1	2	2
"valid_soft_pred_matrix.to_csv(""valid_soft_pred_matrix.csv"")"	2	1
"df_test_tmp.replace(""C"", 0).replace(""Q"", 1).replace(""S"", 2)"	2	2
test_df['IsAgeNaN'] = test_df['Age']	2	2
combined_train_test['Group_Ticket'] = combined_train_test['Fare'].groupby(by = combined_train_test['Ticket']).transform('count')	2	2
test.drop(columns = ['Ticket', 'Cabin', 'Name'])	2	2
guesses.append(survived)	2	1
grp_df.drop(PassID)['Survived'].min()	2	1
data['Embarked'] = data['Embarked'].fillna(data['Embarked'].mode()[0])	2	2
df_titanic['Ticket'].unique()	2	1
all_data['Ticket_Sign1'] = lbl.transform(list(all_data['Ticket_Sign1'].values))	2	2
processed_data['sibsp'] = pd.Series(raw_data['SibSp'], dtype=np.float64)	2	2
train_data.groupby(['Title'])[['Survived']].sum()	2	2
final_df.head(n=5)	2	1
feat_vector.mean()	2	2
concat_le.iloc[891:].copy()	2	2
train.groupby('Embarked').mean()	2	2
df['AgeFill']=df['Age']	2	2
train_df['AgeFill'] = train_df['Age']	2	2
train_df[['Cabin', 'Survived']].groupby(['Cabin']).agg(['count', 'mean']).sort_values(by=[('Survived','mean')], ascending=False)	2	1
dataset['ageClass'] = dataset['ageClass'].apply(np.floor)	2	1
test.drop(['Fare','young'],axis=1)	2	2
df_train.groupby(['Survived','Sex']).size().to_frame(name='Count').reset_index()	2	1
full.groupby('Title')['Name'].count()	2	1
test['Age'] = test['Age'].map(age_mapping)	2	2
dataset.loc[dataset['Fare']>100, 'Fare']=3	2	2
full_data.drop('Survived', axis = 1)	2	2
"submission_df.to_csv(""submission.csv"", index=False)"	2	2
data.head(8)	2	1
train_df.groupby('Embarked')['PassengerId'].count()	2	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Dona'],'Royalty')	2	2
train_data.drop(['Survived'], axis=1).columns	2	2
"combdata.loc[combdata['source']==""test""]"	2	2
"train_encoded_df[""survived""]"	2	1
merged.Cabin.fillna(value = 'X', inplace = True)	2	2
data_all['Cabin_Z'] = (data_all['Cabin']=='Z')+0	2	2
"processed_dataframe[""NormalizedPclass""] = dataframe[""NormalizedPclass""].copy()"	2	1
pd.pivot_table(titanic_df, values = 'Survived',                     index = ['ParchBinary', 'Female', 'MasterMiss'],                     columns=['Embarked', 'Pclass'],                     aggfunc=np.sum)	2	2
train['SexInt'] = train['Sex'].map(sex_to_int)	2	2
data.drop('Sex_female', axis=1, inplace=True)	2	2
train_df['Age'].max()	2	1
test['Name'].apply(get_title)	2	2
dataset['Age'].plot(kind='hist')	2	2
df.loc[ (df.Age.isnull()) & (df.Title == 'Mrs') ,'AgeFill'] = mean_ages[1]	2	2
titanic.drop(['Survived'], axis=1) # then, drop y column	2	2
train[['Fare','Pclass']].groupby(['Pclass']).mean()	2	1
train['Sex'] = train['Sex'].map({'female': 0, 'male': 1}).astype(int)	2	2
dfFull.loc[nullFares,'Fare']	2	2
df_train.drop([i], axis=1)	2	2
"Test_df[""PassengerId""],"	2	1
train_ch.groupby('CabinNum1').sum()	2	2
dftrain.copy()	2	1
"X_data.replace({""Sex"": gender_map, ""Embarked"": embarked_map})"	2	2
kaggle_df.to_csv('RFTunedsubmission.csv', index=False)	2	1
df['Age'].isnull()	2	2
PassengerNetTooSmall.copy()	2	1
submission ['Survived']= pred	2	2
train_data.groupby(['Title'])[['Survived']].mean()	2	2
combined_train_test['Fare'] = combined_train_test['Fare']/combined_train_test['Group_Ticket']	2	2
train_df.drop('PassengerId', axis=1)	2	2
train.drop(delete_columns, axis = 1, inplace = True)	2	2
df.T	2	2
miss_train.head()	2	2
"dataset.loc[(dataset[""Age""] > 29) & (dataset[""Age""] <= 39), ""Age""] = 3"	2	1
df.drop('Title',axis=1)	2	1
dataset.Embarked.fillna(2)	2	1
age_exist.values[:, 0]	2	1
test_df['IsHusband2'].loc[ test_df['SibSp'] == 0 ] = 0	2	2
original_train_data.head()	2	1
df['Age_scale'] = scaler.fit_transform(df['Age'].values.reshape(-1,1), age_scale)	2	2
dataset['Embarked']=dataset['Embarked'].fillna(freq_port)	2	2
test_df['IsHusband3'].loc[ test_df['SibSp'] == 0 ] = 0	2	2
test_data.Age.mean()	2	2
clf_std.append(clf_result.std())	2	1
testing.head(6)	2	2
titanic_df['Embarked'].isnull().sum()	2	1
"combdata.drop(labels = [""Name""], axis = 1, inplace = True)"	2	2
df1.shape[0]	2	2
merged.Title.replace(to_replace = ['Dr', 'Rev', 'Col', 'Major', 'Capt'], value = 'Officer', inplace = True)	2	2
df['Sex'] = df['Sex'].map({'female': 0, 'male': 1})	2	2
loss.eval(fd_train)	2	1
data['Age']=data[['Age','Pclass']].apply(impute_age,axis=1)	2	2
titanic_df['Fc'] =     titanic_df[['C','Male']].apply( get_fmalec, axis=1 )	2	2
"test.select_dtypes(include = [""object""]).columns"	2	1
sub['PassengerId'] = test['PassengerId']	2	1
train.head() #Dropped the names column	2	2
plt.hist(train_df['Fare'],bins=40,range=(0,train_df['Fare'].describe()[-1]),normed=True,color='blue',alpha=0.8)	2	1
test_df['Title']=data_df['Title'][891:]	2	2
data_to_submit.astype(int).to_csv('csv_to_submit.csv', index = False)	2	2
train['Fare_scaled'] = (train.Fare - train.Fare.mean())/train.Fare.std()	2	2
age_imp.groupby(age_imp).count()	2	2
train_df.drop(['SibSp', 'Parch'], axis=1, inplace=True)	2	2
train.drop(['PassengerId'],axis = 1)	2	2
data['Fare_Range'] = pd.qcut(data['Fare'], 4)	2	2
preds.append(predict)	2	1
data.loc[index, 'Age'] = medians[row['Name']]	2	2
"df[""Deck""][df[""Deck""] == ""G""] = 7"	2	2
df['Cabin']=df['Cabin'].replace(['A','G','T'],'U')	2	1
dfFull.update(dfPrediction)	2	2
training_data.head(5)	2	2
df_train.drop('Name',axis=1, inplace=True)	2	2
df['Family_Size'] = df['SibSp'] + df['Parch']	2	2
test['Fare'] = test['Fare'].fillna(fare_median)	2	2
dfa.head()	2	2
training_data.loc[(training_data['Survived']==1)]	2	2
train.drop(columns=['Name', 'Ticket', 'Cabin'], inplace=True)	2	2
all_data['Name']	2	2
dataset['Age'] = dataset['Age'].astype(float)	2	2
data_copy.loc[data_copy['Sex']=='male','Sex']=1	2	2
data_train.iloc[:,0]	2	2
combined_train_test['First_Name'] = combined_train_test['Name'].str.extract('^(.+?),').str.strip()	2	2
train.Embarked.fillna(train.Embarked.mode()[0])	2	2
dataset.drop(['IsTrain','PassengerId'],axis=1,inplace=True)	2	2
processed_data['embarked_q'] = pd.Series(raw_data['Embarked'] == 'Q', dtype=np.float64)	2	2
dataset['IsMother']=np.where(((dataset.Sex=='female') & (dataset.Parch>0) & (dataset.Age>18) & (dataset.Title !='Miss')),1,0)	2	2
df2.fillna(0)	2	2
"dataset.loc[dataset[""Age""] > 12,""IsChildren""] = 0"	2	2
grouped.rename({0:'Died%', 1:'Survived%'}, axis = 1, inplace = True)	2	2
dataset1.loc[dataset1['Sex']=='male','Sex'] = 0	2	2
train_set.drop('Survived',axis=1)	2	2
data['Age'].fillna(np.random.randint(age_avg - age_std, age_avg + age_std), inplace=True)	2	2
training_features.append(i)	2	1
m['Name'] == 'SVC':	2	1
x.loc[ df['Fare'] <= i*50, 'Fare_bin'] = i	2	2
sub_svc.to_csv('svc.csv',index=False)	2	2
"X_train.corr()[""Age""]"	2	2
dataset['Embarked'] = dataset['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})	2	2
titanic_df['age_class'] = titanic_df['Age'] * titanic_df['Pclass']	2	2
test['Embarked'] = test['Embarked'].fillna(0)	2	2
train['Survived'].values,	2	1
Each_Passenger['passenger'] = pd.factorize(Each_Passenger['passenger'])[0]	2	1
Test_Master.head()	2	1
df.drop(label, axis=1).values	2	1
test_df['FamilySize'] = test_df ['SibSp'] + test_df['Parch'] + 1	2	2
df.loc[df['Age'].isnull()==True, 'Age'] = age_random_filler	2	2
dataset.loc[(dataset['Age']>16) & (dataset['Age']<=26), 'Age']=1,	2	2
train_df.join(train_person_dummies)	2	2
"testing[""Cabin""].fillna(testing.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	2	2
full_data.loc[(full_data['Fare'] > 14.454) & (full_data['Fare'] <= 31), 'Fare']   = 2	2	2
X.apply(did_survive,axis=1)	2	2
df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 # 자신을 포함해야하니 1을 더합니다	2	2
df_full.loc[df_full['PassengerId'] == passID, 'Family_Survival'] = 1	2	1
df_full.loc[df_full['PassengerId'] == passID, 'Family_Survival'] = 0	2	1
train.drop('Cabin',inplace = True, axis = 1)	2	2
train['Salutation'] = train['Salutation'].replace('Mlle', 'Miss')	2	2
"test.drop(""Ticket"", axis=1, inplace=True)"	2	2
data['EmbCode'] = label.fit_transform(data['Embarked'])	2	2
df['Title'] == 'Master'	2	2
test.loc[test['Sex']=='male', 'Sex'] = 1	2	2
all_data['Type'] = all_data['Type'].replace('Mme', 'Mrs')	2	2
row['Age'] >= 50 and row['Age'] <= 70:	2	1
dataset['Embarked'].fillna(method='ffill', inplace=True)	2	2
test_df['Name']	2	2
deck_series.loc[i] = np.nan	2	1
"train_df.drop([""Parch"",""SibSp""],axis=1)"	2	2
"test[""Title""] = extracted_titles.map(titles)"	2	2
data.agg(*(count(c)     .alias(c) for c in data.columns))	2	1
df['importance_normalized'] = df['importance'] / df['importance'].sum()	2	2
dataset['Cabin']=dataset['Cabin'].map(cabin_mapping)	2	2
"training[""FamilySize""] = training[""SibSp""] + training[""Parch""] + 1"	2	2
train['Age'] = data['Age'][:891]	2	2
dc.iloc[891:]	2	1
test_df.drop(['Title'],axis=1,inplace=True)	2	2
"train.drop([""Cabin""],axis = 1)"	2	2
dataset.loc[(dataset['Sex']==0) & (dataset['Embarked']==1), 'Gender_Embarked'] = 2	2	2
data_all['Title_Mr'] = (data_all['Title']==1) + 0	2	2
train.drop(columns=['PassengerId'], inplace = True)	2	2
df.Embarked.astype('category')	2	2
df.sort_index()	2	2
train_df.groupby('Survived').size()	2	2
test.loc[test['Embarked']=='S', 'Embarked'] = 2	2	2
"df_train_tmp[""Age""].fillna(df_train_tmp[""Age""].median(), inplace=True)"	2	2
submission.to_csv('titanic_result_pandas.csv', index=False)	2	2
optmodels.sort_values(by='optScore', ascending=False)	2	1
train_df.shape , test_df.shape	2	1
"dataset[""Fare""].fillna(dataset[""Fare""].mean(), inplace = True)"	2	2
df['TickStartWith'] = tick_start_with.astype('category')	2	2
ctb.style.background_gradient(cmap='summer_r')	2	1
t['mean'].plot(kind='bar', yerr=t['sem']);	2	1
"test[""Fare""].fillna(test.groupby(""Pclass"")[""Fare""].transform(""median""), inplace = True)"	2	2
train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	2	2
imputer.transform(numeric_data)	2	1
train.loc[(train['Age']>48)&(train['Age']<=64),'Age_band']=3	1	1
df['Single'] = (df['family_size'] >  1).astype(int)	1	1
dataset.loc[:, lstInclude]	1	1
df_dums['Class_1']=[1 if ele == 1 else 0 for ele in df_dums['Pclass']]	1	1
"testData[""PassengerId""],"	1	1
"result.to_csv(""predictions.csv"", index=False)"	1	1
onehotencoder.transform(X_test_features).toarray()	1	1
"df_test[""Pclass""]=df_test[""Pclass""].astype('category')"	1	1
train_df['Title'] = train_df['Name'].apply(hapusName)	1	1
dt['Title'] = dt['Title'].fillna(0)	1	1
train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=True)	1	1
known_set.Age.values.reshape((1046,1))	1	1
"test['IsCabin'] = 1 # Create a new feature ""IsCabin"" and assign a default value ""1"""	1	1
data_test['Fare_scale'] = stdd.fit_transform(data_test['Fare'].values.reshape(-1,1),fale_scale_param)	1	1
df['Title'] = df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip()).astype('category')	1	1
titanic_df['PassengerId'].groupby(titanic_df['SibSp']).count().plot(kind='bar',ax=ax[0])	1	1
test6['IsAlone'] =  1	1	1
df_raw_valid.drop('Survived', axis=1, inplace=True)	1	1
valid_X['AgeBin_Code'] = label.fit_transform(valid_X['AgeBin'])	1	1
df['Fsize']=df['Parch']+df['SibSp']+1 #calculate family size	1	1
plt.hist(np.log2(df.Age), bins=40)	1	1
YesAge[['Age', 'Pclass','Sex','Salutation']].groupby(['Sex','Pclass','Salutation'], as_index=False).mean().sort_values(by=['Sex','Pclass','Salutation'], ascending=True)	1	1
train.drop(labels=['Cabin'], axis=1)	1	1
test_df.drop('New_Age', axis=1, inplace=True)	1	1
train_df[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked','Title','FamilySize','IsAlone']]	1	1
train_df['is_train'] = True	1	1
test_df.Fare.hist(bins = 30, ax=axes[1])	1	1
train.shape[0] # A numpy array is a grid of values, all of the same type, and is indexed by a tuple.	1	1
data['Embarked_Code'] = embarked_label.fit_transform(data.Embarked.fillna('S')) # 'S' has highest occurrence.	1	1
df.loc[((df.Sex == 1) & (df.IsAlone == 0)) , 'Se_IA'] = 1 #Male with family	1	1
_df.loc[mask, :].copy()	1	1
passenger['Sex'] == 1:	1	1
train_data_all.iloc[train_data_index], train_data_all.iloc[train_result_index]	1	1
final_test[['Survived']].copy()	1	1
dftrain.drop('Name',axis=1)	1	1
df['Fare'] = data['Fare']	1	1
"X_test.select_dtypes(include=[""object""])"	1	1
dataset.loc[ dataset['Fare'] <= 7.91, 'FareBand'] = 0	1	1
X['gender'] = X['Sex'].map({'female':0,'male':1}).astype(int)	1	1
"titanic_train.drop(""Survived"", axis=1, inplace=True, errors=""ignore"")"	1	1
rec.append(float(Summary_DT['Recall']))	1	1
"df[""Ticket""].head(40)"	1	1
data_train.drop(['AgeBand'], axis=1)	1	1
_df.fare.hist(bins=20, ax=axs[1])	1	1
"train[""Age""][(train[""Age""] > 32) & (train[""Age""] <= 48) ] = 2"	1	1
train['Fare'].hist(bins=100)	1	1
titanic_df['Alone'] = titanic_df.SibSp + titanic_df.Parch	1	1
combine_df['Survive_male_family'] = np.where(combine_df['Surname'].isin(survive_male_surname),0,1)	1	1
train['AgeCategorical'] = train['AgeCategorical'].astype(int)	1	1
models_df.loc[index, 'Train Accuracy'] = scores['train_score'].mean()	1	1
dataset.loc[ (dataset['Age'] > 26)&(dataset['Age'] <= 36), 'Age'] = 2,	1	1
trainingset.drop(['Fare'], axis = 1)	1	1
"train[[""FamilySize"", ""Single"", ""Nuclear"", ""Big""]].head(10)"	1	1
preds.Survived.astype(int)	1	1
train['Parch']==0	1	1
titanic_final['Sex'],_ =pd.factorize(titanic_final['Sex'])	1	1
test_data_only_first_class_female.ix[~(test_data_only_first_class_female['Embarked'] != 'C')]	1	1
dataset.loc[(dataset['Age']>72)                     , 'Age'] = 9	1	1
"o.drop(""Survived"",axis=1)"	1	1
"new_df[""Pclass_qd""] = normalize( new_df[""Pclass_qd""] )"	1	1
df_train['_Name']=df_train['Name'].map(lambda x: x.split(',')[0].lower())	1	1
"_test.drop(""PassengerId"", axis=1).copy()"	1	1
train.groupby('Survived')['Embarked'].value_counts().unstack(level=1).plot.bar(stacked=True)	1	1
useful.append('surname_count')	1	1
df_test.insert(loc=1, column='Survived', value=np.nan) # Insert as first column to be aligned with df_train	1	1
honorific_list.append(honorific)	1	1
test_data_embark.shape	1	1
BM.head()	1	1
data['Age'] = lbl.fit_transform(data['Age'])	1	1
ageAboveFifty.sort_values('age')	1	1
"train_data[""TitleDr""] = 0"	1	1
test_df['family_status'] = test_df['family']	1	1
train['Gender']=train['Sex'].str.contains('female').apply(lambda x:0 if x==False else 1) ##females are 1 males are 0	1	1
"test.loc[test[""Title""] == ""Mr"",""Age""] = test.loc[test[""Title""] == ""Mr"",""Age""].fillna(mrage)"	1	1
the_df.loc[ (the_df.Fare.isnull()) & (the_df.Pclass == j+1),                'FareFill'] = median_fares[j]	1	1
df['Title'] == 'Miss'	1	1
train_dummy.drop(columns='Survived').columns	1	1
plt.hist(x=[train_df[train_df['Survived']==1]['FamilySize'],train_df[train_df['Survived']==0]['FamilySize']],stacked=True,color=['red','blue'],label=['Survived','Dead'])	1	1
dat['Single'] = dat['Fsize'].map(lambda s: 1 if s == 1 else 0)	1	1
train['Sex'][train['Survived']==0].value_counts().sort_index()	1	1
dfcopy.join(pd.get_dummies(dfcopy.FareCluster, prefix=c.FareCluster))	1	1
train_df.drop(['Name', 'PassengerId'], axis = 1)	1	1
submit_output.head()	1	1
my_submission2.to_csv('submission2.csv', index=False)	1	1
"fig[1][0].set_title(""# Parents and Children"");"	1	1
"dat.loc[dat[""Cabin""].str.count(""D"") > 0,""Cabin""] = 3"	1	1
dataset['Cabin_known'] = dataset['Cabin'].isnull() == False	1	1
full_df['Child'] = (full_df['Age'] < 18).astype(int)	1	1
test2.info()	1	1
dataset['Fare_eff'] = dataset['Fare']/dataset['Ticket_group']	1	1
"train[""title""] = train[""title""].replace('Mme', 'Mrs')"	1	1
result.shape = (m_test, 1)	1	1
ax[1].set_title('Pclass count for unkown Deck')	1	1
"train.loc[pd.notnull(train[""Cabin""]), ""Cabin""] = 1"	1	1
"sns.boxplot(data=train,y=""Age"",x=""Pclass"", hue=""Sex"")"	1	1
dfte['Embarked'] = le.fit_transform(dfte['Embarked'])	1	1
AA_train['Age']	1	1
"all_data[1][[""Pclass"",""Agebin"",""Farebin"",""en_sex"",""SibSp"",""en_Embarked"",""Parch""]]"	1	1
tit_df_test.loc[152]	1	1
train['Embarked']=train['Embarked'].apply(lambda x:Embarked_map[x])	1	1
"models.append((""RandomForestClassifier"", RandomForestClassifier))"	1	1
"df[""Title""] = df[""Title""].map(titles)"	1	1
"copy[""All""] = """""	1	1
data['Title_Rev'] = [1 if title in ['Rev'] else 0 for title in data['Title']]	1	1
np.std(training_scores, axis=1)	1	1
"data[""Age""] = data.groupby(""Title"")[""Age""].transform(lambda x: x.fillna(x.mean()))"	1	1
train['FamilyCat'][train['Survived']==0].value_counts().sort_index()	1	1
"df_train[""Embarked""] = df_train[""Embarked""].fillna('S')"	1	1
"train.corr()[""Survived""]"	1	1
data.iloc[idx].Embarked == np.nan:	1	1
titanic.Cabin.fillna('NA')     ## NA-not available	1	1
combine_index.dtypes	1	1
train7.head()	1	1
age.groupby(['title']).mean()	1	1
plt.hist([survived['Fare'],titanic['title']],bins=200,stacked =True,label=['Survived','total'])	1	1
"test_ori.loc[(test_ori[""Title""] == ""Dr"") & (test_ori[""Sex""] == ""female"") ,""Title""] = ""Mrs"""	1	1
sub.to_csv('submission_forest.csv', index=False)	1	1
Test_Master.loc[:, 'PassengerId']	1	1
"test[""hasCabin""] = [0 if type(x)==float else 1 for x in test[""Cabin""]]"	1	1
df_combined['Title'] = df_combined['Title'].replace('Mme.', 'Mrs.')	1	1
concat_set['Title'] = concat_set['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	1	1
titanic.groupby(['Pclass','Sex','Parch','SibSp']).mean()['Age'].size	1	1
test_data.drop('Sex',axis=1)	1	1
my_data['Survived']	1	1
"train.fillna({""Embarked"":""S""},inplace=True)"	1	1
train.groupby(by = ['Pclass'])['Age'].describe()	1	1
train_data['Pclass'].mean()	1	1
"data[""Survived""].corr(data[""Fare""]),"	1	1
plotValues_notSurvived.hist(bins=10,weights=weights, ax = axis2, color='red')	1	1
X_test['Pclass'] = X_test['Pclass'].astype('object')	1	1
df['Name_len'] = df.Name.str.len()	1	1
"models.append((""ExtraTreesClassifier"", ExtraTreesClassifier))"	1	1
df['TitleNumber'] = df['Title'].replace(to_replace=titlesRare, value=0).replace(di)	1	1
dataset.loc[(dataset['Fare'] > 10.5) & (dataset['Fare'] <= 14.454), 'Fare'] = 4	1	1
emb_data.append(3 if tm_emb_data[i] == 'S' else 2 if tm_emb_data[i] == 'C' else 1)	1	1
train.Embarked.mode()[0]	1	1
dataset_train[['Sex', 'Survived']].groupby(['Sex']).sum()	1	1
train['Age']=train['Age'].fillna(med)	1	1
"curated_data[""has_cabin""] = train['Cabin'].isnull()"	1	1
training_data.drop(labels='Cabin', axis=1, inplace=True)	1	1
test['Pclass'].isna().sum()	1	1
data.loc[(data.passenger_fare>27.7207) & (data.passenger_fare<=27.7208) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>27.7207) & (data.passenger_fare<=27.7208) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
dtrain.drop('Survived',1)	1	1
df['Gender'] = df['Sex'].map({'female':0, 'male':1}).astype(int)	1	1
Test_data['Age'].fillna(Test_data['Age'].mean(), inplace = True)	1	1
submission.to_csv('titanic_csv_to_submit.csv', index = False)	1	1
df1.transpose()	1	1
X_test['Fare'] = X_test['Fare'].fillna(X_test['Fare'].median())	1	1
survived.count()	1	1
females_df['AgeFill'].hist(bins=max_age / bin_size, range=(1, max_age))	1	1
train.loc[train['Embarked']=='S','Port']=0	1	1
etc_feat_red.transform(etc_red_test)	1	1
df_nn.to_csv('SubmissionNN.csv', header=True)	1	1
"df.loc[(df[""Age""] > 32.252) & (df[""Age""] <=48.168), ""Age""] = 2"	1	1
titanic_test.apply(get_family_id,axis=1)	1	1
clfs.append(gBoosting)	1	1
df.loc[df['Age_age'].isna(), 'Age_age'] = df.loc[df['Age'].notna(), 'Age'].median()	1	1
X_final.iloc[:5,], df_tmp.iloc[:5,]	1	1
train_df['Honorific'] = train_df.Honorific.map(title_map)	1	1
test_df.SibSp.hist(bins = 20, ax=axes[1])	1	1
"train[""Age""][ train[""Age""] > 64 ] = 4"	1	1
"submission.to_csv(""titanic_submission_logregres.csv"", index=False)"	1	1
submission.to_csv('sinkorsurvive.csv', index=False)	1	1
testdata.ix[(testdata.Fare > 7.775) & (testdata.Fare <= 8.662), 'FareCategory'] = 1	1	1
mask_nan.sum()>0:	1	1
useful.append('Fare')	1	1
train['Age']=train.Age.fillna(train.Age.mean())	1	1
titanic_test_dataset_for_testing_step.info()	1	1
"train_df[""Sex""] = train_df[""Sex""].map({""female"": 0, ""male"": 1}).astype(int)"	1	1
train_df.hist(bins=10,figsize=(10, 10),grid=True);	1	1
titanic_traindf['Survived']	1	1
"dat.loc[dat[""Cabin""].str.count(""E"") > 0,""Cabin""] = 4"	1	1
combined_df.isnull().sum()	1	1
combined.iloc[891:].groupby(['Sex', 'Pclass', 'Title'])	1	1
"Data['Ticket_info'] = Data['Ticket'].apply(lambda x: x.replace(""."","""").replace(""/"","""").strip().split(' ')[0] if not x.isdigit() else 'X')"	1	1
train_df['ParchBool'] = (train_df['Parch'].apply(lambda x: 1 if x>0 else 0))	1	1
train.Embarked.describe(include = ['O'])	1	1
all_data.drop('Type_Others', axis=1)	1	1
Cabin.values[0]	1	1
comb_data.select_dtypes(include=['category']).columns	1	1
"test_df.drop([""Cabin"", ""Ticket""], axis = 1)"	1	1
"test_df[""Fare""][152]"	1	1
data['With_Family'] = data.SibSp + data.Parch	1	1
train_data.drop(labels = ['PassengerId', 'Ticket', 'Cabin'], axis=1, inplace=True)	1	1
test.loc[(test['Fare']>450) & (test['Fare']<=500),'FareCategorical'] = 9	1	1
data_train['Survived'] # 删除训练集Survived数据	1	1
"full_data[""AdultMale""][(full_data[""Age""] > 18) & (full_data[""Sex""] == 'male')] = 1"	1	1
test_df.rename(columns={i: 'Class_'+str(i)}, inplace=True)	1	1
"train_df[""Name_key""]=train_df[""Name""].str.split(',',expand=True)[1].str.split(' ',expand=True)[1]"	1	1
train['Survived'].values.ravel()	1	1
"train_data[""FamilySizeAbove8""] = 0"	1	1
train_df.describe(percentiles = [.01, .05, .10, .25, .50, .75, .90, .95, .99])	1	1
dataset_train.PassengerId.describe()	1	1
ohe.transform(df_test[feature].values.reshape(len(df_test[feature]), 1))	1	1
"titanic.loc[titanic[""TicketGroupSize""] == 1, [""Survived"", ""TicketGroupSurvivors""]]"	1	1
df['AgeBins'] = categories	1	1
test.head(4)	1	1
DataSetGender.head(10)	1	1
test.Name.replace('Lady','Mrs')	1	1
train[['PassengerId','Pclass', 'Sex', 'Age']];	1	1
given_df.copy()	1	1
summary_df.loc['PassengerId','level']='categorical' #nominal	1	1
df_output[['PassengerId','Survived']].head(500)	1	1
data['NameTitle'] = data['Name'].apply(extract_title)	1	1
test.drop(cols_to_drop, inplace = True, axis = 1)	1	1
df['Title'] = df['Title'].replace(['Mlle', 'Lady','Ms'], 'Miss')	1	1
train.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Sex_.*|Pclass_.*|Title_.*')	1	1
test_set['PassengerId']	1	1
"test[""Title""].str.strip("" "")"	1	1
fare_distribution['Fare'].value_counts().head(20)	1	1
train_df.Fare.fillna(median_fare)	1	1
titanicAll.groupby('Age1').size()	1	1
"dataset[""Title""] = dataset.Name.str.extract("" ([A-Za-z]+)\."", expand=False)"	1	1
t[0]	1	1
data_train['Embarked'] = data_train['Embarked'].map({'S': 0, 'Q': 1, 'C': 2})	1	1
train_data['Suffix'] = train_data['Suffix'].replace('Ms', 'Miss')	1	1
data['Age']=data['Age']*0.01	1	1
test.fillna(train.groupby(groupbyfeature)[meanfeature].transform('mean'), inplace=True)	1	1
train['Fare'].hist(bins=30)	1	1
men.loc[full_train_set['Survived'] == 0].shape[0]	1	1
"train.loc[train[""Sex""] == 0, ""Sex""] = ""male"""	1	1
embarked_dummy.drop(labels= label_drop, inplace=True, axis=1)	1	1
"train[""Cabin""] = train[""Cabin""].fillna(""C"").apply(first_letter)"	1	1
plt.hist(train_data.Age, bins= 15, alpha = 0.4, color = 'r', label = 'Before')	1	1
data.SibSp.astype(float).fillna(data['SibSp'].median())	1	1
combined.shape # get the shape of the dataframe	1	1
allset.drop(['TicketBucket'],axis=1)	1	1
processed_data.describe()	1	1
titanic_train.copy()	1	1
test['T1'] = np.array(test['Title'] == 'Master').astype(np.int32)	1	1
X['AgeGroup'] = np.where(train['AgeGroup']=='Adult', 0, 1)	1	1
trainData.Sex.astype('category')	1	1
cv_result.std()	1	1
df_gs.to_csv(f'output{curr_time}.csv',index=False)	1	1
"dataset['Name'].str.contains(""Mrs"", na=False)"	1	1
final.Survived.astype(int)	1	1
train['Mother'][train['Survived']==0].value_counts().sort_index()	1	1
data_test.loc[data_test['Embarked'].isnull(),'Embarked'] = Embarked_code	1	1
test_df.loc[test_df['FamMembers'] == 1, 'FamSize'] = 'single'	1	1
train[['Pclass' , 'Survived']].groupby('Pclass').mean()	1	1
"train_df.rename(columns={""Pclass_1.0"":""Pclass_1"",""Pclass_2.0"":""Pclass_2"",""Pclass_3.0"":""Pclass_3""},inplace=True)"	1	1
train6.drop('Survived', axis=1)	1	1
titanic['Sex'] == 'male'	1	1
deplicate_ticket.append(dataset_df.loc[dataset_df.Ticket == tk,['Name','Ticket','Fare','Cabin','FamilySize','Survived']])	1	1
features_z_transformed.Sex.apply(lambda x: 1 if x == 'male' else 0)	1	1
"combined[""Age""] = combined.groupby(['Sex','Pclass','Title_aggr'])['Age'].transform(lambda x: x.fillna(x.mean()))"	1	1
"train.loc[train[""Sex""]==""male"", ""Sex""] = 1"	1	1
titanic_data['Fare'].fillna(titanic_data['Fare'].dropna().median(), inplace=True)	1	1
ax[1].plot(df_acc)	1	1
train.drop(drop_elements, axis =1)	1	1
train.pivot_table(index='Pclass', values='Survived')	1	1
data_df['Age'] = data_df['Age'].fillna(data_df.groupby(by=data_df['Title'])['Age'].transform('mean'))	1	1
titanic.corr(),	1	1
test['Young'] = (test['Age']>=18) & (test['Age']<=40)	1	1
test_df.drop(['Cabin', 'Ticket', 'Name', 'Parch', 'SibSp'], axis=1)	1	1
test.Fare.fillna(test.Fare.median()) ##mean()?	1	1
data.surname_Dick.astype('category')	1	1
pca.transform(dataset1)	1	1
train_df[['Survived']].values.ravel()	1	1
dataset.loc[[61,829], 'Embarked'] = 'S'	1	1
test_data['Age'] = test_data['Age'].map({'Child':1,'Teenager':2,'Adult':3,'Old':4})	1	1
df_study_svc.reset_index(inplace=True)	1	1
scoring.append(model.score(X_train, y_train) * 100)	1	1
"test_df[""Sex""].loc[test_df[""Sex""]==""male""]=1"	1	1
"df_test.fillna(value={""Age"": 0, ""Fare"": 0, ""Born"": ""None""})"	1	1
train_df['Family_Size']=train_df['Parch']+train_df['SibSp']	1	1
data['Mother'] = list(map(mother, data.Sex, data.Age, data.Parch))	1	1
test.iterrows():	1	1
test_df['Fare']  = test_df['Fare'].astype(int)	1	1
"train_data.loc[train_data[""Name""].str.contains(""Mrs.""), ""TitleMrs""] = 1"	1	1
test.drop(excl, axis = 1)	1	1
df_test.drop(['Ticket'], 1, inplace=True)	1	1
size['IsAlone'] = 0	1	1
np.append(np.append(X_num_feat, X_cat_feat, axis=1), X_text_feat, axis=1)	1	1
train_1['Embarked'].fillna('S',inplace = True)	1	1
"titanic_train[""Embarked""] = titanic_train[""Embarked""].fillna('C')"	1	1
family_sur['Survived'].tolist(),	1	1
"g.axes.set_title('Adaboost feature importance', fontsize=20,color=""r"")"	1	1
"train.fillna({""Embarked"":s})"	1	1
test_df.iloc[:,1:]	1	1
data_test_df.apply(LabelEncoder().fit_transform)	1	1
train_data.drop(['PassengerId','Name','Cabin','CategoricalFare','Ticket'],axis = 1)	1	1
data_full.loc[data_full['Sex'] == 'male', 'IsFemale'] = 0	1	1
test_data['Fare']  = test_data[['Fare', 'Pclass']].apply(age_approx, axis=1)	1	1
submission.isnull().sum()	1	1
results.keys():	1	1
train_test.loc[(train_test.Parch<=3),'Low_Parch']=1	1	1
sns.boxplot('Title', 'Age_categorical', data=df, ax=ax1)	1	1
"test_raw[""PassengerId""].astype(int),"	1	1
dataset_df['Fare'] = dataset_df['Fare'].map(lambda i: np.log(i) if i > 0 else 0)	1	1
"df_cabin[""Cabin_Missing""] = df_train[""Cabin""].apply(lambda f: 1 if f == 'M' else 0)"	1	1
top_features.append('Survived')	1	1
train_data.Fare.fillna(test_data.Fare.median())	1	1
model.add(Dense(60, activation= 'relu'))	1	1
"combined.loc[pid,""Age_cat""] = assign_Age_cat(avg_age)"	1	1
ticket['Survived'] = combined_df.Survived	1	1
"df_test[""Fare""]"	1	1
np.where(preds < 0.5, 0, preds)	1	1
"test_df[[""Fare"", ""Sex"", ""Embarked""]]"	1	1
titanic_test.drop(['Name'],axis=1)	1	1
df_train['FareBinCode'] = farelabel.fit_transform(df_train['FarePPBin'])	1	1
train_data['Embarked'].describe()	1	1
inDF['Ticket_type'] = inDF['Ticket'].apply(lambda x : cleanTicket(x))	1	1
"model[""best_model""] = grid.best_estimator_"	1	1
x['FreqTicket'] > 1:	1	1
"trainingset[""AgeBin""][x] == ""Missing"":"	1	1
new_train_data.columns.values	1	1
df_train.groupby('survived').size()	1	1
predictions.to_csv('submission.csv',index = False)	1	1
train_scaled.describe()	1	1
df_full[['NameFareSize', 'TicketSize', 'FamilySize', 'GroupSize']].corr()	1	1
titanic_train_dataset['CategoricalAge'] = pd.qcut(titanic_train_dataset['Age'], q = 4)	1	1
Rf['Feature'] = list(X_train.columns)	1	1
all_data['Name']:	1	1
test_df.drop(['Pclass','Sex','Ticket','Title'],axis=1,inplace=True)	1	1
train_df['family_size'] = train_df['SibSp'] + train_df['Parch']	1	1
"test_df[""t_has_prefix""] = test_df['Ticket'].apply(lambda x: 1 if len(x.split())>1 else 0)"	1	1
"train_data.groupby(""Salutation"", as_index=False).Age.median()"	1	1
testds.drop('Name',axis=1)	1	1
data_train[['Name_length_Band','Survived']].groupby(['Name_length_Band'], as_index=False).mean().sort_values(by='Name_length_Band', ascending=True)	1	1
"train[[""PassengerId"",""Pclass"", ""Sex"",""Age"",""SibSp"",""Parch"",""Fare"",""Embarked""]]"	1	1
"test_data[""BigFamily""] = (test_data[""Family""] > 3).astype(int)"	1	1
train.isnull().sum() #이렇게 NaN(Null) 값을 표시할 수도 있다	1	1
"train_dat.at[i,""Ticket_g""] = ""Num"""	1	1
"test_df[""Title""] = titles"	1	1
"train_test.loc[train_test[""Cabin""].isnull() ,""Cabin_nan""] = 1"	1	1
test['Sex'].replace('female', 0, inplace = True)	1	1
"RandomForest.to_csv(""RandomForest.csv"", index=False)"	1	1
training_data.drop('Survived', axis=1).values	1	1
MLA_compare.loc[row_index, 'MLA Time']=cv_results['fit_time'].mean()	1	1
combined_df['fare_scaled'] = np.log10(combined_df['Fare'] + 1)	1	1
log.sort_values('Validation Accuracy', ascending=True).plot.barh(x='Classifier', y='Validation Accuracy', figsize=(16,7))	1	1
train['AgeBand']=pd.cut(train['Age'],5)	1	1
train_df1.groupby('Pclass').count()	1	1
simple_data_df['P1_Female'] = np.where((simple_data_df['Sex']==1) & (simple_data_df['Pclass']==1), 1, 0)	1	1
plot_df['Ticket'] = le.transform(plot_df['Ticket'])	1	1
"train.groupby(""Title"")[""Survived""].mean()"	1	1
df_Pclass.head()	1	1
"evaluation[""Survived""] = predicted_classes"	1	1
raw_data['Title'] = raw_data['Title'].replace('Mme', 'Mrs')	1	1
"train[""hasCabin""] = [0 if type(x)==float else 1 for x in train[""Cabin""]]"	1	1
combined_df['Age'] = combined_df['Age'].fillna(combined_df['age_pred'])	1	1
test['Survived']=Y_pred_4[:]	1	1
Corr.loc[var[1],'Hamming Distance'] = distance.hamming(QF_OH_Target['Survived'].astype(int), QF_OH_Target[var[1]].astype(int))	1	1
data_test_all.Fare.fillna(0,inplace=True)	1	1
model_cat.add(Dense(64, activation='relu', input_shape=(19,)))	1	1
temp.as_matrix()	1	1
df_all['Embarked'].unique()	1	1
data_copy['Sex'] = data_copy['Sex'].fillna('male') # 男性多	1	1
"X_train[[""FamilySize"",""Family_S_C""]] =  scaler_for_family.transform(X_train[[""FamilySize"",""Family_S_C"" ]])"	1	1
input_dataset.groupby('Pclass').mean()['Fare'].plot(kind='bar',figsize=(15,8), ax = ax)	1	1
tickets[['ticket', 'ticket_prefix', 'ticket_nr']].head()	1	1
train_set.dtypes	1	1
df3['SibSp']	1	1
class_scores.append(cross_val_score(classifier, X_train, y_train, scoring='accuracy', cv=cv_kfold))	1	1
combined_df_imputed['IsChild'] = [is_child(row) for row in combined_df_imputed.iterrows()]	1	1
le.transform(titanic_data[feature])	1	1
"test[""Fare_fillin""] = test[""Fare_fillin""] / 10.0"	1	1
df['Ticket'].sample(10)	1	1
train.drop(['Embarked'], axis=1,inplace=True)	1	1
np.dot(err,err)	1	1
df['survived_per'] = df.apply(lambda x: fn_survival_per(x), axis=1)	1	1
test_raw.dropna(axis=1, how='any')	1	1
df['Outlier'] = np.where(df[column_name] > maxm, 1, np.where(df[column_name] < minm, 1, df['Outlier']))	1	1
whole['Sex_d'] = (whole.Sex=='male').astype(int)	1	1
e.append(num)	1	1
died_data['SibSp']	1	1
sns.boxplot(data = data.drop('PassengerId', axis = 1))	1	1
ticket_numbers.append(int(ticket))	1	1
full['Age'].iloc[i] = age_pred # if there are similar passengers, fill with predicted median	1	1
test_input['Embarked'] =  imp.fit_transform(test_input['Embarked'].values.reshape(-1,1))	1	1
test_df['Age'] = test_df['Age'].fillna(median_age)	1	1
one_hot_encoded_testing_predictors.drop(corln_col,axis=1)	1	1
cv_results.sort_values('CV_mean',ascending=False)	1	1
big['Fare'].fillna(big['Fare'].mean(), inplace=True)	1	1
titanic_test['Fare'] = titanic_test['Fare'].fillna(0)	1	1
titanic_train['Title']=titanic_train.Title.replace(to_replace=['Ms','Mme'],value='Miss')	1	1
missing_age_X_train.drop(['NamePrefix'],axis = 1)	1	1
data_train.Embarked.dropna().mode()[0]	1	1
X_train_test_ohe.iloc[:len_train, :], X_train_test_ohe.iloc[len_train:, :]	1	1
df_raw['Age'].fillna(np.median(age), inplace=True)	1	1
train.groupby(['PassengerCat'])[['Survived']].count()	1	1
MLA_compare.loc[MLA_compare['F1 Score'].idxmax()]['MLA Name']	1	1
testData.loc[(testData.Age.isnull())&(testData.Initial=='Miss'),'Age']=22	1	1
test_data.PassengerId.to_csv('gender_submission.csv',header=True, index_label='Survived')	1	1
"data[""Sex_adults""]=np.nan"	1	1
"test_df[""Age""][np.isnan(test_df[""Age""])] = random_age2"	1	1
submision.drop(['Pclass','Age','Sex','Name','Ticket','Cabin','Embarked','Fare','Parch','SibSp','Pclass'], axis=1)	1	1
test['Age_group']=pd.cut(test.Age, 8).cat.codes	1	1
train.loc[(train.Fare>31.0) & (train.Fare<=512.329),'Fare_cat'] =3	1	1
xyz.append(cv_result.mean().round(3))	1	1
cur['Survived'] = class_id	1	1
train_pclass.Pclass_1.isnull().sum() == 0	1	1
all_data['Title'] = title	1	1
train_df['Nclass'], train_df['Name'] = train_df['Name'].str.split('.', 1).str	1	1
full_dataset['Age'].iloc[i] = age_med	1	1
train['Age'].append(test['Age'])	1	1
"dftotal[""Ticket2""]=dftotal.Ticket.map(ticket2)"	1	1
data.parent_alone.loc[data.PassengerId==378] = 0	1	1
test_df['Pclass']	1	1
data['TitleGroup'] = 0	1	1
"df['Name_parts'] = df.Name.str.count("" "") + 1"	1	1
survived_cabin_h.sort_values(by='Rate', inplace=True, ascending=False)	1	1
params['learning_rate'] = grid.best_params_['learning_rate']	1	1
dataset['AgeBand'] = 0	1	1
test.Age.fillna(mean_age_all, inplace=True)	1	1
easy_correl_train.loc[:,'Fare']= np.minimum(easy_correl_train['Fare'] , 100)	1	1
df['AgeDec'] = df['AgeDec'].astype(int)	1	1
"rfc_params['max_features'] = ""auto"""	1	1
np.min(histLoss_validation)	1	1
dataset['Age'].isnull()	1	1
x.set_value(row.Index,'FP_Surv',len(f[f.Survived==1]))	1	1
"models.append((""BernoulliNB"",  BernoulliNB))"	1	1
test['EmbarkedModified'] = test['Embarked']	1	1
combined['Embarked'] = combined['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} )	1	1
data.loc[data['Age'] > 59.9, 'Age'] = 4	1	1
"titanic_df[""Fare""]=titanic_df[""Fare""].astype(int)"	1	1
data.iloc[0,0]	1	1
train.apply(lambda row: get_cabin_id(row, cabin_id_mapping), axis=1)	1	1
train['Age']=train.groupby(['Sex', 'Pclass'])['Age'].transform(lambda x: x.fillna(x.mean())).astype(int)	1	1
complete_data[0]['Survived']	1	1
"train[[""Parch"", ""Survived""]].groupby([""Parch""], as_index = False).mean()[""Survived""]"	1	1
df.groupby(['Pclass', 'Sex']).Age.mean().unstack()	1	1
t_num.astype(int).sort_values(ascending=False).head()	1	1
np.min(X_reduced[:,0]), np.max(X_reduced[:,0])	1	1
train_df[['SibSp', 'Survived']].groupby('SibSp', as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
"tab.div(tab.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True, ax=axes[1])"	1	1
clfs.append(gBoosting_best_result)	1	1
dataset['FamilySize'] = dataset['FamilySize'].replace([2,3,4], 1)	1	1
df['Cherbourg'].sum()/df['PassengerId'].count()	1	1
x_test['Cabin'] = x_test['Cabin'].fillna('X')	1	1
train.loc[train['Survived'] == 0, 'Parch']	1	1
"train[""Single""] = False"	1	1
final_predict[['PassengerId','Survived']]	1	1
train_df['title'].value_counts()	1	1
df_2[['Sex','Age']].values.T # Scaling	1	1
"StackingSubmission.to_csv(""StackingSubmission_2018.2.csv"", index=False)"	1	1
data.query('train == 1')	1	1
train.drop(['Male'], axis=1, inplace=True)	1	1
train['Class2'] = 0	1	1
"testdf[""PassengerId""]"	1	1
merged.loc[merged['FamilySize'] == 1, 'Fsize'] = 'Alone'	1	1
res['ProbaMin'] = res[models_list].min(axis=1)	1	1
test_df['Title'] == 'Miss'	1	1
test.loc[test['Fare'] == 0]	1	1
"copy_that_t[[""Age"", ""SibSp"", ""Parch"", ""Fare""]] = pd.DataFrame(scaled_X_t, columns=[""Age"", ""SibSp"", ""Parch"", ""Fare""], index = copy_that_t.index)"	1	1
df_train.drop('PassengerId',axis=1)	1	1
df_data.pivot_table(values='Fare', columns=['Pclass','Sex','Embarked'], aggfunc='mean')	1	1
dataset.loc[group.index, 'PassengerId'].min()	1	1
"train_data.loc[train_data[""Name""].str.contains(""Mme.""), ""TitleMme""] = 1"	1	1
childrenSpec.head()	1	1
test[['Pclass', 'Sex_Bin','Embarked_Num_fill', 'Age_Cat']].loc[test[np.isnan(test['Fare'])].index.tolist()[0]]	1	1
data_test.drop(['Parch'], axis=1)	1	1
detc_cv.best_params_['n_estimators'],	1	1
submit.to_csv('Submission.csv', index=False)	1	1
pivottable.groupby(level='WomanChildTour').mean()	1	1
df_train.loc[df_train['FamilySize']==1, 'IsAlone'] = 1	1	1
dataframe.loc[dataframe.Fare.isnull(),'Fare'] = Fare_median	1	1
X.shape,theta.shape, result[0].shape,theta_min.shape,theta_min.T.shape	1	1
df['Title'] = name_title	1	1
test_data.isnull().sum() # no NaNs in the Age column	1	1
"train[""Age""].hist(bins=15, color='green', alpha=0.8)"	1	1
train.loc[((train['Pclass']<3) & (train['FamilySize']>2) & (train['FamilySize']<5) & ((train['Age']>20) & (train['Sex']=='female') | (train['Age']<19))),'NonPoorMothersAndChildren']=1	1	1
test.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp', 'Parch'], axis=1)	1	1
df2_final.head()	1	1
test['Title']=test['Title'].astype(float)	1	1
"missing_data1.drop([""Farebin""],axis=1)"	1	1
df.drop('PassengerId', axis=1)	1	1
"ttt[""PassengerId""],"	1	1
test_df[['Age', 'Fare', 'Parch', 'SibSp']].corr()	1	1
Test_data.describe(include='all')	1	1
"train_data[""Pclass_str""].value_counts(normalize=True).sort_index()"	1	1
df.sort_values(by='Name').head(10)	1	1
Y['Sex'] = labelencoder_Y.fit_transform(Y['Sex'])	1	1
dataset.loc[(dataset['Age'] > 32.252) & (dataset['Age'] <= 40.21), 'Age'] = 4	1	1
"train[""Name""].apply(title)"	1	1
titanic.tail(3)	1	1
data.surname_Chambers.astype(np.uint8)	1	1
df_train['HasCabin'] = df_train['Cabin'].str.extract(r'([A-Za-z]+)', expand=False).apply(lambda x: 0 if pd.isnull(x) else 1)	1	1
df_Age_NaN['Age']= y_train_Nan	1	1
submission.to_csv('RandomForest.csv', index=False)	1	1
"NNSubmission.to_csv(""NNSubmission.csv"", index=False)"	1	1
"XX[""ParchBin""]=X[""Parch""]>0"	1	1
TitanicTrain.drop(['PassengerId'], axis=1).corr()	1	1
model.add(Dense(h_dims,input_dim=dims,activation='relu'))	1	1
train['AgeBand']=pd.cut(train['Age'], (0, 7, 60, 80), labels=['0','1','2'])	1	1
titanic['FamilyCategory'] = titanic['FamilyCount'].apply(lambda x: 0 if x == 1 else( 2 if x > 4  else 1))	1	1
dataset.groupby(['Pclass', 'Embarked']).size().unstack(0)	1	1
data_.append(test1[i])	1	1
dataset['Fare'] = dataset['Fare'].astype(float)	1	1
"train[""Cabin""] = le.fit_transform(train[""Cabin""].fillna('0'))"	1	1
dataset['Age'] = dataset['Age'].fillna(train['Age'].median())	1	1
df.loc[df['AgeGroup']>40, 'AgeGroup'] = 4	1	1
train.assign(CabinCat = cabin_cats_train)	1	1
"copy_df[""EmbarkedC""] = train_OneHotEncoded[:,1]"	1	1
"train[[""Pclass"", ""Gender"", ""Port"", ""Age_cat"", ""travel_company""]].values"	1	1
X['Age_cat'] = pd.qcut(X.Age, q=4, labels=False)	1	1
full.drop(['Name'], axis=1, inplace=True)	1	1
result_svm.mean(), result_knn.mean(), result_lr.mean(),	1	1
"sns.boxplot(""Embarked"",""Fare"", palette='rainbow', hue='Pclass',data=test)"	1	1
df_test.copy()[features]	1	1
train['CategoricalAge'] = full_age[:891]	1	1
dropped.append(item)	1	1
tr2['Pclass_t'] = tf.one_hot(tr2['Pclass'], 3, 1.0, 0.0)	1	1
whole['Dr'] = (whole.Title.str.contains('Dr.')).astype(int)	1	1
"titanic_train[""Cabin""].value_counts()"	1	1
train_df.drop(['Name','PassengerId'], axis=1)	1	1
dataset.loc[(dataset['Age'] > 40.21) & (dataset['Age'] <= 50.158), 'AgeBand'] = 4	1	1
df2.drop_duplicates(inplace=True)	1	1
dataset_train.drop(drop_elements, axis = 1)	1	1
df.drop(['PassengerId', 'Cabin', 'Cabin', 'Embarked', 'Name', 'Ticket'], axis=1, inplace=True)	1	1
axes[3].set(xlim=[0,40], ylim=[0,0.05])	1	1
"df_train[""norm_family_size""] = (df_train[""tot_family_size""]-df_train[""tot_family_size""].mean())/(df_train[""tot_family_size""].std())"	1	1
test['Embarked'][test['Embarked'] == 'Q'] = 2	1	1
test['Fare_cut']=pd.cut(test.Fare, 31)	1	1
titanic.drop(['Name'], axis = 1)	1	1
"train[""Age""].fillna(fill_train_age['Age'], inplace=True)"	1	1
"submissions.to_csv(""survived.csv"", index=False, header=True)"	1	1
testOrg['Cabin'][testOrg.Cabin!=0]=1	1	1
error_rate.append(np.mean(y_pred_i != y_test))	1	1
df_titanic['Family'] = df_titanic['SibSp'] + df_titanic['Parch'] + 1	1	1
data.drop('MaidenName', axis =1)	1	1
ax[2].set(xlabel='max_iter', ylabel='Build_Time')	1	1
"sns.boxplot(x=""Sex"", y=""Age"", hue='Pclass', palette=[""m"", ""g""], data=df_tmp)"	1	1
full_set.drop(['Cabin','Name','Parch','PassengerId','SibSp','Ticket'], axis=1, inplace=True)	1	1
"tot[""Title""] = tot.Name.str.extract(""([A-Za-z]+)\."")"	1	1
"full_data.loc[(full_data['TravelSize'] > 1) & (full_data['TravelSize'] < 5), 'TravelGroup'] = ""small"""	1	1
test.loc[(test['Fare']>150) & (test['Fare']<=200),'FareCategorical'] = 3	1	1
dfcopy.assign(HasSib = [k > HAS_SIB_THRESHOLD for k in dfcopy.SibSp])	1	1
"full.loc[full['Title'] == 'Rev', 'FamilySurvivalRate'] = 0 # This is how I'll strongly correlate ""Rev"" with death."	1	1
dataset.set_value(rowIndex, 'PeoplePerTicket', numOfTickets)	1	1
classifiers.append(LogisticRegression(random_state=seed))	1	1
test_X['Fare'].isnull().sum()	1	1
titanic_data.FamilySize.describe()	1	1
train_df.loc[ train_df['Fare'] <= 7.91, 'Fare'] = 0	1	1
df_submit['Survived'] = test_pred	1	1
df_submission['is_alone'] = df_submission['family_size'].map(lambda f: 1 if f == 1 else 0)	1	1
test['Age'].isnull().any()	1	1
train[['Sex', 'gender_class', 'Embarked', 'ageCat', 'fareCat', 'famSize', 'hasAge', 'Pclass', 'Survived', 'hasCabin1', 'isAlone', 'class_alone', 'gender_alone', 'class_hascabin']]	1	1
train['hasCabin']=train['Cabin'].apply(lambda x: 0 if x==0 else 1)	1	1
train.loc[train.new_SibSp > 1, 'new_SibSp'] = 2	1	1
plt.hist(df.nor_Fare, bins=45)	1	1
y_test.head(3)	1	1
"related_people.loc[related_people[""PassengerId""]==1289,""RGroup""]=""Frolicher_M"""	1	1
full.loc[full.Fare.isnull(),'Fare'] = missing_fare	1	1
df['parch_3'] = (df.parch == 3).apply(int)	1	1
Titanic_Master.groupby(['Title'])['Age'].median()	1	1
subset_df.head()	1	1
submissions.to_csv(fname,index=False)	1	1
df['Name'].str.contains('Master\.')	1	1
dataset.loc[dataset['Age'] <= 16, 'Age' ] = 0	1	1
X_test['Fare'] = X_test['Fare'].apply(str)	1	1
data_train_all.drop(columns=['SibSp','Parch'],inplace=True)	1	1
df_all.Sex.replace('female',1)	1	1
train.drop(['Title'], axis = 1, inplace = True)	1	1
"df_FULL.drop(""Deck"", axis=1, inplace=True)"	1	1
test_df['Family_Size'] = data['Family_Size'][891:]	1	1
train_df.loc[(train_df['Age'] >= 40.21) & (train_df['Age'] < 50.157), 'Age'] = 4	1	1
"train[[""Sex"", ""Age"", ""Pclass"", ""Fare"", ""Embarked"", ""Cabin"", ""SibSp"", ""Parch""]].values"	1	1
X_test.iloc[:, [0,1]].copy()	1	1
train_df['Embarked'].notnull() ## Exclude rows with null Embarked feature	1	1
df['mil']=df['Name'].str.contains('capt.|maj.|gen.|lt.|col.', case=False).astype(int)	1	1
dataset['Sex']=dataset['Sex'].map(Sex_mapping)	1	1
"train_data[""Queenstown""] = 0"	1	1
test[['Age', 'SibSp','Parch','Fare','Sex1', 'Pclass1']]	1	1
train.loc[(train['Pclass'] == 2) & (train['hasAge'] == 1), 'class_hasage'] = 2 #has age Pclass 2	1	1
prepared_data['sex'] = pd.get_dummies(initial_data.Sex, drop_first=True)	1	1
test.loc[train.new_SibSp > 1, 'new_SibSp'] = 2	1	1
test[['PassengerId','Survival']]	1	1
"data_full.loc[(data_full['Titles'].isin(mostfrequenttitles)==False), 'Titles'] = ""Fancy"""	1	1
df_submit['Survived'] = pd.Series(output)	1	1
df_test.drop(['Ticket','Cabin'],axis = 1, inplace= True)	1	1
df_train['Alone'] = df_train.apply(is_alone, axis=1)	1	1
statistics.mode(train_dataset['Embarked'])	1	1
training_df.info() # Noticed so many nulls in the age and cabin fields	1	1
fill_age_df.loc[fill_age_df['AgeBand'] == -1].drop(columns='AgeBand')	1	1
data.isChild.replace(['Adult','Child'],[0,1], inplace = True)	1	1
fare_Plot.astype(int)	1	1
data_test['FarePP'] = data_test['Fare'] / data_test['famsz']	1	1
data.loc[data.Age.isnull(), ('Age')] = data[data.Age.isnull()].apply( lambda x: median_age_dict.get(x.Title_Class), axis = 1)	1	1
axs[0].set_title('Training_Data',fontsize=20)	1	1
"titanic_df.groupby(""Pclass"").mean()[""Survived""].plot.bar()"	1	1
train_df['Cabin_cat'] = train_df['Cabin'].str.extract('([a-zA-z])',expand=True)	1	1
df.drop('Deck', axis=1, inplace=True, errors='ignore')	1	1
"finalResult.to_csv(""Survivor_prediction.csv"", index = False)"	1	1
"test.drop(labels = [""Cabin""], axis = 1, inplace = True)"	1	1
"StackingSubmission_lg_layer.to_csv(""StackingSubmission_lg_layer_1.csv"", index=False)"	1	1
dc.at[index,'Unknown_Fare']=w	1	1
"comb_data[""Sex""] = comb_data[""Sex""].astype(int)"	1	1
axes[1].set_title('Embarked not Survived')	1	1
"titanic_train.drop(titanic_train[""Age""].argmax(), axis=0)"	1	1
"test_features.to_csv(""test_features.csv"",index=False,header=True)"	1	1
family['Surname_adj'] = family['Surname'] #new column for corrected family_group	1	1
"model.add(Dense(64, input_dim=10, activation=""relu"", kernel_initializer=""he_normal"", bias_initializer=Constant(0.01)))"	1	1
comb['Title'] = comb['Name'].map(lambda x:x.split(',')[1].split('.')[0].strip())	1	1
passengerid.count() / data.passengerid.count()	1	1
"dfTest[""SibSp""]"	1	1
X_train.join(DataFrame(X_train[['Age', 'Sex']].apply(get_person, axis=1), columns=['person']))	1	1
test.loc[test['Age'] < 1.0, 'hasAge'] = 1	1	1
testfinal.loc[:,'PassengerId'],	1	1
model.add(Dense(units = 6, kernel_initializer = 'random_uniform', activation = 'relu'))	1	1
"dataset_med.loc[1,1][""Age""]"	1	1
"y.append(""Not missing"")"	1	1
dataframe['Prefix'] = dataframe['Prefix'].replace(['Mlle', 'Ms'], 'Miss')	1	1
df[['Pclass','Sex','Age','SibSp','Parch','Fare','Cabin']].copy()	1	1
"df[['Age', 'Survived', 'Sex']].groupby('Sex').boxplot(by = ""Survived"")"	1	1
pipelines.append(('ScaledGNB', Pipeline([('Scaler', StandardScaler()),('GNB', GaussianNB())])))	1	1
np.mean(data_train['Age'])	1	1
titanic.loc[(titanic['Age']>19.00)&(titanic['Age']<=26.00),'NAge']=1	1	1
"train[""Embarked""] = train.Embarked.fillna(4)"	1	1
train['Cabin'].loc[train.Cabin.isnull()]=0	1	1
"age_sal.groupby(""Salutation"").Age.apply(list)"	1	1
test_df.loc[(test_df['Age'].isnull())&(test_df['Title']=='Mr'),'Age'] = 33	1	1
df_to_submit.Survived.astype(np.int32)	1	1
train_df['Alone'] = train_df['Family_size'] == 0	1	1
age_learn.set_index('PassengerId', inplace=True, drop=False)	1	1
dataset.loc[dataset['Fare'] <= 10, 'Fare'] = 0	1	1
"train[""Age""][(train[""Age""] > 16) & (train[""Age""] <= 32) ] = 1"	1	1
t_data.Fare.fillna(t_data.Fare.median(), inplace = True)	1	1
data.drop(drop_columns, axis=1)	1	1
merged['NameTitle'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)	1	1
train_df[['sibsp', 'parch', 'familysize']].head()	1	1
training_losses.append(training_loss)	1	1
test_dataset.drop(['PassengerId','Name','SibSp','Parch','Cabin','Ticket','Cabin','family','Title'],axis=1)	1	1
incorrect.drop('Guassian Naive bayes', 1)	1	1
ens_pred.to_csv('predictions_vc20171002.csv', header='True')	1	1
train_df_imputed['IsChild'] = [is_child(row) for row in train_df_imputed.iterrows()]	1	1
df['Salutation'].replace(['Lady', 'Dona', 'the Countess', 'Mme'], 'Mrs', inplace = True)	1	1
test_df.drop(['Ticket','Name','Fare','Age','Parch','SibSp'],axis=1,inplace=True)	1	1
"combined[""Embarked""].fillna(""NA"")"	1	1
test2['Sex'] = le.fit_transform(test2['Sex'])	1	1
"test[[""FamilySize""]].head()"	1	1
train_new.drop(['Embarked','Sex'], axis = 1, inplace = True)	1	1
together['Cabin'] = together['Cabin'].apply(cleanCabin)	1	1
titanic.replace('S',1).replace('C',2).replace('Q',3) # Converting Embarked feature to numeric data.	1	1
sns.boxplot(data=df,x=df['Pclass'],y=df['Age'],palette='coolwarm') # create plot object.	1	1
test_data['Name'].apply(lambda x: len(x))	1	1
dataset.drop(['SibSp','Parch'],axis=1)	1	1
test.drop({'Cabin'}, axis=1)	1	1
df_test[['Age']] = imputer.fit_transform(df_test[['Age']])	1	1
test_df.groupby(['Sex', 'Pclass', 'Honorific'])	1	1
train['Survived'] == 1	1	1
deplicate_ticket.head(8)	1	1
"data['Sex'] = data['Sex'].replace({""female"":1,""male"":0})"	1	1
test['IsChild'] = 0	1	1
results.to_csv(filename, index = False)	1	1
X['Age'].fillna(maindf['Age'].mean(), inplace=True)	1	1
subm_df.to_csv('submission.csv')	1	1
fem2_analysis[['PTitle','Embarked','Survived']].groupby(['PTitle','Embarked']).mean()	1	1
scaler_x.transform(titanic_test)	1	1
train_dataset[['Pclass','Sex']]	1	1
"related_people.loc[related_people[""PassengerId""]==41,""RGroup""]=""7546"""	1	1
train['relatives'] = train.n_relatives.apply(lambda x:n_map.get(x, 'Many'))	1	1
"dataset.drop(""PassengerId"", axis=1, inplace=True)"	1	1
data.drop(['Pclass','Name','Sex','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Age'], axis=1)	1	1
"results.to_csv(""output_python_tf.csv"",index=False)"	1	1
train.iloc[-10:]	1	1
"df1.style.set_caption(""Female travels alone"")"	1	1
"data.loc[data[""Sex""]==""male"",""Sex2""]=1"	1	1
lr.coef_.transpose()	1	1
train_data['FamilySize'] = train_data['Parch'] + train_data['SibSp'] + 1	1	1
train_data.loc[train_data['Survived']==0, :]	1	1
train_with_title.Title.apply(encodeTitle)	1	1
all_data.loc[(all_data['Age'].isnull()) & (all_data['Title'] == title),'Age'] = age_to_impute	1	1
f.append(i)	1	1
df_test['TicketEncoded'] = ticket_parts[0]	1	1
concat_set['IsAlone'] = 0	1	1
"df.Sex.astype(""category"")"	1	1
test['Survived'] = -1	1	1
test_data[['Age', 'Fare', 'FamilySize', 'SibSp', 'Sex_female', 'Sex_male', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Embarked_C', 'Embarked_Q', 'Embarked_S']]	1	1
"data_train.drop([""Name"",""Cabin"",""Ticket"",""Embarked""],axis = 1,inplace = True)"	1	1
df_coeff.sort_values(by='Correlation', ascending=False)	1	1
"df_test[""Age""][np.isnan(df_test[""Age""])] = random_age"	1	1
"test_data[""Fare""] = test_data[""Fare""]/np.mean(test_data[""Fare""])"	1	1
"test[""Title_mr""] = test[""Title""] == 'Mr'"	1	1
"test[""eval_tuned_xgb_tree""] = model.predict(test[features_names])"	1	1
df_test.drop('PassengerId', axis=1).as_matrix()	1	1
data_no_nan.loc[:, 'Sex'] = fill_series(data_no_nan['Sex'])	1	1
"test.groupby(""Title"")[""Age""].count()"	1	1
data['Fare'].fillna(data['Fare'].mean(), inplace = True)	1	1
test.drop(['Age'], 1, inplace=True)	1	1
algorithm_results.loc[index, 'Test Accuracy'] = cv_results['test_score'].mean()	1	1
titanic_df['FirstClass']=titanic_df[['Pclass']].apply(get_firstclass, axis=1)	1	1
"titanic_test_dataframe.loc[titanic_test_dataframe[""Pclass""] == 3, ""Fare""]"	1	1
"subm[[""PassengerId"",""Survived""]].set_index(""PassengerId"")"	1	1
train3['Embarked'] = train3['Embarked'].fillna('S')	1	1
imputer_test['Pclass'] = imputer_test['Pclass'].astype('str')	1	1
test.Cabin.fillna(train.Cabin.mode()[0], inplace=True)	1	1
test['Fare'].index[test['Fare'].apply(np.isnan)]	1	1
input_data.drop(['PassengerId','Survived','Name','Ticket'],axis = 1)	1	1
df.loc[df['Fare'] <=7.91, 'Fare'] = 0	1	1
training_data.loc[(training_data['Age'] >60)]	1	1
combined['Embarked'].value_counts()	1	1
np.mean(train[train.Age.notnull()].Age)	1	1
df_full.describe(include='all')	1	1
dataset['Female'] = dataset['Sex'].map(lambda s: 1 if  s == 1  else 0)	1	1
"pipelines.append(( ""ScaledSVM"" , Pipeline([( ""Scaler"" , StandardScaler()),( ""SVM"" , SVC())])))"	1	1
df['surname'] = df.Name.apply(lambda n: n.split(',')[0])	1	1
test_pclass_dummies.drop(['Class_3'], axis=1, inplace=True)	1	1
results['name'].append('voting')	1	1
train['categories'] = pd.cut(train['Fare'], bins, labels=group_names)	1	1
train_data['Age']	1	1
train['cabin_is']='1'	1	1
titanic_train.drop(['SibSp', 'Parch', 'PassengerId', 'Name', 'Ticket', 'Embarked'], axis=1, inplace=True)	1	1
data['Sex'] = data.Sex.replace({'male':1,'female':0})	1	1
missuses.fillna(missuses.median())	1	1
df_test[['PassengerId', 'Survived']].to_csv('mysolution4.csv', index=False)	1	1
processed['PassengerId'] = df['PassengerId']	1	1
history_dict.keys()	1	1
"ax[0].set_title(""Gradients of 1 step"")"	1	1
X3['Embarked'] = X3['Embarked'].replace(to_replace=['S', 'C', 'Q'], value=[0, 1, 2])	1	1
summission.to_csv('summission.csv', encoding='utf-8', index = False)	1	1
"df.query(""{} == {}"".format(column1, m))"	1	1
test_data.drop(['PassengerId'], axis =1)	1	1
output.head(10)	1	1
combine_df['Title'] = combine_df['Title'].replace(['Mlle','Ms'], 'Miss')	1	1
correctArr.append(0)	1	1
df[['Sex','Age']].values.T # Scaling	1	1
train_df['Survived'].groupby(pd.qcut(train_df['Fare'], 5)).mean()	1	1
full.loc[full.Title.isin(['Lady','Mme','the Countess','Dona']), 'Title'] = 'Mrs'	1	1
train.drop(['PassengerId', 'Cabin'], axis=1, inplace = True)	1	1
test_d.drop(['Parch','SibSp'],axis=1)	1	1
ship['Embarked'].mode()	1	1
"titanic_train.hist(bins=20, figsize=(18, 16), color=""#f1b7b0"");"	1	1
train['Alone']=train['Family_Size'].transform(alone)	1	1
df_titanic['Age'].unique()	1	1
data['Title'] = data['Title'].str.split(',').str.get(1)	1	1
"correlation_dataframe[""target""] = training_targets[""Survived""]"	1	1
submission.to_csv('submissions_ada_random.csv', index=False)	1	1
test.rename(columns={'C': 'Cherbourg', 'Q': 'Queenstown', 'S': 'Southampton'})	1	1
test_df.to_csv('../datasets/new_test.csv')	1	1
transformed_df['Embarked_C'] = embarked.Embarked_C	1	1
Test_Master['Fare'] = Test_Master['Fare'].astype(int)	1	1
data_sub_prepared.loc[data_sub_prepared[data_sub_prepared.Fare.isna()].index, 'Fare'] = data_sub_prepared[(data_sub_prepared.sex == 1) &( data_sub_prepared.SibSp ==0) &( data_sub_prepared.Parch ==0) &( data_sub_prepared.Pclass ==3)  &( data_sub_prepared.Q ==0)  &( data_sub_prepared.S ==1) ].Fare.mean()	1	1
"test_df[""Gender""] = test_df[""Sex""].map( {""female"": 0, ""male"": 1} ).astype(int)"	1	1
titanic_test['Fare']=titanic_test['Fare'].astype(int)	1	1
x_test['Embarked'] = x_test['Embarked'].fillna('$')	1	1
family['Family_Single'] = family['FamilySize'].map(lambda s: 1 if s == 1 else 0)	1	1
train.groupby(['TicketLetter'],as_index=True)['PassengerId'].count().sort_values(ascending=False)	1	1
"cs[""Pvalue""] = p"	1	1
train.loc[train['Sex']=='female','Gender']=1	1	1
df.loc[df.Cabin.notnull(), 'WithCabin'] = True	1	1
featured_set.loc[train_fold] # Extract train data with cv indices	1	1
val_acc.append(batch_acc)	1	1
pred.to_csv('pred_LR.csv',index=None) # 导出数据	1	1
dataset['Sex'] = dataset['Sex'].map({'female': 1, 'male': 0})	1	1
train_dataset['Fare']    = train_dataset['Fare'].astype(int)	1	1
trainData['Age'].plot(kind='box',figsize=(26,18))	1	1
"df_train[""Age""].median()"	1	1
data1.describe(include = 'all')	1	1
"train.loc[train[""SibSp""] >1 , ""sib_c""] = ""2"""	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Dona', 'Rare')	1	1
"le.transform(train[""Sex""])"	1	1
estimators.append(('RCCV', model3))	1	1
df.Fare.astype('O')	1	1
"train.pivot_table(values=""Survived"", index = [""Child""], columns = ""Family_size"")"	1	1
df_test.drop(['Name'],axis = 1)	1	1
data.Name.head()	1	1
test_data.drop('Cabin_cat',axis=1)	1	1
"df_train[[""SibSp"", ""Parch"", ""Pclass"", ""Sex"", ""Age"", ""Survived""]].replace(""male"", 1).replace(""female"", 0)"	1	1
df_submission['sin_age'] = df_submission['age'].map(np.sin)	1	1
train_temp['engineered_feature'] = train_engr['engineered_feature']	1	1
combined_df['Fare'].dropna().median()	1	1
"ticket_table.loc[ticket_table[""People_on_ticket""] < 3, 'Ticket_id' ] = -1"	1	1
row['titles'] in MrList:	1	1
test_data.set_value(index,'AgeRange','0-15')	1	1
age1[ 'Until10' ] = age1[ 'AgeGroup' ].map( lambda r : 1 if r <= 10 else 0 )	1	1
"train.drop(""FamilySize"", axis=1, errors='ignore')"	1	1
df_main.head()	1	1
"test[""Name""].apply(title)"	1	1
train.groupby('Pclass')['Age'].median()	1	1
rcParams['figure.figsize'] =7,5	1	1
rcParams['figure.figsize'] =7,4	1	1
raw_train['is_test'] = 0	1	1
curated_data['Title'] = temp['Title'].map(title_mapping)	1	1
titanic_train['Age'] = titanic_train['Age'].fillna(0)	1	1
df.dropna(subset=['Age'])	1	1
"subm3.to_csv(""subm3.csv"",index=False)"	1	1
data_frame.drop('Name',axis=1,inplace=True)	1	1
"Test[""Cabin""]=Test[""Cabin""].map(lambda x: x[0])"	1	1
title_lab.transform(df_t.Title)	1	1
"models.append((""GaussianNB"",  GaussianNB))"	1	1
train.loc[train['Embarked'].isnull(),'Embarked'] = 's'	1	1
train2.drop(['Fare'], axis = 1)	1	1
df1['IsAlone'] = df1['FamilyNum'].apply(lambda x: 1 if x == 1 else 0)	1	1
"test[""family_size""] = 0"	1	1
dataset.describe(include='all').T	1	1
dataset['Title']=dataset['Title'].map(title_map).astype(int)	1	1
np.where(final_pred>thres,1,0)	1	1
test_df.drop('Ticket', axis = 1, inplace = True)	1	1
whole.set_value(600,'Fid',149) #display(whole[whole.Name.str.contains(r'Duff Gordon')])	1	1
train.reset_index(drop = True, inplace = True)	1	1
test.iloc[:, [0, 10]].values	1	1
test.join(sex_dummies_test)	1	1
"train[""Age_4""] = (30 <= train[""Age""])&(train[""Age""]<45)"	1	1
train_ds_0fare[['Pclass', 'PassengerId']].groupby('Pclass').count()	1	1
axes[10].cla()	1	1
test_df['Survived'] = np.nan	1	1
all_dummy_df.mean()	1	1
train_df['Title'] = train_df['Name'].str.extract('([A-Za-z]+)\.')	1	1
df.loc[(df.Sex=='female') & (df.Pclass==1)]	1	1
"dataset.Embarked.fillna(""S"", inplace=True)"	1	1
train[['AgeBand', 'Survived']].groupby(['AgeBand']).mean()	1	1
full.groupby(['Title'])['Age'].median()	1	1
X_all.sample(10)	1	1
"testing.loc[testing[""Title""] == ""Dr"", ""Title""] = 4"	1	1
df['Is_Alone'] = (df['FamilySize'] == 1).astype(int)	1	1
"train_data.groupby([""Pclass"", ""Survived""]).size().reset_index()"	1	1
Neighbours.append(neighbour)	1	1
age_nomissing['Age'].values	1	1
"join.drop(labels=[""Name"",""Ticket""],axis=1,inplace=True)"	1	1
"titanic_train.loc[titanic_train[""Embarked""] =='Q',""Embarked""] = 2"	1	1
X_train.drop(['SibSp', 'Parch'], axis=1, inplace=True)	1	1
test_set.drop('Sex_nan',axis=1,inplace=True)	1	1
scores_sv.mean(),	1	1
datasets_clean.append(df.drop(columns=cols_to_drop,inplace=False,errors='ignore'))	1	1
train.groupby(['Embarked'])[['Survived']].mean()	1	1
train_valid_X.head()	1	1
X_train.drop(['PassengerId','SibSp','Name', 'Ticket','Survived', 'Parch', 'Cabin', 'Embarked'], axis=1, inplace=True)	1	1
rest.append('Cabin')	1	1
age_set.info()	1	1
"df_train_tmp.loc[:, [""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked""]]"	1	1
cat_pipe.append(('shared_ticket', Shared_ticket))	1	1
ax[2].set(xlabel='tol', ylabel='Build_Time')	1	1
"train[""Title""] = train[""Name""].apply(lambda x: x.split(',')[1].split('.')[0].strip().upper())"	1	1
test['CabinN4'] = pd.to_numeric(test['CabinN4'], downcast='integer')	1	1
train.Survived.hist(by=train.Pclass,layout=(3,1),sharex=True)	1	1
dataTrain.drop(columns = ['Survived'])	1	1
"test.loc[(test[""Fare""] >= -0.001) & (test[""Fare""] < 7.896),""Fare""] = 0"	1	1
train.drop(['SibSp','Parch'],axis=1,inplace=1)	1	1
survived.tail()	1	1
"train.loc[train[""Embarked""] == ""Q"", ""emk_c""] = ""1"""	1	1
dataset.loc[(dataset['Sex']==1)&(dataset['Pclass']==3),'WealthFactor'] = -1	1	1
"test[""Cabin""][test[""Cabin""] == ""C""] = 2"	1	1
titanic.hist(bins=10,figsize=(9,8),grid=False)	1	1
test.drop(['S', 'Q'], axis=1, inplace=True)	1	1
train_df['fare_category'] = pd.cut(train_df['fare'], [-1, 6, 7.5, 8, 14, 20, 30, 60, 90, 600])	1	1
data_set['Title'] = data_set['Title'].replace('Miss', 'Ms')	1	1
output.to_csv('assignment2_nn.csv', index=False)	1	1
train.loc[i, 'AgeModified'] = rand.uniform(train.Age.mean()-train.Age.std(), train.Age.mean()+train.Age.std())	1	1
"titanic_test[""Age""] = titanic_test[""Age""].astype(int)"	1	1
data['Embarked_factorized'] = data['Embarked'].factorize()[0]	1	1
data['ImputedAge'] = age_corrected	1	1
dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 3	1	1
"train[""Sex""] = train[""Sex""].map({""male"":0,""female"":1})"	1	1
X_test.drop(['Fare'],axis=1)	1	1
t['Sex'] = t['Sex'].map(sex_map)	1	1
trainONSWAR.drop(drop_elementsONSWAR, axis = 1)	1	1
dataset['Title'].fillna(-1, inplace=True)	1	1
input_arr['Name'].apply(lambda x: x.split(',')[-1]).apply(lambda x: x.split('.')[0].strip())	1	1
frame.loc[~frame.Ticket.isin(ticket_surv.index),'TicketSurv']=0	1	1
data['FamilyName'] = data.Name.str.extract('(\w+),', expand=False)	1	1
x['svm'] = sum(sSurvived == split['Y_cv'])/len(sSurvived)	1	1
testingset['Sex'] = testingset['Sex'].map(sexmapping)	1	1
model.add(tf.keras.layers.Flatten(input_shape=(8,)))	1	1
"train_df[""Embarked""] = train_df[""Embarked""].astype(""category"")"	1	1
feature_numeric.append(column)	1	1
"df_train[""Title""] = df_train[""Title""].map({""Master"":0, ""Miss"":1, ""Ms"" : 1 , ""Mme"":1, ""Mlle"":1, ""Mrs"":1, ""Mr"":2, ""Rare"":3})"	1	1
data[['Pclass','Sex','Age','Parch','SibSp','Embarked']].copy()	1	1
train.drop(['PassengerId','Cabin','Sex','Embarked','Name','Ticket'],axis=1,inplace=True)	1	1
in ['test', 'train']:#['train', 'test']:	1	1
np.sum(dZ2, axis = 0, keepdims = True)	1	1
y_eval.head()	1	1
titanic_test['FamilySize'] = titanic_test['SibSp'] + titanic_test['Parch']	1	1
train['CabinN1'] = train['CabinN1'].astype(int)	1	1
"data_test[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
"my_solution.to_csv(""extraTrees.csv"", index_label = [""PassengerId""])"	1	1
dataset.loc[(dataset['Fare'] > 10.5) & (dataset['Fare'] <= 21.679), 'Fare'] = 2	1	1
df_train['Embarked'].value_counts().index[0]	1	1
df_submit.to_csv('./test_prediction_xgboost.csv', index = False)	1	1
train.groupby(['Sex','Survived']).PassengerId.count().unstack()	1	1
"data[""Sex""] = LabelEncoder().fit_transform(data[""Sex""])"	1	1
testDF['SharedTicket'] = testDF['Ticket'][testDF['Ticket'].duplicated(keep=False)]	1	1
test['Sex'] = test['Sex'].map(lambda x : 1 if x=='male' else 2)	1	1
"sibsp[""STD""] = train[[""Parch"", ""Survived""]].groupby([""Parch""], as_index = False).std()[""Survived""]"	1	1
test7['Cabin'] = le.transform(list(test7['Cabin'].values))	1	1
data1.loc[data1.Sex == 'female', 'Sex'] = 0;	1	1
dataset[['Pclass', 'Sex', 'Age','Fare','Embarked']]	1	1
df['Age'] = df.groupby(['Sex'],sort=False)['Age'].apply(lambda x: x.fillna(x.median()))	1	1
train['Survived'].astype(np.int)	1	1
train_Age.values[:, 1::]	1	1
coeff_df.sort_values('correlation', ascending=False)	1	1
cabin[0]=='D' and int(cabin[1:4])<=50	1	1
"test[""PassengerId""] = test_id"	1	1
titanic_train_data['Embarked'].fillna('S',inplace =True)	1	1
df['age_fill'].isnull().sum(0) # 177 rows have NaN	1	1
df_train.name.head()	1	1
df_full.groupby('Title')['Age'].median()	1	1
sns.boxplot(x='Embarked',y='Age',data=df_train)	1	1
test.loc[male_index,'Sex'] = 1	1	1
"Submission.to_csv(""submission.csv"", index=False)"	1	1
summary_df.loc['PassengerId','role']='ID'	1	1
y_test.iloc[:,1:2].values	1	1
kaggle.Cabin.astype(bool).astype(int)	1	1
dataset.loc[(dataset.Age.isnull())&(train.Initial=='Mrs'),'Age']=36	1	1
submissions.to_csv('submission.csv', index=True)	1	1
test_mod.Age.fillna(age_med_test, inplace = True)	1	1
df_test.Fare.isnull().sort_values(ascending=False)	1	1
"train[""Embarked""] = lb_make.fit_transform(train[""Embarked""])"	1	1
X1.values	1	1
test_df['Age_code'] = enc.fit_transform(test_df['Age_bins'])	1	1
tt['Surname'].value_counts().to_dict()	1	1
my_data.drop('Cabin',axis=1,inplace=True)	1	1
train_test['Lname'] = train_test.Name.apply(lambda x: x.split(' ')[0])	1	1
in ['B', 'C', 'D', 'E', 'F']	1	1
df['LargeFamily'] = df['FamilySize'].map(lambda s: 1 if 5 <= s else 0)	1	1
test_df.ix[i, 'Familytype'] = 'Big family'	1	1
sample_sub.head()	1	1
train['not_alone'].value_counts()	1	1
test['Survived_wtd_avg'] = y_test_preds_wtd_avg.astype(int)	1	1
df.groupby(['Pclass']).agg({'Fare': 'mean', 'Age': 'median'})	1	1
pclass_frame.dtypes	1	1
Submission.to_csv('Logregwithconfusion01.csv',sep=',')	1	1
test_df['People'] = test_df[['Age','Sex']].apply(people, axis=1)	1	1
df.drop(self.column_names, axis=1)	1	1
full.join(pd.get_dummies(full['Embarked'], prefix = 'Embarked'))	1	1
df['Fare'] = df['Fare']*108*1.3 #historic gbp to current gbp to current usd	1	1
"data[""Survived""].corr(data[""Had Cabin""]),"	1	1
df_test.filter(regex='Age_.*|Family|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')	1	1
submission['Cabin_numerical'] = submission.Cabin.str.extract('(\d+)')	1	1
Filler_Ages.Age.unstack(level = -1).unstack(level = -1)	1	1
classifiers.append(qd)	1	1
test.drop(['PassengerId', 'Name'],axis=1)	1	1
train_data.groupby(['Parch'])['Survived'].count().plot.bar(stacked = True, ax = axes[1])	1	1
sns.boxplot('Pclass', 'Fare', 'Survived', df_train, orient='v')	1	1
train_data.isnull().sum().sort_values(ascending = False)	1	1
"pd.merge(test, test_age1, on=""PassengerId"", how=""left"")"	1	1
combined.loc[ (combined.Age.isnull()) & (combined.Sex == i) & (combined.Pclass == j+1),                'Age'] = guess_ages[i,j]	1	1
df_test_result.to_csv('predict.csv', index=False)	1	1
data['Father'] = list(map(father, data.Sex, data.Age, data.Parch))	1	1
test.as_matrix()	1	1
train_p['Gender'] = 0	1	1
model.add(Dense(45, activation = 'relu'))	1	1
"train_data[""Title""] = train_data[""Name""].map(lambda x: x.split()[1].strip('.').strip(','))"	1	1
"combined.loc[f_group.index, ""group_type""] = ""family"""	1	1
train['Embarked'] = train['Embarked'].apply(lambda x: x[0])	1	1
test_copy.loc[test_copy['Parch'] == 1, 'Parch_Category'] = 1	1	1
t_df['Alone'] =  t_df.Parch + t_df.SibSp	1	1
dftrain['Title']=dftrain.Title.map(context3)	1	1
train_bfe.head(5)	1	1
"train[""Title""] = [i.replace('Mme', 'Mrs') for i in train.Title]"	1	1
X_comparison['Survived'] = y_test	1	1
df_train.title.head()	1	1
test_copy['Embarked_Category'] = test_copy['Embarked_Category'].astype(int)	1	1
combine.ix[combine['Family'] == 0, 'Alone'] = 1	1	1
models['set4']['num_attrs'] = ['Fare', 'Age']	1	1
full_set.sort_values(['Age'], ascending = True).head(3)	1	1
died['Age'].plot.hist(alpha=0.5, color='blue', bins=50)	1	1
dataset.groupby(['Sex', 'Embarked']).size().unstack(0)	1	1
all_data.drop('PassengerId', axis = 1)	1	1
ax[0].set_title('Fare Distribution, Survived=1')	1	1
df['Survived'][df['Sex'] == 'male'][df['Pclass'] == 2].value_counts()	1	1
train.join(df_sex)	1	1
train_df['family_onboard'].isna().sum()	1	1
dft.fillna(0)	1	1
data.loc[(data.passenger_fare>65) & (data.passenger_fare<=70) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>65) & (data.passenger_fare<=70) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
test[['PassengerId','Survived']].set_index('PassengerId').to_csv('gbdt3.csv')	1	1
train_df[['FareRange', 'Survived']].groupby(['FareRange'], as_index=False).mean().sort_values(by='FareRange', ascending=True)	1	1
data['Deck'] = data.Deck.str.replace('T', 'A')	1	1
df_data['Cabin'] = df_data['Cabin'].apply(lambda x:x[0] if x is not np.nan else 'X')	1	1
train_copy.head()	1	1
cmp.loc[cmp<1]	1	1
test['Sex'] = n.fit_transform(test['Sex'].astype('str'))	1	1
dataset.loc[(dataset['Age'] > 14) & (dataset['Age'] <= 30), 'Age']        = 1	1	1
"data.loc[data[""Embarked""] == ""S"", ""Embarked""] = 1"	1	1
"data.loc[data[""Embarked""] == ""S"", ""Embarked""] = 0"	1	1
test_df['family_onboard'] = pd.cut(test_df.family_onboard, bins = [0,1,2,3,4,5,50], right = False, labels = [1,2,3,4,5,6])	1	1
df_test['Fare'] = df_test['Fare'].fillna(FareMean)	1	1
"full_data[""Name""].apply(get_unique_last_names)"	1	1
test['Fare'] = fare_imputer.transform(test[['Fare']]) # Impute it only for the test set	1	1
test_f.values # Creats an array of the test data	1	1
test.corr()	1	1
train[['SortAge_3', 'Survived']].groupby(['SortAge_3'], as_index=False).mean()	1	1
train3_df.describe()	1	1
X_train['perishing_mother_wife'] = X_train[['surname', 'Pclass', 'person']].apply(perishing_mother_wife, axis=1)	1	1
train['EmbarkedModified'] = train['Embarked']	1	1
MisAge.sum()	1	1
dataset.loc[(dataset['Age']>0)&(dataset['Age']<16),'AgeBand']=0	1	1
data_pruned.loc[ data_pruned['Age'] > 60, 'Age'] = 5	1	1
"train[""Embarked""] = train[""Embarked""].fillna(train[""Embarked""].value_counts().idxmax())"	1	1
importance_rf_df['Feature'] = importance_rf_df['Feature'].map(lambda x: predictors[x])	1	1
"all_data.drop([""Name"",""Ticket"",""PassengerId"",""Cabin"",""Embarked""],axis=1)"	1	1
df.drop(labels, 1)     .drop('Survived', 1)     .drop('Cabin', 1)     .drop('Ticket', 1)     .drop('NameLen', 1)     .drop('Name', 1)     .drop('PassengerId', 1)	1	1
df[['Title', 'Survived']].groupby('Title').count().merge(df[['Title', 'Survived']].groupby('Title').mean(), right_index = True, left_index = True)	1	1
train_df[['embarked', 'survived']].groupby(['embarked']).mean().sort_values('survived', ascending=False)	1	1
train['Age'][train['Survived']==1].value_counts().sort_index()	1	1
train.loc[:,'Age'].fillna(train.loc[:,'Age'].mean(),inplace=True)	1	1
train_data['Embarked'] = labelEncoder_embarked.fit_transform(train_data['Embarked'])	1	1
df_train['Sex'] = df_train['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
test['title']=test['Name'].apply(get_title)	1	1
"dftrain.loc[idx,""CountTicket_InTrain""]=ticket_count_train[ticket]"	1	1
dataset.isnull().sum().sort_values(ascending=False)	1	1
train.groupby(by = 'Pclass')['Survived'].mean()	1	1
titanic['Age'].mean()	1	1
"df_women.loc[idx,""Ticket""]"	1	1
"X_test_transformed.drop([""Name"", ""Ticket"", ""PassengerId""], axis=1).copy()"	1	1
"df_ticket.loc[df_ticket[df_ticket['TicketMembers'] < 3].index, ""TicketId""] = -1"	1	1
my_submission.to_csv('submission_stacking.csv', index=False)	1	1
train.loc[(train['Survived'] == 1),'Pclass'] ,	1	1
"data_df[""Title""] = data_df.Title.astype(int)"	1	1
names[['master','mr','miss','mrs']]	1	1
train_df_numerical.shape	1	1
dat['isMaster'].fillna( 0, inplace = True)	1	1
titanic_train.head(20)	1	1
x['FreqLastName'] < max_group:	1	1
"X_train[""Pclass""] = X_train[""Pclass""].astype(""str"")"	1	1
train_dataset.groupby(['Embarked','Pclass']).mean()	1	1
Xtrain.shape[0]	1	1
df_train.groupby('Title').mean()['Age'] # Master's average age is 4.6 meaning it's Child. Age can influence survival rate, so this can be an useful feature.	1	1
df['is_male'] = pd.get_dummies(df['Sex'])['male']	1	1
X['Embarked'] = X['Embarked'].apply(lambda x: ord(x) if type(x) == str else x)	1	1
figure['data'][0]['textposition'] = 'auto'	1	1
data_train['Fare'].plot.hist( 4)	1	1
data_test.drop(['Age', 'Fare', 'Name_length', 'FamilySize'], axis=1, inplace=True)	1	1
X_test[0]	1	1
perf.append(getMetrics(y_test, y_pred, 'Multinomial Naive Bayes'))	1	1
params['max_depth'] = 3	1	1
df_comb.drop('Cabin', axis=1, inplace=True)	1	1
training_data['Age'][np.isnan(training_data['Age'])] = rand_tr_age	1	1
test['Age'] = test.Age.astype(int)	1	1
full_set['Title'] = full_set['Title'].replace('Mlle','Miss')	1	1
data2_final_predicted_data.head()	1	1
combined_data['Title'] = combined_data['Name'].apply(lambda x: x.split(',')[1].split('.')[0])	1	1
df_train_all_num.drop(['Survived', 'PassengerId', 'Name', 'Ticket'], axis=1)	1	1
test3['Age_80.0'] = 0	1	1
victims.apply(lambda x: -1*x).plot.bar(ax = ax1, hatch = 'x')	1	1
"df.drop(""target"", axis=1)"	1	1
df_train['FamilySize']=df_train['SibSp'] + df_train['Parch']+1	1	1
embarked_lab.transform(df_t.Embarked)	1	1
train[['Sex', 'Survived']].groupby('Sex').mean()	1	1
in ['Mr','Mrs','Miss','Dr','Capt','Col','Major','Ms','Master']:	1	1
data.groupby('Survived').fsize.value_counts()# shows that singles died more whereas 2-4 membered families had more survivors	1	1
data.loc[ (data['Age'] >11) & (data['Age']<=18),'Age'] = 1	1	1
input_arr['Embarked'].astype(str)	1	1
train_data[['Pclass', 'Sex', 'Age', 'Fare', 'SibSp', 'Parch']].as_matrix()	1	1
dataset.drop(['SibSp','Parch','Embarked','Cabin','Name','Ticket','PassengerId'],axis=1)	1	1
my_submission.to_csv('gender_submission.csv',index=False)	1	1
sex.append(0)	1	1
train['Title'] = train.Name.str.extract(' ([A-Za-z]+).', expand=False)	1	1
"titanic_train.loc[titanic_train[""Sex""] == ""female"", ""Sex""] = 1"	1	1
"data.query('Pclass == 2 and Sex == ""male""');       data5['Age'] = data5['Age'].fillna(29.5)"	1	1
titanic_df['MedF'] = titanic_df['Family'].map(lambda s: 1 if 3 <= s <= 4 else 0)	1	1
test_copy['first_class_female'] = first_class_female	1	1
df_train.loc[:,'Age':].as_matrix().astype('float')	1	1
dataset.loc[dataset['Survived'] == 1, 'Title'].value_counts().sort_index()	1	1
df['CabinCode'] = df['CabinCode'].map({'A': 1, 'B': 1, 'C': 1, 'D': 1, 'E':1, 'F':1, 'G': 1, 'T': 0, 'n' : 0}).astype(int)	1	1
"x_test['Title'] = x_test['Name'].map(lambda x: str(re.findall(""^.*[, ](.*)[.] *"", x)[0]))"	1	1
df.groupby('Pclass')['Survived'].value_counts().unstack()	1	1
"df.loc[df[""Age""] < 16, ""isChild""] = 1"	1	1
train['Age'] = train['Age'].fillna(int(np.mean(train['Age'])))	1	1
scores.append(tmpScore)	1	1
df_use.as_matrix()[:,2:]	1	1
encoder.transform(train_category)	1	1
pipelines.append(('ET', ExtraTreesClassifier()))	1	1
resultDf.div(resultDf.max(axis=0), axis=1)*100	1	1
df.Sex.astype('category', ordered=False).cat.codes	1	1
test.Age.fillna(combined_data.Age.mean(), inplace=True)	1	1
df_train.fillna(method='ffill')	1	1
result['Survived'] = clf.predict(testx)	1	1
LearnResults[1],	1	1
df['Embarked'] = df['Embarked'].map({'S': 0, 'Q': 1, 'C': 2, 'N': 3})	1	1
dataset['Title']   =   dataset['Name'].apply(get_title)	1	1
train[['Pclass', 'Survived']].groupby(['Pclass']).mean()	1	1
test[['Age']]=preprocessing.MinMaxScaler().fit_transform(test[['Age']])	1	1
Corr.loc[var[1],'Test Chi 2 - Independance'] = Cramer_Chi2(confusion_mat)[1]	1	1
test['Fare'].replace(0,test[test['Fare']>0]['Fare'].mode()[0],inplace=True)	1	1
perf.append(getMetrics(y_test, y_pred, 'K-Nearest Neighbors'))	1	1
combined_features['Fare']-=mean	1	1
nullCabins.describe()	1	1
full_data['Age'][np.isnan(full_data['Age'])] = age_null_random_list	1	1
df.groupby([t1,t2])[t2].count()	1	1
"test[""Age""][test['Title'] == row['Title']].isnull().sum()"	1	1
data['Title'] = data.Name.apply(lambda x: x.split(',')[1].strip().split('.')[0].strip())	1	1
df_clean['Title'] = df_clean['Title'].map(group_title)	1	1
X_train['Fare'] = X_train['Fare'].astype(int)	1	1
dset.drop(['Ticket', 'Surname', 'FamCode'], axis=1, inplace=True)	1	1
X.loc[:, self.attribute_order].values	1	1
train_data.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)	1	1
test_dataset.loc[(test_dataset['Age']>16) & (test_dataset['Age']<=32),'Age']=1	1	1
train.drop(train[drop_features], axis=1, inplace=True)	1	1
dataset['Age'][i] < 64:	1	1
tr['passenger'].fillna(0)	1	1
all_data['Sex']	1	1
"total.drop(labels = [""Cabin1""], axis = 1, inplace = True)"	1	1
df_train.drop('Cabin',axis =1, inplace=True)	1	1
test_df.loc[(train_df['Fare'] > 14.454) & (test_df['Fare'] <= 31), 'Fare']   = 2	1	1
test_df['FareBin_Code'] = data_df['FareBin_Code'][891:]	1	1
df['Title'] = df['Title'].replace(['Capt', 'Col', 'Major', 'Rev', 'Jonkheer', 'Don','Sir'], 'HighM')	1	1
data_age.shape	1	1
test2.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
"plt.hist(train_data[""Age""].dropna(), bins=np.arange(0, 85, 5))"	1	1
ax[2].set_title('Variation in Model Build Time w.r.t to Inverse Regularization parameter C for different Solvers')	1	1
test_data.set_value(index,'AgeRange','30-45')	1	1
all_data.drop(['Name', 'SibSp', 'Parch', 'Ticket'],axis=1,inplace=True)	1	1
test_df['top_cabin'] = test_df['top_cabin'].map({'A': 1, 'B': 1, 'C': 1})	1	1
"train_data[""Sex""]= train_data[""Sex""].map({""male"": 1, ""female"": 2})"	1	1
df['Parch'].value_counts().plot(kind='bar')	1	1
X.min()	1	1
titanic_test.loc[titanic_test['Sex'] == 'female','Sex'] = 1	1	1
combined.set_value(combined.Embarked.isnull(), 'Embarked', 'C')	1	1
"output.to_csv(""../input/output.csv"", index=False)"	1	1
training_df1.loc[:, training_df1.columns != 'Survived']	1	1
"data[""TicketClean""].median()"	1	1
df.kurt()	1	1
"X_train[""Title""] = train_data[""Title""]"	1	1
data.loc[(data.Age.isnull())&(data.Title==1)&(data.Pclass==2), 'Age']=31	1	1
full['Title'] =  full['Name'].str.extract(pat,expand=True)[0]	1	1
"train_data.loc[(train_data[""Fare""] >= 40) & (train_data[""Fare""] < 100), ""FareBetween40And100""] = 1"	1	1
all_data.loc[ (all_data.Age.isnull()) & (all_data.Sex == i) & (all_data.Pclass == j+1),'Age'] = guess_ages[i,j]	1	1
train6['Age'] = train6['Age'].fillna(train6['Age'].median())	1	1
titanic_df_test['Alone'].loc[titanic_df_test['Alone'] == 0] = 'Without Family'	1	1
plt.hist(df12.Age, alpha=.3)	1	1
whole.drop(['Survived'],axis=1).iloc[891:]	1	1
test['Name'].transform(extractor)	1	1
"test_data[""Name""]"	1	1
"test.loc[(test[""Age""] >= -0.001) & (test[""Age""] < 15),""Age""] = 0"	1	1
X_final_test['Name_title']= X_final_test['Name'].apply(lambda x: x.split(',')[1])	1	1
dataset.drop(['index'],axis=1)	1	1
test['Alone'].loc[test['FamilySize'] > 1]=0;	1	1
df_test.drop(['PassengerId','Sex','Embarked','Name','Ticket', 'Cabin', 'Age', 'Fare'],axis=1,inplace=True)	1	1
"data_3[""Age""].fillna(value=14.181209).head(10)"	1	1
"related_people.loc[related_people[""PassengerId""]==530,""RGroup""]=""Hocking_M"""	1	1
test['Ticket_length'] = test['Ticket'].apply(lambda x: len(x))	1	1
df['Title'] = df['Title'].replace(['Capt','Rev'], 'Worker')	1	1
df_train.pop('PassengerId')	1	1
"dataset[""PREMAX""][:'2016'].plot(figsize=(16,4),legend=True)"	1	1
"train[""Sex""] = train[""Sex""].astype(int)"	1	1
abc.append(metrics.accuracy_score(prediction,test_Y))	1	1
train_set['Cabin'].value_counts()	1	1
train['Survived'].copy() # We extract the target vector	1	1
"total[""Cabin1""] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in total['Cabin'] ])"	1	1
df.loc[master_title & unknow,'Age'] = df[master_title]['Age'].mean()	1	1
splittest['Survived']	1	1
train.drop(columns=['index'])	1	1
data['Title'] = data['Title'].replace(['Mlle', 'Lady', 'Ms'], 'Miss')	1	1
t[0] == '2':	1	1
X_train_features[['Fare', 'Age']] = scaler.fit_transform(X_train_features[['Fare', 'Age']])	1	1
"tr['Embarked'] = tr['Embarked'].map({""S"" : 1, ""C"" : 2, ""Q"" : 3}).astype(float)"	1	1
data.loc[ data['Fare'] > 26, 'SortFare_3'] = 2	1	1
df_train[['isKid','Survived']].groupby('isKid').mean()	1	1
full_dataset['FamilySize']=full_dataset['SibSp']+full_dataset['Parch']+1	1	1
output_data.head()	1	1
dataset['Female'] = 0	1	1
total['Family_Survival'] = default_survival_rate	1	1
combined['Age'].mean()	1	1
train['Class'] = train.Pclass.map({1:'First Class', 2:'Second Class', 3:'Third Class'})	1	1
"t_df.pivot_table('Survived', index='Alone', columns='Pclass', margins= True, margins_name=""%survival"")"	1	1
"combined_df[""Age""][np.isnan(combined_df[""Age""])] = rand_age_c"	1	1
X_train['Age'] = X_train['Age'].values.round()	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Rev', 'Rare')	1	1
df_test['Initial'] = df_test['Initial'].replace(['Mr', 'Miss', 'Mrs', 'Master', 'Other'],[1, 2, 3, 4, 5]).astype(int)	1	1
raw_test['Title'] = raw_test['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
AverageFamilies.Survived.mean() # 61% Survival vs. Population 38% Survival	1	1
data['Embarked'] = encoder.fit_transform(data['Embarked'])	1	1
age_train.drop(['Cabin', 'Embarked', 'Name', 'Cabin Area', 'Title','PassengerId', 'Ticket'], axis=1)	1	1
"Dependents.div(Dependents.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True)"	1	1
train_test.loc['test']	1	1
le.transform(dataframe[label])	1	1
train_isnull.style.background_gradient(cmap=cm)	1	1
train['Fare_cat'] = 0	1	1
c.drop(d)	1	1
train[['Cabin_Cat', 'Survived']].groupby(['Cabin_Cat'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
train_data['Child'] = train_data.apply(lambda row: 1 if row['Age'] < 15 else 0, axis=1)	1	1
train_data['target_name'] = train_data['Survived'].map({0: 'Not Survived', 1: 'Survived'})	1	1
dft['PassengerId'].values	1	1
train_df['Embarked'].dropna().mode().values	1	1
train_data['Cabin'] = StandardScaler().fit_transform(train_data['Cabin'].values.reshape(-1, 1))	1	1
dataset['Embarked']=dataset.Embarked.fillna(Fre_embarked_package[0])	1	1
x_test.drop(['Pclass','Sex','Age_categories', 'Age', 'SibSp', 'Parch', 'Embarked'],axis=1)	1	1
neural_record['Single_Net'][10].predict(test.drop('PassengerId', axis=1))	1	1
"test[""IsAlone""] = test[""FamSize""].apply(lambda x: 0 if x==1 else 1)"	1	1
"i.loc[i[""Title""] == ""Lady."",[""Title""]] = ""Mrs."""	1	1
Corr.loc[var[1],'Dice Coefficient'] = distance.dice(QF_OH_Target['Survived'].astype(int), QF_OH_Target[var[1]].astype(int))	1	1
dataset.loc[:, 'Embarked'].value_counts().sort_index()	1	1
df['siblings_2'] = (df.sib_sp == 2).apply(int)	1	1
testdf['Age'].fillna(df['Age'].median(), inplace = True)	1	1
all_data['Title'] = ''	1	1
data_df.loc[(data_df['DataType'] == 0) & (data_df['SurvivedTour'] > -1)]['SurvivedTour']	1	1
"data2.ix[order].plot(kind=""bar"",color = chart2_color,stacked=""True"")"	1	1
train.dtypes != 'O'	1	1
output['PassengerId'] = df_test['PassengerId']	1	1
test_df['Age'].fillna(test_df['Title_num'].map(Median_age),inplace=True)	1	1
dataset.loc[(dataset['Fare'] > 10) & (dataset['Fare'] <= 20), 'Fare'] = 1	1	1
df_train2.iloc[:,-1]	1	1
X.fillna(-99999)	1	1
"X[""Embarked""] = X[""Embarked""].fillna(""S"")"	1	1
model.add(Dense(16, activation='softplus'))	1	1
Xtest['Parch'][Xtest['Parch']>0]=1	1	1
traindf['Fare'].describe().reset_index()	1	1
av_age.mean()	1	1
test['Title']=test['Title'].replace(['Dr','Rev','Col','Major','Lady','Capt','Sir','Jonkheer','Countess','Don'],'Rare',regex=True)	1	1
"titanic[""Age""] = titanic[""Age""].fillna(titanic[""Age""].median()) #Fillna fills columns with N/A numbers. Here we use the median values"	1	1
np.dot(x, self.w_[1:]) + self.w_[0]	1	1
titanic_train_dataset[['CategoricalAge', 'Survived']].groupby(['CategoricalAge'], as_index=False).mean()	1	1
row['Age'] <= 15 and row['Embarked'] == 'S' and row['Fare'] <= 23:	1	1
trainSet.iloc[:,11:12]	1	1
df1['Embarked_Numerical'] = df1['Embarked'].apply(lambda x: dict_embarked[x] if p.notnull(x) else x)	1	1
footballers['Unit'] == 'M',	1	1
pd.isnull(test_data).sum().sum() > 0:	1	1
train_df.describe('Age'[.1, .2, .3, .4, .5, .6, .7, .8, .9, .99])	1	1
original_train_data['TicketType']=original_train_data['Ticket'].apply(lambda x: getTicketType(x,True))	1	1
df['Fare'] = pd.qcut(df['Fare'], 4, labels=[0, 1, 2, 3])	1	1
"submit.to_csv(""submit_connect.csv"",index=False)''';"	1	1
train['tmpCabin'] = train.Cabin.fillna('U').str.extract('(.)', expand=False)	1	1
combined['Name_Title'] = combined['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	1	1
big.groupby(['Ticket']).groups	1	1
df['embarked_T'] = df.apply(lambda x: 0 if str(x['Embarked']) == 'S' else x['embarked_T'], axis=1)	1	1
submit['Survived'] = kpred	1	1
df['isInfant'] = 0	1	1
"train_data.drop(""Sex"", axis=1, inplace=True)"	1	1
test['Age']=test['Age'].fillna(test['Age'].median())	1	1
data_file.loc[data_file['Cabin'].notnull(), 'Cabin'] = 1	1	1
data_copy.loc[:,'Embarked']=data_copy['Embarked'].fillna('S')# replace Embarked with majority 'S'	1	1
tr['Deck'] =tr['Deck'].replace('C',3)	1	1
model.add(Dense(1, input_dim=10))	1	1
ax1.hist(train_data[train_data['Survived']==1].Age, bins = 25, label = 'Survive', alpha = .50, edgecolor = 'black',color = 'lightgreen')	1	1
"traindat.drop(""PassengerId"", axis=1, inplace=True)#No use for this"	1	1
Xtest.loc[(Xtest['Fare'].isnull()), 'Fare'] = combined.loc[(Xtest.loc[(Xtest['Fare'].isnull()), 'Pclass']), 'Fare'].mean()	1	1
train['Survived'].value_counts().index.values,	1	1
dataset_df['NewAge'][NullAge_idx] = AgeBins[NullAgeBins_idx].ravel()	1	1
np.where((rounded_preds==0) & (rounded_preds!=Y_valid))[0]	1	1
combined_df['age_scaled'] = combined_df.Age - combined_df.Age.min()	1	1
combined['Title'] = combined['Title'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dona', 'Dr', 'Jonkheer', 'Lady', 'Major', 'Rev', 'Sir'], 'Rare')	1	1
df['famsizbutemr'] = df['famsize']-df['famwithmr']-df['famtestdatcnt']	1	1
titanic.loc[:,cols]	1	1
df_train.drop(drop_cols, axis=1, inplace=True)	1	1
"a.loc[(a[""Title""] == ""Dr"") & (a.Age.isnull()), [""Age""]] = a[""Age""].mean()"	1	1
"X.describe() # sumarizing variables - note some outliers in the ""fare"" column"	1	1
"testing[""Family_Size""] = testing[""SibSp""] + testing[""Parch""] + 1"	1	1
models['SVC_lin'] = SVC(probability=True, kernel='linear', random_state=0)	1	1
result_scores.append(scores.mean())	1	1
full_set['Fare'] = full_set['Fare'].apply(fare_bin).astype(int)	1	1
final_test_data.fillna(final_test_data.mean())	1	1
bin_embarked.transform(raw_test['Embarked'])	1	1
rawdata.ix[(rawdata.Age >= 18) & (rawdata.Age < 25), 'AgeCategory'] = 2	1	1
titanic_test['Age'] = titanic_test['Age'].astype(int)	1	1
"titanic_df.groupby('Pclass')['Survived'].sum().plot(kind=""bar"" ,figsize = (10,10), grid = 10 ,logy = 0, title = ""No of survivors from each Pclass "").set_ylabel(""Frequency"")"	1	1
train_data['Parch'].mean()	1	1
"df.loc[pd.notnull(df[""Cabin""]) & df[""Cabin""].str[-1].isin([""1"", ""3"", ""5"", ""7"", ""9""]),""CabinSide""] = ""Starboard"""	1	1
train_df.isnull().sum(), print('------'),test_df.isnull().sum()	1	1
xText.Age.fillna(xText.Age.mean(), inplace=True)	1	1
age_missing_data.iterrows():	1	1
data.loc[(data['Age'] >16 ) & (data['Age'] <= 32), 'Age']=1	1	1
results.boxplot()	1	1
df_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
titanic_test.copy()	1	1
train_df['Fare'] = train_df.groupby(['Pclass'])['Fare'].transform(lambda x: x.fillna(x.mean()))	1	1
df.to_csv()	1	1
train7['Sex'] = le.fit_transform(train7['Sex'])	1	1
data_train.loc[data_train['Survived']==1,'Sex'].value_counts()	1	1
df.loc[ (df.Fare <= 7.91),                 'FareBand'] = 0	1	1
data1['FareBin'] = pd.qcut(data1['Fare'], 4)	1	1
df.loc[(df['Age']>51)&(df['Age']<=60),'Age_band']=5	1	1
new_df.Embarked.fillna('S', inplace=True)	1	1
Xtest['SibSp'][Xtest['SibSp']>0]=1	1	1
dataset.loc[(dataset.Age.isnull())&(train.Initial=='Other'),'Age']=46	1	1
np.mean(sgdc_scores)	1	1
classifier_results['RFC_best'] = (rfc_accuracy, RFC_best)	1	1
accuracies.std()  # 83% accuracy from this method	1	1
combine.drop(['Ticket', 'Cabin'], axis=1)	1	1
dataset.Embarked.fillna('S', inplace=True)	1	1
ax2[1].set_xlabel('Age')	1	1
df['Name'] = df['Name'].cat.codes + 1	1	1
df.loc[df['Embarked']=='Q','Embarked'] = 2	1	1
kaggle_sub['PassengerId'],	1	1
shape[0]/float(df_train.Sex.shape[0]) ,	1	1
jack_df.drop('Survived', axis=1)	1	1
data_df['Title']=data_df['Title'].fillna(median_value)	1	1
"y_test[""Fare""]=y_test[""Fare""].fillna(mean_Fare)"	1	1
"train[""Survived""][train[""Sex""]=='female'][train[""Age""]>=18][train[""Pclass""]==3].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
test_df.drop(['SibSp', 'Parch', 'FamilySize'], axis = 1)	1	1
"test_data[""FsizeD""] = ""NaN"""	1	1
total['Single'] = total['Fsize'].map(lambda s: 1 if s == 1 else 0)	1	1
test_df['Age'].isnull().sum()  # number of null age values	1	1
sns.boxplot(df_train.fare);	1	1
train['tmpCabin'] = train.tmpCabin.apply(lambda x: int(x.translate(x.maketrans('ABCDEFGTU', '123456780'))))	1	1
train.loc[(train['Age'] > 18) & (train['Age'] <= 24), 'Age'] = 3, #Student	1	1
df1[['male', 'female']].plot(kind='bar', stacked=True)	1	1
"submission[""Survived""] = best_params_model.predict(Xsubmission)"	1	1
split_view.str[0]	1	1
traind['Survived'].value_counts(normalize=True)	1	1
test_mod.Fare.fillna(fare_med_test, inplace = True)	1	1
"dataset[""Fare""] = dataset[""Fare""].apply(lambda x: np.log(x) if x>0 else 0)"	1	1
train_pclass.Pclass_2.isnull().sum() == 0	1	1
model.add(Dense(64,input_dim=input_size, kernel_initializer=k_init))	1	1
"titanic_train[""Embarked""].unique()"	1	1
train_test['Embarked'] = le.fit_transform(train_test['Embarked'].values)	1	1
test_df.join(pclass_dummies_titanic)	1	1
frame.loc[frame.Age <= 16 , 'Age'] = 0	1	1
df_test[['PassengerId', 'Survived']].to_csv('random_forest_feat_eng.csv', index=False)	1	1
train.loc[(train['Pclass'] == 3) & (train['hasCabin1'] == 0), 'class_hascabin'] = 6 #no cabin Pclass 3	1	1
"test[""travel_company""] = 0"	1	1
full_df.groupby('title').survived.mean().to_frame()	1	1
test_df['EmbarkedFill'] = test_df['Embarked']	1	1
fulldata.drop(labels=['PassengerId', 'Name', 'Cabin','Ticket'], axis=1, inplace=True)	1	1
test.replace({'Sex':{'male':0,'female':1}})	1	1
df['cabin_was_recorded'] = ~df['Cabin'].isna()	1	1
predicted_df.to_csv(out_file, index_label=index_label)	1	1
"dftrain[""Age""] = age_slice"	1	1
train_raw['Age'] = train_raw.Age.fillna(train_raw.Age.mean())	1	1
testData.drop(['Name','Ticket','Cabin','Age','Fare'],inplace=True,axis=1)	1	1
df_submit['Status'] = df_submit['Status'].str.replace(r'Rarea', 'Rare')	1	1
data_frame.update(data_frame.Embarked.apply(lambda x: ord(x)));	1	1
np.mean(classifier.predict(X_train)==y_train)*100	1	1
test[['Male','Female']] = pd.get_dummies(test['Sex'])	1	1
"train_df.drop(""Survived"", axis=1).copy()"	1	1
mapped_fares.corr(train['Pclass'])	1	1
df['Young'] = df['Age'].map(lambda s: 1 if  10 < s <= 30   else 0)	1	1
train_data.drop(cols, axis=1)	1	1
"train.head()[""Cabin""].str[0]"	1	1
"data_train[""Age""] = data_train[""Age""].fillna(data_train[""Age""].median())"	1	1
otherData['Age'].median(axis=0)	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Ms"",""Miss"")"	1	1
"combined.loc[cp.index, ""Age""]"	1	1
data_df['Title'] = data_df['Title'].replace(rare_titles, 'Rare')	1	1
data.select_dtypes(include=[np.object])	1	1
"test[""Age""][np.isnan(test[""Age""])] = random_2"	1	1
"df_copy.loc[:,""Age""]= df_copy.Age.astype(np.float32)"	1	1
"df['Family'] =  df[""Parch""] + df[""SibSp""]"	1	1
test_df.drop(['name'], axis=1)	1	1
data.rename(columns = {'Survived_M':'Test'}, inplace = True)	1	1
"new_df[""Age_Fare""] = df[""Age""] * df[""Fare""]"	1	1
test_df['Title'] = pd.Categorical(test_df['Title'])	1	1
data.loc[(data.Room > 0) & (data.Room <= 20), 'RoomBand'] = 1	1	1
"train[""Name""].replace(to_replace='(.*, )|(\\..*)', value='', inplace=True, regex=True)"	1	1
test.drop(columns=['Embarked']).join(lb_embarked)	1	1
titanicAll['Title'] = titanicAll['Name'].map(titleExtractionByName)	1	1
np.dot(np.transpose(features), (prediction_values-values))	1	1
train['hasCabin2'] = train['hasCabin2'].fillna(1)	1	1
"AgeTypeTest.append(""3"")"	1	1
train.loc[((train['Mrs']==1) | (train['Ms']==1) | (train['Miss']==1) | (train['Lady']==1) | (train['Countess']==1)),'FemaleTitle'] = 1	1	1
train['Age_bin']=pd.cut(train['Age'],[0,14,31,45,60,90],right=False)	1	1
df_loss.append(loss)	1	1
test_data['Suffix'] = test_data['Suffix'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Outlier')	1	1
df['Age'].notnull() & (df['Parch'] > 0)	1	1
train.drop('PassengerId', 1)	1	1
test.drop(['Pclass'],axis=1,inplace=True)	1	1
train_data.groupby([column1,column2])['PassengerId'].count().unstack()	1	1
in ['C','Q','S']:	1	1
submit.to_csv('Titanic_Probabilities_submission.csv', index = False)	1	1
ax[0].set_title('Number of passenger by Pclass')	1	1
train_df.loc[train_df['PassengerId'].isin(raw_train_df[raw_train_df['Age'].isnull()]['PassengerId'])]	1	1
training_set.groupby('Embarked').size().plot(kind='bar')	1	1
df_all['PassengerId'].iloc[ntrain:].values	1	1
df.loc[:, cols_of_interest].sort_values(by=sort_by, ascending=sort_ascending).head(n_rows)	1	1
TEST_DATA.shape[0]	1	1
train_df['Title'] = train_df['Title'].replace(['Lady', 'Countess','Capt', 'Col',                                             'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
res_acc.append(cross_val_score(svcClass,X,y,scoring='accuracy',cv=10).mean()*100)	1	1
dataset.loc[(dataset['Age'] >= 40) & (dataset['Age'] < 50), 'Age'] = 4	1	1
train['Age'] = train['Age'].fillna(-1.0)	1	1
data_train['Age_scaled'] = scaler.fit_transform(data_train['Age'].values.reshape(-1, 1), age_scale_param)	1	1
"data_df.loc[(data_df[""Age""] > 28) & (data_df[""Age""] <= 35),  'Age_Grouped'] = 2"	1	1
drop_train.loc[drop_train.Pclass == 2,'Fare'].mean()	1	1
"data[""Name""] = data[""Name""].str.replace(""Master"",""Mr"")"	1	1
data.drop(['SibSp','Parch'],axis = 1, inplace = True)	1	1
sns.boxplot(x='Pclass', y='Age', data=df)	1	1
"df_train.drop(""PassengerId"",axis=1).corr()"	1	1
df.loc[df['FamilySize']==1,'IsAlone']=1	1	1
axes[1].set_title('Survival Rate vs Family Size')	1	1
"df['Has_Cabin'] = df[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
all['Fsize'].map(lambda x: 1 if x >1 else 0)	1	1
different_prediction.append(data1row['PassengerId'])	1	1
"df_test[""Age""].describe()"	1	1
test1.drop(columns=['Survived'], axis=1, inplace=False)	1	1
history_loss_train.append(temp_loss)	1	1
submit[['PassengerId','Survived']]	1	1
"train.drop(labels=[""Survived""], axis=1)"	1	1
"g.axes.set_title('Extra Trees feature importance', fontsize=20,color=""r"")"	1	1
melb_data.dropna(axis=0)	1	1
feature_test.append(temp)	1	1
training_set.drop('Parch', axis=1, inplace=True)	1	1
label_encoder_sex_tr.transform(titanic_test[:, 1])	1	1
df['Sex'] = df['Sex'].apply(lambda x : 1 if x == 'male' else 0)	1	1
df_train['Sex'] = df_train['Sex'].map({'female':0, 'male':1}).astype(int)	1	1
pd.isnull(train2['Title'][x]):	1	1
test['title'] = encoder.fit_transform(test['title'])	1	1
X.loc[train_index]	1	1
cabin_level_test.apply(first_letter)	1	1
train.iloc[:, train.columns != 'Survived'].values	1	1
summary_df.set_index('varname', inplace=True)	1	1
train_data.loc[train_data.Survived==1, column].dropna(),	1	1
titanic_train_final['Survived']	1	1
"dataset.loc[(dataset.Age.isnull()) & (dataset.Title == ""Miss""), ""Age""] = 22"	1	1
test['Fare_cat']=0	1	1
last_names.rename('LastName')	1	1
train.loc[(train['Age'].isna()) & (train['Sex']=='male')]	1	1
map_table_age_df.iloc[5:10, 0] = 2	1	1
train_data_features['SiblingsSpouses'] = train_data_features['SiblingsSpouses'].apply(lambda x: 1 if x > 0 else 0)	1	1
"submission_file.astype({""PassengerId"": str})"	1	1
train_data['Age'][np.isnan(train_data['Age'])] = random_1	1	1
train.drop(['Survived','PassengerId', 'Name'], axis=1) # Drop some columns which are not useful	1	1
dataset.loc[ dataset['FamilySize'] == 1, 'FamilyClass'] = 0	1	1
accuracy_df.loc[k, 'Param2'] = clf.best_params_['max_depth']	1	1
data.drop(['Age'], axis=1, inplace=True)	1	1
df[['male','Pclass','Age','Fsize']]	1	1
died_data['Survived'].loc[died_data['Pclass']==2]	1	1
data_set['Title'] = data_set['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
tt['FareGroup'] = pd.qcut(tt['Fare'], 4) # Category Fare by quantile groups	1	1
full.isnull().sum()  # sum of null rows fo each column	1	1
Xt['Sex'].dropna(axis=0, inplace=True)	1	1
train_df.Age.fillna(train_df.Age.dropna().max(),inplace =True)	1	1
Train_data.loc[Train_data['Embarked'] == 'C','Embarked'] = 1	1	1
train_copy.loc[(train_copy['Age'] > 40) & (train_copy['Age'] <= 50), 'Age_Category'] = 4	1	1
train['Ticket_s_g'] = y_pred;	1	1
Test.drop('Parch',axis=1)	1	1
"train[[""Sex"", ""Age"", ""Pclass"", ""Fare"", ""Cabin"", ""famSize""]].values"	1	1
df_titanic['Embarked'].fillna('S', inplace=True)	1	1
titanic.drop(['PassengerId','Name', 'Sex', 'Age', 'SibSp','Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked',              'AgeBins','Deck', 'FareBins', ],inplace=True,axis=1)	1	1
test_dataset['Title'] = test_dataset['Title'].replace('Mlle','Miss')	1	1
titanic_ndf['Deck'] = titanic_ndf['Cabin'].apply(Deck)	1	1
row['Age'] <= 17:	1	1
X_test_all.fillna(X_test_all.mean(), inplace=True)	1	1
dataset.loc[ (dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare' ] = 1	1	1
"df_train[""FSize""] = df_train[""Parch""] + df_train[""SibSp""] + 1"	1	1
"train.drop([""SibSp"",""Parch""],axis=1)"	1	1
df['embarked_T'] = df.apply(lambda x: 0 if True else x['embarked_T'], axis=1)	1	1
x['Cabin'].map(cabins)	1	1
dataframe['Survived']	1	1
"test['Child'] = test[""Age""].apply(lambda i: 1 if i <= 17 and i > 6 else 0)"	1	1
rf_feat_red.transform(rf_red_test)	1	1
acc.append(cv_result.mean())	1	1
Fare_corr.reindex(Fare_corr.Fare.abs().sort_values(inplace=False, ascending=False).index)	1	1
"data_copy.loc[data_copy[""Embarked""] == ""Q"", ""Embarked""] = 2"	1	1
coeff_df.T	1	1
"curated_data[""FamilySize""] = train[""SibSp""] + train[""Parch""] + 1"	1	1
data_raw.sample(5)	1	1
name['Name'] = full[ 'Name' ].map( lambda name: name.split( ',' )[0].strip() )	1	1
comb['TNlen'] = comb['TNumeric'].apply(lambda x : len(str(x)))	1	1
"sns.boxplot(x=""Survived"", y=""PassengerId"", data=train_df)"	1	1
"train_set[""Cabin""].fillna(train_set.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	1	1
data_pruned['Alone'] = isalone	1	1
df_emb['Fare'].head()	1	1
train.loc[[61,829], 'Embarked']='C'	1	1
train_df['Old_Female'] = (train_df['Age']>50)&(train_df['Sex']=='female')	1	1
titanic_df.drop(['C','Embarked','MasterMiss','Parch','ParchBinary'], axis=1,inplace=True)	1	1
"test_base.loc[:,[""Pclass"",""Name"",""Sex"",""Age"",""SibSp"",""Parch""]].copy()"	1	1
df['Salutation'].replace(['Dr', 'Rev', 'Major', 'Col','Capt', 'Sir', 'Don', 'Jonkheer'], 'Rescuer', inplace = True)	1	1
df.loc[index,'SIBSP_4_5']=1	1	1
train_dataset['Cabin'].isnull().sum()	1	1
trainONSWAR.shape[0]	1	1
"data_df.loc[(data_df[""Age""] > 16) & (data_df[""Age""] <= 28),  'Age_Grouped'] = 1"	1	1
data.iloc[0,3:6]	1	1
"train_df[""FareBin""] = pd.cut(train_df['Fare'],farepercentile, labels=[""Low"",""Mid"",""High""])"	1	1
train_x.dropna()	1	1
test.to_csv( 'svm_sigmo_all_feat.csv' , index = False )	1	1
Modified_data.drop(['PassengerId','SibSp'],axis=1,inplace=True)	1	1
original_test.copy(deep=True)	1	1
"test[""Fare""] = test[""Fare""].fillna(test[""Fare""].mean())"	1	1
train_data['Name'].head()	1	1
test_df['Age'] = data['Age'][891:]	1	1
np.multiply(X_prob1[:,0],X_prob1[:,1],X_prob1[:,2])	1	1
dataset['Parch'] = dataset['Parch'] .fillna(0)	1	1
test_data['Pclass'][np.isnan(test_data['Pclass'])] = int(mean_Pclass) + 1	1	1
"related_people.loc[related_people[""PassengerId""]==443,""RGroup""]=""347076"""	1	1
class_fare.loc[1,:] = df[df['Pclass'] == 1]['Fare_per_ticket_member'].describe()	1	1
titanic_train.drop(['PassengerId','Ticket'],1)	1	1
x_train.dropna(axis=0,how='any')	1	1
df.loc[(df['Alone'] == 1) & (df['Sex'] == 'male'), 'Alone_male'] = 1	1	1
train.groupby(by = 'Embarked')['Survived'].mean()	1	1
df_ticket['TicketGroup_include_perishing_women'] = df_ticket['TicketGroup_include_perishing_women'].astype(int)	1	1
categoric_data_encoded.loc[829]	1	1
dat['MedF'] = dat['Fsize'].map(lambda s: 1 if 3 <= s <= 4 else 0)	1	1
"age1_t_df[""PassengerId""].values"	1	1
data_train['Age'].fillna(data_train['Age'].dropna().median(), inplace=True)	1	1
dataset.loc[(dataset['Age'] > 10) & (dataset['Age'] <= 20), 'Age'] = 1	1	1
data_test_all['Title'] = data_test_all['Title'].replace(['Capt','Col','Major'],'Army')	1	1
tumveri.reset_index(inplace=True)	1	1
test_1.isnull().sum()	1	1
rta.append(int(round(t[0])))	1	1
df_train['Sex']	1	1
csv_final_test_OneHot.fillna(0)	1	1
train_short[['Pclass','Fare','Age','Sex','Family','Embarked']]	1	1
test_age_train.drop('Age', axis=1)	1	1
train_ds['FamilySize']= train_ds['Parch'] + train_ds['SibSp'] + 1	1	1
train2[['Survived', 'Pclass', 'female', 'Age', 'Family', 'Embarked']]	1	1
train_X['Age'] = scaler.fit_transform(train_X['Age'].values.reshape(-1, 1))	1	1
master_df.loc[master_df['fare_per_person'].isna(), 'fare_per_person'] =     med / master_df.loc[master_df['fare_per_person'].isna(),'fam_size']	1	1
"combined.loc[pid,""cp_id""] != -1:"	1	1
submission.to_csv('rf.csv', index=False)	1	1
"tmp_train.groupby(""Cabin_I"")[""Survived""].mean()"	1	1
"test_data[""Fare""].std()"	1	1
full['Fare'] = full.Fare/ticket_size	1	1
test_df['Age'][np.isnan(test_df['Age'])] = age_null_random_list_test	1	1
lr_oof_cv_l1f1.astype(int),ada_oof_cv_l1f1.astype(int),	1	1
names.set_index(combined.index, inplace=True)	1	1
train[['Familysize','Survived']].groupby('Familysize',as_index=False).mean().sort_values('Survived',ascending=False)	1	1
"test[""Embarked""] = test[""Embarked""].fillna(""U"")"	1	1
data['Embarked'].unique():	1	1
dataset[['Pclass','Age']].groupby(by='Pclass').median()	1	1
data['Age'] = data[['Age', 'Pclass']].apply(fill_age, axis=1)	1	1
pclass_xt.div(pclass_xt.sum(1).astype(float), axis=0)	1	1
X.as_matrix(), y.values, epochs=EPOCHS, batch_size=BATCH_SIZE, verbose=0,	1	1
data_for_age.loc[(data.Age.notnull())]  # 年龄不缺失的数据	1	1
df.loc[(df.Sex == 1) & (df.Title == 'Dr'),'Title'] = 'Mrs'	1	1
"np.where(traindatSurv==0,""No"",""Yes"")"	1	1
full.loc[idx].Ticket	1	1
train['TicketfirstL'] = train['Ticket'].apply(lambda x: str(x)[0])	1	1
df.where(df['Survived'] > 0)	1	1
combined_df['Sex'].cat.categories = [0,1]	1	1
params['clf_svc'],	1	1
data.Age.interpolate(inplace=True)	1	1
combined.sample(10)	1	1
sub['PARCH'] = sub['PARCH'].astype('category')	1	1
train_set.describe(include=['O'])	1	1
train['Age'][sel_age_fin] < 4	1	1
train_df.info(),train_df.head()	1	1
train.astype(float).corr(), linewidth=0.1, vmax=1.0,	1	1
"test.loc[pd.notnull(test[""Cabin""]), ""Cabin""] = 1"	1	1
"train_df[[""survived"", ""pclass"", ""sex"", ""embarked"", ""family_size_category"", ""age_category"", ""fare_category"", ""title""]]"	1	1
titanic_submission.to_csv('rdmf_Titanic.csv', index=False)	1	1
full.loc[:891,['IsAlone','Survived']].groupby(['IsAlone'],as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
train['Cabin_Ord'] = train.apply(lambda x: getCabinOrd(x), axis=1)	1	1
"test_set[""Embarked""] = test_set[""Embarked""].apply(lambda x: replacement2.get(x))"	1	1
"test.loc[test[""PassengerId""] == 1044, ""Fare""] = full[(full[""Embarked""]=='S') & (full[""Pclass""]==3)].Fare.median()"	1	1
train_data['PARCH'] = pandas.to_numeric(train_data['PARCH'], errors='coerce')	1	1
"df[""Ticket_Range""] = extracted_tk_range"	1	1
"train_data[""Fare""].isnull().sum()"	1	1
plt.rcParams['font.family']='sans-serif'	1	1
normalized_data.drop(['Survived'] , axis=1)	1	1
df.drop(['SibSp','Parch','Sex','Name','Cabin','Embarked','Ticket'],axis=1)	1	1
dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median()) # Fill it with the Median	1	1
"pushoutmedian.to_csv(""pushout_median.csv"")"	1	1
train['AgeBin'] = pd.cut(train['Age'], bins, labels=group_names)	1	1
train[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
train[['Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_C', 'Embarked_S', 'HasCabin', 'IsAlone', 'Title_Master', 'Title_Miss', 'Title_Mr', 'Title_Mrs']]	1	1
s_ans.to_csv('ans.csv')	1	1
whole.set_value(1044,'Fare',meanfare)	1	1
train['Fare_num']=label.fit_transform(train['Fare_bin'])	1	1
traindf1.dropna(inplace=True)	1	1
df['Age_group'] = df['Age'].apply(age_group)	1	1
all_data.groupby(['Pclass', 'Sex'], as_index=False)['Age'].mean()	1	1
"train_df[""Ticket_cat""]=train_df['Ticket'].str.extract('([a-zA-z])',expand=False)"	1	1
data.surname_Moor.astype(np.uint8)	1	1
dataset_df['Embarked'] = dataset_df['Embarked'].fillna('S')	1	1
x.set_value(row.Index,'CP_Died',len(c[c.Survived==0]))	1	1
dataframe.drop(drop_cols, axis=1)	1	1
"data.groupby(""Pclass"").mean()['Fare']"	1	1
full['Ticket_Prefix'] = pd.Series(tickets)	1	1
df['Embarked'] = df['Embarked'].fillna('N')	1	1
features_train.head()	1	1
data1.loc[data1.Sex == 'male', 'Sex'] = 1;	1	1
titles.apply(lambda x: 'Misc' if title_names.loc[x] == True else x)	1	1
train_df['Embarked'] = train_df['Embarked'].fillna(freq_port) #Most Frequent Port S	1	1
plt.boxplot(data_to_plot)	1	1
df['Pred_survived'] = y_pred	1	1
submission.to_csv('prediction.csv', index=False)	1	1
test_label.drop(labels=['Ticket_Cat'], axis=1, inplace=True)	1	1
"test[""Embarked""] = test.Embarked.fillna(4)"	1	1
labelEncoder.transform(data[column])	1	1
test['Deck'] = test['Deck'].astype(int)	1	1
"test[""Embarked""] = le.fit_transform(test[""Embarked""].fillna('0'))"	1	1
"df.drop([""PassengerId""], axis=1, inplace=True)"	1	1
test_df['Male']=test_df[['Sex']].apply(get_male, axis=1)	1	1
"titanic['Title'] = titanic['Name'].apply(lambda x :(x.split("", "")[1]).split(""."")[0] )"	1	1
not_survivors['Sex'].value_counts().sort_index()	1	1
"titanic_test_data[""Title""] = titles"	1	1
test.at[i, 'Age'] > j:	1	1
"test[""Title""] = pd.Series(dataset_title)"	1	1
"models.append(( ""LR"" , LogisticRegression()))"	1	1
train_y.iloc[trn_idx]	1	1
train[['Sex','Survived']].groupby(['Sex']).mean()	1	1
test['Prefix'] = test[['Prefix','Pclass']].apply(prefix_enumerator,axis=1)	1	1
train['FamilySize']	1	1
train_df['Embarked'] = train_df['Embarked'].fillna(1)	1	1
train_data[['FamSize','Survived']].groupby('FamSize', as_index=False).mean()	1	1
test_df.loc[test_df['Name'] == NameTestListIndex[x], 'Name'] = NameTestListIndex[x]	1	1
dfcor.reset_index(level=0, inplace=True)	1	1
"dataset['EmbarkedC'] = dataset[""Embarked""].apply(lambda x: 0 if x != 'C' else 1)"	1	1
df['Title'] = df['Title'].replace(['Sir'],                                'Mr')	1	1
train.groupby([train.Cabin.str[:1],'Survived']).PassengerId.count().unstack()	1	1
test_data['AgeBucket'] = test_data['Age'] // 15 * 15	1	1
train.drop(['Ticket','Cabin'], axis=1)	1	1
"train[""Alone""] = 0"	1	1
df['TotalParty'] = df['SibSp'] + df['Parch']	1	1
"train[""Embarked""] = train[""Embarked""].fillna(""N"")"	1	1
titanic_train['Embarked'] = titanic_train['Embarked'].fillna('S')	1	1
master_df['fare_per_person'] = master_df['Fare'] / master_df['fam_size']	1	1
"df_train[""tot_family_size""] = df_train[""Parch""]+df_train[""SibSp""]"	1	1
"vtrain[""Name""].apply(isSignificant)"	1	1
train_data.set_value(index,'AgeRange','0-15')	1	1
df['Survived'][df['Sex'] == 'female'][df['Pclass'] == 3].value_counts()	1	1
test.convert_objects(convert_numeric=True)	1	1
roc_curve_data.items():	1	1
df['GOOD'] = (df['A'] + df['B']*df['C'] + df['A']*df['D']) == df['CLASS']	1	1
titanic_test.groupby('Title').count().PassengerId	1	1
"train_data.drop([""Survived"", ""Name"", ""PassengerId"", ""Cabin"", ""Ticket""], axis = 1)"	1	1
combined.drop(['Name'],1)	1	1
df['percentage'] = round(df['survived']/df['total']*100,2)	1	1
data.loc[data.Family_Size==0,'Alone']=1	1	1
test.dropna(how='any')	1	1
k.append('Capt.')	1	1
pipelines.append(('ScaledMLPC', Pipeline([('Scaler', StandardScaler()),('MLPC', MLPClassifier(alpha=1))])))	1	1
"df[""Fare""] = StandardScaler().fit_transform(df[""Fare""].values.reshape(-1,1))"	1	1
dataset.set_value(rowIndex, 'PerPersonFare', 13)	1	1
test['A1'] = np.array(test['CategoricalAge'] == 1).astype(np.int32)	1	1
potential_Roses.append(row)	1	1
"a[""CatAge""] = pd.cut(a[""Age""], age_bins, labels = age_brackets)"	1	1
train_set['Age'] = train_set['Age'].fillna(train_set['Age'].median())	1	1
train_data['Age'] = train_data['Age'].fillna(np.mean(train_data.Age))	1	1
"titanic_train_dataset[""CabinFloorScore""].loc[titanic_train_dataset['CabinFloor'] == ""F""] = 1"	1	1
submission.to_csv('titanic_submission.csv')	1	1
submission['PassengerId'] = passengerId	1	1
df_full['Title'] == idx	1	1
tickets_str.append(tickets[i])	1	1
titanic_df.iloc[:,1:]	1	1
survived_summary.mean()	1	1
"df[[""Age"" , ""Age_bin""]].head(10)"	1	1
df_dums['age_1']=[1 if (ele <= 5.) & (ele > 0) else 0 for ele in df_dums['Age']]	1	1
dataset['Pclass'][i]== 2:	1	1
train.loc[(train['Pclass'] == 1) & (train['hasCabin1'] == 0), 'class_hascabin'] = 4 #no cabin Pclass 1	1	1
test['AgeBand'] = (test['Age']/5).astype(int)	1	1
test['Ticket_Num'] = test.Ticket.apply( lambda s : s.split(' ')[-1])	1	1
data['Cabin_nr_odd'] = data.Cabin_nr.apply(lambda x: np.nan if x == np.nan else x%2)	1	1
"processed_dataframe[""NormalizedEmbarked""] = dataframe[""NormalizedEmbarked""].copy()"	1	1
train2.drop(['Fare', 'Pclass'], axis=1)	1	1
allset.loc[(allset['TicketFirst']=='2') | (allset['TicketFirst']=='F') | (allset['TicketFirst']=='1')| (allset['TicketFirst']=='P')| (allset['TicketFirst']=='9'),'TicketBucket']='High'	1	1
data_copy['Embarked']=(data_copy['Embarked']-data_copy['Embarked'].mean())/data_copy['Embarked'].std()	1	1
Data.head()	1	1
df_null['Percent'] = percent_nullvalues	1	1
in ['A', 'B', 'C']:	1	1
X.as_matrix(), y.as_matrix(), test.as_matrix(),	1	1
X['Sex']=label_encoder_x1.fit_transform(X['Sex'])	1	1
"test_df[""Age""].fillna(df.Age.mean(), inplace=True)"	1	1
test.drop(['Male', 'Fare', 'SibSp', 'Parch', 'Age'], axis=1)	1	1
"train_df.loc[(train_df['Fare']>204)&(train_df['Fare']<=307),""Fare""]=2"	1	1
"train_one[[""Survived""] + final_features]"	1	1
X_train.loc[X_train['Sex'] == 'male', 'Sex'] = 1	1	1
"df[""embarked""] = df.embarked.apply(lambda i : embarked_dict[i] if i in embarked_dict.keys() else i )"	1	1
data_test['Age_scale'] = stdd.fit_transform(data_test['Age'].values.reshape(-1,1),age_scale_param)	1	1
"titanic_training_df.loc[titanic_training_df[""Embarked""] == ""S"", ""Embarked""] = 0"	1	1
tf.add(tf.matmul(hidden_2_layer, weights['hidden2']), biases['hidden3'])	1	1
df_test['Cabin'].fillna('U',inplace=True)	1	1
raw_train_df.head()	1	1
"related_people[""Last_Name""]=related_people[""Name""].str.split("","",expand=True)[0]"	1	1
train_d.Embarked.dropna().mode()[0]	1	1
"df_test.loc[:,[""Age"", ""Embarked"", ""Fare"", ""Pclass"", ""Sex"", ""Cabin"", ""FamMem"",""Title"", ""isAlone"",""def_Cabin"",""rep_ticket"", ""fare/ticket"",""age*Pclass"", ""age*fare""]]"	1	1
booster_submission.to_csv(path_or_buf='booster_submission', index = False)	1	1
confused_mat[1][0]	1	1
dd['Boy']=np.where((dd['B']>5) & (dd['B']<10),1,0)	1	1
"train.loc[train[""Name""].str.contains(""Master""), ""Title""] = ""Master"""	1	1
result_df.drop('Survived',axis=1)	1	1
t_num_start.isnull()	1	1
df_test['Survived']=predictions	1	1
train['Cabin_known'] = train['Cabin'].isnull() == False	1	1
ax[1].set_title(t1+':Survived vs Dead')	1	1
test_ori.info()	1	1
train_df['AgeGroup'] = pd.cut(train_df['Age'],bins,labels = labels)	1	1
data['SureName']= data.apply(SureName,axis=1)	1	1
titanic_df.groupby(titanic_df['ticket_prefix_v2']).count()['PassengerId']	1	1
train_x['Sex'] = train_x['Sex'].map(gencov)	1	1
df_result.to_csv(fname, index=False)	1	1
x['neural'] = sum(nSurvived == split['Y_cv'])/len(nSurvived)	1	1
train_df['People'] = train_df['People'].map({'male': 1, 'female': 2, 'child': 3})	1	1
dataset['Title'] = dataset['Title'].map(title_mapping).astype(int)	1	1
train_df.groupby([pd.cut(train_df.Fare, bins),'Survived'])['Survived'].count()	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Capt', 'Rare')	1	1
train['Sex']=train['Sex'].map(Sex_mapping)	1	1
"data_test.drop(columns=[""Name"", ""Ticket""])"	1	1
all_data.loc[(all_data['Age'] > 16) & (all_data['Age'] <= 32), 'Age'] = 1	1	1
train_df['Pclass'] == 2	1	1
"train_df[[""Fare_categories"", ""Survived""]].groupby(['Fare_categories'], as_index=False).mean().sort_values(by='Survived') #Every fare catagories survive values."	1	1
ax[0].set_xlabel('Pclass')	1	1
total[0] / (total[0] + total[1])	1	1
train_d.head()	1	1
all_data.Embarked.fillna('S', inplace=True)	1	1
Age.plot.hist(ax=ax[1],color=['#283747'],bins=20,edgecolor='white')	1	1
X.loc[row,'Cabin'].startswith('E'):	1	1
train['Ticket_Num'] = train.Ticket.apply( lambda s : s.split(' ')[-1])	1	1
df_final['IsMinor']=np.where(train_data['Age']<=16, 1, 0)	1	1
train_df.loc[train_df['Fare'] >= 31, 'Fare'] = 3	1	1
"dataset['Born'].fillna(""Other"", inplace = True)"	1	1
"combined.loc[p,""group_id""] = g_counter"	1	1
"df_train[""Sex""] = df_train[""Sex""].astype('category')"	1	1
new_combined_data.reset_index()	1	1
train_d['Title'].value_counts()	1	1
test_df['Parch'] = test_df['Parch'].apply(Pch_sep)	1	1
df_data['Title'].value_counts()	1	1
test['Title'].replace(['Countess', 'Dona', 'Lady'], 'Mrs', inplace=True)	1	1
"train_ori[""FamilySize""]= train_ori[""SibSp""] + train_ori[""Parch""] + 1"	1	1
rawdata.drop('FareCategory', axis=1)	1	1
train_set['Embarked'].fillna(train_set['Embarked'].mode()[0], inplace = True)	1	1
data['CabinGroup'] = data['Cabin'].map({'H': 0, 'M': 1, 'L': 2, 'X':3})	1	1
enc.transform(test_cats).toarray()	1	1
test_df.drop(['SibSp','Parch','familySize'],axis=1)	1	1
train.loc[train['Age']<=12,'Age_cat']=0	1	1
"models.sort_values(by = ""Score"", ascending = False)"	1	1
titanic_data.drop('Cabin',axis=1,inplace=True)	1	1
class_fare.loc[3,:] = df[df['Pclass'] == 3]['Fare'].describe()	1	1
data_test_filter_csv.as_matrix()	1	1
train.groupby(['Surname', 'Ticket','Fare','Pclass', 'Name', 'Embarked'])['Survived'].mean().to_frame()	1	1
data_train['Family'].loc[data_train['Family'] == 0] = 0	1	1
X.loc[:y.notnull().sum()-1,:], X.loc[y.notnull().sum():,:], y[y.notnull()]	1	1
axes[1].hist(combined_modified['Age'], bins=8, label='hst')	1	1
model.add(Dense(32, input_dim=9, activation='relu'))	1	1
testdata.dropna()	1	1
test['child'] = 0	1	1
csv_train_OneHot[['Survived']]	1	1
simple_test_df[['Survived']]	1	1
combined_data.drop('Pclass',axis=1,inplace=True)	1	1
"train[""Embarked""]=le.fit_transform(train[""Embarked""].values)"	1	1
"train[""Survived""][train[""Sex""]=='male'][train[""Age""]>=18][train[""Pclass""]==1].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
data.loc[(data.Age.isnull())&(data.Title==3)&(data.Pclass==1), 'Age']=39	1	1
df_test['fareband'] = pd.cut(df_test['individualticket'], bins, labels=group_names)	1	1
combine[0].info()	1	1
test.loc[test['Age'] > 24.0, 'ageCat'] = 2	1	1
all_data['Cabin']=symbol	1	1
"df_comb.drop([""Name"", ""TkDup"", ""Ticket""], axis=1, inplace=True)"	1	1
train_data['CategoricalFare'].value_counts()	1	1
submission.to_csv('/home/seifeddine_fezzani/Desktop/Seifeddine_Fezzani/Kaggle/Titanic/submission.csv', index=False)	1	1
titanic_test.drop(['Name'],axis=1,inplace=True)	1	1
np.sum(ans==NB_pred)/len(dtest)	1	1
"train.pivot_table(index=""age_categories"", values=""Survived"")"	1	1
traindf1.head(3)	1	1
"titanic_data.Embarked.fillna(""S"")"	1	1
df_rfc.head()	1	1
dataset['rareTitle'] = np.where(dataset['Title']=='Rare',1,0)	1	1
dataset['Age'] = np.log(dataset['Age'])	1	1
"rawdata[['Party', 'Survived']].groupby(['Party', 'Survived'])['Survived'].count().reset_index(name=""count"")"	1	1
"train[""Age""].fillna(median_age_train, inplace = True)"	1	1
df_all.loc[df_all._Cabin=='n', '_Cabin']='missing'	1	1
X_train.sample(4)	1	1
validation_accuracies.append(validation_accuracy)	1	1
"training_df[""Embarked""].mode()[0]"	1	1
"dataframe.loc[(dataframe[""Sex""] == ""male"") & (dataframe[""Age""] > age_threshold) & (dataframe[""Fare""] <= fare_threshold), crossed_feature] = 2"	1	1
df_predict.rename(columns={0: 'Survived'}, inplace=True)	1	1
all_data['IsAlone'] = 1 #initialize to yes/1 is alone	1	1
train.loc[train.Cabin.str.len() > 5, 'Cabin'] # Checking whether a passenger can have multiple rooms in different cabins	1	1
train['Pclass'].isnull().values.ravel().sum()	1	1
test.drop(columns=['Cabin','Sex','Embarked'],axis=1)	1	1
titanic_full['Sex'] = titanic_full['Sex'].map({'female': 0, 'male': 1})	1	1
test['Cabin_isnan'] = np.where(test['Cabin'].notnull(), 0, test['Cabin_isnan'])	1	1
train['Family_size']=train['Parch']+train['SibSp']+1	1	1
sc.transform(test_preds)	1	1
data_combined['Age'] = data_combined['Age'].astype(int)	1	1
df_test.loc[(df_train['Age'] > 16) & (df_test['Age'] <= 32), 'Age'] = 1	1	1
"test[""Sex_adults""]"	1	1
df_Test.drop('Training_set', axis=1)	1	1
train_dataset[['family','Survived']].groupby(['family'],as_index=False).mean()	1	1
test_soft_pred_matrix.loc[:,topmodels(df=test_soft_pred_matrix)]	1	1
"train[""Deck""].cat.categories = [0,1,2,3,4,5,6,7,8]"	1	1
model.to_json()	1	1
test_df_imputed['FamilyId'] = np.nan	1	1
train_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Survived'],1)	1	1
cabin.nlargest(20)	1	1
val_features.shape[0]       # number of examples in the validation set	1	1
titanic['Age'] = titanic[['Age', 'Fare']].apply(workers_age, axis=1)	1	1
data.drop(['Pclass','Sex','PassengerId','Name','Ticket'],axis=1,inplace=True)	1	1
train_input.shape[0]	1	1
train_data.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)	1	1
"in [""Mr"", ""Mrs"", ""Miss"", ""Master""]: return ""Rare"""	1	1
predictions.append(m['Model'].predict(X_test_normalized))	1	1
data_1['Survived']	1	1
train['Age'].fillna(train.groupby('title')['Age'].transform('mean'), inplace=True)	1	1
test['Sex']=test['Sex'].map({'female':0,'male':1})	1	1
"submission_rfc.to_csv(""Submission_rfc.csv"", index = False)"	1	1
dataset['Sex'] = dataset['Sex'].map({'male':0,'female':1}).astype(int)	1	1
acc_gaussian.mean()	1	1
"df_test[""title""] = df_test[""Name""].apply(lambda x: x.split("","")[1].split(""."")[0])"	1	1
test['Sex'] = list(map(lambda x: 1 if x=='female' else 0, test['Sex']))	1	1
tit_df_test.drop(['Cabin','Name','Ticket'],axis=1,inplace=True) #dropping	1	1
plt.hist(data.ImputedAge, range = [0, data.ImputedAge.max()], density = True, alpha = 0.5)	1	1
ax[0].hist(df_survived, bins=10, range=(0,100))	1	1
train.drop('Ageband',axis=1,inplace=True)	1	1
Submission.to_csv('Tunedtree1submission.csv',sep=',')	1	1
d['IsAlone'].loc[d['FamilySize'] > 1] = 0	1	1
test.drop(['Ticket','Cabin',], axis=1)	1	1
test_set['Elderly'] = np.where(test_set['Age'] > 60, 1, 0)	1	1
train_dataset.drop(columns=['PassengerId', 'Survived', 'Cabin', 'Ticket'])	1	1
pred.to_csv('submission.csv')	1	1
dataset.groupby('title').Age.agg([('number', 'count'), 'min', 'median',  'max'])	1	1
"train_p.drop(['Survived','Age',""Sex""],axis=1)"	1	1
scalar.transform(x_test)	1	1
train_df['Title'] = train_df['Title'].map(assign_title)	1	1
deck_survive_crosstbl.divide(deck_survive_crosstbl.sum(axis = 1), axis = 0)	1	1
test.select_dtypes(include=['object'])	1	1
names.loc[(names['col'])==1,'col'] = 0	1	1
df_full['Title'] = df_full['Name'].str.extract('([A-Za-z]+)\.', expand=False)	1	1
final_prediction.append(0)	1	1
Age_ML_Summary['MAE'] = average_MAE	1	1
big.isnull().sum()	1	1
pd.pivot_table(Xy_train_df, values='Age', index=['Title'],columns=[], aggfunc=np.max)	1	1
"combined.loc[f_group.index, ""group_size""] = fs"	1	1
data.pop('Name')	1	1
ax[0].set_title('Survived count')	1	1
"df[""Ticket""].str.extract('([0-9]+)$',expand=False)"	1	1
"train[""Age_6""] = (60 <= train[""Age""])"	1	1
train['AgeGroup'] = train['AgeFill'].apply(agegrouping)	1	1
new_train['Survived'][(new_train['Ticket']==ticketID)&(new_train['PassengerId']!=passengerID)]	1	1
errors_list.keys()	1	1
merged_df.head(5)	1	1
new_test.iloc[:, 0:8].values	1	1
"data[""CatAge""] = pd.qcut(data.Age, q=4, labels=False)  #imput of a 1D array or series."	1	1
par_data.append(tm_par_data[i])	1	1
df_train.groupby(['Sex']).Survived.sum()/df_train.groupby(['Sex']).Survived.count()	1	1
"test_set.drop([""PassengerId"",""Ticket""],axis=1,inplace=True)"	1	1
df_titanic['Embarked'].value_counts()	1	1
train_data.set_value(index,'AgeRange','15-30')	1	1
x['Model'].predict(x_validation_stacked)	1	1
"test_df[""RGroup""]=test_df[""RGroup""].astype(""category"")"	1	1
train_df['age_bucket'].value_counts()	1	1
train_data.isna().sum()	1	1
df_test['known_age'] = df_test['Age'].apply(lambda x: 0 if pd.isnull(x) else 1)	1	1
dataset['family_size_level'] = dataset['family_size_level'].map({'alone':1, 'middle':2, 'large':0})	1	1
t['title'] = t['title'].map(title_map).fillna(0)	1	1
df_train.loc[(df_train['Fare'] > 7.91) & (df_train['Fare'] <= 14.454), 'Fare'] = 1	1	1
"test_data[""Embarked""]=test_data[""Embarked""].astype(int)"	1	1
in ['Pclass', 'Sex', 'Embarked']:	1	1
train_copy.loc[train_copy['Age'] <= 10, 'Age_Category'] = 0	1	1
all_dummy_df.fillna(mean_cols)	1	1
"data[""occumpanied""] = data[""family""].apply(lambda x: 0 if x == 0 else 1)"	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Rev"", ""Other"")"	1	1
train.drop(['Fare'],axis=1,inplace=True)#dropping Fare because it does not contribute and has missing values	1	1
"test.drop(""Age"", axis=1, inplace=True)"	1	1
test_one['Survived']=0	1	1
"train_df.groupby([""Sex"",""Name_key"",""Parch""])[""Age""].agg([""median""])"	1	1
tmp.drop('Survived', axis=1, inplace=True)	1	1
row['Pclass'] == 2 else 0	1	1
ds['Embarked'].fillna(value= most_embarked, inplace= True)	1	1
classifier_.add(Dense(units = 6, kernel_initializer = 'random_uniform', activation = 'relu'))	1	1
X_train.iloc[test_idx]	1	1
frame[['one','four']].groupby(['one']).mean().sort_values(by='four')	1	1
train_df['Fare_Range']=pd.qcut(train_df['Fare'],4)	1	1
input_data.sample(10)	1	1
"df_all.merge(notSurvived,left_on='TicketType',left_index=True, right_on=""TicketType"")"	1	1
drop_elementsNMD.append('isCabinA')	1	1
re_test.drop('Survived', axis=1)	1	1
data['Title'] = data['Title'].replace(['Mr', 'Miss', 'Mrs', 'Master'], [0, 1, 2, 3])	1	1
X_train['Age'] = train_df['Age']	1	1
data.set_value(1077, 'TicketClean', int(med2))	1	1
df.loc[(df['Fare'] > 31),'Fare'] = 3	1	1
titanic_ds.describe()	1	1
title_by_sex.fillna(value = 0)	1	1
data.loc[(data.Age.isnull()) & (data.Initial=='Master'),'Age'] = 5	1	1
data.drop('Sex', axis=1, inplace=True)	1	1
"train.loc[train[""Sex""] == ""male"", ""sex_c""] = ""0"""	1	1
data.Age.fillna(data.Age.median(), inplace=True)	1	1
test_data['Age'].fillna((input_data['Age'].mean()),inplace=True)	1	1
test_df['AgeBin_Code'] = data_df['AgeBin_Code'][891:]	1	1
df['Alone'].loc[df['Alone'] == 0] = -1	1	1
df_train.drop('Pclass', axis=1)	1	1
df_test['Age'] = imp.transform(df_test[['Age']])	1	1
train.drop(labels= ['PassengerId', 'Name', 'Cabin','Ticket'], inplace= True, axis =1)	1	1
test_df['Sex'] = test_df['Sex'].map(sex_mapping)	1	1
submission.to_csv('titanic2.csv',index=False)	1	1
"train.groupby(""sex_code"")"	1	1
train_data[['AgeBand','Survived']].groupby(['AgeBand'],as_index=False).mean().sort_values(by='AgeBand',ascending=True)	1	1
"df_data['Family_Name'] = df_data['Name'].apply(lambda x: str.split(x, "","")[0])"	1	1
train_df.loc[ train_df['Age'] <= 21, 'Age'] = 0	1	1
train_data_only_first_class_female.ix[~(train_data_only_first_class_female['Embarked'] != 'C')]	1	1
test_set['Survived'] = rf_clas.predict(test_set[rf_cols])	1	1
"df_train.drop([""PassengerId"", ""Survived"", ""target_name""], axis=1);   # Selecting coluns of features"	1	1
X.head(30)	1	1
test_raw['PassengerId'].values	1	1
pred_df.to_csv('submission.csv', index=False)	1	1
train_data['AgeGroup'] = pd.cut(train_data['Age'].dropna(),[0,3,8,16,35,50,60,90],labels = ['0-3','4-8','9-16','17-35','36-50','51-60','61- '])	1	1
data['CatAge'] = pd.qcut(data.Age, q=4, labels=False )	1	1
df_output['Survived'] = train_predictions	1	1
data.head()  #Reading the data to check the header	1	1
df['Cabin_categorical'].fillna('Missing', inplace=True)	1	1
titanic_train['Sex'] = titanic_train['Sex'].map(d)	1	1
iloc[0].values	1	1
dataset['CategoricalFare'] = pd.qcut(dataset['Fare'], 4) # Quantile-based discretization离散化 function.考虑异常值的切	1	1
"y_test[""Age""]=y_test[""Age""].fillna(mean_Age)"	1	1
df_train.Age.tail()	1	1
"train.drop(labels = [""PassengerId""], axis = 1, inplace = True)"	1	1
full['TicketCounts'] = full.groupby(['Ticket'])['Ticket'].transform('count')	1	1
data_frame['Ticket'] = data_frame['Ticket'].map(cleanTicket)	1	1
"train_dat[""Ticket_g""].value_counts()"	1	1
"correlations[""Survived""].sort_values(ascending=False)"	1	1
train.drop(['PassengerId', 'Name'], axis=1)	1	1
"gradients[""db2""]"	1	1
train.Social_name.replace({a:b},inplace=True)	1	1
"train_df[""Embarked""]=train_df[""Embarked""].replace(""S"",0).replace(""Q"",2).replace(""C"",1)"	1	1
data.Age.loc[(data.Age<0) & (data.sons==1) & (data.Personal_Titles=='Miss')] =    data.Age[(data.Age>=0) & (data.sons==1) & (data.Personal_Titles=='Miss')].median()	1	1
titanic_submission_form_dataset.head(3)	1	1
X_to_predict['Sex'] = X_to_predict['Sex'].apply(gender_digit)	1	1
"df[""CabinFloorScore""].loc[df['CabinFloor'] == ""C""] = 4"	1	1
classifiers.append(RandomForestClassifier(random_state=seed))	1	1
survived['Age'].dropna().values,	1	1
all_data.Cabin.fillna('U', inplace=True)	1	1
Age.plot.hist(bins=20,color='green',ax=ax[1])	1	1
data.Age.loc[(data.Age<0) & (data.companions==1) & (data.Personal_Titles=='Mr')] =    data.Age[(data.Age>=0) & (data.companions==1) & (data.Personal_Titles=='Mr')].median()	1	1
predict_NN.astype('int')	1	1
"holdout[""Age""] = holdout[""Age""].fillna(-0.5)"	1	1
data_sex.loc['male'].plot(kind='bar', ylim=[0, 1], title='Male Survival Rate', legend=False)	1	1
"test[[""Title""]] = test[[""Title""]].replace('Ms', 'Miss')"	1	1
train_df.groupby(['Family_Size','Survived'])['Survived'].aggregate('count').unstack(fill_value=0)	1	1
dataset.groupby(['Survived', 'Age']).count()	1	1
test_df['Title'] = test_df['Title'].map(title_mapping)	1	1
tdf['rounded_fare'] = tdf.fare.fillna(tdf.fare.mean()).round(decimals=-1).astype(np.int32)	1	1
finalOutput.reset_index()	1	1
data_test_dummy2['Family'].values.reshape(-1, 1)	1	1
train['Embarked'].fillna(0, inplace=True)	1	1
test.fillna(fill_dict, inplace=True)	1	1
"df[""labels""] = labels"	1	1
classifier_score['KNeighborsClassifier'] = scores.mean()	1	1
train_df[['Age','Survived']].groupby(['Age'],as_index=False).mean()	1	1
DataSetTrain['Cabin'].unique()	1	1
sol['PassengerId'] = test['PassengerId']	1	1
test['ticketlength'].value_counts()	1	1
train_agg.columns.levels[1][:-1]:	1	1
test[['male', 'female', 'Pclass', 'new_Parch', 'new_SibSp']]	1	1
df_test['Age'] = df_test[['Age', 'Pclass']].apply(test_age_imputer, axis=1)	1	1
train.drop(['Name','Ticket'],axis=1,inplace=True)#we don't need name and Ticket	1	1
sex['Sex'] = combined_df.Sex.map( {'female': 1, 'male': 0} ).astype(int)	1	1
data['Embarked_Q'] = data.Embarked_Q.apply(lambda x: int(x))	1	1
df['IsAlone'] = df.apply(lambda row: is_alone(row['FamilySize']), axis=1)	1	1
np.mean(orig_fares[~df['Fare'].isnull()])	1	1
test['FamilySize']=1+test['SibSp']+test['Parch']	1	1
X.loc[[61, 829]]	1	1
np.empty([test_data_scaled.values.shape[0], 1])	1	1
train5['Embarked'] = le.fit_transform(train5['Embarked'])	1	1
cabin2_dummy.drop(columns= ['T'])	1	1
data['Title'] = data.Name.apply(lambda name: name.split(',')[1].split('.')[0].strip())	1	1
dataset['Title'] = dataset['Title'].replace(['Countess','Don','Dona','Jonkheer','Lady','Master','Sir'],'Nobility')	1	1
df.loc[(df['Pclass']==1) & (df['Cabin_letter']=='U'), 'Cabin_letter'] = 'B'	1	1
full.head()       # give first couple rows of data	1	1
dataset['Title']   =   dataset['Title'].replace('Mlle', 'Miss')	1	1
trainingset.drop(['Age'], axis = 1)	1	1
scaler.transform(X_tt_real)	1	1
"titanic['Title'] = titanic['Title'].apply(lambda x: 'Lady' if ( x == ""Mlle"" or x == ""Mme"" or x == ""the Countess"" ) else ('Ranked' if (x == ""Capt"" or x == ""Col"" or x == ""Rev"") else ( ""Miss"" if (x == ""Ms"") else x)) )"	1	1
train['Parch']>0	1	1
models.append(rfc)	1	1
all_data.drop('Ticket',axis=1)	1	1
test_ds.loc[(test_ds['Fare']==0), 'FreeTraveller']= 1	1	1
train.loc[train['Name'] == name, 'title'] = 'Ms'	1	1
df_old.groupby('Survived').size() # with .size() we generate a pandas pandas.core.series.Series Series type variable	1	1
X_train.Embarked.dropna().unique()	1	1
titanic_df['Embarked'] = titanic_df['Embarked'].fillna(value='S')	1	1
train['Title']=train['Title'].replace(['Mlle','Ms'],'Miss')	1	1
data.join(embarked_one_hot)	1	1
"dumies[""Survived""] = data[""Survived""]"	1	1
full['FamilySize'] = family.FamilySize	1	1
data.drop('Pclass_3', axis=1, inplace=True)	1	1
titanic_df.loc[titanic_df['PassengerId'] > train_len].iloc[:, titanic_df.columns != 'Survived']	1	1
df.Sex.apply(lambda x: x[0])	1	1
"new_data[""NotEmbarked""] =  new_data[""Embarked""].isna().astype(int)"	1	1
age_nomissing.drop('Age', axis=1).values	1	1
df.to_csv('titanic_dataset_preprocessed.csv',index=False)	1	1
"plt.rcParams[""figure.figsize""] = [10,5]"	1	1
simple_data_df.drop(columns=['AgeBin_Code'], axis=1, inplace=True)	1	1
test['Sex'] = test['Sex'].replace(SEX).astype('category')	1	1
data['Pclass'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'], ax=ax[0])	1	1
train_df.loc[(train_df['Fare']>14)&(train_df['Fare']<=31),'Fare_new']=2	1	1
Age.hist(alpha=.5, color='green', bins=20)	1	1
df_train_copy.drop(['Ticket'], axis=1)	1	1
train['Embarked'].apply(lambda x : 1 if x == 'S' else (2 if x == 'Q' else 3))	1	1
"train_file[[""Pclass"",""Age"",""Sex""]].values"	1	1
trainfinal.replace({'SibSp':[5,8]},0)	1	1
test_data[['PassengerId','Name','Fare','Sex','Age','SibSp','Parch','Pclass']]	1	1
data['non_relatives_shift'] = data.non_relatives + 6	1	1
tdf['words_in_name'] = tdf.name.str.split().apply(lambda x: len(x))	1	1
"train[""Embarked""].loc[train[""Embarked""] == ""Q""] = 2"	1	1
df_full['LastName'] = df_full['Name'].str.extract('^([^,]+),', expand=False)	1	1
df_all['Title'][df_all.Title.isin(['Ms','Mlle'])] = 'Miss'	1	1
train.groupby(['TicketLetter'])['Survived'].mean().sort_values(ascending=False)	1	1
final_predictions.append(1)	1	1
submission.to_csv('CNN-submission-simple-cleansing_2Layer.csv', index=False)	1	1
train_dataset.loc[(train_dataset['Fare']>31),'Fare']=3	1	1
trainData.describe(include='all')	1	1
"train.drop([""PassengerId"",""Name"",""Ticket"",""First Name"",""Last Name"",""Commentaire"",""Cabin""],axis=1)"	1	1
train_attri_dropped.drop(cat_attri_index, axis=1)	1	1
test['Sex'] =='male'	1	1
train_Pre.head()	1	1
"factors[""t_pre""]=1"	1	1
pip.transform(raw_test_X)	1	1
test_df.loc[(test_df['Age'] > 40) & (test_df['Age'] <= 60), 'AgeGroup'] = 4	1	1
dataset.loc[ dataset['Age'] == -1, 'Age'] = -1	1	1
age_data.head(2)	1	1
qaxis[2].set_title('Sex vs IsAlone Survival Comparison');	1	1
"df_test[""Age""].std()"	1	1
final.to_csv('final.csv', index=False)	1	1
X_full['Embarked'].fillna('S', inplace = True)	1	1
np.mean(y_train == classifier.predict(X_train))*100	1	1
"idx[0] != ""NA"":"	1	1
clf_list.append(learning_model)	1	1
df_train.drop(['SibSp', 'Parch'], axis=1)	1	1
in ['Mlle','Ms' ,'Dona' ,'Lady']:	1	1
model.add(Dense(units=32, activation='relu'))	1	1
"df_tr.drop(""Survived"",axis=1)"	1	1
train_df['IsAlone'].value_counts(normalize=True)	1	1
tit_df['Age'].dropna().astype(int)	1	1
train_df.drop(['Name','Ticket'], axis = 1, inplace = True)	1	1
"test[""Fare_3""] = (40 <= test[""Fare""])&(test[""Fare""]<100)"	1	1
"test.loc[test[""Embarked""]==""C"",""Embarked""] =1"	1	1
model.add(Dense(n_h1, input_dim=n_x, activation='relu'))	1	1
"data[""Embarked""] = data[""Embarked""].fillna(""S"")"	1	1
"data[[""Pclass"",  ""Miss"", ""Mr"", ""Mrs"", ""Sex"", ""Age"", ""SibSp"", ""Parch""]]"	1	1
sub['Survived'] = y_test	1	1
X3test['Sex'] = X3test['Sex'].replace(to_replace=['male', 'female'], value=[0, 1])	1	1
"dataset[""Sex""] = dataset[""Sex""].map(sex_map)"	1	1
y_train.plot.hist()	1	1
titanic_df['ticket_prefix_v2'] = titanic_df['ticket_prefix'].apply(remove_special)	1	1
gender_submission.iloc[:,[1]]	1	1
df_titanic.isnull().sum()	1	1
highest.pop('PassengerId', 0)	1	1
"Data['Title1'] = Data['Name'].str.split("", "", expand=True)[1]"	1	1
df['Cabin'][27:32]	1	1
train_df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1)	1	1
df_all.loc[:,['Ratio']].plot.bar(figsize=(20,8))	1	1
full['age_cat'] = pd.cut(full['Age'], bins = [0,10,18,50,80.1], labels = [1,2,3,4])	1	1
test['Embarked'] = test['Embarked'].replace(['Q','S','C'], [0,1,2])	1	1
"test[""Family""] = test[""SibSp""] + test[""Parch""] + 1"	1	1
data.boxplot(column = ['age', 'sisBroSpo', 'parentChild'])	1	1
df_test['SexN'].replace({'male': 0, 'female': 1}, inplace=True)	1	1
dataTest[['Pclass', 'Family number', 'Sex_male', 'Embarked_Q', 'Embarked_S','Age bins_dummies']]	1	1
ax[2].hist(df.Sex);ax[2].set_title('the sex count')	1	1
dataset.loc[(dataset['FamilySize'] > 4),  'IsAlone'] = 2	1	1
train.loc[train['Cabin'].str.len() == 7.0, 'CabinN1'] = train['Cabin'].astype(str).str[1:3]	1	1
new_train.Survived.values	1	1
titanic.append(titanic_test, ignore_index= True)	1	1
"df_train.drop([""PassengerId"", ""Survived"", ""target_name""], axis=1);"	1	1
train_df['Pclass'] = train_df['Pclass'] - 1	1	1
titanic_train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
df['Survived'][df['Survived'] == 1].count()	1	1
train_df['FareBand'] = pd.qcut(train_df['Fare'], 30)	1	1
data.drop(['Sex'], axis=1, inplace=True)	1	1
df.loc[df['Fare'].isnull()]	1	1
ax[1].set_title('Survival Count by Embarked')	1	1
data.Deck.dropna().map(lambda x: Decks_dict[x]).astype(int)	1	1
dataset['Embarked'] = dataset['Embarked'].replace('C', 1)	1	1
train_X.as_matrix()	1	1
full_data.loc[ full_data['Fare'] > 31, 'Fare'] = 3	1	1
X_logistic.fillna(0, inplace=True)	1	1
titanic_df['PersonClass'] = titanic_df['Person'] + titanic_df['Pclass'].astype(str)	1	1
"test.drop(""Ticket"", axis = 1, inplace = True)"	1	1
"data[""Pclass""].astype('int32')"	1	1
train.drop(['S', 'Embarked'], axis=1)	1	1
allfeat.drop(columns='Title') #column no longer needed	1	1
abs_feature_importance_ordered.sort_values(ascending=False)	1	1
df_test.head(2)	1	1
train_scale.transform(X_test)	1	1
data.groupby('NameTitle')['Survived'].mean().sort_values(ascending=False).plot(kind='bar', ax=ax[1], rot=0, colormap='vlag')	1	1
plt.hist([df[df['Survived']==1]['Fare'],df[df['Survived']==0]['Fare']], stacked=True, color=['g','r'],bins=30, label=['Survived','Dead'])	1	1
df['Embarked'] = np.where(df['Embarked']== 'Q', 1 ,df['Embarked']  )	1	1
dataset.loc[dataset['Fare']>250.0,'Fare'] = 3	1	1
titanic_train['Embarked_S']=(titanic_train['Embarked']=='S').astype(int)	1	1
model.add(Dense(units=58, input_dim=29, activation='selu'))	1	1
train['X'], test['X']	1	1
"evaluation[""Survived""] = test_predict_result"	1	1
"full.loc[(full.Title.isin([""Countess"",""Lady"",""Dona"",""Mme""])),""Title""]=""Mrs"""	1	1
df['parch_4p'] = (df.parch >= 4).apply(int)	1	1
"axes[0].set_title(""First Class"")"	1	1
row['Sex'] == 'female' and row['PassengerId'] == 2 or 3 or 9 or 10 or 11 or 12 or 16 or  or 20 :	1	1
test_data['Fare'].unique()	1	1
df.CabinCode.fillna(np.nan,inplace=True)	1	1
res_df.sort_values('importance',ascending=False)	1	1
titanic['Pclass'].value_counts()	1	1
df['Gender'] = df['Sex'].map( lambda x: x[0].upper() )	1	1
"df_data[""Deck""] = df_data[""Deck""].fillna(""N"")"	1	1
x_test['PassengerId']	1	1
train_df.drop('Sex',axis=1)	1	1
data_3.columns.values	1	1
Train_data.info()	1	1
input_arr.iterrows():	1	1
df_test.drop(['Pclass'], axis=1)	1	1
Age.plot.hist(ax=ax[1],bins=20,edgecolor='black')	1	1
output.to_csv('submissionNN.csv', index=False)	1	1
"df['Name'] = df['Name'].str.replace(r"",.*"", """").astype('category')"	1	1
"models.append((""KNeighborsClassifier"", KNeighborsClassifier))"	1	1
full_set.drop('Ticket', axis=1)	1	1
X_train['Sex_Label'] = le.fit_transform(X_train['Sex'])	1	1
"train[[""Prefix"",""Sex"",""Survived""]].groupby([""Sex"",""Prefix""], as_index=False)['Survived'].agg(['mean','count'])"	1	1
"data[""IsMale""] = (data[""Sex""] == ""male"") * 1"	1	1
"tmp_train[""Cabin""].replace(""T"", ""U"", inplace=True)"	1	1
all_data.iloc[:, 3] = all_data.iloc[:, 3].fillna(third_class_pass.mean(0)['Fare'])	1	1
data['ClassMid'] = data.apply(midclass,axis=1)	1	1
titanic_df.drop(drop_elements, axis = 1)	1	1
sc.transform(kaggle)	1	1
c.fillna(c.median())	1	1
data.boxplot(column='Fare')	1	1
test_df['Age'] = test_df['Age'].fillna(test_df['Age'].median())	1	1
train.drop(['PassengerId','Name','Ticket'],1)	1	1
data.Fare.fillna(data.Fare.median(), inplace = True)	1	1
"holdout[""Cabin_type""] = train[""Cabin_type""].fillna(""Unknown"")"	1	1
df_test['Age'][np.isnan(df_test['Age'])] = age_avg	1	1
x['Model'].predict(x_validation)	1	1
data_full['Deck'] = pd.Categorical(data_full['Deck'].fillna('N')).codes	1	1
dataset_train['Fare'].fillna(dataset_train.Fare.mean(),inplace=True)	1	1
combined['Title']=combined['Title'].map(title_Dictionary)	1	1
df_test['Dataset'] = 'test'	1	1
"axs[1].set_title(""Test"")"	1	1
axarr[1].scatter(train['Age'], train['Parch'])	1	1
"train_data.loc[(train_data[""Fare""] >= 100) & (train_data[""Fare""] < 200), ""FareBetween100And200""] = 1"	1	1
pd.DataFrame.from_dict({'PassengerId' : test['PassengerId'], 'Survived' : pred})	1	1
traindf.drop('Cabin',axis='columns')	1	1
"test_set[""Sex""] = test_set[""Sex""].apply(lambda x: replacement1.get(x))"	1	1
test1['Survived'] = 'Unknown'	1	1
test_one['Survived'][test_one['Sex'] == 'male'] = 0	1	1
train_df.loc[train_df['Age'] >= 2]	1	1
df.loc[((df.MisAge == 1) & (df.Pclass == 1)) , 'MA_Cl'] = 4 #rich without age	1	1
submission.to_csv('random_forest_clf_titanic_subm.csv', index=False)	1	1
"my_solution.to_csv(""my_solution_random_forest.csv"", index_label = [""PassengerId""])"	1	1
data_test['Age'].mean()  # 29.69911764705882.  Wasn't expecting that.	1	1
"test[""AgeCategory""] = test[""AgeCategory""].map({""Adult"": 0,""Child"" : 1,""Old"": 2,""MissingData"": 3})"	1	1
"test.fillna(dftest[""Fare""].mean())"	1	1
"data.loc[data[""Fare""] <= 7.91, 'Fare'] = 0"	1	1
submission3.to_csv('submission3.csv', index = False)	1	1
simple_test_set.values	1	1
imp.reset_index(drop = True, inplace = True)	1	1
X_train['person'].value_counts().sort_index()	1	1
full['Embarked'].fillna(full['Embarked'].mode(),inplace=True)	1	1
T.sort_values(by='Correlation')	1	1
df.groupby('Initial')['Age'].mean() #lets check the average age by Initials	1	1
train_df.head() # First 5 value of new train_df	1	1
"test['Age'] = test[['Age','Pclass','Title']].apply(test_age_fix,axis=1) #The ""test_age_fix"" function is applied to ""test"" dataset"	1	1
"train.drop(labels = [""Ticket""], axis = 1, inplace = True)"	1	1
"train_data.loc[train_data[""Embarked""] == ""Q"", ""Queenstown""] = 1"	1	1
test.isnull().any().any()	1	1
acc_random_forest[0].predict(test)	1	1
"dataset[""Ticket""].value_counts()"	1	1
summary_class.iloc[-1, :]	1	1
"train_data['Title'] = train_data[""Name""].apply(get_title);"	1	1
"plt.style.use(""classic"")"	1	1
data_test.drop(['PassengerId','Pclass','Name','Sex','Age','Fare','Cabin','Embarked','Ticket'],axis=1,inplace=True)	1	1
data_test['Title'] = title_encoder.transform(data_test['Title'])	1	1
raw_train['Title'] = raw_train['Name'].apply(lambda x: extract_title_from_name(x))	1	1
"ax[1].set_xlabel(""per feature"")"	1	1
test['Age'] = test[['Age','Pclass']].apply(correct_age,axis=1)	1	1
"X[""Sex""] #  LabelEncoder expects 1d array"	1	1
train.loc[(train['Pclass'] == 2) & (train['isAlone'] == 1), 'class_alone'] = 4 #alone Pclass2	1	1
test.select_dtypes(int).nunique()	1	1
train_data.pivot_table('Survived', 'Sex')	1	1
test.drop(['Name', 'Ticket'], axis=1)	1	1
train_data.groupby([combination[0],combination[1]])['PassengerId'].count().unstack()	1	1
train_set[['Survived','Pclass','Sex','Embarked','IsAlone','Title','FareBin','AgeBin']]	1	1
test_df.drop(['PassengerId'],axis=1).values	1	1
np.sum(y == pred)/y.shape[0]	1	1
features['Survived']	1	1
X[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
data.Age_bin_custom_label.astype(np.uint8)	1	1
"df[""Sex""] = df[""Sex""].apply(sb)"	1	1
data_train[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)	1	1
train['Fare'].hist(bins = 40, figsize=(10,4))	1	1
train.loc[((train['Age']/0.5)%2 == 1) & (train['Age'] >= 1.0), 'hasAge'] = 2	1	1
train_set.isnull().values.any()	1	1
dataset['Name'] = dataset['Name'].replace('Mme', 'Mrs')	1	1
sub_df.fare.mean()	1	1
dataset_train.drop(['Survived'],axis=1).values	1	1
cabin_set['Cabin_new']=cabin_set['Cabin'].str[0]	1	1
df.drop(['Age', 'Fare'], axis=1, inplace=True)	1	1
df_t.head()	1	1
"df_train[""Pclass""]=df_train[""Pclass""].astype('category')"	1	1
gbc_imp.merge(xgb_imp, on='Feature').merge(ran_imp, on='Feature').merge(ext_imp, on='Feature').merge(ada_imp, on='Feature')	1	1
predicted_data.to_csv('titanic_predictions.csv',index=False)	1	1
train.drop(['Name','Sex','Ticket','Pclass'],axis=1,inplace=True)	1	1
whole['Offi'] = (whole.Title.str.contains(r'Major\.|Col\.|Capt\.')).astype(int)	1	1
x_test['Missed_Age'] = x_test['Age'].map(lambda x: 1 if pd.isnull(x) else 0)	1	1
"dataframe['Prefix'] = dataframe['Prefix'].replace(['Countess', 'Lady','Capt', 'Don', 	'Col', 'Dr', 'Rev', 'Major', 'Dona', 'Sir', 'Johnkeer'], 'Unusual')"	1	1
test_df.loc[:,selCols+['PassengerId']]	1	1
dataset.loc[(dataset['Age']>64),'Age']=4	1	1
test_set.drop(['Age'], axis=1)	1	1
test_data['Status'] = status	1	1
test_df['Fare_code'] = enc.fit_transform(test_df['Fare_bins'].astype(str))	1	1
df['Title'] = df.Title.map({'Mr': 0,  'Mrs': 1,  'Miss': 2,  'Master': 3,  'other': 4}).astype(int)	1	1
titanic.drop(titanic.columns[[3,8,10]], axis=1, inplace = True)	1	1
test['Age'] = original_test_age	1	1
testd.describe()	1	1
train_df[['Embarked', 'Survived']].groupby('Embarked', as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
df['Singleton'] = df['FamilySize'].map(lambda s: 1 if s == 1 else 0)	1	1
submission.to_csv('titanic_submission_test.csv', index=False)	1	1
test.loc[test['Age']<1,'IsBaby']=1	1	1
"df.groupby(""Sex"").get_group(""male"")"	1	1
validation_dataset['SibSp'] + validation_dataset['Parch']	1	1
train.groupby('Parch')['Parch'].count()	1	1
full['Age'].fillna(full['Age'].median(),inplace=True) #In case there are still NaN	1	1
data['LargeF'] = data['f_size'].map(lambda x: 1 if x >= 5 else 0)	1	1
X_total[['Title', 'Age', 'FamilySize']]	1	1
"df_all.merge(survived,left_index=True, right_on=""TicketType"")"	1	1
sex_dummy.head()	1	1
trainAGE['Fare']=trainAGE['Fare'].apply(fixnan)	1	1
df_train_features.iloc[:,2]:	1	1
data['CatAge'] = pd.qcut(data.Age, q=6, labels=False )	1	1
"train_df[""Fare""].unique()"	1	1
train_data.copy().drop('Survived', axis=1)	1	1
test_df.as_matrix().astype('float')	1	1
df1.head(5) # DF1 HAS SURVIVED COLUMN	1	1
test_df.drop(columns=['Age','Name','Ticket','Cabin'], inplace=True)	1	1
titanic.dropna(inplace=True)	1	1
test_df.drop(['Parch', 'SibSp'], axis=1, inplace=True)	1	1
data.Cabin.isnull().sum()	1	1
fselection.join(new_df)	1	1
tdf['cabin_letter_cat'] = tdf.cabin.str[0].astype('category').cat.codes	1	1
X['Name']	1	1
train['Name'] = train['Name'].apply(lambda x: replacement.get(x))	1	1
y_pred_final['PassengerId'] = df_test['PassengerId']	1	1
submission.to_csv('submission.csv')	1	1
test['Embarked'] = test['Embarked'].map(embcov)	1	1
features_long.Embarked.copy()	1	1
"combined_df['Sex'] = combined_df['Sex'].astype(""category"")"	1	1
data['Embarked'] = data['Embarked'].replace(['S', 'C', 'Q'], [0, 1, 2])	1	1
"ages_prob[""Prob""].values.tolist()"	1	1
train_df['Alone'].loc[train_df['Alone'] == -1] = 1	1	1
train[['Survived', 'Embarked', 'Pclass', 'IsMale']].groupby(['Embarked', 'Pclass', 'IsMale'])	1	1
cleaned_df['Gender'] = cleaned_df['Sex'].map({'female':0, 'male':1}).astype(int)	1	1
test_dataset['IsAlone']=0	1	1
test.Age.fillna(29.699118).values.reshape(-1, 1)	1	1
titanic_data.loc[(titanic_data['Age'] >14)&(titanic_data['Age'] <= 32),'Age'] = 1	1	1
dfTrain['Name_Title'] = dfTrain['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	1	1
train_df.drop(labels = ['PassengerId','Name','Ticket','Cabin','Parch','SibSp'],axis=1)	1	1
"train.dtypes[train.dtypes != ""object""].index"	1	1
data_train['Ticket_last_digit']	1	1
trainData.Pclass.hist()	1	1
test_df.drop(['Ticket', 'Fare', 'Cabin', 'Embarked'], axis = 1)	1	1
"combined.loc[pid,""isVIP""] = 1"	1	1
train['Fare'].hist(bins=40, figsize = (10, 4))	1	1
dataset['Age_Class']= dataset['Age_bin']* dataset['Pclass']	1	1
df.loc[(df['Sex']==gender)&(df['Pclass']==pclass)&(df['Age'].isnull()),'Age']=age_dict[pclass]	1	1
full_set['Embarked'] = full_set['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
df['FamilySize'] = df['FamilySize'].apply(family_size)	1	1
LearnResults[2],	1	1
"pd.isnull(df_train[""Embarked""])"	1	1
data['Survived'][data.Pc2 ==1].count(),	1	1
"train_dat[""Fare_g""].value_counts()"	1	1
data['Cabin_nr'].fillna(value=-9999, inplace=True)	1	1
"data['is_female'] = data['Sex'].map(lambda x: 1 if x == ""female"" else 0)"	1	1
df.loc[(df['Age']>=1) & (df['Age']<=6),'isKid'] = 1	1	1
"test.drop(""PassengerId"", axis = 1, inplace = True)"	1	1
survivors['Embarked'].value_counts().sort_index()	1	1
merged.loc[merged['Age']<=16,'Age_band']=0	1	1
"train[""Title""] = train[""Title""].map({""Master"":0, ""Miss"":1, ""Ms"" : 1 , ""Mme"":1, ""Mlle"":1, ""Mrs"":1, ""Mr"":2, ""Rare"":3})"	1	1
test['Age'].fillna(test.groupby('title')['Age'].transform('mean'), inplace=True)	1	1
age_plot_survived.mean()	1	1
df_train_ml['Title'] = df_train_ml['Title'].replace(man_regular, 1)	1	1
master_df['fam_size'] = master_df['Parch'] + master_df['SibSp'] + 1	1	1
comb['Ticket'] = comb['Ticket'].replace('LINE','LINE 0')	1	1
Titanic_Master['Pclass_t'] = Titanic_Master['Pclass_t'].astype(str)	1	1
df_test['Age'].fillna(df_test['Age'].mean(), inplace=True)	1	1
np.mean(male_sample)	1	1
passengers.info()	1	1
"train[""Survived""].astype(int)"	1	1
test_df['Cabin']=pd.Series([i[0] if pd.notnull(i) else 'X' for i in test_df['Cabin'] ])	1	1
grd_scores.append({'criteria': n, 'score': grd_score})	1	1
"title_dict[""MS""] = 3"	1	1
train['Sex']=train['Sex'].apply(lambda x:gender[x])	1	1
train_data.drop(Outliers_to_drop,axis=0).reset_index(drop=True)	1	1
df[['Pclass','Fare','Embarked']]	1	1
"train[[""Person"", ""Survived""]].groupby(['Person'], as_index=False).mean()"	1	1
"in [""Sex"",""Age_cat""]:#""Pclass"",""Cabin_cat"",""Age"""	1	1
nwdata1[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean()	1	1
test_data.drop('Age', axis =1)	1	1
df_train['Survived'].as_matrix()	1	1
tpr2.append(count_tp/79.0)	1	1
train['Embarked'] = train['Embarked'].fillna(freq_port_train)	1	1
trainSet.iloc[:,1:11]	1	1
df_test['Survived'] =  [0 for x in range(len(df_test))]	1	1
train_df['AgeBin_Code'] = data_df['AgeBin_Code'][:891]	1	1
"submission.to_csv(""Submission_Titanic"", index=False)"	1	1
X['Alone'] = [1 if i<2 else 0 for i in X['Family']]	1	1
"full_data[""FareCat""][(full_data[""Fare""] >= 200)] = 200"	1	1
glbl['n_jobs'],	1	1
df_train['Embarked'].isnull().sum()	1	1
full_data['Cabin'] = full_data['Cabin'].map(cabin_mapping)	1	1
train.loc[train.groupby('Title').Title.transform('count').lt(45), 'Title'] = 'Rare'	1	1
"StackingSubmission_lg_direct.to_csv(""Submission_lg_direct_1.csv"", index=False)"	1	1
comb_data[['IndFare']] = np.log1p(comb_data[['IndFare']])	1	1
dtc3_survivors.is_copy = False	1	1
df_train.loc[df_train.Survived==1, column].dropna(),	1	1
df_pred['FamilySmall'] = np.logical_and(df_pred['Family'] > 1, df_pred['Family'] < 5).astype(int)	1	1
"train[""Age""]=train[""Age""].fillna('0')"	1	1
cabin_df.assign(deck_level=pd.Series([entry[:1] for entry in cabin_df['Cabin']]).values)	1	1
d['Sex']=lbl.fit_transform(d['Sex'])	1	1
dataset_train[['Fare', 'Survived']].groupby(['Fare']).count()	1	1
train['Fsize'] = train['Parch']+train['SibSp']	1	1
df.count().min() == df.shape[0]:	1	1
X_train.drop(['Age'],axis=1)	1	1
tt.loc[891:,'PassengerId']	1	1
df_test[['Person_Class','Group_Category']].groupby(['Person_Class','Group_Category']).size().reset_index(name = 'Count')	1	1
raw_train.corr()['Survived']	1	1
data.loc[(data.passenger_fare>=8.59) & (data.passenger_fare<10.5) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>=8.59) & (data.passenger_fare<10.5) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
test_df1['CabinBool'] = (test_df1['Cabin'].notnull().astype('int'))	1	1
Titanic_pred2.head()	1	1
train_df.drop('Ticket', axis=1, inplace=True)	1	1
train.drop(['Name', 'Sex'], axis=1)	1	1
train.drop(['Survived'], axis=1).as_matrix().astype(np.float)	1	1
model.add(Dense(7, input_dim=7, activation='relu'))	1	1
"dftrain.loc[idx,""CountTicket""]=(ticket_count_train[ticket]+ticket_count_test[ticket])"	1	1
test['Embarked'] = test['Embarked'].replace(np.NaN, 'S')	1	1
df['Sex'] = pd.to_numeric(df['Sex'], errors='coerce')	1	1
df_to_submit.to_csv(csv_dest, index=False)	1	1
new_corrs.append((col, corr))	1	1
dataset_df.loc[dataset_df['PassengerId'] == passID, 'Connected_Survival'] = 1	1	1
dataset_df.loc[dataset_df['PassengerId'] == passID, 'Connected_Survival'] = 0	1	1
train_set[['age_group', 'Survived']].groupby(['age_group'],as_index=False).mean()	1	1
train_person_dummies.drop(['male'],axis=1,inplace=True)	1	1
data_test['Fare'] = data_test['Fare'].fillna(mean_fare)	1	1
titanic_df['CatFare'] = labels	1	1
testingData.drop(['Survived', 'is_test'], axis=1)	1	1
dataset['Title'] = dataset['Name'].str	1	1
train_mini['Title']  = train_mini['Name'].apply(getTitle)	1	1
data_full['Deck'] = data_full['Cabin'].str[:1]	1	1
dataset['C'] = np.where(dataset['CabinChar']=='C',1,0)	1	1
total_data['Embarked'].value_counts().argmax()	1	1
"data[""Embarked""]=le.transform(data[""Embarked""].astype(str))"	1	1
dataset['IsAlone'] = 1 #1 means passanger is travelling Alone	1	1
female_survivors.head()	1	1
data_train.drop(['Name', 'Ticket', 'Cabin'],axis=1,inplace=True)	1	1
normalized_data.head()	1	1
temp.drop(columns=['Survived'])	1	1
train.groupby('Pclass')['Fare'].mean()	1	1
transformed_df['Age_Categorized_Baby'] = age.Age_Categorized_Guess_Baby	1	1
train.loc[train['Age'] > 40.0, 'ageCat'] = 3	1	1
train['hasCabin4'] = train['hasCabin4'].fillna(1)	1	1
test.drop(['SibSp','Parch'],axis=1,inplace=1)	1	1
score['LinearSVC'] = Linear_svc.score(X_train, Y_train)	1	1
df_train['Sex'].replace(['male', 'female'], [0, 1], inplace = True)	1	1
fulldata['Age'] = pd.Series(scaler.fit_transform(fulldata.Age.reshape(-1,1)).reshape(-1), index=fulldata.index)	1	1
test_df['Room']=test_df[['Cabin']].apply(get_cabin, axis=1)	1	1
accuracies.append(xgb_score)	1	1
train_df['Survived'].astype(int).plot.hist();	1	1
combine[0]	1	1
copyTest_df.drop(copyTest_df.columns[[0,5]],axis=1)	1	1
df.groupby(['Sex']).Age.median()	1	1
data['Surname'] = data['Name'].apply(lambda x: str(x).split(' ')[0].split(',')[0])	1	1
"training_df.drop([""PassengerId"",""Survived""], axis=1).values"	1	1
app_test.values	1	1
np.append(np.setdiff1d(index_d, index_rollback),0)	1	1
df_full['Fare']:	1	1
clf_metrics.sort_values('CVS_Mean', ascending=False, na_position='last', inplace=True)	1	1
"Y.set_index([""Last_Name"",""Ticket""],inplace=True)"	1	1
drop_train.loc[drop_train.Pclass == 2,'Age'].mean()	1	1
"result[""Survived""] = y_pred.astype(""int"")"	1	1
test_x['Fare']=test_x['Fare'].apply(rem_fare_nan)	1	1
df_train['Cabin'].loc[df_train['Cabin'].notnull()].astype(str).str[0]	1	1
titanic_test.Age.fillna(titanic_test.Age.mean(), inplace = True)	1	1
Each_Passenger.loc[(Each_Passenger['Age'] > 80) & (Each_Passenger['Age'] <= 80 ) | (Each_Passenger['Fare'] > 279) & (Each_Passenger['Fare'] <= 513) , 'Age'] = 5	1	1
test.Name.replace(['Rev','Mlle','Major','Col','Capt','Don','Dona','Jonkheer','Countess'],'Rare')	1	1
plt.rcParams['figure.figsize'] = (8, 4)	1	1
"df_test[""Age""].fillna(df_test.groupby(""Title"")[""Age""].transform(""median""), inplace = True)"	1	1
all_data['Title'] = all_data['Title'].replace('Mme', 'Mrs')	1	1
combined_data.drop('Name',axis =1,inplace = True)	1	1
x['Parch']	1	1
"train_dat.at[i,""Ticket_g""] = ""SOTON"""	1	1
"test_data['Family'] =  test_data[""Parch""] + test_data[""SibSp""]"	1	1
"New_Df[""Title""] = New_Df.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())"	1	1
data_train.loc[data_train['Embarked'].isnull(),'Embarked'] = Embarked_code	1	1
df['Port'] = df['Embarked'].map({'S':0,'C':1,'Q':2}).astype('int')	1	1
"data[""Name""] = data[""Name""].str.replace(""Col"",""Mr"")"	1	1
"train_df[""fare_category""].value_counts()"	1	1
Test['caT'] = Test['Cabin'].map({'A':0,'B':0,'C':0,'D':0,'E':0,'F':0,'G':0,'T':1,'U':0}).astype(int)	1	1
test['Name'] = test['Name'].apply(lambda x: replacement.get(x))	1	1
pclass_frame.drop(['Class_3'], axis=1)	1	1
all_data.loc[all_data['Sex']=='female','Age']=all_data.loc[all_data['Sex']=='female','Age'].fillna(all_data.loc[all_data['Sex']=='female','Age'].median())	1	1
df_test.drop(['SibSp','Parch','Fare','Family_members'],axis = 1)	1	1
"full_data[""SingleMale""] = 0 #0 -- Other ends up being females"	1	1
dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 2	1	1
dataset.loc[dataset['Age'] <=16, 'Age'] = 0	1	1
df['FareBand'] = pd.cut(df.Fare, bins, labels = labels)	1	1
"dataset[""Title""].replace([""Master"", ""Miss"", ""Mr"", ""Mrs"", ""Other""], [0, 1, 2, 3, 4], inplace = True)"	1	1
"combined_df['Sex'] = combined_df['Sex'].astype(""int"")"	1	1
X_test['Age'] = X_test['Age'].astype(int)	1	1
dataset['Fare'].hist() # histogram 分布图	1	1
"axs[0].set_title(""Then"")"	1	1
train.Fare.mean(), train.Fare.median()	1	1
"training_df[""Survived""].values"	1	1
test['Fare']=test['Fare'].fillna(data['Fare'].median())	1	1
data.surname_Richards.astype(np.uint8)	1	1
le2.transform(train.as_matrix(columns=['Pclass']))	1	1
tf.add(tf.matmul(W2,A1), b2, name='Z2')	1	1
"test[""Family_size""] = test[""Parch""].astype(np.int64) + test[""SibSp""].astype(np.int64) + 1"	1	1
"train_df[[""Age"", ""Survived""]].groupby([""Age""], as_index=False).mean()"	1	1
train_model['Survived']	1	1
submission['Survived'] = rf.predict(one_hot_test)	1	1
test_df['FirstClass']=test_df[['Pclass']].apply(get_firstclass, axis=1)	1	1
"np.where(dataset[""Cabin""]==""A"",1,0)"	1	1
val.iterrows():	1	1
scores.append(validation_scores(clf, train_data))	1	1
test_3.drop(['Sex_male', 'SibSp', 'Parch', 'Em_Q', 'Em_S', 'Fare'], axis=1, inplace=True)	1	1
test['Title'] = test['Name'].apply(getTitle)	1	1
dataset.loc[dataset['CabinNumber'] % 2 == 1, 'CabinBand'] = 2	1	1
"x.drop(""PassengerId"", axis=1) #axis=1 tells the command to drop a column, not a row."	1	1
X_test['Family_size'] = (X_test['SibSp'] + X_test['Parch']).astype('object')	1	1
train.drop(Outliers_to_drop,axis=0).reset_index(drop=True)	1	1
titanic_train.drop('PassengerId', axis=1, inplace = True)	1	1
df_test_features['Age']=df_test_features['Age'].fillna(mean_age)	1	1
dataset.Sex.fillna(-1, inplace=True)	1	1
allset['Salutation'] = allset['Salutation'].replace(['Capt', 'Col','Major', 'Sir'], 'Officer')	1	1
hf['y_val'].value	1	1
titanic_df['Male']=titanic_df[['Sex']].apply(get_male, axis=1)	1	1
titles_test.loc[b_mask].replace(patt2,'Mr.')	1	1
titanic['Group_size'] = titanic['Group_size'].astype(int)	1	1
model.add(Dense(7, activation='relu'))	1	1
df_train['Fare'] = df_train['Fare'].fillna(np.mean(df_train['Fare']))	1	1
train.loc[(train['Parch'] != 0), 'Alone'] = 0	1	1
train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()	1	1
train['Title'][train['Survived']==0].value_counts().sort_index()	1	1
X_te.copy()	1	1
combined['Ticket_Lett'] = combined['Ticket'].apply(lambda x: str(x)[0])	1	1
titanic_train_org.info()	1	1
x_test['Sex'] = sex_encoder.fit_transform(x_test['Sex'])	1	1
dataframe.reindex(np.random.permutation(dataframe.index))	1	1
"i[""Embarked""] = i[""Embarked""].fillna(""S"")"	1	1
"data.loc[data[""Fare""] >= 65, ""Fare_group""] = 1 # the patricians"	1	1
data['Title'] = data['Title'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dr', 'Jonkheer', 'Lady', 'Major', 'Rev', 'Sir'], 'Rare')	1	1
"df[""Title""] = df[""Title""].map({""Master"":0, ""Miss"":1, ""Ms"":1, ""Mme"":1, ""Mlle"":1, ""Lady"":1, ""Mrs"":2, ""Mr"":3, ""Rare"":4})"	1	1
comb_data.corr()	1	1
curr_row[0][5]	1	1
train['Title']=train['Name'].str.extract('([A-Za-z]+)\.',expand=False)	1	1
data_df['WomanChildTour'] = (temp_df['IsWoman'] >= 1) & (temp_df['IsChild'] >= 1)	1	1
data.iloc[:891] #891 data rows to training set	1	1
data['Embarked']=data['Embarked'].fillna('S')	1	1
names.loc[(names['rev'])==1,'mr'] = 1	1	1
train_losses.append(train_result['average_loss'])	1	1
"submission.to_csv(""titanic_submission_ensemble.csv"", index=False)"	1	1
dset['Age_Cat'] = pd.qcut(dset.Age, q = 4, labels = False)	1	1
train_data.drop(['Ticket'], axis=1)	1	1
"tr.drop(""Survived"", axis=1)"	1	1
"titanic_df.groupby(by=[""Pclass"",""Sex"",pd.cut(titanic_df[""Age""],years_range)]).mean()[""Survived""][3,0].plot.bar(ax=axes[2,0], title = (""Women Class 3"") )"	1	1
test['Cabin'] = test.Cabin.map(lambda x: x[0]).replace(' ', np.nan)	1	1
data_val.drop(['Embarked'], axis=1, inplace=True)	1	1
train['ticketlength'].value_counts()	1	1
train_df_dummies_Y.as_matrix()	1	1
df['F_Ultra'] = df['Fare'].map(lambda s: 1 if s > 200 else 0)	1	1
df_test['Age'].fillna((df_test['Age'].mean()), inplace=True)	1	1
df.loc[:,scols]	1	1
full_data['Cabin'].astype(str).str[0]	1	1
"train[""Age""][((train['Pclass'] == train.iloc[i][""Pclass""]))].median()"	1	1
test['Embarked']=embarkedEncoder.transform(test['Embarked'].transform(lambda e: e if isinstance(e, str) else 'NA'))	1	1
titanic_df.groupby(titanic_df['Embarked'].isnull()).mean()['Survived']	1	1
combined.head(891).Fare.fillna(combined.head(891).Fare.mean(), inplace = True)	1	1
dataset.loc[(dataset['Age'] > 30.263) & (dataset['Age'] <= 40.21), 'AgeBand'] = 3	1	1
test['Name_len'] = test['Name'].apply(lambda x: len(x))	1	1
df.drop(['PassengerId', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin'], axis=1)	1	1
train_df.drop(['PassengerId','Name','Ticket','Embarked','Cabin'], axis=1,inplace=True)	1	1
survived_data['Survived'].loc[survived_data['Pclass']==1]	1	1
plt.hist(accuracy_dict_et_val);	1	1
"processed_features[""Female""] = (dataframe[""Sex""] == 'female').astype(int)"	1	1
comb['Embarked'].fillna(comb.Embarked.mode()[0],inplace=True)	1	1
data.Age.fillna(-0.5)	1	1
res.sum()/res.count()	1	1
plt.hist(df12.Fare)	1	1
train_df['Sex'] = train_df['Sex'].replace(sex_map)	1	1
df_test.Embarked.replace('S','Q',inplace=True)	1	1
new_df.update(no_family.set_index('PassengerId'))	1	1
survived_pclass['Rate'] = survived_pclass[1]/(survived_pclass[1] + survived_pclass[0])	1	1
dataset['Age'][np.isnan(dataset['Age'])] = age_imp	1	1
train.Embarked.fillna('C')	1	1
train_copy['SibSp_Category'] = train_copy['SibSp_Category'].astype(int)	1	1
combined_data.iloc[:891]	1	1
"output_targets[""target""] =  df['Survived']"	1	1
raw_df['Cabin'] = raw_df['Cabin'].fillna('Unknown')	1	1
train['Fare_Range']=pd.qcut(train['Fare'],4) # to check the value for dividing fare	1	1
trainData.drop(labels='Cabin', axis=1,errors='ignore')	1	1
"df_test[""Fare""] = df_test[""Fare""].fillna(df_test[""Fare""].mean())"	1	1
train_df.join(pd.get_dummies(train_df.Embarked, prefix='Emb'))	1	1
train_dummies.iloc[:, [1,2,3,4,5,6,7,8,9,10]].values	1	1
df['Name'] = df['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
df_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].median()	1	1
"df_titanic[""SibSp""].value_counts()"	1	1
train['Embarked'] = train['Embarked'].fillna(train['Embarked'].mode()[0])	1	1
"df_train[""Ticket""]"	1	1
plt.rcParams['figure.figsize'] = [14.0, 6.0]	1	1
"dataset.drop([""Embarked""], axis = 1, inplace = True)"	1	1
n[5] = 1	1	1
models.append(model_att)	1	1
"dataset_med.loc[1,3][""Age""]"	1	1
"test[""Fare""] = test.Fare.fillna(test.Fare.median())"	1	1
df_test.loc[:, ['PassengerId', 'Pclass', 'sex_female', 'age_jnr', 'known_age']]	1	1
df_test.info() #Since this is the test set, the Survivors class is missing	1	1
df3_train.isnull().sum()	1	1
"total[[""Embarked"", ""Pclass""]].groupby([""Embarked""]).count()"	1	1
df_train.drop(['PassengerId', 'Survived'], axis=1)	1	1
"train[""Family_size""] = train[""Parch""].astype(np.int64) + train[""SibSp""].astype(np.int64) + 1"	1	1
train['Age'].plot.hist(bins=30)	1	1
test['Fare'] = test['Fare'].fillna(fare_mean)	1	1
numerical_columns.append('Poor_Old_Miss_First_Class')	1	1
data.loc[data.passenger_fare>50, ['Pclass', 'Survived']], aggfunc=np.count_nonzero,	1	1
train.Cabin.dropna().values[:30]	1	1
train_df[['Family', 'Survived']].groupby(['Family'], as_index=False).mean()	1	1
titanic.rename(columns={'Survived': 'class'}, inplace=True)	1	1
combine_df.columns.values.tolist()	1	1
ax[0].set_title('Passenger Breakdown Based on Port of Embarkation')	1	1
rawdata['Sex'][(rawdata.Sex != 'male') & (rawdata.Sex != 'female')].count()	1	1
titanic_test.drop(['PassengerId','Name','Cabin','Ticket'],axis=1)	1	1
sns.boxplot(x = 'age_range', y = 'fare', data=df_train, hue='survived')	1	1
survived_title.sort_values(by='Rate', ascending=False, inplace=True)	1	1
survivors['SibSp'].value_counts().sort_index()	1	1
models['set2']['num_attrs'] = ['Fare', 'Age']	1	1
fare.var()	1	1
model_data.loc[model_data.Cabin.notnull(),('Cabin','Cabin_Letter')]	1	1
age_model.add(Dense(1, activation='relu'))	1	1
titanic.loc[(titanic['Age']>26.00)&(titanic['Age']<=30.00),'NAge']=2	1	1
final_predictions.append(0)	1	1
titanic_train.groupby('FreqLastName').count().PassengerId.plot.bar()	1	1
train_df['Fare'].hist(bins=4)	1	1
np.sum(Y * np.log(y) + (1-Y) * np.log(1-y))	1	1
train['Age'] = train['Age'].fillna(age_for_na_values)	1	1
titanic_data['Title'] = titanic_data['Title'].fillna(0)	1	1
df['Fare'] = df['Fare'].fillna(np.mean(df['Fare']))	1	1
parameters['W5']	1	1
data.loc[data.Cabin.str[0] == 'A', 'Cabin'] = 1	1	1
model.add(Dense(50, kernel_initializer='uniform', activation='relu', input_shape=(nb_features,)))	1	1
test_clean.drop(['PassengerId'], axis=1).values	1	1
Sex.hist()	1	1
"df_train.loc[df_train['Name'].str.contains(""Miss"") & df_train.isnull().Age, 'Age'] = 10.0"	1	1
test.drop(columns=['PassengerId','Cabin','Name','Ticket'],inplace=True)	1	1
dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'AgeBand'] = 3	1	1
ax[4].scatter(df['Pclass'],df['Cabin'],s=200) # s : the size of the dotts	1	1
"train_data.loc[train_data[""Cabin""].notnull() & train_data[""Cabin""].str.contains(""F""), ""CabinLetterF""] = 1"	1	1
titanic_df['Alone'].loc[titanic_df['Alone'] > 0] = 'With Family'	1	1
X['Embarked'] = labelencoder_x2.fit_transform(X['Embarked'])	1	1
test_data['Cabin'].fillna('0', inplace=True)	1	1
"sol.to_csv(""lr.csv"", index=False) # 0.74641, 0.75598,"	1	1
X.Sex.apply(lambda x: 0 if x == 'male' else 1)	1	1
dataset.iloc[:, [1,3,4,5,6,10]].values	1	1
"data[""Age""].copy()"	1	1
test_data.ix[152]	1	1
test_set['Fare'] = test_set['Fare'].fillna(use_fare['Fare'].iloc[0]);	1	1
target_columns.append('Ticket_Count')	1	1
"train['title']=train['Name'].str.split("","", expand = True)[1].str.split(""."",expand = True)[0]"	1	1
train_df['Sex'] =='male'	1	1
titanic_train.dropna(inplace=True)	1	1
train_df['FareBand'] = pd.qcut(train_df['Fare'], 5)	1	1
"train_data[""Fsize""] = train_data[""SibSp""] + train_data[""Parch""]"	1	1
"plt.rcParams[""figure.figsize""] = (10, 7)"	1	1
data_copy['Age'] = data_copy['Age'].fillna(data_copy['Age'].median()) #fillna--填充空值	1	1
target_columns.append('Cabin_Letter')	1	1
test.drop(droppings, 1, inplace = True)	1	1
xy_train['Alone'] = xy_train.apply(alone, axis=1)	1	1
"dataframe[""Cabin""] = pd.Series([i[0] if not pd.isnull(i) else np.nan for i in dataframe['Cabin']])"	1	1
index[0] if X[c].dtype == np.dtype('O')	1	1
"sns.boxplot(x='Pclass',y=""Age"",data=train)"	1	1
test['Embarked'][test['Embarked']=='C']=1	1	1
titanic_df['Fare'][titanic_df['Survived']==0]	1	1
"train[""Fare_3""] = (40 <= train[""Fare""])&(train[""Fare""]<100)"	1	1
a.loc[(a['Fare'] <= 7.91), 'Fare'] = 0	1	1
df_test['FarePPBin'].unique()	1	1
"train.loc[train[""Title""]==key, ""Title""] = val"	1	1
"X[""Sex""] = encoders['sex'].transform(X[""Sex""])"	1	1
train[['Sex', 'SibSp', 'Parch']].values	1	1
P.iloc[:,i] = m.predict_proba(X)[:,1]	1	1
test_data[['PassengerId', 'Predictions']].copy()	1	1
test_df.loc[(test_df.Embarked.isnull()), 'Embarked'] = 'S'	1	1
train_data_only_first_class_female_Cherbourg_age.ix[~(train_data_only_first_class_female_Cherbourg_age['Age'] == age)]	1	1
dataframe1['AgeBin']=pd.cut(dataframe1['Age'],5)	1	1
"df_test[""cab""].fillna(value=""z"",inplace=True)"	1	1
data.drop('Name', inplace=True, axis=1)	1	1
trainData['Age'].plot.hist(ax=axs3[0], figsize=(12, 6), fontsize=16)	1	1
train_df['Name_len'] = train_df['Name'].apply(lambda x: len(x)).astype(int)	1	1
train.loc[(train['Fare']>60),'PaxclassB'] = 0	1	1
ax[1].set_title('Survivors in Titanic')	1	1
df_test['Embarked'] = df_test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
train_data.groupby(['SibSp','Survived']).SibSp.count().unstack()	1	1
train_df_Y.as_matrix()	1	1
"titanic[""Embarked""] = titanic[""Embarked""].fillna(0)"	1	1
"titanic.drop(""Name"", axis=1, inplace = True)"	1	1
data.groupby(['Fare_range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')	1	1
featstats['featstd'] = np.std([tree.feature_importances_ for tree in clf.estimators_], axis=0)	1	1
train_df.Name.apply(len).max()	1	1
"train[""Survived""].map({0: ""dead"", 1: ""alive""}).value_counts()/len(train)"	1	1
df_all['Embarked'] = df_all['Embarked'].fillna('C')	1	1
ax[0].set_title('Total No Embarked Passengers from given Location')	1	1
X['Embarked'] = enc.fit_transform(X['Embarked'])	1	1
"x_copy[""Title""] = titles"	1	1
"mean_submit.to_csv(""mean.csv"", index=False) # Kaggle: 0.75598"	1	1
combined.groupby('Pclass').mean()['Fare']	1	1
i['Title'] = i['Title'].replace(['Countess', 'Lady', 'Sir'], 'Honararies')	1	1
raw_train.loc[raw_train['Cabin'].isnull(), 'Cabin'].size	1	1
"test_p['Age_new'][test_p[""Age""]>60] = 2"	1	1
"df_train[""norm_fare""].describe()"	1	1
test_data['Suffix'] = test_data['Suffix'].replace('Mlle', 'Miss')	1	1
x['FreqFare'] < max_group:	1	1
df.pivot_table(values = 'Survived', index = 'Cabin').Survived.plot.bar()	1	1
train_ds.head(8)	1	1
pd.isnull(cabin) else cabin: i	1	1
train_data['Ageband'] = pd.cut(train_data.Age.dropna(), 5, labels=[0,1,2,3,4])	1	1
"test[""Family_Size""] = test[""SibSp""] + test[""Parch""] + 1"	1	1
np.sum(women_onboard) / np.size(women_onboard)	1	1
features['Embarked'] = features['Embarked'].map( {'S': 0, 'C': 1, 'Q':2},na_action=None )	1	1
"df.loc[df[""title""].isin([""Rev."", ""Capt."", ""Don.""]), ""title""] = ""not_survived"""	1	1
data_test.loc[data_test['Fare'].isnull(),'Fare'] = mean_fare	1	1
train[['SibSp','Survived']].groupby('SibSp',as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
kaggle_data.sort_values(by=['PassengerId']).to_csv('kaggle_out_svc_names.csv', index=False)	1	1
data['Sex'] = data['Sex'].astype('category')	1	1
test['AgeBand'].astype(int);	1	1
train_features.as_matrix()	1	1
df.loc[(df.Age.isnull()),'Age'] = predictedAges	1	1
"titanic_df.loc[titanic_df.Salutation == 'Miss','Age'] = titanic_df['Age'].fillna(means[""Age""][""Miss""])"	1	1
dataset.loc[dataset['Age'] <= 10, 'Age'] = 0	1	1
X_test['Age'] = Norm(X_test['Age'])	1	1
X.loc[test_index]	1	1
test_df1.dropna(axis=0, how='any', subset = ['Embarked'])	1	1
"titanic.drop([""Ticket"",""Cabin""], axis=1, inplace=True)"	1	1
xgb_model['CVScore'],	1	1
df_test.drop('male',axis=1,inplace=True)	1	1
X.loc[(X['Age'] > 16) & (X['Age'] <= 32), 'Age'] = 1	1	1
res_df_tol['Sl'] = res_df['Sl'].astype(np.uint16)	1	1
"traindat[""Cabin""]"	1	1
training_df['Survived']	1	1
data_combined['AgeClass'].value_counts()	1	1
cv_score_gs.append(gs.best_score_)	1	1
le.transform(tmp[i])	1	1
x_train['Sex'] = x_train['Sex'].replace(['male','female'],[1,0])	1	1
titanic_train_dataframe.reindex(np.random.permutation(titanic_train_dataframe.index))	1	1
cabin['Survived'].groupby(cabin['Header']).value_counts().unstack()	1	1
"inDF[""Maturity""] = pd.qcut(inDF['Age'].astype(int), 4)#inDF[""Age""].apply(lambda x : ""Unknown"" if x==0 else ""toddler"" if x<2.0 else ""kid"" if x<10.0 else ""youth"" if x<18.0 else ""adult"" if x < 65.0 else ""elderly"")"	1	1
test['is_male'] = test.Sex.map({'male': 1, 'female':0})	1	1
data_df['Ticket_Len'] = data_df['Ticket'].apply(lambda x: len(x))	1	1
"total_result.loc[family_in_test, ""Survived""]= (total_result.loc[family_in_test,  [""RF"",""GBT"",""Bagging"",""Adaboost""]].sum(axis=1) == 3).astype(int)"	1	1
"Titanic_submission.to_csv(""Titanic_compet_submit_3.csv"", index = False)"	1	1
df['Title'] = df['Name'].map(lambda x: substrings_in_string(x, title_list))	1	1
test['Age'] = imputer.transform(test_X)	1	1
allfeat['FamilySize'] = allfeat['SibSp'] + allfeat['Parch'] + 1	1	1
train_model[['Pclass','Sex','Embarked','IsAlone','Title','FareBin','AgeBin']]	1	1
np.where(self.n_input(x) >= 0.0, 1, -1)	1	1
df2_final.values	1	1
"dataframe[""Age""].isnull().sum()"	1	1
pg.join(df)	1	1
dfTest.fillna(dfTest.mean(), inplace=True)	1	1
df['Familysize'] = df['SibSp'] + df['Parch'] + 1	1	1
df[['Embarked', 'Pclass', 'Survived']].groupby(['Embarked','Pclass']).mean()	1	1
test_df.drop(['Name','Ticket'], axis = 1)	1	1
full_data['Title'].value_counts()	1	1
df['Alone'] = df['FamilySize'].map(lambda s : 1 if s == 1 else 0)	1	1
submission.drop(labels='Cabin', inplace=True, axis=1)	1	1
age['Age_Categorized_Unknowns'] = pd.cut(age.Age.fillna( -0.5 ), logical_age_bins, labels=logical_age_group_names)	1	1
rfc_params['verbose'] = 0	1	1
p.insert(1,'Survived',x)	1	1
full_data['Title'] = full_data['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
combined_data['Sex'] = combined_data['Sex'].map({'male':1,'female':0})	1	1
train.drop(train[(train['Survived'] == 1) & (train['Fare'] > 400)].index)	1	1
"X_cat.drop(""Ticket"", 1)"	1	1
mscores.append(mscores2)	1	1
train['Sex'].replace('female', 0, inplace = True)	1	1
"train_df.loc[train_df[""PassengerId""]==62.0,""Embarked""]='S'"	1	1
allset.loc[allset['TotalFamily']==0,'FamilyBucket']='Single'	1	1
df['u_noise']       = pd.cut(df.u_noise,11, labels=range(11))	1	1
cv_stats.iloc[idx:idx + 1][list_metric_names]	1	1
"dataset[""title""] = dataset[""title""].replace(rare_title, ""Rare"")"	1	1
"in [""Fare"", ""Embarked""]:"	1	1
df_features.iloc[df1.shape[0]:,:]	1	1
df.groupby(['Pclass', 'Sex', 'Embarked']).Fare.mean()	1	1
"df[""Alone""] = (df.Parch + df.SibSp == 0).astype(np.uint8)"	1	1
test['Name'].str.extract(' ([A-Za-z]+)\.')	1	1
test_p['Age_new'] = 1	1	1
train.copy(deep = 'True')	1	1
test.shape #칼럼 한개가 적다 = survived	1	1
df.dropna(subset=['Age', 'Parch', 'SibSp', 'Sex'])	1	1
train_copy['Parch_Category'] = train_copy['Parch_Category'].astype(int)	1	1
"test.loc[test[""Name""].str.contains(""Master""), ""Master""] = True"	1	1
"test[""Cabin""].isnull().sum()   # count_nan_cabin_test = 327"	1	1
"out.to_csv(""output.csv"", index=False)"	1	1
"train_df.loc[train_df[""Title""] == ""Mme"", ""Title""] = 'Mrs'"	1	1
"pd.pivot_table(train,index=[""Survived"", ""Age""], values=[ ""Unit""],aggfunc=np.sum)"	1	1
df_train.drop(['Cabin'], axis=1)	1	1
row['Sex'] == 'male' and (row['Pclass'] == 1 or row['Pclass'] == 2) and row['Age'] < 16:	1	1
df_test.drop('Cabin',axis =1, inplace=True)	1	1
test['Cabin_Num'] = test['Cabin'].str.extract('(\d+)')	1	1
train_data.set_value(index,'AgeRange','>60')	1	1
grid.best_params_['C']	1	1
"train_set.drop([""Survived"", ""ind_indx"", ""ind_"", ""PassengerId""], axis = 1)"	1	1
train.to_csv('train_clean.csv', index=False)	1	1
data.iloc[891:,:]	1	1
ax[0].set_title('Population Pclass Breakdown')	1	1
train.drop(columns=['PassengerId','Ticket','Cabin'], axis=1, inplace = True)	1	1
topTwenty.values	1	1
"dataframe[""Ticket""] = Ticket"	1	1
acc_dtree.std()	1	1
actual['Survived'] == predictions	1	1
df_test.drop(['Cabin'], axis=1)	1	1
train.loc[train['FamilySize'] >0, 'IsAlone'] = 1	1	1
validation_labels.values	1	1
trainData.groupby(['Embarked']).count()['Survived'].reset_index()	1	1
data_copy.loc[data_copy['Sex']=='female','Sex']=0 #loc can access a group of rows and columns by labels	1	1
Survived.corr(train_df['Title'])	1	1
dataset['Age'].fillna(value=dataset['Age'].median(), inplace=True)	1	1
parameters['print'] and (epoch % parameters['print_freq'] == 0):	1	1
"test.drop(labels=[""source""],axis = 1,inplace=True)"	1	1
"test_df[""Name""]"	1	1
dataset.iloc[:,1:13].values	1	1
dataset['Fare'] = dataset['Fare'].astype(float).dropna(axis=0, how='any')	1	1
data.loc[(data['Age'] > 17) & (data['Age'] <= 21), 'SortAge_3'] = 1	1	1
df.loc[index,'Babord']=1	1	1
E_Value[['Fare','Embarked']].groupby(['Embarked']).mean()	1	1
df.loc[mrs_title & unknow,'Age'] = df[mrs_title]['Age'].mean()	1	1
data_titanic_mod1['Survived']	1	1
"train_df[""Fare""].fillna(train_df[""Fare""].mean(), inplace=True)"	1	1
"data_copy[""Pclass""] = data_copy[""Pclass""].fillna(data_copy[""Pclass""].median())"	1	1
train.drop(['PassengerId'], axis=1) #인덱스 필요없음	1	1
dataset.loc[dataset['Fare']>31.0,'Fare'] = 3	1	1
submission.to_csv('xgbStacked.csv', index=False)	1	1
df_test['ticketcount'] = df_test['ticketcount'].fillna(1)	1	1
train_df.loc[(train_df['FamMembers'] >= 2) & (train_df['FamMembers'] <= 4), 'FamSize'] = 'small (2-4 members)'	1	1
dftr['Name']	1	1
train_X.drop(columns='Sex_female')	1	1
train['CategoricalFare'] = pd.qcut(train['Fare'], 4, labels=[1,2,3,4])	1	1
"train.loc[train[""Survived""]==0, [""Pclass"",""Sex"",""PassengerId""]]"	1	1
model_df['cv_std'] = cv_std	1	1
tmp_data_df['AgeBin'] = pd.qcut(tmp_data_df['Age'], 5, duplicates='drop')	1	1
x['FreqCabin'] > 1 and x['Cabin'] != 'U':	1	1
test.drop(['Name','Ticket','Embarked','Cabin','Sex'],axis=1)	1	1
train_df.drop(['PassengerId'],axis=1).corr()	1	1
df_train['Embarked'].fillna(value='S', inplace=True)	1	1
dftrain.drop('Age_bin',axis=1)	1	1
train.drop(['AgeBand'],axis=1)	1	1
"age_survived.plot.hist(fc=(0, 0, 1, 0.5), normed=1, label=""Survived"")"	1	1
scaler.transform(testX)	1	1
dataset['FareBin_Code']=label.fit_transform(dataset['FareBin'])	1	1
titanic.groupby(['Ticket_len']).Survived.mean()	1	1
df.loc[df.Survived == -888, columns]	1	1
df_predict['Initial']=df.Name.str.extract('([A-Za-z]+)\.')	1	1
np.std(feats)	1	1
df_all.values #returns a numpy array	1	1
test_data['Male']=test_data['Sex'].map({'male':1,'female':0})	1	1
combined_data['Name_title'] = combined_data['Name'].map(lambda name : name.split(',')[1].split('.')[0].strip())	1	1
series.fillna(series.mean())	1	1
df['Name'].str.split(',')	1	1
dataset['Title'] = dataset['Title'].replace('Mrs', 'Mrs')	1	1
train_data.describe(include=[np.object])	1	1
train_data.sample(3)	1	1
"df_train.drop(""Cabin"", axis=1, inplace = True)"	1	1
test_df.drop(['PassengerId', 'Pclass', 'Name', 'Title', 'Sex', 'Ticket', 'Embarked', 'CabinChar', 'Cabin', 'noTicketRef'], axis=1)	1	1
train.groupby(['Survived','Pclass']).count()['PassengerId']	1	1
train_df.ix[(train_df.Fare <= 10),'Fare2'] = 1	1	1
np.add(par_data, 1.0)	1	1
data['Embarked_code'] = encoder.fit_transform(data['Embarked'])	1	1
train_df.drop(['Person'], axis=1, inplace=True)	1	1
tr['Title'] =tr['Title'].replace('Don',4)	1	1
df['Fare'] = df['Fare'].fillna(df_train['Fare'].median())	1	1
titanic_df['Southampton']=titanic_df[['Embarked']].apply(get_southampton, axis=1)	1	1
dataset['Cabin2'][i]=choice(first_class_sample)	1	1
train['Age']=train['Age'].fillna(train['Age'].median(skipna=True))	1	1
"dt.to_csv(""submit.csv"", index = False)"	1	1
titanic.drop(['Fare','Pclass'], axis=1)	1	1
"train.drop(""Fare"",axis=1)"	1	1
train_df.drop('Age', 1, inplace=True)	1	1
data['Family']=data['SibSp']+data['Parch']+1	1	1
test_set.drop('Name', axis=1)	1	1
axes[0].set_title('% of Passengers per Cabin Deck', fontsize=15)	1	1
test['Male'] = pd.get_dummies(test['Sex'], drop_first=True)	1	1
"sns.boxplot(x=""embarked"", y=""age"", hue=""pclass"", data=df, ax=ax);"	1	1
res_df.to_csv('output.csv', index = False)	1	1
train['Survival'] = train.Survived.map({0: 'Died', 1: 'Survived'})	1	1
"train.loc[train[""Age""] < 15, ""Child""] = True"	1	1
train_clean.drop(['data_label', 'Name', 'Ticket', 'Cabin'] + var_drop_list, axis=1)	1	1
train.loc[ train['Age'] > 60, 'Age'] = 6 #Senior	1	1
"train_test.drop(""Survived"", axis = 1)"	1	1
t_df.info()	1	1
raw_test.shape[0], raw_train.shape[0]	1	1
output.to_csv('prediction.csv')	1	1
"train[""Sex""] = train[""Sex""].map({""male"" : 0, ""female"" : 1})"	1	1
"full_data[""SingleMale""][((full_data[""Parch""] + full_data[""SibSp""]) >  0) & (full_data[""Sex""] == 'male')] = 1"	1	1
Titanic_Master['Fare'][Titanic_Master['Fare']>=lower_quartile-1.5*iqr].min()	1	1
df_test['NameLen'] = [len(n) for n in df_test['Name']]	1	1
data.loc[data['Embarked'] == 'C','Embarked'] = 1	1	1
train[['Pclass','Survived']].groupby(['Pclass'], as_index=False).mean()	1	1
"train[""Survived""][train[""Sex""]=='male'].value_counts()"	1	1
testDataFeatures['Survived'].head(15)	1	1
df['Parch'] = Parch	1	1
df.loc[df['TyCabin'].isnull(), 'TyCabin'] = 'N'	1	1
tt['Title'] = tt['Title'].apply(lambda x: 'Rare' if title.loc[x] == True else x)	1	1
df['Title_x'] = df['Title_x'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
titanic_train['Age'] = titanic_train['Age'].astype(int)	1	1
data['Embarked_Code'] = label.fit_transform(data['Embarked'])	1	1
"test_df.loc[(test_df[""Age""]>48)&(test_df['Age']<=64),'Age']=3"	1	1
full.iloc[nTrain::,:]	1	1
df.drop(['SibSp','Parch'],axis=1)	1	1
axes[0].bar(data.index, data, color='orange')	1	1
train.drop('FamilyCategory', axis=1, inplace=True)	1	1
train_df.drop('Sharedticket2', 1, inplace=True)	1	1
df_clone.iloc[fold[1]]	1	1
dataset.iloc[:, 1:9].values	1	1
df_data['Mother'] = (df_data['Title'] == 'Mrs') & (df_data['Parch'] > 0)	1	1
train_x.tail(validate_num)	1	1
train['EmbarkedAtC'] = train['Embarked'].apply(groupembarked) #I didn't fill the NaN value so we can't use map	1	1
df_train['Age'].hist(bins=35)	1	1
all_data['Title'] = all_data['Title'].fillna(0)	1	1
df_data['Title'] = list(map(lambda x:'Rare' if title_counts[x] < 10 else x, df_data['Title']))	1	1
"titanic.drop(""Cabin"",inplace=True,axis=1)"	1	1
train_age.dropna()	1	1
test_ToPred['Cabin'].fillna('Z' , inplace=True)	1	1
titanic['Parch']=df_train['Parch']	1	1
full_df.dtypes[full_df.dtypes == 'object'].index.tolist():	1	1
axes[1].hist([training_data.Age, pass_survived_age, pass_dead_age], bins=5, range=(0, 100), label=['Total', 'Survived', 'Dead'])	1	1
dataTest['Pclass'] = pclass_scaled_test	1	1
concat_set['CategoricalFare'] = pd.qcut(concat_set['Fare'], 4)	1	1
"X_test.drop(""Age Group"", axis = 1)"	1	1
train.Age.astype(str)	1	1
data['Age'].replace(np.nan, age_mean, inplace=True)	1	1
"test_d['Title'][i]=(test_d['Name'][i].split("","")[1]).split(""."")[0]"	1	1
new_train_df['Survived']	1	1
df_analysis.groupby(['family_size', 'ticket_share']).agg({'Survived':['mean','std', 'count']})	1	1
"merged_data[""family_size_category""] = le.fit_transform(merged_data[""family_size_category""])"	1	1
dataset.loc[(dataset['Age'] > 42) & (dataset['Age'] <= 60), 'Age'] = 3,	1	1
age['Age_x'].combine_first(age['Age_y'])	1	1
in ['Pclass', 'Sex', 'Embarked', 'SibSp', 'Parch']:	1	1
train.pivot_table(index='Sex',values = 'Survived')	1	1
df_temp.pivot(index='AgeCat', columns='Survived', values='Count')	1	1
"submission.to_csv(""submission_2.csv"",index=False)"	1	1
"submission.to_csv(""titanic2.csv"", index=False)"	1	1
df['Fare_standard_score_with_Pclass'] = df.apply(lambda row: (log(row['Fare'] + very_small_val) - log(class_fare.loc[row['Pclass'], 'mean'] + very_small_val)) / log(class_fare.loc[row['Pclass'], 'std'] + very_small_val), axis=1)	1	1
y_train.astype(int)	1	1
dataset.Age[0:10]	1	1
df_data.loc[(df_data['Fare'].isnull()) & (df_data['Embarked'] == port), 'Fare'] = fare_to_impute	1	1
dataset.Fare.fillna(dataset[dataset.Pclass == 3].Fare.median(), inplace=True)	1	1
X_train['Sex'] = labelencoder_y.fit_transform(X_train['Sex'])	1	1
titanic_train.Cabin.values[i][0]	1	1
titanic_df['TicketClass'] = titanic_df['Ticket'].apply(ticket_class)	1	1
df_test['Sex'] = df_test['Sex'].map(sex_mapping)	1	1
x_test_df.sample(4)	1	1
"data_train[""Age""].plot(kind=""hist"", title=""Ages of Titanic Passengers"")"	1	1
train_clean['Sex'] =  train_clean['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
data['Fare'] = lbl.fit_transform(data['Fare'])	1	1
train['family'] = train.Parch + train.SibSp	1	1
"test[""CabinBool""]=(test[""Cabin""].notnull().astype('int'))"	1	1
test_data['Age'][np.isnan(test_data['Age'])] = random_1	1	1
train_data.drop(['Name',  'Fare', 'Embarked'],axis=1)	1	1
clf.add(Dense(50,activation='relu',input_shape=(50,1)))	1	1
"combined.pivot_table(index=[""Pclass"",""Embarked""],values='Fare').copy()"	1	1
"ship['Embarked'].value_counts() ## Memorize the ""value_counts"" function as it is used quite often"	1	1
df_train[['SibSp_0_1_2over', 'Survived']].groupby(['SibSp_0_1_2over']).mean()	1	1
titanic.drop(['SibSp','Parch'], axis=1)	1	1
test_csv.loc[test_csv.Name.str.contains('Mrs') & (test_csv.Parch>0), 'Mother'] = 1.0	1	1
X.drop(['SibSp','Parch'], axis = 1, inplace=True)	1	1
df_output['PassengerId'] = orginal_test['PassengerId']	1	1
pd.pivot_table(tit_df, values = 'Survived',                     index = ['SibSp', 'female'],                     columns=['Pclass'],                     aggfunc='count')	1	1
pd.DataFrame.as_matrix(dfTrain[['Pclass','Age','Sex','Fare']])	1	1
"titanic_df.groupby(by=[""Pclass"",""Sex"",pd.cut(titanic_df[""Age""],years_range)]).mean()[""Survived""][2,0].plot.bar(ax=axes[1,0], title = (""Women Class 2"") )"	1	1
titanic['Sex']=pd.get_dummies(titanic['Sex'], drop_first=True)	1	1
data.distinction_in_name.apply(lambda x: 1 if x else 0)	1	1
full['Cabin_Letter'] = cabin.Cabin_Letter	1	1
plt.hist(data_train['Survived'] )	1	1
"test[""Sex""] = sex.reshape(-1,1)"	1	1
data.loc[(data['Survived']==1) & (data['Sex']=='female') & (data['Age'])].mean()	1	1
data_test.drop(['Name','Ticket'], axis=1)	1	1
data_train['Age_bins'] = le.transform(age_qcut_train)	1	1
df['Fare'].values.reshape(-1, 1),	1	1
test_csv.head(5)	1	1
"test_set[""Familysize""] = StandardScaler().fit_transform(test_set[""Familysize""].values.reshape(-1,1))"	1	1
train.groupby('Cabin Area').mean()	1	1
tr['Title'] =tr['Title'].replace('Col',4)	1	1
test['Fare'].fillna(train.groupby(['Pclass'])['Fare'].transform('median'), inplace = True)	1	1
df['Cabin_num1']	1	1
test_df.tail(5)	1	1
train_dataset.loc[train_dataset['Age']<= 16,'Age']=0	1	1
test_data.Fare.fillna(test_data.Fare.median())	1	1
survived_sibsp.sort_values(by='Rate', ascending=False, inplace=True)	1	1
"dataset.drop(""Age"", axis= 1, inplace = True)"	1	1
df_comb.loc[df_comb.Cabin.notnull() & df_comb.Cabin.str.contains('F'), 'Cabin']	1	1
"df_submit.to_csv(""xgboost_submission.csv"", index=False)"	1	1
X_test_add.shape	1	1
data_df['FareBin'] = pd.qcut(data_df['Fare'], 5)	1	1
data.Survived.count(),	1	1
test_df['Alone']=0	1	1
test.Fare.iloc[152] = test.Fare.dropna().median()	1	1
maindf.drop(['PassengerId','Survived','Name','Ticket','Cabin','Embarked','Fare'],axis=1)	1	1
df_train['CategoricalFare'] = pd.cut(df_train['Fare'], 4)	1	1
train.Embarked.fillna(train.Embarked.value_counts().idxmax(),inplace=True)	1	1
np.round(accuracy_score(y_train, y_pred), 4),	1	1
"test[""Embarked_C""] = False"	1	1
train['Survived'].as_matrix(),	1	1
train_df[['Fare', 'Survived']].groupby(['Fare'], as_index=False).mean().sort_values(by='Fare', ascending=True)	1	1
df.iloc[0,2]/df.iloc[:,2].sum()*100	1	1
df_FULL[['Age', 'Fare']] = imputer.transform(df_FULL[['Age', 'Fare']])	1	1
missing_data2.iloc[:,[0,1,3,4,5]].values	1	1
train.groupby('Title')['Survived'].mean()	1	1
"titanic_train_dataset[""CabinFloorScore""].loc[titanic_train_dataset['CabinFloor'] == ""B""] = 5"	1	1
data_df.loc[(data_df['Tour'] == '-1') | (data_df['WomanChildTour'] == False), 'SurvivedTour'] = -1	1	1
"test.loc[test[""Sex""] == 1, ""Sex""] = ""female"""	1	1
titanic_test_data[['Fare']] = titanic_test_data[['Fare']].fillna(titanic_test_data['Fare'].mean())	1	1
dfcopy.assign(FareCluster = results.predict(X))	1	1
train['FamSize'] = train['Parch'] + train['SibSp'] + 1	1	1
Train_survived.is_copy = False	1	1
"combined[""Survived""][:891]"	1	1
"data.loc[(data[""Fare""] > 7.91) & (data['Fare'] <= 14.454), 'Fare'] = 1"	1	1
X.fillna(self.most_frequent_)	1	1
test7['Ticket'] = le.transform(list(test7['Ticket'].values))	1	1
train.drop(columns = ['Pclass'])	1	1
df_test['Port']	1	1
titanic_data.loc[(titanic_data['Age'] > 32) & (titanic_data['Age'] <= 48), 'Age'] = 2	1	1
dataset.loc[(dataset['Fare'] > 39.688) & (dataset['Fare'] <= 77.958), 'Fare'] = 8	1	1
plt.hist([train[train.Survived == label].Age.dropna().values for label in [0,1]],          stacked=True,bins=80,color=['red','green'], label=['red','green'])	1	1
"results[""Model""],top=x,"	1	1
test_df['maleadult'] = ((test_df.Age>15)&(test_df.Sex_d==1)).astype(int)	1	1
"submission_df.to_csv(""submission_best_xg.csv"", sep=',')"	1	1
train.Ticket_Num.isnull().sum()	1	1
test_recoded.drop(columns_to_drop, axis=1, inplace=True)	1	1
train.loc[train.Family_Size==0,'Alone']=1#Alone	1	1
train_data.drop('Fare_stage', axis=1)	1	1
test['Embarked'] = test['Embarked'].map(embark_encode)	1	1
test_df.loc[(test_df['Fare'] > 14.454) & (test_df['Fare']<=31),'Farecat'] = 2	1	1
"test_df[""Sex""] = test_df[""Sex""].apply(sex_indexer)"	1	1
data.loc[(data['Age'] < 35) & (data['Age'] > 15.9), 'Age'] = 2	1	1
df_submission['ticket_length'] = df_submission['ticket_length'].astype('float')	1	1
copy.values	1	1
"dat.loc[(dat[""SibSp""]>0) | (dat[""Parch""] >0), ""isAlone""] = 0"	1	1
test_with_age['Age'].values	1	1
x_train.shape[1], units=128,	1	1
d_t.drop(['male'],axis=1)	1	1
dicts['Sex'] = list(label.classes_)	1	1
dataset.loc[(dataset['Fare']>7.91)&(dataset['Fare']<=14.454),'Fare']=1	1	1
train_csv.loc[(train_csv.Name.str.contains('Miss') & train_csv.Age.isnull()), 'Age'] = Miss_average_age	1	1
train.drop(['Name'], axis=1, inplace=True)	1	1
data1['Survived']    # return a series	1	1
"train.set_index([""Pclass"",""Sex""],inplace = True)"	1	1
new_test_data.drop(['Age'], axis=1)	1	1
data_set['Pclass'].isnull().values.any()	1	1
test_copy.loc[(test_copy['Fare'] > 7.9104) & (test_copy['Fare'] <= 14.4542), 'Fare_Category'] = 1	1	1
train.drop('Sex',inplace=True,axis=1)	1	1
Cabin_dummy['T']	1	1
combo['FamilyCount'] = combo['SibSp'] + combo['Parch'] + 1	1	1
fare_sur['Survived'].tolist(),	1	1
test_df.Age.hist(bins = 30, ax=axes[1])	1	1
test_set.loc[test_set['Sex'] == 'female', 'Sex'] = 1	1	1
"titanic_df.groupby(""SibSp"").mean()[""Survived""].plot.bar()"	1	1
lr_oof_test_l1f1.astype(int),ada_oof_test_l1f1.astype(int),	1	1
df['Man'] = (df[df.Sex == 'male'].Age >= age_cutoff).astype(int)	1	1
label.transform(data.Sex)	1	1
dataset.loc[(dataset['Fare'] > 9.5) & (dataset['Fare'] <= 52.4), 'Fare'] = 1	1	1
"train[""Sex""]=le.fit_transform(train[""Sex""].values)"	1	1
df_test['Fare'] = df_test[['Fare','Pclass']].apply(impute_fare,axis=1)	1	1
test['Fare']  = test['Fare'].astype(int)	1	1
data.groupby(['Title']).mean()	1	1
dataset.iloc[:,0:1].values	1	1
dataset.loc[(dataset['Fare'] > 27.0) & (dataset['Fare'] <= 39.688), 'Fare'] = 7	1	1
"train[""Title""] = [i.replace('the Countess', 'Nobility') for i in train.Title]"	1	1
test_df.drop('PassengerId', 1)	1	1
"train.loc[train[""Age""].isnull(),""Age""] = train[""Age""].mode()[0]"	1	1
train.groupby(['title','Sex']).Age.mean()	1	1
submission01.to_csv('submission01.csv',index=False)	1	1
"age[""Between12And16""] = ((age[""Age""] >= 12) & (age[""Age""] < 16)).astype(int)"	1	1
"X_train.drop(""CabinBool"", axis = 1)"	1	1
answer_df['PassengerId'] = test['PassengerId']	1	1
df_train_labels.values	1	1
titanic.iloc[:,6]	1	1
"dataset['Title'] = [x[1].split(""."")[0].strip("" "") for x in dataset['Name'].str.split("","")]"	1	1
dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age2'] = 1	1	1
"in [""Pclass"",""Sex"",""Age_categories"",""Embarked"",""Fare_categories""]: #Columns who diveded"	1	1
x_t_c.head()	1	1
train['Sex'] = train['Sex'].apply(gender_digit)	1	1
train_dataset.loc[i, 'PassengerId'] == PassengerID_toDrop_AgeNull[j]:	1	1
grouped_data.size().unstack()	1	1
test['FareBand'] = test[['Fare','Pclass']].apply(fare_bander,axis=1)	1	1
"df3.style.set_caption(""Female without immediate family"")"	1	1
"train[""AgeGroup""][x] = age_mapping[train[""Title""][x]]"	1	1
train.drop(['Survived','SibSp','Parch','Embarked','Age','Fare','famSize'],axis=1) #Age, Fare	1	1
dataFrame['Embarked'] = dataFrame['Embarked'].fillna('S') #Replace empty values in Embark with 'S'	1	1
test_data_1.loc[fare_null_filter,]	1	1
age_dist.copy()	1	1
testfn.head()	1	1
df_train.describe(exclude='number')	1	1
df['GroupSize'] = 1	1	1
df_test.drop(['PassengerId','Ticket'],axis=1,inplace=True)	1	1
df['group_count']   = df['group_count'].astype(group_count_cat)	1	1
train_data.pivot_table(values='Survived',index=['Pclass','Embarked'],columns='Sex',margins=True,margins_name='Total')	1	1
titanic_data.loc[:, feature_columns]	1	1
"test_data.drop(""PassengerId"",axis=1).copy()"	1	1
raw_test_df['Fare'].replace(np.nan, mean_fare, inplace=True)	1	1
test['CategoricalFare'] = pd.qcut(test['Fare'],4)	1	1
y_pred_all_1.head()	1	1
df.loc[ df['FamilySize']==1 , 'isAlone'] = 1	1	1
train_df['Age_bins'] = pd.cut(train_df['Age'],bins = age_bins, labels = age_labels, include_lowest = True)	1	1
"combined.loc[pid,""n_cabin_mates""] = 1"	1	1
new_combined_data.head()	1	1
test_df.drop(['Parch','SibSp'], axis = 1)	1	1
df['Age_Missing'] = df.apply(age_missing,axis=1)	1	1
df_features['FamilySize'] = df_features['SibSp'] + df_features['Parch']	1	1
df_train['FamilyName'].value_counts()	1	1
algorithm_results.loc[index, 'Name'] = name	1	1
"df[""Sex""].value_counts()"	1	1
"df.loc[:, ""Survived""] = np.vectorize(lambda x: 1 if x > thresh else 0)(sigmoid(df.as_matrix().dot(theta)))"	1	1
X_test.min()	1	1
data.loc[(data['FamilySize'] > 1) & (data['FamilySize'] <= 4), 'Family'] = 2	1	1
data_all['Fare'] = data_all['Fare'].fillna(data_all['Fare'].mean())	1	1
test['EmbarkedAtC'] = test['Embarked'].apply(groupembarked)	1	1
np.dot(W2, A1) + b2	1	1
"df[""en_sex""]=ls.transform(df[""Sex""])"	1	1
df['CabType'].unique()	1	1
"dat[""tick_other""] = dat['Ticket'].map(lambda s: 1 if re.sub(r""\d"","""",s)!="""" and re.search(""A5"",s)==None and re.search(""CA"",s)==None and re.search(""PC"",s)==None and re.search(""SOTON"",s)==None and re.search(""STON"",s)==None else 0)"	1	1
"test['Title'] = test[""Name""].str.extract(' ([A-Za-z]+)\.',expand=False).map(title_map)"	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Col', 'Rare')	1	1
df[['Survived']].groupby([df['Parch'] + df['SibSp']]).mean().plot.bar()	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset['Title']==2), 'Age']=37	1	1
models_df['ValidationScore'] = models_df.apply(lambda x : accuracy_score(get_validation_predictions(x), y_validation), axis=1)	1	1
df['Title'] = df['Title'].apply(lambda x: 'other' if titles.loc[x] == True else x)	1	1
"os.path.join(""../input/"", ""train.csv"")"	1	1
num_encoded_train_data.info()	1	1
"nn_submit_dataframe.to_csv(""nn_submission.csv"", index=False, header=[""PassengerId"", ""Survived""])"	1	1
data_titanic.head(10)	1	1
titanic['class'].values	1	1
params['n_hidden']	1	1
all_data.set_value(537,'Deck',value='C')	1	1
"StackingSubmission.to_csv(""Submission.csv"", index=False)"	1	1
full.loc[ full['Fare'] > 4.679, 'Fare'] = 4	1	1
data['Title'] = data['Title'].map(title_map)	1	1
"train_data.loc[train_data[""Age""] < 18, ""Underage""] = 1"	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Mme"",""Mrs"")"	1	1
df['Cabin']  # Just because it contains a lot of NaN/null values	1	1
np.mean(clf_gs.cv_results_['mean_test_score'])	1	1
train.loc[0:Qtest_n, 'Survived'].astype(int).values	1	1
titanic_df['Sex'] = titanic_df.Sex.astype('category')	1	1
cabin_exist.append(temp)	1	1
dataset.loc[(dataset['Fare'] > 7.55) & (dataset['Fare'] <= 7.854), 'Fare'] = 1	1	1
predictions.append(m['Model'].predict(X_test))	1	1
"test.loc[(test.Age.isnull())&(test.Sex=='male'),'Age'] = test[""Age""][test[""Sex""] == 'male'].mean()"	1	1
min_max_scaler.transform(test[columns])	1	1
df['littleFamily']=0	1	1
training.drop(labels = ['Cabin', 'Ticket'], axis = 1, inplace = True)	1	1
row['Sex'] == 1:	1	1
x['Title'] = x['Title'].apply(lambda s: 'Misc' if x.Title.value_counts()[s] < 10 else s) # make prefix = 'Misc' if >10	1	1
transformed_df['Cabin_B'] = cabin.Cabin_B	1	1
data.drop('Embarked', axis=1)	1	1
test_df.dropna()	1	1
test_df['Title'] = test_df['Title'].replace('Mlle', 'Miss').replace('Ms', 'Miss').replace('Mme', 'Mrs').replace(['Dr', 'Major', 'Col', 'Rev', 'Lady', 'Jonkheer', 'Don', 'Sir', 'Dona', 'Capt', 'the Countess'], 'Special')	1	1
titanic_data.Fare.fillna(titanic_data.Fare.median())	1	1
X['Age'].fillna(X['Age'].median(),inplace=True)	1	1
sns.boxplot(x = 'Pclass', y = 'Fare', data = train)	1	1
train_df.head(3).T	1	1
age_data.dropna()	1	1
df_test['MedF']   = df_test['Family'].map(lambda s: 1 if 3 <= s <= 4 else 0)	1	1
"X.drop(""Name"", axis=1)"	1	1
train_df.loc[(train_df.isAlone.isnull()), 'isAlone'] = 0	1	1
np.where(((grp[param] ==0) | (grp[param].isnull())), grp[param].mean(),grp[param])	1	1
full_dataset[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=False)	1	1
full_train.describe()	1	1
df_test.pop('PassengerId')	1	1
fare['Survived'] = combined_df.Survived	1	1
"X_test_dum.drop([""Ticket"", ""Cabin""], axis = 1, inplace=True)"	1	1
train['Parch'].value_counts().sort_index().plot.bar()	1	1
raw_test_df['Age'].replace(np.nan, mean_age, inplace=True)	1	1
train.drop(columns=['Name', 'Ticket', 'PassengerId', 'Cabin'], inplace=True)	1	1
df['SibSp'][p] == 0 and df['Parch'][p] == 0:	1	1
test_X.describe()	1	1
train['Embarked'].replace({'S':0,'C':1,'Q':2}, inplace = True)	1	1
titanicAll['Family'] = titanicAll['SibSp']+titanicAll['Parch']	1	1
dataset['Embarked'] = dataset['Embarked'].fillna('C')	1	1
etc_rfecv.transform(etc_rfecv_final_test)	1	1
data.loc[(data.Age.isnull())&(data.Initial=='Others'),'Age']=46	1	1
train.where(train['Age']==30)	1	1
df_test[['PassengerID', 'Survived']].to_csv('Titanic_LogRegression.csv', index=False)	1	1
"data.loc[train[""Cabin""].notnull(), ""Cabin""] = train.loc[train[""Cabin""].notnull(), ""Cabin""].str[0]"	1	1
features.drop(['PassengerId', 'Survived'])	1	1
classes[0]-classes[1]	1	1
"full_data[""LastNameCount""] = full_data[""Name""].apply(lambda x: unique_last_names[get_last_name(x)])"	1	1
"sns.boxplot(x=""Family"", y=""Age"", data=df_data)"	1	1
titanic['Parch'] + titanic['SibSp']	1	1
importances['feature'] = cols	1	1
"data[""Fare""] = pd.qcut(train.loc[train[""Fare""] != 0, ""Fare""], q=5, labels=False)"	1	1
"pclass.drop(""Pclass"", axis=1)"	1	1
"titanic_test.loc[titanic_test[""Sex""]==""female"",""Sex""] = 1"	1	1
dataset['Pclass'][i] == 1:	1	1
train1['Embarked'] = le.fit_transform(train1['Embarked'])	1	1
df['Child'] = (df.Age < age_cutoff).astype(int)	1	1
"val_df[[""S"", ""C"", ""Q""]].values"	1	1
title_list.append(1)	1	1
test_df.drop(columns=('Tag'), inplace= True)	1	1
axs[1].boxplot(age_non_na.tolist())	1	1
test_data.join(test_data['Name'].str.split(',', 1, expand=True).rename(columns={0:'LastName', 1:'FName'}))	1	1
np.mean(outer)	1	1
data.drop(labels = ['Survived'], axis = 1)	1	1
d_res_lr.sort_values(by=['val_score','std_test_score'],ascending=[False,True],inplace=True)	1	1
whole.set_value(881,'Fid',88) #display(whole[whole.Name.str.contains(r'Parrish')])	1	1
"train[""Mother""] = train.apply(mother, axis=1)"	1	1
train_csv.loc[(train_csv.Name.str.contains('Ms') & train_csv.Age.isnull()), 'Age'] = Ms_average_age	1	1
pred_table_lr_1_test['Prob'] = prob_lr_1_test	1	1
test.loc[:, ['Pclass', 'Sex', 'Age', 'Embarked']]	1	1
train['Fare']=train.Fare.fillna(train.Fare.median())	1	1
dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 60), 'Age'] = 3	1	1
test_survived.head()	1	1
df.loc[index,title]=1	1	1
test[['Mr', 'Mrs', 'Miss', 'Master', 'Ms', 'Colonel', 'Rev', 'Dr', 'Dona']] = pd.get_dummies(test['Title'])	1	1
pipelines.append(('DTC', DecisionTreeClassifier(criterion = 'entropy')))	1	1
np.mean(dataset,axis=0)	1	1
df.drop('CorrectGuess', axis=1, inplace=True)	1	1
"models.append((""KNC"",KNeighborsClassifier()))"	1	1
"train_data[""Age""].fillna(r, inplace=True)"	1	1
train['SibSp'].values.reshape(-1,1)	1	1
train.groupby('Age1').Survived.mean().plot(kind = 'bar')	1	1
"results.to_csv(""submission.csv"",index=False)"	1	1
result.to_csv('randomforest-phonetic4.csv', index=False)	1	1
df_data['Sex_Code'] = label.fit_transform(df_data['Sex'])  # female为0, male为1	1	1
combined_df[['Age','Pclass']].groupby('Pclass').mean()	1	1
count_vect.transform(comb['Name'] )	1	1
"train[""Survived""][train[""Sex""] == 'female'].value_counts(normalize = True)"	1	1
matplotlib.rcParams['ytick.major.pad']='10'	1	1
predictors.isnull().sum()	1	1
traindf.drop(['Sex','Embarked','Ticket','Name'],axis=1)	1	1
"Ts[""Sex""] = Ts[""Sex""].apply(lambda x: 1 if x==""female"" else 0 if x==""male"" else 0.5)"	1	1
scoresdf.sort_values(by='score', inplace=True)	1	1
Class_Results.sort_values(by = 'CV Score', ascending=False)	1	1
df_train.drop(['Survived', 'PassengerId','Pclass','Name','Ticket','Cabin'], axis=1)	1	1
join_data.head()	1	1
titanic_train['Pclass_2']=(titanic_train['Pclass']==2).astype(int)	1	1
total_RMSE.mean(axis=0).values	1	1
"models.append((""LogisticRegression"", LogisticRegression))"	1	1
train_df[['FamilySize', 'Survived']].groupby('FamilySize').count()	1	1
os.path.join(submission_folder, 'submission.csv')	1	1
data_train.drop(['Age'], axis = 1)	1	1
OHE_X.copy()	1	1
training['Age'].fillna(training['Age'].median(), inplace = True)	1	1
X_train['Title'] = train_df['Title'].map({'Mr':0, 'Master':1, 'Ms':2, 'Mrs':3, 'special':4, 'noble':5}).astype(int)	1	1
test.apply(makePredictions, axis = 1)	1	1
id.reset_index(drop=True, inplace=True)	1	1
df_train['LargeF'] = df_train['Family'].map(lambda s: 1 if s >= 5 else 0)	1	1
"df3.drop([""Name"",""Ticket""],axis=1)"	1	1
data.loc[(data.Age.isnull())&(data.Title==2)&(data.Pclass==1), 'Age']=30	1	1
train.loc[(train['Sex'] == 'female'),'Survived'].groupby(female_age_bin).mean()	1	1
df.shape # number of rows and columns	1	1
scores.append(metrics.accuracy_score(Y_cv,Y_pred))	1	1
"dftest.loc[[152],""Fare""] = 10"	1	1
"titanic_df[""Sex""].loc[titanic_df[""Sex""]==""female""]=0"	1	1
submit_csv.to_csv('output.csv',header=True, index=False)	1	1
pre_features.copy()	1	1
"train.loc[:, [""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked""]]"	1	1
"train_data[""Underage""] = 0"	1	1
testd['PassengerId'],	1	1
X_test['Embarked'] = test_df['Embarked'].map({'S' : 0, 'Q' : 1, 'C' : 2}).astype(int)	1	1
dataframe['Age'].std() # calculates the standard deviation values	1	1
dftr.copy()	1	1
Data_train.head()	1	1
"submission_data.to_csv(""submission_data.csv"",index=0)"	1	1
data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Fare'], axis=1)	1	1
train.rename(columns={'female': 'Female', 'male': 'Male'})	1	1
feats['title'].replace(changes, inplace=True)	1	1
test['E2'] = np.array(test['Embarked'] == 'C').astype(np.int32)	1	1
"combined.loc[f_group.index,""family_has_senior""] = n_seniors"	1	1
test['ses']=test.Pclass.apply(lambda x: getSes(x))	1	1
ax[0].set_title('Survival Rate of Population')	1	1
titanic_data['female'] = sex_dummy.female	1	1
"ans.to_csv(""answer.csv"",index=False)"	1	1
"tp.drop([""PassengerId"",""Age"",""SibSp"",""Parch"",""Fare""], axis=1, inplace = True)"	1	1
df3_test.head(25)	1	1
"test_df.loc[test_df[""Title""] == ""Countess"", ""Title""] = 'Rare Title'"	1	1
pred_df.head()	1	1
train.append(test, sort='True')	1	1
train_df['Title']=train_df.apply(replace_titles, axis=1)	1	1
duplicates.head(30)	1	1
dataset.loc[dataset['Age']<= 16, 'Age'] = 0	1	1
dataset.loc[(dataset['Age'] >= 10) & (dataset['Age'] < 20), 'Age'] = 1	1	1
"train[""Name""] = train[""Name""].apply(arrangename)"	1	1
df_train['Sex_Val'] = df_train['Sex'].map(genders_mapping).astype(int)	1	1
data.set_value(i, 'Fare', int(means[temp_class]))	1	1
test.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)	1	1
titanic_train_dataset['FarePerPerson'] = titanic_train_dataset['Fare'] / titanic_train_dataset['FamilySize']	1	1
together['ischild'] = '?'	1	1
df_train['Age'].hist()	1	1
df.groupby('Pclass').Survived.sum()/df.groupby('Pclass').Survived.count()	1	1
combined.rename(columns={'Sex':'Male'})	1	1
dataset.loc[ (dataset.Age.isnull()) & (dataset.IsAlone == i) & (dataset.Pclass == j+1),                    'Age'] = guess_ages[i,j]	1	1
"train_data['Embarked'].fillna(""S"", inplace = True)"	1	1
train_X['Fare'] = scaler.fit_transform(train_X['Fare'].values.reshape(-1, 1))	1	1
test.loc[(test['AgeModified']>60) & (test['AgeModified']<=70),'AgeCategorical'] = 6	1	1
df.loc[mask_miss_NaN, 'Woman'] = 1	1	1
results.loc[[name], :] = r1	1	1
train.groupby(['Ticket', 'Surname', 'Name'])['Survived'].mean().to_frame()	1	1
"train[""FareCategory""] = np.floor(train[""Fare""] / 20.0).astype(int)"	1	1
test['Fare'].interpolate(inplace = True)	1	1
submit_output_csv.head()	1	1
dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62) , 'Age'] = 3,	1	1
titanic_train.groupby('Cabin').count().PassengerId.describe()	1	1
combined.drop('Ticket',axis=1,inplace=True)	1	1
test_df.replace('S',2)	1	1
dataset.set_value(rowIndex, 'Age19to22', 1)	1	1
data.loc[(data.passenger_fare>30.49) & (data.passenger_fare<=30.5) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>30.49) & (data.passenger_fare<=30.5) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
train_c1.Name_len.min()	1	1
by_sex_class.Age.transform(impute_median)	1	1
data.describe()                                  # 输出数值型数据的基本统计描述信息	1	1
train_df['Sex_code'] = enc.fit_transform(train_df['Sex'])	1	1
ListofNoOfPassengersbyAge.append(NoOfPassengersOfGivenAge[i])	1	1
train.loc[(train['Fare']>50) & (train['Fare']<=100),'FareCategorical'] = 1	1	1
X_train2.shape, X_test2.shape	1	1
"train.drop([""PassengerId"",""Name"",""Ticket"",""Cabin""],axis=1)"	1	1
result_df['PassengerId']=tit_df_test['PassengerId']	1	1
train['Embarked'].isnull().any()	1	1
df.loc[:,c] = df.loc[:,c].fillna(mode)	1	1
data_test.drop(['SibSp','Parch'], axis=1)	1	1
ds_test_copy['Survived'] = ds_predict	1	1
"solution.to_csv(""Neural_Network_Solution.csv"", index=False)"	1	1
np.round(gaussianNB.score(X_valid_norm, Y_valid), 4)	1	1
df_csv_train.head()	1	1
test_data['WithFamily'] = test_data['SibSp'] + test_data['Parch']	1	1
df1[['Age', 'Parch']].values	1	1
"df[""Age""].fillna(df.Age.median(), inplace=True)"	1	1
avg_std_age['Low'] = avg_std_age['Age'] - avg_std_age['Std']	1	1
allset.loc[(allset['Age']>10) & (allset['Age']<=60),'AgeBand']='Adults'	1	1
"sub[""Survived""] = log_reg.predict(pred)"	1	1
df['family_size'] = titanic['Parch'] + titanic['SibSp'] + 1	1	1
axes[0].set_title('the total count of Embarked for survived ')	1	1
titanic.values	1	1
dataset.set_value(rowIndex, 'Age14to18', 1)	1	1
plt.hist(normalize_embarked(df))	1	1
"train.drop([""PassengerId"", ""Survived""], axis=1)"	1	1
train.drop(['Pclass'],axis=1,inplace=True)	1	1
train['Fare'].hist(bins=40, figsize=(10,4))	1	1
train.merge(train_table,how='left', on='Sex_Class_Age')	1	1
dataset.columns.values	1	1
axes[0].hist(input_df['Fare'], bins=20)	1	1
"title_by_sex[""Female""] = full[full[""Sex""] == 1][""Title""].value_counts()"	1	1
data.loc[p, 'NetSize'] = value[1]	1	1
test['Age'] = test.Age.isna().sum()	1	1
axes[1].hist(train_data['Age'].dropna(),age_bins,facecolor='green',edgecolor='black')	1	1
np.sum((p1-p2)**2)	1	1
train_data.shape, target.shape, test_pred.shape	1	1
train.head() #print first 5 rows of train dataframe from top	1	1
error_rate.append((i, oob_error, training_error))	1	1
all_data['IsAlone'].loc[all_data['FamilySize'] > 1] = 0 # now update to no/0 if family size is greater than 1	1	1
train['PaxclassB'] = train['Pclass']	1	1
test_df['Sex'] = test_df[['Sex','Age']].apply(addChild, axis = 1)	1	1
df_train.groupby('Sex', as_index=False)['Age'].mean()	1	1
data_embark_int['Embarked'] = y	1	1
train['Ticket_info'].unique()	1	1
ax[0].set_title('Pclass vs Age')	1	1
"traindf.drop(""Survived"", axis=1)#we do not need train test splitting with skicit learn (in nomral setting test_df and train_df will be concatanted and then use it)"	1	1
test_df.drop(['IsAlone'], axis=1)	1	1
dataset['Survived'].value_counts(normalize=True)	1	1
temp2['Survived']=temp2['Survived'].replace(2,np.int32(1))	1	1
data.sons.loc[data.PassengerId==1084] = 1 # Case of 'A/5. 851' and last rule	1	1
"train_data[""FamilySizeBelow2""] = 0"	1	1
df['Age'].dropna().map( lambda x: round(x)).astype(int).values	1	1
sub['SURVIVED'] = sub['SURVIVED'].astype('category')	1	1
ax[0].set_title('Total Number of Male and Female of Titanic')	1	1
np.mean(y_train),	1	1
df['TicketCategory'] = df['TicketLetter'].apply(filter_ticket)	1	1
full_data[['Fare','Survived', 'Sex','Pclass']].copy()	1	1
test_data['Survived'] = y_pred	1	1
tdf['fare'] = tdf.fare.fillna(tdf.age.median())	1	1
full.isnull()	1	1
modelTest.append(decisiontree)	1	1
submission_test.Age.fillna(30.5, inplace=True)	1	1
train_df.drop(['PassengerId','Name','Ticket', 'Cabin'], axis=1)	1	1
df['Age'].apply(age_class)	1	1
results.loc['Support Vector Machine', 'Validation'] = svm_preds	1	1
test['Deck'] = [classify_cabin(x) for x in test.CabinType]	1	1
dft_red.values	1	1
pred_binary.append(0)	1	1
train['Fare_class'] = train.Fare.apply(lambda x: 'low' if x < 100 else 'high')	1	1
train['Child'] = float('NaN')	1	1
train_df['Family_Survival'] = data['Family_Survival'][:891]	1	1
dataframe.tail()	1	1
cabin_only.info()	1	1
df_result['Survived'] = predicted	1	1
data.Embarked.replace(['S', 'Q', 'C'], [0,1,2])	1	1
out['class1'] = out.Pclass == 1	1	1
"ax_lst[0].plot(train[""Age""][train[""Survived""] == 1], ""b."", train[""Age""][train[""Survived""] == 0], ""r."")"	1	1
dataset.loc[ dataset['Fare'] <= 7.55, 'Fare'] = 0	1	1
df_test.loc[i, 'Survived'] = sess.run(pred_label, feed_dict={inputs: X_test[i, None]}).squeeze()	1	1
x_train[['Age']] = imr.fit_transform(x_train[['Age']])	1	1
finalseries.to_csv('finalprediction.csv')	1	1
tt.iloc[0:891, :-1]	1	1
train_df[['AgeRange', 'Survived']].groupby(['AgeRange'], as_index=False).mean().sort_values(by='AgeRange', ascending=True)	1	1
test_df['Title'] == 'Ms'	1	1
result.to_csv('RandomFor2.csv', index=False)	1	1
data.drop(col, axis=1, inplace=True)	1	1
train.loc[(train['Family'] > 0) & (train['Family'] <= 3), 'Family'] = 1	1	1
data[['AgeBand', 'Survived']].groupby(['AgeBand']).agg(['count','mean'])	1	1
test['clean_embarked'] = test.Embarked.fillna(most_common_embarked)	1	1
"data_to_submit.to_csv(""results.csv"", index=False)"	1	1
x_split.iloc[valid], y_split.iloc[valid]	1	1
train.drop('scoresBinned',1).drop('categories',1)	1	1
data.loc[(data.passenger_fare>=10.5) & (data.passenger_fare<10.501) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>=10.5) & (data.passenger_fare<10.501) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
df_features['Sex'] = df_features['Sex'].apply(lambda x: dict_sex[x] if x in dict_sex.keys() else 0)	1	1
names.loc[(names['dr'])==1,'mr'] = 1	1	1
test.loc[test['Title'].isna()]	1	1
train_df['FamilySize']=familysize(train_df)	1	1
df[['Fare']]	1	1
group_age['Survived'].plot.bar()	1	1
"clean_data[""Embarked""][i]!=""C"":"	1	1
train_df['Pclass'] = train_df['Pclass'].astype('category')	1	1
age1_df.values	1	1
stdScaler.transform(X_train)	1	1
X_opt.head()	1	1
test.loc[(test['Fare'] > 99) & (test['Fare'] <= 250), 'Fare']   = 4	1	1
"related_people.loc[related_people[""PassengerId""]==1248,""RGroup""]=""Lamson_M"""	1	1
answers.to_csv('titanic-submission-Navruzov.csv') # save to submission file	1	1
"train_X[""SibSp_Parch""] = train_X.SibSp * train_X.Parch"	1	1
np.abs(result).sort_values(by='coefficient', ascending=False)	1	1
train.drop(drop_columns,axis=1,inplace=True)	1	1
"Data['Name'].str.split("", "", expand=True).head(3)"	1	1
Ticket.append(i.split(' ')[0])	1	1
"np.where(sol[""Survived""] == ans[""Survived""], 1, 0)"	1	1
df.drop(columns=['PassengerId','Name','Sex','SibSp','Parch','Ticket','Embarked','Age','Cabin','Pclass'])	1	1
pd.isnull(x) or (x>1 and divmod(x, 1)[1] == 0.5)	1	1
curated_data.drop(['SibSp', 'Parch'], axis=1)	1	1
tf.round(tf.sigmoid(Z3))	1	1
train_data['Age_group'] = pd.cut(train_data['Age'], 10)	1	1
"train.Title.replace(""Col."", ""Officer"")"	1	1
X['Embarked'] = pd.get_dummies(X['Embarked'])	1	1
df.loc[(df['FareGroup']>200) & (df['FareGroup']<=300),'FareGroup'] = 3	1	1
params_init['max_depth'] = 10	1	1
X_train.drop(['Embarked', 'PassengerId', 'CabinCode', 'Survived'], axis=1, inplace=True)	1	1
testset['PassengerId']	1	1
dataset['Fare'] = scaler_age.fit_transform(np.array(dataset['Fare']).reshape(-1, 1))	1	1
combine_df['Fare'] = combine_df['Fare'].astype(int)	1	1
df.divide(df.sum(axis=1),axis=0)*100     ## py attention to df.divide(axis=0)	1	1
dc['Age']= dc.apply(age_inverted,axis=1)	1	1
"test_data.drop([""PassengerId"", ""Cabin"", ""Ticket""], axis = 1)"	1	1
df['age_stage'] = df.Age.apply(apply_age_intervals).astype(int)	1	1
scores_df.sort_values(by=['best_score'], ascending=False)	1	1
df_test['AgeEncoded'] = pd.cut(df_test['Age'], 5, labels=[1, 2, 3, 4, 5])	1	1
full_test.drop(full.index[:891],axis=0)	1	1
"titanic_df.drop([""PassengerId""],axis=1)"	1	1
plt.hist(train.loc[(train['Survived'] == 0) & (train['CabinN1'] != 999), 'CabinN1'], bins = range(0, 140, 10), label = 'dead')	1	1
train_df['Embarked'] = train_df['Embarked'].map(lambda x: 0 if x == 'S' else 1 if x == 'C' else 2)	1	1
"XX[""AgeBin""]=np.isnan(X[""Age""])"	1	1
"test.loc[test[""Title""] == ""Miss"",""Age""] = test.loc[test[""Title""] == ""Miss"",""Age""].fillna(missage)"	1	1
in  [ 0 ]:	1	1
data2.set_value(index, 'Random_Predict', 1) #predict survived/1	1	1
df3_test.isnull().sum()	1	1
X_train['Age'] = imp.fit_transform(age)	1	1
train['Embarked'] = train['Embarked'].fillna(train['Embarked'].mode().iloc[0])	1	1
trainSet['Survived'].shape	1	1
test['Age']=test[['Age','Pclass']].apply(age_update, axis=1)	1	1
np.min(X_reduced[:,1]), np.max(X_reduced[:,1])	1	1
df01['Sex'].nunique() # how many distinct app this data have	1	1
df['Age'] = df['Age'].apply(lambda e : 5 if pd.isnull(e) else (1 if e<7 else (2 if e<20 else (3 if e<37 else 4))))	1	1
clean_data['Survived'].corr(df3['Age'])	1	1
combined.drop('index',axis =1,inplace = True)	1	1
df.loc[:,c].fillna(mean)	1	1
combine['Age_known'] = combine.Age.isnull() == False	1	1
train[['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']]	1	1
full['Family_Survival'] = DEFAULT_SURVIVAL_VALUE	1	1
classifier.add(keras.layers.Dense(units = 1, kernel_initializer = 'lecun_uniform', activation = 'sigmoid'))	1	1
sorted_feature.append(data.columns[indices[f]])	1	1
df_combined.drop('Ticket',axis=1)	1	1
sns.boxplot(x='Embarked', y='Fare', hue='Pclass', data=combined[combined['Embarked'].notnull()]);	1	1
"df_train[""Embarked""].unique()"	1	1
data_train.Age.fillna(value=30,inplace=True)	1	1
X_train.drop(['Sex','Embarked','Pclass','Name_title'],axis=1)	1	1
combined.groupby(['Sex','Pclass','Title_aggr'])	1	1
trainDf[['Age', 'Survived']].dropna(axis=0, how='any')	1	1
train_df['Age'] = train_df['Age'].fillna(200) # this is just indicating the missing values	1	1
test.drop('AgeCategory', axis=1, inplace=True)	1	1
val['PassengerId'].tolist()	1	1
train.drop(['PassengerId'], axis = 1, inplace = True)	1	1
"data_train.drop([""PassengerId"", ""Name"", ""Ticket""],axis=1): #axis=1 specifics columns; axis=0 specifies rows"	1	1
df.drop(delete_columns, axis=1, inplace=True)	1	1
df['Companions'] = df['Parch'] + df['SibSp']	1	1
test['Survived'].to_csv(filename,header=True)	1	1
all_data.iloc[train_idx,:], all_data.iloc[test_idx,:]	1	1
dataset['Class3'][rowIndex] == 1:	1	1
data.Sex.replace(('male','female'), (0,1), inplace = True)	1	1
df.merge(age, left_on=['Sex', 'Title'], right_on=['Sex', 'Title'], suffixes=['', '_age'])	1	1
train.loc[train['Cabin'].str.len() == 7.0, 'CabinN2'] = train['Cabin'].astype(str).str[5:]	1	1
dataset_train[['Fare', 'Survived']].groupby(['Fare']).sum()	1	1
test_set[['Pclass', 'SibSp', 'Fare', 'Cabin', 'Title', 'FamliySize', 'Alone', 'Age']]	1	1
titanic_df['Embarked'] = titanic_df['Embarked'].map({'C':0, 'Q':1, 'S':2})	1	1
test['Cabin'] = test['Cabin'].apply(extract_cabin_letter)	1	1
dataset.loc[ dataset['Fare'] > 60.2875, 'FareGroup'] = 3	1	1
data.loc[pool.index, 'Group_'] = group_count	1	1
dt['Title'] = dt['Title'].replace(['Dr', 'Col', 'Sir', 'Countess', 'Jonkheer', 'Lady', 'Don', 'Capt', 'Major', 'Rev',                                       ], 'Unique')	1	1
frame[['female','boy','n_ticket','TicketSurv']]	1	1
test_data['Name_Len'] = test_data['Name'].apply(lambda x: len(x))	1	1
Train_data.loc[Train_data['Embarked'] == 'Q','Embarked'] = 2	1	1
data.Age.agg(['min','max','mean','std']).plot(kind = 'barh')	1	1
testSet.loc[:, ['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
predicted_result.append([int(df2['PassengerId'][i]), int(j)])	1	1
titanic_data.loc[titanic_data['FamilySize'] >= 5, 'BigFamily'] = 1	1	1
x['FreqCabin']	1	1
test['FareBins']=pd.qcut(test['Fare'],4)  # Divides data into equal bins	1	1
plt.hist(train_data['Survived'], color='lightblue')	1	1
"strat_test_set.drop(""Survived"", axis=1) # drop labels for test set"	1	1
ax[0].set_title('Variation in Training Data Accuracy w.r.t to Tolerance tol for different Solvers')	1	1
test_df1['FareGroup'] = test_df1['FareGroup'].replace(fare_map)	1	1
raw_train['Male'].value_counts()	1	1
mean_cols.head(10)	1	1
train_data['FamilySize'] = train_data['SibSp'] + train_data['Parch']	1	1
class_sex['Survived'].plot.bar()	1	1
dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\.',expand = False)	1	1
"train_data[""Embarked""]=train_data[""Embarked""].fillna('Z')"	1	1
AgeData.loc[(AgeData.Age.isnull())]	1	1
train_df_bins['age'] = cut	1	1
"models.append((""AdaBoost"",AdaBoostClassifier()))"	1	1
X.Cabin.fillna(0, inplace=True)	1	1
titanic_df.loc[titanic_df.Salutation == 'Master', 'Sex'] = 'master'	1	1
df['FareCat'] = pd.qcut(df.FarePP, 4)	1	1
X_train['Fare'], bins = pd.qcut(x=X_train['Fare'], q=8, retbins=True, precision=3, duplicates='raise')	1	1
le1.transform(cleanedtrain.as_matrix(columns=['Sex']))	1	1
train_df[['Pclass', 'Sex', 'Embarked','Survived']].groupby(['Pclass','Sex','Embarked'], as_index=False).count().sort_values(by=['Embarked','Sex'], ascending=False)	1	1
"df.assign(AgeCluster = clusterS, MinAge=minS, MaxAge=maxS).sort_values(by=""MinAge"")"	1	1
data['Sex'] =  data['Sex'].astype('category').cat.codes	1	1
df1['Survived'].value_counts().plot.bar(color='r')	1	1
k.append('other')	1	1
df_data['Ti_AgeBin'] = pd.qcut(df_data['Ti_Age'], 4)	1	1
data_copy.loc[:,'Age']=data_copy['Age'].fillna(data_copy['Age'].median())# replace number with median	1	1
data_combined['Age'].dropna().astype(int).hist(bins=70, ax=axis1)	1	1
test.join(test_child.rename('Child'))	1	1
data_test['FarePP_bins'] = le.transform(farepp_qcut_test)	1	1
df_train.pivot_table(index='Sex', columns='Pclass', values='Survived')	1	1
dataset['Age'] = pd.cut(dataset['Age'], ageBins, labels = ageBinValues)	1	1
raw_train['Parch'].plot(kind='kde', color='black')	1	1
train['Age'].hist(density = True)	1	1
Data['Cabin'] = Data['Cabin'].astype('category').cat.codes	1	1
train_vw.head()	1	1
"train[""survived""]:"	1	1
dataset['Initial'] = dataset['Initial'].replace('Mlle', 'Miss')	1	1
train.dtypes.sample(10)	1	1
dt['Embarked']=dt['Embarked'].fillna(0)	1	1
"test[""Famille_1""] = test[""FamilleMember""] == '1'"	1	1
combined_df[['Age', 'Pclass', 'Survived']].groupby(by='Pclass').agg({'Age':['median','count'], 'Survived' : 'mean'})	1	1
dataset.Pclass.hist()	1	1
data.Embarked_C.astype('category')	1	1
input_df['Embarked'] = input_df['Embarked'].apply(impute_embarked)	1	1
data['Odd'] = data['Ticket'].str.slice(-1).astype(int).map(lambda x: x % 2 == 0).astype(int)	1	1
test_data['FamilySize'] = test_data['SibSp'] + test_data['Parch']+1	1	1
dataset.loc[dataset['Sex'] == 'female', 'Sex'] = 1	1	1
df_train['age_jnr'] = df_train['Age'].apply(lambda x: 1 if x <= 10 else 0)	1	1
titanic_p.head(5)	1	1
df['AgeGroup'] = temp_df.copy()	1	1
df.loc[((df.MisAge == 0) & (df.Pclass == 2)) , 'MA_Cl'] = 2 #avg with age	1	1
model.add(Dense(1,kernel_initializer='glorot_normal',activation='sigmoid'))	1	1
data_test['Title']=data_test.Title.map(Title_Dictionary)	1	1
Test.values[:, 1:4]	1	1
dataset_train.describe()	1	1
"data.loc[data[""FamSize""] == 1, ""Fam_group""] = 0 # Single"	1	1
df['Age'] < 15:	1	1
"embarked[""NotEmbarked""] = embarked[""Embarked""].isna().astype(int)"	1	1
df['surname_count'] = df['surname'].apply(lambda x: surnames.loc[x])	1	1
df['Age'].fillna(df['Age'].median(), inplace = True)	1	1
le.transform(test.Sex)	1	1
"df_data[""Title""] = df_data.Name.str.extract(' ([A-Za-z]+)\.', expand=False) #Creating new column name Title"	1	1
test.drop(labels=['Cabin'],axis=1,inplace=True)	1	1
"dat.loc[dat[""Cabin""].str.count(""C"") > 0,""Cabin""] = 2"	1	1
ax.hist(train['Fare'], bins=n_bins, color='r')	1	1
"train[[""AgeCohort"", ""Survived""]].groupby(['AgeCohort'], as_index=False).agg(['mean', 'count'])"	1	1
train['Name_len']=train.Name.str.len()	1	1
sexLe.transform(df_test.Sex)	1	1
train['Title'] = train['Name'].apply(split_name)	1	1
train_df.drop('SibSp', axis = 1, inplace = True)	1	1
sub.to_csv('AgeSexPclassEmbarked.csv', index = False, float_format='%1d')	1	1
titles_train.replace(['Mlle', 'Ms'], 'Miss', inplace = True)	1	1
train.loc[(train['Name_len'] > 27) & (train['Name_len'] <= 32), 'Name_len'] = 3	1	1
df['Sex_male'][df['Sex_male'] == 1].count()	1	1
titanic.hist(bins=10,figsize = (9,7), grid = False)	1	1
data_df['Fare'].median()	1	1
train['age_bin'] = encoder.fit_transform(pd.cut(train.Age,6))	1	1
dataset['Young'] = (dataset['Age']<=20) | (dataset['Title'].isin(['Master','Miss','Mlle','Mme']))	1	1
titanic_test['Age']= titanic_test[['Age','Pclass']].apply(impute_age,axis=1)	1	1
test_df_with_family.rename(columns={'FamilyId_y': 'FamilyId'}, inplace=True)	1	1
fill_age_df['AgeBand'] = fill_age_df['AgeBand'].astype('category').cat.codes	1	1
train_x.info()	1	1
points_for_GP.astype(float)	1	1
imp.sort_values([ 'Importance'], ascending = True)	1	1
data_copy.loc[data_copy.Embarked == 'C', 'Embarked'] = 1	1	1
PointBiser.loc[var[0],'Feature'] = var[1]	1	1
"titanic_train.loc[titanic_train[""Sex""] == ""male"",""Sex""] = 0"	1	1
"titanic_df[[""FamilySize"", ""Survived""]].groupby(['FamilySize'],as_index=False).mean()"	1	1
combined_data.iloc[891:].Age.isnull().sum()	1	1
train_data['Age'] = train_data['Age'].interpolate()	1	1
merged_df.to_csv('../datasets/new_merged.csv')	1	1
df_full['Embarked']:	1	1
test_features.head(5)	1	1
pd.merge(_, dummy_pclass, left_index=True, right_index=True)	1	1
Test['emC'] = Test['Embarked'].map({'S':0,'Q':0,'C':1,np.nan:0}).astype(int)	1	1
ax[0].legend(['C', 'S', 'Q'])	1	1
"test[""Emb""] = test['Embarked'].apply(convert_e_2_num)"	1	1
data.surname_Hippach.astype(np.uint8)	1	1
kwargs.get( 'col', None )	1	1
Titanic_pred3.head()	1	1
corr.sort_values('Survived', ascending=False)	1	1
"ans.to_csv(""submit_lg_r.csv"", index = False)"	1	1
df.loc[df.Age.notnull(),['Age']]	1	1
"test_forest2[""family_size""] = test_forest2[""SibSp""]+test_forest2[""Parch""]+1"	1	1
pd.merge(df_test,df_gender_submission , how='left', on=['PassengerId'])	1	1
classifiers.append(xgb)	1	1
train.groupby(['Sex','Pclass']).mean()	1	1
plt.hist(train.loc[(train['Survived'] == 1) & (train['CabinN1'] != 999), 'CabinN1'], bins = range(0, 140, 10), label = 'live')	1	1
trim_data['Age'].mean()	1	1
titanic_train_df['Title'] = titanic_train_df.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
trainingdata['Related'] = trainingdata['SibSp'] + trainingdata['Parch']	1	1
trainTitanic.drop('Cabin', axis=1)	1	1
scores.append(tree.score(f, l.ravel()))	1	1
"test[""Fare""] = test[""Fare""].fillna(0)"	1	1
tr.loc[(tr['Age']>64)&(tr['Age']<=72), 'Age'] = 8	1	1
train_df.drop(columns=['PassengerId', 'Survived'])	1	1
imputer_train.loc[(imputer_train['Pclass'] == 1) & (imputer_train['Age'].isnull()), 'Age'] = meanAgePclass1	1	1
train.loc[train['Age']<=16,'Age_band']=0	1	1
dataset['Family'].loc[dataset['Family']>0]=1	1	1
dataset['Title']=dataset['Title'].replace('Mme','Mrs')	1	1
train[['Isalone','Survived']].groupby('Isalone',as_index=False).mean()	1	1
j['FamilySize'] = j.SibSp + j.Parch + 1	1	1
df_test_tmp.drop('Ticket',axis=1,inplace=True)	1	1
dataset.loc[dataset['Ticket'] == dataset['Ticket'].iloc[i], 'Shared_ticket'] = 1	1	1
dataset.loc[dataset['Ticket'] == dataset['Ticket'].iloc[i], 'Shared_ticket'] = 0	1	1
clf.add(Dense(output_dim = 1, init = 'uniform', activation = 'sigmoid'))	1	1
test.Sex.apply(lambda l: np.where(l==0, -1, 1))	1	1
df2['Age'] = df['Age'].apply(lambda e : 5 if pd.isnull(e) else (1 if e<7 else (2 if e<20 else (3 if e<37 else 4))))	1	1
params['forest_grid_search'] = grid_search	1	1
all_data['Title'] = [get_title(i) for i in all_data['Name']]	1	1
train_set['Family'].value_counts()	1	1
df_full['Title']=df_full['Name'].map(lambda x: substrings_in_string(x, title_list))	1	1
X_train.iloc[:,ranking[:10]]	1	1
test_data.isnull().sum().sort_values(ascending=False)	1	1
test_df['Type'] = test_df[['Age', 'Sex']].apply(child_female_male, axis = 1)	1	1
pd.isnull(row.Cabin) and row.Ticket in shared_tickets:	1	1
"valid_dataset[""Survived""].as_matrix()"	1	1
train_features[['Survived', 'Pclass-Person', 'Pclass', 'AgeGroup', 'FareGroup', 'Person', 'IsAlone', 'Embarked', 'Title']]	1	1
train['age_group'] = train['Age'].map(age_group_fun)	1	1
test['Age'].iloc[i] = age_pred_test	1	1
all_data.set_value(258,'Deck',all_data.loc[679]['Deck'])	1	1
train.drop(['Sex'],axis=1)	1	1
train.loc[(train['AgeModified']>20) & (train['AgeModified']<=30),'AgeCategorical'] = 2	1	1
"df[""Fare""] = self.fare_imputer.transform(df[[""Fare""]])"	1	1
"df.loc[idx, ""ischild""] = c_rfc.predict(df.loc[idx, :].drop([""PassengerId"", ""istrain"", ""ischild"", ""Age""], axis=1))"	1	1
train_df['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)	1	1
df_test['Port'] = df_test['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)	1	1
df['Cabin'] = df['Cabin'].apply(lambda x: cabin_value(x))	1	1
trainOrg['Age'] = trainOrg['Age'].fillna(trainOrg['Age'].median())	1	1
test_set['Deck'] = test_set['Cabin'].map(lambda x: search_substring(str(x), cabin_list))	1	1
df['Age']:	1	1
"related_people.loc[related_people[""PassengerId""]==1286,""RGroup""]=""Kink_M"""	1	1
data.TicketPrefix.str.replace('SCParis', 'SCPARIS')	1	1
data.Embarked.fillna('S', inplace = True)	1	1
df['Age'],	1	1
df_temp.loc[(df_temp['AgeCat']==i),'Count'] = df_temp[(df_temp['AgeCat']==i)]['Count']/gender_count[i]	1	1
combined_df.loc[combined_df['Fare'].isnull(), 'Fare'] = median_fare_3rd_S	1	1
dataset['Lower_Class'] = dataset['Pclass'].map(lambda s: 1 if s == 3 else 0)	1	1
train['Survived'] = train_df['Survived']	1	1
train_origin.loc[(train_origin['pclass'] ==pclass) & (train_origin['embarked'].isin(['C'])), ['fare']]	1	1
data['Title'] = data.Name.str.extract(' ([A-za-z]+)\.', expand=False)	1	1
test_csv.loc[(test_csv.Name.str.contains('Dr') & test_csv.Age.isnull()), 'Age'] = Dr_average_age	1	1
tt['Survived'] = survived	1	1
"np.where(dataset[""Cabin""]==""T"",1,0)  #Cabin U is when the rest of cabins are 0"	1	1
"pipelines.append(( ""ScaledLDA"" , Pipeline([( ""Scaler"" , StandardScaler()),( ""LDA"" , LinearDiscriminantAnalysis())])))"	1	1
names.append(txt)	1	1
allset.drop(['TotalFamily'],axis=1)	1	1
df_train.loc[:, ['PassengerId', 'Pclass', 'sex_female', 'age_jnr', 'known_age']]	1	1
test_data['Age'] = test_data[['Age','Pclass']].apply(impute_age,axis=1)	1	1
pclass_survived.loc[1, 1]	1	1
dfTrain['Name_Complexity'] = dfTrain['Name'].apply(lambda x: len(x.split()))	1	1
"dataset_med.loc[3][""Age""].median()  #I used the median age of Pclass=3 as a replacement as there is no median value for SibSp=8 in training dataset"	1	1
train.loc[train['family_size']<=1,'travel_company']=0	1	1
X.iloc[:, self.ids]	1	1
"df[""cabin_let""]     = df[""cabin_let""].fillna(-1)"	1	1
"test_data[""PassengerId""].values"	1	1
test.values #testデータの配列	1	1
df.drop(['PassengerId'], axis=1, inplace=True)	1	1
z.astype(float)	1	1
df_modelo.drop('survived', axis=1) # Predictor variables	1	1
"data_df[""Room""] = data_df.Room.astype(int)"	1	1
input_train_one_hot_encoded.isnull().any()  ## to check if any column has null or nan values	1	1
train_df.drop(['PassengerId','Name'],axis=1)	1	1
merged.loc[(merged.Age.isnull())&(merged.NameTitle=='Master'),'Age']=5	1	1
"test_df[""Deck""] = test_df.Cabin.str[0]"	1	1
encoder.transform(test_category)	1	1
train_clean.iloc[:,0].values	1	1
title_list.append('No title')	1	1
titanic_sub.describe()	1	1
train[['Title','Survived']].groupby(['Title'],as_index=False).mean()	1	1
"test_kaggle.describe(include=""all"")"	1	1
tf.add(tf.matmul(W4, A3), b4)  # Z3 = np.dot(W3,Z2) + b3	1	1
train_df.iloc[:,[0,1,2,6]]	1	1
train['Survived'], test_size=0.333,	1	1
dataset['embarked'] = dataset['embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)	1	1
df.groupby(['Pclass', 'Sex']).Age.mean()	1	1
combined_features.drop('PassengerId', axis=1, inplace=True)	1	1
train.drop(['Name','PassengerId', 'Ticket', 'Cabin', 'Fare', 'SibSp'], axis = 1)	1	1
all_data.Fare.fillna(all_data.Fare.median())	1	1
submission['Survived'] = predict_y	1	1
data.to_csv('result.csv')	1	1
"train_data.fillna({""Embarked"": train_data['Embarked'].mode()})"	1	1
titanic_data.loc[(titanic_data['Age'] >48)&(titanic_data['Age'] <= 64),'Age'] = 3	1	1
x_test.T	1	1
df.groupby(['Pclass'])['Fare','Age'].median()	1	1
test_df['GenderPclass'] = test_df['Pclass'] - test_df['Gender'] + 1	1	1
data2.iterrows():	1	1
df.Ticket.apply(removedigit)	1	1
"titanic_df.groupby([""Pclass"",""Sex""]).mean()[""Survived""][3].plot.bar(ax=axes[2] )"	1	1
"full.groupby(""Title"").Age.describe()"	1	1
test_set[['PassengerId','Survived']].to_csv('submission.csv', sep=',', index=False)	1	1
test_set['AgeBand'] = pd.cut(test_set['Age'], bins=[0, 1, 12, 18, 21, 29, 36, 60, 100])	1	1
train['Pclass'].value_counts().idxmax()	1	1
"train[""eval_random""] = [np.random.choice([0,1], p=[0.62, 0.38]) for passenger in train.index]"	1	1
training_set.drop(['Cabin'], axis = 1)	1	1
df.to_csv('simple_nn_2.csv', sep=',')	1	1
X_T.T	1	1
train[['Name', 'Sex', 'Survived']]	1	1
"df_test[""Embarked""] = df_data[""Embarked""][891:]"	1	1
dataset.loc[ (dataset['Age'] > 62), 'Age'] = 4	1	1
titanic_test_data.drop(['Ticket', 'Name'], inplace=True, axis=1)	1	1
df_cp.loc[:, 'Sex'] = df_cp['Sex'].fillna('female')	1	1
unique_tickets[0]=='1'or'2'or'3'or'4'or'5'or'6'or'7'or'8'or'9':	1	1
train.loc[i,'EmbarkedModified'] = 'S'	1	1
"corr[""Pclass""].sort_values(ascending=False)"	1	1
train_df[['Fare']].describe()	1	1
"data_train_no_zero_fares[[""Pclass"", ""Fare""]].groupby(['Pclass'], as_index=False).max()"	1	1
curr_row[6]	1	1
trainX.shape[1]	1	1
data.iloc[[0,2,4],[1,3,6]]	1	1
"ax[0].set_xlabel(""Score of :""+t1)"	1	1
models['set3']['num_scaling'] = 'minmax_scaler'	1	1
v.append(int(p['Survived']))	1	1
misters.fillna(misters.median())	1	1
data.surname_Hamalainen.astype(np.uint8)	1	1
test['Embarked'].replace('Q', 0, inplace = True)	1	1
df_test.values.reshape((418,10))	1	1
"df_test[""NameLen""] = df_data[""NameLen""][891:]"	1	1
train.groupby('Pclass')['Age'].agg(['size', 'count', 'mean'])	1	1
"related_people.loc[related_people[""PassengerId""]==588,""RGroup""]=""Frolicher_M"""	1	1
droplist.copy()	1	1
"test[""Age_4""] = (30 <= test[""Age""])&(test[""Age""]<45)"	1	1
Test.drop('Cabin',axis=1)	1	1
"train.loc[(train[""Name""]==""Master"")&(train[""Age""].isnull()), ""Age""] = train.loc[train[""Name""]==""Master"",""Age""].mean()"	1	1
x_test.drop(['PassengerId'], inplace = True, axis = 1)	1	1
df2['Sex'] = sex	1	1
X_train['Cabin'] =le.fit_transform(X_train['Cabin'].values)	1	1
titanic_df['Fare']= titanic_df['Fare'].astype(int)	1	1
model.add(Dense(y.shape[1], activation='softmax'))	1	1
df_train.loc[df_train.isnull().Age, 'Age'] = 35.0	1	1
"train['CabinN4'] = ""999"""	1	1
"train_scores[""phase""] = ""train"""	1	1
"df_train[""Fare""].hist(bins=50, density=True, stacked=True, color='teal', alpha=0.6)"	1	1
sns.boxplot(x='Embarked',y='Age',data=train_dataset)	1	1
test.loc[test['Fare'] <= 7.91, 'Fare'] = 0	1	1
train['Has_Cabin'] = x['Has_Cabin'] = np.where(train['Cabin'].isnull(), 0, 1)	1	1
"x['Title'] = x['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0] # get prefix title from name"	1	1
test_2.copy()	1	1
test_with_age.drop('Age', axis=1)	1	1
X_tot['PrimaryCabin']=X_tot['PrimaryCabin'].apply(lambda x:ord(x))	1	1
Pipeline._steps.values():	1	1
df['Title'].nunique() == 5	1	1
model.add(Dense(20, activation= 'relu'))	1	1
train.apply(lambda row: get_ticket_prefix_id(row, get_ticket_prefix_id_mapping), axis=1)	1	1
"data.drop(""Ticket"", axis=1)"	1	1
"df.loc[df.Age >= 2, ""AgeF""] = ""Young child"""	1	1
titanic_train.isnull().sum()[titanic_train.isnull().sum()>0]	1	1
deck.drop(index=78, inplace=True)	1	1
dfTest['Name']	1	1
titanicAll.groupby(['Survived','Age1']).size()	1	1
x_test['Cabin'] = le.fit_transform(x_test['Cabin'])	1	1
all_df.loc[(all_df.Deck.isnull()),'Deck'] = all_df.loc[(all_df.Deck.isnull()),'DeckPred']	1	1
rawdata.drop('Age', axis=1)	1	1
train.Fare.median()	1	1
raw_train['SibSp'].plot(kind='kde', color='black')	1	1
test.SibSp.astype(str)	1	1
test['NonPoorMothersAndChildren']= 0	1	1
df_copy.head()	1	1
train['Age'].iplot(kind='hist', colors='blue', title='Age distribution')	1	1
data_train.iloc[:,1:]	1	1
np.round(random_forest.score(X_train_norm, Y_train), 4)	1	1
train_df[['Pclass','Sex','Age','SibSp','Parch','Fare','CabinBool']]	1	1
results['acc_train'] = accuracy_score(y_train, predictions_train)	1	1
titanic_df['Embarked'].unique()	1	1
input_train.head()	1	1
train_df.groupby(['Survived', 'Sex', pd.cut(train_df['Age'], np.arange(0, 100, 5))]).size().unstack(0).plot.bar(stacked=True, alpha=0.75)	1	1
"data_1.ix[order].plot(kind=""Bar"")"	1	1
model.add(Dense(13, activation='relu'))	1	1
dataset['Age'].dropna().std()	1	1
titanic_train_data.loc[titanic_train_data.Cabin.str[0] == 'B', 'Cabin'] = 2	1	1
df[['Age','Fare', 'Family','Child','Female','Male','Class_1','Class_2','Class_3']]	1	1
Survived_Age.add_suffix('_Count').reset_index()	1	1
df_train.set_index('PassengerId')	1	1
test_df[['Pclass','Sex_Code','Age','SibSp','Parch','Fare','Agebin_Code','Farebin_Code','FamilySize','IsAlone','Title_Code','Embarked_Code']]	1	1
dataset['Title'] = dataset['Title'].replace('Miss', 'Mrs')	1	1
"train_df.drop(labels = [""Survived""],axis = 1)"	1	1
test_data['Title'] = test_data['Title'].replace('Dona.', 'Mrs.')	1	1
good_seeds.append(a_seed)	1	1
df.pivot_table(values = 'Survived', index = 'Pclass').Survived.plot.bar()	1	1
data_split[1]	1	1
train_x.drop(['Survived'], 1)	1	1
cv_data['Accuracy_test_stddev'][np.argmax(cv_data['Accuracy_test_avg'])],	1	1
df_test[['PassengerId', 'Survived']].to_csv('1st_RF.csv', index=False)	1	1
dataset.loc[dataset['IsMother'] == 1, 'Survived'].value_counts()	1	1
"test_df[""Embarked""].loc[test_df[""Embarked""]==""Q""]=2"	1	1
dataframe.drop(['SibSp','Parch'], axis=1)	1	1
dfTrain['Survived'].groupby(dfTrain['Ticket_Len']).mean()	1	1
score.mean(),	1	1
merged.loc[merged.Fare.isnull()].Pclass.values	1	1
data.Sex.values	1	1
test_df.loc[test_df['Family'] >= 1, 'Family'] = 1	1	1
test_features.drop(columns = ['ID'])	1	1
traindf[['Fare', 'Age']] = mms.fit_transform(traindf[['Fare', 'Age']])	1	1
"sns.boxplot(y=""Embarked"", x=""Fare"", hue=""Dataset"", data=combined_data);"	1	1
test.loc[test['Cabin'].str.len() == 5.0, 'CabinN1'] = test['Cabin'].astype(str).str[3:]	1	1
train['TicketPrefix'] = train['Ticket'].apply(extract_ticket_prefix)	1	1
train['Age'][train_null_age_index.pop()]=train_newages[i]	1	1
scores.append((name, score))	1	1
mcs_df.describe(include='all').T	1	1
df['fare']          = pd.cut(df.fare,12, labels=range(12))	1	1
"train[[""Pclass"", ""Survived""]].groupby([""Pclass""]).mean().plot.bar()"	1	1
train['Sex'] = train['Sex'].apply(lambda x:1 if x == 'female' else 0)	1	1
"related_people.loc[related_people[""PassengerId""]==1133,""RGroup""]=""Jacobsohn_M"""	1	1
X.loc[row,'Cabin'].startswith('B'):	1	1
"train[""Sex""][train[""Sex""] == ""male""] = 1"	1	1
full['Embarked'].fillna(full['Embarked'].mode(), inplace=True)	1	1
df_test.loc[:,['Sex','Embarked']]=df_test.loc[:,['Sex','Embarked']].astype('category')	1	1
train_df.drop(labels='AgeBand', axis='columns', inplace=True)	1	1
"sns.boxplot(y=df_female[""Age""])"	1	1
df_all['Embarked'].fillna(value='S', inplace=True)	1	1
"titanic_test.loc[titanic_test[""Sex""] == ""male"",""Sex""] = 0"	1	1
x_train_not_age_nan.drop(col_to_drop, axis=1, errors='ignore')	1	1
allset.Age.isnull().sum()	1	1
df['Title'] = df['Title_x'].map(title_mapping)	1	1
all.drop('Name',axis=1,inplace =True)	1	1
accuracies_rf.mean()	1	1
y['PassengerId']	1	1
stats.describe(df).variance	1	1
df_full['Age'] = df_full[['Age', 'Pclass']].apply(impute_age, axis = 1)	1	1
df.values[:800]	1	1
df_1['Survived']	1	1
train['Embarked'].value_counts().plot(kind='bar', ax=ax1)	1	1
d['AgeBand'] = pd.cut(d['Age'].astype(int), 5)	1	1
test_df.drop(['Ticket'],axis=1)	1	1
sns.boxplot(x = 'Survived', y = 'Fare', data = titanic_no_500s, palette = 'RdBu_r')	1	1
df_test['Age_scaled']=scaled_age_fare_test[:,0]	1	1
ax1.hist(train.Survived)	1	1
X_prob1.astype(float)	1	1
"df['Status'] = df['Status'].replace([""Mme"", ""Ms""], ""Mrs"")"	1	1
df.drop('Embarked',inplace=True,axis=1)	1	1
train_df.drop(['Sex','Person'],axis=1,inplace=True)	1	1
data.loc[data['Fare'] <= 14.45, 'SortFare_2'] = 0	1	1
original_train_data['CabinSharedWith']=original_train_data['Cabin'].apply(lambda x: extractCabinSharedWithFeature(x)).astype(int)	1	1
test3['Sex'] = le.fit_transform(test3['Sex'])	1	1
ax2.hist(train_data['Age'], bins = 20, alpha = .50,edgecolor= 'black',color ='teal')	1	1
"train[""Embarked""] = train['Embarked'].fillna(""S"")"	1	1
X_train['Embarked']=X_train['Embarked'].fillna('S')	1	1
"train_df[""cabin_type""] = train_df[""cabin""].str[0]"	1	1
model.add(Dense(64, kernel_initializer=init_mode, activation='relu', input_shape=(X_train.shape[1],), kernel_regularizer=regularizers.l2(reglr) ))	1	1
"train_df[""family_size_category""] = pd.cut(train_df[""family_size""], [-1, 0.5, 3, 10])"	1	1
data_test.Embarked.fillna(value=0,inplace=True)	1	1
model.add(Dense(70, input_dim=7))	1	1
train_df[['SibSp','Survived']].groupby(['SibSp']).mean().plot.bar(ax=ax[0])	1	1
df_test['Sex']=df_test['Sex'].cat.codes	1	1
dataset['InGroup'] = (dataset['GroupSize'] > 1).astype(int)	1	1
train_vw_cv.copy()	1	1
df_features['Cabin'].value_counts()[df_features['Cabin'].value_counts() > 1]	1	1
df_train2.iloc[:,:-1]	1	1
whole.set_value(idx,'Fare',m)	1	1
final_test['Fare1'] = final_test['Fare'].apply(combine_fare)	1	1
dataset.loc[ (dataset['Fare'] > 30 ) & (dataset['Fare'] <= 100 ), 'Fare'] = 2	1	1
df['Salutation'].replace(['Mlle', 'Ms'], 'Miss', inplace = True)	1	1
"axs[0].set_title(""Survival rate vs Sexe"")"	1	1
xText.iloc[:,[0,1,2,5]]	1	1
submitResult.to_csv('submitResults.csv', index=False)	1	1
train_df['Age'] = train_df['Age'].fillna(median_age)	1	1
train.loc[(train['AgeModified']>50) & (train['AgeModified']<=60),'AgeCategorical'] = 5	1	1
Age.iloc[0]	1	1
test_dataset['Family']= test_dataset['SibSp']+test_dataset['Parch']+1	1	1
tr['Age']=tr['Age'].fillna(ran.mean())	1	1
group_survival['group_survived'] = group_survival.groupby('GroupId')['Survived'].transform('sum')	1	1
"data[""Sex""] = data[""Sex""].map({'female':0,'male':1}).astype(int)"	1	1
titanic.loc[titanic['Sex']=='male','Sex']=0	1	1
df['F_C2'] = df['Sex_female'] * df['Pclass_2']	1	1
train_file.head(10)	1	1
df_all['SharedFeatures'] = df_all['SharedTicket'] + df_all['SharedName']	1	1
df_train.drop('Name', axis=1)	1	1
titanic_df.drop(['Age'], axis=1)	1	1
df['NamePrefix'] = df.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
train.groupby(['Pclass'])['Pclass','Survived'].mean()   # 对 Pclass 进行分组 求平均值	1	1
train_preprocessed_df.head()	1	1
data['sons'] = data.apply(lambda x :                           1 if ((x.Ticket in (['2661', '2668', 'A/5. 851', '4133'])) & (x.SibSp>0)) else 0, axis=1)	1	1
sns.boxplot(x='Pclass',y='Age',hue='Sex',data=test,palette='winter')	1	1
train_df[['Age']].plot(kind='hist', bins=20, ax=ax1, legend=False)	1	1
test_csv.loc[(test_csv.Name.str.contains('Miss') & test_csv.Age.isnull()), 'Age'] = Miss_average_age	1	1
"axes[0].bar(idx, groups_counts, width, color='#f9d9ac', label=""Passengers number"")"	1	1
df_train['Sex'].value_counts(normalize=True)	1	1
X_train.shape, y_train.shape	1	1
embarked_test.replace(['S', 'C', 'Q'], ['0', '1', '2'])	1	1
pd.isnull(test2).sum()	1	1
_df1['Title'] = _df1['Title'].replace(['Lady.', 'Countess.','Capt.', 'Col.',         'Don.', 'Dr.', 'Major.', 'Rev.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Rare')	1	1
submission.to_csv('test_submission.csv', index=False)	1	1
"embarked_dummy.rename(columns={ embarked_dummy.columns[0]: ""Cherbourg"",embarked_dummy.columns[1]:'Queenstown' })"	1	1
train_copy['age_division'][n] = 1	1	1
train_copy['age_division'][n] = 0	1	1
titanic_df['embarked'].isnull().sum()	1	1
"train[""Fare""].mean()"	1	1
x['Parch']+x['SibSp']	1	1
train.drop( ['Ticket'],axis=1,inplace = True)	1	1
finaldf.loc[indices, 'pca-1'],	1	1
final_test.iloc[:,0:cols-1]	1	1
df[['lang_group','Survived']].groupby('lang_group').std().rename(columns={'Survived':'std'})	1	1
data.loc[data['Age'].isnull() & data['NameTitle'].str.contains('Other.'), 'Age'] = 46	1	1
df_survival_rate.loc[i, 'Rate'] = len(sub_df_alive) / len(sub_df)	1	1
"full[""FamilySize""]= full[""SibSp""] + full[""Parch""] + 1"	1	1
sibsp.Age.mean() + np.random.randint(-2,2)	1	1
"movie_data.drop([""PassengerId"", ""Cabin"", ""Ticket""], axis = 1)"	1	1
dataset['Cabin'].isnull().sum()	1	1
"data_test['Has_Cabin'] = data_test[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
sub['EMBARKED'] = sub['EMBARKED'].cat.rename_categories([0,1,2])	1	1
age1[ '40to60' ]  = age1[ 'AgeGroup' ].map( lambda r : 1 if 41 <= r <= 60 else 0 )	1	1
train_clean.drop(col,axis =1)	1	1
train.Age.fillna(combined_data.Age.mean(), inplace=True)	1	1
final_train.drop('Survived',axis=1),	1	1
df.loc[5:8,'Fare']	1	1
traindf.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)	1	1
"models.append((""RandomForest"",RandomForestClassifier()))"	1	1
df.loc[df.fare <=50.0, :]	1	1
dataTrain_copy[['Pclass', 'Family number', 'Sex_male', 'Embarked_Q', 'Embarked_S', 'Age bins_dummies']]	1	1
"test_df[[""PassengerId""]]"	1	1
"df.loc[pid,""OtherName""] = """""	1	1
titanic['Cabin'].unique()	1	1
all_data['Age'] = all_data.apply(impute_age,axis=1)	1	1
data.head(100)	1	1
Train_Master.loc[(Train_Master['Fare'] > 12.2) & (Train_Master['Fare'] <= 24), 'Fare'] = 3	1	1
df_tmp['Fare'] = df_tmp['Fare_imputed']	1	1
df_train.loc[:,'Sex']  = df_train.Sex.map({'female':0 , 'male':1})	1	1
"titanic_df.loc[titanic_df[""Sex""] == ""female"", ""Sex""] = 1"	1	1
best_params_top_5.append(best_params)	1	1
titanic.drop(['Parch','SibSp'],1)	1	1
train_dataset.drop('Ticket',axis=1,inplace=True)	1	1
df_eclf.head()	1	1
"valid.loc[:, [""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked""]]"	1	1
"test[""Embarked""] = test[""Embarked""].astype(""int"")"	1	1
dat['Fare'] = categories	1	1
frame.bin_age.fillna(frame.bin_age.median(),inplace=True)	1	1
"cleaned_test[""Age""].std()"	1	1
df['Family']=df.SibSp+df.Parch	1	1
df_dums['age_3']=[1 if (ele <= 18.) & (ele > 10.) else 0 for ele in df_dums['Age']]	1	1
plot.hist(bins=50, title='Fare (< 100)', ax=axs[2, 1])	1	1
x_train['Alone'] = x_train['Family'].map(lambda x: 1 if x==0 else 0)	1	1
dataset_train['def_Cabin'] = dataset_train.Cabin.notnull().astype(int)	1	1
"train.drop(""Survived"", axis=1,inplace=True)"	1	1
"test_df[""Embarked""] = test_df[""Embarked""].map({""S"":0, ""C"":1, ""Q"":2})"	1	1
df2.convert_objects(convert_numeric=True)	1	1
"copy[""Fare""] = copy[""Fare""].fillna(fare_median)"	1	1
df_train.drop(columns = 'Survived')	1	1
corr_matrix.columns.values,	1	1
test.shape[1]	1	1
dataset.loc[dataset['Famsize'] == 1, 'Alone'] = 1	1	1
"big['XWho'][big['TName'] == i] = ""Mil."""	1	1
train.drop(['Ticket', 'PassengerId'], axis=1)	1	1
rest.append('Embarked')	1	1
"train[""family_size""] = train[""SibSp""] + train[""Parch""]"	1	1
df_train.Survived.values.reshape((891,1))	1	1
sb.boxplot(dataset.Family)	1	1
df[['Age', 'Parch', 'SibSp']].notnull().all(axis=1)	1	1
train_df[['Age', 'Survived']][train_df['Age'] > 65]	1	1
all_data.drop('Pclass', axis=1, inplace=True)	1	1
"train_data[""Single""] = (train_data[""Family""] == 0).astype(int)"	1	1
combine['Age'].fillna(combine['Age'].dropna().median(), inplace = True)	1	1
test.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis=1, inplace=True)	1	1
xtest.drop('Survived', axis=1, inplace=True)	1	1
train_df[['AgeBand','Survived']].groupby('AgeBand',as_index=False).mean().sort_values(by='AgeBand', ascending=True)	1	1
all_data.replace(np.nan, 0, inplace=True)	1	1
"train[""Age""].hist()"	1	1
answer.to_csv('answer.csv', index=False)	1	1
"data_train_p[""Survived""]"	1	1
Ticket.append(i)	1	1
df.drop(skip_flds, axis=1, inplace=True)	1	1
test_data['Name_pred'] = test.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
train_df.loc[(train_df.Age.isnull()) & (train_df.Gender==i+1) & (train_df.Pclass==j+1), 'AgeFill'] = median_ages[i,j]	1	1
X_val.values	1	1
df.drop(columns=col_drop,axis=1,inplace=True)	1	1
"train[""nFamily""] = train[""SibSp""] + train[""Parch""]"	1	1
sns.boxplot(x='Survived', y='Pclass', data=train, palette='hls')	1	1
titanicTrain.PassengerId.count()	1	1
features['Fare'] = full['Fare']	1	1
y_train.head(20)	1	1
"related_people.loc[related_people[""PassengerId""]==896,""RGroup""]=""Hirvonen_M"""	1	1
df.drop('Sex', axis=1, inplace=True)	1	1
sns.boxplot(classifiers, accuracy, ax=ax)	1	1
train_df['Fare'].value_counts()	1	1
titanic.drop([f], axis = 1)	1	1
train_df.drop([_target, _id], axis=1)	1	1
train_copy.loc[(train_copy['Age'] > 70) & (train_copy['Age'] <= 80), 'Age_Category'] = 7	1	1
mapper.transform(df)	1	1
df.drop('Guess', axis=1, inplace=True)	1	1
data.set_value(1193, 'TicketClean', int(med2))	1	1
train_csv['SimplifiedTitle'].unique()	1	1
data.loc[data['Embarked'] == 'Q','Embarked'] = 2	1	1
dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'AgeBand'] = 1	1	1
df['Age'].fillna(df['age_med'], inplace=True, )	1	1
train_set.corr()	1	1
test_cl.loc[:, Xcol]	1	1
df_test['Fare'] = (df_test['Fare'] - df_test['Fare'].mean())/df_test['Fare'].std()	1	1
X_train.columns.values[FeatSel_for.get_support()]	1	1
model.add(Dense(5, activation='relu'))	1	1
train_long['Survived']	1	1
titanic_df.drop('Ticket', axis=1, inplace=True)	1	1
data.parent_alone.loc[data.PassengerId==357] = 0	1	1
np.where(outputs>=0.5,1,0)	1	1
all_data['Cabin'].unique()	1	1
dataframe.fillna(-0.5)	1	1
dataset.loc[dataset['FamilyCount'] == 0, 'IsAlone'] = 1	1	1
df['Fare'].hist(bins=40)	1	1
dmodel.add(Dense(1, activation='sigmoid'))	1	1
"test[""Name""].apply(getTitle)"	1	1
train.groupby('Parch').Survived.mean()	1	1
train_data_train.drop(drop_features, axis=1)	1	1
"titanic_training_df['Embarked'] = titanic_training_df[""Embarked""].fillna(""S"")"	1	1
Xy[1]	1	1
params_init['min_sum_hessian_in_leaf '] = 16	1	1
"train_df[""Age""] = train_df.Age.interpolate()"	1	1
df_features.median()	1	1
"missing_df[""missing_perc""] = 100 * missing_df[""missing_count""] / train.shape[0]"	1	1
"tot[""FamSize""] = tot.SibSp + tot.Parch"	1	1
train.loc[train['Cabin'].isnull(), 'Cabin'] = 'U0'	1	1
test['X'] = 'Y'	1	1
"train[""family""] = name.apply(lambda x: x[:x.index("","")])"	1	1
dataset['family']=dataset['SibSp']+dataset['Parch']+1	1	1
"pd.merge(data_full, lastname_table, left_on=""Lastname"",right_index=True,how='left', sort=False)"	1	1
train['is_male'] = train.Sex.map({'male': 1, 'female':0})	1	1
df_test.loc[(df_test['Fare'] > 14.454) & (df_test['Fare'] <= 31), 'Fare']     = 2	1	1
pre_features.head(11).T	1	1
"data[""Survived""]=y_predict_logreg"	1	1
missing_data.sort_index(ascending=True)	1	1
"train.drop(labels = [""Cabin""], axis = 1, inplace = True)"	1	1
train['Pclass'].value_counts().plot.pie(explode=[0.025,0.025,0.025], autopct='%1.1f%%', ax=ax[0])	1	1
X[0:5]	1	1
data['Title'] = data['Title'].astype(int)	1	1
"clean_data[""Survived""][i]:"	1	1
titanic_data.loc[titanic_data['Age'] <=14,'Age'] = 0	1	1
"df[""Age""] = df[""Age""].fillna((df[""Age""].mean()))"	1	1
df_raw_valid['Survived']	1	1
ax[0].set_title('Cherbourg')	1	1
data['isChild'] =np.where(data.ImputedAge<18, 'Child','Adult')	1	1
X_final_test['Name_title'].value_counts()	1	1
train_df.loc[(train_df['Age']>16)&(train_df['Age']<=24),'Age_band']=1	1	1
accuracy['logistic_regression_second_level_selected_cols']	1	1
plt.hist(x=[data1[data1['Survived'] == 1]['Fare'], data1[data1['Survived'] == 0]['Fare']], stacked=True, color=['g', 'r'], label=['Survived', 'Dead'])	1	1
details.sort_values(by='corr Survived', ascending=False)	1	1
"train_hard_pred_matrix[""Random_Forest""],"	1	1
train.groupby('Pclass')['Embarked'].value_counts().unstack(level=1).plot.bar(stacked=True)	1	1
"combined[""Cabin""] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in combined['Cabin'] ])"	1	1
survived_age.plot.hist(20,color = 'g')	1	1
df_train['sex'] = df_train['sex'].apply(cleaner_lambda)	1	1
"df_test[""age_norm""]=((df_test[""Age""]-age_mean)/age_std)"	1	1
plt.rcParams['figure.figsize'] = (13, 6)	1	1
training_set['Embarked'] = encoder.fit_transform(training_set['Embarked'])	1	1
"train_dat[""Title""].value_counts()"	1	1
featureRanks['ranking'] = best_dtc.named_steps['rfe'].ranking_	1	1
fig['layout'].update(title = temp_col, margin=dict(l=100), width=800, height=height, showlegend=False)	1	1
le.transform(df['Pclass'])	1	1
df['Title'].isnull().any()	1	1
tf.contrib.layers.stack(X, tf.contrib.layers.fully_connected, layers_dim)	1	1
train6['HasCabin'] = 1	1	1
df.cabin.apply(lambda x: x[0])	1	1
train.fillna(age_mean, inplace=True)	1	1
"train_data.describe(include =[""O""])"	1	1
train_df.iloc[:, :-1].values	1	1
"df_train.groupby(""Pclass"").size().plot(kind=""bar"")"	1	1
df[['Pclass', 'Sex', 'SibSp', 'Parch', 'Cabin', 'Embarked']].columns:	1	1
"df_test[""Sex""].loc[df_test[""Sex""] == 'male'] = 1"	1	1
titanic_raw_train.describe()	1	1
cleaned_df['Embarked'] = cleaned_df['Embarked'].fillna('S')	1	1
test['AgeStat'].loc[(test['Age'] <= ((10*i) + 10)) & (test['Age'] > (10*i))] = i+1	1	1
data_train.loc[data_train['Age'].isnull(),'Age'] = mean_age	1	1
"train_data[""TitleMaster""] = 0"	1	1
data['qtd_same_ticket_bin'] = data.qtd_same_ticket.apply(lambda x: 3 if (x>2 and x<5) else (5 if x>4 else x))	1	1
age['Age_Categorized_Guess'] = pd.cut(age['Age_Guess'], logical_age_bins, labels=logical_age_group_names)	1	1
test.iloc[:,[1,3,4,5,6,8]]	1	1
"titanic_df.groupby(['Pclass']).apply(replace_all_null, ""Fare"")"	1	1
df['sibsp']+df['parch'] + 1	1	1
"GBT_result[1][""best_model""],"	1	1
title_mapping['Dona']=10	1	1
test_final.copy()	1	1
train_f['Survived'].ravel()	1	1
df['SIBSP_4_5']=0	1	1
data_test['Fare']=data_test['Fare'].fillna(data_test['Fare'].median())	1	1
train.drop(['PassengerId','Survived','Name','Ticket','Cabin'], axis=1)	1	1
dataset['Deck'] = dataset.Cabin.str.extract('([A-G])\d+', expand=False)	1	1
rawdata.corr()	1	1
data.surname_Beane.astype(np.uint8)	1	1
test_data['Family'] = test_data['SibSp'] + test_data['Parch'] + 1	1	1
predicted_probabilities.shape	1	1
titanic_df.loc[titanic_df['Male']==1]	1	1
df['Title'] = df['Name'].str.extract(' (\w+)\.', expand=False)	1	1
df['FamilyAllDied'] = 0	1	1
train.groupby('SibSp').mean()	1	1
DataFile['Ticket'] = DataFile['Ticket'].apply(lambda x: str(x)[0])	1	1
X_test['Title'].value_counts()	1	1
new_train.dropna(inplace=True)	1	1
"X_train[""Ticket""] = X_train[""Ticket""].map(extract_ticket)"	1	1
df['Title'] = df['Title'].replace(['Countess'],                           'Mrs')	1	1
dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 25), 'Age'] = 2	1	1
test_df.join(test_title_dummies)	1	1
test_df.ix[(test_df.Fare >= 70),'Fare2'] = 3	1	1
"df_train[""title""]=df_train[""Name""].str.lower().str.extract('([a-z]*\.)', expand=True)"	1	1
frame.loc[~frame.Ticket.isin(n_ticket.index),'NTicket']=0	1	1
data.pivot_table('Name', index = 'Title', columns = ['Sex'], aggfunc =('count')).fillna(0)	1	1
data['Fare'] = data['Fare'].fillna(train_data['Fare'].mean())	1	1
train_imputed[['Ticket_length', 'Title', 'NameLength', 'Pclass', 'Female', 'Age', 'withfamily', 'Ticket_group', 'Fare', 'Embarked', 'Cabin_first_ltr', 'spaces_in_name']]	1	1
processed_data['Age'] = processed_data[['Age','Pclass']].apply(fill_age, axis = 1)	1	1
train_df.drop(['Survived', 'Cabin','Ticket', 'Name', 'Parch', 'SibSp'],axis=1)	1	1
"train_df['Foreign'] = train_df['LastName'].str.endswith((""ic"", ""sson"", ""ff"", ""i"", ""o"", ""u"", ""ski"", ""a""))"	1	1
"knn_submission2.to_csv(""knn_predictions_wo_TGS.csv"", index=False)"	1	1
data_combined.tail(418).drop(['Survived'], axis=1)	1	1
"df_train[""Title""] = df_train[""Title""].astype(int)"	1	1
df['group_id']      = df['group_id'].astype(group_id_cat)	1	1
dataset.loc[(dataset['Age'] >16) & (dataset['Age'] <= 32), 'Age'] = 1	1	1
df_test['Sex'].replace(['male', 'female'], [1,0], inplace=True)	1	1
"coefficient_dataframe.sort_values(by=""Coefficients"", ascending=False)"	1	1
df[['Age', 'Sex']].isnull().sum()	1	1
df2['Fare']= df2['Fare'].fillna(df2['Fare'].median())	1	1
data.loc[data['Pclass'] == 3, 'Deck'] = data.loc[data['Pclass'] == 3, 'Deck'].str.replace('missing', 'S')	1	1
features.append('cabin_letter_cat')	1	1
"train.loc[(train[""Pclass""].values == 2) & (train[""Age""].isnull()), ""Age""] = meanAge2"	1	1
titanic_train['Sex'],_ =pd.factorize(titanic_train['Sex'])	1	1
train.drop(['Name', 'PassengerId', 'Survived', 'Ticket', 'Cabin'], axis=1)	1	1
accuracy_ls.head()	1	1
total_MAE.mean(axis=0).values	1	1
data.Fare.fillna(value=data.Fare.mean(), inplace=True)	1	1
dataset.loc[:,'Fare'] = dataset.loc[:,'Fare'].fillna(dataset.loc[:,'Fare'].mean())	1	1
full_df['FamilySize'] = full_df['SibSp'] + full_df['Parch'] + 1	1	1
X.drop(['Survived', 'Name', 'Ticket', 'PassengerId'], inplace=True, axis=1)	1	1
"submission.to_csv(""predict_result.csv"",index=False)"	1	1
df_train_dummy.head()	1	1
my_feature_columns.append(ticket_feature_columns())	1	1
data['SibSp']=data['SibSp']*0.02	1	1
test.at[i, 'Cabin'] != 0:	1	1
crosstab.sum().sum()	1	1
out['class2'] = out.Pclass == 2	1	1
np.dot((y_hat-y).T,y_hat-y)/m	1	1
test.loc[j, 'Cabin'] = test.loc[j, 'Cabin'][0]	1	1
pd.DataFrame.from_dict(df, orient='index')	1	1
dataset.loc[ dataset['Fare'] > 31, 'Fare_Band'] = 3	1	1
"data['Ticket_String'] = data.apply(lambda row: re.sub(""/"", """", row['Ticket_String']) , axis = 1)"	1	1
"sub.to_csv(""submission_rf4.csv"",index=False)"	1	1
data['SortAge_3'] = 0	1	1
age_df['male']	1	1
test_set['Survived'].copy()	1	1
df.drop('Pclass',inplace=True,axis=1)	1	1
data.Personal_Titles_Mrs.astype(np.uint8)	1	1
data.parent_alone.loc[data.PassengerId==319] = 0	1	1
train.loc[(train['Fare']>500) & (train['Fare']<=550),'FareCategorical'] = 10	1	1
"train[""Age""]=train[""Age""].fillna(fill_age(train,train_set_1_median))"	1	1
train_df[['Title', 'TitleBand']].head(10)	1	1
plot.hist(alpha=0.5, label='Didnt')	1	1
"test[""Gender""]"	1	1
train_data.Fare.describe()	1	1
"test_df[""Embarked""] = test_df[""Embarked""].map(embarked_dict)"	1	1
"test[[""PassengerId"",""Survived""]].to_csv(('submit_'+ts+'.csv'),index=False)"	1	1
data.head()[['Pclass', 'Age', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Embarked']]	1	1
df['Cabin_num1'] = df['Cabin'].apply(lambda x: str(x).split(' ')[-1][1:])	1	1
train.loc[train['Name'] == name, 'title'] = 'rare'	1	1
test[['PassengerId', 'Survived']].to_csv('First_Decision_Tree_Classifier.csv', index=False)	1	1
"dataset[""Name""]=dataset[""Name""].map(lambda x: len(x))"	1	1
submission['PassengerId'] = np.int32(np.round(submission['PassengerId']))	1	1
"df_name.loc[df_name[""Name""].isin([""Mlle."",""Ms.""]),""Name""]=""Miss."""	1	1
row['Survived'] == 1 else np.array([1,0])	1	1
train['A2'] = np.array(train['CategoricalAge'] == 2).astype(np.int32)	1	1
df_test.loc[df_test['Age'] > 70, 'AgeC'] = 3	1	1
comb_data.to_csv('comb_data_Titanic.csv')'''	1	1
train_data.groupby(['Parch'])['Survived'].value_counts().div(train_data.groupby(['Parch'])['Survived'].count()).unstack().plot.bar(stacked = True, ax = axes[1])	1	1
test.loc[test['Cabin'].str.len() <= 4.0, 'CabinN1'] = test['Cabin'].astype(str).str[1:]	1	1
X_submission.head()	1	1
df.drop(['PassengerId','Name','Ticket','Cabin','Embarked','SibSp','Parch'],axis=1, inplace=True)	1	1
accuracy_std.append(cv_result.std())	1	1
"train_data.loc[train_data[""Sex""] == ""female"", ""Female""] = 1"	1	1
titanic_train_dataset.head(5)	1	1
ages_probabilities.reindex_axis(['Age','Count'], axis=1)	1	1
data_df['IsAlone'] = data_df['FamilySize'].apply(lambda x: 1 if x == 1 else 0)	1	1
inputds.fillna(inputds.mean(),inplace=True)	1	1
test2.isnull().sum()	1	1
passengerId.count()	1	1
mod_data.replace(['male', 'female'], ['0', '1'])	1	1
train_df[['Sex','Survived']].groupby('Sex', as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
data['Sex_factorized'] = data['Sex'].factorize()[0]	1	1
df.PassengerId.nunique() == df.shape[0]:	1	1
age_plot.std()	1	1
df_train[['P_Ti_Minor', 'Minor']] = df_data[['P_Ti_Minor', 'Minor']][:len(df_train)]	1	1
"submit.to_csv(""../output/submit_bin_4.csv"",index=False)''';"	1	1
test_df.drop(['parent_of_child'],axis=1,inplace=True)	1	1
training_set.iloc[:, [2,4,5,6,7]].values # Pclass, Sex, Age, SibSp, Parch	1	1
test_one['Survived'].head()	1	1
df_t[['PassengerId']].copy()	1	1
titanic_train_dataset_for_training_step.head(3)	1	1
tf.add(tf.matmul(W1, x), b1)	1	1
"test[""Age""].dropna().median()"	1	1
test_df.is_copy = False	1	1
train_mini.head()	1	1
"data_train[""Survived""][data_train[""Sex""] == ""female""].value_counts(normalize=True)"	1	1
train['Ticket'].unique().size	1	1
train.loc[(train['Family']>1)&(train['Family']<=5),'Family']=1	1	1
"train_df.groupby([""Fare""])[""Age""].agg([""mean""])"	1	1
df_pred['FamilySize'] = df_pred['Singleton'] + df_pred['FamilySmall']*2 + df_pred['FamilyLarge']*3	1	1
re.sub(r'(.*?)','',x)	1	1
df.groupby(['Pclass']).agg({'Fare' : 'mean', 'Age' : 'median'})	1	1
test['SibSp']+test['Parch']+ 1	1	1
train_dummies.head()	1	1
test_df.drop(['Cabin','Embarked','Ticket'], axis=1)	1	1
df.Age.fillna(value=avgAge)	1	1
df_test_features.replace(ls,range(len(ls)))	1	1
index[0] # присваиваем букву самого популярного порта (index[0] - буква)	1	1
data['Age'] = pd.cut(data['Age'], bins=6, labels=np.arange(6))	1	1
test_data['Gender'] = test_data['Sex'].map(sex_mapping)	1	1
df_train[['Age','Survived']].groupby('Age').mean()	1	1
comb['Title'].replace({'Mr':0,'Ms':1,'Master':2},inplace=True)	1	1
train['name_length'] = [len(i) for i in train.Name]	1	1
features_long['Sex_d'] = (features_long.Sex=='male').astype(int)	1	1
full.loc[(full['Fare'] > 1.56) & (full['Fare'] <= 3.119), 'Fare'] = 2	1	1
dataset_train[['FamilySize', 'Survived']].groupby(['FamilySize']).count()	1	1
dataframe.drop(get_null_observations(dataframe,column).index)	1	1
train['Age'] = (train['Age'] - train['Age'].mean()) / train['Age'].std()	1	1
df_test_features.iloc[rowin,ap]=ord(cn[0])	1	1
df_all.loc[df_all['Pclass']==3].mean()['Fare']	1	1
test.loc[test['Fare'] > 250, 'Fare'] = 5	1	1
"result_test6[""PassengerId""] = passenger_id_test"	1	1
df[['Parch', 'Age']].groupby(['Parch']).mean()	1	1
test['hasCabin4'] = train['hasCabin4'].fillna(1)	1	1
dataframe['Age'] = dataset[['Pclass', 'Age']].apply(impute_age, axis=1)	1	1
train_df['AgeBin'] = pd.cut(train_df['Age'].astype(int), 5)	1	1
"df[""Age""] = self.age_imputer.transform(df[[""Age""]])"	1	1
titanic_data['Died'] = 1 - titanic_data['Survived']	1	1
"train[""LoneChild""] = 0"	1	1
X_train.shape, Y_train.shape , X_test.shape	1	1
data['Cabin'].apply(lambda x:0 if isinstance(x,float) else 1)	1	1
"valid_X['Title'] = valid_X['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
"full.groupby(""Child"").Child.count()"	1	1
dataset.loc[dataset.Name.str.contains('Miss'), 'Age'].mean()	1	1
"titanic_training_data.loc[titanic_training_data[""Embarked""]== ""S"",""Embarked""] = 0"	1	1
one_hot_train.isnull().sum().sort_values(ascending=False)	1	1
df['Pclass_2'][df['Pclass_2'] == 1].count()	1	1
concat_set['CategoricalAge'] = pd.cut(concat_set['Age'], 5)	1	1
trainY.head(2)           # Header of trainY	1	1
train.Age.dropna()	1	1
dataTrain['Pclass'].corr(dataTrain['Fare bins_dummies'])	1	1
test_df['Age_filled'] = test_df['Age'].fillna(test_df['Age'].median())	1	1
train.Age.isnull().any()	1	1
"results.to_csv(""output_python_voting.csv"",index=False)"	1	1
x_train.dropna(subset=['Embarked'],axis=0)	1	1
submission['PassengerId'] = test_data.index	1	1
submission.to_csv('CNN-submission-simple-cleansing_10Layer.csv', index=False)	1	1
predictions_df.to_csv('submission_3Layers_no_Drop.csv', index=False)	1	1
dataset['Title'] = dataset['Title'].replace(['Capt','Col','Don','Dr','Major','Rev','Jonkheer','Dona'],'Rare')	1	1
"data_train[""Cabin""] = data_train[""Cabin""].str[0]"	1	1
np.mean(testing_scores, axis=1)	1	1
"model_data[""Title""] = model_data['Name'].map(lambda name:name.split("","")[1].split(""."")[0].strip())"	1	1
features['feature'] = train_data.columns	1	1
transformed_df['Cabin_G'] = cabin.Cabin_G	1	1
"inDF.groupby(""Ticket"").size().to_dict()"	1	1
df_data.to_csv('fe_rfrage_scaled_data.csv', index=False)	1	1
df.loc[(age_df.Age.isnull()),'Age']=Ages_predected#预测值补回原df	1	1
simple_test_df.copy().drop(columns=['Survived'], axis=1)	1	1
train.isnull().sum().sort_values(ascending = False)	1	1
titanic_train_data.pivot_table(index = 'Pclass',values ='Survived')	1	1
dft.rename(columns={'emb':'Embarked'},inplace=True)	1	1
"dataset[""Fare""].fillna(dataset[""Fare""].median(), inplace = True )"	1	1
data['Age'].fillna(data['Title'].apply(lambda x: AgeGroupLabel.loc[x]), inplace = True)	1	1
models.append('ExtraTrees')	1	1
np.sum(y == 0)	1	1
data['Singleton'] = data.apply( lambda row: int(row['Family_Size'] <= 1), axis = 1)	1	1
self.parameters.get(key)	1	1
df['Woman'] = (df['Woman']).fillna(0)	1	1
df_train['Dataset'] = 'train'	1	1
allfeat.drop(columns=['Age','CategoricalAge']) #column no longer needed	1	1
test_raw[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
train_data.assign(Cabin_cat=cabin_cats)	1	1
dataset['title'] = dataset['title'].map(title_mapping)	1	1
train.drop(['PassengerId', 'Survived', 'SibSp', 'Parch', 'Ticket', 'Name', 'Cabin', 'Title', 'FamilySize'], axis=1)	1	1
df.Survived.sum()	1	1
sns.boxplot(x='Pclass',y='Age',data=trainData,palette='winter')	1	1
clfs.append(XGBClassifier(random_state = seed))	1	1
ship['Title_Code'].head()	1	1
data.FamilySize.head(10)	1	1
"test[""Age""]=AgeTypeTest"	1	1
classifier.add(Dense(units = number_of_units, kernel_initializer = 'uniform', activation = 'relu', input_dim = 16, kernel_regularizer=regularizers.l2(regularization_rate)))	1	1
test_X.drop(columns=['PassengerId'], inplace=True)	1	1
"df_survived.hist(""Age"",by=""Sex"",ax=ax1,color='green',bins=(0,10,20,30,40,50,60,70,80,90))"	1	1
"test.drop(""Cabin"", axis=1)"	1	1
train_df['age_bucket'] = pd.cut(train_df.Age, bins=mybins)	1	1
Y_train.iloc[:].values.reshape(Y_train.shape[0],1).astype('float');	1	1
df.loc[(df['Pclass']==3) & (df['Fare'] > 20),'Fare'] = df[df['Pclass']==3].mean()	1	1
DT_submission.to_csv('DT-submission.csv', index=False)	1	1
df['decade'] = df['Age'].dropna().apply(lambda x: int(x/10))	1	1
train_df.groupby('Ticket').size().reset_index()	1	1
"df_test[""surname""] = df_test[""Name""].apply(lambda x: name_split(x))"	1	1
data.loc[data['Age'].isnull() & data['NameTitle'].str.contains('Miss.'), 'Age'] = 22	1	1
test_df['Old_Female'] = test_df['Old_Female'].astype(int)	1	1
dt_feat_red.transform(dt_red_train)	1	1
test_set['Sex'] = encoder.fit_transform(test_set['Sex'])	1	1
train_d.info()  # Age and Embarked Values Missing	1	1
app_test.loc[:,['Age']]	1	1
np.round(perceptron.score(X_train_norm, Y_train), 4)	1	1
"test_df.loc[test_df[""Sex""] == ""female"", ""Sex""] = 1"	1	1
train_df_bins.iloc[:, 1:]	1	1
submission.to_csv('./submission_2.csv', index=False)	1	1
test_df.ix[(test_df.Cabin != 'Z'), 'Cabinknown'] = 'Yes'	1	1
train_X['FamilySize'] = train_X['SibSp'] + train_X['Parch']	1	1
"Y.set_index(""Ticket"",inplace=True)"	1	1
test['AgeModified'] = test['Age']	1	1
dataset['Title'] = dataset['Title'].map({'Mr': 1, 'Miss': 2, 'Mrs': 3, 'Rare': 4})	1	1
df.append(dt)	1	1
test_data_after_embark.head()	1	1
df_train[['Ticket', 'Fare', 'Name']].sort_values(by='Ticket', axis=0).head(5)	1	1
test_scaled.head()	1	1
test['Embarked'] = test['Embarked'].map(embark_mapping)	1	1
df['Embarked'] = df['Embarked'].map({'C':0, 'Q':1, 'S':2})	1	1
"train[""Age""]=train.Age.fillna(age_median)"	1	1
df_test['Fare'].isnull().sum()	1	1
df['Fare_log'].describe()	1	1
data.loc[data[y_attribute]==0]	1	1
test['Embarked'][test['Embarked']=='S']=0	1	1
dataset.drop('FamilySize', axis=1, inplace=True)	1	1
titanic.iloc[829, 11] = 'C'	1	1
pd.isnull(X_test['Cabin'].iloc[i]):	1	1
"titanic[""Age""].std()"	1	1
test_data['Age'] = test_data['Age'].fillna(28.0)	1	1
compare_models.sort_values(by='Score', ascending=False)	1	1
df_clean.loc[df_clean['Cabin'].isnull(), 'Cabin'] = 'X000'	1	1
original_train_data.groupby('FamilySize')['PassengerId'].count()	1	1
combined_df['title_encoded'] = combined_df['title_encoded'].fillna(0)	1	1
df_full.loc[mask_train].drop(columns=base_columns)	1	1
test_df['Age']= test_df['Age'].fillna(test_Replace)	1	1
data_df['Title'] = data_df['Title'].replace(['Col', 'Countess', 'Don', 'Dona', 'Jonkheer', 'Lady', 'Major', 'Mlle', 'Mme', 'Sir'], 'Royal')	1	1
train['Alone']=train['Alone'].astype('bool')	1	1
df_train.loc[829]	1	1
data['Age_band'].value_counts().to_frame().style.background_gradient(cmap='OrRd')	1	1
test.Fare.isnull().any()	1	1
"data_train[""Survived""][data_train[""Sex""] == ""male""].value_counts(normalize=True)"	1	1
df.loc[(df['AgeGroup']>30) & (df['AgeGroup']<=45), 'AgeGroup'] = 2	1	1
in ['Miss', 'Mlle', 'Ms']:	1	1
"df_real_test.drop([""Name"" , ""Ticket""], axis = 1)"	1	1
train_X['Embarked_Code'] = label.fit_transform(train_X['Embarked'])	1	1
ax[1][1].set_xticks([i+width/2 for i in x])	1	1
"sns.boxplot(y=df_female_class[""Age""])"	1	1
"df_age_train_X.drop(labels=[""Age""], axis=1, inplace=True)"	1	1
drop_elementsONS.append('Pclass')	1	1
data[['Sex_male',  'Fare',  'Age', 'Pclass',  'SibSp']]	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Countess"", ""Mrs"")"	1	1
numerical_columns.append('Poor_Shouthampton_Old_Miss')	1	1
train['AvFare']=train['Fare']/(train['Family']+1)	1	1
train6['Embarked'] = le.fit_transform(train6['Embarked'])	1	1
df_test[['Sex','P_Ti_Code','Ti_Code']] = df_data[['Sex','P_Ti_Code','Ti_Code']][len(df_train):]	1	1
train.drop(['PassengerId','Name','Ticket','Cabin', 'Embarked'], 1)	1	1
dataset_train[['Sex', 'Survived']].groupby(['Sex']).count()	1	1
plt.hist(Xy_train_df['Fare'].apply(np.log),bins=50);	1	1
df_submission['sex'] = df_submission['sex'].apply(cleaner_lambda)	1	1
master_df.corr()	1	1
dataset.loc[(dataset.Age.isnull())&(dataset.Pclass==i+1)&(dataset.SibSp==j),'Age']=guess_ages[i,j]	1	1
data.surname_Carter.astype('category')	1	1
"train[[""Sex"",""Survived""]].groupby('Sex').std()"	1	1
train.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis=1, inplace = True)	1	1
data.info() #To verify there is no more missing values for modelling	1	1
combined.drop('Ticket', axis = 1, inplace = True)	1	1
best_result[4] < result[4]:	1	1
dataset.Age.hist(bins=8)	1	1
df3[['Sex']].copy()	1	1
df_test['Port'] = df_test['Embarked'].map({'C':1, 'S':2, 'Q':3})	1	1
test_df['Ticket'].unique():	1	1
titanic_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
"dat.loc[~dat[""Cabin""].isin([-1,0,1,2,3,4,5,6]), ""Cabin""] = 7"	1	1
testData.drop('SibSp',axis=1,inplace=True)	1	1
dataframes.columns.values	1	1
all_data['Embarked'] = all_data['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)	1	1
Submission.to_csv('ridgesubmission02.csv',sep=',')	1	1
tdf.copy()	1	1
df.to_csv('logresult.csv', index=False)	1	1
group_elements.min()	1	1
"data_test['AgeGroup'] = pd.cut(data_test[""Age""], bins, labels = labels)"	1	1
data.distinction_in_name.astype(np.uint8)	1	1
"titanic.drop([""Survived"",'PassengerId', 'Name', 'Ticket'], axis=1)"	1	1
train_df[['PassengerId','Name', 'Cabin', 'Deck']].head(2).T	1	1
test['WcgAllSurvived'] = dataset.iloc[train_len:, -1].reset_index(drop=True)	1	1
np.squeeze(labels == 1)	1	1
Test_Master['Cabin'].fillna('U', inplace=True)	1	1
combined[['Embarked']] = combined[['Embarked']].fillna(value='C')	1	1
test_df.drop(['Sex'],axis=1)	1	1
"related_people.loc[related_people[""PassengerId""]==268,""RGroup""]=""Strom_M"""	1	1
data_train['Sex']=data_train.loc[:,'Sex'].astype('category')	1	1
X_test.drop(['Embarked'],axis=1)	1	1
DataSetTest.fillna(0)	1	1
table_title.div(table_title.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)	1	1
data.loc[data['Family'] == 2, 'FamilyGroup'] = 2	1	1
train.groupby(['Title']).Age.mean()	1	1
X_test.fillna(X_test.mean(), inplace=True)	1	1
df['EmbarkCode'] = 3	1	1
X_train['Age'] = X_train['Age'].astype(int)	1	1
"dataset[""Pclass""][x]==1:"	1	1
data_df['Age']=data_df['Age'].fillna(median_value)	1	1
ctb.style.background_gradient('summer_r')	1	1
train_df.align(test_df, join= 'inner', axis=1)	1	1
df_test['Embarked'] = df_test['Embarked'].astype('category')	1	1
sns.boxplot(x = 'Pclass', y = 'Age', data=titanic, hue='Sex',palette='RdBu_r', ax=ax2)	1	1
df_test_ml['SurvivedRFC'].rename('Survived')	1	1
"train_df.Name.fillna(train_df[""Name""].mode()[0], inplace=True)"	1	1
predict_test['Survived']=0 #initialize with 0	1	1
"ax[1].set_title(""Contributions to the fare gradient"")"	1	1
my_submission.to_csv('titanic_submission.csv', index=False)	1	1
test[['Age','Fare']]=scaler.fit_transform(test_sub_features)	1	1
train7['IsAlone'].loc[train7['FamilySize'] > 1] = 0	1	1
"datacv.set_value(i, 'Name', ""Mlle"")"	1	1
"test[""Age_cat""] = 0"	1	1
training_data[['Age', 'Survived','Sex']].groupby('Age').mean()	1	1
fig.layout.update({'barmode':'stack'})	1	1
blend.add(base_models)	1	1
train_dat['Embarked'].fillna(random.randint(1,3), limit=1, inplace=True)	1	1
"df.loc[df[""Sex""] == ""male"", ""Sex""] = 0"	1	1
ax5.hist(train_data['Fare'], bins = 20, alpha = .50,edgecolor= 'black',color ='teal')	1	1
gauss_submission['Survived'],	1	1
tmp_data_df.drop(['Age', 'AgeBin'], axis=1, inplace=True)	1	1
one_hot_encoded_train_df.isnull().sum()	1	1
f.sample(200)	1	1
data_test['FamilySize'] = data_test['SibSp'] + data_test['Parch'] + 1	1	1
"train.loc[train.Title == ""Mme"", ""Title""] = ""Mrs"""	1	1
train['Ticket'].head(20)	1	1
test[['PassengerId', 'Survived']].to_csv('First_K_Nearest_Neighbors_Classifier.csv', index=False)	1	1
"related_people.loc[related_people[""PassengerId""]==923,""RGroup""]=""Renouf_M"""	1	1
"data_df.loc[data_df[""Age""] <= 16, 'Age_Grouped'] = 0"	1	1
ax2[2].hist(df_3c[df_3c.Survived == 0].Age, bins=10, range=(0,100))	1	1
test_df['PersonClass'] =  test_df['Person'] + test_df['Pclass'].astype(str)	1	1
dataset['D'] = np.where(dataset['CabinChar']=='D',1,0)	1	1
test['source']= 'test'	1	1
train_num.index.isin(idxs)	1	1
survived_sibsp.fillna(0, inplace=True)	1	1
dataset['Embarked_Q'] = dataset['Embarked'].map(lambda s: 1 if  s == 2  else 0)	1	1
le_cabin_cat.transform(test_data['Cabin_cat'])	1	1
"final_sub2.to_csv(""Sub4.csv"", index=False)"	1	1
"titanic_train.drop(""Cabin"",axis = 1,inplace=True)"	1	1
"titanic['Alone'] = 0  # Creating a new feature ""Alone"" with default value = 0"	1	1
"test[""Master""] = False"	1	1
train['Age'].hist(bins=20, ax=axis1).set_title('Before Imputing')	1	1
test_df.loc[(test_df.Cabin.isnull())&(test_df.Initial=='Other'),'Cabin']='A26'	1	1
df['Survived'].sum()	1	1
axes[0].bar(ind, alive_f, width, bottom=dead_f)	1	1
submission_tree.head()	1	1
evaluation.head()	1	1
"train.drop([""PassengerId"",""Ticket"",""Cabin""], axis=1)"	1	1
train.loc[index,'leftRight']=0	1	1
train.loc[index,'leftRight']=1	1	1
features.append(tf.feature_column.numeric_column(column))	1	1
data_train_df.apply(LabelEncoder().fit_transform)	1	1
train_scores.mean(axis=1)	1	1
fulldata.drop(labels=['Parch','SibSp'], axis=1, inplace=True)	1	1
submission['PassengerId'] = data_test['PassengerId']	1	1
data['FamMem'] = data['SibSp'] + data['Parch']	1	1
sub['Survived'] = preds	1	1
"titanic_df[""Title""] = titanic_df[""Title""].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
combined_data.append(titanic_train_org)	1	1
test_data['Family_members'] = family_members	1	1
df.drop('Name', 1)	1	1
"median_ages[[""Sex"", ""Pclass"", ""Title"", ""Age""]]"	1	1
y_pred.append('Survived')	1	1
data_train['Age'].dropna().astype(int).plot(kind='hist', bins=80)	1	1
test_set['Title'] = test_set['Title'].str.replace('(Dona|Countess|Lady|Jonkheer)', 'Noble')	1	1
df_test['Age'].hist(bins=70, ax=axis2)	1	1
model_data.loc[(model_data.Pclass == 1)&(model_data.Title == 4)&model_data.Age.isnull(),('Age')] = 51	1	1
"df_test.groupby(['Pclass','Title'])[""Age""].mean()"	1	1
train.loc[train.Age.isnull(),'Age'] = train.Age.median()	1	1
tit_df_san.head(3)	1	1
"traindat.drop(""SibSp"",axis=1,inplace=True)"	1	1
test_dummy.as_matrix()	1	1
"train.drop([""PassengerId"", ""Name"", ""Ticket"", ""Cabin""], axis = 1)"	1	1
combined.Fare.fillna(data.Fare.mean(),inplace=True)	1	1
frame['Boy'] = (frame.Name.str.contains('Master')) | ((frame.Sex=='male') & (frame.Age<13))	1	1
test_data.Name_pred.fillna(value=5)	1	1
test.drop('Sex',inplace=True,axis=1)	1	1
"titanic_test.drop(""Name"", axis=1, inplace = True)"	1	1
full_set.drop(['Pclass', 'Sex', 'Embarked'], axis = 1)	1	1
"train[[""Title""]] = train[[""Title""]].replace('Ms', 'Miss')"	1	1
"test.loc[(test.Fare.isnull())&(test.Pclass==1),'Fare'] = test[""Fare""][test[""Pclass""] == 1].median()"	1	1
test['Sex'] = sex_encoder.transform(test.Sex)	1	1
titanic_test['Ticket'].map(getTicketNumber)	1	1
"X_cat.drop(""Name"", 1)"	1	1
Survive_Corr[1:20] # remove the 'Survived'	1	1
titanic['Survived'].fillna(0,inplace=True)	1	1
footballers['Unit'] = df['Value'].str[-1]	1	1
in ['Ticket', 'Cabin', 'Fare', 'LastName']:	1	1
pd.DataFrame.from_dict(dict_of_best,'index')	1	1
reviews['points'].value_counts().sort_index().plot.area()	1	1
big_X_imputed['Sex'] = le.fit_transform(big_X_imputed['Sex'])	1	1
row['Pclass'] == 1 else 0	1	1
X_train_norm.shape[1]; # number of features	1	1
plt.hist(combine['Age'][combine['Age'].isnull()==False],bins=10)	1	1
"combined[""Embarked""] = combined[""Embarked""].map(embark_mapping)"	1	1
xg_scores.append({'lamb':lamb, 'eta':eta, 'acc':res.mean()})	1	1
"test_df.fillna({""Fare"":0.0})"	1	1
train['Cabin'] = train['Cabin'].apply(lambda x : x[0] if x != 'None' else 'None')	1	1
df['Poor_Old_Miss_First_Class'] = 0	1	1
train_data['Age'].fillna((train_data['Age'].mean()), inplace=True)	1	1
df['Family'].replace(to_replace = [5,6], value = 'medium', inplace = True)	1	1
train_data['Survived'].values.ravel()	1	1
df['name_length_mid'] = df['name_length'].apply(lambda s: 1 if 35 < s <=58 else 0)	1	1
"test.loc[test[""Family""]==0, ""Family""] = 0"	1	1
test_data['Cabin'].unique()	1	1
df[['Survived','Pclass', 'Age_band', 'Sex']]	1	1
features.sort_values(by=['importance'], ascending=False, inplace=True)	1	1
dataset.groupby(['Sex', variable]).size()['male']	1	1
sns.boxplot(x='SibSp', y='Age', data=new_train)	1	1
np.where((test_set['Age'] > 20) & (test_set['Age'] <= 40), 1, 0)	1	1
x_train_c.info()	1	1
train_df['Cabin'].fillna('X', inplace = True)	1	1
ax2.hist([df[df['Survived']==1]['Fare'],df[df['Survived']==0]['Fare']],stacked=True,bins=40,color=['red','grey'],label=['Survived','Died'])	1	1
"test_data.drop(""Embarked"", axis=1, inplace=True)"	1	1
train_df['Nclass'] = train_df['Nclass'].map({' Jonkheer': 'Other', ' the Countess': 'Other', ' Col': 'Other', ' Rev': 'Other', ' Mlle': 'Mrs', ' Mme': 'Mrs', ' Capt': 'Other', ' Ms': 'Miss', ' Lady': 'Miss', ' Major': 'Other', ' Sir': 'Mr', ' Dr': 'Mr', ' Don': 'Mr', ' Master': 'Mr', ' Miss': 'Miss', ' Mrs': 'Mrs', ' Mr': 'Mr',})	1	1
X_train_age['PassengerId']	1	1
x['MP_Died']=0	1	1
merged.Name.values[i].replace('.',',').split(', ')	1	1
pred_df.head(10)	1	1
summary_sex.iloc[-1, :]	1	1
test_means[2]	1	1
titanic['Cabin'] = titanic[['Cabin','Pclass']].apply(impute_cabin,axis=1)	1	1
"train.loc[(train[""Parch""]==0) & (train[""Age""]<18), ""LoneChild""] = 1"	1	1
temp_df.loc[i, 'Ticket_char'] = csearch.group()	1	1
"vif[""features""] = X.columns"	1	1
train.Sex.apply(lambda l: np.where(l==0, -1, 1))	1	1
df_train[['CategoricalAge', 'Survived']].groupby(['CategoricalAge'], as_index=False).mean()	1	1
"data[""f_size""] = data[""SibSp""] + data[""Parch""] + 1"	1	1
big_X_inputed['Sex'] = le.fit_transform(big_X_inputed['Sex'])	1	1
results.to_csv('titanic_result.csv', index=False)	1	1
alone_in_train.drop(family_cols + group_cols, axis=1)	1	1
data.sons.astype(np.uint8)	1	1
"train.drop(labels = [""Name""], axis = 1, inplace = True)"	1	1
dfTrain['Survived'].groupby(pd.qcut(dfTrain['Name_Len'], 5)).mean()	1	1
x_train['IsAlone'].loc[x_train['Family'] > 0] = 0	1	1
"df_test.loc[((df_test[""title""]==""mrs."") & (df_test[""Age""].isnull()==True)).tolist(),'Age']=avg_mrs"	1	1
trainSet['Fare'].hist(density=True)	1	1
"mom_s['Age_cat'].value_counts(sort=False).plot(kind=""bar"",alpha=0.5,color='red',ax=axes[0,1])"	1	1
"df.groupby(""Survived"").get_group(1)"	1	1
dataset.dropna(inplace = True)	1	1
"tot[[""Survived"",label]].groupby(label).Survived.mean()"	1	1
train.drop(columns=['Name', 'Ticket', 'PassengerId', 'Cabin', 'SibSp','Parch','Fare', 'Age', 'Embarked', 'FamilySize','FareBand', 'Pclass', 'Sex'])	1	1
data.iloc[sample], data.drop(sample)	1	1
"test.loc[i,""First Name""] = l[0].strip()"	1	1
train_test_data[1].head()  # test data	1	1
tr['Title'] =tr['Title'].replace('Dona',3)	1	1
df_train['Survived'] = df_train['Survived'].astype(int)	1	1
app_train.loc[app_train['Survived']==1,['Fare']]	1	1
data.columns.values[selector.get_support()]	1	1
submission.to_csv('results.csv', header = True, index=False)	1	1
train['Sex']=le_sex.fit_transform(train['Sex'])	1	1
"sns.boxplot(x=""Survived"", y=""Age"", palette=[""m"", ""g""], data=df_tmp)"	1	1
df_train['known_age'] = df_train['Age'].apply(lambda x: 0 if pd.isnull(x) else 1)	1	1
np.where( prediction_test < 1, 0, 1)	1	1
X_data.iloc[:, 1:]	1	1
plt.hist(data.SibSp[data['Survived'] == 1], label = 'after', alpha = 0.4, color = 'r')	1	1
all_data['Sex'] = all_data['Sex'].map({'male':0, 'female':1}).astype(int)	1	1
"train[[""Title""]] = train[[""Title""]].replace('Mlle', 'Miss')"	1	1
dataset.loc[dataset['Fare'] > 6.2  ,'Fare']=4	1	1
X_train['Name_len'] = X_train['Name'].apply(lambda x: x.split())	1	1
dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3	1	1
seq.add(Dense(4,activation='softmax'))	1	1
"StackingSubmission_ada.to_csv(""StackingSubmission_ada_1.csv"", index=False)"	1	1
"test[""AgeCategory""] = test[""AgeCategory""].map({""Child"" : 0, ""Adult"" : 1, ""Old"" : 2, ""MissingData"" : 3})"	1	1
pipelines.append(('ScaledSVM', Pipeline([('Scaler', StandardScaler()), ('SVM', SVC())])))	1	1
train['Ticket_group'] = np.where(train['Ticket'].str.isdigit(), train['Ticket'].astype(str).str[0], train['Ticket'].str[:1])	1	1
train_df['FamilySize'].describe()	1	1
dataset['Pclass1'] = 0	1	1
pred_table_lr_1_test.rename(columns={'Pred':'Survived'})	1	1
MLA_compare.loc[row_index, 'MLA Test Accuracy'] = alg.score(test1_dummy_x,test1_dummy_y)*100	1	1
lda.transform(x_train)	1	1
df['name_length_short'] = df['name_length'].apply(lambda s: 1 if s <= 35 else 0)	1	1
y_Qtest.sum()	1	1
"df_test[""Fare""].fillna(value = median_fare, inplace = True)"	1	1
train['Age'].fillna(value=np.random.randint(train['Age'].mean() - train['Age'].std(), train['Age'].mean() + train['Age'].std()), inplace=True)	1	1
train_df[['Embarked', 'Pclass', 'Survived']].groupby(['Embarked', 'Pclass']).mean()	1	1
original_test_data['Age'].hist(ax=axarr[0][1])	1	1
plt.hist(age_df['Age'])	1	1
dummies.append(pd.get_dummies(df[col]))	1	1
train_df.Fare.fillna(median_fare, inplace=True)	1	1
full.Family_Survival.describe()	1	1
ax[3].hist(training_data.Survived);ax[3].set_title('the Survived count on training data ')	1	1
df_train.drop(['Name'],axis=1)	1	1
titanic_test.drop(['Sex','SibSp','Parch','Pclass','Embarked','Age','PassengerId'],axis=1)	1	1
"ax1.hist(train['Age'][sel_age_fin], bins, normed=0, alpha=0.25, label=""All"")"	1	1
test_df.drop(['Person'], axis = 1, inplace = True)	1	1
map_table_age_df.iloc[5:10, 1] = titles	1	1
male_mean_age_class.append(np.round(mage))	1	1
test['Title'].replace(['Mr','Mrs','Miss','Child','Other'],[0,1,2,3,4],inplace=True)	1	1
"full_df[""Age""].isnull().sum()"	1	1
train.isnull().sum(axis = 0)	1	1
df_train['Survived']; train_x = df_train.drop('Survived',axis=1)	1	1
"train[[""Name"",""Cabin""]].head(10)"	1	1
matplotlib.rcParams['xtick.major.pad']='10'	1	1
train2.drop('Survived', axis=1)	1	1
titanic.Age.fillna(titanic.Age.mean())	1	1
df.loc[(df.NumFam > 3), 'FamSize'] = 2 #medium families	1	1
df_age_norm_3.hist();	1	1
"xgb_submit_dataframe[""Survived""] = xgb_test_Y"	1	1
"dataframe2[""SibSp""]= dataframe[""SibSp""]"	1	1
train_df_concat.loc[(train_df_concat['Survived']==3)]	1	1
X_train['Name_title'].value_counts()	1	1
plt.hist(df.Fare, bins=45)	1	1
train_df_final[['Age', 'Fare', 'TraveledAlone', 'Pclass_1', 'Pclass_2', 'Sex_male', 'Embarked_C']]	1	1
test_df['Age'].fillna(age_count.argmax(), inplace=True)	1	1
all_data['FareRange'] = pd.qcut(all_data['Fare'], 4)	1	1
result.to_csv(path_or_buf='soft_voting_submittion.csv', index = False, header = True)	1	1
df_imp.reset_index().sort_values(by=['importance'], ascending=False)	1	1
titanic.drop(['PassengerId'], axis=1, inplace=True)	1	1
surname.astype(str) + '-' + dataset['Pclass'].astype(str) + '-'	1	1
train['Survived'].groupby(age_bin).mean()	1	1
df['Title'].replace(['Miss','Mlle','Mme','Mrs','Ms'],'Ms',inplace=True)	1	1
test.loc[(test['Pclass'] == 2) & (test['isAlone'] == 1), 'class_alone'] = 4	1	1
dataset['Title'] = dataset['Name'].apply(extract_title)	1	1
"test.drop([""PassengerId"", ""Pclass"",""Name"", ""Sex"", ""Ticket"", ""Cabin"", ""Embarked""], axis = 1,inplace = True)"	1	1
titanic_data.Sex.replace(['male', 'female'], [0, 1])	1	1
"X_test[[""Age"", ""Fare""]] = std_scale_test"	1	1
titanic['D'] = (titanic['Cabin_group'] == 'D').astype(int)	1	1
"res[[""PassengerId"",""Survived""]]"	1	1
model_type.append('GridSearchCV Random Forest')	1	1
full_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean()	1	1
i['Fam_Size'] = np.where((i['SibSp']+i['Parch']) == 0 , 'Solo',         np.where((i['SibSp']+i['Parch']) <= 3,'Nuclear', 'Big'))	1	1
cv_scores.mean(axis=1)	1	1
df.drop(['Cabin','Name','Ticket','Parch','SibSp','Sex'],axis=1,inplace=True)	1	1
Test_Master.drop('Cabin', axis=1, inplace=True)	1	1
column['Title'] = column['Title'].replace('Mlle', 'Miss')	1	1
data['Title'].replace(['Dona.', 'Lady.', 'the Countess.', 'Capt.', 'Col.', 'Don.', 'Dr.', 'Major.', 'Rev.', 'Sir.', 'Jonkheer.', 'the'], 5, inplace=True)	1	1
train_data[['Survived','Embarked']].groupby(['Embarked'],as_index=False).count() #after filling the blank 2 with S	1	1
df_train.drop('Ticket',axis =1, inplace=True)	1	1
data_copy.loc[:,'Sex']=data_copy['Sex'].fillna('male')# replace Sex with majority 'male'	1	1
int1.isnull().sum()	1	1
lre_cv.best_params_['multi_class'],	1	1
"test_dataset.loc[ test_dataset.Fare <= test_dataset.Fare.median(), ""Fare_Bound"" ] = 2 # Low Fare type"	1	1
"tickets.append(i.replace(""."","""").replace(""/"","""").strip().split(' ')[0])"	1	1
titanic['Age_bin'].value_counts()	1	1
"data.set_value(i, 'Name', ""Mr"")"	1	1
survivors.count()	1	1
df_train.isnull().mean()	1	1
ax[1][0].bar(x, survivor_class)	1	1
X_test['Age'] = X_test['Age'].apply(str)	1	1
"test_data[""Single""] = (test_data[""Family""] == 0).astype(int)"	1	1
"dftrain[""Survived_Model""]"	1	1
dataset.loc[(dataset['Fare'] > 8.85) & (dataset['Fare'] <= 24.288), 'Fare']   = 2	1	1
results['f_test'] = fbeta_score(y_test,predictions_test,beta=0.5)	1	1
titanic_df_test.drop(['PassengerId','Name','Sex','SibSp','Parch','Ticket','Cabin','Embarked','Alone','person','Pclass','Without Family','male','class_3'],axis=1,inplace=True)	1	1
full_data.Cabin.apply(clean_cabin)	1	1
"data[""Sex""]==""female"" and data[""Pclass""]<=2:"	1	1
predictions['NaiveBayes_Multinomial']=acurracy_NB_M*100	1	1
new_survived.describe()	1	1
pylab.rcParams[ 'figure.figsize' ] = 15 , 8	1	1
titanic['Group_size'] = titanic['Family_size']	1	1
"df_train[""Cabin""] == 'M'"	1	1
"ans.to_csv(""submit_bnb.csv"", index = False)"	1	1
"feats.query(""Embarked == 'S' and Pclass == 3"")['Fare'].describe()"	1	1
df_test.Fare.fillna(-0.5)	1	1
shape[0] > 10 :	1	1
"train_df[""Parch""]"	1	1
df['Age'] = scaler.fit_transform(np.array(df['Age']).reshape(-1, 1))	1	1
df_train['SexId'] = df_train['Sex'].map({'male': 1, 'female': 0})	1	1
titanic_train_dataset['CabinFloor'] = cabin_floor_list	1	1
full_data['FareCat'][train['Survived']==0].value_counts().sort_index()	1	1
train[['fareband','Survived']].groupby('fareband',as_index=False).mean().sort_values('Survived',ascending=True)	1	1
"test_df[""Male""] = test_df.Sex.map({""male"": 1, ""female"": 0}).astype(int)"	1	1
df_train.groupby(['Sex','Pclass'])['Age'].mean()	1	1
test_X.loc[test_X['Age'].isnull(), 'Age'] = test_X['Age'].mean()	1	1
train[['FamilySize', 'Survived']].groupby('FamilySize').mean()	1	1
axes[0].set_title('% of Siblings/Spouses', fontsize=15)	1	1
train_set_predictors.shape	1	1
"related_people.loc[related_people[""PassengerId""]==19,""RGroup""]=""Vander Planke_M"""	1	1
test['IsBaby'] = 0	1	1
"data[""Title""] = le.transform(data[""Title""])"	1	1
ax[1].set_yticks(range(0,100,10))	1	1
test['Cabin_info'][test.Cabin=='N']=0	1	1
"df.drop([""Cabin"",""Ticket"", ""Name""], axis = 1, inplace = True)"	1	1
train_df.replace('C',0)	1	1
test['Title'] = [i.split(', ')[1] for i in test.Title]	1	1
classifier.add(Dense(units=output_dim, kernel_initializer='uniform'))	1	1
comb_data['AgeCat'] = comb_data['AgeCat'].astype('category')	1	1
df['Embarked']=df['Embarked'].astype('category')	1	1
train['Embarked'].value_counts(dropna=False)	1	1
df.drop(['PassengerId', 'Cabin', 'Ticket', 'Embarked'], axis=1)	1	1
titanic_df.groupby(['Sex'], as_index=False).get_group('male')	1	1
train_df.loc[(train_df['Age'] > 18) & (train_df['Age'] <= 30), 'AgeGroup'] = 2	1	1
correl_train.head()	1	1
X_test['Family'] = X_test['Parch'] + X_test['SibSp']	1	1
train_df.describe(include = 'all')	1	1
"thisset.add(""orange"")"	1	1
df_clean.loc[df['Embarked'].isnull(), 'Embarked'] = 'S'	1	1
train_df['Age'] = pd.cut(train_df['Age'], bins=[0,12,40,80], labels = ['Child', 'Young', 'Old'])	1	1
train_data[['Embarked', 'Survived']].groupby(['Embarked']).mean()	1	1
train.groupby('Pclass').Survived.mean()	1	1
comb_data['Title'] = comb_data['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
"df.drop(labels=[""Ticket"",""Sex_male""], axis=1, inplace=True)"	1	1
cols.values,	1	1
plt.hist(train_data.Age[(np.isnan(train_data.Age) == False)], bins= 15, alpha = 0.4, color = 'r', label = 'Before')	1	1
train_df['Title'] = train_df['Title'].apply(generalizingTitle)	1	1
data['Deck'] = data['Deck'].map(cabin_map)	1	1
"df[""Embarked""].fillna(df[""Embarked""].mode().iloc[0], inplace=True)"	1	1
all_data['Title'] = all_data.Name.str.extract(' ([A-Za-z]+)\.', expand = False)	1	1
res1[0]	1	1
"train_df.loc[train_df[""Pclass""]==3].loc[train_df[""Age""]>50].groupby([""Age"",""Sex""])[""Fare""].agg([""mean""])"	1	1
sns.boxplot(y='Parch', x='SibSp', ax=ax1, data=train_df, linewidth=1, saturation=5, palette=palette7)	1	1
train['Age'].dropna().astype(int).hist(bins=70, ax=ax1)	1	1
X_test_num.fillna(X_train_num.mean())	1	1
tf.transpose(tf.add(tf.matmul(wo, y2), bo))	1	1
train_data.join(titanic_embarked)	1	1
pred_ls.append(pd.Series(model.predict_proba(X_test[training_vars])[:,1]))	1	1
"output.to_csv(""my_submission.csv"",index=False)"	1	1
test.drop(['SibSp', 'Parch'], axis = 1, inplace = True)	1	1
"holdout[""Title""] = holdout_titles.map(titles)"	1	1
titanic_train.drop(['Title','Title_Mr'],1)	1	1
np.append(np.arange(0,251,10), train_data['Fare'].max())	1	1
"Submission.to_csv(""LinearClassifierSubmissionPrediction.csv"", index=False)"	1	1
data['Cabin2ndClass']= data.apply(cabin2ndclass,axis=1)	1	1
combined.boxplot(column='Age', by='Pclass')	1	1
df_train_ml['Title'] = df_train_ml['Title'].replace(other, 5)	1	1
train['Familysize'] = train['SibSp']+train['Parch']+1 # sib = 형제자매, parch = 부모자식	1	1
str.join(', ', ['%s=%s' % (_k, _v) for (_k, _v) in p])	1	1
Answer['PassengerID']=test['PassengerId']	1	1
J.append(c)	1	1
f1_scores.append(score_f1)	1	1
data['Title'] = data.Title.replace(male)	1	1
data.Cabin_numerical.hist(bins=20)	1	1
cabin_info.keys():	1	1
dataset['Ttype'] = dataset['Ttype'].map( {'1': 1, '2': 2, '3': 3, '4': 4,'5': 5,'6': 6, '7': 7, '8': 8,'9': 9,'A': 10, 'C': 11, 'F': 12,'L': 13, 'P': 14, 'S': 15,'W': 16} ).astype(int)	1	1
train.drop(['Cabin','Ticket'],axis = 1)	1	1
"train_df[""C""] = train_df.Embarked.apply(lambda l: np.where(l==1, 1, 0))"	1	1
family['Surname_code'] = family['Surname'].map(dict_scode)	1	1
model.add(Dense(12, activation='relu'))	1	1
d['Age']=pd.qcut(d['Age'].astype(int),4)	1	1
test_df['Pclass'].value_counts().plot(kind='barh', ax=ax2)	1	1
titanic_train_dataset[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean()	1	1
final_test.copy()	1	1
test['Age']=test['Age'].fillna(data['Age'].median())	1	1
full_set['Title'] = full_set['Title'].map({'Mr':0, 'Mrs':1, 'Miss':2, 'Rare':3})	1	1
"data_combined[""Age""].isnull().sum()"	1	1
raw_data['Age'].apply(group_age)	1	1
allset['FamilyBucket']='Single'	1	1
test['Title'] = test.Name.str.extract(' ([A-Za-z]+).', expand=False)	1	1
"axes[1].set_ylabel(""No of records"")"	1	1
data5.drop(['Pclass','Name','Sex','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Age'], axis=1)	1	1
full.set_index('PassengerId', drop = False, inplace=True)	1	1
train['SibSp'][train['Survived'] == 0].value_counts()	1	1
"submit.to_csv(""result25.csv"", index=False)"	1	1
df_train[['Survived','Pclass']].groupby('Pclass').mean().sort_values(by='Survived',ascending=False)	1	1
test.fillna(999)	1	1
data.loc[(data['Age'] < 64) & (data['Age'] > 34.9), 'Age'] = 3	1	1
titanic_df['Fare'].plot(kind='hist', figsize=(15, 3), bins=100, xlim=(0, 50))	1	1
final_test['Survived'].count()	1	1
titanic_test.replace('S',1).replace('C',2).replace('Q',3) # Converting Embarked feature to numeric data.	1	1
"factors[""t_num""]=1"	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Ms', 'Miss')	1	1
"train_df[""title""] = train_df[""name""].str.split("","").str[1].str.strip().str.split().str[0]"	1	1
dc['Age']  = dc.groupby(['female','ClassUp','ClassMid','ClassLow','SibSp','Parch','harborA','harborB','harborC','Title'])['Age'].transform(lambda x: x.fillna(x.median()))	1	1
train['Sex'][train['Sex']=='female']=1	1	1
acc_list.append(acc)	1	1
data_pruned['hasCabin'] = hasCabin.values	1	1
Cabin_dummy.head(5)	1	1
df['Age'] = df[['Age','Pclass']].apply(fill_age_na,axis=1)	1	1
train_df.drop(['Name','PassengerId','Cabin','Ticket','Fare'],axis=1,inplace=True)	1	1
"train_data.groupby([""Survived"", ""Pclass_str""]).size().reset_index()"	1	1
cols.values[0:25]	1	1
data_train.copy(deep = True)	1	1
ticklength.append(len(name))	1	1
features.append('third_class')	1	1
oridinal_plot.items():	1	1
df.loc[:, features]	1	1
"train[""Sex""]=train[""Sex""].astype(int)"	1	1
traind.drop(['Survived'], axis=1)	1	1
kaggle.drop(['Embarked_S','Sex_female','Name_Rare','Name_Mr.','SibSp','Parch','Pclass_1'],axis=1)	1	1
knn_submission['Survived'],	1	1
train_data.drop(['Ticket'], axis=1, inplace=True)	1	1
df['Se_Ca'] = 0	1	1
titanic_df.drop(['top_cabin'],axis=1,inplace=True)	1	1
titanic_df['Child'] = titanic_df.Sex.map({'child':'Is Child','female':'Not Child','male':'Not Child'})	1	1
tf.transpose(y)	1	1
full_df['relatives_survived'] = full_df.groupby('lastname', as_index=False)    .survived.transform('sum').subtract(full_df.survived, axis=0)	1	1
test.drop(columns=['PassengerId'], inplace=True)	1	1
data.loc[data.Title.str.contains('124'),'Title']='Mr'	1	1
"jack_df[[""Survived""]]"	1	1
df['Cabin'].astype(str).str[0] # this captures the letter	1	1
res_df_solver_C['Sl'] = res_df_solver_C['Sl'].astype(np.uint16)	1	1
mcs.append(x_test[y_pred != y_test].index.tolist())	1	1
"train_df[""Cabin""][missing_cabins] = ""Z0"""	1	1
x['AgeBin'] = pd.cut(x['Age'].astype(int), 6, labels=bucket_labels)	1	1
train_dataset.loc[ train_dataset.SibSp > 0, :]	1	1
"total.drop(labels = [""PassengerId""], axis = 1, inplace = True)"	1	1
submission.to_csv('first_submission.csv', index=False)	1	1
test.drop(['Survived'],axis=1)	1	1
dataset.loc[ (dataset.Age.isnull()) & (dataset.Title == titleList[k]) & (dataset.Sex == i) ,                    'Age'] = guess_ages_sex_title[i,k]	1	1
"processed_features.drop(""Survived"",axis=1)"	1	1
data_copy.Age.fillna(data.Age.mean())	1	1
"train[""Fam""] = train.loc[:,""FamilySize""].apply(Fam_label)"	1	1
submit.info()	1	1
filtered_train_data.head()	1	1
train.groupby(['Survived','Sex']).mean()[['Parch','SibSp']]	1	1
train.loc[boy_or_female.index].groupby('Surname')['Survived'].mean().to_frame()	1	1
df_test.drop(['Name'], 1, inplace=True)	1	1
test['Embarked_S'] = test['Embarked_S'].fillna(0)	1	1
np.where(x.dtypes != float)[0]	1	1
knn_submission.to_csv('knn.csv', index=False)	1	1
"titanic_training_df.loc[titanic_training_df[""Sex""] == 'male',""Sex""] = 0"	1	1
data_train_all.Age.median()	1	1
data_sibsp.loc['male'].plot(kind='bar', color='orange', title='Male SibSp', ylim=[0, 1])	1	1
train['Survived'].hist()	1	1
train_surv.astype(float).corr(),linewidths=0.1,vmax=1.0,	1	1
"train.groupby([""Pclass"",""SibSp""])"	1	1
df['Men'] = data['Fare'].loc[data.Man ==1]	1	1
ticket_table['Dead_kid_on_ticket'] = data_full.Ticket[(data_full.AgeBin == 1) & (data_full.Survived < 1)].value_counts()	1	1
"combined_pre.to_hdf(fname,""pre"")"	1	1
"titanic['Emb_label_encoding'] = titanic['Embarked'].apply(lambda x: 1 if x == ""C"" else( 3 if x == ""Q"" else 2))"	1	1
"dftest.loc[idx,""CountTicketButLast_InTest""]=ticketButLast_count_test[ticketButLast]"	1	1
test_dataset.loc[(test_dataset['Fare']>31),'Fare']=3	1	1
traindf.drop(['Name', 'PassengerId'], axis=1)	1	1
df_test['Parch']	1	1
data.loc[(data['Age'].isnull()) & (data['Initials']=='Master'),'Age']=5	1	1
"sns.boxplot( x=test_set[""Pclass""], y=test_set[""Fare""], palette=PClass_palette,  showfliers=True)"	1	1
full.loc[full.Age.isnull(),:].copy()	1	1
"train_df.drop(columns={""Name"",""Fare_Group"",""Name_key"",""Ticket"",""PassengerId""},inplace=True)"	1	1
dummy_test_df.values	1	1
enriched_train_data.head()	1	1
"train[""sex_""] = train.apply(lambda row: def_sex(row[""sex""]),axis = 1)"	1	1
data_test['Age'] = data_test['Age'].fillna(mean_age_test)	1	1
fare_col.iloc[idx] = sim_data.Fare.median()	1	1
train['Name'].iloc[0]	1	1
cm[1][1]	1	1
Train_Master.corr()	1	1
train.loc[:,'Pclass':]	1	1
test['Pclass'][indz].values[0]	1	1
"train[""Title""] = train[""Name""].apply(lambda n : get_title(n))"	1	1
df1.drop(['PassengerId'],axis=1)	1	1
"sns.boxplot(x=""Pclass"",y=""Age"",data=df_train,ax=ax)"	1	1
df_train['LogFare'] = np.log(df_train['Fare'] + 1) #สร้าง column ใหม่ LogFare	1	1
df_test['Age'] = df_test['Age'].fillna(30)	1	1
drop_elementsNMD.append('EmbarkedQ')	1	1
comb_data.drop(['Outlier'], axis=1)	1	1
df['Fare'] = df0['Fare'].apply(lambda e: -1 if pd.isnull(e) else e)	1	1
train_dat.corr()	1	1
train.groupby(['Cabin'])['Cabin'].count().sort_values(ascending = False).index[0]	1	1
ax[0].set_title('Survived vs Parch')	1	1
train_X.drop(columns=['Survived'], inplace=True)	1	1
MLA_compare.loc[index, 'MLA Recall'] = recall_score(val_y, predicted)	1	1
merged.groupby('Pclass',as_index=False)['Fare'].mean()	1	1
"df_train.pivot_table(""Name"", ""SibSp"", ""Survived"", ""count"").plot(kind=""bar"", stacked=True)"	1	1
test_data.drop(['Cabin'], axis = 1)	1	1
"parameters[""W2""] -= learning_rate * dW2"	1	1
ds.drop(labels=['Name'], axis= 1, inplace= True)	1	1
"combined[""Title""] = combined[""Title""].map(title_mapping)"	1	1
"Accuracy[""random_forest""] = accuracy"	1	1
train_df[['Embarked', 'Survived']].groupby(['Embarked'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
"df[""CabinFloorScore""].loc[df['CabinFloor'] == ""E""] = 2"	1	1
df_test['Age'] = df_test[['Age','Pclass']].apply(impute_age,axis=1)	1	1
train.groupby(['Sex'])['Survived','Sex'].mean()	1	1
data['Nickname'] = data['Nickname'].str.strip()	1	1
"test.drop(labels = [""Survived""], axis = 1, inplace = True)"	1	1
result.to_csv('randomforest-many-variable2.csv', index=False)	1	1
"X.eval('IsFemale = (Sex == ""female"")', inplace=True)"	1	1
df['SexN'] = df.Sex.cat.codes	1	1
enc.transform(train_df.Sex)	1	1
acc.append(pd.DataFrame({'Model': 'Support Vector Machines', 'Accuracy': [accuracy_score(y_true, y_pred)]}))	1	1
agg_df.columns.droplevel()	1	1
data.loc[(data['title']==title) & (data['Age'].isnull()), 'Age'] = data.groupby('title')['Age'].median()[title]	1	1
df.loc[df['Fare'] > 31, 'FareGroup'] = 3	1	1
train_copy.loc[(train_copy['Fare'] > 7.9104) & (train_copy['Fare'] <= 14.4542), 'Fare_Category'] = 1	1	1
i['Title'] = i.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
best_dectree.best_params_.get('min_samples_split'),	1	1
"train.drop([""Survived"",""PassengerId"",""Name"",""Ticket"",""Embarked"",""AgeGroup""], axis=1)"	1	1
all_data['Sex'] = all_data['Sex'].map( {'female':0,'male':1}).astype(int)	1	1
"reg_submit.to_csv(""reg.csv"", index=False)  # Kaggle: 0.76077"	1	1
titanic.loc[(titanic['Age'] <= 16) & (titanic['Title'] !='Mrs'),'Child'] = 1	1	1
test_df.loc[test_df['Fare'] <= 7.91,'Farecat'] = 0	1	1
model.transform(x_test)	1	1
"_df.loc[i, ""name_second""] is np.nan else str(_df.loc[i, ""name_second""])"	1	1
train['Parch_scaled'] = (train.Parch - train.Parch.mean())/train.Parch.std()	1	1
df.loc[df['Age']<12,'PersonType'] = 'child'	1	1
training_data.applymap(lambda s: sex_map.get(s) if s in sex_map else s)	1	1
train_model_red.drop(['Survived'], axis = 1)	1	1
feats['Embarked'].fillna('C', inplace=True)	1	1
test_set.loc[:,['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
test['Title']=test['Title'].replace('Mlle', 'Miss')	1	1
df_train.join(age_one_hot)	1	1
cc[0]	1	1
"titanic_test[""Family""] = titanic_test[""Parch""] + titanic_test[""SibSp""]"	1	1
"submit.to_csv(""prediction-20170627-Q.csv"", index=False)"	1	1
train_dat[['Sex', 'Survived']].groupby('Sex').mean()	1	1
df.drop('Ticket_First', axis=1, inplace=True, errors='ignore')	1	1
k.append('Mrs')	1	1
dataset.fillna(0)	1	1
X_test_norm.T	1	1
"train[[""Sex"", ""Survived""]].groupby([""Sex""]).mean().plot.bar()"	1	1
dataset['Bad_ticket'] = dataset['Ttype'].isin(['3','4','5','6','7','8','A','L','W'])	1	1
grouped_median.loc['male', 3, 'Officer']['Age']	1	1
allset['Salutation']=allset.Name.str.extract('([A-Za-z]+)\.', expand=False)	1	1
"train_df[""Deck""].unique() # 0 is for null values"	1	1
data.loc[(data.Age.isnull()) & (data.Initial=='Miss'), 'Age'] = 22	1	1
train['Survived'] = y_train	1	1
"titanic_test['Title']= titanic_test['Name'].str.extract(""\,\ (.+?)\."")"	1	1
titanic['Title'] = titanic.Title.map(Title_Dictionary)	1	1
X.head().T	1	1
X_train.head(n=10)	1	1
x_train['Embarked'] = x_train['Embarked'].replace({'C','Q','S'},{0,1,2})	1	1
test['Pclass'].value_counts().idxmax()	1	1
cleaned_df.dtypes[cleaned_df.dtypes.map(lambda x: x== 'object')]	1	1
np.mean(cv_score_rs) # 0.864	1	1
final_submission_2['Survived'] = np.array(final_prediction_2,dtype=int)	1	1
plt.hist([df[df['Survived']==1]['Pclass'],df[df['Survived']==0]['Pclass']],bins=3,label=['Survived', 'Dead'])	1	1
embarked.loc[embarked['Survived'] == 0]	1	1
df['Foreign'] = False	1	1
importance_et_df['Feature'] = importance_et_df['Feature'].map(lambda x: predictors[x])	1	1
df[['Age','Survived']].groupby(['Age'],as_index=False).mean()	1	1
data.drop(columns=['Name','Ticket','Cabin'])	1	1
data['Name'].str.lower():	1	1
train_df.drop(['Survived'], axis=1).as_matrix()#[['Pclass', 'Sex', 'Age_Bin', 'Title', 'FamilySize_Bin']].values	1	1
data.combine_first(masters)	1	1
self._preprocessor.drop(self.data, drop_strategy)	1	1
pd.isnull(test_features2).sum()	1	1
out['emC'] = out.Embarked == 'C'	1	1
test_df.fillna(test_df.mean(), inplace=True)	1	1
"df.loc[pid,""LastName""] = m.group(1).strip()"	1	1
np.dot(clf.coef_,test_x.T) + clf.intercept_	1	1
corr.iterrows():	1	1
"sns.boxplot(x='Survived', y=""Age"",  data=data);"	1	1
dataset.drop(['Name', 'Ticket'], inplace=True, axis=1)	1	1
df1['Age'].astype(int):	1	1
data.loc[(data['Age'].isnull()) & (data['Initials']=='Miss'),'Age']=22	1	1
df['Sex'] = df['Sex'].apply(lambda x: 0 if x == 'male' else 1).astype('int')	1	1
test.loc[((test['Pclass']<3) & (test['FamilySize']>2) & (test['FamilySize']<5) & ((test['Age']>20) & (test['Sex']=='female') | (test['Age']<19))),'NonPoorMothersAndChildren']=1	1	1
train_data[['Sex','Survived']].groupby(['Sex']).mean().plot.bar(color=['#CD7F32','#FFDF00'],ax=ax[0])	1	1
fares.head()	1	1
test_data['Age'] = imp.fit_transform(test_data['Age'].values.reshape(-1,1)).reshape(-1)	1	1
scaler.transform(X_test1)	1	1
"tp.loc[tp[""Embarked""]==""Q"",""Embarked_c""] = 3.0"	1	1
X_stats['Min'] = np.min(X, axis = 0)	1	1
frame.bin_fare.fillna(frame.bin_fare.median(),inplace=True)	1	1
classifiers.append(SVC(random_state=random_state, gamma='auto'))	1	1
data.drop('Ticket',axis=1,inplace=True)	1	1
mix_results['Survived'].astype(int)	1	1
combined_df['title'] = combined_df['title'].replace(['ms','mlle'], 'miss')	1	1
train2_df['Embarked'] = train2_df['Embarked'].map(emb_conv)	1	1
"df_train[""Pclass""].hist(bins=3, density=True, stacked=True, color='teal', alpha=0.6)"	1	1
records_list.append(record)	1	1
all_data.drop('Cabin',axis=1)	1	1
"train[[""Sex"",""Age"",""Pclass"",""Family"",""Embarked"",""Title"",""Fare""]]"	1	1
"train[""Embarked""].isnull().sum() # count_nan_embarked_train = 2"	1	1
names.loc[(names['dr'])==1,'dr'] = 0	1	1
train['Parch'] = dataset['Parch']	1	1
merged['Family_Size']=merged['Parch']+merged['SibSp']#family size	1	1
test.drop('PassengerId', axis = 1)	1	1
"df.loc[df[""Embarked""]==port, ""Embarked""] = i"	1	1
"test.loc[(test[""Name""]==""Mr"")&(test[""Age""].isnull()), ""Age""] = train.loc[train[""Name""]==""Mr"",""Age""].mean()"	1	1
df_full['GroupSize'] = df_full['Group'].str.len() + 1	1	1
survival_rank.sort_values(by = 'Death Premium', ascending = True)	1	1
"sex[""Fare""] = np.nan"	1	1
"X_test[""Title""] = X_test[""Name""].apply(get_title)"	1	1
df_data.drop(['Survived'],axis=1)	1	1
df_te.drop(['Survived'], axis=1, inplace=True)	1	1
common.describe()	1	1
df_train_pca.values # Must be converted into numpy array.	1	1
models.sort_values(by='Score', ascending=True)	1	1
model_data.loc[model_data.Fare.isnull(),'Fare'] = 11.10	1	1
copy.copy(train)	1	1
"df_name.loc[df_name[""Name""].isin(VIP),""Name""]=""VIP"""	1	1
train['Age']=train.apply(lambda row: applypredictions(row['Age'], row[pred_cols]), axis=1)	1	1
test.describe().T	1	1
train_test['Low_Parch']=0	1	1
X_test['Sex']=X_test['Sex'].map({'female':0, 'male':1})	1	1
clf.cv_results_['mean_test_AUC']	1	1
pd.pivot_table(df_train, index = 'FamilySize' , values= 'Survived')	1	1
row['Deck'][0]	1	1
in ['Embarked', 'Pclass', 'Sex', 'Name']:	1	1
valAcc.append(knn.score(X_val, y_val))	1	1
test_df.drop(['Name', 'Ticket', 'Embarked'], axis=1)	1	1
df_submission.head()	1	1
train['Survived'].iloc[891]='No'	1	1
"copy[""Pclass""] = copy[""Pclass""].fillna(pclass_median)"	1	1
test.loc[test.Cabin.str.len() == 5,:]	1	1
evaluation_temp.append(precision)	1	1
raw_train['FamilySize'].value_counts()	1	1
titanic_traindf.groupby('Sex')	1	1
test.drop(['Title'], axis = 1, inplace = True)	1	1
titanic_test.drop(['Title','Title_Mr'],1)	1	1
name['Title'] = name['Name'].apply(get_title_name)	1	1
reindex_titanic_train_dataframe.shape[0] - num_training	1	1
test['Age'].isna().sum()	1	1
"df_train.drop(columns = ['Name', 'Sex', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Title', ""Age""], inplace=True)"	1	1
train_df[['Ticket', 'Survived']].groupby(['Ticket']).agg(['count', 'mean']).sort_values(by=[('Survived','mean')], ascending=False)	1	1
trainData.head().T	1	1
df.loc[df['Age'] > 50, 'AgeC'] = 2	1	1
"groups_counts[""Overall""] = len(titanic_train)"	1	1
testdata.drop(['Ticket', 'Cabin'], axis = 1)	1	1
"df[""title""].value_counts()"	1	1
Xt['Cabin']	1	1
test['FamilySize']=test['SibSp'] + test['Parch'];	1	1
merged_df.drop(columns=['Parch', 'SibSp'])	1	1
frame['bin_fare']=np.nan	1	1
train_df['Name']= trainTitle_Replace	1	1
dataset.loc[(dataset['Fare']>40) & (dataset['Fare']<=50), 'Fare']=4	1	1
train[['Pclass','Sex','Survived']].head(3)	1	1
"all_data_del[""Age""]=all_data_del[""Age""].fillna(mean_Age)"	1	1
df_full['Ticket'] = df_full['Ticket'].apply(lambda x: x if x.isdigit() else re.sub('\D','', x))	1	1
"my_res_logreg.to_csv(""Titanic_logreg_Sub.csv"", index= False)"	1	1
"titanic_training_data[""Title""] = titles"	1	1
"test_df.loc[test_df['Fare']>409,""Fare""]=4"	1	1
df1['SibSp'] = df1['SibSp'].apply(lambda x: 'less' if x <= 2 else 'many')	1	1
training_set['Deck'] = training_set['Cabin'].map(lambda x: search_substring(str(x), cabin_list))	1	1
dataset[['PassengerId','Pclass','Sex','Age','Embarked','FamilySize','Fareband','Title']]	1	1
titanic.boxplot('Age',by='Pclass',figsize=(10,5))	1	1
train_csv['Deck'] = train_csv['Cabin'].str[0]	1	1
X_test_df.head(n=10)	1	1
data['passenger_fare'] = data.Fare / data.qtd_same_ticket	1	1
model.add(Dense(units=2))	1	1
train_df['Sex'].value_counts(normalize=True).plot.bar(figsize=(20,10), title= 'Gender')	1	1
"df[""Surname""] = df.Name.map(substrSurname)"	1	1
test_data['Room'] = room	1	1
df.Cabin.head(10)	1	1
"df_train[[""FareBand"", ""Survived""]].groupby([""FareBand""], as_index=False).mean()"	1	1
train_csv.sample(10)	1	1
"missing_values[""Age""] = model.predict(missing_values[feature_cols])"	1	1
ax[1].set_title('Bar')	1	1
final.to_csv('submission.csv', index=False)	1	1
X_test1['Sex1'] = c1.transform(X_test1.loc[:,'Sex'])	1	1
Xt['Embarked'].dropna(axis=0, inplace=True)	1	1
test_features2['Fare'] = test_features2['Fare'].fillna(fare_mean)	1	1
out.set_index('PassengerId',inplace=True)	1	1
"trainDf.groupby('Cabin').count()[""Name""].plot(kind='barh', title =""Cabin distributions"", figsize=(15,30),legend=False, fontsize=12)"	1	1
df_test.loc[df_test['Age'] >= 0, 'AgeC'] = 0	1	1
trainPCA2['2'] = trainPCA['Pclass2']	1	1
features_long['S_Family'] = ((features_long.Family>0)&(features_long.Family<4)).astype(int)	1	1
"_df.loc[  1079, ""group_id""] = 40.0"	1	1
train_df['Age'] = data['Age'][:891]	1	1
data.apply(lambda x :                         1 if ((x.Ticket in (['CA. 2343'])) & (x.SibSp>1)) else 0, axis=1)	1	1
test['isAlone']=1	1	1
"final[""Survived""] = predictions"	1	1
"train[""eval_xgb_tree""] = model.predict(features)"	1	1
traind['Survived']	1	1
y_Qtest.sum()/y_Qtest.size	1	1
"train.drop('Survived', 1), train[""Survived""]"	1	1
"ALL_DATA[""CabinCount""].unique()"	1	1
val_y.values[i]:	1	1
family.loc[idx, 'Surname_adj'] =  s + '-single' + fam_code	1	1
train_df.drop('PassengerId', 1)	1	1
df['Title'] = df.apply(lambda row: getTitleNum(row['Name']), axis=1)	1	1
allfeat['Age'].mean()	1	1
data_full['HasCabin'] = 1	1	1
df['AgeRange'],bins = pd.qcut(df.Age,5,labels=[0,1,2,3,4],retbins=True)	1	1
train_data.drop(['SibSp','Parch'],axis=1,inplace=True)	1	1
data_train.fillna(-999, inplace=True)	1	1
df_comb.drop(['Sex_female','Embarked_C','Title_Dr', 'Deck_X'], axis=1, inplace=True)	1	1
x_test.iterrows():	1	1
df_test['Age']    = df_test['Age'].astype(int)	1	1
ax2[0].set_title('1st Class (not survived)')	1	1
train.loc[train['family_size']>4,'travel_company']=2	1	1
train['Ports'] = train.Embarked.map({'C': 'Cherbourg', 'Q': 'Queenstown', 'S': 'Southampton'})	1	1
train.Survived.loc[idx]	1	1
combined_One_Hot_Cat['Child'] = combined['Child']	1	1
df_train.Age.hist()	1	1
"dataset['Cabin'].fillna(""0"")"	1	1
df2.drop(df2[df2.PassengerId == 767].index, inplace = True)	1	1
ds_train.drop(remove_attribute, axis = 1)	1	1
"train[""Child""] = float(""NaN"")"	1	1
train_data.drop(['Age_group'], inplace=True, axis=1)	1	1
Test['caG'] = Test['Cabin'].map({'A':0,'B':0,'C':0,'D':0,'E':0,'F':0,'G':1,'T':0,'U':0}).astype(int)	1	1
models_df.sort_values(by = ['Validation Accuracy'], ascending = False, inplace = True)	1	1
"vtest[""Name""].apply(isSignificant)"	1	1
submission['Family_size'] = submission['SibSp'] + submission['Parch'] + 1	1	1
submission.to_csv('./keras_model_3.csv', index=False)	1	1
data['NameTitle'] = data['NameTitle'].map({'Mr.': 0, 'Other.': 1, 'Master.': 2, 'Miss.': 3, 'Mrs.': 4}).astype(int)	1	1
df.drop(multiple_outliers, axis=0)	1	1
Cabin[0] == 'E':	1	1
df['F_C1'] = df['Sex_female'] * df['Pclass_1']	1	1
pd.isnull(X_train['Cabin'].iloc[i]):	1	1
neural_record['Double_Net'][i]=c2	1	1
titanic_embarked_group.apply(len)	1	1
"i[""CabinType""] = ""Missing"""	1	1
ticketlist.append(tick)	1	1
df[['Survived', 'Sex', 'Title']].corr()	1	1
data['isAlone'] = 1	1	1
df_titanic.dtypes	1	1
"X_train[""Age""].median()"	1	1
"df_test[""Title""] =  df_test[""Name""].apply(get_title, args = (title_Regex,))"	1	1
"data_df[""Name_Len""] = data_df['Name'].apply(lambda x: len(x))"	1	1
test_df['Fare'] = test_df['Fare'].fillna(8.0500)	1	1
train['Sex'] = train['Sex'].map(genders)	1	1
titanic['Age'][(Pclass2)&Family2] = titanic['Age'][(Pclass2)&Family2].fillna(28)	1	1
df_data['FareBin_4'] = pd.qcut(df_data['Fare'], 4)	1	1
train['Age'].hist()	1	1
dataframe.isnull().sum().sort_values(ascending=False)	1	1
strat_test_set.head()	1	1
df['Embarked'] = df['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)	1	1
data.loc[(data['Fare'] > 7.91)  & (data['Fare'] <= 14.45), 'SortFare_4'] = 1	1	1
"results.describe().T.sort_values(by=""50%"", ascending=False)"	1	1
train_data.iloc[indexes_with_men_nan_age[index], train_data.columns.get_loc('Age')] = 21	1	1
survived.loc[train_index]	1	1
X.T.shape	1	1
sc_training.transform(train_no_surv)	1	1
data['Parch_bin'] = data.Parch.apply(lambda x: x if x< 3 else 4)	1	1
"full_data[""LastName""] = full_data[""Name""].apply(get_last_name)"	1	1
df_test['SexId'] = df_test['Sex'].map({'male': 1, 'female': 0})	1	1
df_all.drop(['Cabin', 'Ticket', 'SibSp', 'Parch', 'Name', 'Family_name', 'Family_name_count', 'withFamily'], 1)	1	1
"train[""Survived""] = train[""Survived""].astype('category')"	1	1
"ax[1].set_ylabel(""Pclass"")"	1	1
df_train['age_bin'] = df_train['age_bin'].astype('int')	1	1
"df_train[""Age""].mean() - df_train[""Age""].std(),"	1	1
X_test['Parch'] = test_df['Parch']	1	1
"train_df[""NumberCabins""][cabinzeros] = 1"	1	1
title_age['Age'] = title_age['Age'].astype(int)	1	1
train.drop('PassengerId',axis=1).corr()	1	1
curr_row[0][2]	1	1
"train_set[""Age""] = StandardScaler().fit_transform(train_set[""Age""].values.reshape(-1,1))"	1	1
train_data.Age.fillna(train_data.Fare.mean(), axis=0)	1	1
train[['Pclass','Fare','male','Age']]	1	1
new_df.select_dtypes(['category']).columns	1	1
dataset.loc[(dataset['Age']>64)&(dataset['Age']<=72), 'Age'] = 8	1	1
"train_df.groupby(""Embarked"")[""Survived""].mean()"	1	1
missing_age_test.drop(['Age'], axis=1)	1	1
clean_data['Survived'].corr(clean_data['Fare'])	1	1
dataframe['FamilySize'] = dataframe['SibSp'] + dataframe['Parch'] + 1	1	1
model_data.loc[model_data.Pclass == 2,('Cabin_Letter')].value_counts()	1	1
df_submission['age_bin'] = df_submission['age_bin'].astype('int')	1	1
"train[[""Cabin"", ""Survived""]].groupby(['Cabin'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
df.loc[df['Family Size'] == 1, 'Alone'] = 1	1	1
"combined.loc[tm, ""real_fare""] = combined.loc[tm, ""Fare""] / n_t"	1	1
train['Age'].fillna(train['Age'].mean())	1	1
data_test.drop(columns='Survived')	1	1
feat[0]	1	1
df_test.loc[ df_train['Age'] > 64, 'Age'] = 4	1	1
final_data_set.head()	1	1
X['FamilySize'] = X['SibSp'] + X['Parch'] + 1	1	1
traindf1.drop(['Name','Sex','Ticket','Embarked','PassengerId'],axis='columns')	1	1
np.std(testing_scores, axis=1)	1	1
titanic_df['CatFare'] = pd.cut(titanic_df['Fare'], custom_bucket_array)	1	1
"result_df[""Survived""] = pdict"	1	1
df['FTicket'] = df['FTicket'].replace(['W', 'F', 'L', '5', '6', '7', '8', '9'], '4')	1	1
"train[""FamilySize""] = train[""FamilySize""].map({""Small"" : 0, ""Medium"" : 1, ""Large"" : 2})"	1	1
dataset.drop(['Name','SibSp','Parch','Ticket','Cabin','Fare'], axis= 1, inplace = True)	1	1
data.loc[(data.Age.isnull()) & (data.Sex == i) & (data.Pclass == j+1), 'Age'] = age[i,j]	1	1
params.pop('nrounds', 250)	1	1
df_train['Survived'] # Y_trainは、df_trainのSurvived列	1	1
dframe['Title'] == title #extract indices of samples with same title	1	1
df_test[['PassengerId','Survived']].to_csv('no_survivors.csv',index=False)#first model	1	1
df.filter(regex='Fare|SibSp|Parch|Sex_.*|Pclass_.*')	1	1
dataset_df[['Sex', 'Survived']].groupby('Sex').mean()	1	1
train_df.loc[train_df['Age'].isnull() == True]	1	1
no_family['Group_size'] = no_family['Family'] + no_family['Friends_group']	1	1
test_data['missing_values'] += test_data[col + '_missing_data']	1	1
test_data.iloc[:, 0:11].values	1	1
df['SibSp'].values.copy()	1	1
X_raw['Survived']	1	1
rf_model_prediction.astype(int)	1	1
comb_data['Sex'].replace(['Male','Female'],[0,1], inplace=True)	1	1
in ['Sex', 'Embarked', 'title', 'mother', 'child']:	1	1
whole.copy()	1	1
"sns.boxplot(x = ""Fare"", y = ""Embarked"", data = full[full.Pclass == 1])"	1	1
x_test.drop(['SibSp', 'Parch', 'Name', 'Cabin'],axis=1)	1	1
"_df[""company""] = _df.parch + _df.sibsp"	1	1
dataset.groupby(['Embarked', variable]).size()['C']	1	1
csv_train['Sex'] = csv_train['Sex'].map({'female':0, 'male':1}).astype(int)	1	1
train_data[['Survived','Age']]	1	1
score_b4.append(selector.grid_scores_[2])	1	1
train.groupby(['AgeBand'])[['Survived']].mean()	1	1
df.drop('Parch', axis=1, inplace=True)	1	1
dataset.loc[ dataset['Fare'] > 150, 'Fare'] = 4	1	1
train.isnull().sum(axis=1).head()	1	1
"tr[""Age""].isnull().sum()"	1	1
"train.replace({""S"": 0, ""C"": 1, ""Q"": 2}, inplace=True)"	1	1
Xtrf_df['hasCabin'] = Xtrf_df['Cabin'].isnull().astype(int)	1	1
y_train.shape, X_train.shape, X_Test.shape	1	1
"train.groupby([ ""Pclass"", ""Sex""])[""Survived""].count()"	1	1
ensembleDf['mode'] = ensembleDf.mode(axis=1)	1	1
train_set.iloc[:,0].values	1	1
X_data.corr()	1	1
"full_set.join(encodeVals, on = 'ind_', how = ""left"", lsuffix = 'indx')"	1	1
plt.hist(train.Parch,bins=6)	1	1
MLA_compare.loc[row_index, 'MLA Score']=alg.score(x_test,y_test)	1	1
titanic_train_df.loc[titanic_train_df['Title'] == 'Dr']	1	1
dataset.loc[(dataset['Age']>64), 'Age'] = 4	1	1
"holdout[""Fare_categories""] = pd.cut(holdout[""Fare""],fare_cuts,labels=fare_labels)"	1	1
df.loc[((df.Sex == 1) & (df.IsAlone == 1)) , 'Se_IA'] = 2 #Male without family	1	1
dt.loc[(dt['Familysize']==1),'Isalone']=1	1	1
"df[""AgeXClass""] = df[""Age""] * df[""Pclass""]"	1	1
sur_by_fare.fillna(0)	1	1
"train[""Survived""][train[""Sex""]=='male'][train[""Age""]<18][train[""Pclass""]==2].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
train.drop('FareBand', axis=1, inplace=True)	1	1
titanic_df.loc[titanic_df['FamilySize'] > 0, 'Alone'] = 0	1	1
df_test[['PassengerId', 'Survived']].to_csv('Randm_Forest_versionMD.csv', index=False)	1	1
train.select_dtypes(include=['category']).head()	1	1
full['Title'] = full['Title'].replace(['Lady','the Countess','Countess','Sir','Jonkheer','Dona','Don'],'Royalty')	1	1
df['Embarked'] = n.fit_transform(df['Embarked'].astype('str'))	1	1
i[0],	1	1
df_train[['tmpFareBand','Survived']].groupby('tmpFareBand').mean().sort_values(by='Survived',ascending=False)	1	1
"dat.loc[dat[""Title""] == ""Dr"",""isDr""] = 1"	1	1
one_hot_train_data.drop('Survived', axis=1, inplace=True)	1	1
"titanic_test.loc[titanic_test[""Embarked""] == 'S',""Embarked""] = 0"	1	1
train['Age'].fillna(age_mean)	1	1
cabin.set_index('Cabin')	1	1
data.loc[[0,5,10,20,50], ['Name', 'Sex', 'Ticket']]	1	1
the_df['AgeFill'] = the_df['Age']	1	1
"train_df[""Sex""]=train_df[""Sex""].astype(""category"")"	1	1
fulldata.set_value(fulldata.Embarked.isnull(), 'Embarked', 'C')	1	1
"df.loc[mask_Age, [""Age"", ""Title"", ""Sex"", ""Pclass""]]"	1	1
test_y.describe()	1	1
ds['importance'] = model.feature_importances_	1	1
df_test.loc[((df_test.Sex == 'female')&((df_test.Pclass == 1)|(df_test.Pclass == 2)|((df_test.Age >= 50)&(df_test.Age < 70)))),'Survived'] = 1	1	1
test['Cabin'] = test['Cabin'].fillna(test['Cabin'].mode()[0])	1	1
X['Fam'] = X['SibSp'] + X['Parch']  # assigned to a column	1	1
sex_dummy.drop(columns = ['male'])	1	1
test.drop(['Name','PassengerId', 'Ticket', 'Cabin', 'Fare', 'SibSp'], axis = 1)	1	1
"titanic_train_df[[""Survived"",""Pclass"",""Agecat""]].groupby(['Agecat',""Pclass""],as_index=False).mean()"	1	1
X_train['Sex'].loc[X_train['Sex']=='female'] = 0	1	1
"titanic_df.drop([""Survived"", ""PassengerId""],axis=1)"	1	1
data_train_csv.info()  #Concise summary of a DataFrame	1	1
model.add(Dense(36, activation = 'relu'))	1	1
df.loc[df[df['NameTitle'] == 'Ms'].index, 'NameTitle'] = 'Miss'	1	1
train_df.groupby(['Survived', pd.cut(train_df['Pclass'], np.arange(0, 4))]).size().unstack(0).plot.bar(stacked=True)	1	1
train_data_only_first_class_female_Cherbourg.ix[~(train_data_only_first_class_female_Cherbourg['Age'] > age)]	1	1
titanic_df['Embarked'].describe()	1	1
"test.loc[test[""Fare""].isnull(),""Fare""] = test[""Fare""].mean()"	1	1
"train_df[""Name_key""]="""""	1	1
FeatureDF['FamilySize'] = FeatureDF['Parch'] + FeatureDF['SibSp'] + 1	1	1
test_data.drop(['Sex', 'SibSp', 'Parch', 'Embarked'], axis=1, inplace=True)	1	1
df.loc[:,['SibSp','Parch','Person_Class','Age_Missing','Survived']]	1	1
df.loc[df0['Sex']=='female', 'Sex'] = 2	1	1
dataset['FamliySize']=dataset['SibSp']+dataset['Parch']+1	1	1
train_ds.drop('Survived', axis= 1)	1	1
df_train.append(df_test , ignore_index = True)	1	1
df['Fare_scaled']=scaled_age_fare[:,1]	1	1
dataset['Alone'].loc[dataset['family']>1]=0	1	1
input_arr['Parch']	1	1
train.loc[train['Sex']=='male','Sex'] = 1	1	1
axes[1].set_title('Number of Survived for \n Class 3 Cabins (Available Data)')	1	1
"train.drop(""Age_Band"",axis=1,inplace=True)"	1	1
train_data[['Sex','Embarked','Title','Cabin_cat']].info()	1	1
allfeat['Title'] = allfeat['Name'].apply(get_title)	1	1
family.FamilySize.mean()	1	1
train_df['Age'][combined_df.Age.notnull()]	1	1
data['Parch'].unique():	1	1
le.transform(xText.Sex)	1	1
train['A5'] = np.array(train['CategoricalAge'] == 5).astype(np.int32)	1	1
train.loc[train.Fare<=7.91,'Fare_cat'] = 0	1	1
"combined[""Deck""]=combined.Cabin.str[0]"	1	1
"related_people.loc[related_people[""PassengerId""]==1079,""RGroup""]=""Davies_M"""	1	1
test_df.loc[(test_df['Age'] > 18) & (test_df['Age'] <= 30), 'AgeGroup'] = 2	1	1
output.to_csv('csv_to_submit_lr.csv', index = False)	1	1
df_train.describe(include='all')  ##returns all numeric and categorical features	1	1
"train['Dataset'] = ""train"""	1	1
train_f.drop(['Survived'], axis=1)	1	1
train[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean().sort_values('Survived',ascending=False)	1	1
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data=train);"	1	1
"test_data[[""SibSp"", ""Parch"", ""Pclass"", ""Sex"", ""Age""]]"	1	1
model_df['cv_accuracy'] = cv_accuracy	1	1
titanic_train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
data_all['Pclass_1'] = (data_all['Pclass']==1)+0	1	1
df['Fare'] = df.groupby(['Pclass','Embarked'],sort=False)['Fare'].apply(lambda x : x.fillna(x.median()))	1	1
df.loc[:,c] = x	1	1
algorithm_results.loc[index, 'STD'] = cv_results['test_score'].std()	1	1
"train_set.loc[train_set[""Embarked""].isnull()]"	1	1
"KNN_result[0][""best_score""],"	1	1
age_train.drop('Age', axis=1)	1	1
lastname_table['Alive_dad_w_lastname'] = data_full.Lastname[(data_full.AgeBin > 1) & (data_full.Survived > 0) & (data_full.IsFemale==False) & (data_full.FamilySize > 1)].value_counts()	1	1
df_class.iloc[0,2]/df_class.iloc[:, 2].sum()*100	1	1
data.loc[(data.Age.isnull()) & (data.Initial=='Mr'),'Age'] = 33	1	1
"family['familysize'] = family[[""SibSp"",""Parch""]].sum(axis=1)"	1	1
raw_test['Title'] = raw_test.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
test_df['Title'] = test_df['Name'].str.extract('([A-Za-z]+)\.', expand=False)	1	1
train_df[['age_group', 'Survived']].groupby(by='age_group', as_index=False).mean()	1	1
Train_Master['FamilySize'] = Train_Master['SibSp'] + Train_Master['Parch'] + 1	1	1
df_train['Family_members'] = df_train['SibSp'] + df_train['Parch']	1	1
test_copy.loc[(test_copy['Age'] > 30) & (test_copy['Age'] <= 40), 'Age_Category'] = 3	1	1
train.drop('df_type',axis=1)	1	1
X['AgeRange'] = np.select(conditions, choices, default=0)	1	1
train['Bad_ticket'] = train['Ttype'].isin(['3','4','5','6','7','8','A','L','W'])	1	1
training_data['Survived'].copy()	1	1
"test.Ticket_Cat.apply(lambda x: re.sub(""[^a-zA-Z]"", '', str(x)))"	1	1
dataset.loc[ dataset['Age'] <= 16, 'AgeBand'] = 0	1	1
ship['Title_Code'].loc[(ship['Title_Code'] == 2) & (ship['Survived'] == 1)].count()	1	1
df_test.drop(['PassengerId'], axis=1).copy()	1	1
"train.pivot_table(index=""SibSp"", values=""Survived"")"	1	1
df_train[['age', 'survived']].plot(kind='scatter', x='age', y='survived', alpha=0.6, figsize=(16,4), c='survived', colormap='RdYlGn', ax=ax);	1	1
train.join(gender_oh)	1	1
test_clean.drop(['data_label', 'Survived', 'Name', 'Ticket', 'Cabin'] + var_drop_list, axis=1)	1	1
"train_data.loc[train_data[""Cabin""].notnull() & train_data[""Cabin""].str.contains(""T""), ""CabinLetterT""] = 1"	1	1
sub.to_csv('TicketModel.csv', index = False)	1	1
output_everybody_dead.to_csv('everybody_dead.csv', index=False) # score 0.62679 (6884/7071)	1	1
train['Cabin_Cat'] = train['Cabin'].str[0]	1	1
test_df.loc[(test_df.Cabin.isnull())&(test_df.Initial=='Mr'),'Cabin']='B51'	1	1
df_test_features['Age'].mean()	1	1
data['Sex'] = data['Sex'].map({'female':1, 'male':0}).astype(int)	1	1
"data3[""Survived""]=y_predict_random_forest"	1	1
Each_Passenger.loc[(Each_Passenger['Pclass'] > 2) & (Each_Passenger['Pclass'] <= 3 ) | (Each_Passenger['Parch'] > 2) & (Each_Passenger['Parch'] <= 3) , 'Pclass'] = 3	1	1
train_df['Name_len_Class2'].value_counts()	1	1
tit_df.drop(['Name'], axis = 1)	1	1
row['Title'] == 'Capt':	1	1
W1_tr.shape	1	1
"datacv.drop(""Cabin"", axis=1)"	1	1
dataPrepare['Age']=dataPrepare['Age'].fillna(0)	1	1
X_final_test['Fare']=X_final_test['Fare'].fillna(X_train['Fare'].mean())	1	1
kwargs.get('colVar' , None)	1	1
titleScore_list.append(give_title_score(titanic_train_dataset['Title'][i]))	1	1
df['emb']=df['Embarked'].map({'S':1,'C':2,'Q':3}).astype(int)	1	1
train.loc[train['AvFare']<=200,'AvFare']=0	1	1
sex_frame.drop(['male'], axis=1)	1	1
submission_X['Elderly'] = np.where(submission_X['Age'] >= 50, 1, 0)	1	1
train['Ticket_length'] = train['Ticket'].apply(lambda x: len(x))	1	1
train_data.fillna(0)	1	1
"df_test[""AgeGroup""] = pd.cut(df_test[""Age""], bins, labels = labels)"	1	1
train.drop(columns=['Cabin'])	1	1
train_data.drop(target,axis=1)	1	1
age_unknown.rename(columns={'Age_Categorized_Unknowns': 'Age_Categorized'})	1	1
df_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].dropna().mean()) # df_test has one null value	1	1
train['Age'] = train[['Age','Pclass']].apply(compute_age,axis=1)	1	1
X.transpose()	1	1
data_copy.loc[data_copy.Sex=='female', 'Sex'] =0	1	1
train_split.to_csv('./data/train_split_final.csv', index=False)	1	1
df['Name_len'] = df.Name.apply(lambda x:len(x))	1	1
df.pivot_table('Fare', index='Pclass', aggfunc='mean')	1	1
estimators.append(('svm', model3))	1	1
train.groupby(['Sex','Survived','Pclass'])['Pclass'].count()	1	1
submission.to_csv('submission_GridCV_KNN.csv', index=False)	1	1
ohe.transform(df_test[f])	1	1
titanic_df.iloc[:,0]	1	1
data_test.drop('Age_imputed',axis=1)	1	1
data_all['Embarked'] = data_all['Embarked'].fillna('C')	1	1
"Survived.corr(train_df['Deck'], ""kendall"")"	1	1
score.append(gnb.score(X_train, y_train))	1	1
MLA_compare.sort_values(by = ['MLA Score'], ascending = False, inplace = True)	1	1
test['Parch_grouped'] = np.where(test['Parch'] > 0, '1', '0')	1	1
trainML.dropna()	1	1
tf.fillna(tf.mean())	1	1
train['Name'].str.extract(' ([A-Za-z]+)\.')	1	1
titanic.iloc[:,0:13]	1	1
df.loc[(df['Age'] >= 40.21) & (df['Age'] < 50.157), 'Age'] = 4	1	1
train_dataset['Survived'].values	1	1
train['Age'].hist(bins = 50)	1	1
Each_Passenger.loc[(Each_Passenger['Pclass'] > 4) & (Each_Passenger['Parch'] > 4), 'Pclass'];	1	1
train_data['Sex'] = train_data['Sex'].apply(lambda x: 1 if x == 'male' else 0)	1	1
age_age[1]	1	1
X_features_train.iloc[0:891]	1	1
"dataset[""Age""].fillna(dataset.groupby(""Title"")[""Age""].transform(""median""), inplace=True)"	1	1
"df[""Age""].dropna().value_counts()"	1	1
map_table_age_df.iloc[10:15, 1] = titles	1	1
sub.head(20)	1	1
"full[""Age""] = full.apply(fill_age, axis=1)"	1	1
titanic_train.drop(['PassengerId','Embarked','Sex','Ticket','Name'],axis=1,inplace=True)	1	1
X_test['Title'] = pd.Series(dataset_title)	1	1
tit_df['SibSp'] = tit_df['SibSp'].apply(Pch_sep)	1	1
data_sub.to_csv('submission.csv', index=False)	1	1
df['Embarked'] = label.fit_transform(df.Embarked)	1	1
train_input['Survived'].values	1	1
pipe_xgb.named_steps['est']	1	1
train_df['isAlone'].unique()	1	1
train_df['Name_Head'].value_counts()	1	1
"Age_Sex_Title_Pclass.groupby(by = [""Title"", ""Pclass"", ""Sex""]).median()"	1	1
X.groupby(idx).max()	1	1
tf.add(tf.matmul(W1, X), b1)                      # Z1 = np.dot(W1, X) + b1	1	1
df_test_features['Fare']=df_test_features['Fare'].fillna(avg_fare)	1	1
X_test.loc[:,mask]	1	1
plt.axes().set_aspect(1)	1	1
train.drop(['CategoricalAge','CategoricalFare','Ticket','Cabin','Survived'], axis=1)	1	1
df_tsne['color'] = colors	1	1
died_class_2.shape[0]	1	1
train['Age'] # it's unnecessary anymore	1	1
"total[""Cabin""] = total[""Cabin""].fillna(""X"")"	1	1
raw_data[['Age', 'Fare']] = imputer.fit_transform(raw_data[['Age', 'Fare']])	1	1
train.loc[train['Sex'] == 'female', 'Sex'] = 0	1	1
missing_age_rows.iterrows():	1	1
train_test.drop(labels=columns_to_drop, axis=1, inplace=True)	1	1
"train[""Sex""]=train[""Sex""].map(sex_map)"	1	1
train.drop(['Survived', 'PassengerId','Name','SibSp','Parch','Ticket','Fare','Cabin'], axis=1)	1	1
y_test['PassengerId'],	1	1
df.loc[( (df['Female']==0) & (df['Age']<=12) ) | (df['Master']==1),'MaleCh'] = 1	1	1
"train_kaggle[""Survived""].groupby(train_kaggle[""Survived""]).count()"	1	1
"copyTest_df[""PassengerId""],"	1	1
le.transform(combine_df[feature])	1	1
func_seq.append(toolbox.attr_bool)	1	1
X.drop(usecol,axis=1,inplace=True)	1	1
train_dataset.loc[(train_dataset['Age']>64),'Age']=4	1	1
train_newages.append(random.randint(10,18))	1	1
"train_prep[""Survived""]"	1	1
"my_submission.to_csv(""afarane_titanic_kaggle.csv"",index=False)"	1	1
"dataset.loc[dataset[""Title""] == ""Miss"", ""Title""] = 0"	1	1
train.replace(['S','C','Q'],[0,1,2])	1	1
train.ix[:, ncol] = imputer.fit_transform(train.ix[:, ncol])	1	1
titanic_testxdf.drop('Embarked', axis=1)	1	1
full['Fare'] = full.groupby(['Pclass'])['Fare'].transform(lambda x: x.fillna(x.median()))	1	1
DataSetTrain.fillna(0)	1	1
df_train.shape, df_test.shape, df_gender.shape	1	1
"train_data.loc[(train_data.Family_Size > 4),""FsizeD""] = ""large"""	1	1
testData['Embarked'].fillna('S',inplace=True)	1	1
self.w_[0] += self.eta * error.sum()	1	1
ax[0].set_title('Loss')	1	1
train['SmallFamily']=np.where((train['FamilySize']>=2) & (train['FamilySize']<=4),1,0)	1	1
runningAccuracy.append(accuracyMean)	1	1
"train_df[""age""] = train_df[""age""].fillna(train_df[""age""].mean())"	1	1
"X[[""Name""]].apply(lambda x: re.match("".*\, ((the )?\S*)\. .*"", x.Name).groups()[0], axis=1)"	1	1
deplicate_ticket.loc[(deplicate_ticket.Family_size == 1) & (deplicate_ticket.Survived.notnull())].head(7)	1	1
train['Embarked']=train['Embarked'].fillna(freq_Embarked)	1	1
dataset.drop(['PassengerId'], axis=1, inplace=True)	1	1
age_missing.SibSp.astype('category', categories=list(range(9)), ordered=True)	1	1
"total[""Title""] = pd.Series(dataset_title)"	1	1
tmp_data_df['AgeBin_Code'] = label.fit_transform(tmp_data_df['AgeBin'])	1	1
Test_X.drop( Field2Drop,axis=1,inplace=True)	1	1
data['Sex'] = data['Sex'].map({'female': 1, 'male': 0}).astype(int)	1	1
"df_train.drop(columns=[""PassengerId"",""Cabin"",""Name"",""SibSp"",""Parch"",""Ticket""],inplace=True)"	1	1
series.mean()	1	1
sub['Survived'] = prediction	1	1
X_train.loc[X_train['Embarked'] == 'S', 'Embarked'] = 1	1	1
X_train.loc[X_train['Embarked'] == 'S', 'Embarked'] = 0	1	1
train_test.drop(['PassengerId','Name', 'Ticket'], axis = 1, inplace = True)	1	1
train['Sex'] = encoder.fit_transform(train['Sex'])	1	1
data['Age']=data.Age.fillna(data.Age.median())	1	1
"test_df.replace({""Sex"": { ""female"" : 2, ""male"" : 1} })"	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',                    'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
test['FareCategorical'] = test['FareCategorical'].astype(int)	1	1
"total[""Ticket""].unique()"	1	1
train_labels.T.values.reshape(1, train_labels.shape[0])	1	1
dataset['Sex']=dataset.Sex.map({'male':0,'female':1})	1	1
res_df['Sl'] = res_df['Sl'].astype(np.uint16)	1	1
data.Age.loc[(data.Age<0) & (data.sons==1) & (data.Personal_Titles=='Mr')] =    data.Age[(data.Age>=0) & (data.sons==1) & (data.Personal_Titles=='Mr')].median()	1	1
dat['SmallF'] = dat['Fsize'].map(lambda s: 1 if  s == 2  else 0)	1	1
model_score.loc[len(model_score)]=[modelname,score,score_std]	1	1
data1['Random_Score']=0	1	1
df_results['val_F_score'] = validation_Fscore	1	1
titanic['Age_range'] = titanic['Age'].apply(age_2_cat)	1	1
"titanic_train[[""Parch"", ""Sex"", ""Age"", ""SibSp"", ""Fare"", ""Embarked"",""Pclass"" ,""Survived""]]"	1	1
train['Age'] = train[['Age','Pclass']].apply( lambda x : impute_age(x),axis = 1)	1	1
id.div(id.sum(1).astype(float), 0)	1	1
test.drop(feature, axis=1, inplace=True)	1	1
train['Cabin'] = entire.groupby('Ticket')['Cabin'].apply(fill_cabin_from_dict)	1	1
plt.boxplot(train.Fare, showmeans = True)	1	1
"forest_prediction.to_csv(""forest_prediction.csv"", index = False)"	1	1
titanic['Ticket_count'] = titanic['Ticks'].apply(lambda t: ticket_count[t])	1	1
cv_result.mean()	1	1
test_new.info()	1	1
y_pred['e'] = e	1	1
"df.drop(""Ticket"",axis=1,inplace=True)"	1	1
df['Emb_nr'] = Emb_nr	1	1
df.drop(['Age'], axis=1, inplace=True)	1	1
train.drop(['Fsize', 'SibSp', 'Parch'], axis=1)	1	1
target.describe()	1	1
"dftrain['Title'].replace(rare_titles, ""Rare title"", inplace=True)"	1	1
loc[0]	1	1
data.loc[(data['Fare'] > payment[1]),'FareGroup'] = 4	1	1
title_list.append(i_list[2])	1	1
"test.drop(columns=""PassengerId"")"	1	1
x_train_c['Fare'].reshape(-1,1)	1	1
df.drop(['PassengerId','Ticket', 'Cabin'], 1, inplace=True)	1	1
train.loc[train['AgeModified']<=10,'AgeCategorical'] = 0	1	1
x_train['Embarked'].fillna('S', inplace=True)	1	1
test_df.drop('PassengerId', axis=1)	1	1
output.to_csv('csv_to_submit_mlp.csv', index = False)	1	1
_.dropna()	1	1
kwargs.get('row', None)	1	1
train.groupby(['Pclass'])['Survived'].mean()	1	1
dataframe['Family'].loc[dataframe['Family'] == 0] = 0	1	1
df_output['PassengerId'] = X_test['PassengerId']	1	1
data['Ptype_F_Ch'] = np.where(data.Ptype_AdultM==0, 1, 0)	1	1
"train.replace([""Mlle"",""Ms"", ""Mme""], [""Miss"", ""Miss"", ""Mrs""], inplace=True)"	1	1
pdModelos.loc[0,'Modelo']	1	1
titanic_data['male'] = sex_dummy.male	1	1
test_df.loc[(test_df.Cabin.isnull())&(test_df.Initial=='Master'),'Cabin']='F2'	1	1
"dataset[""hasParents""] = dataset[""Parch""].apply(lambda x: (x>0)*1)  #making the Parch Column to having Parents and Children or not"	1	1
titanic_df.drop(['Female'], axis=1, inplace=True)	1	1
"ax[0].set_title(""No of SibSp"")"	1	1
"mysubmission.to_csv(""survived_mysubmission.csv"", index=False)"	1	1
titanic['Parch'].unique()	1	1
test['Deck'] = test['Deck'].fillna(value='U')	1	1
Pc3.mean()	1	1
df_train_ml['Title'] = df_train_ml['Title'].replace(woman_married, 2)	1	1
group_survival['group_dead'] = group_survival.groupby('GroupId')['Survived'].transform('count') - group_survival.groupby('GroupId')['Survived'].transform('sum')	1	1
combined_data.iloc[:train_idx].groupby(['Sex','Pclass','Title'])	1	1
rf_models.cv_results_['std_test_score'][rf_models.best_index_],	1	1
pylab.rcParams['figure.figsize'] = 12, 8	1	1
X['caC'] = X['Cabin'].map({'A':0,'B':0,'C':1,'D':0,'E':0,'F':0,'G':0,'T':0,'U':0}).astype(int)	1	1
df.loc[((df.MisAge == 1) & (df.Pclass == 3)) , 'MA_Cl'] = 6 #poor without age	1	1
combine_df['Fare'] = np.log((combine_df['Fare']))	1	1
testTitanic.drop('Cabin', axis=1)	1	1
full.loc[full['Embarked'].isnull(),'Embarked'] = full['Embarked'].dropna().mode()[0]	1	1
"comb[""FamilySize""] = comb.Parch + comb.SibSp + 1"	1	1
importances.sort_values()	1	1
plt.boxplot(data1['FamilySize'], meanline=True, showmeans=True);	1	1
titanic_train.groupby('Pclass').mean()[['Age']]	1	1
"dataset.drop([""Title""], axis = 1, inplace = True)"	1	1
train_data.corr()['Survived'].sort_values()	1	1
train_df.loc[(train_df['Fare'] >= 7.91) & (train_df['Fare'] < 14.454), 'Fare'] = 1	1	1
train_cleaned['Survived']	1	1
"df_test[""Ticket""] = df_data[""Ticket""][891:]"	1	1
np.transpose(data)	1	1
"all_df[""family_members""] =  all_df[""Parch""] + all_df[""SibSp""]"	1	1
app_train.dropna(thresh=thresh,axis=1,inplace=True)	1	1
train_df.drop('Ticket', axis=1)	1	1
family_model['Survived'].plot.bar()	1	1
model.add(Dense(lyrs[i], activation=act))	1	1
df_train_features.values	1	1
All_X[ 0:891 ]	1	1
df_test.fillna(1, inplace=True)	1	1
label_encoder.transform(sex1)	1	1
X_test['Cabin'] = le.fit_transform(X_test['Cabin'].values)	1	1
sns.boxplot(x='Pclass',y='Age',data=Train_Master)	1	1
"df[""Fare""] = df[""Fare""].fillna(df[""Fare""].mean())"	1	1
df_all['Age'] = df_all.apply( lambda x: x['Age'] if str(x['Age']) != 'nan' else missing_ages[x['Title']], axis=1 )	1	1
sns.boxplot(data = train,x = 'Pclass',y = 'Age')	1	1
test['Ticket'].value_counts()  #Calculates passengers groups on each tickets and assign it to a variable 'ticketV'	1	1
train['Cabin_Num'] = train['Cabin_Num'].astype('float')	1	1
"train_data.loc[train_data[""Name""].str.contains(""Col.""), ""TitleCol""] = 1"	1	1
df.loc[row,col] = metrics.roc_auc_score(data.loc[:,row],data.loc[:,col]).astype(float)	1	1
train['Name_Len']	1	1
Test_Master['FamilySize'] = Test_Master['FamilySize'].map({1:'1',2:'2',3:'2',4:'2',5:'3',6:'3',7:'3',8:'3',11:'3'})	1	1
t_df[0:10]	1	1
ages_prob.reset_index()	1	1
train_copy.loc[(train_copy['Fare'] > 14.4542) & (train_copy['Fare'] <= 31.0), 'Fare_Category'] = 2	1	1
test_df['Fare_bins'] = pd.cut(test_df['Fare'], bins=fare_bins, labels=fare_labels, include_lowest=True)	1	1
"df_train.loc[((df_train[""title""]==""mrs."") & (df_train[""Age""].isnull()==True)).tolist(),'Age']=avg_mrs"	1	1
df.pivot_table(index='Sex',columns = 'Pclass',values='Age', aggfunc='mean')	1	1
df_titanic['Name'].head()	1	1
train.loc[train['Cabin'].isna()].Survived.mean() #Those with no cabin have a 30% Survival Rate	1	1
titanic['Fare']/ titanic['Family Size']	1	1
"combine[1].drop(""kmeans_labels"", axis = 1)"	1	1
data.loc[data['Age']<20,'Age']=0	1	1
train.join(df_pclass)	1	1
X.loc[:, self.select_cols_]	1	1
raw_test['Age'] = age_scaler.transform(raw_test['Age'].values.reshape(-1, 1))	1	1
"X_test[""Fare""] = X_test[""Fare""].fillna(13.9)"	1	1
test_df.drop(['PassengerId', 'Age', 'Pclass', 'Sex', 'Name', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'], axis=1)	1	1
train.drop(['Male', 'Fare', 'SibSp', 'Parch', 'Age'], axis=1)	1	1
family_df.head()	1	1
data_df['Fare'].fillna(data_df['Fare'].mean(), inplace=True)	1	1
df[['Survived', 'Title']].groupby('Title', as_index=False)                             .mean().sort_values(by='Survived', ascending=False)	1	1
Merged_data['Fare'] = Merged_data.Fare.fillna(Merged_data.Fare.median())	1	1
X_final_test['Age']= X_final_test['Age'].fillna(X_train['Age'].mean())	1	1
data.drop(['Age', 'Fare','SibSp','Parch'], axis=1)	1	1
titanic[['Sex', 'Pclass', 'Age', 'SibSp', 'Fare', 'Survived']]  # use subset of columns	1	1
X.drop('Cabin_T',axis=1,inplace=True)	1	1
df_copied['Age'] = df_copied['Age'].fillna(-300)	1	1
age_data.append(32)	1	1
dataset.loc[(dataset['Fare'] > 7.89) & (dataset['Fare'] <= 14.454), 'Fare'] = 1	1	1
data_frame.Age.astype(int);	1	1
train_df.drop(drop, axis=1)	1	1
test2_df.head(10)	1	1
df['Cabin'] = df['Cabin'].fillna('NaN')	1	1
df['Fare'] = df['BinnedFare'].astype(int)	1	1
"full_df['lastname'] = full_df.name.str.extract(""^([a-zA-Z \-']+),"", expand=False)"	1	1
dataset.groupby('Embarked').Survived.agg(['count', 'sum', 'mean', 'std'])	1	1
"X[""Age2""] = X[""Age""] ** 2"	1	1
Age.hist(alpha=.5, color='red', bins=20)	1	1
merged1[['Survived_x', 'Sex_x', 'Age_x', 'Survived_y', 'Sex_y', 'Age_y', 'Ticket']]	1	1
test['CategoricalFare'] = pd.qcut(test['Fare'], 4)	1	1
train_set.loc[:, train_set.columns != 'Survived']	1	1
dataset['PerPersonFare'] = dataset['Fare']	1	1
"td[""Others""] = z"	1	1
"data_test.Cabin.fillna(""Unknown"", inplace = True)"	1	1
df_comb['TimeTravelled'] = np.where(dataset_filter, 5, df_comb['TimeTravelled'].values)	1	1
data_test['Title'] = title_test.map(title_to_replace)	1	1
scaler.transform(train)	1	1
train_data.join(sex_code_pd)	1	1
df['Couple'] = df['FamilySize'].map(lambda s : 1 if s==2 else 0)	1	1
test_df.Fare.fillna(median_fare, inplace=True)	1	1
titanic_df.drop('Cabin', axis=1, inplace=True) # Reason is: more missing values	1	1
"df.loc[df['Embarked'].isnull(),'Embarked' ] =""S"""	1	1
bins.append(600)	1	1
data.loc[data.Title.str.contains('125'),'Title']='Miss'	1	1
results['train_time'] = end-start	1	1
model.add(Dense(h_dims,activation='relu'))	1	1
sex.corr()	1	1
"combined.loc[pid,""Parch""] == 2:"	1	1
"test[""Title""] = test[""Name""].apply(lambda x: x.split(',')[1].split('.')[0].strip().upper())"	1	1
full['Cabin'].fillna('X',inplace=True)	1	1
train[['title','Age']]	1	1
train.apply(lambda x: golden(x), axis=1)	1	1
DataSetTrain.shape	1	1
survived.reindex(columns=columnsTitles)	1	1
"data2[""Name""] = data2[""Name""].str.split(';', expand=True)[1]"	1	1
x_test['FamilySize_4'] = x_test['FamilySize'].apply(lambda x: 1 if x == 4 else 0)	1	1
train_df.drop(['SibSp', 'Parch', 'FamilySize'], axis = 1)	1	1
simple_data_df['P3_Male'] = np.where((simple_data_df['Sex']==0) & (simple_data_df['Pclass']==3), 1, 0)	1	1
train_df[['sibsp', 'parch', 'familysize', 'isalone']].head()	1	1
full.loc[(full.Age.isnull()) & (full.Titles_mapped == 'Mr'), 'Age'] = get_Age_mean('Mr', pclass)	1	1
tmp[0] if len(tmp)>0 else 'unknow'	1	1
"Bagging_result[1][""best_model""],"	1	1
titanic_test.drop('Cabin',axis=1, inplace=True)	1	1
"axes[0].set_title(""Number of Siblings/Spouses Number Aboard"")"	1	1
dataset.loc[(dataset['Age'] > 30) & (dataset['Age'] <= 40), 'AgeGroup'] = 3	1	1
"a[""CatAge""] = pd.cut(a[""Age""], 6)"	1	1
full_models['set3']['cat_encode'] = 'OneHot'	1	1
df.groupby(['Sex','Pclass'])['Fare'].mean()	1	1
df_train.columns.values.__contains__('PassengerId'):	1	1
df_clean['Title'].value_counts()	1	1
test_set.loc[test_set['Sex'] == 'male', 'Sex'] = 0	1	1
df.pivot_table(values = 'Age', index = 'Pclass').Age.plot.bar()	1	1
"train[""Fare""][train[""Survived""] == 0].plot(kind='hist', alpha=0.4, figsize=(15,3),bins=100, xlim=(0,60), title='Fare of Survived(Blue) and Not Survived(Green)')"	1	1
a.drop(['Pclass','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Name'],axis=1)	1	1
df_Survived['Embarked'].value_counts().plot.box(ax=axes[0]);	1	1
ax[0][0].set_ylabel('Sex', rotation=0, labelpad=80)	1	1
full_data.tail()	1	1
"pd.merge(test_data, test_result, how=""outer"", on=""PassengerId"")"	1	1
dataset.loc[(dataset['Age'] >32) & (dataset['Age'] <= 48), 'Age'] = 2	1	1
"df_test[""title_mrs""] = df_test[""title""].isin([""mrs."",""mme."",""mlle.""]).astype('uint8')"	1	1
dataset['ticketSize'] = dataset['Ticket'].map(ticketSize)	1	1
Titanic_dataframe.loc[a, 'Cabin Count'] = 0	1	1
train.head(10) # View a certain amount of raw data, default = 5	1	1
titanic_train.groupby('Survived').mean()[['Fare']]	1	1
comb_data.describe(include=['object', 'category']).transpose()	1	1
categorical_columns.append('SexAdult')	1	1
train_label.copy()	1	1
X_train.hist(figsize = (16,10),bins = 20)	1	1
data.sons.loc[data.PassengerId==319] = 1	1	1
tf['Name']	1	1
y.head(10)	1	1
X.select_dtypes(exclude='number')	1	1
"test[""FamilySize""] = test[""FamilySize""].map({""Small"": 0,""Medium"" : 1,""Large"": 2})"	1	1
_train.copy()	1	1
df_full['Embarked'].isnull()	1	1
"bestModel[""classifier""],"	1	1
best_params.append(gs.best_params_)	1	1
"df_test[""title_mr""] = df_test[""title""].isin([""mr.""]).astype('uint8')"	1	1
train_surv.head()	1	1
"train_set[""Name""] = train_set[""Name""].map(lambda name:name.split(',')[1].split('.')[0].strip())"	1	1
np.dot(inp_layer.T, d_out)	1	1
test_set['Embarked'].fillna('S', inplace=True)	1	1
dt.loc[(dt['Fare']<7.91),'Fare']=0	1	1
df_test['Fare'].fillna((df['Fare'].mean()), inplace=True)	1	1
"related_people.loc[related_people[""PassengerId""]==722,""RGroup""]=""350048"""	1	1
"train.drop(columns=""sex"")"	1	1
dftrain['Sex_bool']=dftrain.Sex.map(context1)	1	1
X.shape , y.shape	1	1
test_no_age.drop('Age', axis=1)	1	1
sc.transform(training_set[column].values.reshape(-1,1))	1	1
rawdata.drop('Survived', axis=1).values	1	1
train_df['cabin_blocks'] = encoded_cabin_blocks	1	1
age_estimator.loc[(rec['TicketClass'],rec['Sibling_Spouse']),('Age','std')]	1	1
X.drop('Name', axis=1)	1	1
titanic_train.join(pd.get_dummies(titanic_train.Embarked,prefix='Embarked'))	1	1
data.Pclass.astype(categs) # ordinal	1	1
"train[""Cabin""][train[""Cabin""] == ""C""] = 2"	1	1
train['CategoricalFare'], Fare_labels = pd.qcut(train['Fare'], k, retbins = True)	1	1
"train_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by=""Survived"", ascending=False)"	1	1
training_set['Gender'] = training_set['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age3'] = 1	1	1
data['Survived'][data.Man == 1].count(),	1	1
features['Cf_mem_survived'] = group_final['Confidence_member_survived_Group_code']	1	1
df.loc[(df.Cabin.isnull()),'Cabin']='Yes'	1	1
csv['Name'].apply(get_title)	1	1
test['Sex'] = test['Sex'].map({'female': 1, 'male': 0})	1	1
plt.rcParams['patch.force_edgecolor'] = True	1	1
train['Surname'] = train['Name'].str.extract('([A-Za-z]+)\,', expand=False)	1	1
data.Fare.copy()	1	1
dataset3.iloc[:,1:]	1	1
df_train.drop('Name', axis = 1, inplace = True)	1	1
"related_people.loc[related_people[""PassengerId""]==665,""RGroup""]=""Hirvonen_M"""	1	1
train_df.tail(5)	1	1
df.loc[is_master & is_older, 'New_Age'] = None	1	1
np.cumsum(np.round(variance, decimals=3)*100)	1	1
gender_surv_df.PassengerId.count()	1	1
train_set['Survived'] = survived	1	1
train.drop(columns=['Name','Age','Fare'], axis=1, inplace = True)	1	1
"df.join(pd.get_dummies(df[""Pclass""]))"	1	1
data[['Age', 'Title']].boxplot(by = 'Title', ax=ax)	1	1
train_data['Embarked'] = train_data['Embarked'].map(input_Embarked)	1	1
"test.set_index(""PassengerId"",inplace=True)"	1	1
testd.drop(['Ticket', 'Cabin', ], axis=1)	1	1
train['Embarked'][train['Survived']==0].value_counts().sort_index()	1	1
non_alpha['Southampton'].sum()/non_alpha['PassengerId'].count()	1	1
data1['Age'].fillna(data1['Age'].median(), inplace = True)	1	1
combined_data['Title'] = combined_data['Title'].fillna('Mrs')	1	1
train.groupby(['Sex','Survived']).Survived.count()	1	1
not_survivors['Pclass'].value_counts().sort_index()	1	1
train.groupby(['Pclass'])['Age']	1	1
test.loc[((test['Sex'] == 0) & (test['Pclass'] == 2)), 'gender_class'] = 2	1	1
family.sample(10)	1	1
importance_df.sort_values(by=['feature_Temp'],ascending=True, inplace=True)	1	1
train6.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
data_train['Age'].mean()	1	1
df['FamSize'] = df['SibSp'] + df['Parch'] + 1	1	1
df.pivot_table(values = 'Survived', index = 'Family_size').Survived.plot.bar()	1	1
vals.get(x, 0)	1	1
"data[""Name""] = data[""Name""].str.replace(""Dr"",""Mr"")"	1	1
submission.to_csv('My_Last_Hope.csv', index=False)	1	1
age_missing.Parch.astype('category', categories=list(range(8)), ordered=True)	1	1
all.dtypes	1	1
"axs7[1].set_title(""People who survived"", fontsize=20)"	1	1
train_features['S'] = train_d['Sex'].map({'male':1,'female':0})	1	1
data['Age'] = data.Age.fillna(data.Age.mean())	1	1
"X_train.drop(labels=[""PassengerId""], axis=1, inplace=True)"	1	1
train['Survived'].value_counts(dropna=False)	1	1
t['Fare'] = t['Fare'].fillna(dataset['Fare'].median())	1	1
df_train['Cabin'].isnull().sum(), df_test['Cabin'].isnull().sum()	1	1
all_data.loc[(all_data['Age'] > 28) & (all_data['Age'] <= 32), 'Age'] = 3	1	1
"df[""Age""] = StandardScaler().fit_transform(df[""Age""].values.reshape(-1,1))"	1	1
test.drop('Age', axis=1, inplace=True)	1	1
data['Pclass'].hist()	1	1
"titanic_test[""FamilySize""]=titanic_test['SibSp']+titanic_test['Parch']"	1	1
X_train.shape[-1]	1	1
pd.isnull(titanic).sum()	1	1
"df_train[""Alone""] = np.where(df_train['SibSp'] + df_train['Parch'] + 1 == 1, 1,0) # People travelling alone"	1	1
data.loc[ (data['Age'] >27) & (data['Age']<=33),'Age'] = 4	1	1
test['Title']=test['Name'].str.extract('([A-Za-z]+)\.',expand=False)	1	1
model_ann.add(Dense(units=h_dims,kernel_initializer='uniform',activation='relu'))	1	1
"full_dataset[""Sex""] = full_dataset[""Sex""].map({""male"": 0, ""female"":1})"	1	1
preds.to_csv('output.csv', index=False)	1	1
params['random_state']=seed	1	1
train_ds.count()	1	1
"first_class_didnt_survive.plot.hist(fc=(1, 0, 0, 0.5), normed=1, label=""Did not Survive"")"	1	1
decks_by_class[2],size=1,	1	1
"X_test[""FamilySize""] = family_size_test"	1	1
data.loc[(data.Fare > 0) & (data.Fare <= 7.5), 'FareBand'] = 1	1	1
"train_data.loc[train_data[""Pclass""] == 3, ""PclassThree""] = 1"	1	1
result.to_csv('result2.csv', index=False)	1	1
evtest['loss'],	1	1
model.add(Dense(512, input_dim=25))	1	1
"train_df.loc[(train_df.Age.isnull()), ""Age""] = median_age"	1	1
train['CategoricalAge'], Age_labels = pd.qcut(train['Age'], k, retbins = True, duplicates='drop')	1	1
X_final_test.drop(['Sex','Embarked','Pclass','Name_title'],axis=1)	1	1
df_train.drop(['Sex','Embarked'],axis=1,inplace=True)	1	1
titanic.iloc[891:1309,]	1	1
plt.hist(ageNoNa)	1	1
np.sum(test_Y == np.round(regr.predict(test_X)))	1	1
test_age_train.head()	1	1
result_df.to_csv('TitanicPredictions-Final.csv')	1	1
raw_df['Family_Size']=raw_df['SibSp']+raw_df['Parch']	1	1
valid_scores.append(valid_score)	1	1
train.groupby(['Title'])['Survived'].mean()	1	1
x_test_final.to_csv('gender_submission.gz',index=False,compression='gzip')	1	1
pd.merge(test, ticSur, on=['Ticket', 'Ticket'],how='left')	1	1
dataset.drop(['SibSp','Parch'], axis=1, inplace=True)	1	1
test_csv.loc[(test_csv.Name.str.contains('Mr') & test_csv.Age.isnull()), 'Age'] = Mr_average_age	1	1
"single_women[""Age""]=single_women[""Age""].fillna(single_women[""Age""].median())"	1	1
"train[""Age""].dropna().median()"	1	1
train.loc[train['Survived'] == 1]	1	1
X_dummies.dtypes	1	1
dataset.loc[(dataset['Age']>20)&(dataset['Age']<=40),'Age_range']=1	1	1
data_train['Adult'] = (data_train['Age'] >= 15).astype(int)	1	1
en_test['combined'] = m_clf.predict(en_test[['tree_clf', 'rf_clf']])	1	1
test.assign(CabinCat = cabin_cats_test)	1	1
data1[['AgeBin', 'Survived']].groupby(['AgeBin'], as_index=False).mean(),	1	1
full['FamilySurvivalRate'].fillna(value=.5, inplace=True)	1	1
x_test['Age'] = x_test['Age'].fillna(mean)	1	1
"train[""isalone""] = np.where(familySize_train>=1, 1, 0)"	1	1
"combine_df.iloc[891:,:].drop([""PassengerId"",""Survived""], axis=1)"	1	1
train.loc[(train['Fare'] > 7) & (train['Fare'] <= 14), 'Fare'] = 1	1	1
whole['Surname'] = whole.Name.map(lambda x: re.search('(.+)(?=\,)',x).group(1))	1	1
model.add(Dense(256, activation='relu'))	1	1
test_data['Title'].isin(['Mr.','Sir.','Master.','Miss.','Mrs.','Lady.','Army.','Rev.', 'Noble.', 'Dr.'])	1	1
temp_df['Ticket'].iteritems():	1	1
test.fillna(test['Age'].median(),inplace=True)	1	1
"dataset['Class1'] = dataset[""Pclass""].apply(lambda x: 0 if x != 1 else 1)"	1	1
train_test['SibSp_Parch'] = train_test['SibSp'] + train_test['Parch']	1	1
"RF_result[0][""best_model""],"	1	1
"x_test.replace({""Sex"": repCol3, ""Embarked"": repCol8} , inplace = True )"	1	1
train_df.iloc[:, [0]]	1	1
test_df.loc[(test_df['Age'].isnull())&(test_df['Title']=='Master'),'Age'] = 5	1	1
train[['Pclass', 'Sex', 'Age', 'Fare']].values # dari artikel lain ada yang memasukan fare tetapi belum nemu penjelasan logisnya	1	1
_df.loc[_df.group_count.isna(), : ]	1	1
"df_real_test.drop([""Pclass"" ,""Age"" , ""SibSp"" , ""Parch"" , ""Fare"" , ""Sex_code"" , ""Embarked_code""] , axis = 1)"	1	1
"test[""Embarked""]=le.fit_transform(test[""Embarked""].values)"	1	1
shuffled_Titanic_dataframe.head(int(x))	1	1
df['Family'].replace(to_replace = [7,8,9, 10,11], value = 'large', inplace = True)	1	1
x['FamilySizeBin'] = pd.cut(x['FamilySize'].astype(int), 6, labels=bucket_labels)	1	1
np.median(Titanic_Master.Fare)	1	1
df_titanic['Family'].unique()	1	1
train.loc[train['Parch'] >0, 'had_Parch'] = 1	1	1
DT_submission.head()	1	1
"related_people.set_index([""Last_Name"",""Ticket""],inplace=True)"	1	1
train.head(4)	1	1
train[['Survived','Embarked']].groupby(['Embarked'],as_index=False).mean()	1	1
"test_data[""Ticket""]= test_data['Ticket'].replace(['A','W','F','L','5','6','7','8','9'], '4')"	1	1
df['Ticket'] = df['Ticket'].map(lambda x: 'XX' if x.isdigit() else x.split(' ')[0])	1	1
data[['Age', 'SibSp']].boxplot(by = 'SibSp', ax=ax)	1	1
ds.drop(labels=['Ticket', 'Fare', 'Cabin'], axis= 1, inplace= True)	1	1
dataset['Gender']     = dataset['Sex'].map({'female': 0, 'male': 1}).astype(int)	1	1
df_train_features.iloc[rowin,np]=int(cn[1:])	1	1
"df[""Survived""].to_frame().reset_index().to_csv(""prev.csv"", index=None)"	1	1
sub_xgb['PassengerId'] = df_test['PassengerId']	1	1
train.calculated_fare.mode()	1	1
train.drop('Embarked',1,inplace=True)	1	1
data.Age.isnull().any() # So no null values left finally	1	1
test_copy.values[:, 1:]	1	1
df_data['Fare'].fillna(df_data['Fare'].median(), inplace = True)	1	1
"full_df[""Age""].std()"	1	1
data.drop(['Name','Age','Ticket','Fare','Cabin','Fare_range','PassengerId'],axis=1,inplace=True)	1	1
test_df_with_family['FamilyMemberSurvived'] = [has_family_member_survived(row) for row in test_df_with_family.iterrows()]	1	1
titanic_df['Survived'] = titanic_df['Survived'].astype(bool)	1	1
df.groupby('is_train')['Age'].plot(kind='kde')	1	1
pd.merge(train_df_imputed, combined_df_imputed[['PassengerId', 'FamilyId']], on='PassengerId')	1	1
full_df[ 'Title' ] = full_df.Title.map( Title_Dictionary )	1	1
train_data.head()['Embarked']	1	1
data.loc[(data['Age'].isnull()) & (data['Initials']=='Mr'),'Age']=33	1	1
train7['Age'] = train7['Age'].fillna(train7['Age'].median())	1	1
data_copy.loc[data_copy.Embarked=='Q', 'Embarked'] = 2	1	1
test[['Age','Fare','Family']]	1	1
model.add(Dense(64, input_dim=8, activation='relu'))	1	1
train.copy().drop(['Name'], axis=1)	1	1
train_data.drop(['Name','Ticket'], axis = 1, inplace = True)	1	1
Test_Master.drop(columns=['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket'],inplace=True)	1	1
dataset.loc[dataset['Fare'] <= 34.885, 'Fare'] = 1	1	1
"dataset_med.loc[3,0][""Age""]"	1	1
train_data[['Survived','FamilySize','Age','Fare','Pclass']]	1	1
data['Survived'].value_counts()	1	1
pca.transform(tes_Scaler)	1	1
data.Age.hist(bins=50)	1	1
train.values[:,9]	1	1
test.loc[test['Age'].isnull() & test['NameTitle'].str.contains('Other.'), 'Age'] = 46	1	1
sns.boxplot(x='Sex',y='Age',data=train_df)	1	1
combined_df.Age.median()	1	1
en_test['rf_clf'] =  pd.DataFrame(rf_clf.predict_proba(X_test))[1]	1	1
train.join(sex_dummies_train)	1	1
train_test.drop('Ticket',inplace=True,axis=1)	1	1
parameters['num_epochs']	1	1
feats['parents'].fillna(0, inplace=True)	1	1
accuracy_mean.append(cv_result.mean())	1	1
titanicTrain2.sample(n=342)	1	1
data_train['Age']=data_train['Age_imputed']	1	1
pca_6.transform(X_train2)	1	1
"df_test[""Sex""] = lb.fit_transform(df_test[""Sex""]) # Substitutes 'male' and 'female' by float values to allow the decision tree to run"	1	1
"train[""Survived""][train[""Sex""]=='female'][train[""Age""]<18][train[""Pclass""]==1].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
df_test[['PassengerId','Survived']].to_csv('women_survive.csv',index=False)#second model	1	1
data_frame['Title'] = data_frame.Title.map(Title_Dictionary)	1	1
"data[""Title""] = data[""Name""].apply(lambda name : get_title(name))"	1	1
data_test.copy()	1	1
"dt_test[""Age_cat""] = pd.cut(dt_test.Age, intervals, labels=cats)"	1	1
train_df['TitleKey'] = 0	1	1
titanic_df[['Survived','Class']],index='Survived',columns=['Class'],	1	1
"df[""FamilySize""] = 0"	1	1
train.values,discretize_continuous=True, discretizer='decile',	1	1
data_train[['Name','Ticket','Cabin']].head(15)	1	1
plt.hist(train_df['Age'].dropna(),bins=80)	1	1
raw_test['has_cabin_T'] = raw_test.apply(lambda x: 1 if x['has_cabin_T'] == True else 0, axis=1)	1	1
df_test['FareAvg'] = pd.cut(df_test['FareAvg'], 5, labels=[1, 2, 3, 4, 5])	1	1
train['Embarked'][train['Embarked']=='Q']=2	1	1
X.mode().iloc[0]	1	1
simple_data_df['P1_Male'] = np.where((simple_data_df['Sex']==0) & (simple_data_df['Pclass']==1), 1, 0)	1	1
titanic.groupby(['Pclass', 'Sex', 'Title'])['Age'].describe()	1	1
"df_titanic[""Age""],"	1	1
"train_data[""FamilySizeBetween2And4""] = 0"	1	1
tr.loc[(tr['Age']>32)&(tr['Age']<=40), 'Age'] = 4	1	1
dropped_train_df.drop('Survived', axis=1).corr()	1	1
"df[""Embarked""] = df[""Embarked""].astype('category')"	1	1
X_tot.loc[i,'PrimaryCabin']=(X_tot.loc[i,'PrimaryCabin']=='N')*rnd.choice(cabinlist)+(X_tot.loc[i,'PrimaryCabin']!='N')*X_tot.loc[i,'PrimaryCabin']	1	1
arr['A'].append(row)	1	1
dft['Ticket']	1	1
titanic_test['Fare'].fillna(titanic_train['Fare'].median(),inplace=True)	1	1
test_df_read.drop(['PassengerId', 'Name', 'Cabin', 'Ticket', 'Embarked'], axis=1)	1	1
titanic_df.drop(['Pclass'],axis=1)	1	1
train_df.loc[0, 'Name']	1	1
train['Survived'].value_counts().plot.pie(autopct= '%1.1f%%', cmap='Pastel1')	1	1
solution.to_csv('../input/submission.csv', index=False)	1	1
X['TicketType']=X['Ticket'].apply(lambda x: getTicketType(x)).astype('category')	1	1
data['Fare']=data['Fare']*0.0001	1	1
axes[1].legend(loc=2)	1	1
np.where(preditions > 0.5, 1, 0)	1	1
train_data[['Title','Survived']].groupby('Title',as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
data.isMother.replace(['Not Mother','Mother'],[0,1], inplace = True)	1	1
train_df[['Pclass','Survived']]	1	1
"in [""Mrs"", ""Ms"", ""Dona"", ""Mme"", ""the Countess""]: #Femmes"	1	1
df['MA_Cl'] = 0	1	1
df.rename(index=str, columns=app_mapping)	1	1
df.loc[df[df['Age'].isnull()].index, 'AgeFill'] = age_prediction_linear_regressor.predict(df[features_for_age_prediction][df['Age'].isnull()])	1	1
df_train_features.replace(s,tktnum)	1	1
train_data.drop(['AgeBand'], axis=1)	1	1
np.where(sigmoid(t_y) > 0.5, 1, 0)	1	1
df['Cabin_count'] = df.groupby(['Cabin'])['Cabin'].transform('count')	1	1
df_all['SharedName'] = [1 if i > 1 else 0 for i in df_all['LastName'].map(d_shared_name)]	1	1
train_df_raw.describe()	1	1
"tf[""Sex""] = tf[""Sex""].apply(sb)"	1	1
df['Survived'][df['Sex'] == 'female'][df['Pclass'] == 1].value_counts()	1	1
train['Age'] = train[['Age', 'Pclass']].apply(impute_age, axis = 1)	1	1
"test_df.loc[test_df[""Fare""].isnull(),""Fare""]=7.518522"	1	1
"test.loc[test[""Parch""] == 0, ""pc_c""] = ""0"""	1	1
skb.transform(x_val)	1	1
df.Fare.loc[ (df.Ticket == '3') & (df.Pclass == 3) & (df.Embarked == 'S')].median()	1	1
easy_correl_train['Age'][easy_correl_train['Age'].isnull()] = -10	1	1
train_Age.values[:, 0]	1	1
train['family_is']='0'	1	1
cabins_for_classes.append([a.loc[a['Pclass']==3]['Cabin2'].value_counts()])	1	1
train_data.iloc[:,length]	1	1
train[['isAlone', 'Survived']].groupby('isAlone').mean()	1	1
df.iloc[891:]	1	1
"pclass_dummies_titanic.drop([""Class_3""],axis=1,inplace=True)"	1	1
titanic_train_test_merged['Age_range']=titanic_train_test_merged['Age_range'].astype('category')	1	1
"df_train.loc[ df_train['Fare'] > 31, 'Fare'] 							         = 3"	1	1
train_df.loc[train_df['Age'].idxmin(axis=1)]	1	1
df2.drop(['PassengerId','Name','Ticket','Cabin','Embarked','Fare'],axis=1)	1	1
df_submission['ticket_class'] = df_submission.apply(fill_ticket_class, axis=1)  # [1]	1	1
"full_set.insert(0, ""ind_"", ind)"	1	1
X.isna().sum()	1	1
data.set_value(597, 'TicketClean', int(med1))	1	1
"train[""Age_cat""] = 0"	1	1
data['IsChild'] = data['Age'] < 14	1	1
test.fillna('0')	1	1
"df_real_test[""Sex_code""] = label.transform(df_real_test[""Sex""])"	1	1
titanic_data[['Survived', 'Sex']];	1	1
train_df.loc[(train_df['Age'].isnull())&(train_df['Title']=='Mrs'),'Age'] = 36	1	1
submission.to_csv('titanic11.csv', index=False)	1	1
raw_data['AgeGroup'] = pd.cut(raw_data.Age, bins=16)	1	1
"titanic_test.loc[titanic_test[""Sex""]==""male"",""Sex""] = 0"	1	1
train_df.drop(['Survived'], 1)	1	1
train_data.groupby(['AgeGroup'])['Survived'].value_counts().div(train_data.groupby(['AgeGroup'])['Survived'].count()).unstack().plot.bar(stacked = True, ax=ax)	1	1
titanic_df['Title'] == 'Mrs'	1	1
raw_test['has_cabin_T'] = raw_test['Cabin'].notnull()	1	1
df['Cabin'].fillna(0, inplace =True)	1	1
"df_data['Title'] = df_data['Title'].map({""Mr"":0, ""Rare"" : 1, ""Master"" : 2, ""Miss"" : 3, ""Mrs"" : 4 })"	1	1
train.drop('Fare', axis = 1, inplace = True)	1	1
"combined[""isVIP""] = 0"	1	1
df_all.iloc[:891,:]	1	1
test_df.replace('male',1)	1	1
data['Fare']=data.Fare.fillna(data.Fare.mean())	1	1
train_df['Age'][np.isnan(train_df['Age'])] = rand_train	1	1
train_data['FamilySize'] = train_data['SibSp'] + train_data['Parch']+1	1	1
df_test['Embarked'].fillna('S', inplace=True)	1	1
"train_df[""Fare_Group""]=train_df[""Fare_Group""].astype(""object"")"	1	1
encEmb.transform(df.Embarked.values.reshape(-1,1))	1	1
test.Age.fillna(np.mean(train.Age))	1	1
np.std(features, axis=0)	1	1
df_output[['PassengerId','Survived']].to_csv('output2.csv',index=False)	1	1
df_train['Survived'] = survived	1	1
test[['Pclass', 'Sex', 'Age', 'SibSp', 'Fare']]	1	1
"train_df.drop(""Embarked"", axis=1, inplace=True)"	1	1
train_test.drop(['Cabin'], axis = 1, inplace = True)	1	1
dummy_df2.head()	1	1
df_train['Initial'] = df_train.Title.replace(mapping)	1	1
dataset.sample(5) # printing the first five rows to get an impression of the data	1	1
result.to_csv('adaboostresult.csv', index=False)	1	1
lgb_params['max_depth'] = 8	1	1
titanic['Mod_col_2']=col_3[:,0]	1	1
predictions.append(model.predict_proba(testXGB)[:, 1])	1	1
"train[""Survived""][train[""Sex""]=='female'][train[""Age""]>=18][train[""Pclass""]==1].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
train['Name'] # Remove the original name, which is no longer useful	1	1
sns.boxplot(train_data['Survived'])	1	1
data.to_csv('New_Data.csv')	1	1
chart.append(log_entry)	1	1
train.iloc[n_valid_rows:].copy()	1	1
missing_data2.drop(['Age'],axis=1)	1	1
"xgb_submit_dataframe.to_csv(""xgb_submission.csv"", index=False, header=[""PassengerId"", ""Survived""])"	1	1
test['SibsSp'] = test.apply(lambda row: row['SibSp'] > 0, axis=1)	1	1
"full_data.loc[full_data[""Title""] == title,'Age'] = sub_dataset.astype(int)"	1	1
submission['PassengerId'] = one_hot_test['PassengerId']	1	1
X_val.info()	1	1
np.round(bagg_x_val_score.mean()*100, 2)	1	1
"train_df[""Fare_Group""]=pd.cut(train_df[""Fare""],range(0,350,50),right=False)"	1	1
all_data.loc[i].at['Title']	1	1
df_all['LastName'] = df_all['Name'].str.extract(pat= '^([^,]*),', expand=True)	1	1
"test_ds[""PassengerId""],"	1	1
"related_people[""total_related""]=related_people[""SibSp""]+related_people[""Parch""]+1"	1	1
train['n_relatives'] = train.SibSp + train.Parch	1	1
"processed_dataframe[""NormalizedFare""] = dataframe[""NormalizedFare""].copy()"	1	1
test_data['Sex'] = test_data['Sex'].map(sex_map)	1	1
df_titanic_train_mod['Embarked'].replace('Q',3,inplace=True)	1	1
test.drop(['PassengerId','Name','Ticket','Cabin'],axis =1)	1	1
df.rename(columns = {'Name': 'Title'})	1	1
data_to_submit.to_csv('ada_to_submit.csv', index = False)	1	1
test.to_csv( 'titanic_preds_3.csv' , index = False )	1	1
dataset['Title'] = dataset['Title'].str.replace('(Dr|Rev|Col|Major|Sir|Capt)', 'Occupation')	1	1
"result[""PassengerId""] = test_df[""PassengerId""].astype(""int"")"	1	1
submission.to_csv('RF_nofare_submission.csv', index = False)	1	1
full_test_predictions[0] * .7 + full_test_predictions[1] * .3	1	1
features['SibSp'] = full['SibSp']	1	1
"titanic_df[[""Family"", ""Pclass"", ""Survived""]].groupby(""Family"") :"	1	1
df.Fare.fillna(df.Fare.mean(),inplace=True)	1	1
train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean()	1	1
res_acc.append(cross_val_score(nbClass,X,y,scoring='accuracy',cv=10).mean()*100)	1	1
Input.head()	1	1
test['FamilySize'] = FamilySize_test	1	1
validation_costs.append(validation_epoch_cost)	1	1
"data_val[""PassengerId""],"	1	1
result_df.reset_index()############################################################	1	1
x['Embarked'].fillna('Q', inplace=True)	1	1
dataset.loc[dataset['Title'] == 'Miss', 'Age'] = dataset.loc[dataset['Title'] == 'Miss', 'Age'].fillna(medians.loc[medians['Title'] == 'Miss']['Age'][1])	1	1
data.loc[(data['Age'] > 31) & (data['Age'] <= 41), 'SortAge_2'] = 3	1	1
"test_df[""NumberCabins""] = test_df[""Cabin""].apply(count_cabins)"	1	1
train.iloc[:, 2:].values	1	1
test_set.drop('Ticket', 1, inplace=True)	1	1
titanic.corr()  ## Find relationship	1	1
X.shape, theta.shape, Y.shape	1	1
comb['P2'] = comb['Pclass'] == 2	1	1
score_b6.append(selector.grid_scores_[4])	1	1
"_df[""cabin_count""]  = _df[""_cabin""].apply(lambda i : len(i) if i[0] != ""nan"" else 0)"	1	1
test2['Sex'] = test2['Sex'].map(sex_map)	1	1
fw_prop_activation.eval()	1	1
classifier_results['ext_best'] = (ext_accuracy, ext_best)	1	1
cost.append(lcost(X2, w, b, y))	1	1
id.shape	1	1
testNMD.shape[0]	1	1
tf.transpose(Z)	1	1
train['Age'] = train['Age'].apply(lambda x: 1 if x <= 15 else 2 if x <= 30 else 3)	1	1
df_train['Title'] = pd.to_numeric(df_train['Title'])	1	1
x.values	1	1
X_train_bin.head()	1	1
dataset['Sex'] = dataset['Sex'].map({'female':1, 'male':0}).astype(int)	1	1
"test.loc[test[""SibSp""] >1 , ""sib_c""] = ""2"""	1	1
train.drop(['Survived','PassengerId'],axis=1),	1	1
X.sum(axis=1)	1	1
"family_size_transformed.groupby(""Survived"").apply(lambda column: column.sum()).transpose().drop([""Survived""])"	1	1
train['Sex'] = [1 if i == 'male' else 0 for i in train.Sex]	1	1
"train['Title'] = train['Title'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
df_all.loc[df_all.Fare.isnull(),'Fare']=val_mean.values	1	1
test_data.drop(columns_to_drop, axis=1)	1	1
combined.Fare.isnull()	1	1
features_long.set_value(idx3[ii], 'Age', miss.iloc[np.random.randint(len(miss))])	1	1
"df.loc[df[""Cabin""].notna(), ""Has_Cabin""] = 1"	1	1
train_df.isna().any()	1	1
df[['Name', 'Title']].sample(10)	1	1
dataset['Ticket'].apply(lambda x: x[:-1])	1	1
train.drop(columns=['Cabin'], axis=1, inplace=True)	1	1
fare.nlargest(25)	1	1
"data[""CabinCount""] = data[""CabinCount""].fillna(0).astype(int)"	1	1
test_ori['CabinAssigned'] = np.where(test_ori.Cabin.isnull(), 0, 1)	1	1
testds.fillna('S',inplace=True)	1	1
data_train_all['Title'].value_counts()	1	1
"train[""Title""].fillna(4,inplace=True)"	1	1
df['Cabin_n']=(df['Cabin'].astype(str).str[0]=='n').astype(int) #n is the only cabin correlated with survival (inversely)	1	1
titanic.Survived.astype(int)	1	1
"train_df.drop(""Survived"", axis=1)[0:train_set_size]"	1	1
data.loc[data['Fare']<=0.7854,'Fare_cat']=0	1	1
dataset['E'] = np.where(dataset['CabinChar']=='E',1,0)	1	1
"train_df[""Name""] = train_df[""Name""].str.extract(""([A-Za-z]+)\."",expand=False).astype('category')"	1	1
"df[""AgeBin""] = pd.cut(df['Age'], age_bins)"	1	1
train_dat.loc[train_dat['Survived'] == 0]['Age'].dropna()	1	1
"X.fillna(method=""ffill"")"	1	1
train_df.loc[train_df['Fare'] <= 7.91,'Farecat'] = 0	1	1
test_df['Fare_Scaled'] = scaler.fit_transform(test_df.Fare.reshape(-1,1), fare_scale_param)	1	1
df.loc[mr_title & unknow,'Age'] = df[mr_title]['Age'].mean()	1	1
model_data.loc[model_data.Embarked.isnull(),'Embarked'] = 'S'	1	1
train_data['Age'] =train_data['Age'].astype(int)	1	1
train.drop('PassengerId', axis=1, inplace = True)	1	1
score.astype(float)	1	1
test['Fare'].hist()	1	1
train_df.loc[(train_df['Age'] > 28) & (train_df['Age'] <= 37), 'Age'] = 2	1	1
return_obj[0],	1	1
"train.drop(""PassengerId"", axis = 1, inplace = True)"	1	1
"df_test.loc[df_test['Name'].str.contains(""Master"") & df_test.isnull().Age, 'Age'] = 10.0"	1	1
train_df['Name_len_Class2'] = pd.cut(train_df['Name_len'], bins = 4, labels=group_names)	1	1
"data.drop([""PassengerId"", ""Name"",""SibSp"",""Parch"",""Ticket"",""Cabin"",""Age"",""Fare"",""Family""], axis=1)"	1	1
sns.boxplot(x='Pclass',y='Age',data=my_data,palette='winter')	1	1
pclass[1]	1	1
SVM.to_csv('svm1.csv')	1	1
test['Title'].replace(['Master','Major', 'Capt', 'Col','Don', 'Sir', 'Jonkheer', 'Dr'], 'titled', inplace = True)	1	1
part['Age'].median()	1	1
components_[1] * max(transformed_features[:,1])	1	1
validationPCA.drop(columns = ['Survived'])	1	1
train_data[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
titanic_df.loc[mrs_mask, 'Age'] = titanic_df.loc[mrs_mask, 'Age'].fillna(titanic_df[titanic_df.Title == 'Mrs'].Age.mean())	1	1
train.loc[(train['Fare'] > 14) & (train['Fare'] <= 31), 'Fare']   = 2	1	1
data.groupby(['name_title', 'Pclass'])['Age']	1	1
df_comb['Cabin'].isnull()	1	1
"dataset[""Fsize""].replace(to_replace = [3,4], value = 'Medium', inplace = True)"	1	1
test1.drop('PassengerId',axis=1)	1	1
train_dataset.count().min() == train_dataset.shape[0] and test_dataset.count().min() == test_dataset.shape[0] :	1	1
passenger['Sex']	1	1
"df_train[""surname""] = df_train[""Name""].apply(lambda x: name_split(x))"	1	1
history_loss_test.append(temp_loss)	1	1
"test.drop([""istrain"", ""PassengerId""], axis=1, inplace=True)"	1	1
test_df['Person']  = test_df[['Age','Sex']].apply(get_person,axis=1)	1	1
comb_data['Fare'] = boxcox1p(comb_data['NameLength'], lam)'''	1	1
"test[""Age""]=test.Age.fillna(age_median)"	1	1
train_df[['Pclass','Survived']].groupby(['Pclass']).mean().plot.bar(ax=ax[0])	1	1
y.head(3)	1	1
scores.append( best_knc.score(X_test, y_test) )	1	1
combined_data['Age'].fillna(combined_data.iloc[:891]['Age'].mean(),inplace = True)	1	1
"train[""Family""] = (train[""SibSp""] + train[""Parch""]).copy()"	1	1
test_clean.copy()	1	1
titanic_data.FamilySizeGroup.describe()	1	1
result.drop(['Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked'],axis=1)	1	1
"data[""Embarked""].factorize()"	1	1
DataFile.drop('SibSp',axis=1)	1	1
titanic_data.loc[titanic_data['Fare'] <=7.91,'Fare'] = 0	1	1
test['Fare']=test['Fare'].apply(fixnan)	1	1
"related_people.loc[related_people[""PassengerId""]==206,""RGroup""]=""Strom_M"""	1	1
tmp.sum()	1	1
"df[[""Cabin"", ""Age""]].apply(lambda x: x.isnull().astype(int)).sum(axis=1)"	1	1
test.loc[test['Sex']=='female','Sex']=0	1	1
"df.loc[df[""Cabin""].isnull(), ""hasCabin""] = 0"	1	1
dataset['Title'] = dataset['Title'].map(titile_mapping)	1	1
arr['G'].append(row)	1	1
train[['PassengerId','Age','Survived','Pclass','Sex','Fare','FamilySize','Embarked']]	1	1
concat_set['Embarked'].fillna('S', inplace=True)	1	1
train['Fare_Groups'] = pd.cut(train['Fare'],bins)	1	1
train.loc[(train['Pclass'] == 3) & (train['isAlone'] == 1), 'class_alone'] = 6 #alone Pclass 3	1	1
combine_df['Name_Len'] = combine_df['Name'].apply(lambda x: len(x))	1	1
"traindat[""Sex""].value_counts()"	1	1
reduced_data.head()	1	1
self._info.info(self.all_data)	1	1
data['Embarked'].replace(['C','S', 'Q'],[1,2,3],inplace=True)	1	1
titanic_train.drop(['Pclass','Pclass_3'],1)	1	1
train['Cabin_First']=train.Cabin.str[0]	1	1
data_replaced_ages.loc[(data_replaced_ages['Survived'] == 0) & (data_replaced_ages['Sex'] == 'female') & (data_replaced_ages['Age'].isnull()), 'Age'] = female_ages_not_survived_age['Age'].mean()	1	1
"combined.loc[c_group, ""n_cabin_mates""] = len(c_group)"	1	1
axs[1].set_ylim(top=axs[0].get_ylim()[1])	1	1
"data[""Pclass""] = data[""Pclass""] - 1"	1	1
data['Fare_Code'] = le.fit_transform(data['Fare_Bin'])	1	1
Test['Survived']=z	1	1
"test[""Family""]=test['SibSp']+test['Parch']"	1	1
dataset.loc[dataset['Fsize'] == 1, 'Fsize'] = 0	1	1
ticket['Pclass'] = combined_df.Pclass	1	1
"train_df[['SibSp', 'Survived']].groupby([""SibSp""], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
train['Age'] = train['Age'].fillna(train['Age'].dropna().median()) #replace the NaN values in Age column with median.	1	1
combined_df.loc[(combined_df['Age'] >= 32) & (combined_df['Age'] < 48), 'age_group'] = 0.50	1	1
dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 48), 'Age'] = 5	1	1
axes[1].set_title('Survivors by Age Plot')	1	1
train_data['Fare'].describe()	1	1
"df.loc[(df[""SibSp""] != 0) | (df[""Parch""] != 0), ""hasFamily""] = 1"	1	1
np.sum(dZ, axis=1, keepdims=True)  # Gradient of cost w.r.t. b	1	1
df3.groupby('New_Salutation').count()	1	1
column['Title'] = column['Title'].map(title_mapping)	1	1
test_c.Fare.fillna(median)	1	1
submission.append([X_test_passengers[i], survived[i]])	1	1
test_df['Cabin'] =  test_df['Cabin'].apply(lambda x: 0 if x == '!!!' else 1)	1	1
"X[""FamilySize""] = family_size"	1	1
data_train['Pclass'].value_counts().plot(kind='bar')	1	1
full['AgeCategory'] = pd.cut(full['_AgeLinear'],[0,9,18,30,40,50,100], labels=[9,18,30,40,50,100]) # Add column with range of Age	1	1
"dataset[""Name""].str.split("", "", expand = True)[1]"	1	1
dataset.Embarked.isna().sum(), '--'*12, dataset.Embarked.value_counts()	1	1
X.loc[row,'Cabin'] != -1:	1	1
train_f.drop({'Survived'}, axis=1)	1	1
data.describe() #used to check if there are missing values	1	1
np.sum(theta)	1	1
test_dataset['Title'] = test_dataset['Title'].replace('Mme','Miss')	1	1
trainPCA2['12'] = trainPCA[:,11]	1	1
DataFile['Family_Survival'] = DEFAULT_SURVIVAL_VALUE	1	1
test_df.rename(columns={i: 'Cabin_'+i}, inplace=True)	1	1
combined_df[['Ticket','Embarked']][combined_df['Embarked'].notnull()].groupby(by='Ticket').Embarked.nunique().value_counts()	1	1
all_data.set_value(1032,'Deck',value=all_data.loc[297]['Deck'])	1	1
"test_set.drop([""Survived"", ""ind_indx"", ""ind_"", ""PassengerId""], axis = 1)"	1	1
test['A2'] = np.array(test['CategoricalAge'] == 2).astype(np.int32)	1	1
"a[""CatEmbarked""] = a[""Embarked""].map({""C"" : 0, ""Q"" : 1, ""S"" : 2}).astype(int)"	1	1
"df_train.hist(""title"", by=[""Survived""], figsize = [15,15], layout = [2,1])"	1	1
dataframe.loc[dataframe[column_name] >= 6, column_name] = 6	1	1
finalTest['dependent'] = np.add(finalTest.SibSp, finalTest.Parch)	1	1
df_all.Fare.fillna(df_all.Fare[df_all.Pclass == 3].median())	1	1
full_dataset['Title'].value_counts()	1	1
train_df['Age'].dropna().min().astype(int)	1	1
"df[""Family""] = df[""Parch""] + df[""SibSp""]"	1	1
"tempDf.rename(columns={""Name"": x})"	1	1
dftrain.isnull().sum()	1	1
"df[""Cabin""] = df[""Cabin""].fillna(""Unknown"")"	1	1
df.loc[(df.FareAdjusted.isnull()),'FareAdjusted'] = 1	1	1
fare0.mean()	1	1
dataset['Name'] = dataset['Name'].fillna(0)	1	1
"train_test.loc[train_test[""Age""].isnull() ,""age_nan""] = 1"	1	1
df_output[['PassengerId','Survived']].to_csv('output.csv', index=False)	1	1
train['cabin']= train.Cabin.str[0]	1	1
df_train['ticket_length'] = df_train['ticket_length'].astype('float')	1	1
df_train_ml.drop(['PassengerId','Name','Ticket', 'Cabin'],axis=1,inplace=True)	1	1
df_train.isnull().sum().sort_values(ascending = False)	1	1
titanic['Pclass_Sex'] = titanic['Pclass'] * titanic['Sex']	1	1
test_d.drop(columns={'PassengerId','Pclass','Name','SibSp','Parch','Ticket','Fare','Cabin','Embarked'})	1	1
"test[""Fare_4""] = (100 <= test[""Fare""])"	1	1
test_df.iloc[0:418, [1,8]].values	1	1
train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending = False)	1	1
test['M2_ada'] = cls_ada.predict(test.loc[:, columns])	1	1
"combined[""Fare""]=Fare"	1	1
titanic_df['top_cabin'] = titanic_df['top_cabin'].map({'A': 1, 'B': 1, 'C': 1})	1	1
df_titanic_train_mod['Embarked'].replace('C',2,inplace=True)	1	1
"df.at[pid,""Name""]"	1	1
enc.transform(test_df.Embarked)	1	1
"x[""FamilySize""]"	1	1
valid_X['Sex_Code'] = label.fit_transform(valid_X['Sex'])	1	1
data.groupby(['Sex','Pclass'])['Survived'].mean()	1	1
"out.iloc[:,out.columns.get_level_values(0).isin({""Survived"", ""PassengerId"", ""Fare"", 'class1', 'class2', ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Cabin"", ""Ticket"", 'emS', 'emC'})]"	1	1
"_df.loc[df[""fare""]<1.0 , : ].index"	1	1
df['sex_T'] = df['Sex']	1	1
test_csv.to_csv('submission_all_nn_0.5.csv', index=False)	1	1
df[['Ticket', 'Name']].groupby('Ticket').count().rename(columns={'Name':'count'}).sort_values(by='count', ascending=False)	1	1
data.Age.loc[(data.Age<0) & (data.alone==1) & (data.Personal_Titles=='Kid')] =    data.Age[(data.Age>=0) & (data.alone==1) & (data.Personal_Titles=='Kid')].median()	1	1
"df[""Title""] = LabelEncoder().fit_transform(df[""Title""])"	1	1
Lr.sort_values('LR Coef',ascending=False,inplace=True)	1	1
train_data.drop(labels=['Survived'], axis=1)	1	1
full_models['set3']['cat_attrs'] = ['Pclass', 'Sex', 'Deck', 'Cabin_bool']	1	1
titanic['Title'] = titanic['Title'].replace(['Mlle', 'Ms'], 'Miss')	1	1
all_data.loc[(all_data['Age'] > 32) & (all_data['Age'] <= 48), 'Age'] = 4	1	1
combine_df['Fare'].ix[combine_df['Fare']>151] = 152	1	1
test_df['Survived'] = np.NaN	1	1
"test_data[""Fare""].isnull().values.sum()"	1	1
train_data.copy().drop(['Survived'], axis=1).values # create a copy of the data	1	1
test_data['Age'].iloc[i] = age_pred	1	1
d.groupby(['Pclass']).mean()	1	1
df_Test.select_dtypes('number')	1	1
row['Sex'] == 'male' and row['Parch'] > 0 and row['Age'] < 5:	1	1
dataset.loc[ dataset['Fare'] <= 7.91, 'Fare' ] = 0	1	1
train_df['Embarked'] = label_encoder.transform(list(train_df['Embarked']))	1	1
dataset['FamilySize']=dataset.SibSp+dataset.Parch+1	1	1
min_max_scaler.transform(cleanedtrain.as_matrix(columns=['Fare']))	1	1
titanic_train_labels.values	1	1
sns.boxplot(x='Pclass',y='Age',data=train,palette='winter_r')	1	1
testdata[['Pclass', 'Sex', 'Embarked', 'Party', 'AgeCategory', 'FareCategory']].values	1	1
"died[""Age""].plot.hist(alpha=0.5, color='blue', bins=50)"	1	1
"data_copy[""Age""] = data_copy[""Age""].fillna(data_copy[""Age""].median())"	1	1
data['FamilySize'] == 1:	1	1
test_data['is_cabin']=test_data['Cabin'].notna().astype(int)	1	1
"dataset[""Single""] = 0"	1	1
training_df.head(3)	1	1
dataframe1.iloc[:,0:6].values	1	1
data_test.loc[data_test['FamilyPresent']==0,'FamilyPresent'] = 0	1	1
xIndex.append(x)	1	1
"axs3[1].set_title(""People who survived"", fontsize=20)"	1	1
data.drop(labels=['Name' ,'Ticket','Cabin'],axis=1)	1	1
data['Family'] = data.Parch + data.SibSp	1	1
dataset.loc[dataset['FamilySize'] == 1,'IsAlone'] = 1	1	1
train_test.loc[(train_test.SibSp<=2),'Low_SibSp']=1	1	1
train[['Sex', 'Survived']].groupby(['Sex'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)	1	1
trainingset.drop(['Survived', 'PassengerId'], axis=1)	1	1
titanic_test['Sex'] = titanic_test['Sex'].map({'female': 10, 'male': 1}).astype(int)	1	1
"train[""Age""].fillna(train.groupby(""Title"")[""Age""].transform(""median""), inplace = True)"	1	1
submission.to_csv('xgbc_submission_titanic.csv', index=False)	1	1
train_features.T.values	1	1
full['Titles_mapped'] = Mapped_titles	1	1
train_df.groupby('Sex',as_index=False).Survived.mean()	1	1
featureRanks2.loc[featureRanks2.support==True,['feature']]	1	1
combined['Ticket_cnt'] = combined['Ticket'].groupby(combined['Ticket']).transform(lambda x: x.count())	1	1
features_raw['Embarked'].fillna('U', inplace=True)	1	1
x_test['FamilySize_2'] = x_test['FamilySize'].apply(lambda x: 1 if x == 2 else 0)	1	1
test_dummies.info()	1	1
new_train.loc[index[i], 'FriendsSurvived'] = round(float(survived.sum())/len(survived))	1	1
dataset.Fare.max()	1	1
test_set['Fare'] = test_set['Fare'].fillna(test_set['Fare'].mean())	1	1
drop_train.Embarked.mode().iloc[0]	1	1
train_df.loc[train_df.Title == 'Ms', 'Title'] = 'Miss'	1	1
passenger['Survived']	1	1
Merged_data.drop(['Ticket','Cabin'],axis=1,inplace=True)	1	1
"test_df.loc[test_df['Fare']<=102,""Fare""]=0"	1	1
df.join(df_embarked)	1	1
row['Embarked'] == 'S':	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Mlle', 'Miss')	1	1
train_pclass.Pclass_3.isnull().sum() == 0	1	1
"AgeTypeTest.append(""2"")"	1	1
"dataset[""Embarked_Code""] = label.fit_transform(dataset['Embarked'])"	1	1
tmp_train_df['Sex'].replace(['male', 'female'], [0,1], inplace=True)	1	1
data['Sex'] = list(map(expand_sex, data['Sex'], data['Age']))	1	1
x_train['salutation'].value_counts() < 10	1	1
"vol[""LogisticRegression""] = grid_LR.best_score_"	1	1
test_1['Age'].fillna(test_1.Age.mean(),inplace = True)	1	1
test_df['source'] = 'test'	1	1
"train.drop(""Embarked"", axis=1)"	1	1
x_test['Sex'] = x_test['Sex'].fillna(x_train['Sex'].mode())	1	1
train['Age']=train[['Age','Pclass']].apply(calculate_age,axis=1)	1	1
"test_data[""Family""] = test_data[""SibSp""] + test_data[""Parch""]"	1	1
submission.sample(10)	1	1
train_data['Ticket'].describe()	1	1
test['WcgAllDied'] = dataset.iloc[train_len:, -1].reset_index(drop=True)	1	1
"test.loc[(test[""Name""]==""Miss"")&(test[""Age""].isnull()), ""Age""] = train.loc[train[""Name""]==""Miss"",""Age""].mean()"	1	1
traindf['sexn'] = traindf['Sex'].apply(lambda x: 1 if x == 'female' else 0 )	1	1
"X_test_bin.drop([""Pclass"", ""SibSp"", ""Parch"", ""Age"", ""Fare""], axis=1, inplace=True)"	1	1
train_df['Cabin'].isnull().sum() / len(train_df)	1	1
train_df.fare.plot.hist(bins=bins, alpha=.3)	1	1
all_data.set_value(380,'Deck',value='C')	1	1
table_cabin.div(table_cabin.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)	1	1
data_pruned.iloc[0:891]	1	1
training_set['Embarked'] = training_set['Embarked'].fillna(mode_embarked)	1	1
data.parent_alone.loc[data.PassengerId==103] = 0	1	1
df_full.loc[df_full['PassengerId'].isin([62, 830])]	1	1
"test[""Pclass""] = test[""Pclass""].map({1: 'Class1', 2: 'Class2', 3: 'Class3'})"	1	1
train['Age'].isnull().any()	1	1
"title_dict[""THE""] = 4"	1	1
all_data.drop(['SibSp','Parch'],axis=1,inplace=True)	1	1
"acq_in_train.pivot_table(index=[""Pclass"",""group_size""],values='Survived').copy()"	1	1
df_test.loc[ df_test['Fare'] > 31, 'Fare'] = 3	1	1
test_pred[0]	1	1
test_data['EMBARKED'] = test_data['EMBARKED'].astype('category')	1	1
model.add(layers.Dense(1, activation='sigmoid',))	1	1
train.Cabin.fillna('NO_VALUE', inplace=True)	1	1
"dfTest['Sex']=dfTest['Sex'].map({""male"":0,""female"":1})"	1	1
ax[4][0].set_ylabel('Parch', rotation=0, labelpad=80)	1	1
test_data['Age']=test_data[['Age','Pclass']].apply(impute_age, axis =1 )	1	1
search_df.drop(index = idx, inplace = True)	1	1
transformed_df[ 0:891 ]	1	1
manData['Age'].median(axis=0)	1	1
"train[""AgeGroup""] = np.vectorize(AgeGroup)(train[""Title""],train[""Age""])"	1	1
data.loc[(data.Fare > 7.5) & (data.Fare <= 12.5), 'FareBand'] = 2	1	1
data['Pclass'].unique()	1	1
"df[""FamilySize""] = df[""SibSp""] + df[""Parch""]"	1	1
temp.loc[temp[variable].isnull(), variable] = random_sample	1	1
tX.head()	1	1
test['F3'] = np.array(test['CategoricalFare'] == 3).astype(np.int32)	1	1
df['Outlier'] = np.where(df.Survived.notnull(), df['Outlier'], 0) # extra step to make sure only train data rows are deleted	1	1
"test_df.loc[test_df[""Title""] == ""Major"", ""Title""] = 'Rare Title'"	1	1
axes[1].set_title('Distribution of age for males')	1	1
updated_test_data.replace({'Title': mapping}, inplace=True)	1	1
df['Male'] = np.where(df['Sex'].str.lower()=='male', 1, 0)	1	1
train1['Age'] = train1['Age'].fillna(train1['Age'].median())	1	1
knn_prediction.astype(int)      #prediction compute from the test dataset	1	1
train_df['Fare'].fillna(train_df['Fare'].median(), inplace = True)	1	1
train.Fare.hist(bins=5)	1	1
df_train.sibsp.replace([2,3,4,5], 'group')	1	1
df.Embarked.fillna(most_embarked, inplace=True)	1	1
full_df['Title'] = full_df['Title'].replace('Mme', 'Mrs')	1	1
data['Male'] = (data['Sex']=='male').astype(int)	1	1
test_df['Fare'] = imp_median_fare.transform(test_df[['Fare']]).ravel()	1	1
raw_train['Title'].unique():	1	1
train['Name'].str.contains('Miss.')	1	1
train['Age'][sel_age_fin]	1	1
k_scores.append(scores.mean())	1	1
tit_df_san.drop('Cabin',axis=1,inplace=True)	1	1
test['Family'] = test.Parch + test.SibSp	1	1
test.drop('PassengerId',axis = 1).copy()	1	1
train_d.Age.fillna(train_d.Age.mean())	1	1
"train[""family_size""] = float(""NaN"")"	1	1
df_tr.head(6)	1	1
tt.iloc[891: , :-1]	1	1
"train_df.loc[train_df['Fare']>409,""Fare""]=4"	1	1
train.corr().style.background_gradient().format('{:.2f}')	1	1
"group[""Survived"",""Age"",""Fare""].agg([""mean"",""std"",""size""])"	1	1
data_train['Is_Alone'] = data_train['SibSp'] + data_train['Parch'] == 0	1	1
test['Age']=test['Age'].fillna(test['Age'].mode()[0])	1	1
estimators.append(('LRCV', model1))	1	1
df.loc[df['Deck']=='F', 'Deck'] = 2	1	1
merged[['Group','Survived']].groupby(['Group'], sort=False).mean()	1	1
data_one_hot_d1.align(new_test_data_d2, join='left', axis=1)	1	1
df['IsAlone'] = df.Family.apply(lambda x: 'alone' if x==0 else 'not')	1	1
combine['Embarked'].fillna('C', inplace=True)	1	1
train_data['Survived'].astype(int).plot.hist();	1	1
cabin_index_ST.append(i)	1	1
titanic_train_df['Embarked'] = le.fit_transform(titanic_train_df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2}).astype(str))	1	1
titanic['Mod_col_1']=col_1[:,0]	1	1
te_df['Fare']=(te_df['Fare']-te_df['Fare'].mean())/(te_df['Fare'].max()-te_df['Fare'].min())	1	1
classifier.add(Dense(output_dim = 1, init = 'uniform', activation = 'sigmoid'))	1	1
"train[""Title""]=train[""Title""].map(title_map_2)"	1	1
df_titanic_test.head()	1	1
test['Fare'] = test['Fare'].fillna(test['Fare'].median()) # Removes 1 null value	1	1
"test.loc[train[""Age""] < 13, ""Child""] = 1"	1	1
"df[""FamMem""] = df[""SibSp""] +df[""Parch""]"	1	1
"combined[""group_type""] = ""0"""	1	1
dataset_train[['Title', 'Survived']].groupby(['Title']).count()	1	1
new_df['Embarked'] = new_df['Embarked'].astype('category')	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col',       'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
data.groupby(['Initials'])['Survived'].mean()	1	1
data_copy.Fare.fillna(data.Fare.mean())	1	1
train.Cabin.fillna(train.Cabin.mode()[0], inplace=True)	1	1
test_df['Survived'] = test_df.Sex_Class == 1	1	1
train.groupby(by = ['Sex', 'Pclass'])['Fare'].describe()	1	1
"data_test[""Desk""] = data_test[""Cabin""].str.extract(""([A-Za-z]+)"",expand=True)"	1	1
dataset['isCabinA'] = dataset['isCabinLetters'].apply(lambda x: 0 if x != 'A' else 1)	1	1
adults.loc[full_train_set['Sex'] == 'male']	1	1
x_train['Title'].unique()	1	1
allfeat['IsAlone'] = 0	1	1
titanic.head()   # First five rows of titanic dataset	1	1
test.loc[test['Cabin'].str.len() == 11.0, 'CabinN1'] = test['Cabin'].astype(str).str[1:3]	1	1
train_features.append(test_features)	1	1
AgeData.loc[(AgeData.Age.notnull())]	1	1
train['Fsize'].hist()	1	1
layer_dims[3], activation='sigmoid',	1	1
row['Sex'] == 'female' and row['Pclass']<= 2:	1	1
df2['Fare'].median()	1	1
Merged_data['CatFare'] = pd.qcut(Merged_data.Age, q=5, labels=False )	1	1
params['colsample_bytree'] = grid.best_params_['colsample_bytree']	1	1
"train_data[""TitleMlle""] = 0"	1	1
full.groupby(['Title', 'Pclass'])['Age'].median().to_frame()	1	1
train['Age'][train['Survived'] == 0][train['Sex'] == 1], hist = False, ax = ax2, norm_hist = True,	1	1
"full[""nnull""] = null_count(full) # Apply to full dataset"	1	1
"female_mar[""Age""].mean()"	1	1
ax[1][0].set_xticklabels(['1','2','3'])	1	1
"data[""Ticket""].value_counts()"	1	1
age_data['final_age_data'] = age_data.apply(age_vs_survival, axis = 1)	1	1
test.loc[:,['Pclass','Age','Sex','SibSp','Parch','Fare','Embarked']]	1	1
pre_features2.head(8).T	1	1
train_x['Sex'].describe()	1	1
ax[2][0].hist(survivors['Age'].dropna().tolist(), bins=nbins)	1	1
testONS.shape[0]	1	1
test['TSNE2'] = new_features.iloc[train_rows:(train_rows+test_rows-1),1]	1	1
plt.hist(plotdata*100, bins=40)	1	1
results.sort_values(by='Score with tuned parameters', ascending=False).reset_index(drop=True)	1	1
titanic['FareBand'] = pd.qcut(titanic['Fare'], 4)	1	1
df_train[['Age', 'Sex', 'Survived', 'Pclass']]	1	1
"titanic.loc[titanic[""Sex""] == ""male"", ""Sex""] = 0 #Replaces all male values with 0"	1	1
dataset['title'] = dataset.Name.apply(lambda x: x.split(', ')[1].split('. ')[0])	1	1
pd.merge(df_test, df_gender_submission, on = 'PassengerId')	1	1
cabin_only.loc[traindex, :]	1	1
Titanic_train_dataframe_p.iloc[np.random.permutation(len(Titanic_train_dataframe_p))] #to reshuffle the input dataframe. can be reversed by: df_shuffled.reset_index(drop=True)	1	1
test['FamilySize']=test['Parch']+test['SibSp']+1	1	1
hist.max() > hist_max:	1	1
test.loc[(test['Fare']>31)&(test['Fare']<=513),'NFare']=3	1	1
"train[""SibSp""].isnull().sum()"	1	1
train_X['Sex_Code'] = label.fit_transform(train_X['Sex'])	1	1
original_test['PassengerId']	1	1
data['Initials'] = data.Name.str.extract('([A-Za-z]+)\.')	1	1
Test.as_matrix()	1	1
column.astype(float)	1	1
df_test.columns.values	1	1
lastname_table.loc[lastname_table['Alive_dad_w_lastname'] > 0, 'Alive_dad_w_lastname'] = 1	1	1
titanic_df['Age'].hist(bins=40)	1	1
x['Age'] = 32	1	1
train['Embarked'].groupby(train['Embarked']).count()	1	1
missing_data.sort_values(by='Total missing',ascending=False).head()	1	1
train_data.drop('Fare',axis = 1, inplace = True)	1	1
dataset.groupby(['Pclass', 'Embarked']).Survived.agg(['count', 'sum', 'mean'])	1	1
dict_K['Random_forest'] = get_acc(x_train,y_train,classifier)	1	1
"df_perc[[""Survived"", ""fare_group""]].groupby(by=[""fare_group""]).mean().plot()"	1	1
merged['Embarked'].fillna('S',inplace=True)	1	1
titanic[['Pclass', 'Age', 'SibSp', 'Fare', 'Survived']].values	1	1
corrmat.nlargest(k , 'Survived')['Survived'].index	1	1
"train[['IsAlone', 'Survived']].groupby('IsAlone').mean().iplot(kind='bar', colors='blue', title=""Survival Rate based on Family's presence"")"	1	1
df.drop(df.columns[[8, 10]], axis = 1)	1	1
dataset['Title']   =   dataset['Title'].replace('Mme', 'Mrs')	1	1
"df.loc[(df.Survived == 1) & (df.Sex == ""male"") , :].count()"	1	1
titanic_df['Age'] = titanic_df['Age'].fillna(titanic_df['Age'].median())	1	1
"full_dataset[""Fare""] = full_dataset[""Fare""].map(lambda i: np.log(i) if i > 0 else 0)"	1	1
ax3.hist(train_data['SibSp'], bins = 20, alpha = .50,edgecolor= 'black',color ='teal')	1	1
data.Age.head()	1	1
"test['Family'] =  test[""Parch""] + test[""SibSp""]"	1	1
testData['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)	1	1
train['FamilySize']=train['Parch']+train['SibSp']+1	1	1
data_to_submit.to_csv('MLP_result_20180901.csv', index = False)	1	1
data.surname_Baclini.astype('category')	1	1
input_df['Survived']	1	1
df['Pclass_2'][df['Pclass_2'] == 1][df['Survived'] == 1].count()	1	1
"df_train[""len_name""]=namelen"	1	1
df_surname['Surname_surviving_men'] = df_surname['Surname_surviving_men'].fillna(0)	1	1
np.round(sModel.predict(np.array(test.drop('PassengerId', axis=1)))).astype(int).reshape(1,-1)[0]	1	1
testdata.ix[(testdata.Fare > 26) & (testdata.Fare <= 52.369), 'FareCategory'] = 4	1	1
spark_submitssion.to_csv(spark_submitssion_path, index=False)	1	1
rfc_prediction.astype(int)      #prediction compute from the test dataset	1	1
"train[""Famille_3""] = train[""FamilleMember""] == '3'"	1	1
nona_data.describe()	1	1
"train_ori.loc[(train_ori[""Title""] == ""Dr"") & (train_ori[""Sex""] == ""male"") ,""Title""] = ""Mr"""	1	1
df.loc[:,'Ticket Prefix'] = df['Ticket Prefix'].apply(other_prefix)	1	1
output_df.join(predict_df, how='right')	1	1
submission.to_csv('titanic_tree.csv', index=False)	1	1
data.companions.astype(np.uint8)	1	1
"test_df.drop(labels=[""source""],axis = 1,inplace=True)"	1	1
train['Age'][train['Survived'] == 1].value_counts()	1	1
"titanic_test_dataframe[""NormalizedPclass""] = titanic_test_dataframe[""Pclass""].map({1: 0.62, 2: 0.47, 3:0.24})"	1	1
pass_id.append(passenger.PassengerId)	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
"result_test5[""PassengerId""] = passenger_id_test"	1	1
"dftrain[""Age""],"	1	1
data.loc[data.Ticket=='LINE', 'Ticket'] = 'LINE0' # 4 items	1	1
"test[[""Name"", ""Master""]].head(10)"	1	1
df_train.drop(['Person'],axis=1,inplace=True)	1	1
data['Title'] =data.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\.', x).group(1))	1	1
df['Embarked'] = df['Embarked'].apply(emb)	1	1
train['Honorific']=sexTrain	1	1
all_data.drop(columns = to_drop, inplace = True, axis = 1)	1	1
data['Embarked'].fillna(data['Embarked'].median(), inplace=True)	1	1
param[0]	1	1
train['Name'].transform(extractor)	1	1
X_train.drop(['Survived'],axis=1)	1	1
tit_df_san['SibSp']+tit_df_san['Parch']	1	1
test.loc[test.Fare <= 67,'Fare'] = 1	1	1
"train_df.loc[train_df[""Age""].isnull()].groupby([""Pclass"",""Sex""])[""Sex""].agg([""count""])"	1	1
data_df['IsWoman'] = data_df['Sex'].apply(lambda x: 1 if x == 'female' else 0)	1	1
train_test_dummies.values[0:891]	1	1
scores.append(metrics.accuracy_score(y_test,y_pred))	1	1
combined_df['Age'][combined_df.Age.notnull()]	1	1
data_pruned.groupby('Title').Survived.value_counts()	1	1
df['Survived'].groupby([df['Sex'], df['Survived']]).count().unstack()	1	1
train['Family_Size']=0	1	1
testd['Agegroup']= pd.qcut(testd['Age'], 5, labels = [1, 2, 3, 4, 5] )	1	1
"train_df.groupby(""cabin_type"")[""survived""].mean().plot()"	1	1
"df_test.loc[df_test[""Title""]=='Dona',""Title""] = ""Mrs"""	1	1
"train7[""Miss""] = train7[""Name""].apply(lambda x: x.count(""Miss.""))"	1	1
train_df['Parch'].hist()	1	1
final.sort_index()	1	1
"train['Child'] = train[""Age""].apply(lambda i: 1 if i <= 17 and i > 6 else 0)"	1	1
"new_df[""Age""] = normalize( new_df[""Age""] )"	1	1
"test.drop('Age', axis=1, inplace=True)"""""""	1	1
"titanic_test[""Age""] = titanic_test[""Age""].fillna(titanic[""Age""].median())"	1	1
X_even_fewer_columns.as_matrix()	1	1
testData['PassengerId']	1	1
predictions.to_csv('csv_to_submit_v2.csv',index = False)	1	1
df['FamilySize'] = df.Parch + df.SibSp + 1 # 1 for self	1	1
train.assign(CabinLetter = train.Cabin.str.get(0)).CabinLetter.value_counts()	1	1
"tot[""Tlen""]  = tot.RT.map(lambda x: len(x))"	1	1
train_df['Title'] = train_df['Title'].replace(['Mlle', 'Ms'], 'Miss')	1	1
fare_test.drop(['Fare'],axis=1,inplace=True)	1	1
"dataframe[""Sex""] = dataframe[""Sex""].apply(lambda sex: 0 if sex == ""male"" else 1)"	1	1
titanic_test_data.Sex.fillna('0', inplace=True)	1	1
testData.groupby(['Embarked']).count()['isSurvived'].reset_index()	1	1
dataframe.drop(columns=['SibSp', 'Parch'])	1	1
test_df.replace(to_replace, None, 'Title')	1	1
"train_data[[""Pclass"",""Sex"",""Age"",""Family"",""Fare-bin"",""Embarked"",""Ticket_1"",""Ticket_2"",""Ticket_3"",""Ticket_4"",""Ticket_C"",""Ticket_P"",""Ticket_S"",""Master"",""Miss"",""Mr"",""Mrs"",""Others""]]"	1	1
dataset['Age'] = dataset['Age'].fillna(dataset['Title'].map(ageGroup))	1	1
data.loc[data['Embarked'].isnull(), 'Embarked'] = 'NoneType'	1	1
full['_AgeImputerR'] = pd.cut(full['_AgeImputer'],[0,9,18,30,40,50,100]) # Add column with range of Age	1	1
submission_test['family_size'] = submission_test.SibSp + submission_test.Parch	1	1
dt['Familysize']=dt['SibSp']+dt['Parch']+1	1	1
test_df.drop(['Person'], axis=1, inplace=True)	1	1
df['Age'].fillna(df[df['Age'].isnull()].apply(fage, axis=1), inplace=True)	1	1
train.head() #to get the sneak peak of the data	1	1
score_list.append(nb.score(x_test,y_test))	1	1
"test[""Age""] = test[""Age""].fillna(titanic[""Age""].median())   # just for simplicity"	1	1
ds.loc[ds['Title'] == title, 'Age'] = ds.loc[ds['Title'] == title, 'Age'].fillna(median_age)	1	1
X.drop(['PassengerId','Name','Ticket','Embarked'],axis=1,inplace=True)	1	1
test5['FamilySize'] = test5['SibSp'] + test5['Parch'] + 1	1	1
df_train['Fare'] = df_train.Fare.fillna(df_train.Fare.median())	1	1
em_map['Q'] = 2	1	1
input_df.isnull().sum()/tot_cnt*100	1	1
whole.drop(['SibSp','Parch','Emb','Name','Surname','Maiden','Title','Fid'],axis=1)	1	1
frame.loc[(frame.Age >16) & (frame.Age<=32) , 'Age'] = 1	1	1
"test_set.drop([""Cabin""],axis=1,inplace=True)"	1	1
"df_dums.drop(""Parch"", axis=1)"	1	1
"df.to_csv(""submission.csv"", header = True)"	1	1
df['Women'] = data['Fare'].loc[data.Woman ==1]	1	1
data['relatives'] = data.apply(lambda x: 1 if ((x.SibSp>0) & (x.Parch==0)) else 0, axis=1)	1	1
test.loc[:,feature_cols]	1	1
test3['Fare_Pclass'] = test3['Fare'] * test3['Pclass']	1	1
np.round(mlp.score(X_valid_norm, Y_valid), 4)	1	1
scaler.transform(clf_train_input)	1	1
models['set2']['cat_attrs'] = ['Pclass', 'Sex', 'Deck', 'Cabin_bool']	1	1
data[['Pclass','Sex','Age','SibSp','Parch','Embarked']]	1	1
train_df['SibSp'].value_counts(normalize=True).plot.bar(figsize=(24,6), title= 'Sibling_Spouse')	1	1
"train_df[""S""] = train_df.Embarked.apply(lambda l: np.where(l==0, 1, 0))"	1	1
df.drop(columns=['Name'], axis=1)	1	1
result_df.to_csv('predicted_survived.csv')	1	1
test['T3'] = np.array(test['Title'] == 'Mr').astype(np.int32)	1	1
"train_df[""Embarked""][829] = str('S')"	1	1
xtr.shape[0]	1	1
"df_train.loc[ df_train['Fare'] <= 7.91, 'Fare'] 						         = 0"	1	1
valid_dataset['PassengerId']	1	1
data['AgeBand'] = 0	1	1
test_ToPred['Sex'].replace(['female','male','master','miss'], [0,1,2,3],inplace=True)	1	1
X_w_target.corr()	1	1
dataset['FareBin_Code']	1	1
rawdata['Sex'].replace(['male','female'],[0,1],inplace=True)	1	1
titanic_train_dataset['Age'].std()	1	1
df.loc[ (df['Age']>16) & (df['Age']<=30) , 'AgeGroup'] = 'Young'	1	1
"df[""Cabin""] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in df[""Cabin""]])"	1	1
titanic_df['ticket_number'] = ticketnumber.values	1	1
all_data['Survived']	1	1
np.mean(test['Fare'])	1	1
Pclass_t.append(Titanic_Master.Ticket.str.slice(0,1)[i])	1	1
"df_test[""Title""]=0"	1	1
dset['Fare'].fillna(dset['Fare'].mode()[0], inplace=True)	1	1
traindf[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	1	1
X_train.drop(['Parch', 'SibSp'], axis=1, inplace=True)	1	1
embarked.var()	1	1
full_df.loc[ full_df['Embarked'].isnull(), 'Embarked_Num' ] = 1	1	1
df['Title'] = df.Name.apply(lambda x: x.split(' ')[1])	1	1
"train_df.drop(""Survived"", axis=1)[train_set_size:train_set_size+valid_set_size]"	1	1
dataset['Fare']=dataset['Fare'].fillna(dataset['Fare'].dropna().median())	1	1
data['NameTitle'].replace(['Mme.', 'Mlle.', 'Ms.'], 'Miss.', inplace=True)	1	1
dataset[['Title','Survived']].groupby('Title',as_index=False).mean()	1	1
train_ds.loc[(train_ds['Age'].isnull()) & (train_ds['Sex'] == sex) &                      (train_ds['Pclass'] == pcl), 'Age']= mean_age['train'][sex][pcl-1]	1	1
dataset.shape, testset.shape	1	1
tr['Alone'].loc[tr['Family'] > 0] = 0	1	1
MBR.iloc[:15, :].plot(x='Feature', kind='barh', figsize=(20,10), fontsize=12, grid=True)	1	1
test[['PassengerId', 'Survived']].to_csv('First_Random_Forest_Classifier.csv', index=False)	1	1
test['Age']=test['Age'].fillna(test['Age']).median()	1	1
"test_df.loc[ (test_df[""Sex""]==""male"") & (test_df[""Age""].isnull()), ""Age""] = male_mean_age"	1	1
train_data.loc[(train_data['Age']>55),'Age'] = 4	1	1
dataset['FareBin']=pd.qcut(dataset['Fare'],4)	1	1
cache_dirs.append(cachedir)	1	1
X_test['FamilySize'] = X_test['SibSp'] + X_test['Parch'] + 1	1	1
train2_df['Embarked'].fillna('S', inplace=True)	1	1
"full_df[""Name""].apply(title_estimator)"	1	1
data_out['Salutation'] = data_out['Salutation'].replace('Mme', 'Mrs')	1	1
"df_male_class[""Age""].median()"	1	1
data.loc[data['companions']>0,'alone']=1 # 1 represent individual not alone	1	1
train_df.drop(['PassengerId'],axis=1)	1	1
titanic_df['FamilyClass'] = titanic_df['FamilySize'].apply(family_class)	1	1
df_test['Age'] = df_test['Age'].astype(int)	1	1
test['Port']	1	1
data['Fare_code'] = encoder.fit_transform(data['FareBin'])	1	1
test_X['Pclass'] = test_X['Pclass'].map(p)	1	1
train_df['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)	1	1
train_df['Age_bin'].head()	1	1
ax[0].hist(train_data[train_data.Embarked == 'C'].Fare, bins=10)	1	1
"train_df.drop(""Cabin"",axis=1,inplace=True)"	1	1
train_set.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)	1	1
second_class.loc[second_class['Survived'] == 0].shape[0], second_class.loc[second_class['Survived'] == 1].shape[0]	1	1
dataset.loc[(train['Age'] > 60) & (train['Age'] <= 70), 'AgeGroup'] = 8	1	1
predictions.append(m['Model'].predict(x_normalized))	1	1
pd.pivot_table(df_train, index = ['Ageband'],values = 'Survived',columns=['Sex'])	1	1
"dataset[""Fsize""].replace(to_replace = [2], value = 'Small', inplace = True)"	1	1
np.mean(dtc_scores)	1	1
drop_elementsONS.append('isCabinLetters')	1	1
df_train[['Parch', 'Survived']].groupby(['Parch']).mean()	1	1
train['Pclass'][train['Pclass'] == 3].count()	1	1
train_test.groupby('Initial')['Age'].mean()	1	1
train['title'] = train.Name.str.extract('\, ([A-Z][^ ]*\.)',expand=False)	1	1
np.where(training_set['Age'] <= 20, 1, 0)	1	1
df_comb['TimeTravelled'] = np.where(dataset_filter_1, 4, df_comb['TimeTravelled'].values)	1	1
train.shape, test.shape, combined.shape	1	1
Each_Passenger.loc[(Each_Passenger['Parch'] > 4) & (Each_Passenger['Parch'] > 4), 'Parch'];	1	1
"train[""Embarked""], uniques = pd.factorize(train[""Embarked""])"	1	1
df[['Age','Fare', 'Family', 'Pclass']]	1	1
submission_df.to_csv('feature_engineering.csv', index=False)	1	1
df.drop(['PassengerId','NumFamily','Name', 'Sex'], axis=1)	1	1
tr['Title'] =tr['Title'].replace('Master',4)	1	1
train_df['People'] = train_df[['Age','Sex']].apply(people, axis=1)	1	1
test_data.drop(['Name','Ticket','Cabin','Fare','PassengerId'],axis=1)	1	1
evaluation_temp.append(accuracy)	1	1
data.drop(['Age', 'Fare'], inplace=True, axis=1)	1	1
test_dataset.loc[(test_dataset['Age'].isnull()) & (test_dataset['Title']=='Master'),'Age'] = 8	1	1
numerical_columns.append('Age_pred')	1	1
test_preds.eval()	1	1
data_df['Age'].median()	1	1
comb['Ticket'] = comb['Ticket'].apply(lambda x: x.replace('.','').replace('/','').lower())	1	1
Model.append('GridSearchCV')	1	1
data_train.loc[:,['Survived','Pclass']].groupby(['Pclass']).count()	1	1
new_dataFrame['Age'] = data.Age.fillna(data.Age.mean())	1	1
titanic_train_dataset['CategoricalFarePerPerson'] = pd.qcut(titanic_train_dataset['FarePerPerson'], q = 4)	1	1
dataset['FarePP'] = (dataset['Fare'] / (dataset['SibSp'] + dataset['Parch'] + 1)).round().astype(int)	1	1
join_data['Name'].iloc[10]	1	1
data['Surname_Count'] = data.apply( lambda x:  surname_count_dict.get(x.Surname), axis = 1)	1	1
deck.sort_values(['deck'])	1	1
axes[1].set(xlabel='Fare', ylabel='')	1	1
df['Fare_log'] = np.log(df['Fare'] + 1)	1	1
titanic['FamSize'] = titanic['SibSp'] + titanic['Parch']	1	1
dataset.loc[ dataset['Fare'] > 24.288, 'Fare'] = 3	1	1
scores.append([c[0], score])	1	1
ensemble_pred.append(y_pred)	1	1
"train[""Name""] = le.fit_transform(train[""Name""].fillna('0'))"	1	1
combined_df['Deck'] = combined_df['Cabin'].apply(lambda x: x[0])	1	1
"train['toddler'] = train[""Age""].apply(lambda i: 1 if i <= 6 else 0)"	1	1
axes[1].hist(input_df['Age'], bins=25)	1	1
dfTrain.fillna(dfTrain.mean(), inplace=True)	1	1
test.drop('training_set', axis=1)	1	1
dataset['Embarked'] = dataset['Embarked'].fillna(value=3)	1	1
train.loc[train.Embarked.isnull(),'Embarked'] = train.Embarked.mode()	1	1
df.loc[(df['Fare']>14.454)&(df['Fare']<=31),'Fare_cat']=3	1	1
pd.isnull(avg_age):	1	1
"data.groupby(""Name"").size()"	1	1
data['Embarked'] = data['Embarked'].map(ports)	1	1
temp.iloc[:] = np.arange(len(temp))	1	1
spines['top'].set_visible(False)	1	1
test.drop(['Ticket','Cabin'],axis = 1);	1	1
scores.append( best_logit.score(X_test, y_test) )	1	1
np.min(data[:,i]), np.max(data[:,i])	1	1
"result.to_csv(""gaussian.csv"", index=False)"	1	1
axes.boxplot(age_sal_grouped, patch_artist=True)	1	1
test['sex_T'] = raw_test['sex_T']	1	1
titanic_full_train.describe(include='all')	1	1
"_df[""title""]         = _df[""_name""].apply(lambda i : i[1])"	1	1
tr_df[['Sex', 'Age', 'SibSp', 'Parch','Fare', 'Mr', 'Mrs', 'other', 'Q', 'S',2,3]]	1	1
"df_female.groupby(""Embarked"").get_group(port)[""Pclass""].value_counts()"	1	1
submission.to_csv('titanic_keras_cs.csv', index=False)	1	1
df.groupby('key2').transform(demean)	1	1
titanic['Name'] = df_train['Name']	1	1
concat_set['Age'].isnull().sum()	1	1
train.drop(labels='Cabin',inplace=True,axis=1)	1	1
df['GrpSize2'] = df['GrpSize2'].astype(str) #convert from category dtype	1	1
test.loc[(test['Fare']>350) & (test['Fare']<=400),'FareCategorical'] = 7	1	1
"factors[""c_pre""]=1"	1	1
"df[""Ticket_Prfx""] = extracted_tk_pref"	1	1
dt_train.drop('Age', axis=1, inplace=True)	1	1
cabin.head(10)	1	1
titanic_dmy.tail()	1	1
DataSetGender.isnull().sum()	1	1
"titanic_train[""Name""].value_counts()"	1	1
train.drop(columns=['Survived'], inplace=False).as_matrix()	1	1
df_all['Family_size'] = df_all['Parch'] + df_all['SibSp']	1	1
X2['Age'][i] = age_avg	1	1
score.append(svc.score(X_train, y_train))	1	1
train_d.drop(columns={'Name','Ticket','Fare','Cabin','Embarked','Parch','SibSp'})	1	1
df.pivot(index=index, columns=columns, values=values)	1	1
dataset['FareBand'], fare_bins = pd.qcut(dataset['PassengerFare'], num_fare_bins, retbins=True)	1	1
dataset[['FareBand','Survived']].groupby(['FareBand'],as_index=False).mean()	1	1
train_df_raw.copy()	1	1
aged_df['Survived'].mean()	1	1
X.loc[:,'Fare'].max(axis=0)	1	1
test_df['Embarked'] = pd.Categorical(test_df['Embarked'])	1	1
titanic_df[['Age', 'Fare']] = std_scale.transform(titanic_df[['Age', 'Fare']])	1	1
"test[""Cabin""][test[""Cabin""] == ""A""] = 0"	1	1
test['Title'].replace(['Mme'], 'Mrs', inplace=True)	1	1
data.surname_Moor.astype('category')	1	1
x.drop(['PassengerId','Survived','Name','Ticket'],axis=1)	1	1
df['income']=df['apts']*2+df['apts2']*1.5+df['bonus']	1	1
dataset['Title'] = dataset['Title'].replace('Master', 1)	1	1
all_predictions.append(run_algorithms(train, test, titanic))	1	1
df_result.shape	1	1
train.iloc[:n_valid_rows].copy()	1	1
"test[""Embarked""].loc[test[""Embarked""] == ""Q""] = 2"	1	1
data['Age'] = data['Age'].fillna(0)	1	1
df_train.drop(['Survived'], axis = 1)	1	1
"data[""Title""] = data[""Title""].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
train_X['Survived']	1	1
manData['Age'].fillna(medianManAge, inplace=True, axis=0)	1	1
SurvivedFareData['Fare'].mean()	1	1
age_rd['Age']=age_rd['Age'].apply(lambda x: 10*(x//10))	1	1
train['name_category'].value_counts()	1	1
"train[""Sex""] = train[""Sex""].apply(lambda x: target[x])"	1	1
"test.loc[test[""Sex""] == ""female"", ""sex_c""] = ""1"""	1	1
X_val_ch['Survived_pred'] = y_pred_val	1	1
df_test_output.to_csv('baseline_titanic_procedure.csv', index = False)	1	1
test_data['Cabin'].apply(lambda x: len(str(x)))	1	1
test.dropna()	1	1
axes[0].set_title('Family Size counts')	1	1
dataset.loc[ dataset['Age'] > 64, 'Age'] = 6	1	1
one_hot.add_prefix(col)	1	1
data.loc[(data.passenger_fare<6.237) & (data.passenger_fare>=0.0) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Letter'] =  data[(data.passenger_fare<6.237) & (data.passenger_fare>=0.0) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
"new_df[""Fare""] = normalize( new_df[""Fare""] )"	1	1
importances.sort_values(by='importance', ascending=False)	1	1
"dat[""Age""] = pd.cut(dat[""Age""],[-2,0,6,18,25,50,100],labels=False)"	1	1
titanic_train.drop(titanic_train.columns[[3,8]], axis=1)# The name column is not really going to help in predicting, so droping it from the dataframe.	1	1
df.describe(include=['object', 'category']).T	1	1
X_full['Sex'] = full['Sex'].map( {'female': 1, 'male': 0} )	1	1
class_group.agg(['sum', 'count'])['Survived']	1	1
col_short.append(col)	1	1
data.Parch.astype(float)	1	1
"test_df[""YourCoin""].tail(5)"	1	1
full['TicketFare'].quantile(quantile_list)	1	1
train_80['Survived']	1	1
X_test['Age'] = X_test['Age'].fillna(X_train['Age'].median())	1	1
df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])	1	1
"res_df.to_csv(""submission_draft.csv"",index=False)"	1	1
train.drop(['Name','Ticket'],axis=1,inplace=True)#axis=1 drops a col. default drops rows.	1	1
plt.hist(data[data['Survived'] == 1].Sex, color = 'r', alpha = 0.4, label = 'after')	1	1
merged.loc[merged['Group'] == 'Masters in Pclass 1&2 or small families', 'Predict'] = 1	1	1
full_dataset.drop(['Name'],axis=1,inplace=True)	1	1
"age_did_not_survive.plot.hist(fc=(1, 0, 0, 0.5), normed=1, label=""Did not Survive"")"	1	1
trainData.dtypes	1	1
train_df.drop(['Name','Ticket','Survived','PassengerId'],axis=1)	1	1
combined_data['Fare'] = combined_data.apply(lambda row: fill_fare(row) if np.isnan(row['Fare']) else row['Fare'], axis=1)	1	1
data_replaced_ages.loc[data_replaced_ages['Cabin'].notna(), 'Cabin_Status'] = 1	1	1
df.iloc[891:,:].drop('Survived',axis=1)	1	1
"train_data[[""Age"", ""Survived""]].groupby(['Age'],as_index=False).sum()"	1	1
cabin[0]=='A'	1	1
train_df0.groupby('Pclass').count()	1	1
titanic['IsCabin'].value_counts()  # Calculate values in 'IsCabin' feature	1	1
data.loc[data.Cabin.str[0] == 'T', 'Cabin'] = 8	1	1
survived_data.loc[survived_data['Sex']=='female',:]	1	1
df.loc[((df.Cabin == 0) & (df.Pclass == 3)) , 'Ca_Cl'] = 3 #poor no cabin	1	1
"df_titanic['Title'] = df_titanic[""Title""].astype(int)"	1	1
train['Person'] = train[['Age', 'Sex']].apply(check_child, axis=1)	1	1
df.groupby('A')['B'].mean()	1	1
df2['FamilyAllDied'] = 0	1	1
test_ds['Embarked']= test_ds['Embarked'].map({'C': 0, 'Q': 1, 'S': 2}).astype(int)	1	1
dataset['Title'] = pd.Series(title)	1	1
ada_rfecv.transform(ada_rfecv_train)	1	1
submission.to_csv('final_submission.csv', index=False)	1	1
"df_tmp.loc[df_tmp.TicketGroupSize == 1, ""Survived""] = df_tmp[""s_wo_tgs""]"	1	1
app_train.align(app_test,join='inner', axis = 1)	1	1
plt.hist(train_data.Survived[pd.Categorical(train_data.Embarked).codes==0], color = 'red', label='')	1	1
died_class_1.shape[0]	1	1
data_frame['SmallFamily'] = data_frame['FamilySize'].map(lambda s: 1 if 2<=s<=4 else 0)	1	1
"train[[""Cabin"", ""Survived""]].groupby(['Cabin'], as_index=False).sum().sort_values(by='Survived', ascending=False)"	1	1
train_df.groupby(['Sex','Embarked'])['Survived'].sum()	1	1
"training[""Age""] = scaler.fit_transform(ages_train)"	1	1
dataset['Name'] = dataset['Name'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
new_train_data.values	1	1
data_train['Embarked'].loc[data_train['Survived']==1].value_counts()	1	1
df.pivot_table(values = 'Survived', index = 'Embarked').Survived.plot.bar()	1	1
df3['Sex']	1	1
train.drop('Ticket', axis = 1, inplace = True)	1	1
attr.Fare.fillna(attr.Fare.median(skipna=True))	1	1
"_df[""name_count""] = _df.name_last.apply(lambda i : name_count[i])"	1	1
df['mean'] = data.mean(axis=1)	1	1
axes[9].cla()	1	1
gender_submissionData['Survived'] = pd.DataFrame(predictions)	1	1
agetestdf['Age']=  regr.predict(ageX_test)	1	1
"train_d['Title'][i]=(train_d['Name'][i].split("","")[1]).split(""."")[0]"	1	1
p_s.loc[ (p_s['Pclass']==1) & (p_s['Age'] < 18) ,'Survived']=1 # set 1st children survive to 1	1	1
dataset.loc[(dataset['Age']>32)&(dataset['Age']<=48),'Age_band']=2	1	1
df['Prediction'] = cls_random.predict(df.loc[:, ['Fare', 'Cabin', 'Sex', 'Age', 'M1_xgboost', 'M2_ada', 'M3_gradient']])	1	1
scaler.transform(age_fare_test)	1	1
y_tr.values.reshape(y_tr.shape[0], 1)	1	1
all_data['Title'].unique()	1	1
"data[""Sex""] == 0"	1	1
"data[""Sex""] == 1"	1	1
train_data_df.drop('Survived',axis=1).append(test_data)	1	1
titanic_test_df.Age.loc[titanic_test_df['Title'] == 'Mr'] = titanic_test_df.Age.fillna(titanic_test_df[(titanic_test_df['Title'] == 'Mr')]['Age'].mean())	1	1
data.drop(data_numerical.columns, axis=1)	1	1
data['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.2f%%',ax=ax[0],shadow=True,colors = ['#96D38C', '#FEBFB3'])	1	1
submission.to_csv('./my_first_submission_2.csv', index=False)	1	1
train_set.groupby('Pclass').mean()['Fare'].plot(kind='bar', figsize=(12, 7), ax = ax);	1	1
test.isna().any()	1	1
accuracy_df.loc[k, 'Param1'] = clf.best_params_['n_estimators']	1	1
scores_v3.append(acc.mean())	1	1
test.loc[(test['Sex'] == 0) & (test['isAlone'] == 0), 'gender_alone'] = 2	1	1
"train.loc[i,""Last Name""] = l[2].strip()"	1	1
pred.eq(target.data.view_as(pred)).sum()	1	1
trainSet['Survived'][trainSet['Sex'] == 'female'].value_counts()	1	1
age[['Age_Categorized_Guess', 'Survived']].groupby(['Age_Categorized_Guess'], as_index=False).mean().sort_values(by='Age_Categorized_Guess', ascending=True)	1	1
full_data['Sex'] = full_data['Sex'].astype('category')	1	1
df.Name.head(10)	1	1
dataset['Fare'] = dataset['Fare'].fillna(dataset_train['Fare'].median())	1	1
titanic['Age'][(male)&(Pclass1)&Family3] = titanic['Age'][(male)&(Pclass1)&Family3].fillna(30)	1	1
titanic_df.groupby('Salutation').mean()	1	1
train[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values('Survived',ascending=False)	1	1
data.Fare.hist(bins=50)	1	1
my_pipeline.transform(X_test_num)	1	1
Df['PREULT'].plot(figsize=(10,5))	1	1
"dataset.loc[dataset[""Title""] == ""Master"", ""Title""] = 3"	1	1
reviews['points'].plot.hist()	1	1
df[['Sex','SibSp','Parch','Fare','Age','Embarked']]	1	1
dataframe.loc[dataframe['Age'].notnull(),features]	1	1
X_train1['Sex']	1	1
final_score_gs.append(model_1.score(x_te, y_te))	1	1
"data.groupby(data[""TitleClean""]).size()"	1	1
"train_data.loc[train_data[""Pclass""] == 2, ""PclassTwo""] = 1"	1	1
train.at[i, 'Sex'] = 1	1	1
train.at[i, 'Sex'] = 0	1	1
"train_df.drop([""Cabin"", ""Ticket""], axis = 1)"	1	1
X.loc[(X['Fare Group'] > 14.454) & (X['Fare Group'] <= 31), 'Fare Group']   = 2	1	1
"train_data[""Sex""].replace([""male"",""female""], [1,0], inplace=True)"	1	1
encSex.transform(train.Sex.values.reshape(-1,1))	1	1
melb_data.describe()	1	1
loadedPipelineModel.transform(test_df)	1	1
X['Age'].fillna(X['Age'].mean(), inplace = True)	1	1
Submission.to_csv('tunedensemblesubmission04.csv',sep=',')	1	1
train.join(pclass_frame)	1	1
y_train.plot.hist(alpha=0.75)	1	1
"dataset[""Age""].fillna(dataset.groupby(""Title"")[""Age""].transform(""mean""),inplace= True)"	1	1
"testdat.drop(""Parch"",axis=1,inplace=True)"	1	1
"train_data_test.drop(""Survived"",axis=1)"	1	1
data_titanic_mod1.replace(col_del1, 1)	1	1
df['Fare_ind'] = df['Fare_ind'].fillna(df['Fare_ind'].dropna().median()).apply(lambda x: np.log(x) if x > 0 else 0)	1	1
y.shape = (m, 1)	1	1
predictors_test.isnull().sum()	1	1
"train_data[""CabinLetterB""] = 0"	1	1
df.loc[df['Family'] >= 1, 'HasFamily'] = 1	1	1
"nn_submit_dataframe[""Survived""] = nn_test_Y"	1	1
trainPCA2['11'] = trainPCA['Pclass2']	1	1
training_set['Age'] = training_set.Age.fillna(training_stats.loc['mean', 'Age'])	1	1
df_full.loc[mask_group & mask_noage, 'Age'] = median	1	1
pred_table_lr_2_test.drop('Prob',axis=1)	1	1
dataset['FareBand'] = pd.cut(dataset['Fare'], bins=[0, 8, 15, 32, 100, 600], labels=['Very Low', 'Low', 'Medium', 'High', 'Very High'])	1	1
data['Title'] = data.Title.astype(int)	1	1
train.pivot_table(index='Parch', columns='Survived', aggfunc='count').Age	1	1
data['name_title'] = data['Name'].apply(lambda x: x.split(',')[1] if len(x.split(',')) > 1 else x.split(',')[0]).apply(lambda x: x.split()[0])	1	1
"df_test[""Fare""] = df_test[""Fare""].fillna(df_train[""Fare""].mean())"	1	1
all_data.loc[(all_data['Age'] > 32) & (all_data['Age'] <= 48), 'Age'] = 2	1	1
"data[""Sex""] = data[""Sex""].map({""female"": 1, ""male"": 0})"	1	1
df_data['Has_Age'] = df_data['Age'].isnull().map(lambda x : 0 if x == True else 1)	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',     'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
test_df.drop(['Name','Ticket','Cabin'], axis=1)	1	1
train['Age'].fillna((train['Age'].median()), inplace=True)	1	1
data['Deck'] = data['Cabin'].astype(str).str[0]	1	1
"train[""Ticket""][train[""FamilyMembers""]==10].iloc[0]"	1	1
"train_df[""percentage""]=train_df[""percentage""].astype(""float64"")"	1	1
models['set1']['cat_attrs'] = ['Pclass', 'Sex', 'Deck', 'Cabin_bool']	1	1
perf.append(getMetrics(y_test, y_pred, 'Random Forests'))	1	1
df.iloc[:891]	1	1
"train[[""mrs"", ""Survived""]].groupby(['mrs'],as_index=False).mean()"	1	1
a.append(pd.Series(metrics.accuracy_score(prediction, test_Y)))	1	1
all_data.Age.shape[0] - num_nona  # 空值个数	1	1
titanic_train_dataset[['Age']].describe()    #Re-Check that we have fill all of missing data	1	1
titanic[['PassengerId','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Survived']]	1	1
model.add(Dense(64, input_dim=X.shape[1], kernel_initializer='normal', activation='relu'))	1	1
"submission.to_csv(""titanic_submission.csv"",index=False)"	1	1
"df.drop([""Survived"",""Ticket_No"",""Fare"",""Age""],axis=1)"	1	1
submission.to_csv('Titanic Submission.csv', index = False)	1	1
test_dataset['Title'] = test_dataset['Title'].replace('Ms','Miss')	1	1
"all_df['Name'].apply(lambda x: str.split(x, "","")[0])"	1	1
df['Title'] = df['Title'].apply(lambda x: 'Noble_Lady' if x in ['Dona', 'Lady', 'the Countess', 'the'] else x)	1	1
df.loc[i, 'Ticket']	1	1
sex_val_xt.div(sex_val_xt.sum(1).astype(float), axis=0)	1	1
dataset['Cabin'] = dataset['Cabin'].fillna(0)	1	1
"train[""Embarked_1""] = train[""Embarked""] == 'C'"	1	1
raw_test['Title'] = raw_test['Title'].replace('Mlle', 'Miss')	1	1
data['SortFare_2'] = 0	1	1
plt.hist(ageHasNoSibs)	1	1
train.describe() #Numeric	1	1
df_full['Title'] = df_full['Title'].replace('Ms', 'Miss')	1	1
df['Deck'] = df['Cabin'].apply(getdeck)	1	1
res_df_solver_max_iter['Val_acc_'+solver_list[i]] ,	1	1
testing_set.drop(['PassengerId','Name','Ticket'], axis=1)	1	1
"test_df[""Title""] = test_df[""Name""].apply(title_mapper)"	1	1
train_one_hot_encoded.shape	1	1
original_test['Age'].replace(np.nan, age_mean, inplace=True)	1	1
train['TitleEn'] = train['Title'].map(lambda x : title_mapping(x))	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Lady"", ""Mrs"")"	1	1
training_data['Title'] = training_data['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	1	1
test.loc[(np.isnan(test['Age'])) & (test['Title'] == row['Title']), 'Age'] = np.random.randint(row['Low'], row['High'], size = count_nan_test)	1	1
dataset_df[['Age','Title']].groupby('Title').median().values	1	1
submit.to_csv('submission.csv', index=False)	1	1
train.corr(), cmap=plt.cm.bwr, annot=True,	1	1
train_df[['FamilySurvival', 'Survived']].groupby(['FamilySurvival'], as_index=False).mean()	1	1
data_test.Sex.replace(['male', 'female'], [0, 1], inplace=True)	1	1
train.Embarked.dropna().value_counts().index[0]	1	1
classifier.add(keras.layers.Dense(units = 8, kernel_initializer = 'lecun_uniform', activation = 'relu'))	1	1
"train['Cabin'].fillna(train.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	1	1
df['Age'].iloc[i] = age_med	1	1
"dataset[""Embarked""].fillna('S' , inplace = True)"	1	1
f_Single.isnull()	1	1
"train_kaggle.describe(include=""all"")"	1	1
casualities.describe()	1	1
titles.keys():	1	1
model.add(Dense(15, input_dim=11, activation= 'relu'))	1	1
np.sum(costs_p)/m	1	1
x.values, df_tsne[df_tsne.Survived==1].y.values,	1	1
"dataset.loc[(dataset[""Fare""] > 31), ""Fare_cat""] = 3"	1	1
ax[0].set_title('Pie')	1	1
test[['Alone']]	1	1
trainTitanic.dtypes	1	1
"df_hist['age'].plot.hist(ax=ax, bins=20, label=""{}"".format(i_s), color=colors[i_s], alpha=.3)"	1	1
"test[[""Pclass"", ""Sex"", ""Age"", ""Fare"", ""Embarked""]]"	1	1
data.loc[data['FamilySize'] == 1, 'isAlone'] = 1	1	1
df.loc[(df['Age'] > 80), 'Age'] = 4	1	1
train_d['Sex']=le_tr.fit_transform(train_d['Sex'])	1	1
data['Embarked'] = data['Embarked'].astype('category')	1	1
pred_table_lr_1['Pred'] = pred_table_lr_1['Prob'].map(lambda x: 1 if x > 0.5 else 0)	1	1
df[['Pclass','Sex','SibSp','Parch','Fare','Age','Embarked']]	1	1
l2_delta.dot(syn[1].T)	1	1
df_train[['tmpt_AgeBand','Survived']].groupby(['tmpt_AgeBand'], as_index=False).mean().sort_values(by='tmpt_AgeBand',ascending=True)	1	1
data['Age'] = data['Age'].interpolate()	1	1
merged.loc[(merged['Age']>48)&(merged['Age']<=64),'Age_band']=3	1	1
temp_df['Ticket_char'] = ''	1	1
"models.append((""LogisticRegression"",LogisticRegression()))"	1	1
"train_df.loc[train_df[""Age""].isnull()][['PassengerId','Sex','Name_key','Pclass','Parch']]"	1	1
"related_people.loc[related_people[""PassengerId""]==1037,""RGroup""]=""Vander Planke_M"""	1	1
titanic.drop('Sex',axis=1,inplace=True)	1	1
"test[""Cabin_letter_T""] = 0"	1	1
full['Age'].hist();	1	1
"titanic_df[""Age""] = titanic_df[""Age""].astype(int)"	1	1
titanic_testxdf.drop('Cabin', axis=1)	1	1
df.loc[df['MissingAge'] == 1, 'Age'] = age_fill	1	1
"confirm_data.drop([""Survived"",""Age""], axis = 1)"	1	1
sub_5.to_csv('sub_5_6.csv', index=False)	1	1
all_data['Age'] = all_data['Age'].apply(discretize_age).astype(int)	1	1
"full[""Family""] = full[""Family""].apply(assign_size)"	1	1
titanic_train_dataframe.head()	1	1
titanic[['Pclass', 'Fare']].groupby('Pclass').mean()	1	1
dfnum['AgeGrp'] = df['AgeGrp'].astype(str) #convert from category dtype	1	1
data.tail( 142 )	1	1
test['IsAlone']=0	1	1
train_df.groupby(['Deck'])['Survived'].aggregate('count').reset_index()	1	1
df_train.Embarked.mode()[0]	1	1
sc.transform(x_cv)	1	1
x.append(np.array([0, 1]))	1	1
df_test.drop(['Embarked'], axis=1)	1	1
test_df.drop(['Pclass'], axis = 1, inplace=True)	1	1
dataTrain_copy.head(10)	1	1
encoded_train_data.reindex(sorted(encoded_train_data.columns), axis=1)	1	1
data_frame.groupby(by=['Pclass', 'Embarked']);	1	1
aveAge.at['male', 'Age']	1	1
np.empty((NFOLDS, ntestNMD))	1	1
df_corr.drop(labels=['PassengerId', 'IsTrain'], axis=1, inplace=True) # Drop from columns	1	1
y.append(minor(x))	1	1
data['Age'] = data['Age'].fillna(data['Age'].median()) # Filling null values of age as median age	1	1
"test_df[""Fare""].fillna(test_df[""Fare""].mean(), inplace=True)"	1	1
train.groupby(variable)[variable].count().sort_values().tail(1).index.values[0]	1	1
"test.drop(columns=['PassengerId', ""Pclass"", 'Name', ""Sex"", ""Age"", 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', ""Embarked"", ""Age_Categories"", 'SibSp_Categories', 'Parch_Categories'])"	1	1
costs.append(cost)	1	1
dfTest.drop(dfTest[dfTest.Survived.notnull()].index)	1	1
dataset.set_value(rowIndex, 'Age23to29', 0)	1	1
test_df['Fare']  = test_df['Fare'].fillna(combined_Data['Fare'][combined_Data['Pclass'] == 3].mean())	1	1
results.items():	1	1
df_test.drop(['FamilySize','SibSp','Parch'], axis=1)	1	1
np.round(svc_linear.score(X_valid_norm, Y_valid), 4)	1	1
"df[""Age""] = pandas.cut(df[""Age""], np.linspace(0,80,9)).factorize()[0]"	1	1
"test[""Title_master""] = test[""Title""] == 'Master'"	1	1
train_dataset['Family']= train_dataset['SibSp']+train_dataset['Parch']+1	1	1
dataset.loc[ dataset['Deck'] > 6, 'Deck'] = 3	1	1
dataset.loc[(dataset['Age'] > 50) & (dataset['Age'] <= 60), 'Age']        = 4	1	1
cabin.Cabin.sample(10)	1	1
df['Person_Class'] = df.apply(person_class,axis=1)	1	1
output.to_csv('submission_nn.csv', index=False)	1	1
"namelen.append(len(df_train[""Name""][i]))"	1	1
np.stack(titanicDF.apply(preprocessRow,axis=1).values)	1	1
train_df['Cabin'].unique()	1	1
df_combined['Title'] = df_combined['Title'].replace(['Lady.', 'Countess.','Capt.', 'Col.','Don.', 'Dr.', 'Major.', 'Rev.', 'Sir.', 'Jonkheer.', 'Dona.'],'Rare')	1	1
data.Cabin.fillna('9', inplace=True)	1	1
"combined_df[""Title""].value_counts()"	1	1
corrmat.nlargest(10, 'Survived')['Survived'].index	1	1
df_var3['cabin_is'].values[i-1] = '0'	1	1
dataset['Sex'] = dataset['Sex'].map({'female':0,'male':1}).astype(int)	1	1
model_data.head()	1	1
df.drop((df.index[pd.isnull(df['Embarked'])])) #61,829	1	1
dfTrain['Embarked'].value_counts()	1	1
model.add(Dense(28, input_dim=X.shape[1], activation='relu'))	1	1
df[['Person_Class','Group_Category','Survived','Pred_survived']].groupby(['Person_Class','Group_Category']).mean().reset_index()	1	1
x_test['Title_Misc'] = test_df['Title'].apply(lambda x: 0 if x in ('Mr', 'Mrs', 'Miss', 'Master') else 1)	1	1
train.groupby('Sex')['Age'].agg(['size', 'count', 'mean'])	1	1
d['Fare'].fillna(d['Fare'].median(), inplace = True)	1	1
scores.append(np.array(onescore).mean())	1	1
dataset.loc[dataset.Name.str.contains('Miss') & dataset.Age.isnull(), 'Age'] = miss_ave	1	1
individual[1] = toolbox.attr_Gamma()	1	1
test.drop(columns=['Survived'], axis=1, inplace=False)	1	1
df.loc[index,'littleFamily']=1	1	1
men_women_group[['Survived','Sex']],index='Survived',columns=['Sex'],	1	1
"cvs[""Estimator""]=i"	1	1
stats['metric'] = [em]	1	1
output1.head()	1	1
"df_train[""title_others""]=df_train[""title""].isin(['countess.', 'lady.', 'master.', 'dr.', 'don.','jonkheer.','rev.','major.','sir.','col.','capt.']).astype('uint8')"	1	1
final_training_df.drop('Survived', axis=1).values.reshape(-1, 12)	1	1
data_test.drop(['Cabin'], axis=1)	1	1
dataset.loc[(dataset.Age.isnull())&(dataset.Initial=='Master'),'Age']=5	1	1
test['Title']=test['Title'].replace('Mme', 'Mrs')	1	1
test_data.drop(['PassengerId','Name','Cabin','Ticket','Embarked','SibSp','Parch','Pclass','Age'], axis=1)	1	1
"result.to_csv(""svc.csv"", index=False)"	1	1
"test_original[""PassengerId""],"	1	1
age.var()	1	1
dataset['Initial'] = dataset.Name.str.extract('([A-Za-z]+)\.')	1	1
"coeff_df[""Correlation""] = pd.Series(linear.coef_[0])"	1	1
train_data[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)	1	1
train.iloc[:,1:9]	1	1
"ranks[""RF""] = ranking(rf.feature_importances_, colnames);"	1	1
"axes[0].set_title(""Survival Rate Based on Gender"")"	1	1
useful.append('male')	1	1
titanic.loc[titanic['Embarked']=='C','Embarked']=1	1	1
train.drop('leftRight',1)	1	1
ax[1].set_title('Survival Distribution as per Embarked Status')	1	1
sub['Survived'] = predictions	1	1
sc.transform(test_X)	1	1
allfeat.drop(columns=['Name']) #column no longer needed	1	1
df_train['Age'].median()	1	1
test.drop(['SibSp','Parch'], axis=1)	1	1
Train_Master['Age'].dropna().append(Test_Master['Age'].dropna())	1	1
test['is_female'] = test.Sex.apply(lambda sex: 1 if sex == 'female' else 0)	1	1
x.Age.fillna(value = avgAge)	1	1
df['Fare'].loc[(df['Pclass']==3) & (df['Embarked']=='S')]	1	1
df['M_C3'] = df['Sex_male'] * df['Pclass_3']	1	1
"train_dat.at[i,""Ticket_g""] = ""A5"""	1	1
test.Age.astype(float).fillna(test['Age'].median())	1	1
test7['Age'] = pd.cut(test7['Age'], 5, labels=False)	1	1
tdata.head()	1	1
test['Fare'].fillna(value = test['Fare'].median(), inplace = True)	1	1
df.drop(columns=['Name'])	1	1
data_raw.copy(deep= True)	1	1
train_df.groupby(['title']).size().index.isin(['Master', 'Miss', 'Mr', 'Mrs', 'Rare']).any():   # エラー防止のため	1	1
"test['title']=test['Name'].str.split("","", expand = True)[1].str.split(""."",expand = True)[0]"	1	1
df['FamilySize']=df.Parch+df.SibSp+1	1	1
combined_data.iloc[:891].groupby(['Pclass','Embarked'])	1	1
"X_test.drop(labels=[""Survived"",""PassengerId""], axis=1, inplace=True)"	1	1
"pd.pivot_table(train, index=""Title"", values=""Survived"")"	1	1
Freq_title.T.squeeze()	1	1
dataset_t.values	1	1
"train_data[""Age""][np.isnan(train_data[""Age""])] = generated_ages"	1	1
age_unknown['fill_up_type'] = 'unknowns'	1	1
"i.loc[i[""Title""] == ""Sir."",[""Title""]] = ""Mr."""	1	1
fld.astype(np.int64) // 10 ** 9	1	1
preds['predict']	1	1
train_model.head()	1	1
"sns.boxplot(x=""Survived"", y=""Age"", data=train_df,ax=axesbi[1,1])"	1	1
dataset['Title'] = dataset['Title'].replace(['Sir','Countess','Lady'],'Royal')	1	1
"titanic_df.drop(""Cabin"", axis=1, inplace=True)"	1	1
titles['Title'] = titles['Title'].replace('Ms', 'Miss')	1	1
train.isnull().values.any()	1	1
results['PassengerId'] = test_id	1	1
"t2[""Embarked""] = embarked_encoded"	1	1
estimators_list.append(('SVC', svc))	1	1
titanic_df.drop(['Name','Ticket','Salutation'], axis=1)	1	1
data.Without_Age.astype(np.uint8)	1	1
train_df.drop(['Survived', 'PassengerId'],axis=1)	1	1
submission.to_csv('titanic_mvp_4_19_04_2018.csv', index=False)	1	1
dataset['has_cabin_T'] = dataset['Cabin'].notnull()	1	1
np.dot(layer_1.T,layer_2_delta) # HxB X Bx1 ~ Hx1	1	1
"test[""istrain""] = 0"	1	1
df_test.join(fare_one_hot_test)	1	1
test['Age'][np.isnan(test['Age'])]=rand2	1	1
train.dropna().get(['Survived','Cabin'])	1	1
train.tail() #print last 5 rows of train dataframe from top	1	1
title['Survived'] = combined_df.Survived	1	1
accuracies_lr.mean()	1	1
dataset['Parch'][i]== 0:	1	1
y_train.values.ravel()	1	1
new_df['Child'] = new_df.Age.fillna(new_df.Age.median()).map(lambda x: int(x <= 16))	1	1
test_df.groupby('ID',as_index= False).agg(['count', 'mean', 'max', 'min', 'sum']).reset_index()	1	1
test_data['isAlone'] = test_data['FamilySize'].map(lambda x: 1 if x == 1 else 0)	1	1
my_gender.info()	1	1
dataset[['Name', 'AgeBand', 'Pclass', 'SibSp', 'Parch', 'Sex']].copy()	1	1
dataset.loc[(dataset['Fare'] > Fare_labels[i]) & (dataset['Fare'] <= Fare_labels[i+1]), 'Fare'] = i	1	1
test.drop('SibSp', axis=1, inplace=True)	1	1
combined.Age.astype(int)	1	1
test_set.drop('SibSp', axis=1, inplace=True)	1	1
mean_age['test'][sex][pcl-1]= test_ds[(test_ds['Pclass']==pcl) &                                      (test_ds['Sex']==sex)]['Age'].mean()	1	1
data_categorical_imput.astype('str')	1	1
titanic.loc[titanic['Title']=='Mlle', 'Title']='Miss'.strip()	1	1
training_data[0:83], training_data[83:len(training_data)]	1	1
train['Survived'] = train['Survived'].astype(int, copy=False)	1	1
"df_train.pivot_table(""Name"", ""Age"", ""Survived"", ""count"").plot(kind=""bar"", stacked=True, figsize=(20, 10))"	1	1
new_test['Fare'].fillna(new_test['Fare'].mean(), inplace=True)	1	1
cabin_index_NA.append(i)	1	1
train_df['Age'] = X_df['Age']	1	1
train_df.drop(drop_list,axis=1)	1	1
model_data.loc[(model_data.Pclass == 2)&(model_data.Title == 4)&model_data.Age.isnull(),('Age')] = 41	1	1
"scalerall_test_df.rename(columns={0:""Pclass"",1:""Sex"",2:""Age"",3:""Fare"",4:""Embarked"",5:""Family""})"	1	1
dataset['Has_Cabin'] = dataset['Cabin'].apply(lambda x: 0 if type(x) == float else 1)	1	1
data['Embarked'].fillna(value=mode_embarked, inplace=True)	1	1
titanic_data.loc[ titanic_data['Fare'] <= 7.91, 'Fare'] = 0	1	1
df['Has_Cabin'] = df['Cabin'].apply(lambda x:0 if type(x)==float else 1)	1	1
train_df['SibSp'].hist()	1	1
xy_train.join(Alone)	1	1
dfTest['Age'] = dfTest['Age'].fillna(dfCombined['Age'].mean())	1	1
test.iloc[:,1:].values	1	1
test_df.drop(['Name','Ticket', 'Cabin'], axis=1)	1	1
"test_set[""Cabin""].fillna(test_set.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	1	1
train.loc[:,'Survived'].as_matrix(columns=None)	1	1
"train_df[""EmbarkedInt""] = train_df[""Embarked""].map({""S"": 0, ""C"": 1, ""Q"": 2}).astype(int)"	1	1
df_results['PredProba'] = np.round(pred_proba,4)	1	1
results.describe()	1	1
"dataset[""Age""] = scaler.fit_transform(ages_train)"	1	1
df['Sex'] = df['Sex'].map(sex_mapping)	1	1
csv.corr()[col]	1	1
dataset.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)	1	1
"train_data[[""Sex"", ""Survived""]].groupby(['Sex'],as_index=False).sum()"	1	1
y_pred_final['Survived'] = y_pred_final['Survived'].astype(int)	1	1
test.loc[test['Name'] == name, 'title'] = 'Ms'	1	1
"X[""is_child_and_sex""] = X[""Sex""] * X[""is_child""]"	1	1
df['Age'] = df['Age'].fillna(mean_age)	1	1
df_data['TicketRef'].value_counts()	1	1
df.loc[df['Family'] == 0, 'HasFamily'] = 0	1	1
train_df.drop_duplicates()	1	1
dfcopy.join(pd.get_dummies(dfcopy.AgeCluster, prefix=c.AgeCluster))	1	1
train_d['Title']=train_d['Title'].replace([' Mlle',' Ms',' Mme',' Lady'],' Mrs')	1	1
"train_df[""FamilySize""] = train_df[""SibSp""] + train_df[""Parch""]"	1	1
train.drop(cols_to_drop, inplace = True, axis = 1)	1	1
train.drop(columns=['AgeBand'])	1	1
dataset['Fare'].fillna(dataset['Fare'].median(), inplace=True)	1	1
"model.add(Dense(activation=""sigmoid"", units=1, kernel_initializer=""uniform""))"	1	1
test_data.dropna(axis=0,how='all')	1	1
died['Age'].plot.hist(alpha = 0.4, color ='blue', bins = 50)	1	1
train_data.drop(['Name','SibSp','Parch','Ticket','Fare','Cabin','Embarked'], axis=1)	1	1
training_data.groupby(['Sex','Survived']).size() # output pandas.core.series.Series	1	1
prediction.to_csv( 'titanic_prediction.csv' , index = False )	1	1
model_num.add(Dense(1, activation='sigmoid'))	1	1
"results.melt(var_name = ""Model"", value_name = ""Precision"")"	1	1
test['A5'] = np.array(test['CategoricalAge'] == 5).astype(np.int32)	1	1
"titanic_df.loc[titanic_df[""Sex""] == ""male"", ""Sex""] = 0"	1	1
train_df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'PassengerId','SibSp','Parch'], axis=1)	1	1
df.loc[((df.MisAge == 1) & (df.Pclass == 2)) , 'MA_Cl'] = 5 #avg without age	1	1
"submission[[""PassengerId"",""Survived""]].astype(int)"	1	1
dataset.drop(columns=['Name','Ticket'],axis=1,inplace=True)	1	1
df_titanic_train_mod['Title']=le.transform(df_titanic_train_mod['Title'])	1	1
re_train.Survived.values.reshape((re_train.shape[0],1))	1	1
"combine[0].drop([""Survived"", ""PassengerId""], axis=1)"	1	1
"train_df[""Sex""] = train_df[""Sex""].astype(""category"")"	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Don"", ""Mr"")"	1	1
"df[""Embarked_Category""] = pd.Categorical.from_array(df.Embarked).codes"	1	1
data_train.drop(columns='Survived')	1	1
train_df['fare'].isin([n for n in np.arange(q)]).all():	1	1
df_train['Single'] = df_train['Family'].map(lambda s: 1 if s == 1 else 0)	1	1
train.loc[(train.Fare > 67) & (train.Fare <= 135),'Fare'] = 2	1	1
titanic_train['Title']=titanic_train.Name.map(lambda x: x.split(',')[1].split('.')[0].strip())	1	1
"data[""SocialGroup""].value_counts().index"	1	1
df['Sex']=df.Sex.apply(convertSex)	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),'Age'] = guess_ages[i,j]	1	1
drop_elementsNMD.append('EmbarkedC')	1	1
test_df.corr()	1	1
"data[""Embarked""].fillna('S')"	1	1
fare.as_matrix()	1	1
train.groupby('Survived').hist();	1	1
np.mean(combined_features['Fare'])	1	1
dataset.loc[(dataset['Fare'] > 10) & (dataset['Fare'] <= 20), 'Fare'] = 2	1	1
test.drop(['Cabin','Ticket','PassengerId','Name'], axis = 1)	1	1
data.groupby('Sex').Age.plot(kind='kde')	1	1
test_x['Sex']=test_x['Sex'].apply(gender_to_no)	1	1
"df[""Family""]"	1	1
i['Isalone'].loc[i['FamilyMembers'] > 1] #initiate to No/0 is alone if family is greater than 1	1	1
data.Embarked.fillna(value=(data.Embarked.value_counts().idxmax()), inplace=True)	1	1
test.drop(columns=['Cabin','Ticket'])	1	1
"df[""Name_titleCategory""] = df.loc[:,'Name_title'].map(title_mapping)"	1	1
"dataframe['Family'] = dataframe[""Parch""] + dataframe[""SibSp""]"	1	1
df.duplicated(subset='Ticket', keep=False)	1	1
Test_Master.loc[(Test_Master['Fare'] > 24) & (Test_Master['Fare'] <= 53), 'Fare'] = 4	1	1
test.isnull().sum()[test.isnull().sum()>0]	1	1
"dataframe[""Age""][np.isnan(dataframe[""Age""])] = rand_1"	1	1
best_acc_score.append(acc_score)	1	1
data.loc[(data.passenger_fare>27.4) & (data.passenger_fare<=27.5) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>27.4) & (data.passenger_fare<=27.5) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
comb_data['IndFare'] = comb_data.Fare / comb_data.PassCountTicket	1	1
train.Cabin.apply(lambda x: x[0])	1	1
testData.loc[testData['Age']>64,'Age_band']=4	1	1
"test_data[""Survived""] = predictions"	1	1
test_features.apply(lambda x: sum(x.isnull()))	1	1
train_filled.head()	1	1
df['Poor_Old_Miss_Second_Class'] = 0	1	1
data['Fare_Per_Person']=data['Fare']/(data['Family_Size']+1)	1	1
titanic_df['Age'] = titanic_df['Age'].fillna(titanic_df['Age'].mean())	1	1
df['FamilySize'] = df['FamilySize'].apply(filter_family_size)	1	1
test['CabinN2'] = pd.to_numeric(test['CabinN2'], downcast='integer')	1	1
plt.hist([train.loc[(train['Survived'])==1, 'Age'].dropna(),           train.loc[(train['Survived'])==0, 'Age'].dropna()],           bins = 40, histtype='stepfilled', stacked=True, label=['Survived','Died'])	1	1
"sns.boxplot(x=""Fare"", y= ""Pclass"", data= titanic, orient=""horizontal"")"	1	1
"data_train.Cabin.fillna(""Unknown"", inplace = True)"	1	1
output.to_csv('assignment2_linear.csv', index=False)	1	1
plt.hist(df_all['_Fare'], bins=100)	1	1
train['FamilyCat'][train['Survived']==1].value_counts().sort_index()	1	1
df_train['AgeFill'] = df_train['AgeFill']                         .groupby([df_train['Sex_Val'], df_train['Pclass']])                         .apply(lambda x: x.fillna(x.median()))	1	1
scaler.transform(np_test_features)	1	1
combined_df.loc[891:, cols]	1	1
trainingdata['Age']	1	1
final_prediction_int.shape	1	1
selCols.append(col)	1	1
train.groupby('Ticket')['Sex'].count()	1	1
"data.loc[data[""Age""].isnull() & data[""Fare""].isnull(), ""Fare""] = data[""Fare""].value_counts().idxmax()"	1	1
test['CategoricalFare'].cat.categories = [1, 2, 3, 4]	1	1
combined_df['title'] = combined_df['title'].replace(['master','rev','dr','col','major','lady','countess','jonkheer','don','capt','dona','sir'], 'notable')	1	1
train_data.isnull().sum().sort_values(ascending=False)	1	1
data.loc[(data['Age']>cat[0]) & (data['Age']<=cat[1]) ,'Age']=1	1	1
master_df['Embarked'].fillna(master_df['Embarked'].mode()[0], inplace=True) # Mode because categorical.	1	1
df_var1['family_is'].values[i-1] = '1'	1	1
combine_df['Age'] = group.transform(lambda x: x.fillna(x.median()))	1	1
model.add(Dense(1, kernel_initializer = 'uniform', activation = 'sigmoid'))	1	1
numerical_columns.append('SurnameGroup_include_perishing_women')	1	1
"train[""isParch""] = train.Parch.apply(lambda x : 0 if x == 0 else 1)"	1	1
data['Age_Bin'] = pd.cut(data['Age'].astype(int), 5)	1	1
"dataset[""Embarked""]=dataset['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})"	1	1
train_df['Name'] = train_df.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
df.duplicated().sum()	1	1
df['Cabin_Name'] = df['Cabin'].str.extract(r'([A-Za-z])')	1	1
train_df.drop(['Ticket', 'Cabin', 'Name', 'PassengerId'], axis=1)	1	1
dataset.loc[ dataset['FamilySize'] >= 5, 'FamilyClass'] = 2	1	1
df_train.groupby(by = ['Pclass', 'Sex']).mean()	1	1
df['Deck'] = pd.Series((mapping_deck[cab2[:1]] for cab2 in df['Cabin']), index=df.index)	1	1
X_train['Sex'] = train_df['Sex'].map({'female' : 0, 'male' : 1}).astype(int)	1	1
df2['FamilyOneSurvived'] = 0	1	1
"i.loc[i[""Title""] == ""Capt."",[""Title""]] = ""Other"""	1	1
df_data['Connected_Survival'] = 0.5 # default	1	1
perf.append(getMetrics(y_test, y_pred, 'Logistic Regression'))	1	1
my_pca.transform(preprocessed_train)	1	1
test.to_csv( 'svm_poly_all_feat.csv' , index = False )	1	1
missing_val['missing_percentage']=((missing_val['missing_percentage'])/len(titanic))*100	1	1
df.reset_index(drop = True)	1	1
td.isnull().sum()	1	1
"ax[1].set_title(""Sex: Survived vs Dead"")"	1	1
train['Embarked'] = trainEmbarked	1	1
"Bagging_result[0][""best_model""],"	1	1
arr['H'].append(row)	1	1
df[['Cabin_numeric_range', 'Survived']].groupby('Cabin_numeric_range').count().merge(df[['Cabin_numeric_range', 'Survived']].groupby('Cabin_numeric_range').mean(), right_index = True, left_index = True)	1	1
"all[""Ticket""] = Ticket"	1	1
train_data['Embarked'].mode()[0]	1	1
"train_data[""TitleMs""] = 0"	1	1
sub_knn['Survived'] = pred_all_knn	1	1
titanic_data[['Survived']];	1	1
"tr[""Embarked""]=tr[""Embarked""].fillna(""S"")"	1	1
survived_family['Rate'] = survived_family[1]/survived_family.sum(axis=1)	1	1
"train.drop([""PassengerId"" , ""Ticket"", ""Cabin""], axis=1)"	1	1
"df_test[""cab""] = df_test[""Cabin""].str.lower().str.get(0)"	1	1
full['Ticket_short'].map(d)	1	1
all_data['Sex']=all_data['Sex'].fillna('male')	1	1
train['Age'] = train[['Age', 'Pclass']].apply(avg_age, axis = 1)	1	1
dataset['Sex'] = encoder_sex.transform(dataset['Sex'])	1	1
train.drop(['Name'], axis = 1, inplace = True)	1	1
train_df.corr().columns.values,	1	1
pclass_frame.head()	1	1
submission_df.assign(Survived=pd.Series(test_pred).values)	1	1
test['Sex'] = lb.fit_transform(test['Sex'])	1	1
curated_data.loc[(train['Age'] > 25) & (train['Age'] <= 35), 'Age'] = 2,	1	1
submission.to_csv('mySubmission.csv', index=False)	1	1
survived_embarked.fillna(0, inplace=True)	1	1
dataset.loc[(dataset['Fare'] <=3.44) & (dataset['Fare'] > 2.67)  ,'Fare']=2	1	1
data.loc[(data['Age'] > 40) & (data['Age'] <= 53), 'SortAge_1'] = 3	1	1
test['Fare'][152]=test.Fare.median()	1	1
df_train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)	1	1
titanic_test_relevant.head()	1	1
submission.loc[:,'Survived'] = pd.Series(test_prediciton[0], index=list(submission.index))	1	1
X_test.loc[X_test['Embarked'] == 'S', 'Embarked'] = 1	1	1
X_test.loc[X_test['Embarked'] == 'S', 'Embarked'] = 0	1	1
df_all['Family'] = df_all.Parch + df_all.SibSp + 1	1	1
"train.loc[train[""FamilySize""] >=5, ""FamilyType""] = ""Big"""	1	1
aveAge.at['female', 'Age']	1	1
df_test['Age_Missing'] = df_test.apply(age_missing,axis=1)	1	1
data.loc[data.Age.isnull(), 'Age'] = -1	1	1
dataset.drop(['PassengerId','Name','Ticket','Embarked'],axis = 1,inplace = True)	1	1
titanic[0:890]	1	1
combined['accompaniedBy'] = combined.apply(lambda row: deriveAccompaniedBy(row['parents'], row['SibSp']), axis = 1)	1	1
"titanic_df.drop([""Cabin""], axis=1)"	1	1
df_main.loc[:,['Survived','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
pandasDFname.loc[:,featureName]	1	1
full_df[ 'Cabin' ] = full_df.Cabin.fillna( 'U' )	1	1
new_train.loc[index[i]]['Ticket']	1	1
comb['Age'] = comb.groupby(['Pclass','SibSp','Parch','Title'])['Age'].transform(lambda x: x.fillna(x.median()))	1	1
df['Alone'] = df['FamilySize'].map(lambda s: 1 if s == 1 else 0)	1	1
X['family'] = np.where(train['family']=='Y', 1, 0)	1	1
"data.drop(columns=[""Name"", ""Cabin"", ""Ticket""], inplace=True)"	1	1
test['Age'] = age_imputer.transform(test[['Age']])	1	1
train_dataset[['Alone','Survived']].groupby(['Alone'],as_index=False).mean()	1	1
hist.history['val_acc']	1	1
allfeat['Embarked'] = allfeat['Embarked'].fillna('S')	1	1
"data.query('Pclass == 1 and Sex == ""female""');     data1['Age'] = data1['Age'].fillna(36)"	1	1
X.loc[arr[key],'Cabin_{}'.format(key)] = 1	1	1
survived.astype(int)	1	1
train['Salutations']=0	1	1
data['Name'] = data['Name'].fillna(data.Name.median())	1	1
X_test['Embarked']=labelencoder.fit_transform(X_test['Embarked'])	1	1
"df_scores[""Score""].argmax()"	1	1
df.loc[(df['Fare']>7.01) & (df['Fare']<=7.88),'Fare_Cat']=2	1	1
df_test['Name'][0:5]	1	1
"plt.hist(""Age"", data=train)"	1	1
feat_map.append(feat_dict)	1	1
titanic_whole.describe()	1	1
"titanic_test_data.loc[titanic_test_data[""Sex""]==""female"",""Sex""] = 1"	1	1
train.replace('male', 1,inplace=True)	1	1
df['NamePrefix'] = df['NamePrefix'].replace('Ms', 'Miss')	1	1
"x.append(""Survived"")"	1	1
train_df.groupby(pd.qcut(train_df['Fare'], 3))['Survived'].mean()	1	1
Test.drop(['Cabin'], axis=1)	1	1
"cabin_only[""Cabin_Data""] = cabin_only[""Cabin""].isnull().apply(lambda x: not x)"	1	1
df_dums['age_4']=[1 if (ele <= 50.) & (ele > 18.) else 0 for ele in df_dums['Age']]	1	1
train['SortAge_3'].value_counts()	1	1
"axes[1].set_title(""Gender vise Survival rate"")"	1	1
test_ids.copy()	1	1
concat_set['Age'].mean()	1	1
test.drop(columns = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Deck', 'Embarked'])	1	1
AgeNull.shape	1	1
titanic_df['Survival'] = titanic_df.Survived.map({0:'Died',1:'Survived'})	1	1
tmp.sort_values(['test'], ascending=[False])	1	1
"train_df[""Cabin""].value_counts().shape[0]"	1	1
new_test_df['Survived'] = predict_result	1	1
titanic['Group_size'] = new_df.values	1	1
"train[""PassengerId""]"	1	1
t.loc[(t['Age'] > 48) & (t['Age'] <= 64), 'Age'] = 3	1	1
test_df['Age'][np.isnan(test_df['Age'])] = rand_test	1	1
the_df['EmbarkedInteger'] = the_df['EmbarkedInteger'].map( {'X': 1, 'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
df_titanic['Sex'] = labelEncoder.fit_transform(df_titanic['Sex'])	1	1
"data_train[""Sex""] = data_train[""Sex""].replace(""female"", 0)"	1	1
"train[""Embarked""].cat.categories = [0,1,2]"	1	1
test.drop(drop_elements, axis=1)	1	1
train.drop(columns = ['Cabin'])	1	1
train_df['Survived'].values.ravel()	1	1
"submission.to_csv(""gradient_boost.csv"",index=False)"	1	1
train_df.columns.isin(['sibsp', 'parch', 'familysize']).any():	1	1
"test_df[""Fare""]=test_df[""Fare""].astype(int)"	1	1
train_df.ix[i, 'Title'] = re.search('([A-Za-z]+)\.', train_df.Name[i]).group(0)	1	1
df_test['Age'] = df_test[['Age','Pclass']].apply(agerep,axis = 1)	1	1
data.loc[ data['Age'] >66 ,'Age'] = 7	1	1
output.to_csv('../working/kernel_1_output.csv', index=False)	1	1
plt.rcParams['figure.edgecolor']='black'	1	1
test_data.Fare.describe()	1	1
final_csv['Fare'].quantile(.25),	1	1
y.size	1	1
testData.set_index('PassengerId',inplace=True)	1	1
train_df.loc[:, ['pclass', 'age', 'age*class']].head(10)	1	1
raw_train['Age'].hist(bins=100, grid=True, alpha=0.8, normed=True, color='gray')	1	1
pd.DataFrame.from_dict(test_pred).mean(axis=1) > 0.5,	1	1
df_combined.head()	1	1
train_copy.head(5)	1	1
df.replace(0,-1)	1	1
train['FamilyMem']=train.apply(lambda x: x['SibSp']+x['Parch'], axis=1)	1	1
"train_data.drop(""Age"", axis=1)"	1	1
train_df['Age_band']=0	1	1
train.Age.hist(bins=70,ax=axis2)	1	1
train_df['Title'] = train_df['Title'].replace('Mme.','Mrs.')	1	1
acc_svc.mean()	1	1
"test_p['Gender'][test_p['Sex']==""male""] = 1"	1	1
data.pivot_table('Survived', index = 'Sex', columns = 'Child', aggfunc = 'mean')	1	1
full.drop('Pclass', axis=1, inplace=True)	1	1
titanic_data.loc[(titanic_data['Age'] > 16) & (titanic_data['Age'] <= 32), 'Age'] = 1	1	1
test_data.iloc[:,length]	1	1
data_test.drop(['Cabin', 'Name', 'Parch', 'SibSp', 'Ticket'], axis=1, inplace=True)	1	1
"testingset[""CabinBin""] = (testingset[""Cabin""].notnull().astype('int'))"	1	1
train.copy() # duplicating	1	1
target.tail( 142 )	1	1
list_corr_coef.append(corr_coef[0, 1])	1	1
data_spliced.sort_values(['rec', '+/-rec'], ascending=[False, True])	1	1
test_df['Age'] = pd.cut(test_df['Age'], bins=[0,12,40,80], labels = ['Child', 'Young', 'Old'])	1	1
"titanic_train_df[""Familysize""] = titanic_train_df[""SibSp""] + titanic_train_df[""Parch""]"	1	1
train.drop('Embarked', inplace=True, axis=1)	1	1
raw_train['Ticket'].unique().size	1	1
combined.Ticket.head()	1	1
train['Cabin']=train['Cabin'].fillna('unknown')	1	1
testdf.drop('Cabin',axis=1)	1	1
titanic['Embarked'] = le.transform(titanic['Embarked'])	1	1
train_df.drop(['Parch','SibSp'], axis = 1)	1	1
"titanic_df.groupby(pd.cut(titanic_df[""Fare""],fare_ranges)).mean()[""Survived""].plot.bar()"	1	1
dataset['AgeGroup'] = dataset['AgeGroup'].astype(int) # it keeps the categorical dtype, we want int	1	1
test.iloc[:,6] = test_embarked_t	1	1
df_test['Cabin'] = df_test['Cabin'].fillna('U')	1	1
train_df['FamilySize']	1	1
pred_ls.append(pd.Series(model.predict_proba(submission[training_vars])[:,1]))	1	1
test_df.join(pc_dummy_test)	1	1
final.to_csv('final submission.csv', index=False)	1	1
y_pred.to_csv('titanic_pred_lgb.csv',index=False)	1	1
np.dot(xt,x)	1	1
mcs_df.head()	1	1
test.loc[(test['Fare']>7.91)&(test['Fare']<=14.454),'NFare']=1	1	1
full_data.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)	1	1
all_data.set_value(306,'Deck',value='C')	1	1
test_id.info()	1	1
dat['Fam_Size'] = dat['SibSp'] + dat['Parch']	1	1
df[['Person_Class','Group_Category','Survived']].groupby(['Person_Class','Group_Category']).mean()	1	1
"df_test[""AgeBand""] = pd.cut(df_test[""Age""], bins, labels = labels)"	1	1
train.loc[(train.Fare>7.91) & (train.Fare<=14.454),'Fare_cat'] =1	1	1
combined.groupby(group_key).Age.transform(fill_Age_mean)	1	1
features['Embarked'] = features['Embarked'].map(emb_map)	1	1
"train[""title""] = [i.replace('Capt', 'rare') for i in train.title]"	1	1
"combined.loc[t_group.index, ""n_ticket_holders""] = len(t_group.index)"	1	1
pd.notnull(x):	1	1
all_data.loc[all_data['Age'] > 64, 'Age'] = 6	1	1
model_results.sort_values(by = 'cv_mean')	1	1
test_mod.loc[152, 'Fare'] = fare_median	1	1
"dftotal[""Ticket1""]=dftotal.Ticket.map(lambda x: x.split("" "")[0])"	1	1
X.shape, y.shape, X_pred.shape	1	1
"test[""Age""]=test[""Age""].fillna(test[""Age""].median())"	1	1
result.to_csv(path_or_buf='gbm_submittion.csv', index = False, header = True)	1	1
test_data.loc[(input_data.Cabin.isnull()),'Cabin']=False	1	1
test_features[0]	1	1
df['Age'].fillna(df['Age'].mean(), inplace=True)	1	1
"data.loc[data[""Age""].isnull() & data[""Fare""].isnull(), ""Age""] = data[""Age""].value_counts().idxmax()"	1	1
op.to_csv('KFold_XGB_GridSearchCV_submission.csv',index=False)	1	1
"train[[""Fare"", ""Survived""]].dropna().groupby([""Survived""]).median()"	1	1
dataset.groupby('Embarked').Embarked.count()	1	1
df['Person'] = df.apply(lambda row: sex_value(row['Sex'], row['Age']), axis=1)	1	1
data.loc[ (data['Age'] >22) & (data['Age']<=27),'Age'] = 3	1	1
reviews['price'].plot.hist()	1	1
dataset_train['Age_Group'] = ((dataset_train['Age']/15)+1).astype(np.int64)	1	1
train.groupby('Ticket').count()['PassengerId'].reset_index()	1	1
data.loc[data.Deck.isnull(), ('Deck')] = -1	1	1
test['Sex'].loc[test['Sex']=='male']=1	1	1
titanic_test['Age_Youth']=((titanic_test['Age']>18)&(titanic_test['Age']<=35)).astype(int)	1	1
m.add(Dense(output_dim=50, activation='relu'))	1	1
j.append(lcost(X2, w, b, y))	1	1
"in [""Pclass"",""Sex"", 'Embarked', 'Age_categories']:"	1	1
original['Name']	1	1
"StackingSubmission.to_csv(""EstStackingSubmission.csv"", index=False)"	1	1
df.loc[df0['Sex']=='male', 'Sex'] = 1	1	1
dataset.loc[dataset['GroupSize'] > 7, 'GroupSize'] = 3	1	1
Cols[1]	1	1
titanic['Age'][(Pclass2)&Family1] = titanic['Age'][(Pclass2)&Family1].fillna(30)	1	1
train['Sex'].replace({'male':1 ,'female':0},inplace=True)	1	1
chi2_reduced_train.drop(drop, axis = 1, inplace = True)	1	1
ax1[0].set_ylabel('Amount')	1	1
imputed[ 'Has_Fare' ] = full.Fare.notnull()	1	1
drop_train.loc[drop_train.Pclass == 1,'Fare'].mean()	1	1
train_data.drop(['PassengerId'],axis = 1)	1	1
validation_test['M2_ada'] = cls_ada.predict(validation_test.loc[:, columns])	1	1
sn.boxplot('Embarked', 'Age', data=train)	1	1
titanic_test['Embarked_C']=(titanic_test['Embarked']=='C').astype(int)	1	1
train['Age'].hist(bins=70, ax=ax2)	1	1
ship['Fare']	1	1
test.loc[(test['Fare'] > 31) & (test['Fare'] <= 99), 'Fare']   = 3	1	1
datasets_clean[1]	1	1
submission.to_csv('Titanic Submission Voting2.csv', index = False)	1	1
train.insert(7, 'Survived', survive)	1	1
combined.iloc[891:].Fare.fillna(combined.iloc[891:].Fare.mean(), inplace = True)	1	1
categorical_data_imputed.astype('str')	1	1
"data_frame[""Name""]"	1	1
df_train['Sex']=df_train['Sex'].astype('category')	1	1
data[['Ticket', 'Ticket_numerical', 'Ticket_categorical']].head()	1	1
ticketV.head(2)	1	1
Train_df.head()	1	1
"test_data_1.loc[test_data_1.Fare.isnull(),""Fare""] = fare_null_df[""Fare""].median()"	1	1
full.drop(['Cabin', 'Deck'], 1);	1	1
df_test_test.head()	1	1
clfs.append(RandomForestClassifier(random_state=seed))	1	1
train_data.ix[~(train_data['Pclass'] != 1)]	1	1
tmp.drop('Age', axis=1, inplace=True)	1	1
"train.groupby('Age').Survived.mean().plot(kind = 'line', lw = 2, color = ""purple"")"	1	1
"data[""TicketPrefix""].value_counts().index"	1	1
data_no_nan.loc[:, 'Fare'] = fill_series(data_no_nan['Fare'])	1	1
x_test['FamilySize_8'] = x_test['FamilySize'].apply(lambda x: 1 if x == 8 else 0)	1	1
pred.apply(lambda x: 1 if x > 0.5 else 0)	1	1
"df_train.loc[((df_train[""title""]==""dr."") & (df_train[""Age""].isnull()==True)).tolist(),'Age']=avg_dr"	1	1
input_data['Embarked'].value_counts()	1	1
"save.to_csv(""../working/submission.csv"", index=False)"	1	1
best_estimator[9] # GradientBoostingClassifier	1	1
train_costs.append(train_epoch_cost)	1	1
df.drop(columns=['Cabin', 'PassengerId', 'Name', 'Ticket', 'Last Name', 'First Name'], inplace=True)	1	1
"survivors[""Sex""].value_counts()/len(train),"	1	1
df_test[['PassengerId', 'Survived']].to_csv('random_forest_cv_feat_eng.csv', index=False)	1	1
survived_class_3.shape[0]	1	1
train['P1'] = np.array(train['Pclass'] == 1).astype(np.int32)	1	1
train_df[['isAlone', 'Survived']].groupby(['isAlone'], as_index=False).mean()	1	1
"train.drop([""Ticket"", ""Cabin"", ""PassengerId""], axis=1)"	1	1
"titanic_train[""Fare""][titanic_train[""Survived""]==0]"	1	1
train[['had_SibSp', 'Survived']].groupby(['had_SibSp'], as_index=False).mean()	1	1
np.mean(cv_score)	1	1
"titanic_df[""Survived""] = titanic_df[""Survived""].astype(int)"	1	1
titanic_result.to_csv('titanic_result.csv', index=False)	1	1
test['name_length'] = [len(i) for i in test.Name]	1	1
"test.loc[(test.Fare.isnull())&(test.Pclass==3),'Fare'] = test[""Fare""][test[""Pclass""] == 3].median()"	1	1
similar_prediction.append(data1row['PassengerId'])	1	1
"data[""Child""] = ""NaN"""	1	1
"train.drop([""Parch"", ""SibSp""], axis=1)"	1	1
dataset.loc[(dataset['Age'] >= 32) & (dataset['Age'] < 48), 'Age'] = 2	1	1
data['Pclass'].head()	1	1
submissions.to_csv('Submissions.csv',index=False)	1	1
data['Title']=data['Title'].str.replace('Master.','126')	1	1
"train.loc[ train['Fare'] <= 7, 'Fare'] 						        = 0"	1	1
df_train.loc[(df_train['Fare'] > 14.454) & (df_train['Fare'] <= 31), 'Fare']   = 2	1	1
dataset.loc[(dataset['Fare'] > 20) & (dataset['Fare'] <= 40), 'Fare']   = 3	1	1
df_test.join(deck_one_hot_test)	1	1
all_data.set_value(557,'Deck',value='C')	1	1
"test_data[""Embarked""].replace([""S"",""C"",""Q""], [1,0,-1], inplace = True)"	1	1
train_copy['SibSp_Category'] = 4	1	1
df_data['FamilySize'] = df_data['Singleton'] + df_data['FamilySmall']*2 + df_data['FamilyLarge']*3	1	1
train['PassengerId'].tail(20)	1	1
input_df.append(test_df) #Entire dataset	1	1
df.Title.replace({'Ms.': 'Miss.', 'Mlle.': 'Miss.', 'Dr.': 'Rare', 'Mme.': 'Mr.', 'Major.': 'Rare', 'Lady.': 'Rare', 'Sir.': 'Rare', 'Col.': 'Rare', 'Capt.': 'Rare', 'Countess.': 'Rare', 'Jonkheer.': 'Rare', 'Dona.': 'Rare', 'Don.': 'Rare', 'Rev.': 'Rare'}, inplace=True)	1	1
model.add(Dense(8, input_shape=(8,)))	1	1
all_data.iloc[i, 0] = {1: 42, 2: 29.5, 3:25}[all_data.iloc[i, 7]]	1	1
df_train.describe() ##returns only numeric value	1	1
test['PassengerId'] #we will need it for submitting result later	1	1
copy_train_df.corr()	1	1
pd.notnull(s) else 0.5	1	1
df.drop(['PassengerId', 'Family','Name', 'Age','Sex', 'Ticket', 'Cabin', 'Embarked','NameTitle'], axis=1)	1	1
train[['Survived','PassengerId']]	1	1
train.drop(['Pclass','Sex','Ticket','Title'],axis=1,inplace=True)	1	1
all_data['Title'] = all_data['Title'].replace(['Mme'], 'Mrs')	1	1
data.Age.loc[(data.Age<0) & (data.companions==1) & (data.Personal_Titles=='Mrs')] =    data.Age[(data.Age>=0) & (data.companions==1) & (data.Personal_Titles=='Mrs')].median()	1	1
test['Title'].replace(['Mlle','Ms'], 'Miss', inplace = True)	1	1
log.sort_values(by='Accuracy',ascending = False)	1	1
"test.loc[test[""Cabin""].isnull(), ""Cabin""] = """""	1	1
"data.loc[data[""Age""] <= 16, ""Age_group""] = 0 # Child"	1	1
"pd.pivot_table(data= titanic, values= ""Age"", index= ""Sex"", columns=""Pclass"", aggfunc=""median"")"	1	1
ret[0]	1	1
"result.to_csv(""DecisionTree_tuned_Param.csv"", index = False)"	1	1
test_set.iloc[:,:].values	1	1
np.sum(data[0::,1].astype(np.float))	1	1
join_data.copy()	1	1
"train_df.loc[  train_df[""Pclass""]==1 ]"	1	1
ship['Title_Code'].loc[(ship['Title_Code'] == 4) & (ship['Survived'] == 0)].count()	1	1
family_survived.T[1][:-1].to_frame().reset_index()	1	1
"train_set[""Sex""] = train_set[""Sex""].apply(lambda x: replacement1.get(x))"	1	1
test_df['Sex']= test_df['Sex'].map(sex_mapping).astype(int)	1	1
combined_df['Age_Bins'] = pd.qcut(combined_df['Age'], bins_count, labels=list(range(1,bins_count + 1)))	1	1
Xrandreg_test.loc[:, Xcol + ['Age']]	1	1
train_data.loc[(train_data['Age']>=16) & (train_data['Age']<32),'Age'] = 1	1	1
"full_data[""AgeLog""] = full_data[""Age""].apply(lambda x: 0 if x == 0 else math.log2(x))"	1	1
sns.boxplot(train_data['Fare'])	1	1
all_data.iloc[ntrain:]	1	1
df.drop(['Sex','Embarked','Name','Fare','Fare Type','Title'], axis=1, inplace=True)	1	1
"test_data[""Embarked""].fillna(freq_port, inplace = True)"	1	1
titanic['Survived'] = titanic['Survived'].replace(1, 'Yes')	1	1
sur_class.div(sur_class.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)	1	1
all_data['Cabin']:	1	1
"test.loc[test[""SibSp""] == 0, ""sib_c""] = ""0"""	1	1
titanic.iloc[:,i]=titanic.iloc[:,i].replace(-1,np.nan)	1	1
data['FamilySize'] = FamilySize	1	1
data_train['Age']=data_train['Age'].fillna(data_train['Age'].median())	1	1
pd.melt(temp_data,id_vars='Survived',value_name='value',var_name='features')	1	1
predict.loc[predict['0'] == 1, 'Survived'] = 0	1	1
"train[""Title""] = [i.replace('Mlle', 'Miss') for i in train.Title]"	1	1
train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], inplace=True, axis=1)	1	1
test.loc[i,'isAlone'] = 0	1	1
test.loc[i,'isAlone'] = 1	1	1
"Test.groupby([""Pclass"",""SibSp""])"	1	1
"dataset[""Age""][dataset.Age.isnull()].index"	1	1
dataf_to_impute['PassengerId'][dataf_to_impute['Age'].isnull()]:	1	1
model_data.loc[(model_data.Pclass == 2)&(model_data.Title == 3)&model_data.Age.isnull(),('Age')] = 33	1	1
X_train['FamilySize']	1	1
X_train['SibSp'] = train_df['SibSp']	1	1
train1.drop(['Survived','PassengerId'],axis=1)	1	1
"test[""Famsize""] = test[""Parch""]+ test[""SibSp""]+1"	1	1
df_train.rename(columns = {'Survived' : 'Surv'})	1	1
data.loc[(data['Age'] > 17) & (data['Age'] <= 28 ), 'Age'] = 2	1	1
"df.loc[(df[""Title""]=='Miss') & (np.isnan(df[""Age""])),'Age'] = 31.7"	1	1
dataset['FareBin'] = dataset.FareBin.astype(int)	1	1
df['Ticket_Lett'] = df['Ticket'].apply(lambda x: str(x)[0])	1	1
"dataset.loc[dataset[""Age""] <= 9, ""Age""] = 0"	1	1
full.boxplot(column='Fare',by=['Pclass','Embarked'], medianprops=medianprops, showmeans=False, showfliers=False)	1	1
plt.hist(train.Age.dropna(),bins=50,histtype='bar')	1	1
"train_dataset[""Age""].mean()"	1	1
"dataset.drop(labels = [""PassengerId"", ""Name"", ""Embarked""], axis = 1, inplace = True)"	1	1
df['Title'] = df['Title'].apply(lambda x: 'Woman' if x in ['Mrs', 'Ms','Mlle', 'Mme', 'Miss'] else x)	1	1
"train_data[[""Embarked"", ""Survived""]]"	1	1
"train[""Survived""][train[""Sex""]=='male'][train[""Age""]<18][train[""Pclass""]==1].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
"train[[""Sex"", ""Sex_encode""]].head()"	1	1
categorical_df[0][pd.isnull(categorical_df[0]).any(axis=1)].drop(['PassengerId'], axis=1)	1	1
combine.loc[(combine['Age'] > 64), 'Age']	1	1
ship['Title'].loc[ship['Title'] == 'Lady'] = 'Mrs'	1	1
data.drop(['MaidenFirstName'], axis = 1)	1	1
df_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')	1	1
df.Age.fillna(df.Age.median(),inplace=True)	1	1
dset['FamSize'] = dset['SibSp'] + dset['Parch'] + 1	1	1
df_full['IsChild'] = (df_full['Age'] < 16).astype(int)	1	1
train.groupby(['fare1'])['Survived'].mean()	1	1
data.sons.loc[data.PassengerId==1042] = 1	1	1
train_data.rename(columns={'SibSp':'SiblingsSpouses', 'Parch':'ParentsChildren'}, inplace = True)	1	1
iset['Name_Complexity'] = iset['Name'].apply(lambda x: len(x.split()))	1	1
test_df.loc[(test_df['Age'] > 7) & (test_df['Age'] <= 18), 'AgeGroup'] = 1	1	1
X_train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)	1	1
data['Cabin'] = data['Cabin'].replace(['F', 'C'], 'M')        #Medium	1	1
df3['Age'].head()	1	1
"Bagging_result[2][""best_score""]"	1	1
"X[""Family""] = family"	1	1
data.loc[data.Cabinmates_Survived.isnull(), ('Cabinmates_Survived')] = 0.0	1	1
train_df['Age'] = train_df.groupby(['Pclass'])['Age'].transform(lambda x: x.fillna(x.mean()))	1	1
df_test['PassengerId'].copy()	1	1
"train[""FamilleMember""] = train[""SibSp""]+train[""Parch""]"	1	1
test_df.loc[ test_df['Fare'] > 31, 'Fare'] = 3	1	1
"a.loc[a[""FamilySize""] == 1, ""isAlone""] = 1"	1	1
numerical_columns.append('Poor_Old_Miss_Second_Class')	1	1
clfs.append(extraTrees)	1	1
dataset['age_T'].value_counts()	1	1
results[['PassengerId', 'Survived']].to_csv('submission.csv', index=False)	1	1
data_train['AgeGroup'] = data_train['AgeGroup'].map(age_mapping)	1	1
test.drop(columns=['Cabin'], axis=1, inplace=True)	1	1
x.replace(',','')	1	1
full.loc[idx,'Age'] = df_title.loc[idx, 'Name'].map(dict_age)	1	1
df['AgeGrp'] = pd.cut(df['Age'], [0, 12, 20, 200], labels = ['child', 'teen', 'adult'])	1	1
params[1]	1	1
titanic_df.pivot_table(index=group, columns='Survived', values = 'Fare', aggfunc='count')	1	1
"df['Cabin_Code'] = label.fit_transform(df[""Cabin""])"	1	1
df.loc[(df.Survived==1) & (df.Sex=='female'),:].count()	1	1
dataset_train['Name_Length'] = dataset_train['Name'].apply(lambda x : len(x))	1	1
train[['SibSp','Survived']].groupby(['SibSp']).mean()	1	1
"_df.loc[_df.title == ""the Countess"", :].index"	1	1
df['CabinDeck'] = df['Cabin'].fillna(' ').apply(get_cabin_deck)	1	1
titanic_test.loc[:,['SibSp','Parch']]	1	1
df_all['Title_encoded'] = pd.factorize( df_all['Title'] )[0]	1	1
data_df.groupby(['Embarked'])['Survived'].mean()	1	1
train.groupby(['Pclass'])[['Survived']].mean()	1	1
dataset.drop(columns='SPTE', inplace=True)	1	1
titanic_train.drop(['Sex','SibSp','Parch','Pclass','Embarked','Age','Survived'],axis=1)	1	1
family['family']='with family'	1	1
validate['Survived']	1	1
test_df.drop(['Age'],axis=1)	1	1
train.loc[train['Survived'] == 1,'Pclass']	1	1
"copy.loc[copy.Embarked == ""Q"", ""Embarked""] = 1"	1	1
"data[""Embarked""] = data[""Embarked""].fillna(most_common_embarked)"	1	1
train.loc[(train.Fare > 135) & (train.Fare <= 202),'Fare'] = 3	1	1
train_df.loc[train_df['familySize']==1,'IsAlone'] = 1	1	1
train_data.loc[ set(train_data.index) - set(train_set.index)]	1	1
np.round(model.predict(x_test))	1	1
dfcopy.assign(AgeCluster = results.predict(X))	1	1
"X_train.drop(""Cabin"", axis=1, inplace=True)"	1	1
sex_map['female'] = 1	1	1
result.append(np.mean(y_pred == y_test))	1	1
dataset['embarked'] = dataset['embarked'].fillna(freq_port)	1	1
name_vectorizer.transform(raw_input.Name)	1	1
test['Title']=test['Title'].map(Title_mapping)	1	1
df.drop(multiple_outliers, axis = 0).reset_index(drop=True)	1	1
df.loc[(df.FamilySize==0),'Alone'] = 1	1	1
train_dataset.drop(labels=['Name', 'Ticket'], axis = 1)	1	1
titanic.groupby(['Survived', 'Pclass']).size()	1	1
train_data.drop('Survived', axis = 1) # grabs everything else but 'Survived'	1	1
testData.loc[(testData.Age.isnull())&(testData.Initial=='Other'),'Age']=36	1	1
train_x['Embarked'] = train_x['Embarked'].map(embcov)	1	1
sc.transform(data_sub_prepared)	1	1
acc_svc.std()	1	1
sns.boxplot(y='Age', x='Embarked', ax=ax2, data=test_df, linewidth=1, saturation=5, order=['S', 'C', 'Q'], palette=palette3)	1	1
train_data['Relatives'] = train_data.SibSp+train_data.Parch	1	1
model.add(Dense(units = 149, kernel_initializer = 'uniform', activation = 'relu', input_dim = 10))	1	1
train_df['Sex']=le.transform(train_df['Sex'])	1	1
"submission.to_csv(""Kaggle_final.csv"",index=False)"	1	1
pred_table_lr_2_test.is_copy = False	1	1
submission.to_csv('prediction-xg.csv', header = True, index = False)	1	1
"sns.boxplot(y=""Age"", data=train)"	1	1
dataframe['Age']	1	1
"df_train[""is_male""] = pd.get_dummies(df_train[""Sex""], drop_first=True) #we use drop_first to avoid creating another correlated column is_female"	1	1
k.append('Col.')	1	1
"combined[""LastName""].at[pid]"	1	1
"train[""Age_1""] = train[""Age""]<4"	1	1
validation_losses.append(validation_result['average_loss'])	1	1
PointBiser.loc[var[0],'Pval'] = pb.pvalue	1	1
"all[""Age""].copy()"	1	1
Fare.plot.hist(ax=ax[0],bins=30,edgecolor='black',color='red')	1	1
df_test.Fare.fillna(df_test.Fare.median(skipna=True),inplace=True) # filling the nan value with the median fare	1	1
test.loc[(test['Age'] > 18) & (test['Age'] <= 24), 'Age'] = 3, #Student	1	1
Anova.sort_values('Pval',ascending=True,inplace=True)	1	1
train.loc[(train['Sex'] == 1) & (train['isAlone'] == 1), 'gender_alone'] = 4 #male alone	1	1
full_df[891:1309]	1	1
df_grouped_pclass.Fare.mean();	1	1
dataset.Cabin.fillna(0)	1	1
df['median'] = data.median(axis=1)	1	1
"dataset_train.sort_values(""FamilySize"")[""FamilySize""].unique()"	1	1
pred_y.to_csv('prediction.csv')	1	1
test_df['Fare'].iloc[152] = all_df['Fare'][all_df['Pclass'] == 3].dropna().median()	1	1
train_df['Embarked'].isnull().sum() / len(train_df)	1	1
full_data['Fare'].fillna(fill_Fare, inplace=True)	1	1
dataset[ 'ticketPos' ] = dataset[ 'Ticket' ].map( cleanTicket )	1	1
df['Sex'].replace(['male','female'],[0,1],inplace=True)	1	1
test['CabinN3'] = pd.to_numeric(test['CabinN3'], downcast='integer')	1	1
df_train.join(embarked_one_hot)	1	1
plot.hist( 4)	1	1
"cv_data.loc[cv_data['test-Accuracy-mean'].idxmax(),[""train-Accuracy-mean"",""train-Accuracy-std""]]"	1	1
data['Embarked'] = data['Embarked'].fillna(data.Embarked.median())	1	1
ax[0].set(xlabel='C', ylabel='Accuracy')	1	1
conf.get('one_hot', True)	1	1
df_clone.reset_index(inplace=True)	1	1
big['XFam'] = big['SibSp'] + big['Parch'] + 1	1	1
drop_elementsNMD.append('isCabinF')	1	1
"test[[""Sex"", ""Age"", ""Pclass"", ""Fare"", ""Embarked"", ""Cabin"", ""SibSp"", ""Parch""]].values"	1	1
"Accuracy[""randomForest""] = RFaccuracy"	1	1
tit['Embarked'] = tit['Embarked'].fillna('C')	1	1
np.round(train_preds).astype(int).flatten()	1	1
df.Cabin.fillna('N')  #fill NaN with N	1	1
traintestdata.shape	1	1
dataset_train[['Pclass', 'Survived']].groupby(['Pclass']).count()	1	1
"df.drop(""Pclass"", axis=1)"	1	1
testdata.ix[(testdata.Age >= 12) & (testdata.Age < 18), 'AgeCategory'] = 1	1	1
"train[[""SibSp"", ""Survived""]].groupby(['SibSp'], as_index=False)['Survived'].agg({'Survived': ['mean','count']})"	1	1
train['famSize'] = train['SibSp'] + train['Parch']	1	1
train_df.loc[train_df['Name'] == NameListIndex[x], 'Name'] = 'Misc'	1	1
"df[""Em_Cl""] = df[""Embarked""] * df[""Pclass""]"	1	1
"all_df.loc[all_df['FamilySize']>1, [""Last name"", ""Fare"", ""FamilySize""]].iloc[:train_size]"	1	1
"ages_prob.rename(columns={""Age"": ""Count"", ""real_age"": ""Age""})"	1	1
test['Title'] = Titles	1	1
evaluation_stats_sorted.sort_values(['test' + '_' + scoring + '_mean', 'test' + '_' + scoring + '_std'], ascending=[False, True])	1	1
"df[""Alone""] =  df[""FamilySize""].apply(lambda x : 1 if x == 1 else 0)"	1	1
train['Embarked']=train['Embarked'].fillna('C')	1	1
titanic_train['Deck'] = titanic_decks	1	1
"testing.loc[testing[""Title""] == ""Rev"", ""Title""] = 5"	1	1
titanic_df['top_cabin'] = titanic_df['top_cabin'].astype(np.int64)	1	1
testY.drop(testY.columns[[0]], axis=1, inplace=True)	1	1
data[['Name', 'Pclass','Sex','Age','Parch','SibSp','Embarked', 'Fare', 'Cabin', 'Survived']].copy()	1	1
df['MA_Ca'] = 0	1	1
features_raw['Cabin'] = features_raw.apply(lambda row: get_cabin(row['Cabin']), axis=1)	1	1
sns.boxplot(x='Pclass',y='Age',data=training_data,ax=ax[0,2])	1	1
X_val.drop('PassengerId', axis=1)	1	1
"test_df[""Age""].fillna(test_df.Age.median(),inplace=True)"	1	1
results['acc_test'] = accuracy_score(y_test, predictions_test)	1	1
join_data.pivot_table(values='Fare',index='Pclass',columns='Sex')	1	1
df.Cabin.fillna('N',inplace=True)	1	1
train3['Sex'] = le.fit_transform(train3['Sex'])	1	1
cia.replace([0, 1, 8], ['alone', 'double', 'group'])	1	1
"df.groupby(""Sex"").Age.mean()"	1	1
combined_df.loc[combined_df['Age'] < 16, 'age_group'] = 0	1	1
x.append(np.array([1, 0]))	1	1
df['Title'] = df.Name.str.extract(' ([A-Za-z]+)\.',expand=False)	1	1
train['Pclass'].head(20)	1	1
"family[""FamilySize""] = full.SibSp + full.Parch + 1"	1	1
train_data.Embarked.fillna(value=train_data.Embarked.mode()[0], inplace=True)	1	1
titanic_df.groupby(titanic_df['ticket_prefix_v2']).mean()['Survived']	1	1
train.drop(['Ticket'], axis=1, inplace=True)	1	1
dataset.loc[ dataset['Fare'] > 2.7, 'Fare']       = 1	1	1
train_df.loc[train_df['FamilyMembers'] == 1, 'IsAlone'] = 1	1	1
train_df.loc[:, train_df.columns != 'Survived']	1	1
data_combined.head()	1	1
test_df.columns.values.tolist()	1	1
"df[""CabinFloorScore""].loc[df['CabinFloor'] == ""A""] = 6"	1	1
td['PassengerId'],	1	1
df['Sex'] = df.Sex.map({'male': 1, 'female': 0}).astype(int)	1	1
combine['NoPerTicket']  = combine['Ticket'].value_counts()[combine['Ticket']].values	1	1
full['_AgeLinear'] = pred	1	1
testTitanic.loc[testTitanic.Age.isnull(), 'Age'] = testTitanic.groupby('Pclass')['Age'].transform('mean')	1	1
titanic['Cabin'].replace(['B', 'T', 'C'], ['A', 'A', 'A'], inplace = True);	1	1
"best_candidate[""best_params""]"	1	1
"train_df[""Embarked""] = train_df[""Embarked""].fillna(fillembark)"	1	1
titanic.loc[(titanic['Fare']>14.454) & (titanic['Fare']<=31.275),'Fare_grouped']=2	1	1
data['Fare'] = data['Fare'].fillna(data.groupby('Pclass').Fare.mean()[3])	1	1
pd.isnull(row.Age) else age_grouped.loc[row.Pclass].loc[row.Sex].loc[row.Embarked].Age	1	1
row[8] > fare_ceiling: # if there is data, handle ceiling	1	1
"data.select_dtypes(exclude = [""object""]).columns"	1	1
dataset.loc[(dataset['Age'] > 10) & (dataset['Age'] <= 20), 'AgeGroup'] = 5	1	1
train.drop('fareband',axis=1,inplace=True)	1	1
dataset.set_value(rowIndex, 'Age43to55', 1)	1	1
train_data.loc[train_data['Age'].notnull(), ['Age', 'Salutation']]	1	1
y_pred_final.to_csv('titanic_pred_final.csv',index=False)	1	1
dfTrain['Ticket_Spaces'] = dfTrain['Ticket'].apply(lambda x: len(x.split()))	1	1
full_dataset.loc[full_dataset['Fare']>31,'Fare']=3	1	1
d.Age.fillna(d.Age.mean())	1	1
processed_df['Survived'].values	1	1
titanic_train_data.head(10)	1	1
"data[""Port""] = data[""Embarked""].map(PORTS_MAP)"	1	1
Merged_data[['Sex_male', 'Fare', 'Age','Pclass','SibSp']]	1	1
"test[""Embarked""] = lb_make.fit_transform(test[""Embarked""])"	1	1
"train[""Name""].apply(getTitle)"	1	1
"tmp_group[""Age""].mean()"	1	1
grouped_median_age_train.head()	1	1
df.loc[(df['Age'] > 28) & (df['Age'] <= 38), 'Age'] = 2	1	1
sex['male']	1	1
test_data.Fare.fillna(test_data.Fare.mean(), inplace=True)	1	1
passenger['Age'] < 18 and passenger['Pclass'] == 1:	1	1
"train[""SexF""] = train[""Sex""].apply(lambda s: genders.get(s))"	1	1
merged.Cabin.apply(lambda x : x[0])	1	1
data_full.sample(10)	1	1
titanic_train.drop(['Embarked','Embarked_S'],1)	1	1
df_train.as_matrix()	1	1
train_df[['FareBand','Survived']].groupby(['FareBand'], as_index = False).mean().sort_values('FareBand', ascending = True)	1	1
title_list.append(4)	1	1
df_train.loc[:,('PassengerId','CabinGrp','Embarked')].groupby(['Embarked','CabinGrp']).agg('count')	1	1
fill_age_df.loc[fill_age_df['AgeBand'] != -1].drop(columns='AgeBand')	1	1
train_csv.loc[(train_csv.Name.str.contains('Mrs') & train_csv.Age.isnull()), 'Age'] = Mrs_average_age	1	1
df.loc[df.Age.notnull(),Var]	1	1
df_all['Fare'].values #returns a numpy array	1	1
"train_set[""Familysize""] = StandardScaler().fit_transform(train_set[""Familysize""].values.reshape(-1,1))"	1	1
features_short.drop(['Sex','Embarked'], axis=1)	1	1
trainData['Label']          # Split off classifications	1	1
"F_C_F[""Survived""].value_counts()#So 91/95 F_C_F survived"	1	1
data.Age.loc[(data.Age.isnull()) & (data.sons==1) & (data.Personal_Titles=='Kid')] =    data.Age[(data.Age>=0) & (data.Personal_Titles=='Kid')].median()	1	1
train.loc[(train['Pclass'] == 1) & (train['isAlone'] == 0), 'class_alone'] = 1 #together Pclass 1	1	1
data.parent_alone.loc[data.PassengerId==881] = 0	1	1
train_bfe.values	1	1
train['Cabin'].isna().sum() # since cabin has lot of NaN Values and theres no way of filling those NaN so we gonna drop it	1	1
data['Embarked']=data['Embarked'].map({'S':1,'C':2,'Q':3,'N':4})	1	1
"dftrain.drop([""PassengerId""], axis =1).describe()"	1	1
merged.loc[(merged['Fare']>14.454)&(merged['Fare']<=31),'Fare_cat']=2	1	1
df_train['sex'] = df_train['sex'].map({'male': 0, 'female': 1})	1	1
"test_data.drop(""PassengerId"", axis=1)"	1	1
"df_train.drop([""Survived"",""PassengerId""],axis=1)"	1	1
df_test.loc[ df_test['Age'] > 64, 'Age']                           = 4	1	1
Test_Master['Cabin'] = Test_Master['Cabin'].str[0]	1	1
test.groupby('Ticket').count()['PassengerId'].reset_index()	1	1
data_df['Fare'] = data_df['Fare'].fillna(data_df.groupby(by=data_df['Pclass'])['Fare'].transform('mean'))	1	1
train_test['CabinClass'] = train_test['Cabin'].astype(str).str[0]	1	1
train_df['Simple_S_C']=train_df['Family_S_C'].apply(lambda x: 1 if x >0 else 0)	1	1
"Y[""Fare""].fillna(Y[""Fare""].mean(), inplace=True)"	1	1
"train_data[""Teenager""] = 0"	1	1
train_df['LastName'],train_df['FirstName'] = train_df['Name'].str.split(',', 1).str	1	1
df['FamilyOneSurvived'] = 0	1	1
my_submission.to_csv('submission_RFC.csv', index=False)	1	1
train_df1.groupby('Sex').count()	1	1
df.dropna(axis=0, how='any')	1	1
train_df.groupby(['Pclass','Sex'])['Survived'].sum() # grouping data	1	1
"test.loc[i, ""nor_Fare""] = np.log10(np.abs((test.Fare[i]+0.1-np.mean(test.Fare)))/np.std(test.Fare))"	1	1
dfcopy.assign(Sarch = 1 * (sibsp1 & parch0 & title_mr_or_mrs & age_gt_cutoff))	1	1
"train_df.groupby(""age_category"")[""survived""].mean().plot()"	1	1
"pipelines.append(( ""ScaledNB"" , Pipeline([( ""Scaler"" , StandardScaler()),( ""NB"" , GaussianNB())])))"	1	1
test['IsMale'] = pd.get_dummies(test['Sex'], drop_first=True)	1	1
frame[['Female','Boy','NTicket','TicketSurv']]	1	1
"solution2.to_csv('solution2.csv', index_label= [""PassengerId""])"	1	1
X_train['Fare'] = train_df['Fare']	1	1
train['Age_known'] = train['Age'].isnull() == False	1	1
subData.head()	1	1
"titanic_test.insert(len(titanic_test.columns),""Survived"", predictions.astype(int))"	1	1
train_df['Title'] = train_df['Title'].str.extract('([A-Za-z]+)\.', expand=True)	1	1
"total[""CabinYN""] = pd.Series([1 if not pd.isnull(i) else 0 for i in total['Cabin'] ])"	1	1
merged['NameTitle']=0	1	1
predictions_frame['Age'].plot(kind='hist', title='Imputed Age Distribution')	1	1
data_full.loc[(data_full['Titles']==title) & (data_full['AgeBin'].isnull()), 'AgeBin'] = age_mode	1	1
test_df['Age_Scaled'] = scaler.fit_transform(test_df.Age.reshape(-1,1), age_scale_param)	1	1
df['Child'] = np.where(df['Age']<=5, 1, 0)	1	1
test.apply(lambda x: fatWallet(x), axis=1)	1	1
test_pclass_frame.drop(['Class_3'], axis=1)	1	1
dataset['Title'] = dataset['Name'].str.extract(r'(\w+)\.')	1	1
titanic_train_data['Id'] = titanic_train_data['PassengerId']	1	1
full_ver2.set_value(index, 'Age', median)	1	1
test_df['Survived'] = prediction	1	1
"data_train.drop(""Name"", axis=1, inplace = True)"	1	1
"titanic_train[""Family""] = titanic_train[""SibSp""] + titanic_train[""Parch""]"	1	1
test_df.drop(['EmbarkedFill', 'Title'], axis=1)	1	1
train_df['Name'].str.split()	1	1
df['useful_ticket_type'] = df['ticket_type'].apply(useful_ticket_type)	1	1
df3.info()	1	1
df['NameLen'] = [len(n) for n in df['Name']]	1	1
test_df['Fare'].hist(bins = 18, color = 'salmon')	1	1
df.drop('Embarked',axis=1)	1	1
ax[1].set_xlabel('Fare')	1	1
X_tot.drop(['Cabin'],axis=1)	1	1
datadict['MissingVal'] = train.isnull().sum()	1	1
train.Age.fillna(mean_age_all, inplace=True)	1	1
data.loc[data.Embarked.isnull(),'Embarked']='S'	1	1
dcee[0] = dcee[0] + (y[n] - t.loc[n])	1	1
df_test.drop('Name', axis = 1, inplace = True)	1	1
titanic_no_500s.groupby('Survived').mean()[['Fare']]	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Don', 'Rare')	1	1
df.loc[:,'Ticket Prefix'] = df['Ticket Prefix'].apply(lambda s: s.replace('.','').replace('/','').replace(' ','').upper())	1	1
test_df['Fare_new']=0	1	1
Test.to_csv('titanicOutput.csv',index=False)	1	1
titanic_2.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'title', 'title_age'], axis=1, inplace=True)	1	1
train.drop(['Survived'], axis=1).values # Creates an array of the train data	1	1
ax[1].set_title('Ticket Class Survival')	1	1
"test_one[""PassengerId""],"	1	1
dataset.loc[(dataset['Age']>10)&(dataset['Age']<=35),'Age_cat']=1	1	1
"X_valid[""Survived""]"	1	1
df.fillna({'Fare': fare})	1	1
"res[""param_criterion""].unique():"	1	1
score_f1.append(f1_score(Y_train,Y_pred))	1	1
train.groupby(['Fare'])['Survived'].mean()	1	1
test['Prediction'] = cls_random.predict(test.loc[:, ['Fare', 'Cabin', 'Sex', 'Age', 'M1_xgboost', 'M2_ada', 'M3_gradient']])	1	1
full.set_value(830,'Embarked','S');	1	1
X_train.groupby(variable)[variable].count().sort_values().tail(1).index.values[0]	1	1
splitted[1]	1	1
np.stack([test_age,test_sex,test_pclass_real],axis=1)	1	1
data.Fare.quantile(0.75) - data.Fare.quantile(0.25)	1	1
os.path.join(os.path.pardir,'data','raw')	1	1
standardize_df.join(target)	1	1
"df.loc[mask_Age, [""Title"", ""Sex"", ""Pclass""]]"	1	1
titanic_df['SecondClass']=titanic_df[['Pclass']].apply(get_secondclass, axis=1)	1	1
full_data['Title'] = full_data.Title.map(Title_Dictionary)	1	1
dataset.set_value(rowIndex, 'Age5to10', 1)	1	1
train[['SibSp','Parch', 'Survived']].groupby(['Parch','SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
dataset.loc[ dataset['Fare'] <= 7.89, 'Fare'] = 0	1	1
df_features['Cabin'].apply(lambda x: x[0] if p.notnull(x) else x).value_counts()	1	1
dataset['Title'] = dataset['Title'].replace(['Dr','Rev'],'Educated')	1	1
data.Age.describe()	1	1
train.loc[train['Age']>50,'Age_cat']=4	1	1
train_df['FareBand'] = pd.qcut(train_df['Fare'],q = 4)	1	1
components_[0] * max(transformed_features[:,0])	1	1
one_hot_test['Age'].fillna(one_hot_test['Age'].mean(), inplace=True)	1	1
df_train.loc[df_train['FamilySize'] == 1, 'IsAlone' ] = 1	1	1
each.loc[each['FamilySize']>=5,'FamilySizeGroup'] = 'Big'	1	1
"model.add(Activation(""sigmoid""))  # or softmax with category_crossentropy"	1	1
col.fillna(self.imputers[index], inplace=True)	1	1
train.as_matrix(columns=['Survived'])	1	1
test_df['Sex'] = test_df['Sex'].map({'male': 0, 'female':1})	1	1
ship['Title_Code'] = label.fit_transform(ship['Title'])	1	1
final.set_index('PassengerId')	1	1
test['E1'] = np.array(test['Embarked'] == 'S').astype(np.int32)	1	1
X.align(submission_X, join='left', axis=1)	1	1
X['Embarked'] = labelencoder.fit_transform(X['Embarked'])	1	1
df_test.loc[ (df_test.Sex == 'male') & (df_test.Pclass == 1) & (df_test.Age_bin == 1), 'Survived'] = 1	1	1
age_null.head()	1	1
"test_df[""Survived""] = pd.Series([])"	1	1
"Gender.div(Gender.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True, figsize=(4,4))"	1	1
"age[""Between5And12""] = ((age[""Age""] >= 5) & (age[""Age""] < 12)).astype(int)"	1	1
test['RareTitle'] = 0	1	1
"X_logistic[""SexAndPclass""] = X_logistic[""Pclass""] * X_logistic[""Sex""]"	1	1
df_test.Age_bin.astype(int)	1	1
cabin['Survived'] = full['Survived']	1	1
all_data.loc[(all_data['Fare'] > 14.454) & (all_data['Fare'] <= 31), 'Fare']   = 2	1	1
dataset.loc[(dataset['Age'] > 70) & (dataset['Age'] <= 80), 'AgeGroup'] = 7	1	1
test_data['Title'] = test_data['Title'].replace(['Capt.','Col.','Major.'],'Army.')	1	1
"dataset.loc[dataset['Age']<=16, ""Age""]= 0"	1	1
dataset['Age'] = dataset['Age'].fillna(freq_age)	1	1
df_rows.describe()	1	1
dataset['Alone']  = (dataset['SibSp'] + dataset['Parch']) == 0	1	1
test_df['Survived'] = [None]*418	1	1
data[['Name', 'Title']].head()	1	1
table.T.plot(kind='bar', stacked=True, color='gr')	1	1
not_survivors['SibSp'].value_counts().sort_index()	1	1
result_data.to_csv('output_dt.csv')	1	1
df_train['Age'].dropna().astype(int).hist(bins=70, ax=axis1)	1	1
"train[""Name""].apply(get_title).unique()"	1	1
df['Fare'] = df0['Fare'].apply(lambda e: 999 if pd.isnull(e) else e)	1	1
"train_data.loc[(train_data[""Age""] >= 4) & (train_data[""Age""] < 13), ""Child""] = 1"	1	1
results_strat_kfold.append((K,res.mean()*100, res.std()*100))	1	1
whole_orig.Age.round(0)	1	1
train_data['Parch'].value_counts()	1	1
row['Surname'] in femDie:	1	1
data_df['Fare'].fillna(data_df['Fare'].median(), inplace=True)	1	1
result.append(pd.Series([surv_class]), ignore_index = True )	1	1
df_real_test.describe(include = 'all')	1	1
df_all[['Age']].merge(test_x[['Age']], how='outer', left_index=True, right_index=True)	1	1
model.add(Dense(10))	1	1
X_training.drop(['not_alone', 'Male_P3','Parch'], axis=1)	1	1
features.loc[features.Embarked.isnull(), 'Embarked'] = emb_map['S']	1	1
model.add(Dense(24, input_shape=(params,)))	1	1
ticSur.head()	1	1
scores.mean()+scores.std()	1	1
X['NoCabin']=X['Cabin'].isnull().apply(lambda x: 1 if x is True else 0).astype('category')	1	1
sns.boxplot(x='Pclass',y='Age',data=train,palette='spectral')	1	1
train['Sex'].apply(lambda x : 1 if x == 'male' else 0)	1	1
x_test['Pclass_3'] = test_df['Pclass'].apply(lambda x: 1 if x == 3 else 0)	1	1
"data.set_value(i, 'Name', ""Mlle"")"	1	1
data_test.Age.fillna(value=30,inplace=True)	1	1
test_prediction.astype(int)	1	1
X['Cabin'].apply(lambda x: ord(x[:1]) if type(x) == str else x)	1	1
df_test[['PassengerId', 'Survived']].to_csv('../working/dec_tree.csv', index=False)	1	1
train['cabin'].fillna('U', inplace=True)	1	1
third_variable.append(raw_third_variable[i] if i in third_variable_index else 0)	1	1
models.sort_values(by='Score',ascending=False) #pd.DAtaFrame() is a function that takes a dictionary as an input. Within this list we determine key-values paires (column name-values within column)	1	1
"df.loc[df[""Fare""].notna(), ""Fare_Band""] = pd.cut(df.loc[df[""Fare""].notna(), ""Fare""], 5)"	1	1
temp.loc[mastermask, 'Age'] = 3.5	1	1
df_train.isnull().sum()                 #compute number of missing values for each att	1	1
"submission.to_csv(""titanic_predict_NN.csv"", index=False)"	1	1
titanic_3.drop('Survived',axis=1),	1	1
for_fittin.sample()	1	1
"rawdata.groupby(['Sex', 'Survived'])['Survived'].count().reset_index(name=""count"")"	1	1
ages_present.plot.hist(100)	1	1
train_df['Embarked'].value_counts(normalize=True).plot.bar(title= 'Embarked')	1	1
trainOrg['AgeGroup'] = '0'	1	1
survived_family.fillna(0, inplace=True)	1	1
"died[""Age""].plot.hist(alpha=0.5,color='red',bins=50)"	1	1
dset.groupby('FamCode'):	1	1
data.loc[data[y_attribute]==1]	1	1
"family_df_t[""Fsize""] = family_df_t.SibSp + family_df_t.Parch + 1"	1	1
"train_df.drop([""Ticket"", ""Fare"", ""Age*Class"",""Ticket C""], axis=1)"	1	1
"datacv.set_value(i, 'Name', ""Major"")"	1	1
test.loc[test['Embarked']=='Q', 'Embarked'] = 2	1	1
"df_train[""Age""].mean()"	1	1
dataset['Age'].fillna(dataset['Age'].median(), inplace= True)	1	1
test_data.drop(['Name'],axis=1)	1	1
df['Sex'] = df['Sex'].apply(lambda s: 0 if s == 'male' else 1)	1	1
title_ser.apply(lambda x: x if x in ['mr', 'mrs', 'miss', 'master'] else 'other')	1	1
all_data.loc[(all_data['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2	1	1
traindf.describe()['Fare']	1	1
"train['Age'].fillna(train.groupby('Title')['Age'].transform(""median""), inplace=True)"	1	1
np.sum(men_onboard) / np.size(men_onboard)	1	1
x['Age'] = 36	1	1
"_df[""title""] = _df.title.apply(lambda i : group_dict[i] if i in group_dict.keys() else i )"	1	1
data_frame['FamilySize'] = data_frame['Parch'] + data_frame['SibSp'] + 1	1	1
"cabin_only[""Deck""] = cabin_only[""Cabin""].str.slice(0,1)"	1	1
test_data[['PassengerId']].values	1	1
data_test.drop(['passengerid'], axis=1, errors='ignore')	1	1
X2.values	1	1
titanic['Sex'] = le.transform(titanic['Sex'])	1	1
data.join(data_embarked)	1	1
df_train['Age'] = imp.transform(df_train[['Age']])	1	1
data['Deck'] = data.Cabin.str.extract('([A-Za-z]+)',expand=False)	1	1
traind['Survived'].groupby(pd.qcut(traind['Fare'],5)).mean()	1	1
"train['Cabin_Lett']=train['Cabin_Lett'].replace(""A"",1).replace(""B"",2).replace(""C"",1).replace(""0"",0).replace(""D"",2).replace(""E"",2).replace(""F"",1).replace(""G"",1).replace(""H"",0).replace(""T"",0)"	1	1
titanic_train.groupby(['Embarked']).count()	1	1
df_train['Title'].head()	1	1
"df[""Name""].apply(get_title)"	1	1
train['Name_Title']	1	1
train_df['Sex'] = train_df[['Sex','Age']].apply(addChild, axis = 1)	1	1
df.groupby('Survived').Survived.count() # of the given examples 549 people died while only 342 survived.	1	1
comb_data['SibSp'].replace([5, 8],[4, 4], inplace=True)	1	1
X_train.drop('Sex_female',1)	1	1
np.append(cost_history, acc)	1	1
titanic.loc[(titanic['Fare']>14.454)&(titanic['Fare']<=31),'NFare']=2	1	1
"train.drop([""Name"",""Ticket"",""PassengerId"",""Embarked"",""Cabin""],inplace=True,axis=1)"	1	1
embarked_val_xt.div(embarked_val_xt.sum(1).astype(float), axis=0)	1	1
df['famsurrate'] = np.where(df['famsurrate']==np.inf , 0, df['famsurrate'])	1	1
ave_age['Title'].tolist()	1	1
train_df[['Deck', 'Survived']].groupby(['Deck'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
cv_score.append(score)	1	1
df['Age'].mode()[0],	1	1
titanic_df['Age_group'].value_counts()	1	1
submission['Survived'] = predicted_values	1	1
data['companions']=0	1	1
r.append(1)	1	1
test.drop(['PassengerId','Cabin'],axis=1,inplace=True)	1	1
train.drop_duplicates(inplace=True)	1	1
df.drop(['Age','Cabin','Ticket','Fare','Embarked'],axis=1) #eliminate columns I don't want	1	1
test_1.info()	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Capt', 'Rare')	1	1
ax[1].set_title('Survival Rate by Pclass and Sex')	1	1
test_old.shape	1	1
test.loc[:, 'Cabin'] = test.loc[:, 'Cabin'].fillna('None')	1	1
test.loc[(test['Age'] <= 16) & (test['Title'] !='Mrs'),'Child'] = 1	1	1
res['ProbaMax'] = res[models_list].max(axis=1)	1	1
k_scores.append(accuracy)	1	1
predict.head(5)	1	1
train_df.loc[(train_df['Title'] == title),'Age'].mean()	1	1
dft.Embarked.fillna('S',inplace=True)	1	1
data['Sex'] = data['Sex'].map(lambda x: 0 if str(x) == 'male' else 1) # Changing sex (M/F) into binary values	1	1
"test.loc[(test[""Age""].isnull()), ""Age""] = test_Age_predictions"	1	1
axes[1].set_ylabel('# Passengers')	1	1
test_df.replace('Q',1)	1	1
test_df.head(1)	1	1
plt.boxplot(x=data1['FamilySize'], showmeans = True, meanline = True)	1	1
data.loc[ data['Age'] <= 17, 'Age'] = 1	1	1
df['lname'] = df.name.apply(lambda x: x.split(' ')[0])	1	1
train_X.drop([ 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Title', 'FareBin', 'AgeBin'],axis=1)	1	1
"X_logistic[""Survived""]"	1	1
"df.drop([""PassengerId"", ""Name"", ""Ticket"", ""Cabin""], axis=1, inplace=True)"	1	1
df_best.sort_values('Scores',ascending=False,inplace=True)	1	1
combined_data['Age_Cat'].value_counts()	1	1
data.loc[(data.Fare>7.9)&(data.Pclass==3), 'PassengerCat']=4	1	1
"data.drop([""Ticket"", ""Name"", ""Embarked""], axis=1)"	1	1
train.groupby(['Survived','Embarked']).count()['PassengerId']	1	1
"test.drop(columns=""Name"")"	1	1
data3.drop(['Pclass','Name','Sex','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Age'], axis=1)	1	1
acc_mlp_list.append(mlp.score(X_cv,Y_cv))	1	1
original_train_df['Survived'].value_counts()	1	1
"train[[""Ports"", ""Survived""]].groupby(['Ports'], as_index = False).mean()"	1	1
tit_df_test['Embarked'].replace(['S','C','Q'],[1,2,3],inplace=True)	1	1
df.loc[(df.Pclass == 3) & (df.Embarked == 'S'),'Fare'].median()	1	1
train['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
data.dropna(thresh=0.8*len(data))	1	1
comb['LeadingDigit'] = comb['TNumeric'].apply(lambda x : int(str(x)[0]))	1	1
dataset['Fareband'] = dataset['Fareband'].astype(int)	1	1
data['Fare'] = data['Fare'].fillna(7.75)	1	1
test['title'] = [i.replace('Dona', 'rare') for i in test.title]	1	1
df_test['Embarked'] = df_test['Embarked'].fillna(df_test['Age'].mean())	1	1
"data_test.drop(""Cabin"", axis=1, inplace = True)"	1	1
pipelines.append(('ScaledLDA', Pipeline([('Scaler', StandardScaler()), ('LDA', LinearDiscriminantAnalysis())])))	1	1
check_data.values	1	1
all_data.join(one_hot_pclass)	1	1
X['has_Cabin'] = ~X_orig.Cabin.isnull()	1	1
plt.rcParams['figure.figsize'] = (16, 6)	1	1
train['Shared_ticket'] = 0	1	1
test_df_nage[['Pclass', 'Fare', 'Family', 'Sex_d']]	1	1
df['FamSize2'] = df['FamSize2'].astype(str) #convert from category dtype	1	1
dataset['Initial'] = dataset['Initial'].replace('Mme', 'Mrs')	1	1
"train[""Age""] = train[""Age""].fillna(train[""Age""].mean())"	1	1
df.Title.replace(['Mlle.','Mme.','Ms.'],['Miss.','Mrs.','Mr.'],inplace=True)	1	1
train['Sex']=train.Sex.map({'female':0,'male':1})	1	1
titanic['SurnameId'] = titanic.groupby('Surname').ngroup().add(1)	1	1
train_set.drop('Parch', axis = 1, inplace = True)	1	1
"train[""Fare""][train[""Survived""] == 1].plot(kind='hist', alpha=0.6, figsize=(15,3),bins=100, xlim=(0,60))"	1	1
feature_list.append(temp)	1	1
test_df['Sex']=le.transform(test_df['Sex'])	1	1
test_set['Survived'] = clf_ch.predict(test_set_data)	1	1
data_test_trans['PassengerId']	1	1
testData['IsMale'] = testData.Sex.cat.codes	1	1
data['Embarked'].replace('S', 1, inplace=True)	1	1
data_train.loc[:,['Survived','Sex']].groupby(['Sex']).count()	1	1
dataset.loc[ dataset['Fare'] <= 15, 'Fare'] = 0,	1	1
df['CabinMissing'] = df['CabinMissing'].apply(int)	1	1
submission.to_csv('OptimisedDeepLearning04.csv', index=False)	1	1
test['has_cabin'] = test['Cabin'].apply(lambda x:0 if type(x) == float else 1)	1	1
data['Title']=data['Name'].str.split(',',expand=True)[1].str.split('.',expand=True)[0]	1	1
test_predictions['majority_voting_all_models'] = test_predictions[first_level_models].apply(lambda x: x.value_counts().index[0], axis = 1)	1	1
X_df.fillna(0).as_matrix()	1	1
train.groupby(['Pclass','Survived']).PassengerId.count().unstack()	1	1
test['Survived'] = a	1	1
test4.drop(['SibSp', 'Parch'], axis=1)	1	1
"submission_rfc[""PassengerId""] = test[""PassengerId""]"	1	1
clfs.append(ExtraTreesClassifier(random_state=seed))	1	1
df.loc[index,'SIBSP_6_7']=1	1	1
"train_df.loc[_l-1,""Survived""]"	1	1
full.loc['test']	1	1
"df[""Title""] = df.Title.apply(lambda f: 'Miss' if f in miss else f)"	1	1
df.corr().loc['Survived']	1	1
ax1[2].hist(df_3c[df_3c.Survived == 1].Age, bins=10, range=(0,100))	1	1
df.Title.replace(title_map)	1	1
np.where(submission[variable].isin(frequent_cat), submission[variable], mode_label)	1	1
submissions.head(10)	1	1
train_df[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(by='Survived',ascending= False)	1	1
data.Age.loc[(data.Age<0) & (data.parents==1) & (data.Personal_Titles=='Mr')] =    data.Age[(data.Age>=0) & (data.parents==1) & (data.Personal_Titles=='Mr')].median()	1	1
"test.loc[test['Embarked'] == ""C"", 'Embarked'] = 3"	1	1
train['Name'].str.contains('Mrs.')	1	1
"predictors2[""Pclass_Fare""] = predictors2.Pclass * predictors2.Fare"	1	1
original_test['Age'].mean()	1	1
trainNMD['Survived'].ravel()	1	1
trainSet['Survived'][trainSet.Pclass == 2].value_counts()	1	1
test['Survived'] = 1	1	1
df_test.drop(['Name'],axis=1)	1	1
pred.append(leaf.pred_class)	1	1
test_age_train['Age'] = prediction	1	1
dataset.loc[(dataset.Age.isnull()), 'Age'] = dataset.Age.median()	1	1
test['P2'] = np.array(test['Pclass'] == 2).astype(np.int32)	1	1
"X_test.drop(""CabinBool"", axis = 1)"	1	1
train_data.loc[train_data['Survived']==1,:]	1	1
train_age.AgeCluster.isnull().sum() == 0	1	1
self.values.idxmax()	1	1
df_titanic_train['Survived']	1	1
train_data[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()	1	1
full.iloc[-10:]	1	1
"dataset_t[""Fare""].fillna(dataset_t[""Fare""].dropna().mode()[0], inplace=True)"	1	1
port.loc[port['Embarked']=='Queenstown']	1	1
data_df['TicketString'] = data_df['Ticket'].str.extract(r'([A-Za-z]+)', expand=False)	1	1
merged.Family_size.replace(to_replace = [6, 7, 8, 11], value = 'large', inplace = True)	1	1
"df_test['Has_Cabin'] = df_test[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
inputData['Age'].values.tolist()	1	1
"dataset.drop(labels = [""Ticket""], axis = 1, inplace = True)"	1	1
"dataset[""Cabin_Flag""] = dataset[""Cabin""].notnull().replace({True:1, False:0})"	1	1
triple_data['Triple'] = triple_data.Pclass.map(str) + triple_data.Sex + triple_data.Embarked	1	1
"my_res.to_csv(""Titanic_Pred_Sub.csv"",index=False)"	1	1
test['Age'] = test[['Age', 'Pclass']].apply(fill_age, axis=1)	1	1
entire.columns.values	1	1
X_train['isOutlier'] = y_pred	1	1
survived['Age'].plot.hist(alpha=0.5, color='red', bins=50)	1	1
df['fare_T'] = df.apply(lambda x: 2 if (x['Fare'] >= 15 and x['fare_T'] < 31) else x['fare_T'], axis=1)	1	1
train_df['Cabin'].isnull().value_counts()	1	1
"submission.to_csv(""titanic_submission_randomforest.csv"", index=False)"	1	1
"train[""Fare""].hist()"	1	1
data_train_all.Fare.min()	1	1
np.mean(lr_scores)	1	1
dataset['Title'] = dataset['Title'].replace(['Capt', 'Don', 'Major', 'Sir'], 'Sir')	1	1
"data[""FamilySize""] = data[""SibSp""] + data[""Parch""] + 1"	1	1
AverageFamilies.loc[(AverageFamilies['Sex']=='male') & (AverageFamilies['Age']>18)].Survived.mean() #20% Survival Rate for these men	1	1
df_train['CabinGrp'] = df_train.loc[:,'Cabin'].str[:1]	1	1
"axs[1].set_title(""Age Distribution after imputing missing values"")"	1	1
df_train['Age'].mean() # 年齢の平均値を算出	1	1
train.loc[(train['Survived']==1),'Age']	1	1
rawdata.ix[(np.isnan(rawdata.Age)) & (rawdata.Survived == 0), 'Age']=deadAgeAvg	1	1
train_df.drop(outliers_list, inplace=True)	1	1
"dftrain[""Age""].std()"	1	1
dataset['title'].value_counts()	1	1
"train[[""Ticket_group"", ""Survived""]].groupby(['Ticket_group'],as_index=False).mean().sort('Survived')"	1	1
df_train.loc[df_train['Sex'] == 'female', 'Sex'] = 1	1	1
"train.at[26,""Age""]=26"	1	1
train4['Embarked'] = train4['Embarked'].fillna('S')	1	1
df['Age'] = pd.cut(df['Age'], 5, labels=[0, 1, 2, 3, 4])	1	1
raw_train['Deck'] = raw_train['Cabin'].apply(lambda x: x[0])	1	1
titanic_df['Embarked'] = titanic_df['Embarked'].apply(embarked)	1	1
train.groupby('Title')['Age'].transform('mean')	1	1
trainSet.Fare.hist()	1	1
roc_values.append(roc_auc_score(y_test,y_score))	1	1
titanic['Surname'] = titanic['Name'].apply(lambda x: x.split(',')[0].strip())	1	1
new_data.drop(labels=useless_data,axis=1)	1	1
"train.drop(""Survived"", 1)"	1	1
train_df.append( test_df , ignore_index = True )	1	1
"test_df[""Fare""].fillna(test_df.Fare.median(),inplace=True)"	1	1
"train[""Title""] = [i.replace('Major', 'Military') for i in train.Title]"	1	1
"combined[""Pclass_Sex""] =  combined[""Sex""] +  combined[""Pclass""]"	1	1
test_copy['age_division'] = age_division	1	1
my_feature_columns.append(tf.feature_column.numeric_column(key='SibSp'))	1	1
test_set[['PassengerId', 'Survived']]	1	1
tot.head()	1	1
good_estimator_tuples.append((estimator_name, clone(models[estimator_name][scoring_refit])))	1	1
"_df.drop([""age"", ""sex"", ""childness""], axis=1, inplace=True)"	1	1
"ax.hist(train[""Embarked""])"	1	1
train['FamilySize']=train['SibSp']+train['Parch']	1	1
train_dataframe_complex.values	1	1
"pclass[""Class2""] = (pclass[""Pclass""] == 2).astype(int)"	1	1
survived_parch.fillna(0, inplace=True)	1	1
train.FamilySize.hist(train.Pclass)	1	1
df_train['SibSpBool'] = (df_train['SibSp'] > 0)	1	1
"test_df[""Fare""] = test_df[""Fare""].fillna(6.2375)"	1	1
"dataset.loc[(dataset[""Fare""] > 7.91) & (dataset[""Fare""] <= 14.454), ""Fare_cat""] = 1"	1	1
train_df.drop(['Survived'], axis=1).values	1	1
"train[""Sex""] = labelEncoder_X_1.fit_transform(train[""Sex""])"	1	1
df3_train_Y.head()	1	1
train['Embarked'] = train['Embarked'].fillna(method='ffill')	1	1
df_test['Fare'].fillna(df_train['Fare'].median(),inplace=True)	1	1
train['Passenger']=train[['Age','Sex']].apply(male_female_child, axis=1)	1	1
test.sort_index(axis=1)	1	1
model.add(Dense(24, activation='relu'))	1	1
X['Alone'] = [1 if i<2 else 0 for i in X['Family Size']]	1	1
X['Embarked']=labelencoder.fit_transform(X['Embarked'])	1	1
train_df.Age.hist(bins=10,color='teal')	1	1
"full_data.loc[full_data['TravelSize'] >= 5, 'TravelGroup'] = ""big"""	1	1
titanic.groupby('Pclass').mean()['Fare'].plot(kind='bar',figsize=(15,8), ax = ax)	1	1
np.round(decision_tree.score(X_valid_norm, Y_valid), 4)	1	1
df['Fare_scaled'] = scaler.transform(df[['Fare']])	1	1
train['FamilySize'].value_counts()	1	1
train[['Embarked','Survived']].groupby(['Embarked'], as_index=False).mean()	1	1
data_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='FamilySize', ascending=True)	1	1
test_df['Title'] == 'Master'	1	1
pina_submission.describe()	1	1
my_imputer.transform(imputed_one_hot_test_plus)	1	1
ax2[1].hist(df_dead.Parch, bins=10, range=(0,6))	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),                        'Age'] = guess_ages[i, j]	1	1
titanic.head(5)	1	1
x_test_final.head()	1	1
X_test['Fare'] = imr1.fit_transform(X_test[['Fare']].values)	1	1
final_test['Survived'].head()	1	1
df_test['IsTrain'] = False	1	1
"dataset_med.loc[2,3][""Age""]"	1	1
train_df['AgeGroup'] = train_df['AgeGroup'].replace(age_map)	1	1
test['Fare_num']=label.fit_transform(test['Fare_bin'])	1	1
train['Fare'] = train.Fare.fillna(train.Fare.mean())	1	1
X_scaled.loc[ntr:ntr+ncv-1]	1	1
"original_train[""Age""].describe()"	1	1
"parts[0].replace(""."", """")"	1	1
train_copy.loc[(train_copy['Age'] > 60) & (train_copy['Age'] <= 70), 'Age_Category'] = 6	1	1
"full_data[""Title""] = full_data[""Name""].apply(map_title)"	1	1
le.transform(tr2[k])	1	1
test.drop(['Name'], axis=1, inplace = True)	1	1
"combined[""t_nShare""]=t_nShare"	1	1
model.add(Dense(8, activation='tanh'))	1	1
test_data['Sex'] = test_data['Sex'].apply(personType)	1	1
"data_test[""Age""] = data_test[""Age""].fillna(data_train.groupby([""Pclass"",""Parch""])[""Age""].transform(""mean""))"	1	1
"titanic_df[""Age""] = titanic_df[""Age""].fillna(na_number)"	1	1
"train_data_1[""Survived""]"	1	1
test['TicketNum'] = test['Ticket'].apply(lambda x: x[x.find(' ')+1:])	1	1
Survived.mean()/data[data.Pclass==3].Survived.mean()	1	1
submission.to_csv('titanic_survival_op1.csv', index=False)	1	1
"data.drop(""Embarked"",axis=1)"	1	1
test.select_dtypes(include=['int64'])	1	1
dataset.loc[(dataset['Fare'] <=6.2) & (dataset['Fare'] > 3.44)  ,'Fare']=3	1	1
test_df.drop(['Name'], axis = 1)	1	1
train_df.loc[train_df.Title.isin(rare_title), 'Title'] = 'Rare'	1	1
scores['test_score']	1	1
"titanic_test_dataframe[""NormalizedFare""] = np.log1p(titanic_test_dataframe[""Fare""])"	1	1
test_use.iloc[:, 1:]	1	1
raw_df.apply(normalize_age,axis=1)	1	1
test_df.loc[(test_df['Age'] > 28) & (test_df['Age'] <= 37), 'Age'] = 2	1	1
data.Embarked.copy()	1	1
dataTrain.Age.fillna(dataTrain.Age.mean(), inplace = True)	1	1
df.iloc[len(train):, :].copy()	1	1
dt_rfecv.transform(dt_rfecv_final_test)	1	1
titanic_df.isnull().any()	1	1
df_train.loc[ df_train['Age'] > 64, 'Age']                            = 4	1	1
tt['Cabin'] = tt['Cabin'].fillna('U') # U: unknown	1	1
test_data.drop(['Name', 'Ticket','Cabin'], axis = 1)	1	1
enriched_train_data.drop(exclude_features,axis=1)	1	1
"test[""Family_flag""].loc[test[""Family""] > 0] = 1"	1	1
testds['Embarked']=le.fit_transform(testds['Embarked'])	1	1
train.pivot_table(index='SibSp', columns='Survived', aggfunc='count').Age	1	1
raw_train.loc[raw_train['Pclass'] == 1, ['Fare', 'Embarked']].groupby('Embarked', as_index=True)	1	1
titanic_df['Age'] = titanic_df['Age'].fillna((titanic_df['Age'].mean()))	1	1
processed_data.drop('Cabin', axis = 1, inplace = True)	1	1
model.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu', input_dim = 75))	1	1
train_scores.append(train_score)	1	1
le.transform(df_test[features])	1	1
data.loc[(data.Age.isnull())&(data.Title==3)&(data.Pclass==2), 'Age']=32	1	1
base.append(l)	1	1
fulldata['family_num'] = fulldata.Parch + fulldata.SibSp + 1	1	1
one_hot_encoded_training_predictors.drop(['Sex_female','Embarked_C'],axis=1)	1	1
data_submission.to_csv('submission.csv', index = False )	1	1
skb.transform(x_fit)	1	1
target_dataset.head()	1	1
"sns.boxplot(x=""Parch"", y=""Survived"", hue=""Sex"", data=data_train, palette=""PRGn"");"	1	1
result_test8.to_csv('Titanic_prediction_ashish.csv', columns=['PassengerId', 'Survived'], index=False)	1	1
df_submit['Relatives'] = df_submit['SibSp'] + df_submit['Parch']	1	1
"train_df[""fare""].hist(bins=50)"	1	1
join_data['Name'].head(5)	1	1
test_set.fillna(test_set['Fare'].mean())	1	1
data_cpy['Title']=data_cpy['Name'].str.split(', ',expand=True)[1].str.split('.',expand=True)[0]	1	1
test_y_pred.astype(int)	1	1
train_df.describe(percentiles=[.1,.2,.3,.4,.5,.6,.7,.8,.9,.68,.69,.75,.99], include=[np.number])	1	1
"df_train[""Fare""] = df_data['Fare'][:891]"	1	1
dataset['Title'] = dataset['Title'].replace(['Don', 'Capt', 'Col', 'Major', 'Sir', 'Jonkheer', 'Rev', 'Dr'], 'Honored')	1	1
df_train.groupby('Survived').Fare.hist(alpha=0.6)	1	1
titanic.loc[titanic['Embarked']=='Q', 'Embarked'] = 2	1	1
whole.set_value([581,1133],'Fid',76) #display(whole[whole.Name.str.contains(r'Jacobsohn|Christy')])	1	1
imputer_test.loc[(imputer_test['Pclass'] == 1) & (imputer_test['Age'].isnull()), 'Age'] = meanAgePclass1	1	1
misclassified_df.head()	1	1
correlation.sort_values(ascending=False)	1	1
test.iloc[:, 8:9] = imputer.transform(test.iloc[:, 8:9])	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'the Countess', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona', 'Ms', 'Mme', 'Mlle'], 'Rare')	1	1
df_all['_Cabin_encoded']=pd.Categorical(df_all['_Cabin']).codes	1	1
df.fare.fillna(fare_S.mean())	1	1
"train_data[""Cabin""][train_data[""Cabin""].notnull()]:"	1	1
data.loc[1043,'Fare'] = data[(data.Pclass==3) & (data.Embarked=='S')].Fare.median()	1	1
train['Embarked'].unique():	1	1
dataset.loc[(dataset['Fare'] > 10.5) & (dataset['Fare'] <= 13), 'Fare'] = 1	1	1
tot.FamDeath.iloc[i] = family.Survived.mean()	1	1
test.loc[test['Embarked']=='S','Port']=0	1	1
df1['Embarked'] = np.where(df1['Embarked']== 'C', 0 ,df1['Embarked']  )	1	1
kaggle['Cabin'] = kaggle['Cabin'].fillna(0)	1	1
df2.drop(['Survived', 'PassengerId'], axis = 1, inplace = True)	1	1
data_train['Cabin'].isnull().sum()	1	1
dataset.loc[(dataset['Fare'] > 256.165) & (dataset['Fare'] <= 384.247), 'Fare'] = 3	1	1
cnf_matrix[1][1]/(cnf_matrix[1][1]+cnf_matrix[0][1])	1	1
train.loc[:,['Pclass','Survived','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
ax[1].set(xlabel='max_iter', ylabel='Accuracy')	1	1
test_dataset['Title'] = test_dataset.Name.str.extract('([A-Za-z]+)\.')	1	1
train.loc[(train['Age']>=32)&(train['Age']<48),'Age']=3	1	1
train['SibSp'] = pd.DataFrame(sib_scaled)	1	1
lgb_params['sub_feature'] = 0.80	1	1
combine.iloc[0: 891, :]	1	1
"test[""Parch_scaled""] = minmax_scale(test[[""Parch""]])"	1	1
x_train_categorical.info()	1	1
ax[1][0].set_ylabel('Class', rotation=0, labelpad=80)	1	1
scores.loc['scores'] = list_scores	1	1
reindex_titanic_train_dataframe.head(num_training)	1	1
dataframe['FamilySize'] = categories	1	1
df.drop('Title',inplace=True,axis=1)	1	1
titanic_data.iloc[:,[2,4,5,6,7,9,10]]	1	1
concat_set['Age'][np.isnan(concat_set['Age'])] = age_null_random_list	1	1
t.iloc[1,:]	1	1
df_train.drop('Survived', axis=1).values.reshape((891, 10))	1	1
"titanic_df.groupby('Pclass')['Age'].mean().plot(kind = 'bar', figsize=(10,10), title=""Mean age of passengers travelling"").set_ylabel(""Mean"")"	1	1
predictions.apply(lambda x: testData(createSplitColinear(train), x), axis=1)	1	1
modeblend.head()	1	1
X_train['missing_values'] += X_train[col + '_missing_data']	1	1
train_set[['Fare', 'Survived']].groupby(['Fare'],as_index=False).mean()	1	1
all_data.Name.head(10)	1	1
gender.describe()	1	1
Cabin[0] == 'B':	1	1
full_bin_final.copy()	1	1
X_train.loc[:,'Sex'] = X_train['Sex'].replace(['female','male'],[0,1]).values	1	1
died_class_3.shape[0]	1	1
train.loc[:,'Embarked'].fillna('S',inplace=True)	1	1
dataset.loc[(dataset.Age.isnull())&(dataset.Sex==i)&(dataset.Pclass==j+1), 'Age'] = guess_ages[i,j]	1	1
data['SibSp_bin'] = data.SibSp.apply(lambda x: 6 if x > 2 else x)	1	1
"test_data[""Age""] = test_data_imputed"	1	1
"nan_child[""Age""].mean()"	1	1
train_get_dummy.head()	1	1
test_df['Title'] = test_df['Name'].map(extract_title)	1	1
best_models.append((model_class, gs.best_estimator_, gs.best_params_, gs.best_score_))	1	1
data_df['Title'] = data_df['Name'].str.extract(r' ([A-Za-z]+)\.', expand=False)	1	1
dc['Age']  = dc.groupby(['female','Title'])['Age'].transform(lambda x: x.fillna(x.median()))	1	1
clfs.append(GradientBoostingClassifier(random_state=seed))	1	1
all_data.at[i,'Title']= 'Mr'	1	1
df_train.select_dtypes('number').join(y_train)	1	1
dataset['Age'].loc[i] = age_median	1	1
embark_dummies_train.head()	1	1
"test_set[""Pclass""] = StandardScaler().fit_transform(test_set[""Pclass""].values.reshape(-1,1))"	1	1
df['EmbarkCode'] = df['Embarked'].map({'S':0,'C':1,'Q':2})	1	1
train_df.loc[(train_df['Title'] == title),'Age'].std()	1	1
df['family_size'] = df.SibSp + df.Parch + 1 #minimum 1 family member	1	1
train.calculated_fare.mean()	1	1
train_df.replace('female',0)	1	1
grouped_fare_median_train.reset_index()[['Pclass','Embarked', 'Fare']]	1	1
df_test.loc[df_test['FamilySize'] == 0, 'FamilySize'] = 1	1	1
df_j['age'].median() ## .dropna() が抜けてる	1	1
imputer.transform(testCopy)	1	1
df[['Name', 'Sex', 'Age']].sort_values('Age')	1	1
titanic_df.loc[highest['age'],['age', 'Survived']]	1	1
"pred.to_csv(""predictions.csv"", index=False)"	1	1
Train_data.loc[Train_data['Embarked'] == 'S','Embarked'] = 0	1	1
combine['Fare_cat'].value_counts()	1	1
test_df['PassengerId'] # keep it for the end	1	1
dataset['Title']=dataset['Title'].replace(['Lady','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False)['Survived'].agg(['mean','count'])	1	1
footballers.iloc[:, 12:17]	1	1
dataset[['Age', 'Fare']] = std_scale.transform(dataset[['Age', 'Fare']])	1	1
x_test['Name_Len_char'] = x_test['Name'].map(lambda x: len(x))	1	1
test_df.groupby('Ticket').size().reset_index()	1	1
test4['IsAlone'] =  1	1	1
df['isMale'] = np.where(df.Sex=='Male', 1, 0)	1	1
curr_row[3]	1	1
svc_cv.best_params_['kernel'],	1	1
combine_df.drop('Title',axis=1)	1	1
testData['Age_band']=0	1	1
train_df.groupby('isAlone').size()	1	1
Train_Master['FamilySize'] = Train_Master['FamilySize'].map({1:'1',2:'2',3:'2',4:'2',5:'3',6:'3',7:'3',8:'3',11:'3'})	1	1
Test_Master['Age'] = Test_Master['Age'].astype(int)	1	1
test_df.loc[(test_df.Fare.isnull())&(test_df.Pclass==3), 'Fare']	1	1
train_df['Age'].unique()	1	1
"train[""Famille_4""] = train[""FamilleMember""] == '>4'"	1	1
"testing.loc[testing[""Title""] == ""Other"", ""Title""] = 6"	1	1
ax[2].set_title('Variation in Model Build Time w.r.t to Tolerance tol for different Solvers')	1	1
full.shape[0] == full['PassengerId'].nunique():	1	1
train_x.shape[1]	1	1
"title_2.append(test[""Name""][ind].split(',')[1].split('.')[0])"	1	1
label_encoder.transform(np.array(test_features[col].astype(str)).reshape((-1,)))	1	1
"dataset.loc[(dataset[""Fare""]>14.454) & (dataset[""Fare""]<=31), ""Fare""]=2"	1	1
"data[""Deck""] = data[""Cabin""].str[0]"	1	1
"dec[""Age""].plot(kind='hist',alpha=0.5,color='blue',bins=11,title =""Death/Survival count by by age, na are filled as -0.5"" )"	1	1
titanic['PassengerId'].unique()	1	1
data.Fare_bin.replace([0,1,2,3],[0,1,2,3], inplace = True)	1	1
X_test_age.drop(['PassengerId', 'Age', 'Name'], axis=1)	1	1
data.groupby('Title2')['Age'].mean()	1	1
train.loc[(train['PaxclassA']==1),'Class1'] = 1	1	1
dataset['Embarked'] = encoder_embarked.transform(dataset['Embarked'])	1	1
df['age'] = df.age.fillna(0)	1	1
model_data.loc[(model_data.Pclass == 2)&(model_data.Title == 0)&model_data.Age.isnull(),('Age')] = 3	1	1
test.drop(drop_features, axis = 1)	1	1
"Test[""Sex""]=Test[""Sex""].map(sex_map)"	1	1
data.loc[data.Survived==0, col].value_counts()	1	1
df_test.loc[df_test['Embarked'] == 'Q', 'Embarked'] = 2	1	1
"matplotlib.rcParams['mathtext.fontset'] = ""cm"""	1	1
Xmean_test.Age.fillna(train_cl.Age.mean(skipna=True))	1	1
df_train.shape[0]/df_test.shape[0]	1	1
data.loc[~data['Cabin'].isnull(), ['Cabin']] = 1	1	1
"train_df.loc[train_df[""Title""] == ""Major"", ""Title""] = 'Rare Title'"	1	1
train_data['Cabin'].fillna('U', inplace=True)	1	1
df_output.to_csv('submission.csv', index=False)	1	1
dataset['Age'].fillna(dataset['Age'].median(),inplace=True)	1	1
dataset.iloc[:, [1,2,4,5,6,7,9]]	1	1
ax[0].set_title('Survival per Sex')	1	1
errors['accuracy'] = [accuracy_score(y_test, y_pred) for y_pred in clf.staged_predict(X_test)]	1	1
test['Pclass'][x]  #Pclass = 3	1	1
rcParams['axes.facecolor'] = '#eeeeee'	1	1
full_data['Pclass'] = full_data['Pclass'].astype('category')	1	1
df.loc[~df.TyCabin.isin(['C', 'B', 'N']), 'TyCabin'] = 'R'	1	1
data4.drop(['Pclass','Name','Sex','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Age'], axis=1)	1	1
"axes[1].set_title(""Survival Rate Based on Class"")"	1	1
"new_df.Fare.astype(""float"")"	1	1
"train[""Fare_fillin""] = train[""Fare""]"	1	1
data['CatFare']=pd.qcut(data.Fare,q=4,labels=False)	1	1
df_titanic_test_mod['Sex'].replace('male',1,inplace=True)	1	1
"clean_data2[""PassengerId""],"	1	1
df_reduced['Survived'].values	1	1
one_hot_encoded_training_predictors_out.head(20)	1	1
X_test.Cabin.apply(clean)	1	1
df.drop(['PassengerId','Name','Ticket'], axis=1, inplace=True)	1	1
titanic_data.drop(['FareBand'], axis=1)	1	1
data.Survived.mean(),	1	1
test_dataset.loc[test_dataset.Fare.isnull(), :]	1	1
"combined.loc[pid,""group_type""] == ""acquaintance"":"	1	1
df_train.age.fillna(age_mean, inplace=True)	1	1
submission1.to_csv('votinggood.csv', index=False)	1	1
test['Fare'] = test['Fare'].fillna(0)	1	1
comb.shape	1	1
result_df.to_csv('TitanicPredictions-NN.csv')	1	1
passengers['Survived'].copy()	1	1
data.is_copy = False	1	1
test.drop(drop_features , axis=1 , inplace = True)	1	1
titanic_data.head(n=7)	1	1
train_df['Age'] = imp_median_age.transform(train_df[['Age']]).ravel()	1	1
df.loc[df['Cabin'].isnull(), 'Cabin'] = 0	1	1
df.groupby(['Sex','Pclass'])['Fare'].mean().unstack().stack()	1	1
"Train_Master['Title'] =Train_Master['Name'].str.split(pat="","",expand=True)[1].str.split(pat='.',expand=True)[0].str.strip()"	1	1
df_train['Fare'].mean()	1	1
data.loc[(data.passenger_fare>23.374) & (data.passenger_fare<=25.25) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>23.374) & (data.passenger_fare<=25.25) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
total['Fare'].fillna(value = total[total.Pclass==3]['Fare'].median(), inplace = True)	1	1
row['Title'] == 'the Countess':	1	1
combined['SibSp']	1	1
df['Ticket_count'] = df.groupby(['Ticket'])['Ticket'].transform('count')	1	1
train['c_std']	1	1
test_df['Name_Title'] = test_df['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	1	1
submission['PassengerId'] = test_ds['PassengerId']	1	1
data['qtd_same_ticket'] = data.Ticket.apply(lambda x: same_ticket[x])	1	1
"test_ToPred.loc[test_ToPred.Salutation == 'Mrs','Age'] = test_ToPred['Age'].fillna(means[""Age""][""Mrs""])"	1	1
axes[1].hist(x=[training_data.Fare, pass_survived_fare, pass_dead_fare], bins=5, label=['Total', 'Survived', 'Dead'],         log=True)	1	1
test['FamilySize'] = test.SibSp + test.Parch +1	1	1
counts['female']	1	1
plt.boxplot(data1['FamilyMembers'], showmeans = True, meanline = True)	1	1
"test_df['TravelBuds']=test_df[""SibSp""]+test_df[""Parch""]"	1	1
test_agg.columns.levels[1][:-1]:	1	1
titanic_df['Age_filled'] = titanic_df['Age_filled'].astype(int)	1	1
"full.set_value(full[""Title""] == ""Rare Title"", ""Title"", 4)"	1	1
m.add(Dense(1, activation='sigmoid'))	1	1
"a.loc[(a[""Title""] == ""Miss"") & (a.Age.isnull()), [""Age""]] = miss_age"	1	1
df_train.drop(['Survived','PassengerId','Ticket'],axis=1,inplace=True)	1	1
accuracies.append(rdmf_score)	1	1
my_submission.to_csv('submission.csv')	1	1
"data[""Name""] = data[""Name""].str.replace(""Lady"",""Miss"")"	1	1
dataset.loc[(dataset['Age'] > 76) , 'Age'] = 9	1	1
"training.loc[training[""Title""] == ""Other"", ""Title""] = 6"	1	1
combined_df['Age'].median()	1	1
train_data['Sex_Indicator']=train_data['Sex'].map({'male':1,'female':0}).astype(int)	1	1
test['T5'] = np.array(test['Title'] == 'Rare').astype(np.int32)	1	1
data_test['Name_length_scaled'] = scaler.transform(data_test['Name_length'].values.reshape(-1, 1), namelength_scale_param)	1	1
np.empty((kf.get_n_splits(), n_test))	1	1
Xreg_test.loc[:, Xcol + ['Age']]	1	1
oneHot_train.head()	1	1
dftest.head(1)	1	1
X.keys(),	1	1
train.drop('training_set', axis=1)	1	1
df_full.drop(columns=list_drop_features, inplace=True)	1	1
passenger['Pclass'] in [1,2] and (passenger['Age'] < 16 or passenger['Age'] > 75):	1	1
X.keys():	1	1
df_test[['PassengerId', 'Survived']].to_csv('log_reg__feat_eng.csv', index=False)	1	1
train.loc[(train['Fare']>200) & (train['Fare']<=250),'FareCategorical'] = 4	1	1
all_data.groupby('Sex').mean().loc[:, 'Age']	1	1
df.loc[((df.MisAge == 0) & (df.Cabin == 0)) , 'MA_Ca'] = 1 #Age no Cabin	1	1
"non_missing_data1.drop([""Farebin""],axis=1)"	1	1
"df_train[""Family_Size""] = df_train[""Parch""] + df_train[""SibSp""]"	1	1
train['Name'].unique().size	1	1
train.drop(['Name', 'Ticket', 'PassengerId'], inplace=True, axis=1)	1	1
train_data.head(6)	1	1
full_models['set2']['num_attrs'] = ['Fare', 'Age']	1	1
train_df['CategoricalAge'] = pd.cut(train_df['Age'], 5)	1	1
train_data['Title'] = train_data['Title'].replace(['Capt.','Col.','Major.'],'Army.')	1	1
titanic_df['ThirdClass']=titanic_df[['Pclass']].apply(get_thirdclass, axis=1)	1	1
dicCMs.items(): # looping over matrices	1	1
df['Embarked'] = df['Embarked'].fillna('unknown')	1	1
ticket_table['Alive_male_on_ticket'] = data_full.Ticket[(data_full.AgeBin > 1) & (data_full.Survived > 0) & (data_full.IsFemale == False)].value_counts()	1	1
df['Sex_female'] * df['Age_0-10']	1	1
"my_solution.to_csv(""my_solution_scaled_lr.csv"", index_label = [""PassengerId""])"	1	1
all_data.Age.dropna(axis=0, how='all', inplace=False)	1	1
df_test['EmbarkedNum'] = df_test.Embarked.map({'S': 0, 'C': 1, 'Q': 2})	1	1
df.loc[(df.Age < 16) & (df.Parch == 0)]	1	1
df.Fare.fillna(value=df.Fare.mean(), inplace=True)	1	1
family_size.mean()	1	1
test_hard_pred_matrix.loc[:,topmodels(df=test_hard_pred_matrix)]	1	1
train_data.sample(10)	1	1
train['Age'].fillna(train.groupby('Title')['Age'].transform('median'),inplace = True)	1	1
"axes[1].set_title(""Pclass vise Survival rate"")"	1	1
"train_df[""Family""].loc[train_df[""Family""] == 0] = 0"	1	1
dataset_train.values	1	1
combine[1].info()	1	1
"titanic_train.loc[titanic_train[""Age""].argmin()]"	1	1
df.replace({ None: avg_fare }, inplace=True)	1	1
test_df.Embarked.fillna(test_df.Embarked.dropna().mode()[0])	1	1
train_df['Cabin'] = train_df['Cabin'].apply(lambda x: get_random_cabin() if pd.isnull(x) else x)	1	1
train_result.values	1	1
"results[""SGDC""]=test_model(clf)"	1	1
test['Title'] = test['Title'].replace(TITLE).astype('category')	1	1
"AgeSurvived[""Age""] = AgeSurvived[""Age""].astype(int)"	1	1
train_df.loc[train_df['Sex'] == sex, 'Age'].mean()	1	1
titanic_df_test['Age'] = titanic_df_test['Age'].fillna(titanic_df_test['Age'].mean())	1	1
testds.drop('Cabin',axis=1)	1	1
df_test.columns.values.__contains__('PassengerId'):	1	1
train_data[['CabinDeck', 'Fare', 'Pclass']].sort_values('CabinDeck')	1	1
stats.describe(features).variance	1	1
test['Survived'] = Y_pred	1	1
df.drop(drop_columns + ['Survived'], axis=1).iloc[train_size:]	1	1
train[['Pclass', 'Fare']].groupby('Pclass').mean()	1	1
"titanic_df.groupby(['Survived'])['PassengerId'].count().plot(kind=""bar"", figsize = (10,10), grid = 10 ,logy = 0, title = ""No of survivors and casualities "").set_ylabel(""Frequency"")"	1	1
test.drop(['Survived','PassengerId'], axis=1)	1	1
df.Fare.skew()    #Measure of skewness level	1	1
X_train.drop('Name', axis=1)	1	1
test.Age.fillna(-5, inplace=True)	1	1
train['Age'].fillna(train['Age'].median(),inplace =True)	1	1
test_data.Age.isnull().values.any() #检测是否全部补齐数据	1	1
total_data.drop('Cabin', axis = 1) # drop Cabin because it is mostly blank	1	1
raw_test.join(decks_df)	1	1
df['Survived'][df['Sex'] == 'female'][df['Age'] < 18][df['Pclass'] == 3].value_counts()	1	1
titanic['Fare'].plot(kind='hist',bins=50,xlim=(-1,100),figsize=(12,4))	1	1
"le.transform(test[""Sex""])"	1	1
titanic_df.head(2).transpose()	1	1
data.SibSp.hist(bins=50)	1	1
df.loc[:, self.column],	1	1
j.Age.fillna(j.Age.mean())	1	1
titanic.loc[train.index].describe() #Properties of the training set	1	1
"coeff_df[""Correlation""] = pd.Series(logr.coef_[0])"	1	1
testingset.drop(['Fare'], axis = 1)	1	1
train['Prefix']=train.Name.str.replace('(.*, )|(\\..*)', '')	1	1
"data[""Cabin""].unique()"	1	1
titanic.describe(include='all')     # To generate descriptive statitics of combined titanic dataset.	1	1
td.info()	1	1
train_data.fillna(np.nan)	1	1
titanic_train.groupby('AgeRange').count().PassengerId.plot.barh()	1	1
big_X['Age'].loc[ni] = newAges[i]	1	1
df[['Survived', 'Pclass']].groupby('Pclass').count()	1	1
titanic['Embarked'] = titanic['Embarked'].fillna(freq_port)	1	1
titanic.Cabin.fillna( 'U' )	1	1
df.groupby(['Sex','Survived'])['Survived'].count()	1	1
df['AgeFill'] = df['AgeFill']                         .groupby([df['Sex_Val'], df['Pclass']])                         .apply(lambda x: x.fillna(x.median()))	1	1
models.append('LinearSVC')	1	1
"train_df[[""AgeBin"", ""Survived""]].groupby(['AgeBin'], as_index=False).mean()"	1	1
submission_df.to_csv('submission_2.csv')	1	1
"train_data[""Age""] = (train_data[""Age""]-min_fare)/(max_fare-min_fare)"	1	1
important_features.append([str(x),str(i)])	1	1
final_test['Sex'] = final_test['Sex'].apply(transform_sex)	1	1
df['Age']*(1/df['Pclass'])	1	1
hist['loss'][a:b]	1	1
"ALL_DATA[""TravelingAlone""].describe()"	1	1
combine.drop(['Name','Ticket','Cabin', 'SibSp', 'Parch','FirstName'], axis = 1, inplace = True)	1	1
train['Age'].plot.hist(bins=35)	1	1
train_dat['Fare'].max()	1	1
x.loc[train_indices], y.loc[train_indices]	1	1
Submission.head(15)	1	1
"test_dataset.loc[ test_dataset.Fare > test_dataset.Fare.median(), ""Fare_Bound"" ] = 1 # High Fare type"	1	1
data['Fare'][pd.isna(data['Fare'])] = data['Fare'].mean()	1	1
train.drop(feature, axis=1, inplace=True)	1	1
X_test['Fare'] = pd.cut(x = X_test['Fare'], bins=bins, include_lowest=True)	1	1
train.drop(['PassengerId', 'Ticket', 'Cabin'], axis = 1)	1	1
correl_train['Sex01']=(correl_train['Sex']=='male')	1	1
data_set.append(list_take(row, [0, 3, 8, 10], True))	1	1
X_Test.loc[X_Test.Embarked.isnull(),'Embarked']='S'	1	1
"titanic_train.groupby(pd.cut(titanic_train[""Fare""], bins=[0, 20, 40, 60, 80, 100, 300, 600]))"	1	1
train.iloc[outlier_indices] # View outliers to drop	1	1
Train_Master['Age'] = Train_Master[['Age','Pclass']].apply(impute_age,axis=1)	1	1
sns.boxplot(x='Pclass', y='Age', data=df_full)	1	1
age_missing_data.head()	1	1
combined_df['Age'][combined_df['Title'] == 1].mean()	1	1
df['Honoric'] = df['Name'].apply(get_honoric)	1	1
axes[1].set_yticks(range(0, 500, 50))	1	1
conf['clf']	1	1
train.pivot_table(index='Pclass', values='Survived', aggfunc='count').plot(kind='bar', ax=ax[0])	1	1
train.loc[(train.Fare>14.454) & (train.Fare<=31.0),'Fare_cat'] =2	1	1
data['Sex'].value_counts().plot.bar()	1	1
data['Sex'] = data['Sex'].map(gender_map)	1	1
test.drop(['LargeFamily'], axis=1)	1	1
titanic_train.fillna(0) # droping na as Age has a lot of na's, will improvise in the next version by aproximately padding na's of Age.	1	1
data1[['FareBin', 'Survived']].groupby(['FareBin'], as_index=False).mean(),	1	1
df['Fare_Cat']=0	1	1
"traindata.groupby(""SibSp"").Survived.mean().plot(kind=""bar"",figsize=(25,25))"	1	1
comparesion.sort_values(by='Score', ascending=False)	1	1
p.append(pval)	1	1
result.head(20)	1	1
dataset2['Cabin'] = dataset2['Cabin'].map(dicCabins)	1	1
original_test['Male'] = ((original_test['Sex'] == 'male') + 0)	1	1
dataset.iloc[i,2] = n	1	1
test_df['TitleBand'] = test_df.Title.map( lambda x: Titles_dict[x]).astype(int)	1	1
final_test['Fare1'] = final_test['Fare1'].apply(transform_fare)	1	1
df_train['hasCabin'] = df_train['Cabin'].isnull().apply(lambda x: 0 if x == True else 1)	1	1
train_data['Fare'] = train_data['Fare'].interpolate()	1	1
"all_dataset[""Cabin""] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in all_dataset['Cabin'] ])"	1	1
dat['Fare'].fillna( dat['Fare'].median(), inplace = True)	1	1
df.loc[df['Deck']=='E', 'Deck'] = 3	1	1
"result[[""PassengerId"", ""Survived""]]"	1	1
df['FamilyGroup'] = df['LastName']+df['TicketP']+'XX' # replacing last two digits for XX	1	1
Z.shape	1	1
data.describe(include=[np.object, 'category'])	1	1
titanic.sort_values('PassengerId',inplace=True)	1	1
ax[0].set_title('Title Distribution')	1	1
"train.loc[(train[""Age""] > 48)&(train[""Age""] <= 64), ""age_c""] = ""4"""	1	1
combined['Title'] = combined['Name'].apply(lambda x: x.split(', ')[1].split('.')[0].strip())	1	1
df_all.info()	1	1
df_all.groupby('Title')['Age'].agg([np.mean, np.median, np.min, np.max]).to_dict()['median']	1	1
df_train_features.replace(ls,range(len(ls)))	1	1
"train_test[""Embarked""] = train_test[""Embarked""].fillna(""S"")"	1	1
"sns.boxplot(""Survived"", y=""family_size"", data = train)"	1	1
FinalAnswer.to_csv('titanic.csv', index=False)	1	1
"train[[""Survived"", ""Pclass""]].groupby([""Pclass""], as_index=False).mean().sort_values(by=""Pclass"")"	1	1
df['Title'] = df['Title'].replace(['Mlle', 'Ms'], 'Miss')	1	1
id_list.append(temp[0])	1	1
df['parch_1'] = (df.parch == 1).apply(int)	1	1
submission.to_csv('titanic_result.csv', index=False)	1	1
feats['family_size'] = feats['Parch'] + feats['SibSp'] + 1	1	1
X.groupby(idx).min()	1	1
df.groupby(['Pclass']).size()	1	1
train[['Embarked', 'Fare']].groupby(['Embarked'], as_index=False).mean()	1	1
f.to_csv('result.csv')	1	1
test_data['Age'].isnull().sum()	1	1
train_reduced.corr()	1	1
train_file.shape	1	1
pd.isnull(farep)==True:	1	1
training_stats.loc['count', :]	1	1
who_am_i[0] == 'root' else '../../data'	1	1
lgb_params['bagging_fraction'] = 0.7	1	1
df.loc['train'], df.loc['test']	1	1
train[['Pclass','SibSp','Parch','Embarked']]=train[['Pclass','SibSp','Parch','Embarked']].astype(str)	1	1
train_df['Alone'].loc[train_df['Alone'] > 0] = 0	1	1
combine_df.drop('Fare',axis=1)	1	1
X_test.astype(np.float64, copy=False)	1	1
MLA_compare.loc[row_index, 'MLA Parameters'] = str(alg.get_params())#算法参数	1	1
"df_train.groupby(""Title"")[""Age""].transform(""median"")"	1	1
"X_test[""Deck""] = X_test[""Cabin""].fillna('U').map(lambda s: s[0])"	1	1
test_recoded.info()	1	1
"train[[""Survived"", ""Sex"", ""SibSp"", ""Parch""]].groupby(by=feat).mean().reset_index()"	1	1
df_test_pp.loc[:, columns]	1	1
df['SibSp'].hist()	1	1
target_columns.append('Fare_adjusted')	1	1
girlData['Age'].fillna(medianGirlAge, inplace=True, axis=0)	1	1
"data_train[""Title""] = data_train[""Name""].str.extract(""([A-Za-z]+)\."",expand=True)"	1	1
df_train.groupby('Pclass', as_index=False)['Age'].mean()	1	1
train_data.copy().drop(['Embarked','Age','Survived'], axis=1) # create a copy of the data	1	1
submit['PassengerId'] = Test_ID.values	1	1
"titanic_train[""Survived""].copy()"	1	1
train.drop(['Survived','PassengerId'], axis=1);	1	1
full_data.drop(['Name','Ticket','PassengerId','Cabin','Fare'],axis = 1)	1	1
train_data['SmallFamily'] = train_data['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)	1	1
plt.hist(data.Sex, color = 'b', alpha = 0.4, label = 'before')	1	1
raw_test['Title'].unique()	1	1
"TRAIN_DATA[""FareRange""] = pd.cut(TRAIN_DATA[""Fare""], range(0, 550, 25))"	1	1
train['Ticket'].head(10)	1	1
data['Sex_male']	1	1
PassengerId.shape	1	1
titanic_test.drop(['Embarked','Ticket','Name','Sex'],axis=1,inplace=True)	1	1
cabin.drop_duplicates()	1	1
female.head()	1	1
df.loc[df.Survived != -888]	1	1
df['is_alone'] = is_alone_series.astype(int)	1	1
test['Age'][test_null_age_index.pop()]=testages[i]	1	1
data2.drop(columns=['Survived'])	1	1
score.append(LR.score(X_val, y_val))	1	1
df.drop(['Cabin'], 1)	1	1
train[['CategoricalFare','Survived']].groupby(train['CategoricalFare']).mean()	1	1
test.to_csv( 'logis_all_feat.csv' , index = False )	1	1
select_X_train.shape[1]	1	1
trainNMD.head(3)	1	1
combined_data['Name']:	1	1
df.loc[df.Cabin.str.contains('T',na=False),'Cabin']=8 #the only Cabin that have T in all of the data	1	1
test2['Age'] = test2['Age'].map(age_map)	1	1
df2['Position_3to8'] = [1 if ((int(i)>=3)&(int(i)<=8)) else 0 for i in df2.Ticket]	1	1
predictions.append(result)	1	1
test_df.NumFam.hist(ax=axes[1])	1	1
columns_with_nan_series.index.values.tolist()	1	1
train['Sex'].replace('male', 1, inplace = True)	1	1
"related_people.loc[related_people[""PassengerId""]==39,""RGroup""]=""Vander Planke_M"""	1	1
train_df['family_onboard'] = train_df['family_onboard'].astype('object')	1	1
PointBiser.loc[var[0],'Point Biserial Pearson Corr'] = pb.correlation	1	1
test_data['Ticket'].apply(lambda x: str(x)[0])	1	1
"total[""Ticket_tog""] = total[""Ticket""].map(mapear.set_index(""Torder"")[""index_T""])"	1	1
test_df.drop(['Surname'], axis = 1)	1	1
dataset.loc[:, features]	1	1
df.loc[df.Survived.isnull()].drop('Survived',axis=1).reset_index(drop=True)	1	1
data_train['FamilySize'] = data_train.Parch + data_train.SibSp	1	1
"all[""Age""].isnull().sum()"	1	1
trainSet.loc[:, ['Sex','Age','Fare','Pclass','Embarked']]	1	1
"train_df[""Cabin""] = train_df[""Cabin""].fillna(""X"")"	1	1
sex_map['male'] = 0	1	1
data['Cabin']=data['Cabin'].fillna('Missing')	1	1
allfeat.loc[allfeat['FamilySize'] == 1, 'IsAlone'] = 1	1	1
"test[""Nuclear""] = False"	1	1
"train[""Pclass""].value_counts().plot.bar(color = ""skyblue"", ax = ax[0])"	1	1
train_df.dropna(subset=[col], how='all', inplace = True)	1	1
df['Age'].dropna().map( lambda x: round(x)).astype(int).min()	1	1
df_test.Fare.fillna(df_test.Fare.median())	1	1
a['Title']=training_x.columns	1	1
"titanic_df['Age'].plot(kind=""hist"",title = ""Ages of all the passengers on ship"",figsize = (10,10)).set_xlabel(""Agesg in years"")"	1	1
"data[""Deck""],"	1	1
train['family_group'] = train['family_size'].map(family_group)	1	1
df_test_features.loc[:,'ap'+str(i)]=-1	1	1
titanic_fare_group.apply(len)	1	1
full['Embarked'] = full['Embarked'].fillna(full['Embarked'].mode()[0])	1	1
self.drop(data, drop_strategy)	1	1
train_test['NamePrefix'] = train_test.Name.apply(lambda x: x.split(' ')[1])	1	1
train['Fare'].replace(0,train[train['Fare']>0]['Fare'].mode()[0],inplace=True)	1	1
train['Cabin_isnan'] = np.where(train['Cabin'].notnull(), 0, train['Cabin_isnan'])	1	1
df_dums.drop('Sex_male', axis=1)	1	1
data['Ticket_numerical'] = data['Ticket_numerical'].astype('float')	1	1
"X[""Title""].value_counts()"	1	1
"models.append((""SVC"", SVC))"	1	1
"datacv.set_value(i, 'Name', ""Dona"")"	1	1
titanic['Survived'].value_counts()	1	1
test_X.drop(columns='Sex_female')	1	1
my_submission.to_csv('submission2.csv', index=False)	1	1
Titanic_Master.head()	1	1
test['Age'] = test['Age'].astype('int')	1	1
data_copy.loc[:,'Pclass']=data_copy['Pclass'].fillna(data_copy['Pclass'].median())# replace number with median	1	1
df.append(kaggle_sub, sort=False)  # O sort=False, serve para retirar um Warning do pandas	1	1
dataset.loc[ (dataset['Age'] > 36 )& (dataset['Age'] <= 62), 'Age'] = 3	1	1
train.at[i, 'Cabin_section'] = train.at[i, 'Cabin'][0]	1	1
data_val.drop(drop_column, axis = 1, inplace=True)	1	1
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data=total, palette=""husl"")"	1	1
sub_rfc['PassengerId'] = df_test['PassengerId']	1	1
"train_df.fillna(train_df.mean(axis=0), axis=0).corr()[""Survived""]"	1	1
kaggle_df['out'] = kaggle_df['out'].map(lambda s: 1 if s >= 0.5 else 0)	1	1
np.round(model.predict(X_Test))	1	1
train['TSNE1'] = new_features.iloc[0:(train_rows-1),0]	1	1
"data.set_value(i, 'Name', ""Major"")"	1	1
df_test.drop(['Age','Survived'], axis=1)	1	1
"LR_result[1][""best_score""],"	1	1
train['Age'].hist(bins=70)	1	1
submission['Ticket_categorical'] = np.where(submission.Ticket_categorical.str.isdigit(), np.nan, submission.Ticket_categorical)	1	1
"titanic_df.drop(labels = [""Name""], axis = 1, inplace = True)"	1	1
pclass_survive_crosstbl.divide(passanger_num_pclass, axis = 0).round(2)	1	1
data_no_nan['Pclass'] = data_set['Pclass'].fillna(data_set['Pclass'].median())	1	1
train_df['Pclass'].value_counts().plot.pie(explode=[0,0.1,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)	1	1
x.pop('Survived')	1	1
axes[0].axhline(y=np.mean(titanic.groupby('Family_size')['Survived'].mean()), linestyle='-.')	1	1
combined_df.loc[combined_df.Age.isnull(), predictors]	1	1
full['Ticket_Count'] = Ticket.Count	1	1
train_data[0:620]	1	1
train['Age'] = train.Age.astype(int)	1	1
perf.append(getMetrics(y_test, y_pred, 'LightGBM'))	1	1
train.values[:,1:]	1	1
df['Fare'] = df['Fare'].fillna(median_fare)	1	1
ds_train.iloc[:,1:]	1	1
titanic_groupby.Survived.sum()/titanic_groupby.Survived.count()	1	1
test_data['Cabin'] = StandardScaler().fit_transform(test_data['Cabin'].values.reshape(-1, 1))	1	1
df.as_matrix(['Age','Fare'])	1	1
points_for_GP_CV.astype(float)	1	1
normalizer.transform(X_)	1	1
data_test.drop(labels=['PassengerId'], axis = 1)	1	1
submission.to_csv('submit.csv',index=False)	1	1
"submission.to_csv(""Kaggle.csv"",index=False)"	1	1
"sns.boxplot(x=""Survived"", y=""Age"", data=dataset)"	1	1
data_train.drop(['Ticket','Cabin','Name'],axis=1)	1	1
data_test_dummy2['Fare_scaled'] = std_scaler.fit_transform(reshape_Fare2, std_scaler_Fare2)	1	1
test_dataset.loc[(test_dataset['Age'].isnull()) & (test_dataset['Sex'] == 'male'), 'Age'] = (not_survived_males['Age'].median() + survive_males['Age'].median())/2	1	1
df_test.loc[ df_test['Age'] > 64, 'Age'] = 4	1	1
train.drop(['Name','Age','Ticket','Fare','Cabin','Fare_Range','PassengerId'],axis=1,inplace=True)	1	1
rawdata_corr.columns.values.tolist()	1	1
df_test.drop('PassengerId', axis='columns')	1	1
b.drop(['PassengerId','Survived'],axis=1)	1	1
train_dataset.drop(drop_column, axis=1, inplace = True)	1	1
"test.Title.replace(""Dr."", ""Nobility"")"	1	1
df['Fare'].fillna( df.Fare.median(), inplace = True)	1	1
test_data['Age'].loc[test_data['Age'].isnull()] = p	1	1
train.loc[train['Age'] > 24.0, 'ageCat'] = 2	1	1
df_train['Age'] = (df_train['Age'] - age_mean) / age_std	1	1
train_data.join(sex_dummies_titanic)	1	1
test_df.iterrows():	1	1
"copy.loc[data.Sex == ""male"", ""Sex""] = 1"	1	1
test['Name_Title'] = test['Name_Title'].apply(Name_Title_Code)	1	1
data_train_all['Sex'] = data_train_all['Sex'].replace(to_replace='female', value=1)	1	1
"all_data[""Title""] = all_data[""Title""].astype(int)"	1	1
cabin[0]=='C' and int(cabin[1:4])>46	1	1
tdata['Sex'] = tdata.Sex.replace({'male':1,'female':0})	1	1
df['Fare']=df['Fare'].round(1)	1	1
train3.join(pd.DataFrame({'Survived': train_y}))	1	1
my_imp.transform(test_X)	1	1
"forest_solution.to_csv(""predict_grid_search.csv"", index_label = [""PassengerId""])"	1	1
test_df.drop(['Name', 'Age', 'Ticket', 'Fare', 'Cabin'], axis=1)	1	1
test['Embarked'] = test['Embarked'].map({'S':0,'C':1,'Q':2})	1	1
dataset_to_train.drop(labels=['Survived'], axis = 1)	1	1
train_raw.shape, test_raw.shape	1	1
total.astype(float)	1	1
df[['Parch', 'Age']].groupby(['Parch']).std()	1	1
df_data['FareBin'] = pd.qcut(df_data['Fare'], 4)	1	1
y_data[0:700]	1	1
all_data.isnull().any()	1	1
test_df['family'] = test_df['SibSp'] + test_df['Parch'] + 1	1	1
dataset['isalone'] = 0	1	1
"train[""Sex""].cat.categories = [0,1]"	1	1
df.loc[((df.Sex == 'male') & (df.Pclass == 1)),:]	1	1
df_submission.to_csv('accountant_titanic_04.csv', index=False)	1	1
data_combined['isChild'] = data_combined['Age'].apply(lambda age: 1 if age<18 else 0)	1	1
test['A4'] = np.array(test['CategoricalAge'] == 4).astype(np.int32)	1	1
"data_out[""RelativesOnboard""] = data_out[""SibSp""] + data_out[""Parch""]"	1	1
classifier.add(keras.layers.Dropout(rate = 0.1))	1	1
X_scaler.transform(test_X)	1	1
titanic_test.join(pclass_dummies_titanic_test)	1	1
"data['Cabin'].fillna(""U"", inplace=True)"	1	1
df_test['AgeBin'] = pd.cut(df_test['Age'], bins)	1	1
"train[[""age_c"",""Survived""]].groupby([""age_c""]).mean()"	1	1
df_all['PassengerId']	1	1
train.iloc[:,6] = embarked_t	1	1
"test_3class[[""Fare""]].mean()"	1	1
feats.info()	1	1
df_test['AgeBin'].unique()	1	1
df.loc[df['FamilySize'] == 1, 'IsAlone' ] = 1	1	1
df.loc[df.Family_Size==0,'Alone']=1#Alone	1	1
train_df['Sex'] = train_df.Sex.map({'male': 0, 'female': 1})	1	1
"titanic_train_df[[""Family"", ""Survived""]].groupby(['Family'],as_index=False).mean()"	1	1
"combined.loc[i,""Fare""] = float(Fare_pt.loc[p,e])"	1	1
df_titanic_train.drop(outliers_to_drop, axis = 0).reset_index(drop=True)	1	1
data.Age.mean() + 3 * data.Age.std()	1	1
x_train['Sex'] = sex_encoder.fit_transform(x_train['Sex'])	1	1
combined_df_imputed.drop('Age_x', axis=1, inplace=True)	1	1
dframe.loc[temp, 'Age'] = dframe.loc[temp, 'Age'].fillna(means[title]) # replace nan values for mean	1	1
x_split.iloc[train], y_split.iloc[train]	1	1
df_train.drop(['PassengerId', 'Name'], axis=1)	1	1
"train[""Parch""] = train[""Parch""].fillna(0)"	1	1
data.surname_Gordon.astype('category')	1	1
raw_train['Name'].unique().size	1	1
df.loc[index,'Tribord']=1	1	1
train.loc[validation_index]	1	1
val_losses.append(epoch_val_loss)	1	1
"titanic_train[""Embarked""].value_counts().plot(kind='bar', figsize=(6, 4), grid=True, color=""#f1b7b0"", title=""Embarked"")"	1	1
pd.isnull(test['Fare'][x]):	1	1
raw_train['FamilySize'] = raw_train['FamilyMembers'].apply(lambda x: binning_family(x))	1	1
"data_test[""CabinBool""] = (data_test[""Cabin""].notnull().astype('int'))"	1	1
full['Gender'] = pd.factorize(full['Sex'])[0]	1	1
labels_train.values,	1	1
family.apply(w_family)	1	1
result.append(m.score(X, y))	1	1
"train[""Family_flag""].loc[train[""Family""] == 0] = 0"	1	1
svc_submission_df.to_csv('Titanic Predictions 4.csv',index=False)	1	1
train_set.hist(bins=50, figsize=(20,15))	1	1
"pd.DataFrame.join(df[[""PassengerId""]], y[[""Survived""]])"	1	1
without_nulls[['Age', 'Sex', 'Pclass']]	1	1
train_df.groupby(['Honorific']).mean()	1	1
df_train.drop(labels =['Survived'], axis =1)	1	1
parameters['selected_feature'] = selected_feature	1	1
dc.reset_index(drop=True, inplace=True)	1	1
df_train['Survived'] == 1	1	1
test['TitleEn']  = test['Title'].map(lambda x : title_mapping(x))	1	1
df['child'] = float('NaN')	1	1
"train[[""Pclass"", ""Sex"", ""Age"", ""Fare"", ""Embarked""]]"	1	1
abs_corr.append(abs(corr))	1	1
titles_train.replace(['Countess', 'Dona', 'Lady', 'Mme'], 'Mrs', inplace = True)	1	1
data.loc[(data['Embarked'] == 'Q') & (data['Sex'] == 'male') & (data['Pclass'] != 3)]	1	1
"train[""Title""] = train[""Name""].apply(title)"	1	1
train_df['Ticket_First'].value_counts()	1	1
train['HaveLessThanFiveBrothers'][train['SibSp'] >= 5] = 1	1	1
"dataset[""Alone""] = (dataset['SibSp']+dataset['Parch'] >=1)"	1	1
train_cl.copy()	1	1
sex_survive_crosstbl.divide(sex_survive_crosstbl.sum(axis = 1), axis = 0)	1	1
"axes[1].set_title(f""{feature} vs Survival"")"	1	1
df_f.sort_values(by='Importance',ascending=True)	1	1
test_dataset.loc[test_dataset['Cabin'].isnull(), 'Cabin_Status'] = 0	1	1
train[['Sex','Pclass']].groupby(['Sex'], as_index=False).mean()	1	1
np.where(sex=='male',0,1)	1	1
"submission.to_csv(""dtSubmission2.csv"", index=False)"	1	1
full_data.count()	1	1
feature_columns.append((col, tf.feature_column.indicator_column(cat_col)))	1	1
dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <=32) , 'Age' ] = 1	1	1
"output.to_csv(""predictions.csv"")"	1	1
train.drop(['Name','Ticket'],axis=1)	1	1
df['FamName'] = df['Name'].apply(lambda x: x.split(',')[0])	1	1
titles['Title'] = titles['Title'].replace('Mlle', 'Miss')	1	1
train_test['Embarked'].value_counts()	1	1
test_df.drop(['Cabin','Ticket'], axis = 1, inplace = True)	1	1
test['Age'] = (test['Age'] - test['Age'].mean()) / test['Age'].std()	1	1
big['LTick'] = big['Ticket'].apply(lambda x: str(x)[0:str(x).find(' ')] if str(x).find(' ') != -1 else ' ')	1	1
test.drop(['Sex', 'Embarked'], axis=1, inplace=True)	1	1
train.Name.replace('Ms','Mrs')	1	1
"dataset.loc[(dataset[""Fare""]>7.91) & (dataset[""Fare""]<=14.454), ""Fare""]=1"	1	1
test['Age'] = test['Age'].fillna(np.round(test['Age'].mean()))	1	1
ship.groupby('Title', sort=False)['Age'].agg(['mean', 'min', 'median', 'max', 'count'])	1	1
mod_data.replace(['S', 'C', 'Q'], ['0', '1', '2'])	1	1
result.to_csv('bagging_submission.csv',index = False)	1	1
my_data.drop(['Pclass'],inplace=True,axis=1)	1	1
data['Female'] = (data['Sex']=='female').astype(int)	1	1
classifier.add(Dropout(rate = dropout_rate))	1	1
train['Title']=train['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir','Jonkheer','Dona'], 'Rare')	1	1
test.drop(drop_cols, axis=1)	1	1
tit_df.describe()	1	1
df_train[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
test['Embarked'].replace('C', 1, inplace = True)	1	1
"validation_set.drop(""Survived"", axis=1)"	1	1
x_train_numerical.isnull().sum()	1	1
"submission.to_csv(""titanic_submission_svc.csv"", index=False)"	1	1
"test_data[""FsizeD""][test_data[""Family_Size""] == 1]  = ""singleton"""	1	1
data_replaced_ages_females.groupby(['Survived','Pclass']).size().plot.bar()	1	1
models_op.append(('knn_optimized', optimized_knn))	1	1
"pd.isnull(tmp_test[""Fare""]).sum() > 0"	1	1
combined_data['Has_Cabin'] = np.where(combined_data.Cabin.isnull(), 0, 1)	1	1
validate.drop(['Survived'], axis = 1)	1	1
"data.loc[index, ""Fare""] = similars[""Fare""].mean()"	1	1
train['Fare']==0	1	1
titanic_test['Embarked_S']=(titanic_test['Embarked']=='S').astype(int)	1	1
df['Title'] = titles_to_column.values #append the above series to the data frame	1	1
"title_dict[""MAJOR""] = 2"	1	1
trainPCA2['8'] = trainPCA[:,7]	1	1
data.loc[ data['Age'] > 45, 'Age'] = 4	1	1
alphas.append(alpha)	1	1
X.corrwith(y).sort_values(ascending=False)	1	1
dt_train['Embarked'].fillna('S', inplace=True)	1	1
data_train.drop(['Ticket'], axis=1, inplace=True)	1	1
dataset.loc[(dataset['Age'] > 20) & (dataset['Age'] <= 30), 'AgeGroup'] = 6	1	1
sub_dataset.isnull().sum()	1	1
pre_features2.as_matrix()	1	1
"train_X[""Pclass_Fare""] = train_X.Pclass * train_X.Fare"	1	1
titanic_df.Age.std()	1	1
data.loc[(data.passenger_fare>45.49) & (data.passenger_fare<=45.51) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>45.49) & (data.passenger_fare<=45.51) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
df.drop('index',inplace=True,axis=1)	1	1
models.sort_values(by='Entity Embedding Score', ascending=False)	1	1
kfolds_test_all.mean(axis=0)	1	1
"data['CatAge'] = pd.cut(data.Age,bins=[0,6,30,60,80],labels=[""0-6"",""6-30"",""30-60"",""60-80""],include_lowest=True)"	1	1
dataset.loc[dataset['Fsize'] == 2, 'Fsize'] = 1	1	1
transformed_df['Title_Officer'] = title.Title_Officer	1	1
Test.drop(['Sex'], axis=1)	1	1
best['depth'],	1	1
titanic_df['Cabin'].fillna('Z' , inplace=True)	1	1
"dataframe[""Sex""].apply(lambda sex : sex == 'male')"	1	1
trainingClean.values[train_index], trainingClean.values[test_index]	1	1
test['Pclass'][152]	1	1
whole.set_value([969,1248],'Fid',152) # Lamson female siblings	1	1
train.loc[(train['Age']>=16)&(train['Age']<32),'Age']=2	1	1
ts_final.append(pred['class_ids'][0])	1	1
combined_df_imputed['FamilyId'] = [get_family_id(row) for row in combined_df_imputed.iterrows()]	1	1
PredictedSurvivorsByAge.append(AgeVsSurvived[i])	1	1
df2.shape	1	1
ticket_grpby['Survived'].sum().astype(int)	1	1
classifier.sort_values(by='Score', ascending=False)	1	1
cleaned_test.fillna(0)	1	1
sc_x.transform(xtest)	1	1
train.describe(include=['object'])	1	1
Train_Master.drop(columns=['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket'], inplace=True)	1	1
"train_data.loc[train_data[""Age""] <=16, ""Age_Group""]=1"	1	1
np.stack((lr_oo_train,rfc_oo_train,scv_oo_train,knn_oo_train,gb_oo_train))	1	1
data.tail(10)	1	1
train.loc[ (train['Age'] > 13), 'age_cat'] = 'adult'	1	1
test.loc[i,'SibSp'] == 0 and test.loc[i,'Parch'] == 0:	1	1
df_test['Sex'] = df_test['Sex'].map({'female':0, 'male':1}).astype(int)	1	1
pd.merge(finalResult,testData,on='PassengerId',how='inner')	1	1
tf.add(tf.matmul(W3,Aa2), b3, name='Za3')	1	1
train_df.drop(['Cabin'],axis=1)	1	1
the_df.loc[ (the_df.Age.isnull()) & (the_df.Gender == i) & (the_df.Pclass == j+1),                'AgeFill'] = median_ages[i,j]	1	1
tf.add(tf.matmul(hidden_1_layer, weights['hidden2']), biases['hidden2'])	1	1
bias_f1.append(score)	1	1
test['Embarked'] = n.fit_transform(test['Embarked'].astype('str'))	1	1
"train[""train_test""] = ""train"""	1	1
X_scaled.head(ntr)	1	1
sns.boxplot(joined['Fare'][joined['Survived'] == 0], ax=ax2, width=0.3, color='red')	1	1
ticket_table['Alive_male_on_ticket'].fillna(0, inplace=True)	1	1
df_train.drop(['Age','Survived'], axis=1)	1	1
df.loc[(df.Pclass ==3) & (df.Embarked == 'S'),'Fare'].median()	1	1
titanic['Pclass'] == 1	1	1
titanic['Pclass'] == 2	1	1
df['Fare'] = df['Fare'].fillna(train_data['Fare'].median())	1	1
X_train_pca.shape[1]	1	1
df['Queenstown'].sum()/df['PassengerId'].count()	1	1
train_df.loc[train_df['Age'].isnull(),'Age'] = train_df[['Sex','Title']].loc[train_df['Age'].isnull()].apply(fillAge, axis = 1)	1	1
df_titanic['Fare'] = df_titanic['Fare'].fillna(df_titanic['Fare'].median())	1	1
DataSetTrain.head(10)	1	1
train[['SibSp', 'Survived']].groupby(['SibSp']).mean()	1	1
test['Cabin']=test['Cabin'].transform(extract2)	1	1
second_class.loc[ second_class['Sex']=='female', ['Survived','Sex','Age']  ]	1	1
"new_df[""Survived""] = y_pred"	1	1
data.loc[ (data['Age'] >40) & (data['Age']<=66),'Age'] = 6	1	1
train['Cabin'] = np.where(train['Cabin'].notnull(), 1, 0)	1	1
answer['Survived'] = test_Y.astype(int)	1	1
trainPCA2['6'] = trainPCA[:,5]	1	1
ListofNoOfPassengersbyAge_trn.append(NoOfPassengersOfGivenAge_trn[i])	1	1
test_df.update(R)	1	1
"Xt_cat.drop(""Name"", 1)"	1	1
age_bands.append(xx[Z==k].min())	1	1
df_train[['Age']] = imputer.fit_transform(df_train[['Age']])	1	1
df_submission.passengerid.values,	1	1
dataset.loc[(dataset['Fare'] > 20) & (dataset['Fare'] <= 30), 'Fare'] = 2	1	1
"dataset.loc[dataset[""Age""] <= 16, ""Age_group""] = 0"	1	1
"train.loc[train[""Age""]<=16,""Age""]=0"	1	1
full_models['set3']['num_scaling'] = 'std_scaler'	1	1
result[0:5]	1	1
sns.boxplot(not_survived_fare)	1	1
"full[""Age""][((full['SibSp'] == full.iloc[i][""SibSp""]) & (full['Parch'] == full.iloc[i][""Parch""]) & (full['Pclass'] == full.iloc[i][""Pclass""]))].median() # median age of similar passengers"	1	1
pd.isnull(col).sum():	1	1
"test_cp3[""Survived""] = gradboost_prediction"	1	1
le.transform(data[column])	1	1
models.append(('XGB', XGBClassifier()))	1	1
df['F_Low'] = df['Fare'].map(lambda s: 1 if s<=50 else 0)	1	1
X_one_hot.columns.drop('Age')	1	1
df_train.groupby('Sex').Survived.sum()	1	1
"combined[""t_num_start""]=t_num_start"	1	1
"df.loc[(df[""AgeFill""] > 15 )& (df[""Family""].isin(uniqueChildFamily)),""HasChild""] = 1"	1	1
"tmp_train.query(""Cabin_I == '{}'"".format(c))"	1	1
"X_train.drop([""Survived""], axis=1)"	1	1
df[['Pclass', 'Survived']].groupby(['Pclass'],as_index=False,axis=0).mean()	1	1
one_hot_train['Age'].fillna(one_hot_train['Age'].mean(), inplace=True)	1	1
train.drop(['Survived','PassengerId','Name','Ticket','Age','SibSp','Parch','Cabin'], axis=1)	1	1
x_train['Age'].isnull().value_counts()	1	1
df.drop('Sex',axis=1, inplace=True)	1	1
train_copy['Age'] = train_copy['Age'].fillna(value = 999)	1	1
data['Title_Code'] = label.fit_transform(data['Title'])	1	1
np.empty((NFOLDS,n_test))	1	1
"X_train.loc[((X_train.Parch > 0) & (X_train.Title_Miss == 0) & (X_train.Sex_male == 0) & (X_train.Child_col == ""Adult"")),""Mother_col""] = ""Mother"""	1	1
test_df.loc[(test_df.Fare.isnull())&(test_df.Pclass==3), 'Fare'] = 7.75	1	1
final_training_df.isnull().sum()	1	1
train_df.drop(['PassengerId','Ticket', 'Cabin'], 1, inplace=True)	1	1
df.loc[df['Age'] > 70, 'AgeC'] = 3	1	1
"test_df.loc[test_df[""Title""] == ""Mme"", ""Title""] = 'Mrs'"	1	1
df_train['FamilySize'].hist()	1	1
train_df.drop(['Name', 'Sex'], 1, inplace=True)	1	1
np.where(y_train == 1.)[0]	1	1
Xt['Age'].fillna(Xt['Age'].mean(), inplace=True)	1	1
data['Cabin_Number'] = data.apply(lambda x: 0 if len(str(x.Cabin))== 1 else np.int(np.int(x.Cabin_Letter[0][1:])/10), axis=1)	1	1
df['Parch'] = top_coding(df,'Parch', 2)	1	1
"titanic_df[""Age""][np.isnan(titanic_df[""Age""])] = random_1"	1	1
submission[['PassengerId', 'Survived']] = submission[['PassengerId', 'Survived']].astype('int')	1	1
age_groups['female']	1	1
combine_df.loc[(combine_df['Age'] > 16) & (combine_df['Age'] <= 32), 'Age'] = 1	1	1
df_test[['PassengerId', 'Survived']]     .to_csv('results-rf.csv', index=False)	1	1
knn_errs.append(knn_err)	1	1
df_output['PassengerId'] = test_data['PassengerId']	1	1
titanic_train_test_merged['Sex_cat']=titanic_train_test_merged['Sex'].cat.codes	1	1
X_test['Sex'] = test_df['Sex'].map({'female' : 0, 'male' : 1}).astype(int)	1	1
df_features.shape	1	1
df.loc[:, l + '_feat'] = pd.Series(tr, index=df.index)	1	1
ticket.nlargest(30)	1	1
"combined.loc[pid,""Age""] == ""NA"":"	1	1
data.loc[(data.Fare == 0) & (data.Pclass == f + 1), 'Fare'] = fare[f]	1	1
df.Sex.replace(['male','female'],[0,1], inplace=True)	1	1
test.drop(['Name'],axis=1,inplace=True)	1	1
sc_X.transform(X_Test)	1	1
title['Sex'] = sex.Sex	1	1
df_train.drop(columns=['SibSp', 'Parch'], inplace=True)	1	1
train_df['C_sex'] = pd.Categorical(train_df['Sex'], train_df['Sex'].unique()).codes	1	1
data_file['Sex'] = data_file['Sex'].map({'male':1, 'female':0})	1	1
finalTest.Fare.fillna(finalTest.Fare.mean(), inplace=True)	1	1
dataset['EditedAge'][rowIndex] <= 120:	1	1
titanic_test.apply(get_family_id, axis = 1)	1	1
"result_test3[""Survived""] = y_pred_ada_rand"	1	1
data['Cabin_char'] = list(map(extract_cabin_letter, data['Cabin']))	1	1
ax[1].set_title('Survival Distribution of by Pclass')	1	1
test_df.head(15)	1	1
train['c_mean']	1	1
test['title']=test.apply(replace_titles, axis=1)	1	1
trainPCA2['9'] = trainPCA['Pclass2']	1	1
dataset.loc[ dataset['FamilySize'] <= 1, 'FamilySize'] = 0	1	1
df.drop(['NameLen'], axis=1, inplace=True)	1	1
A_train.drop(['Age'], axis=1)	1	1
x['Age'] = 5	1	1
test['Cabin'] = test['Cabin'].apply(lambda x: x[0])	1	1
whole.set_value(1296,'Fid',107) #display(whole[whole.Name.str.contains(r'Frauenthal|Heinsheimer')])	1	1
train['Title']=train['Title'].replace(['Dr','Rev','Col','Major','Lady','Capt','Sir','Jonkheer','Countess','Don'],'Rare',regex=True)	1	1
data_test['Fare']/(data_test['Family Size'])	1	1
df.iloc[perm[train_end:validate_end]]	1	1
dataset['Embarked'] = dataset['Embarked'].replace('Q', 1)	1	1
y_pred.shape[0]	1	1
merged.loc[merged['Group'] == 'male', 'Predict'] = 0	1	1
test_df.loc[no_fare, 'Fare'] = test_df[test_df['Pclass'] == no_fare_class]['Fare'].dropna().median()	1	1
train5['Age'] = train5['Age'].fillna(train5['Age'].median())	1	1
categorical_columns.append('CabinLocation')	1	1
df_test['Age']=df_test['Age'].fillna(df_test['Age'].mean())	1	1
"df_train[""Parch""].hist(bins=6, density=True, stacked=True, color='teal', alpha=0.6)"	1	1
df2[['Age', 'Parch', 'SibSp', 'Sex']].values	1	1
data.drop(columns='Cabin', inplace=True)	1	1
result['Survived'] = logreg.predict(X_test)	1	1
result.to_csv('Titanic_prediction.csv')	1	1
submission.to_csv('titanicran1.csv', index=False)	1	1
train_data_only_first_class_female_Cherbourg_age_under_fourteen_not_over_fiftyone.fillna(0)	1	1
train['clean_cabin'] = train.Cabin.str[0].fillna('Missing')	1	1
features.append('relatives_survived')	1	1
train_df.drop('FareBand',axis =1)	1	1
data.loc[(data['Fare'] > 14.45) & (data['Fare'] <= 31), 'SortFare_4'] = 2	1	1
model.add(Dense(32, input_dim=X.shape[1], kernel_initializer='normal', activation='relu'))	1	1
test.values # Creates an array of the test data	1	1
"df_test[""Sex""].loc[df_test[""Sex""] == 'female'] = 0"	1	1
df_train[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)	1	1
train_df.drop(['Name', 'PassengerId', 'Ticket', 'Cabin'], axis=1)	1	1
merged0[['Survived_x', 'Sex_x', 'Age_x', 'Survived_y', 'Sex_y', 'Age_y', 'Ticket']]	1	1
dataset['Age']=dataset.Age.fillna(Fre_age_band[0])	1	1
dfTrain['FamilySize'] = dfTrain['SibSp'] + dfTrain['Parch']	1	1
frame['Female'] = (frame['Sex']=='female').astype(int)	1	1
test['clean_cabin'] = test.Cabin.str[0].fillna('Missing')	1	1
"inDF[""Seniority""] = inDF[""Name""].apply(lambda x : ""Mr"" if x.find(""Mr. "") > 0 else ""Mrs"" if x.find(""Mrs. "") > 0 else ""Miss"" if x.find(""Miss. "") > 0 else ""Master"" if x.find(""Master. "") > 0 else ""None"")"	1	1
train.Name.replace('Miss','Mrs')	1	1
data.loc[(data['Age'] >= 60), 'AgeGroup'] = 4	1	1
np.round(start + delta, decimals=d).astype(dtype)	1	1
df.columns.droplevel()	1	1
"combine['Title'] = combine.Name.str.split("","",expand=True)[1].str.split(""."",expand=True)[0]"	1	1
"cs[""Total""] = total"	1	1
dataset['SibSp'][i]>1:	1	1
df_test.drop(['Parch'], axis = 1)	1	1
pipelines.append(('RobustABC', Pipeline([('Robust', RobustScaler()),('ABC', AdaBoostClassifier())])))	1	1
result.insert(1,'Survived', model_rfc.predict(test))	1	1
allfeat['Title'] = allfeat['Title'].replace('Mme', 'Mrs')	1	1
"test_df.loc[(test_df['Fare']>102)&(test_df['Fare']<=204),""Fare""]=1"	1	1
df['Surname'] = df['Name'].str.extract('([A-Za-z]+)\,', expand=False)	1	1
df_all['_Name']=df_all['Name'].map(lambda x: x.split(',')[0].lower())	1	1
"df_test[""Sex""] =  le.fit_transform(df_test[""Sex""])"	1	1
df_age.loc[ df_age['Age'] <= 16, 'Age'] = 0,	1	1
df_train.select_dtypes(include=[object])	1	1
test_cabin['T'] = 0	1	1
train['AgeStat'].loc[(train['Age'] <= ((10*i) + 10)) & (train['Age'] > (10*i))] = i+1	1	1
trainData.drop(labels=['Survived','Name','Ticket','Age_Group'],axis=1)	1	1
df_test.groupby(['Deck']).size()	1	1
test['Fam'] = test['SibSp'] + test['Parch']	1	1
train_df.groupby('SibSp').size()	1	1
not_survived.head()	1	1
original['Titles'].replace(['Ms', 'Mme', 'Mlle'], ['Miss', 'Mrs', 'Miss'])	1	1
df.groupby(['GroupID'])	1	1
all_data[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)	1	1
data_copy.loc[:, 'Age'] = data_copy.Age.fillna(data_copy.Age.median())	1	1
train_df.loc[train_df['Survived'] == 0, 'Age'].dropna(axis = 0)	1	1
data.drop(['SibSp'], axis=1, inplace=True)	1	1
titanic_train['Parch_Y']=(titanic_train['Parch']>=1).astype(int)	1	1
"df.drop([""sibsp""], axis=1)"	1	1
df_test.as_matrix(['Age','Fare'])	1	1
parameters['feature_scaling'] == 'rescaling':	1	1
dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 52), 'Age'] = 6	1	1
dataset['GroupSize'] = dataset.apply(groupify, axis=1)	1	1
"combined.loc[pid,""cp_id""] != -1: #""family"":"	1	1
frame['bin_age']=np.nan	1	1
test['CategoricalAge'] = full_age[891:]	1	1
"new_df[""Pclass_qd""] = df[""Fare""]**4"	1	1
ship.drop(['SibSp','Parch'], axis=1)	1	1
df['FamilySize'].plot(kind='hist')	1	1
"Data['Title1'] = Data['Title1'].str.split(""."", expand=True)[0]"	1	1
train.loc[train.Age.isnull(), 'Age'] = predicted_ages_train	1	1
accu.append(float(Summary_DT['Accuracy']))	1	1
"df[""Title""] = df[""Name""].str.extract("" ([A-Za-z]+)\."", expand=False)"	1	1
df_train['Survived']=df_train['Survived'].astype(object)	1	1
dataset.loc[ dataset['Age'] > 55, 'Age'] = 5	1	1
df.drop(['Ticket', 'Name', 'Embarked', 'Cabin'], axis=1)	1	1
test_df['PassengerId'].count()	1	1
train.sort_values(['Embarked'])	1	1
"train.loc[train[""Sex""]==""female"", ""Sex""] = 0"	1	1
df.replace({'Name':dic},inplace=True)	1	1
X.iterrows():	1	1
test.drop(columns='PassengerId', inplace=True)	1	1
merged_df.drop([column], axis=1)	1	1
updated_test_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1) # Drop unused features	1	1
"dftest.sort_values(""PassengerId"")"	1	1
died_female_data.shape[0]	1	1
test.loc[(test['Age'] > 12) & (test['Age'] <= 18), 'Age'] = 2, #Teenager	1	1
titanic_person.head()	1	1
test.Name.replace('Mme','Mrs')	1	1
res.head(20)	1	1
"train_data.loc[(train_data[""Age""] > 30) & (train_data[""Age""] <= 50), 'Age_Group'] = 3"	1	1
df['Cabin']=df['Cabin'].astype('category')	1	1
"test_df.loc[test_df[""Title""] == ""Mlle"", ""Title""] = 'Miss'"	1	1
dataset['Initial'] = dataset['Initial'].fillna(0)	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1), 'Age'] = guess_ages[i, j]	1	1
"train.loc[(train[""Fare""] >= 31.0) ,""Fare""] = 3"	1	1
data.loc[(data['Fare']>102) & (data['Fare']<204),'Fare']=1	1	1
categorical_columns.append('TicketPrefix')	1	1
titanic_pclass_group.apply(get_survival_ratio)	1	1
X_train.drop('Name',1)	1	1
features.describe()	1	1
row['Fare'] >= 50:	1	1
X.apply(lambda x: bin_val(x, bins))	1	1
full['Title'] = full['Title'].replace(['Miss','Ms','Mlle'],'Miss')	1	1
df_train.loc[(df_train['Survived'] == 1),'Pclass'] ,	1	1
"titanic[""Age""].isnull().sum()"	1	1
train.Survived.groupby(train.Sex)	1	1
train_df.Deck.fillna('Z', inplace=True)	1	1
train_df.drop(['Embarked'], axis=1, inplace=True)	1	1
processed_test_df.values	1	1
X_train.loc[X_train['Embarked'] == 'C', 'Embarked'] = 2	1	1
X_train.loc[X_train['Embarked'] == 'C', 'Embarked'] = 1	1	1
test3.values	1	1
plt.style.use('seaborn-darkgrid')	1	1
train.corr().round(2), square=True,	1	1
plt.hist(x=[data1[data1['Survived']==1]['Age'], data1[data1['Survived']==0]['Age']], stacked = True,color= ['g','b'], label = ['Survived', 'Dead'])	1	1
train[['isAlone', 'Survived']].groupby(['isAlone'], as_index=False).mean()	1	1
test_df.drop(['Age', 'Fare'], axis=1, inplace=True)	1	1
all_data.head(1)	1	1
data['RelationsOnBoard']=data['RelationsOnBoard']*0.02	1	1
"train['Sex_Class_Age']= train['Sex_Class']+""_""+train['age_cuts']"	1	1
submission.to_csv('titanic_pred.csv', index=False)	1	1
df.Cabin.isnull().sum()	1	1
train_df[['Embarked', 'Survived']].groupby(['Embarked']).agg(['count', 'mean']).sort_values(by=[('Survived','mean')], ascending=False)	1	1
combine_df['SibSp'].ix[combine_df['SibSp']>3] = 4	1	1
raw.sort_values(['survived', 'age']).reset_index(drop=1)	1	1
test_csv['Family'] = test_csv.SibSp + test_csv.Parch	1	1
X_test.drop(['Age','Embarked','AgeBand','Fare','IsAlone'], axis=1)	1	1
neighbors.append(distances[x][0])	1	1
dataset.loc[(dataset['Fare'] > 7.76) & (dataset['Fare'] <= 8.85), 'Fare'] = 1	1	1
data.loc[[0,5,10,20,50]]	1	1
dataset.loc[dataset['SPTE'] == group, 'PassengerId']	1	1
dataset.loc[dataset['Sex']=='female','Sex'] = 1	1	1
testset.drop('Cabin', inplace=True, axis=1)	1	1
oof_test_skf2.mean(axis=0)	1	1
train_deck.drop('Deck', axis = 1)	1	1
importances.tail(33).index.tolist()	1	1
"Submission.to_csv(""Submission1002ver2.csv"", index=False)"	1	1
train_df['Age'].hist(bins = 18, color = 'darkturquoise')	1	1
titanic.groupby(['Sex','Pclass','Title','Embarked'])	1	1
titanic_train.groupby(['Embarked', 'Sex'])['Name'].count()	1	1
test_data['Title'] = test_data['Title'].apply(map_marriage)	1	1
testages.append(random.randint(20,35))	1	1
train.groupby('InGroup')['Survived'].mean()	1	1
data2.loc[(data2['Survived'] == data2['Random_Predict']), 'Random_Score'] = 1 #set to 1 for correct prediction	1	1
train_data['Sex'] = train_data['Sex'].apply(lambda x: gender.get(x))	1	1
model.add(BatchNormalization(input_shape=(10,)))	1	1
train['title']='Mrs'	1	1
group_final.groupby(param[0]).Survived.count() - group_final.groupby(param[0]).Survived.sum()	1	1
dataset.groupby(['Sex', 'IsAlone']).size().unstack(0)	1	1
"df.loc[:, ""Sex""] = df.loc[:, ""Sex""].map({""male"": 0, ""female"": 1})"	1	1
train_data['Sex_number'] = train_data.apply(lambda row: 0 if row['Sex'] == 'male' else 1, axis=1)	1	1
train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).agg(['mean', 'std'])	1	1
"test[""Survived""] = clf2.predict(dataset_blend_test)"	1	1
pd.merge(train, ticSur, on=['Ticket', 'Ticket'],how='left')	1	1
titanic_train.loc[titanic_train['Fare'] > 500, :]	1	1
"x[""Cabin""] = x.Cabin.apply(clean_cabin)"	1	1
"train_df[""Survived""][train_set_size:train_set_size+valid_set_size]"	1	1
joined['Fare'][joined['Survived'] == 1],	1	1
parameters[1]	1	1
data_train_all['Title'] = data_train_all['Title'].replace(['Countess','Don','Dona','Jonkheer','Lady','Sir'],'Noble')	1	1
"df[""Fsize""] = df[""SibSp""] + df[""Parch""] + 1"	1	1
"titanic_test_data.loc[titanic_test_data[""Embarked""]==""C"",""Embarked""] = 1"	1	1
dataset.loc[(dataset['Fare']>30) & (dataset['Fare']<=40), 'Fare']=3	1	1
dataset.loc[(dataset['Family_members'] == 1)|(dataset['Family_members'] == 2),'Family_members_Band'] = 1	1	1
dataset.loc[dataset['Fare'] <=2.06,'Fare']=0	1	1
best_iteration[2] = validation_accuracy	1	1
features_long.set_value(idx4[ii], 'Age', mrs.iloc[np.random.randint(len(mrs))])	1	1
sub_rf['PassengerId'] = df_test['PassengerId']	1	1
np.append(y_pred, lr.predict(features[test]))	1	1
result.to_csv('titanic_disaster_pred.csv', index=False)	1	1
"combined[""t_num""]=t_num.astype(int)"	1	1
losses.append(loss*actual_batch_size)	1	1
train_df.fillna(-999,inplace=True)	1	1
temp.iloc[:,0] = round(temp.iloc[:,0]).astype(int)	1	1
data.groupby(['Embarked','Pclass']).Fare.mean()	1	1
titanic_df['Embarked']= titanic_df['Embarked'].fillna('Z')	1	1
df['Age'].loc[df['Age'].isnull()] = pred2	1	1
dataset.loc[(dataset['Age']> 18) & (dataset['Age']<= 32), 'Age'] =1	1	1
test_ToPred.loc[test_ToPred.Salutation == 'Master', 'Sex'] = 'master'	1	1
dataset['CategoricalFare'] = pd.qcut(dataset_train['Fare'], 4)	1	1
NameList.append(G.node[Passenger]['MaidenName1'])	1	1
the_df.drop(['PassengerId', 'Name', 'Sex', 'Age', 'Ticket', 'Fare', 'Cabin', 'Embarked'], axis=1)	1	1
model.transform(testDF)	1	1
train_df['Name_end'] = train_df['LastName'].str[-1:]	1	1
train_data.boxplot(column = 'Fare',by = 'Pclass',ax = axes[0])	1	1
test_df2['AgeBands'] = pd.qcut(test_df2.Age,4,labels=False)	1	1
"df.drop([""fare""], axis=1)"	1	1
train['E3'] = np.array(train['Embarked'] == 'Q').astype(np.int32)	1	1
layer_dims[1], activation='relu',	1	1
X_full.loc[:, 'Cabin_mapped'] = X_full.loc[:, 'Cabin_mapped'].map(cabin_dict)	1	1
df[['PassengerId','Survived','Pclass','Sex','Age']]	1	1
full_df.loc[full_df['source']=='train']	1	1
full['Name'].apply(splitName, args=[titleDict])	1	1
data.loc[(data['Fare'] > 14.454) & (data['Fare'] <= 31), 'Fare'] = 2	1	1
test['AgeBand']=pd.cut(test['Age'],5, labels=[0,1,2,3,4]).astype(int)	1	1
test['M_F'] = mfSeries	1	1
all_data.drop('Cabin', axis = 1)	1	1
train.Age.fillna(age_med, inplace = True)	1	1
data['Pc3'] = (data['Pclass']==3).astype(int)	1	1
TitleTrain.append(NameTitle)	1	1
df.Age.isna()	1	1
all_data['Title'] = all_data['Name'].str.extract('([A-Za-z]+)\.')	1	1
test_data[['PassengerId', 'Survived']].to_csv('submission.csv', index = False)	1	1
df.ix[:,df.isnull().any()]	1	1
"df[""Age""].fillna(meanNS,inplace=True)"	1	1
"re.sub(""[^0-9a-zA-Z\s]+"", """", ticket)"	1	1
train['Cabin_Lett'] = np.where((train['Cabin_Lett']).isin([ 'F', 'E', 'D', 'C', 'B', 'A']),train['Cabin_Lett'], np.where((train['Cabin_Lett']).isin(['W', '4', '7', '6', 'L', '5', '8']), '0','0'))	1	1
"tmp_age_train.append(Counter(tmp_train.loc[tmp_train[""kmeans_labels""] == i, ""Age""]).most_common()[0][0])"	1	1
test_df['Person'] = test_df[['Age','Sex']].apply(get_person, axis=1)	1	1
train['Embarked'] = train['Embarked'].map({'S':0,'C':1,'Q':2})	1	1
df_train.drop('Survived',axis=1,inplace=True)	1	1
dataset.loc[ dataset['Age'] > 64, 'Age']=4	1	1
test_df.Fare.fillna(fare_mean, inplace=True)	1	1
df.shape[0] # This is number of training data we have	1	1
test_data['Title'] = test_data['Title'].str.strip()	1	1
df.loc[df['Deck']=='C', 'Deck'] = 5	1	1
"train_data[""FamilySize""].hist(bins=10, figsize=(10,5))"	1	1
df_data['FareBin_5'] = pd.qcut(df_data['Fare'], 5)	1	1
"cv_results.append(cross_val_score(classifier, x_train, y_train, scoring = ""accuracy"", cv = skfold))"	1	1
"train[""Age_Band""]=pd.cut(train[""Age""],5)"	1	1
test.loc[test['Sex']=='male','Sex'] = 1	1	1
"combined.loc[cp.index,""cp_id""] = cp_id"	1	1
df_submission['cos_age'] = df_submission['age'].map(np.cos)	1	1
df.loc[df[colname].isnull(), colname]	1	1
"test[""Survived""] = test_survived[""Survived""]"	1	1
the_df['FareFill'] = the_df['Fare']	1	1
data.loc[(data.Fare<=15.8)&(data.Pclass==2), 'PassengerCat']=3	1	1
df.loc[(df['Age']>31)&(df['Age']<=40),'Age_band']=3	1	1
data['Fare_bin'] = pd.cut(data.Fare, 4, labels = [0,1,2,3])	1	1
gs.best_params_['n_estimators'],	1	1
train['Survived'] = target	1	1
df['Age'] = df['Age']	1	1
x_test['Title_Mr'] = test_df['Title'].apply(lambda x: 1 if x == 'Mr' else 0)	1	1
"titanic_df[""Embarked""].value_counts()"	1	1
data['Title'] = data['Title'].replace(['Mlle'],'Miss')	1	1
test_set['age_group']  = test_set.apply(lambda r: int(r.Age/2.5), axis=1)	1	1
model.transform(test1)	1	1
"full_df['Mother'] = ((full_df['Gender'] == 0) & (full_df['AgeFill'] > 18) & (full_df['Title'] == ""Miss"")).astype(int)"	1	1
full['Title'] = full.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
"pd.pivot_table(data=combined, columns=[""t_titles""],index=[""Pclass"",""SibSp""],values=""Age"")"	1	1
train_data['Sex'] = labelEncoder_sex.fit_transform(train_data['Sex'])	1	1
combine.loc[ combine['Fare'] > 31, 'Fare'] = 3	1	1
test.iloc[:,1:5]	1	1
gs_metrics.iloc[4, 5]	1	1
df.SibSp.isnull().sum(axis=0), df.Parch.isnull().sum(axis=0)	1	1
df.drop(['PassengerId','is_train','Initial'],axis=1,inplace=True)	1	1
train_corr.corr()	1	1
sns.boxplot(x='Pclass', y='Fare', data=df_full)	1	1
"test_mod[""PassengerId""] # generate the results list"	1	1
vec.transform(arr2)  #aaah fuck shit bug. corrected from arr to arr2	1	1
full['FamilyName'] = full.Name.str.extract('([A-Za-z]+),', expand=False)	1	1
names.loc[(names['mlle'])==1,'mlle'] = 0	1	1
"curated_data[""Age""].fillna(curated_data.groupby(""Title"")[""Age""].transform(""median""), inplace=True)"	1	1
sibsp_data['died_pct'][np.isnan(sibsp_data['died_pct'])]=0	1	1
Z['Age'].fillna(Z['Age'].median(),inplace=True)	1	1
"df_train[""Sex""] =  le.fit_transform(df_train[""Sex""])"	1	1
"factors[""PassengerId""]=1"	1	1
first_class.loc[first_class['Sex']=='male', ['Survived','Sex']]	1	1
embarked_data.rename(columns=lambda x: 'Embarked_' + str(x))	1	1
live_df.SibSp.fillna(live_df.SibSp.mean()).values	1	1
train_lavel['Survived'].values	1	1
"i.loc[i[""Title""] == ""Mlle."",[""Title""]] = ""Other"""	1	1
whole.set_value(1025,'Fid',186) #display(whole[whole.Surname=='Thomas']) #[1008,1025,1224]	1	1
train['AgeFill']=train['Age'].apply(fill_missing_age)	1	1
new_df.Fare.fillna(new_df.Age.mean(), inplace=True)	1	1
df_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3 , 'Honorable' : 4})	1	1
data['Plcass_X_p_fare'] = data.Pclass * data.passenger_fare	1	1
cat_pipe.append(('family_bool', Family_bool))	1	1
df.dtypes.reset_index()	1	1
comb_data['Cabin'] = np.where(comb_data[['Cabin']].isnull().all(1), 'N', comb_data.Cabin.str[0])	1	1
test_data.loc[np.isnan(test_data.Age), 'Age'] = np.mean(data['Age'])  #把 nan的变成平均年龄	1	1
X_train.loc[X_train['Sex'] == 'female', 'Sex'] = 0	1	1
train_data.loc[:,'Survived'].values	1	1
dfTrain.drop(['PassengerId','Ticket','Cabin'],axis=1,inplace=True)	1	1
"titanic['Fare'].describe(include=all) # Descriptive stats for ""Fare"""	1	1
sns_data['Age_rep'] = train_Age_rep	1	1
xgb_grid.cv_results_['std_test_score'][xgb_grid.best_index_],	1	1
"test7[""Miss""] = test7[""Name""].apply(lambda x: x.count(""Miss.""))"	1	1
cabin['Cabin'] = cabin.Cabin.map(lambda x: x[0])	1	1
full.loc[idx,'Age'] = gen_age if gen_age >= 1 else 1	1	1
"output.to_csv(""submission.csv"", index= False)"	1	1
np.round(fulldata_predictions).astype(int)	1	1
train_data.loc[(train_data['Fare']>26), 'Fare']  =2	1	1
df_train['Embarked'] = df_train['Embarked'].fillna('C')	1	1
dataset_train.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)	1	1
conf_mat[0][0]	1	1
age_data.sum()	1	1
"dataset[""Title""].replace('Mme', 'Mrs', inplace=True)"	1	1
train['Fare'][train['Survived']==1].value_counts().sort_index()	1	1
test['is_train'] = 0	1	1
"comb_data[""TicketTrim""].value_counts().sort_values(ascending=False).head(10)"	1	1
test7.head()	1	1
"train_df.drop(""Ticket"",axis=1,inplace=True)"	1	1
titanic_df['Ticket'].apply(get_prefix)	1	1
"titanic_train.drop([""Survived"" ,""PassengerId""], axis=1)"	1	1
"df_test.loc[((df_test[""title""]==""ms."") & (df_test[""Age""].isnull()==True)).tolist(),'Age']=avg_miss #there is only 1 ms. in the whole test set."	1	1
trainONS.drop(drop_elementsONS, axis = 1)	1	1
titanic_test.join(pd.get_dummies(titanic_test.Pclass,prefix='Pclass'))	1	1
df.select_dtypes(include=['object']).columns:	1	1
DataSetTest.shape	1	1
test.drop(['Age','Fare','Name','SibSp','Parch'], axis = 1, inplace=True)	1	1
"combined[""family_has_senior""] = 0"	1	1
df[['Name','lang']].sample(10)	1	1
train.loc[train.Age.isnull() & (train.Title == i), 'Age'] = age_mean[i]	1	1
sns.boxplot(x='Survived', y='Parch', data=df)	1	1
"train[""title""] = [i.split('.')[0] for i in train.Name]"	1	1
merged['PTitle'] = merged['PTitle'].replace(['Lady', 'the Countess','Mlle', 'Ms', 'Mme', 'Dona','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer'], 'Rare')	1	1
missing_values.append(column)	1	1
"model_data.loc[:,""Embarked""] = label.transform(model_data.loc[:,""Embarked""])"	1	1
row['Sex'] == 'male' and row['Pclass'] == 3:	1	1
df_train['cos_fare'] = df_train['fare'].map(np.cos)	1	1
d_train[['Survived']]	1	1
df.select_dtypes(exclude=[np.number]).isnull().astype(int).sum()	1	1
df_all.sample(5)	1	1
y_t.values	1	1
test['Fare'].fillna(test['Fare'].mean(), inplace = True)	1	1
ohe_imp_tr.align(ohe_imp_val, join = 'inner', axis=1)	1	1
best_score.append(gs.best_score_)	1	1
data.drop(['PassengerId', 'Ticket', 'Name'], axis=1, inplace=True)	1	1
"test[""Sex""] = test[""Sex""].map({""male"" : 0, ""female"" : 1})"	1	1
all_data.drop(['PassengerId','Survived'],axis=1,inplace=True)	1	1
"test_mod.set_index([""Pclass"",""Sex""],inplace = True)"	1	1
train.loc[(train['Survived'] == 1),'Fare']	1	1
age_model.add(Dense(128, input_shape=(age_x.shape[1],), activation='relu'))	1	1
fill_na.loc[3]	1	1
train_data.shape, target.shape # survived를 떼서 target값으로 준다	1	1
data['Title']=Titles=data['Name'].apply(lambda x: x.split(',')[1].split('.')[0] if ',' in x else x)	1	1
parameters['minibatch_size'] = 16	1	1
dataset_train.Age.std()	1	1
X_train.drop(['Name'],axis=1)	1	1
"train_data.loc[train_data[""Fare""] < 20, ""FareBelow20""] = 1"	1	1
test_person_dummies.drop(['Male'], axis=1, inplace=True)	1	1
"testdf.drop([""PassengerId""], axis=1, inplace = True)"	1	1
test['Title']=test.Name.str.extract('([A-Za-z]+)\.')	1	1
train['family_size'] = train['SibSp'] + train['Parch']	1	1
X.loc[ X['Age'] > 64, 'Age'] ;	1	1
"data_df.drop([""SibSp"", ""Parch""], axis=1)"	1	1
data_frame.drop('Title',axis=1,inplace=True)	1	1
"train_data[""Title""][train_data[""Title""].str.contains(""Mlle|Ms"")] = ""Miss"""	1	1
testdata['Age'].isnull().sum()	1	1
hot.transform(train_df)	1	1
Fare.isnull()	1	1
dataset['EditedAge'][rowIndex] <= 42:	1	1
"Ticket.append(""UnKnown"")"	1	1
df_train.loc[df_train.Age.isnull(), 'Age'] = df_train[df_train.Age.isnull()].apply(lambda row: average_ages[re.search(', ([A-Za-z]+)\.', row.Name).group(1)], axis=1)	1	1
df.drop(['Age', 'SibSp', 'Parch'], axis=1)	1	1
test['Fam']=test['SibSp']+test['Parch']	1	1
data['TicketNum'] = data.TicketNum.fillna(0).astype(int)	1	1
Xtest['Age']= pd.cut(Xtest['Age'], age_bins, labels=age_group)	1	1
full.set_value(full.Age.isnull(), 'Age', y_pred)	1	1
titanic_test.drop(['Embarked','Embarked_S'],1)	1	1
y_train.head(20)#labels	1	1
full_models['set2'] = {}	1	1
df_train[['FareRange', 'Survived']].groupby(['FareRange'], as_index=False).mean().sort_values(by='FareRange', ascending=True)	1	1
"data_combined[""Age""].mean()"	1	1
data.loc[(data.passenger_fare>65) & (data.passenger_fare<=70) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>65) & (data.passenger_fare<=70) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
df.pivot_table(values = 'Survived', index = 'Sex').Survived.plot.bar()	1	1
combine['AgeAvailable'] =(combine['Age']==-0.5)==False	1	1
raw_train.append(raw_test, ignore_index=True)	1	1
X['Sex'] = np.where(train['Sex']=='female', 0, 1)	1	1
"titanic_df.groupby(by=[""Pclass"",""Sex"",pd.cut(titanic_df[""Age""],years_range)]).mean()[""Survived""][2,1].plot.bar(ax=axes[1,1], title = (""Men Class 2"") )"	1	1
train_df.drop(drop_columns, axis=1)	1	1
titanic['Ticket'].map(getTicketPrefix)	1	1
dataset.loc[ dataset['Fare'] <= 8.1, 'Fare']                               = 0	1	1
test_df.loc[test_df['Age']<=16,'Age_band']=0	1	1
df['AgeGroup'] = pd.cut(df['Age'], bins)	1	1
df.loc[df['Age']<=10,'Age_band']=0	1	1
combine_df['High_Survival_Ticket'] = np.where(combine_df['Ticket_Lett'].isin(['1', '2', 'P']),1,0)	1	1
"data.set_value(i, 'Name', ""Ms"")"	1	1
df['Cabin_Number'] = df['Cabin_Name'].map(cabin_dict)	1	1
dft['gender']=dft['Sex'].map({'male':1,'female':0}).astype(int)	1	1
classifiers.append(ExtraTreesClassifier(random_state = 0))	1	1
test_df.Fare.fillna(median_fare)	1	1
combined['Embarked'].fillna(combined['Embarked'].mode()[0],inplace=True)	1	1
train_df.head(n=10)	1	1
dftest.iloc[women_died_ids,col_index]=0	1	1
train_data['Suffix_Indicator'] = train_data['Suffix'].map({'Master':1,'Miss':2,'Mr':3,'Mrs':4,'Outlier':5})	1	1
"pd.isnull(data[""Fare""]).nonzero()"	1	1
titanic_test_df['Embarked'] = le.fit_transform(titanic_test_df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2}).astype(str))	1	1
titanic.loc[titanic['Ticket'] == ticket, 'SharedTicket'] = 1	1	1
df_t.drop(['Age','Name','Cabin','Ticket'], axis=1)	1	1
test_d.info()   # Age and Fare value missing	1	1
app_test.isnull().sum()	1	1
training_data['isAlone'] = training_data['FamilySize'].map(lambda x: 1 if x == 1 else 0)	1	1
train.groupby('Ticket')['Age'].agg(['size', 'count', 'mean'])	1	1
"new_df.Sex.astype(""int"")"	1	1
"np.where(dftest[""Fare""].isnull())[0]"	1	1
df_pred['Singleton'] = (df_pred['Family'] == 1).astype(int)	1	1
X.drop(['Survived', 'Pclass', 'Name', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Embarked', 'PassengerId'], axis=1, inplace=True)	1	1
"test_data[""Fare""].fillna(random_fare_test, inplace=True)"	1	1
"dataframe[""AgeFare""] = 0"	1	1
df_train.corr()**2	1	1
tr['Name'] = tr['Name'].apply(lambda x : x == Name if type(x) == float else 1)	1	1
"age1_t_df.drop([""Name"", ""Ticket"", ""Sex"", ""Fare"", ""Cabin"", ""Embarked"", ""PassengerId""], axis=1)"	1	1
data.dropna(subset=['Survived'], inplace=True)	1	1
train_test.loc[where_age_is_null, 'Age'] = fill_age#This contains the mean value of age based on gender and class for each missing data in age	1	1
"df[""hasCabin""] = 1"	1	1
"single_women[""Survived""]"	1	1
"New_Df.fillna(""Mrs"", inplace=True)"	1	1
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data = titanic_train)"	1	1
np.sum(women_onboard)/np.size(women_onboard)	1	1
"parameters[""W1""] -= learning_rate * dW1"	1	1
test7['IsAlone'] =  1	1	1
test_data.head(15)	1	1
"train[""cabin_""] = train.apply(lambda row:def_cabin(row[""Position""]),axis=1)"	1	1
dataPrepare['Sex'].value_counts()	1	1
"X_train[""Fare""].fillna(X_train[""Fare""].mean(), inplace=True)"	1	1
data['Pclass']	1	1
notNullData.drop('Survived',1)	1	1
df.loc[ (df.Fare>31.0),                    'FareBand'] = 3	1	1
data['TicketCat'] = data['Ticket'].copy()	1	1
"test_data['Name_pred'] = test_data['Name_pred'].replace(""Ms"", ""Miss"")"	1	1
test.to_csv( 'svm_lin_age_fare_sex_feat.csv' , index = False )	1	1
total['Family_Size'] = total['Parch'] + total['SibSp']	1	1
titanic.drop(['Name','PassengerId','Ticket'], axis=1)	1	1
titanic_df['Cabin'].fillna(value=0, inplace=True)	1	1
comb_data['Embarked'].replace(['C','Q', 'S'],['Cherbourg','Queenstown', 'Southampton'], inplace=True)	1	1
test_df['Age']=test_df[['Age','Pclass']].apply(age_mean_test,axis=1)	1	1
test.drop(labels=['Survived'], axis=1,inplace=True)	1	1
"submission.to_csv(""try_1_logreg.csv"", index=False)"	1	1
df[['surname','Cabin','Pclass','Name']].groupby(['surname','Pclass']).count()	1	1
test.copy(deep = 'True')	1	1
t[0] == '7':	1	1
"data.query('Pclass == 1 and Sex == ""male""');       data4['Age'] = data4['Age'].fillna(42)"	1	1
data_test_dummy['Age_scaled'] = std_scaler.fit_transform(reshape_Age, std_scaler_Age)	1	1
train.loc[(train.Age >= 35) & (train.Age < 50),'Age'] = 4	1	1
df_features['Cabin'].value_counts().head(5)	1	1
Data['Embarked'] = Data['Embarked'].astype('category').cat.codes	1	1
data_train['Sex'].head()	1	1
test.set_index('PassengerId',drop=True,inplace=True)	1	1
df['Survived'].groupby(df['SibSp']).value_counts().unstack()	1	1
combined_data.isnull().sum()	1	1
X['emS'] = X['Embarked'].map({'S':1,'Q':0,'C':0,np.nan:0}).astype(int)	1	1
"combine[0][""Age""] = tmp_train[""Age""]"	1	1
data['SexCode'] = lb.fit_transform(data['Sex'])	1	1
dfTrain['Sex'] = pd.factorize(dfTrain['Sex'])[0]	1	1
plt.hist(test_df['Age'],bins=80)	1	1
cols.append(leaf.prev_leaf.feature)	1	1
dataset['Fare'] = dataset['Fare'].fillna(randint(1, 4))	1	1
t_data.drop('Name', axis=1)	1	1
my_submission.to_csv('titanic_submission2.csv', index=False)	1	1
sur_Family.div(sur_Family.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)	1	1
X.drop('PassengerId',axis=1)	1	1
name_sex_df.describe()	1	1
"titanic_train[""Fare""] = titanic_train[""Fare""].astype(int)"	1	1
"full.set_value(full[""Sex""] == ""female"", ""Sex"", 1)"	1	1
test['Family'].loc[test['Family'] > 1] = 'withFamily'	1	1
"df[""tot_rel""] = df[""SibSp""]+df[""Parch""]"	1	1
full_dataset.loc[(full_dataset['Age']>16.336)&(full_dataset['Age']<=32.252),'Age']=3	1	1
dataTrain_copy['Pclass'] = pclass_scaled	1	1
test['Fare_per_person']=test['Fare']/(test['Family_Size']+1)	1	1
df['Fare'] = df['Fare'].interpolate()	1	1
df[['Survived', 'Age', 'Sex']].copy()	1	1
train_data.loc[train_data.Survived==0, column].dropna(),	1	1
"titanic_df.groupby([""Pclass"",""Sex""]).mean()[""Survived""].index.names"	1	1
"tmp_train[""Cabin_I""] = tmp_train[""Cabin""].apply(lambda x: x[0])"	1	1
test_data.Age.isnull().sum()	1	1
training_df1.loc[:, ['Age']] = imputer.transform(training_df1.loc[:, ['Age']])	1	1
test.drop(['Cabin', 'Ticket', 'PassengerId'], axis=1)	1	1
title_mean_age_test[0][j]:	1	1
model.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu', input_dim = 66))	1	1
accuracy_linsvc_kfolds.append(accuracy_linsvc_kfold)	1	1
"X_test.drop(""Family Size"", axis = 1)"	1	1
train['fareband']=pd.qcut(train['Fare'],4)	1	1
x_train['Ticket'].apply(lambda x: len(x))	1	1
np.where(y == 1, 1, -1)	1	1
train_data['Fare'].std()	1	1
dataset['Age_band']=0	1	1
train_df[['CabinBand', 'Survived']].groupby(['CabinBand'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
test['Family_Size'] = data['Family_Size'][891:]	1	1
fit.append('XGBoost')	1	1
lastname_table['Dead_mom_w_lastname'] = data_full.Lastname[(data_full.AgeBin > 1) & (data_full.Survived < 1) & (data_full.FamilySize > 1) & (data_full.IsFemale)].value_counts()	1	1
full.loc[full.Embarked.isnull(), 'Embarked'] = full.Embarked.mode()[0]	1	1
map_means.items():	1	1
acc_train_summary.loc[clf_name, transform_name] = accuracy_score(y_train, clf.predict(X_train))	1	1
test['hasCabin3'] = train['hasCabin3'].fillna(1)	1	1
normalized_train.sample(10)	1	1
np.mean(x[indices,:], axis=0)	1	1
"train.loc[(train[""Name""]==""Miss"")&(train[""Age""].isnull()), ""Age""] = train.loc[train[""Name""]==""Miss"",""Age""].mean()"	1	1
"train[""Sex""].head()"	1	1
all_data.loc[all_data['Sex']=='male','Age']=all_data.loc[all_data['Sex']=='male','Age'].fillna(all_data.loc[all_data['Sex']=='male','Age'].median())	1	1
titanic_df['Age'][titanic_df['Title']==3].mean()	1	1
full['Parch_cat'] = pd.cut(full['Parch'], bins = [-1,0,2,9], labels = [1, 2, 3])	1	1
dt_train['Survived']	1	1
train.sample(n=10)	1	1
test.loc[:,'Embarked'].fillna('S',inplace=True)	1	1
dset['FamAlive'] = 0	1	1
train['Sex'][train.Sex == 'female'] = 1	1	1
train['Survived'].corr(train['PassengerId'])	1	1
df2['Sex'].value_counts()	1	1
df['Survived'][df['Sex'] == 'female'][df['Pclass'] == 2].value_counts()	1	1
metrics.drop(metrics.index[3]).transpose()	1	1
df['age_2'] = df.age.apply(lambda x: x ** 2).fillna(0)	1	1
"dataset.loc[(dataset[""Fare""] > 14.454) & (dataset[""Fare""] <= 31), ""Fare_cat""] = 2"	1	1
Train_Master['Cabin'].fillna('U', inplace=True)	1	1
"df[""Title""] = df.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())"	1	1
combined_df['Age'][combined_df['Title'] == 2].mean()	1	1
df_Embarked.head()	1	1
titanic[['PassengerId','Embarked','Pclass','Sex','Fare_Scaled','AgeCategory','FamilyCount','FamilyCategory','CabinLevel','Title','Pclass_Sex','Survived']]	1	1
data.loc[(data.Age.isnull()) & (data.Initial=='Mrs'),'Age'] = 36	1	1
X.Cabin.apply(clean)	1	1
data['Man'] = (data[data.Sex=='male'].Age>=age_cutoff).astype(int)	1	1
dataset_train[['Title', 'Survived']].groupby(['Title']).sum()	1	1
df_ticket['Ticket_perishing_women'] = df_ticket['Ticket_perishing_women'].fillna(0)	1	1
train_df.loc[train_df['Ticket']==tick,'n_on_ticket'] = train_counter[tick]	1	1
df_test.drop(['Name'], axis=1, inplace=True)	1	1
train_df.replace('S',2)	1	1
"train_df[""FamilySize""] = train_df.SibSp + train_df.Parch + 1"	1	1
"test_data[""Fare""].mean()"	1	1
train_copy.loc[train_copy['SibSp'] == 1, 'SibSp_Category'] = 1	1	1
all_data[['hasCabin', 'Survived']].groupby(['hasCabin'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
"test.at[i,""Pclass""], test.at[i,""Embarked""]"	1	1
df_fullgroup.sort_values(by='Survived')	1	1
num_list.append(num_length)	1	1
X_df.apply(count_missing, axis=0)	1	1
child2.fitness.values	1	1
data_replaced_ages.loc[(data_replaced_ages['Survived'] == 1) & (data_replaced_ages['Sex'] == 'female') & (data_replaced_ages['Age'].isnull()), 'Age'] = female_ages_survived_age['Age'].mean()	1	1
titanic[['Pclass', 'Survived', 'Surname', 'SurnameId', 'Group_size', 'GroupId', 'Family_size', 'Ticket']]	1	1
test_copy.loc[(test_copy['Age'] > 40) & (test_copy['Age'] <= 50), 'Age_Category'] = 4	1	1
test.loc[test['Age'].isnull() & test['NameTitle'].str.contains('Mrs.'), 'Age'] = 36	1	1
sns.boxplot(train['Embarked'],train['Fare'], hue= train['Pclass'])	1	1
titanic.head()          # This provides an overview of first five rows of titanic dataset	1	1
full_df[ 'Ticket' ] = full_df[ 'Ticket' ].map( cleanTicket )	1	1
sns.boxplot(x='Survived', y='Age', data=train, palette='hls')	1	1
"related_people.loc[related_people[""PassengerId""]==572,""RGroup""]=""Lamson_M"""	1	1
full_data['Age'] = full_data['Age'].astype(int)	1	1
"SVC_result[0][""best_score""],"	1	1
submission.to_csv('lsvc_submission_titanic.csv', index=False)	1	1
sub_df.head()	1	1
all_data['Embarked'] = all_data['Embarked'].map( {'S':0, 'C':1, 'Q':2} ).astype(int)	1	1
data['distinction_in_tikect'] =   (data.Ticket.str.findall('[A-z]').apply(lambda x: ''.join(map(str, x)).strip('[]')))	1	1
train['Salutation'] = train.Name.str.extract(', ([A-Za-z\s]+)\.', expand=False)	1	1
df2['Cabin'] = df2['Cabin'].map(lambda x: cabin_travelled(x))	1	1
"titanic_df[[""Person"", ""Survived""]].groupby([""Person""], as_index=False).mean()"	1	1
"model[""param_grid""],"	1	1
df.to_csv('predictions.csv')	1	1
features['SibSp'] = normMinMax(features['SibSp'])	1	1
train_data_test.drop(drop_features, axis=1)	1	1
x.itertuples():	1	1
test.loc[test['AvFare']>200,'AvFare']=1	1	1
comb_data['NameLength'] = comb_data['Name'].apply(lambda x: len(x))	1	1
"train_two[""FamilySize""] = train[""SibSp""] + train[""Parch""] + 1"	1	1
knn_predictions_with_TGS.sum()	1	1
i['Title'] = i['Title'].replace('Mme', 'Mrs')	1	1
"test[""Sex""]=le.fit_transform(test[""Sex""].values)"	1	1
all_data['Title'] = all_data['Title'].map(title_mapping)	1	1
"train_df.drop(labels=[""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Fare"", ""FareRange"", ""Age""], axis=1)"	1	1
"train.pivot_table(index=""Age_categories"", values = ""Survived"")"	1	1
test.Fare.fillna(np.mean(test.Fare), inplace = True)	1	1
"X_test.drop(labels=[""Name"", ""Ticket"", ""Cabin""], axis=1)"	1	1
"related_people.loc[related_people[""PassengerId""]==672,""RGroup""]=""Hays_M"""	1	1
features['importance'] = random_forest.feature_importances_	1	1
dataset['FareGroup'] = dataset['FareGroup'].astype(int)	1	1
train.drop(['PassengerId','Name'],axis=1,inplace=True)	1	1
rf_submission.to_csv('rf_submission.csv', index=False)	1	1
"test.drop(labels=""Cabin"",axis=1,inplace=True)"	1	1
train_df['kisibasiucret']=train_df['Fare']/(train_df['aile_boyut']+1)	1	1
df['Title'] = df.Title.apply(lambda x: 'Others' if minor_titles.loc[x] == True else x)	1	1
"result.select(""PassengerId"", ""prediction"").show(5)"	1	1
"train_set[""Age""].fillna(train_set[""Age""].median(),inplace=True)"	1	1
X_train['Age'] = X_train['Age'].fillna(X_train['Age'].median())	1	1
test_set.loc[test_set['Fare'] > 300]	1	1
train.ix[:, column].values	1	1
tit['Alone'] = np.where(tit['Fam'] > 0, 0, 1)	1	1
test_df['Survived'] = test_df['Survived'].astype(int)	1	1
test['Sex1'] = b1.transform(test.loc[:,'Sex'])	1	1
"train_prep.drop(""Survived"",axis=1)"	1	1
ECS.style.set_properties(**{'text-align': 'right'})	1	1
ax2[0].set_title('Parch Survived')	1	1
dataset['SibSp'][i]== 0:	1	1
df.groupby(['Pclass', 'Sex'])['Survived'].mean()	1	1
df['Fare'].plot()	1	1
test_df['EmbarkedPos'] = test_df['Embarked'].map( {'C':1, 'Q':2, 'S':3}).astype(int)	1	1
train_df.drop(['Parch','SibSp','FamilySize'],axis=1)	1	1
"dataset.drop(""Cabin"", axis=1, inplace=True)"	1	1
ds['Title'] = ds['Title'].replace(['Countess'], 'Mrs')	1	1
"test_ToPred.loc[test_ToPred.Salutation == 'Master','Age'] = test_ToPred['Age'].fillna(means[""Age""][""Master""])"	1	1
trainOrg.head(5)	1	1
"X_logistic[""Cabin""] = X_logistic[""Cabin""].map(cabin_map)"	1	1
train[['FareBin', 'Survived']].groupby(['FareBin'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
test['Embarked'] = StandardScaler().fit_transform(test['Embarked'].values.reshape(-1, 1))	1	1
titanic_df_test['Age'] = titanic_df_test['Age'].apply(math.ceil)	1	1
testingset.drop(['Name'],axis=1)	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Lady', 'Rare')	1	1
"X_full.drop([""Survived""], axis=1, inplace=True)"	1	1
transformed_df['Cabin_T'] = cabin.Cabin_T	1	1
titanic['GroupId'] = titanic.groupby(['Ticket', 'Surname']).ngroup().add(1)	1	1
titanic_train_data.loc[titanic_train_data.Cabin.str[0] == 'A', 'Cabin'] = 1	1	1
passenger['Embarked'] in ['C', 'Q']:	1	1
df.loc[(df['Fare'] > 7.91) & (df['Fare'] <= 14.454),'Fare'] = 1	1	1
df_test[['PassengerId', 'Survived']].to_csv('DecisionTreeClassifier.csv', index=False)	1	1
"cabin_only[""Room""] = cabin_only[""Room""].fillna(cabin_only[""Room""].mean())"	1	1
data.loc[(data['Age'] > 40) & (data['Age'] < 60), 'AgeGroup'] = 3	1	1
ts.shape[1]	1	1
"train[[""SibSp"",""Parch""]].sum(axis=1)"	1	1
train_df.shape, test_df.shape, gender_sub_df.shape	1	1
"df[""TicketGroupSurvivors""] = df[""Ticket""].apply( lambda x: ticket_dict[x])"	1	1
comb['Minor'] = (comb['Age']<14.0)&(comb['Age']>=0)	1	1
test['Sex'] = test['Sex'].replace(mapping).astype(np.float64)	1	1
each['Title'] = each['Title'].replace('Ms', 'Miss')	1	1
test.loc[(test['Sex'] == 1) & (test['isAlone'] == 0), 'gender_alone'] = 3	1	1
test_ds['FreeTraveller'].fillna(0, inplace= True)	1	1
train['Cabin'].value_counts(dropna=True)	1	1
test['Family'].loc[test['Family'] == 1] = 'Alone'	1	1
tot.Title.replace(dic, inplace= True)	1	1
stats['best_round'] = [idx + 1]	1	1
"df_all['Fare_cut']=pd.cut(df_all[""Fare""], bins=fare_bins)"	1	1
Each_Passenger.loc[(Each_Passenger['Parch'] > 0) & (Each_Passenger['Parch'] <= 1 ) | (Each_Passenger['SibSp'] > 0) & (Each_Passenger['SibSp'] <= 1) , 'Parch'] = 1	1	1
df_final['Alone'][df_final.family_size_level == 1] = 10	1	1
train_df.Age.plot.hist(ax=ax[0],bins=20,edgecolor='black')	1	1
final_submission.to_csv(filename, sep=',', index = False)	1	1
y_pred_submission.head(3)	1	1
train_df['SX'].value_counts().plot.bar()	1	1
combine['Shared_ticket'] = np.where(combine.groupby('Ticket')['Name'].transform('count') >1 ,1,0)	1	1
"test[""Fare""].count()"	1	1
titanicTrain.drop('Name',1)	1	1
title_age[['Title', 'Age']].groupby('Title', as_index=False)['Age'].apply(lambda x : x.std())	1	1
data_train.drop(['Pclass', 'Sex', 'Embarked'], axis=1, inplace=True)	1	1
"train_test[""Fare""].fillna(14.435422,inplace=True)"	1	1
data.Title.apply(lambda x: 'Rare' if (len(x) > 6) else x)	1	1
my_prediction.head()	1	1
BN_test_probs['ground_truth'] = yy_test	1	1
pdf['Title'] = pdf['Title'].replace(ud)	1	1
"title_mapping[""Miss""] and sex == 0 and parch > 1:"	1	1
"test_df.drop([""Name"", ""Ticket"",""Cabin""], axis=1)"	1	1
dset.groupby('Title').describe()['Age']['mean'].sort_values(ascending=False)	1	1
titanic_df['cabin_initial'] = titanic_df['Cabin'].apply(get_initial_letter)	1	1
df.fare.fillna(fare_Q.mean())	1	1
embarked_col.iloc[idx] = sim_data.Embarked.mode().iloc[0]	1	1
train.head() # Preview the data	1	1
test.loc[test['Age']>50,'Age_cat']=4	1	1
test_df.loc[:, ['Pclass', 'Age', 'FamilySize', 'IsAlone', 'G_female', 'G_male', 'Title_Master', 'Title_Mr', 'Title_Ms']].values	1	1
"dat.loc[~dat[""Embarked""].isin([0,1,2]), ""Embarked""] = -1"	1	1
data.loc[(data.passenger_fare>25.69) & (data.passenger_fare<=25.929) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>25.69) & (data.passenger_fare<=25.929) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
"test_df[""Fare""] = test_df.Fare.fillna(test_df.Fare.mean())"	1	1
"models.append((""KNeighbors"",KNeighborsClassifier()))"	1	1
data_train['FareGroups'] = pd.qcut(data_train['Fare'], 4, labels = [1, 2, 3, 4])	1	1
test.values[:,0:9]	1	1
data.Survived.groupby(data.Embarked).mean()	1	1
train_data['CategoricalFare'] = pd.qcut(train_data['Fare'], 3)	1	1
models['set2']['num_attrs'] = ['Fare', 'Age', 'Family_total']	1	1
train.corr().abs().Survived.sort_values(ascending=False)[1:]	1	1
data.replace(clean_up_dict, inplace=True)	1	1
train_df['Cabin'] = imp_const.transform(train_df[['Cabin']]).ravel()	1	1
str[0].str.strip()	1	1
dftrain['Fsize'].dtype	1	1
feature_columns.append((col, tf.feature_column.embedding_column(cat_col, embedding_dim)))	1	1
"df_train['Age'], y = df_train['Fare'], hue = ""Survived"","	1	1
test.drop(['Cabin', 'Ticket','Name'], axis=1)	1	1
"df_titanic.drop(labels = [""PassengerId""], axis = 1, inplace = True)"	1	1
"X_test[""Pclass""] = X_test[""Pclass""].astype(""str"")"	1	1
summary_df.loc['Survived','role']='target'	1	1
titanic['Age'].loc[titanic['Title'] == name] = titanic['Age'].loc[titanic['Title'] == name].fillna(age)	1	1
train.loc[0:Qtest_n, quick_feature].values	1	1
"grouped[""s_rate""] = grouped[""sum_of_survivor""] / grouped[""count_of_class""]"	1	1
train_df.loc[train_df['FamilySize'] == 1, 'Alone'] = 1	1	1
train_df.drop(['Ticket', 'Cabin','PassengerId'], axis=1)	1	1
dataframe.items():	1	1
visualization_df['AgeBin_Code'] = label.fit_transform(visualization_df['AgeBin'])	1	1
age_present.Parch.astype('category', categories=list(range(8)), ordered=True)	1	1
df[['Embarked', 'Survived','Pclass','Fare', 'Age', 'Sex']].groupby(['Embarked'], as_index=False).mean()	1	1
test_df.ix[i, 'Familytype'] = 'Alone'	1	1
"tmp[""CabinHead""].fillna(0, inplace=True)"	1	1
data['Embarked'].fillna('N', inplace=True)	1	1
check_model['survived'] = rand_survival_predictions	1	1
test_new.rename(columns={'male':'sex'}, inplace = True)	1	1
train.Age.dropna().astype(int).hist(bins=70,ax=axis1)	1	1
agg_df_title['Survived', 'mean'].plot(kind='bar', yerr=agg_df_title['Survived', 'sem'], alpha = 0.5, error_kw=dict(ecolor='k'));	1	1
"train.loc[train[""Title""] == ""Ms""].mean()[""Age""]"	1	1
train_df['Age'].dropna().astype(float).hist(bins=70, ax=axis1)	1	1
source.drop(columns=columns)	1	1
iloc[0].T.to_frame().reset_index()	1	1
train_df['Name'].apply(lambda name: len(name)).hist()	1	1
df_train.drop(['Cabin'],axis=1)	1	1
Data['Fare'] = Data['Fare'].fillna(Data['Fare'].mean())	1	1
train_d['FamilySize']=train_d['Parch']+train_d['SibSp']+1	1	1
pipelines.append(('ScaledCART', Pipeline([('Scaler', StandardScaler()), ('CART', DecisionTreeClassifier())])))	1	1
"train_dat.at[i,""Fmsize_c""] = ""MedF"""	1	1
data['SortFare_3'] = 0	1	1
train_df['EmbarkedPos'] = train_df['Embarked'].map( {'C':1, 'Q':2, 'S':3}).astype(int)	1	1
row['Age'] <= 70 and row['Age'] > 16:	1	1
"df[""Age_Categories""] = pd.cut(df[""Age""],cut_points,labels=label_names)"	1	1
df.to_csv('submission.csv', header=True)	1	1
combine.loc[(combine['Fare'] > 14.454) & (combine['Fare'] <= 31), 'Fare']   = 2	1	1
titanic_train.groupby('FreqFare').count().PassengerId.plot.barh()	1	1
trainPCA2['2'] = trainPCA[:,1]	1	1
train.groupby(['Pclass'])['PassengerId'].count()*100/train.groupby(['Pclass'])['PassengerId'].count().sum()	1	1
in ['Sex','Embarked','Title']:	1	1
best_gradientboost.best_params_.get('n_estimators'),	1	1
train_set.drop('Ticket', axis = 1, inplace = True)	1	1
"titanic_train[[""Family"",""Survived""]].groupby([""Family""],as_index=False).mean()"	1	1
lr1_test.to_csv('L1lr_test.csv')	1	1
X_scaled.loc[ntr+ncv:ntr+ncv+ntt-1]	1	1
predicted_values_LR.astype(int)	1	1
testData['Initial']=testData.Name.str.extract('([A-Za-z]+)\.')	1	1
data_train.loc[:,'survived']	1	1
y[0] == 'the':    # Search for the countess	1	1
data.parents.loc[data.PassengerId==581] = 0	1	1
"models.append((""DTC"",DecisionTreeClassifier()))"	1	1
acc_train_cv_summary.loc[clf_name, transform_name] = score['train_score'].mean()	1	1
"df[""group_count""]   = df[""group_count""].fillna(0)"	1	1
"df_real_test[""Embarked_code""] = label1.transform(df_real_test[""Embarked""])"	1	1
"df.drop([""embarked""], axis=1)"	1	1
test.drop(labels=['Cabin'], axis=1)	1	1
dataset.loc[dataset['Age'] <= 16, 'Age1'] = 1	1	1
"train['Young_m'] = (train['Age']>=18) & (train['Age']<=40) & (train['Sex']==""male"")"	1	1
plt.hist(x=[train_df[train_df['Survived']==1]['Fare'],train_df[train_df['Survived']==0]['Fare']],stacked=True,color=['red','blue'],label=['Survived','Dead'])	1	1
Y_oh.shape[1]	1	1
titles.drop([0,1], axis=1).values	1	1
train_df.groupby('Parch')['Survived'].mean().plot(kind='barh',ax=axesbi[0,2],xlim=[0,1])	1	1
"res[""PassengerId""] = test_labels[""PassengerId""]"	1	1
predict.info()	1	1
train.loc[i, 'Cabin'] = train.loc[i, 'Cabin'][0]	1	1
drop_train.loc[drop_train.Pclass == 3,'Age'].mean()	1	1
"all_data[""Title""] = all_data[""Title""].map({""Master"":0, ""Miss"":1, ""Ms"" : 1 , ""Mme"":1, ""Mlle"":1, ""Mrs"":1, ""Mr"":2, ""Rare"":3})"	1	1
"train.drop([""SibSp"", ""Parch"", ""Title_Mr""], axis = 1)"	1	1
"train[[""SibSp"", ""Survived""]].groupby([""SibSp""], as_index = False).mean()[""Survived""]"	1	1
titanic[['Survived','Sex']].groupby('Sex').mean()	1	1
df_tr1['Survived']	1	1
df_titanic['IsKid'] = (df_titanic['Age'] < 16).astype(int)	1	1
data.loc[data['Age'] <=16, 'Age'] = 0	1	1
dataframe2.sort_index(ascending=True,axis=0)	1	1
inputData['Pclass'].values.tolist()	1	1
whole.set_value(idx,'Fid',np.nan)	1	1
train.info()  #查看具体信息，Age、Cabin、Embarked均有缺失值	1	1
all_data.values[:,0]	1	1
df_test['Survived'] = y_test_pred	1	1
test.loc[test['Cabin'].str.len() == 15.0, 'CabinN4'] = test['Cabin'].astype(str).str[-2:]	1	1
pred_survivors2.head()	1	1
data_copy.loc[data_copy['Sex']=='male','Age']=data_copy.loc[data_copy['Sex']=='male','Age'].fillna(data_copy.loc[data_copy['Sex']=='male','Age'].median())	1	1
np.std(lossesLs)	1	1
ship['Title_Code'].loc[(ship['Title_Code'] == 4) & (ship['Survived'] == 1)].count()	1	1
combine['Title']=combine['Name'].str.extract('([A-Za-z]+)\.',expand=True)	1	1
total['LargeF'] = total['Fsize'].map(lambda s: 1 if s >= 5 else 0)	1	1
train['Age'][np.isnan(train['Age'])]=rand1	1	1
"df_train[""Age""].fillna(df_train.groupby(""Title"")[""Age""].transform(""median""), inplace =True)"	1	1
"titanic_test.drop(""PassengerId"", axis = 1, inplace = True)"	1	1
"df_test[[""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Pclass""]]"	1	1
X_test.reset_index(inplace=True)	1	1
train_sex2num.head()	1	1
train_df.ix[i, 'Familytype'] = 'Small family'	1	1
X_test['Age'].mean()	1	1
new_test[['Sex','Age','SibSp','Parch','Fare','class1','class2','Q','S']]	1	1
df_train_copy.drop(['PassengerId'], axis=1)	1	1
train_dataframe.values	1	1
train[['Pclass', 'Survived','Sex']].iloc[0:3,:]	1	1
np.max(cv_data['Accuracy_test_avg']),	1	1
data.surname_Beckwith.astype(np.uint8)	1	1
np.dot(l1, syn1)	1	1
test['Fare'] = imp.fit_transform(test_fare)	1	1
X_test.drop(['Embarked', 'PassengerId', 'CabinCode', 'Survived'], axis=1, inplace=True)	1	1
data['Age'] = data.groupby('Title')['Age'].apply(lambda x: x.fillna(x.median()))	1	1
age_2_count.loc[:15,].transpose()	1	1
df.drop('Ticket',axis=1,inplace=True)	1	1
"train_data.loc[train_data[""Name""].str.contains(""Don.""), ""TitleDon""] = 1"	1	1
titanic_test_dataset_for_testing_step.head(3)	1	1
df.isnull().sum(axis = 0)	1	1
Survived.corr(train_df['Title'], method='kendall')	1	1
data['Sex'] = data['Sex'].map({'male':1,'female':0})	1	1
dfTrain['Name_Title'].value_counts()	1	1
results.count()	1	1
df_output[['PassengerId', 'Survived']].to_csv('output.csv', index=False)	1	1
train2['Embarked'] = train2['Embarked'].map(embark_map)	1	1
familylist.append(fam)	1	1
titanic_tobepredicted['Age'] = df_test_tobepredicted['Age'].fillna(age_mean)	1	1
data.loc[(data['Fare']>10.5)&(data['Fare']<=21.679),'Fare_cat']=2	1	1
sns.boxplot(y='Age', x='Pclass', ax=ax2, data=test_df, linewidth=1, saturation=5, palette=palette3)	1	1
"ax[1].set_title(""Family Group: Survived vs Unsurvived"")"	1	1
acc.append(pd.DataFrame({'Model': 'Logistic Regression', 'Accuracy': [accuracy_score(y_true, y_pred)]}))	1	1
features.corr().abs()	1	1
train.loc[(train['Fare']>300) & (train['Fare']<=350),'FareCategorical'] = 6	1	1
ax1[1].set_title('Feature Importance in AdaBoost')	1	1
train_df.drop(['Parch', 'SibSp'], axis=1, inplace=True)	1	1
age_complete['DisAge'].values	1	1
Test['caE'] = Test['Cabin'].map({'A':0,'B':0,'C':0,'D':0,'E':1,'F':0,'G':0,'T':0,'U':0}).astype(int)	1	1
comb['Family_Size'] = comb['Parch'] + comb['SibSp'] + 1	1	1
data_pruned.loc[ data_pruned['Fare'] > 100, 'Fare'] = 4	1	1
"full.set_value(full[""Family""] == ""small"", ""Family"", 1)"	1	1
test.drop(columns=['Name', 'SibSp', 'Ticket', 'Cabin'])	1	1
tit_df.head()	1	1
"new_data[""Age""] =new_data[""Age""] / 15"	1	1
train_df.loc[train_df['family_size'] == 0,'Alone'] = 1	1	1
tf.round(y_model)	1	1
pd.isnull(Titanic_dataframe.loc[a, 'Cabin']) == True :	1	1
train_df.loc[train_df['Fare']<=7,'Fare_new']=0	1	1
"results.to_csv(""results.csv"", sep=',',index=False)"	1	1
x.iloc[:,1:].values	1	1
dataset_train.drop(['Survived'], axis=1).values	1	1
all_data['AgeBin'] = pd.qcut(all_data['Age'],4)	1	1
np.dot(features, theta)	1	1
RM.drop('random')	1	1
submission3['PassengerId'] = ID	1	1
df_train.astype(float).corr(),linewidths=0.1,vmax=1.0,	1	1
output.join(predict)	1	1
combined.apply(lambda r: fillAges(r) if np.isnan(r['Age']) else r['Age'], axis=1)	1	1
data.drop(['PassengerId','Survived', 'Sex','Name','Ticket','Cabin','Embarked'], axis=1)	1	1
data.groupby('SibSp')['Survived'].mean().plot(kind='bar')	1	1
row['Sex'] == 0 and row['Family'] == 1 and row['Age'] >= 18:	1	1
df_train.groupby('Initial')['Age'].mean()	1	1
"full[""Age""].median() # median age for entire dataset"	1	1
Embark_dummy.head(5)	1	1
"titanic_df['Age'].plot(kind=""hist"",title = ""Ages of all the passengers on ship before replacing null "",figsize = (10,10)).set_xlabel(""Agesg in years"")"	1	1
data_train.apply(pd.isna).apply(np.any)	1	1
train_data.drop(['SibSp','Parch'], axis=1, inplace=True)	1	1
clean_test.isnull().sum()	1	1
test_copy['Sex_Category'] = 1	1	1
"titanic_df.loc[titanic_df.Salutation == 'Master','Age'] = titanic_df['Age'].fillna(means[""Age""][""Master""])"	1	1
titles_test.replace(rare_titles, 'rare', inplace = True)	1	1
join_data['Title'].value_counts()	1	1
test['Person'] = test[['Age','Sex']].apply(get_person,axis=1)	1	1
"data[""Pclass""].ix[i]"	1	1
submission.to_csv('sub.csv', index=False)	1	1
test.to_csv( 'svm_rbf_all_feat.csv' , index = False )	1	1
"cache [""A2""]"	1	1
x['FamilySize']	1	1
"train_data[""Embarked""].isnull().sum()"	1	1
data.drop(['PassengerId','Cabin','Name','Sex','Ticket','Embarked','Age'],axis=1,inplace=True)	1	1
train_dataset['Embarked'].fillna('S',inplace=True)	1	1
submission.to_csv('titanic_v2.csv', index=False)	1	1
"df[""Age""]=np.where(df.Age.isna() & df.Survived==1 , meanS,df[""Age""])"	1	1
data['Ptype_AdultM'] = np.where((data.Sex=='male') & (data.Title!='Master'), 1, 0)	1	1
test['c_std'].min()	1	1
Xbase.head()	1	1
Titanic_Master[['Name','Ticket', 'Pclass', 'Cabin']].head()	1	1
titanic_scaled.iloc[0:891,:]	1	1
"dataset.loc[(dataset[""Age""] > 9) & (dataset[""Age""] <= 19), ""Age""] = 1"	1	1
"train[""title""] = extract_titles(train)"	1	1
df['Survived_fam'].fillna(df['Survived_fam'].mean(), inplace=True)	1	1
dataset.drop(columns=['PassengerId','Pclass','Name','Sex','Ticket','Cabin','Embarked','Cabin2'])	1	1
"big['XWho'][big['TName'] == i] = ""Miss."""	1	1
data_combined['Age'].hist(bins=70, ax=axis2)	1	1
train_data.loc[train_data.Embarked.isnull(), 'Embarked'] = 'S'	1	1
fig['layout']['yaxis1'].update(title='Count')	1	1
df.loc[ df['NameLen'] <= i*5, 'NameLenBin'] = i	1	1
"dataset[""Age5""] = 0"	1	1
test_data.fillna(test_data.mean())	1	1
df2.head(5) # DF2 IS WITHOUT SURVIVED COLUMN	1	1
submit.to_csv(SUBFIC, index=False)	1	1
df[['Title','Pclass','Age']].groupby(['Title','Pclass']).median()	1	1
all_dummy_df.loc[train_df.index]	1	1
train_df.drop(['Name'],axis=1)	1	1
titanic['U'] = (titanic['Cabin_group'] == 'U').astype(int)	1	1
train_raw['Embarked'] = train_raw.Embarked.fillna(train_raw.Embarked.mode()[0])	1	1
grid.axes.flat:	1	1
"dev_data.drop([""PassengerId"", ""Survived"", ""Name"", ""Age"", ""Ticket"", ""Cabin""], axis=1)"	1	1
X_test_norm.iloc[:,:].values.astype('float');	1	1
combine.groupby(['Sex'])['Title'].value_counts()	1	1
test.drop(['Name','Sex','Ticket','Embarked','PassengerId','Pclass'],axis=1)	1	1
test_copy.drop(drop_elements, axis = 1)	1	1
df_test['LastName'] = name_parts[0]	1	1
"axs[1].set_title(""Survival rate vs Sexe vs Age"")"	1	1
"dfTestTemp.drop(""PassengerId"",axis=1).copy()"	1	1
DataSetTest.isnull().sum()	1	1
train2['Age'][x] = age_mapping[train2['Title'][x]]	1	1
"df[""TitleScore""] = 0"	1	1
test_features2['Age'] = test_features2['Age'].fillna(age_mean)	1	1
"merged_data[""embarked""] = le.fit_transform(merged_data[""embarked""].fillna(""Z""))"	1	1
"train.drop([""Survived""],axis=1)"	1	1
dataset['age_quantile']	1	1
"dset[""Title""] = dset[""Title""].replace([""Lady"", ""Mlle"", ""Ms"", ""Mme""] , ""Miss"")"	1	1
full['Age'] = full['Age'].apply(int) #Getting rid of the .5	1	1
sns.boxplot(train.Age)	1	1
"titanic_df[""Survived""].values"	1	1
dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454),'Fare'] = 1	1	1
ax2.hist(train_data[train_data['Survived']==1].Fare, bins = 25, label = 'Survive', alpha = .50, edgecolor = 'black',color ='lightgreen')	1	1
data1['Title'] = data1['Title'].replace({'Ms': 'Miss', 'Mme': 'Mrs', 'Mlle':'Miss'})	1	1
data.loc[(data.Age.isnull()) & (data.Initial=='Other'), 'Age'] = 46	1	1
DataFile.drop('Fare',axis=1)	1	1
test['Ttype'] = test['Ticket'].str[0]	1	1
df.fillna(-1, inplace=True)	1	1
test['isAlone'] = np.where( (test['SibSp']+test['Parch'])==0,0,1)	1	1
df.dropna(axis=0, how='any', subset=['Sex'])	1	1
df_ticket['TicketGroup_include_perishing_women'] = df_ticket['Ticket_perishing_women'] > 0	1	1
estimators_list.append(('Gradient Boosting', grad_boost))	1	1
data.Child.mean(),	1	1
"titanic_train.set_index(""PassengerId"")"	1	1
titanic_train.groupby('Sex')['Survived'].mean()	1	1
df.shape[0],	1	1
df['Fare'] = df['Fare'].fillna(df['Fare'].dropna().median())	1	1
"data_copy.loc[:,""Fare""] = data_copy[""Fare""].fillna(data_copy[""Fare""].median())"	1	1
dataset['IsAlone'] = 0 # default to 0, meaning not alone	1	1
"plot.hist(ax = ax[1], bins = 20, edgecolor = ""black"", color = ""green"")"	1	1
data['Age_category'] = data['Age'].apply(age_category)	1	1
np.sum(dZ2, axis = 1, keepdims = True)	1	1
test_df.iloc[:,[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]	1	1
test_data.select_dtypes(['object']).columns	1	1
dataset['EditedAge'][rowIndex] <= 65:	1	1
train_ds['Embarked'].fillna((train_ds['Embarked'].value_counts()).index[0], inplace= True)	1	1
full.loc[(full.Title == 'Rev') & (full.Sex == 'male'), 'Title'] = 'Mr'	1	1
data_to_submit.to_csv('RF_result_20180901.csv', index = False)	1	1
predictions['KNearest']=acurracy_KNN*100	1	1
ax[1].set_title('Survived vs. Dead by Pclass')	1	1
df_scaled.describe()	1	1
titanic_df['cabin_initial'].head(10)	1	1
"accuracy_models[""Accuracy""][j] = scores_model.mean();"	1	1
data_full.loc[data_full['Titles']==title, 'AgeBin'].mode().values[0]	1	1
titanic_train_data['Name'].apply(titleDon)	1	1
train_df[['Survived','AgeGroup', 'Sex']].groupby(['Sex', 'AgeGroup']).mean()	1	1
train_df['Age'].fillna(train_df['Age'].median(skipna = True), inplace = True)	1	1
"test_df[""percentage""]=test_df[""percentage""].astype(""float64"")"	1	1
result.to_csv('results.csv', index=False)	1	1
dataset['Fare'].hist()  # feature 'Fare'	1	1
x['Age']=x['Age'].fillna(mean_value)	1	1
df['HasCabin'] = df['Cabin'].apply(lambda x : 0 if x == 'NaN' else 1)	1	1
X.Cabin.apply(lambda x: 0 if pd.isnull(x) else 1)	1	1
test.loc[(test['Title'] == title) & (test['Age'].isna()), 'Age'] = titleagemeans[title]	1	1
"dataset[""FamilySize""] = dataset['SibSp'] + dataset['Parch'] + 1"	1	1
predictions.apply(lambda x: testData(createSplitNoColinear(train), x), axis=1)	1	1
"model.add(Activation(""relu"")) # add activation function, I choose ""relu"" for classification"	1	1
"train[""Embarked""].fillna(""S"", inplace=True)"	1	1
train.groupby(['SibSp','Survived']).PassengerId.count().unstack()	1	1
data['Cabin'] = data['Cabin'].replace(['Z'],'X')              #Missing	1	1
scipy.stats.describe(X[0])	1	1
test_set['Embarked'] = encoder.fit_transform(test_set['Embarked'])	1	1
test['c_std'].max()	1	1
embark_survive_crosstbl.divide(embark_survive_crosstbl.sum(axis = 1), axis = 0)	1	1
train_data['Fam_Size']= train_data['SibSp'] + train_data['Parch']	1	1
X_train.drop(['Embarked'],axis=1)	1	1
dataset_test['PassengerId']	1	1
c_variable.append(raw_c_variable[i] if i in c_variable_index else 0)	1	1
dummy_train_df.shape	1	1
"titanic_test.drop(""PassengerId"", axis=1).copy()"	1	1
train['Fare'].fillna(train.groupby(['Pclass'])['Fare'].transform('median'), inplace = True)	1	1
df.loc[df == 1].index	1	1
train[['Pclass', 'Survived']].groupby(['Pclass']).mean().plot(kind='bar', ax=ax2)	1	1
"X[""Fare""].fillna(X[""Fare""].mean(), inplace=True)"	1	1
numerical_columns.append('AgeGroup')	1	1
train_df[['IsAlone','Survived']].groupby(['IsAlone'],as_index=False).mean()	1	1
data.loc[(data.passenger_fare>25.99) & (data.passenger_fare<=26.) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>25.99) & (data.passenger_fare<=26.) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
train.drop(('Survived'), axis=1)	1	1
"test_df[""age""] = test_df[""age""].fillna(test_df[""age""].mean())"	1	1
embarkDummy_test.drop(['S'], axis=1, inplace= True)	1	1
data.Age.mean() - 3 * data.Age.std()	1	1
np.dot(temp,xt)	1	1
correlation.append(corr)	1	1
X2['Fare'][i] = fare_avg	1	1
data.shape[1] # features	1	1
combine.ix[(combine['Age'].isnull())&(combine['Pclass']==2)&(combine['Sex']=='female'),'Age'] = 30	1	1
"test[""SibSp""].isnull().sum()"	1	1
test_df['passengerid'].shape	1	1
dftrain.dtypes	1	1
frame.loc[frame.Embarked=='Q','Embarked']=2	1	1
dataset['WcgAllSurvived'] = dataset['WcgAllSurvived'].astype(int)	1	1
"data['Has_Cabin'] = data[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
data_test.drop('Cabin', axis = 1, inplace = True)	1	1
np.mean(predictions == survived_or_not)	1	1
df.drop(['PassengerId','Sex','Embarked','Name','Ticket', 'Cabin', 'Age', 'Fare'],axis=1,inplace=True)	1	1
dataset['Title'] = dataset['Title'].replace(['Lady','Countess','Capt','Col','Don','Dr','Major','Rev','Sir','Jonkheer','Dona'],'Rare')	1	1
"df[""FamilyMemberOnBoard""]  = 1"	1	1
test.drop([x for x in test.columns if x not in train.columns], axis=1, inplace=True)	1	1
"results.to_csv(""output_RF.csv"",index=False)"	1	1
df['fare_scale'] = fare_scale	1	1
"dat[""tick_num""] = dat['Ticket'].map(lambda s: 1 if re.sub(r""\d"","""",s)=="""" else 0)"	1	1
df['Cabin'].fillna('X',inplace=True)	1	1
data_df['Ticket_Lett'] = data_df['Ticket_Lett'].apply(lambda x: replacement.get(x))	1	1
fare_peoples[0][index] = curr_fares.loc[curr_fares['Survived'] == 0].shape[0]	1	1
titanic_test.fillna((titanic_test.median()))	1	1
test.join(test_suffixes, lsuffix='left', rsuffix='right')	1	1
test[['Pclass', 'Sex','Age','SibSp','Parch', 'Fare', 'Embarked']]	1	1
np.sum(y_head-y_train)/x_train.shape[1]	1	1
"age.dropna(axis = 0, how = ""any"") # Delete ""nan"" recoards"	1	1
dataframe.loc[(dataframe[column_name] >= 21) & (dataframe[column_name] < 31), column_name] = 2	1	1
train.loc[train['Fare']<7,'Fare']=1	1	1
ax.axes.get_xaxis().set_visible(False)	1	1
train['encodedTitle'] = le.transform(train['title']).astype('int')	1	1
df.loc[df['Age']>70,'Age_band']=7	1	1
knowfamilies.append(fam)	1	1
dataset['Fare'] = dataset['Fare'].fillna(value=200)	1	1
train.sample(frac=1).reset_index(drop=True)	1	1
traind['SibSp'].value_counts()	1	1
combined_df['Age'].std()  #stap = std of age of passengers	1	1
np.where(test_set.isna())	1	1
"predblend[""blendout""] = (predblend[""meanblend""] > 0.5).astype(int)"	1	1
combine['Cabin'] = combine['Cabin'].fillna('Unknown')	1	1
train['Title'][train['Survived']==1].value_counts().sort_index()	1	1
pca.transform(X_train_filled)	1	1
output['Survived'] = df_test['Survived'].astype(int)	1	1
model_type.append('Logistic Regression')	1	1
train_data['Isalone'] = (train_data['Family'] == 1)*1	1	1
"train_set[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).mean()"	1	1
data.loc[(data.FamilySize == 1), 'FamilySizeBand'] = 1	1	1
Y_out.head()	1	1
"res.to_csv(""submit.csv"")"	1	1
dataset['title'] = dataset.title.apply(lambda x: 'rare' if x not in ['Mr', 'Miss', 'Mrs', 'Master'] else x)	1	1
original_train_data.groupby('NoCabin')['PassengerId'].count()	1	1
df.replace(['male','female'],[0,1])	1	1
test.apply(get_family_id, axis=1)	1	1
"data[""Sex_Code""] = label.fit_transform(data['Sex'])"	1	1
fun_kwargs['kde']:	1	1
comb['ES'] = comb['Embarked'] == 'S'	1	1
"df.to_csv(""submission.csv"", header=True, index=False)"	1	1
survival.append(1)	1	1
titanic_df[['Sex','Class','Survived']].groupby(['Sex','Class'],as_index=False)	1	1
sns.boxplot(x=datacolumen)	1	1
train_df['Fare'].ix[train_df['Fare']>151] = 152	1	1
"train.groupby([""Pclass"",""Sex""]).Age.median()"	1	1
df.describe()  # displays different descriptive measures of the numerical features.	1	1
df2['Embarked'].mode()	1	1
train['Pclass'].value_counts().plot(kind='bar', ax=ax1)	1	1
X['caB'] = X['Cabin'].map({'A':0,'B':1,'C':0,'D':0,'E':0,'F':0,'G':0,'T':0,'U':0}).astype(int)	1	1
"df[""Cabin_I""] = df[""Cabin""].fillna(""U"").replace(""T"", ""U"").apply(lambda x: x[0])"	1	1
predict_test.append(z)	1	1
comb_data['PassCountTicket'].value_counts().sort_values(ascending=False)	1	1
"train_df.groupby(""parch"")[""survived""].mean().plot()"	1	1
test_data.drop(['Cabin','Cabin_Letter','Cabin_Letter_num', 'Name', 'Ticket'], axis=1)	1	1
combined_features.drop('Pclass', axis=1, inplace=True)	1	1
df['Sex_Age'] = df['Sex_Age'].fillna(df['Sex_Age'].median())'''	1	1
df2['Sex'] = df['Sex'].apply(lambda e : 1 if e=='male' else (2 if e=='female' else None))	1	1
X_train.fillna(X_train.mean())	1	1
cost_list2.append(cost)	1	1
d['FamilySize'] = d['SibSp'] + d['Parch'] + 1	1	1
data.Personal_Titles_Kid.astype(np.uint8)	1	1
traind['Parch'].value_counts()	1	1
data_df['AgeBin'] = pd.qcut(data_df['Age'], 4)	1	1
selection.transform(strat_train_set_X)	1	1
data.describe(include=[np.object, 'category'])   # 输出类别型数据的基本统计描述信息	1	1
"sns.boxplot(x=""Survived"", y=""Age"", hue=""Sex"", data=train_set);"	1	1
data.select_dtypes(include =['float64', 'int64'] ).dtypes.index	1	1
submission.drop(labels='Ticket', inplace=True, axis=1)	1	1
df.loc[testdex, :]	1	1
plt.hist(ageHasSibs)	1	1
df.dtypes[df.dtypes.map(lambda x: x=='object')]	1	1
"subset[""Fare""] = (subset[""Fare""] - mu)/sigma"	1	1
dataset.loc[(dataset['Fare']>14.454)&(dataset['Fare']<=31),'Fare']=2	1	1
Titanic_pred4.head()	1	1
feature_importance['importance'] = random_forest.feature_importances_	1	1
survived_age.dropna(inplace=True)	1	1
train[['Sex','Survived']].groupby(train['Sex']).mean()	1	1
"train[""Name""]:"	1	1
dataX.append(row)	1	1
np.any(np.isnan(titanic_sub_new))	1	1
re.sub(r'[^\w]', '', ticket_str.strip())	1	1
dataset.drop(['SibSp','Parch','Name'],axis=1,inplace=True)	1	1
validation_dataset.drop(['Name', 'Ticket', 'Cabin'], axis=1)	1	1
data.loc[data.Title.str.contains('126'),'Title']='Master'	1	1
train_df.replace({'Title': mapping}, inplace=True)	1	1
"submission[""Survived""] = survivallist.astype(int)"	1	1
test_df['family_size'] = test_df['SibSp'] + test_df['Parch'] + 1	1	1
test.loc[(test['Age'] > 16),'Age']=1	1	1
df_copied['AgeGroup'] = df_copied['AgeGroup'].fillna(-1.0)	1	1
df['def_Cabin'] = df.Cabin.notnull().astype(int)	1	1
accuracy_kfold.append(cv_result)	1	1
train_df['DataType'], test_df['DataType'] = 'training', 'testing'	1	1
train['fare1'] = train.apply(fare, axis=1).astype('category')	1	1
"titanic_train[""Family""] = titanic_train[""Parch""] + titanic_train[""SibSp""]"	1	1
combined_df['Age'].notnull()	1	1
df['Fare'] = df['Fare'].apply(bin_fares)	1	1
train_data[['Pclass','Survived']].groupby('Pclass', as_index=False).mean()	1	1
"data_train.pivot_table(index=""Sex"",values=""Survived"")"	1	1
"died[""Fare""].plot.hist(alpha=0.5,color='red',bins=50)"	1	1
test.assign(Alone = ((test.SibSp == 0) & (test.Parch == 0)))	1	1
train['embarked'] = train['embarked'].fillna('S')	1	1
"my_solution.to_csv(""C:\\Users\\Ayushi Asthana\\Documents\\Machine learning\\Titanic\\gender_submission2.csv"", index_label = [""PassengerId""])"	1	1
drop_train.drop(['Survived'], axis=1)	1	1
train['A3'] = np.array(train['CategoricalAge'] == 3).astype(np.int32)	1	1
pd.DataFrame.from_dict(train_pred).mean(axis=1) > 0.5	1	1
age_fare['Age'] = titanic['Age']	1	1
df['Title'] = name_row.copy()	1	1
l.T	1	1
"CopyOfTrainDataSet[""Survived""]"	1	1
"dataset[""Sex_Code""] = label.fit_transform(dataset['Sex'])"	1	1
df.as_matrix(columns=['Pclass','Age','Sex_female','Sex_male','Fare'])	1	1
np.append(training_features[featselect.support_], ['Survived','PassengerId'])	1	1
df.drop(labels='Embarked', axis=1)	1	1
titanic_df['Fc'] =     titanic_df[['C','Male']].apply( get_malec, axis=1 )	1	1
dataframe.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin', 'Fare'])	1	1
"train[""Family_flag""] =0"	1	1
cv_std.append(std)	1	1
X_train.shape, y_train.shape, X_test.shape #Verify everything has the right dimensions	1	1
model.add(Dense(units = 1, kernel_initializer = 'glorot_uniform', activation = 'sigmoid', input_dim = 3))	1	1
full['Title'] = full['Title'].replace(['Mrs','Mme'],'Mrs')	1	1
"Age_set.dropna(axis=0,how=""any"")"	1	1
train_data.drop(['Name','Ticket','Cabin','Fare','PassengerId'],axis=1)	1	1
scores_df.to_csv('scores_df.csv')	1	1
"df[[""Age"", ""Title""]].dropna().groupby(""Title"").mean()"	1	1
P.apply(lambda x: 1*(x>=0.5))	1	1
Y_train.shape[0]	1	1
etc_feat_red.transform(etc_final_test)	1	1
X_train.as_matrix()	1	1
score.append(gbmodel.score(X_train, y_train))	1	1
"X_valid.drop([""Survived""], axis = 1, inplace=True)"	1	1
"test_df.loc[:,[""Pclass"", ""Sex"",""SibSp"", ""Age"", ""Parch"", ""Embarked""]]"	1	1
df_age_train.dropna()	1	1
"dataset['Cabin'] = dataset[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
test.PassengerId.copy()	1	1
"titanic_test_dataframe[""IsAlone""] = np.where((titanic_test_dataframe[""SibSp""] + titanic_test_dataframe[""Parch""]) == 0,""yes"", ""no"")"	1	1
data_for_analysis.describe()	1	1
dataset['familySize'] = dataset['SibSp'] + dataset['Parch'] + 1	1	1
train.groupby(['Survived'])['PassengerId'].count()*100/train.groupby(['Survived'])['PassengerId'].count().sum()	1	1
data_train['famsz'] = data_train.SibSp + data_train.Parch + 1	1	1
Test_Master.loc[(Test_Master['Fare'] > 0.0) & (Test_Master['Fare'] <= 7.85), 'Fare'] = 1	1	1
model.transform(final_train_set_X)	1	1
raw_train[['FamilyMembers', 'Survived']].groupby('FamilyMembers').mean().plot(kind='bar', legend=False, color='c')	1	1
all_data.set_value(1215,'Deck',value='E')	1	1
"input_data[""Embarked_Q""] = input_data[""Embarked""].apply(lambda x: int(x == ""Q""))"	1	1
csv_train['Age'].mean()	1	1
train_X['Age'].fillna(train_X['Age'].median(), inplace = True)	1	1
"copy.loc[copy.Embarked == 'C', ""Embarked""] = 3"	1	1
"df[""Cabin""].fillna(""NULL"",inplace=True)"	1	1
app_train.loc[app_train['Survived']==0,['Fare']]	1	1
data.Cabin_Letter_E.astype('category')	1	1
complete_data[1].drop(['PassengerId'], axis=1)	1	1
Train.values[:,0]	1	1
"bp[""min_samples_leaf""],"	1	1
sub.to_csv('sub1.csv', index=False)	1	1
"df_train.drop(labels = [""Name""], axis = 1, inplace = True)"	1	1
"dataset.drop([""Age""], axis = 1, inplace = True)"	1	1
"df[""Fare_categories""] = pd.qcut(df[""Fare""],4,labels=label_names) # pd.qcut() function cut from the equal points. We choose 4 for that value."	1	1
"titanic_test['NameLength'] = titanic_test[""Name""].apply(lambda x: len(x))"	1	1
victims.loc['Children']= data.loc[data.Child ==1].loc[data.Survived ==0]['Survived'].count()	1	1
train_x[['Age','Pclass_1','Pclass_2','Pclass_3', 'Sex_female', 'Sex_male']]	1	1
Each_Passenger.loc[(Each_Passenger['Parch'] > 1) & (Each_Passenger['Parch'] <= 2 ) | (Each_Passenger['SibSp'] > 1) & (Each_Passenger['SibSp'] <= 2) , 'Parch'] = 2	1	1
train4.drop('Sex_female', axis=1, inplace=True)	1	1
test_df['Male'] = pd.get_dummies(test_df['Sex'], drop_first=True)	1	1
first_class.loc[first_class['Age'] < 18 ,['Survived','Sex']   ]	1	1
df.drop(['Ticket','Cabin','Name'], axis=1)	1	1
titanic_train.join(pd.get_dummies(titanic_train.Pclass,prefix='Pclass'))	1	1
in ['9', '8', '5', 'L', '6', 'F', '7', '4', 'W', 'A']:	1	1
dataset.groupby(['Pclass', variable]).size()[2].index.values	1	1
"combined[""family_has_couple""] = 0"	1	1
pd.DataFrame.from_dict(accs)	1	1
"data_train_p[""Sex""]=data_train_p[""Sex""].apply(lambda s: people.get(s))"	1	1
dataset.assign(deck_level=pd.Series([entry[:1] if not pd.isnull(entry) else 'U' for entry in dataset['Cabin']]))	1	1
titanic.loc[(titanic['Fare']>7.91)&(titanic['Fare']<=14.454),'NFare']=1	1	1
drop_elementsNMD.append('isCabinD')	1	1
PssID_df.to_csv('final_result.csv', index = False)	1	1
df['Embarked'].value_counts().plot(kind='bar')	1	1
"test_df.loc[test_df[""Title""] == ""Rev"", ""Title""] = 'Rare Title'"	1	1
dataset.loc[ (dataset['Fare'] > 7.91) & (dataset['Fare'] <=14.454), 'Fare' ] = 1	1	1
submissions.drop(['index'], axis = 1)	1	1
"total[[""CabinYN"", ""Cabin_ord""]].head(6)"	1	1
test_set.drop('Survived', axis=1)	1	1
df['Survived'].mean()	1	1
full_df.drop(['Age', 'Cabin', 'Embarked', 'Name', 'Sex', 'Ticket', 'Title'], axis=1)	1	1
test_data['Fare'] = imp.fit_transform(test_data['Fare'].values.reshape(-1,1)).reshape(-1)	1	1
"test_df.drop([""Name""], axis=1, inplace=True)"	1	1
"inDF['family_size'] = inDF['family_size'].apply(lambda x : ""Single"" if x<=1 else ""Double"" if x<=2 else ""MidF"" if x<=4 else ""LargeF"")"	1	1
train_data['Survived'].astype('int')	1	1
train_dataset.sample(3)	1	1
test_data['FamilySize'] = test_data['Parch'] + test_data['SibSp']	1	1
shuffled_Titanic_dataframe.tail(int(y))	1	1
data['Mr'] = data['Title'].map(lambda x: 1 if str(x) == 'Mr' else 0)	1	1
train_df['Embarked'].fillna('S', inplace = True)	1	1
"df_train[""title""] = df_train[""Name""].apply(lambda x: x.split("","")[1].split(""."")[0])"	1	1
X_text_submit.shape	1	1
knnsubmission.to_csv('knn.titanic.csv', index=False)	1	1
"o1.drop([""Sex"",""Name"",""Pclass"",""Embarked"",""Ticket""],axis=1,inplace=True)"	1	1
"df_train[""Fare""].plot(bw_method=1, kind='density', color='teal')"	1	1
nwdata1.info()	1	1
df_train['Fare'][df_train['Pclass']==3].median()	1	1
test.assign(Survived=prediction.astype(int))	1	1
train_new.info()	1	1
training_data[['Embarked', 'Survived']].groupby(['Embarked']).mean()	1	1
long.append((data[missing_data.index[i]]).dtype)	1	1
dc['Age']  = dc.groupby(['female','ClassUp','ClassMid','ClassLow','SibSp','Parch'])['Age'].transform(lambda x: x.fillna(x.median()))	1	1
test_set['Parch'] + test_set['SibSp']	1	1
drop_elementsNMD.append('EmbarkedS')	1	1
data['Sex'].replace({'male':1,'female':0})	1	1
"LR_result[2][""best_model""]"	1	1
"x.append(""Not Survived"")"	1	1
corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))	1	1
"train.pivot_table(index=""Parch"", values=""Survived"")"	1	1
test.iloc[:,[1,3,4,5,6,8,10]].copy()	1	1
"train.groupby(""Pclass"")"	1	1
df['Age'] = df['Age'].fillna(AgeTitle)	1	1
df_train[['PassengerId','Pclass', 'Sex', 'Age']];	1	1
train['Embarked'] = train['Embarked'].map(ports)	1	1
titanic_data.loc[titanic_data['FamilySize']>=5,'FamilySizeGroup'] = 'Big'	1	1
titanic_train.fillna((titanic_train.median()))	1	1
Survived.is_copy = False	1	1
df_test.drop(['Survived'],axis=1)	1	1
titanic_train.apply(get_family_id, axis=1)	1	1
dataset.loc[(dataset['Age'] == -1) &(dataset['Title'] == 'Rare'), 'Age'] = 45.54	1	1
"train[""Survived""][train[""Sex""]=='female'][train[""Age""]<18][train[""Pclass""]==3].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
training_set.loc[:, training_set.columns != 'Survived'].values	1	1
data.Pclass.astype(np.uint8)	1	1
df['Initial']=df.Name.str.extract('([A-Za-z]+)\.')	1	1
test_copy.loc[test_copy['SibSp'] == 3, 'SibSp_Category'] = 3	1	1
"data[""Title""] = pd.Series(dataset_title)"	1	1
test['Fare'].fillna(test['Fare'].median, inplace=True)	1	1
output_women_and_children_first.to_csv('women_and_children_first.csv', index=False) # score 0.77033 (4523/7071)	1	1
ax[0].set_title('Survival per Sex and Pclass')	1	1
df_test['Sex'].replace(['male', 'female'], [0, 1], inplace = True)	1	1
"train[""FamilySize""] = train[""SibSp""] + train[""Parch""] + 1 #sib = 형제자매, Parch = 부모자식"	1	1
ax2.hist(df.Age, bins=20, color='tomato')	1	1
ds['missing_ratio'] = ds['missing_count'] / dataset.shape[0]	1	1
tt.groupby('Title')['Age'].median()	1	1
"train_data[""Survived""][(train_data[""Pclass""] == pclass) & (train_data[""Sex""] == gender ) & (train_data[""Child""] != 1 )]"	1	1
train_data.sample(frac=0.8, replace=False, random_state=42)	1	1
"train_data[[""SibSp"", ""Survived""]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
df_clean.isnull().sum()	1	1
"cabin.Cabin.fillna(""U"", inplace=True)"	1	1
etc_rfecv.transform(etc_rfecv_train)	1	1
test_data['Embarked'] = test_data['Embarked'].map(embkarked_map)	1	1
combine.head(10)	1	1
train_data['Name']:	1	1
data.loc[(data['Age']>cat[4]) ,'Age']=5	1	1
data.head()                                      # 输出前5行数据	1	1
df_age_fare.hist();	1	1
df_rows.groupby('Pclass').mean()['Fare'].plot(kind='bar',figsize=(15,8), ax = ax)	1	1
all_data['Age'].isnull().sum()	1	1
df_train[['isLargeFamily','Survived']].groupby('isLargeFamily').mean().sort_values(by='Survived',ascending=False)	1	1
enc_embarked.transform(embarked_numerical.reshape(-1,1))	1	1
log_reg_models.cv_results_['std_test_score'][log_reg_models.best_index_],	1	1
df.groupby(['Sex','Pclass']).Age.mean()	1	1
test_csv.loc[(test_csv.Name.str.contains('Master') & test_csv.Age.isnull()), 'Age'] = Master_average_age	1	1
TitanicTrain.isnull().sum()	1	1
train_set.loc[train_set['Fare'] > 300]	1	1
test_df_X['Fare']=pd.to_numeric(test_df_X['Fare'])	1	1
test_dummy['Fare'] = fare_imputed	1	1
ax[0].hist(df_survived, bins=10)	1	1
data[['RoomBand', 'Survived']].groupby(['RoomBand']).agg(['count','mean'])	1	1
x.apply(lambda f:f.fillna(f.median()))	1	1
df['Fare_log'].skew()	1	1
data['Age_Code'] = le.fit_transform(data['Age_Bin'])	1	1
"data[""Sex_adults""][(data[""Sex""]==0)&(data[""Age""]>3)]=0"	1	1
feature_dict.pop(i)	1	1
titanic_df.join(Pclass_dummies_titanic)	1	1
df.items(): na_dict = fix_missing(df, c, n, na_dict)	1	1
titanic_test['Age'].fillna(titanic_test['Age'].median(),inplace=True)	1	1
temp_df.loc[temp_df['Cabin'].isnull()].index	1	1
model.add(layers.Dense(4, activation='relu'))	1	1
"traindf[['Age','Fare']] = traindf[['Age',""Fare""]].apply(pd.to_numeric)"	1	1
"KNN_result[1][""best_score""],"	1	1
first_class_child['Survived'].value_counts() #shows 11/12  survived	1	1
"ax[0].set_title(""Number Of Passengers By Sex"")"	1	1
train_test.loc[(train_test['Age'].isnull()), 'Age'] = lin.predict(missing_age_X_test)	1	1
df_train.corr()['Survived'].sort_values(ascending=False)	1	1
train.loc[:, ['Age*Class', 'Age', 'Pclass']].head()	1	1
train_result_all.iloc[train_data_index], train_result_all.iloc[train_result_index]	1	1
dict_K['Naive'] = get_acc(x_train,y_train,classifier)	1	1
dat['LargeF'] = dat['Fsize'].map(lambda s: 1 if s >= 5 else 0)	1	1
data.fillna({'Age': data.Age.median()})	1	1
train_label.drop(labels = ['Ticket_Cat'], axis=1, inplace=True)	1	1
train_set.Embarked.isnull().sum()	1	1
"test_df.drop([""Cabin""], axis=1)"	1	1
"sns.boxplot(x=""Survived"", y=""logFare"", data=df)"	1	1
"train_data[""Fare""] = train_data[""Fare""]/np.mean(train_data[""Fare""])"	1	1
base_predictions.head()	1	1
X.loc[X.Sex == 'female', 'Sex'] = 1	1	1
test.drop(['Sex'], axis=1, inplace=True)	1	1
pd.merge(train_df, imputed_frame[['PassengerId', 'Age']], on='PassengerId')	1	1
pd.isnull(cabin) and len(cabin)>1:	1	1
test.loc[test['FamilySize'] >0, 'IsAlone'] = 1	1	1
plt.hist([data[data['Survived']==1]['Fare'], data[data['Survived']==0]['Fare']], stacked=True, color=['g', 'r'], bins=30, label=['Survived', 'Dead'])	1	1
train['EmbarkedInt'] = embSeries	1	1
"dataset[""Fsize""] = dataset[""SibSp""] + train[""Parch""] + 1"	1	1
train_df.describe(percentiles=[0.01,.1, .2, .3, .4, .5, .6, .7, .8, .9, .99])	1	1
self.feature_levels.append(levels)	1	1
t_num.str.get(0)	1	1
XX['Title']=XX['Name'].str.split(',').map(lambda x: x[1]).str.split('.').map(lambda x: x[0])	1	1
df['Title'] = df['Title'].replace(toreplace, replacewith)	1	1
model.add(Dense(2, activation = 'sigmoid'))	1	1
"ALL_DATA[""TicketPrefix""].unique()"	1	1
"dataset.drop(""Name"", axis=1, inplace=True)"	1	1
dataset['Ticket_group'] = dataset.groupby('Ticket')['Name'].transform('count')	1	1
fare.Fare.mean()	1	1
"age[""MoreThan60""] = (age[""Age""] > 60).astype(int)"	1	1
df_train['Fare'] = df_train['Fare'].fillna(df_train['Fare'].median())	1	1
"data_test[""Fare""]  = pd.cut(data_test[""Fare""], farebins, labels=group_names)"	1	1
full_data[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean()	1	1
MLA_compare.loc[row_index, 'MLA Test Accuracy Mean']=cv_results['test_score'].mean()	1	1
"test['toddler'] = test[""Age""].apply(lambda i: 1 if i <= 6 else 0)"	1	1
train.astype(float).corr(), linewidths=0.1,vmax=1.0,	1	1
"sol.to_csv(""tree.csv"", index=False) #0.72248, 0.71291"	1	1
pd.merge(df_svc_train_gam,df_svc_test_gam,on='gamma',copy=False)	1	1
result.append(probability)	1	1
train_df.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis = 1)	1	1
"traindat[""Embarked""]"	1	1
"dataset.loc[(dataset[""Age""]>65), ""Age""]"	1	1
"df.loc[(df[""Title""]=='Mr') & (np.isnan(df[""Age""])),'Age'] = 32.9"	1	1
train_dataset.loc[ train_dataset.Parch > 0, :]	1	1
"train_ori.loc[(train_ori[""Title""] == ""Lady"") | (train_ori[""Title""] == ""Mme""),""Title""] = ""Mrs"""	1	1
train_cleaned.drop('Survived', axis=1) #Features	1	1
"ax[0].set_xlabel(""contribution $(y_{n} - t_{n}) \cdot age $"")"	1	1
test_data.drop(to_drop, inplace = True, axis = 1)	1	1
MLA_compare.loc[index,'MLA Name'] = MLA_name	1	1
XT['Sex']=label_encoder_x2.fit_transform(XT['Sex'])	1	1
TitanicTrain.select_dtypes(include=[np.number]).drop(['PassengerId','Age','Fare'], axis=1).columns.tolist()	1	1
df_temp.pivot(index='FamCat', columns='Survived', values='Count')	1	1
df_train.groupby(['Survived', 'Age'])['Survived'].count()[20:]	1	1
test['Embarked'] = test['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})	1	1
titanic_test_df.Age.loc[titanic_test_df['Title'] == 'Miss'] = titanic_test_df.Age.fillna(titanic_test_df[(titanic_test_df['Title'] == 'Miss')]['Age'].mean())	1	1
"testdat.drop(""PassengerId"",axis=1,inplace=True)"	1	1
classifier.add(Dense(1,kernel_initializer=kernel_init,activation='sigmoid'))	1	1
test.loc[test['Cabin'].str.len() == 11.0, 'CabinN2'] = test['Cabin'].astype(str).str[5:7]	1	1
train_data[['Survived', 'Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'SibSp', 'Parch']]	1	1
sns.boxplot(x='Age', data = train_data)	1	1
s.sub(s.min()).div((s.max() - s.min()))	1	1
"evaluation.to_csv(""evaluation_submission_nn.csv"",index=False)"	1	1
dataset['Embarked'] = dataset['Embarked'].map( { 'S':0, 'C':1, 'Q':2 } ).astype(int)	1	1
"axes[0].set_title(""Title vs Frequency"")"	1	1
titanic[['Age']].describe().T	1	1
test['Survived'] = vote_hard.predict(test[train_features])	1	1
data_train.drop(['Cabin'], axis=1)	1	1
df['bonus']=2000	1	1
"X.fillna({""Age"":0.0, ""Fare"":0.0, ""Embarked"":""<NAN>""})"	1	1
ax[0].set_title('Survival per Pclass')	1	1
submission.to_csv('Mode_GBM_Blend.csv',index=False)	1	1
df.drop('Ticket',axis=1)	1	1
np.where(df[variable] > top, top, df[variable])	1	1
df['IsAlone'] = (df['Family_size'] == 1) * 1	1	1
test['Name_length']=test['Name'].apply(len)	1	1
results.to_csv('SUBMISSION11.CSV', index = False)	1	1
"original['Embarked'] = original['Embarked'].replace(np.nan, ""M"", regex=True)"	1	1
traind.shape, testd.shape, combine[0].shape, combine[1].shape	1	1
dataset.loc[dataset['Age']<=16,'Age']=0	1	1
test.drop(['Name'],axis = 1, inplace=True)	1	1
plt.hist(train['Age'], 10, facecolor='blue', alpha=0.75)	1	1
train_data['LargeFamily'] = train_data['FamilySize'].map(lambda s: 1 if 5 <= s else 0)	1	1
df_class.iloc[0,1]/df_class.iloc[:, 1].sum()*100	1	1
df_train_copy['Name'] = df_train['Name'].apply(extract_name_info)	1	1
dataset.loc[ dataset['Fare'] > 31, 'FareBand'] = 3	1	1
traindf[['Child','YA','Adult','Male',  'Female',  'Class1',  'Class2',  'Class3', 'famsurrate','nofam','smlfam','bigfam']]	1	1
test.drop(['Cabin'], axis=1, inplace=True)	1	1
"train_df.pivot_table(index=""Age_categories"",values='Survived')"	1	1
submision['Survived']=y_pred	1	1
train['Deck'] = train['Deck'].fillna(value='U')	1	1
Model.append('LogisticRegression')	1	1
parch.mean()	1	1
titanic.Fare.fillna(titanic.Fare.median())	1	1
"train_df.loc[train_df[""Title""] == ""Sir"", ""Title""] = 'Rare Title'"	1	1
test['AgeGroup'] = test['AgeGroup'].astype(int)	1	1
"test_df[""Sex""].loc[test_df[""Sex""]==""female""]=0"	1	1
features.drop('Embarked',axis=1,inplace=True)	1	1
submit['Survived'] = submit['Survived'].apply(lambda x: 1 if x>0.5 else 0)	1	1
"test[""Family""].loc[test[""Family""]==0]=0      #Alone"	1	1
test_input['Embarked'] = test_input['Embarked'].map( {'S': 0, 'C': 1, 'Q':2},na_action=None )	1	1
labels.as_matrix()	1	1
train_df.sort_values(by='SibSp').describe(percentiles=[.68, .69])	1	1
df_output['Survived'] = result	1	1
ax2.boxplot(train.Fare[train.Fare<300])	1	1
trainOrg['Cabin'][trainOrg.Cabin!='0']=1	1	1
train_df.loc[train_df['Title']=='Mr']	1	1
test.loc[(test.Age.isnull())&(test.Initial=='Mrs'),'Age']=36	1	1
data.drop(['Name', 'PassengerId','Ticket'], axis =1)	1	1
col_cut_with_fare.append('_Fare_norm')	1	1
ax[1].set_title('Count of Survived VS Not Survived Passengers')	1	1
train_X['Age'].fillna(train_X['Age'].median(), inplace=True)	1	1
sns.boxplot(x = 'Survived', y = 'Age', data = titanic)	1	1
gender_data.sum()	1	1
"train[""FamilyId""] = train.apply(lambda row: set_family_id(row, family_id_mapping), axis=1)"	1	1
features.append('rounded_fare')	1	1
dev_data.info()	1	1
data_set.append(row[-1])	1	1
df_all.Age.skew()	1	1
"train[""Age""].fillna(train.groupby('Title')[""Age""].transform(""median""),inplace=True)"	1	1
train.loc[train['Embarked']==x].count()	1	1
df_test['Fare'] = df_test[['Fare', 'Pclass']].apply(test_fare_imputer, axis=1)	1	1
data_train['Cabin']	1	1
"name_tokens[1].split(""."")[0]"	1	1
df['BinnedFare'] = pd.qcut(df['Fare'], 6, labels=labels)	1	1
"test[""Title""].fillna(4,inplace=True)"	1	1
dataset.loc[ dataset['Fare'] <= 7.76, 'Fare'] = 0	1	1
"survived_correlation.drop(""Fare"")"	1	1
raw_train[['Sex', 'Pclass', 'Survived']].groupby(['Sex', 'Pclass'], as_index=True).mean()	1	1
"train.loc[train[""Family""]==0, ""Family""] = 0"	1	1
df_test[['PassengerId','Pclass', 'Sex', 'Age']];	1	1
dataset['Ageband'] = pd.cut(dataset['Age'],bins = bins,labels = labels, include_lowest=True)	1	1
train['Age_num']=label.fit_transform(train['Age_bin'])	1	1
dfamily.groupby(['Nb Tot'])['Percentage Survived'].mean()	1	1
rawdata['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)	1	1
dataset.groupby('Pclass').Fare.agg(['count', 'sum', 'mean'])	1	1
train_df['CabinInfo'] = train_df['Cabin'].apply(lambda _x: str(_x)[0:1] if type(_x) == str else 'noinfo' )	1	1
dataset.loc[dataset['Fare'] > 100] = 3'''	1	1
"data['Title'] = data['Title'].map({""Mr"": 1, ""Miss"": 2, ""Mrs"": 3, ""Master"": 4, ""Rare"": 5})"	1	1
label_encoder_embarked_tr.transform(titanic_test[:, 4])	1	1
coeff.sort_values(by = 'Importance').set_index('Feature').plot.bar(title = 'Feature Importance of Linear Model (LR)', color = 'chocolate', figsize = (18,2.5))	1	1
allset['Salutation'] = allset['Salutation'].replace('Ms', 'Miss')	1	1
categoric_data.info()	1	1
ax[1].set_title('Queenstown')	1	1
combine_df['Ticket_Lett'] = combine_df['Ticket'].apply(lambda x: str(x)[0])	1	1
cabin_value.head()	1	1
results['PassengerId'] = test_ids	1	1
Submission.to_csv('finalrandomforest01.csv',sep=',')	1	1
x_test_df1.sample(3)	1	1
train['Title']=train['Title'].replace(['Mme'],'Mr')	1	1
accuracies.append(lr_score)	1	1
"df_data[""Sex""] = df_data['Sex'].map(gender_mapping)"	1	1
train['Sector'].unique()	1	1
df_titanic_train.describe()	1	1
"df[['Pclass', 'Parch',  'Sex', 'Embarked', ""Age""]].copy()"	1	1
data.select_dtypes(include= [np.object]).columns	1	1
test.loc[test['Sex']=='male','SexCategorical'] = 0	1	1
"axes[1].set_ylabel(""Survival ratio"")"	1	1
acc.append(pd.DataFrame({'Model': 'Gaussian Naive Bayes', 'Accuracy': [accuracy_score(y_true, y_pred)]}))	1	1
"cabin_only[""Room""] = cabin_only[""Cabin""].str.slice(1,5).str.extract(""([0-9]+)"", expand=False).astype(""float"")"	1	1
df['Sex_male'] * df['Age_60-100']	1	1
test.groupby('Embarked').PassengerId.count()	1	1
Titanic_dataframe.loc[:, 'Sex'] = Titanic_dataframe.loc[:, 'Sex'].str.replace('male', '0')	1	1
dataset_blend_test_j.mean(1)	1	1
data.groupby('Pclass').mean()['Fare'].plot(kind='bar',ax=ax)	1	1
"df_train[""Cabin""].isnull().sum()"	1	1
dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+\.)',expand=False)	1	1
test.loc[(test['Fare'] > 14) & (test['Fare'] <= 31), 'Fare']   = 2	1	1
train.filter(regex=regex_train)	1	1
dataset['AgeGroup'].head(20), agebins;	1	1
"test.replace([""S"", ""C"", ""Q""], [0,1,2])"	1	1
"person_dummies_titanic_test.drop([""Male""],axis=1,inplace=True)"	1	1
df['Age'] = df['Age'].fillna(value=df.Age.median())	1	1
train_df.groupby('AgeGroup')['Survived'].mean()	1	1
data_df.drop(['Age'], 1, inplace=True)	1	1
submit_output_csv.to_csv('submit_output_1.csv', index=False)	1	1
data.loc[data['Fare']>=31,'Fare']=3	1	1
submission_test['PassengerId'],	1	1
enc_df['Sex'] = enc_df['Sex'].astype('object')	1	1
result.to_csv('result.csv',index=False)	1	1
"test.replace({""S"": 0, ""C"": 1, ""Q"": 2}, inplace=True)"	1	1
targ_val.values[i][0]:	1	1
df_test['PassengerId'].values,	1	1
"df_submission['fare_bin'] = pd.cut(df_submission[""fare""], bins=bins_fare, labels=range(5), include_lowest=True)"	1	1
df.loc[df['Cabin'].notnull(), 'HasCabin'] = 1	1	1
data['Ticket'] = data.Ticket.str.replace('/','')	1	1
np.dot(l0, syn0)	1	1
train.pivot_table(index=col, values='Survived')	1	1
df.groupby('Survived').Pclass.hist(alpha=0.4)	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col',            'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
test['Age'] = test['Age'].fillna(test['Age'].dropna().median())	1	1
train_csv['Fare'].quantile(.75),	1	1
"train_df[[""Fare"", ""Survived""]].groupby(pd.cut(train_df['Fare'], bins=15, labels=False)).mean().sort_values(by='Fare', ascending=False)"	1	1
dataset.loc[ dataset['Family_members'] == 3, 'Family_members_Band'] = 2	1	1
full['Title'],	1	1
train.loc[(train['Age'] > 24) & (train['Age'] <= 35), 'Age'] = 4, #Young Adult	1	1
test_df.dropna(subset = ['Embarked'])	1	1
"train[[""Gender_Embarked"", ""Survived""]].groupby(['Gender_Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
my_1st_submission.to_csv('Titanic_RFC_01.csv', index=False)	1	1
model_results['SVC'] = np.mean(scores)	1	1
df_train['embarked'] = df_train['embarked'].apply(cleaner_lambda)	1	1
preprocessedDataset.describe()	1	1
"data.set_value(i, 'Name', ""Dona"")"	1	1
"train_dataset.loc[ (train_dataset.Sex == ""female"") & (train_dataset.Embarked == ""S"") & (train_dataset.Pclass == 1), :]"	1	1
"dataset_train[""Name""].head(20)"	1	1
train['Embarked'][i] = 'S'	1	1
test_mod.loc[61, 'Age'] = test_mean_age	1	1
train.groupby(['family_size'])['Survived'].mean()	1	1
neural_record['Double_Out'][i]=np.mean(c2.predict(X_test)==y_test) #Out-of-sample result with double layer	1	1
df1['Fare'] = np.where(df1['Fare']>100 ,100, df1['Fare'])	1	1
train_df.drop('Survived', axis=1),	1	1
"df_surname[""SurnameId""] = pd.Categorical.from_array(df_surname.index).codes"	1	1
train['SmallFamily'] = train['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)	1	1
allfeat['CategoricalFare'] = pd.qcut(allfeat['Fare'], 4)	1	1
train[['Survived','Pclass']].groupby(['Pclass']).mean().sort_values('Survived',ascending=False)	1	1
df['Title'] = df['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
imputer_age.transform(X_test)	1	1
join['Title'] = join.Title.map(Title_Dictionary)	1	1
titanic_testxdf.drop('Name', axis=1)	1	1
finalResult.head()	1	1
combined.assign(SibSpGroup1 = combined['SibSp'] < 2)	1	1
"df_train.hist(""Survived"", by=[""SibSp""],layout=[2,4], figsize = [15,10])"	1	1
df_train['FirstName'] = name_parts[1]	1	1
dataset_train.head(10)	1	1
"processed_data.corr( method=""pearson"" )"	1	1
df_age['Survived'] = data[data.Survived == 1].Age.describe()	1	1
models_summary.sort_values(by='Accuracy', ascending=False)	1	1
test['familly_size'] = test['SibSp'] + test['Parch'] + 1	1	1
df[['Ticket', 'Fare']].groupby(['Ticket']).std() /  df[['Ticket', 'Fare']].groupby(['Ticket']).mean()	1	1
valid_y.as_matrix()	1	1
trainOrg['Embarked'] = trainOrg['Embarked'].fillna('S')	1	1
"test[""eval_tuned_forest""] = model.predict(test[features_names].values)"	1	1
self.scores_.append(scores[best])	1	1
"test_df[""Fare""][q]"	1	1
df_combined.drop('Title',axis=1)	1	1
train_df['family_size']=train_df['Parch'] + train_df['SibSp']	1	1
test['Title'] = [i.split('.')[0] for i in test.Name]	1	1
features['ID']	1	1
"data['Age'].fillna(data.groupby('Title')['Age'].transform(""mean""), inplace=True)"	1	1
dataset['Sex'] = pd.get_dummies(dataset['Sex'],drop_first=True)	1	1
df_test.drop(['Title'], axis=1)	1	1
df.loc[(df.Sex == 'female') & (df.Title == 'Dr') , 'Title'] =  'Mrs'	1	1
Xknn_test.set_value(nan_inds[i], 'Age', Xknn_test_age_imps[i])	1	1
df_train[['SibSp','Survived']].groupby('SibSp').mean().sort_values(by='Survived',ascending=False)	1	1
processed_data.at[processed_data['Fare'].isna(),'Fare'] = processed_data[processed_data['Pclass'] == 3]['Fare'].mean()	1	1
"df_male.groupby(""Embarked"").get_group(port)[""Pclass""].value_counts()"	1	1
train_data['Embarked'] = train_data['Embarked'].fillna('S'); # fillna returns value	1	1
titanic_sub['Embarked'] = titanic_sub['Embarked'].map({'S':0,'C':1,'Q':2})	1	1
dset.loc[f.index, 'FamAlive'] = len(fam_al) / len(f)	1	1
test_clean.isnull().sum()	1	1
test_dummy.drop(columns=bad_title, inplace=True)	1	1
"test_df[""family_member_no""] = test_df[""SibSp""] + test_df[""Parch""]"	1	1
raw_train['Age'].hist(bins=100, normed=True, alpha=0.5)	1	1
test_set['FareBand'] = pd.cut(test_set['Fare'], bins=[0, 8, 15, 32, 100, 600], labels=['Very Low', 'Low', 'Medium', 'High', 'Very High'])	1	1
"test.drop([""Parch"", ""SibSp""], axis=1)"	1	1
row[1]	1	1
"related_people.loc[related_people[""Ticket""]=='113760',""RGroup""]=""Carter_1"""	1	1
titanic_train_data['Survived']	1	1
le2.transform(cleanedtrain.as_matrix(columns=['Pclass']))	1	1
"corr_matrix[""Fare""]"	1	1
all_data.loc[i].at['Fare']	1	1
dataset['Title']=dataset.Name.str.extract('([A-Za-z]+)\.',expand=False)	1	1
df_full['HasCabin'] = df_full['Cabin'].notnull().astype(int)	1	1
"test.loc[test[""Sex""] == ""female"", ""Sex_encode""] = 1"	1	1
"test_df.loc[test_df[""Title""] == ""Lady"", ""Title""] = 'Rare Title'"	1	1
titanicAll['Parch'].describe()	1	1
train1.dtypes	1	1
X_test['TraveledAlone'] = (X_test['FamilySize'] == 1).astype(int)	1	1
t[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
X_test.astype(float)	1	1
titanic_test.drop(titanic_test.columns[[2,7,9]], axis=1, inplace = True)	1	1
data_train_all['Family']=data_train_all['SibSp']+data_train_all['Parch']	1	1
combined_df['age_scaled'] = combined_df.age_scaled / combined_df.Age.max()	1	1
df.drop(drops, axis=1, inplace=True)	1	1
AL.shape[1]              # number of training examples	1	1
forest.transform(X_test_orig, threshold=.05)	1	1
dataset.Cabin.isna().sum() / len(dataset.Cabin)	1	1
titanic1.info()	1	1
dataset['Title']=dataset['Title'].replace('Mlle','Miss')	1	1
train_temp_df.groupby('Ticket')	1	1
"data[""Survived""].corr(data[""Fare Per Person""]),"	1	1
"family_data['FamScore'].loc[family_data['FamScore']>0] = ""With Family"""	1	1
"train[[""Embarked"", ""Survived""]].groupby(""Embarked"", as_index=False).mean()"	1	1
train.loc[boy_or_female.index].groupby('GroupID')['Survived'].mean().to_frame()	1	1
"train_ori.loc[(train_ori[""Title""] == ""Dr"") & (train_ori[""Sex""] == ""female"") ,""Title""] = ""Mrs"""	1	1
"df_test[""norm_family_size""] = (df_test[""tot_family_size""]-0.9046015712682379)/(1.6134585413550788)"	1	1
df_full.loc[mask_train].groupby(['LastName', 'FareOrig'], as_index=False)['Survived', 'Name'].agg({'Survived': 'mean', 'Name': 'count'})	1	1
"test.drop(labels = [""Survived""],axis = 1)"	1	1
"plt.hist(df_train.loc[df_train[""Survived""]==1,""Sex""], bins = [-0.5,0.5,1.5],label = ""Survived"", alpha = 0.3)"	1	1
model_data.loc[(model_data.Pclass == 1)&(model_data.Title == 1)&model_data.Age.isnull(),('Age')] = 30	1	1
df['Survived'][df['Sex'] == 'male'][df['Pclass'] == 1].value_counts()	1	1
test['c_std_s'] = pd.Series(c_std_scaled, index=test.index)	1	1
"test_df.drop([""PassengerId"",], axis=1).copy()"	1	1
rawdata.count()	1	1
all_data.loc[all_data['FamSize']==1,'Alone'] = 1	1	1
df_test_ml_sc.head()	1	1
dataset['Fare']=dataset['Fare'].fillna(train['Fare'].median())	1	1
train.drop(['PassengerId','Embarked','Pclass','Sex','Cabin','Ticket','SibSp','Parch','Name','Title', 'Captain', 'Countess', 'Don', 'Jonkheer', 'Lady', 'Major', 'Mme', 'Mlle', 'Sir', 'Dr','Miss', 'Mr', 'Mrs', 'Ms', 'Colonel'], axis=1)	1	1
"test.loc[test.Fare != test.Fare, ""Fare""] = round(imp_fare, 2)"	1	1
raw_train['Name'].head()	1	1
train_df.drop(['Survived','Embarked'],axis = 1 )	1	1
df.assign(Title = titleS, MaleSurvived = ms, FemaleSurvived = fs, Total = tot)	1	1
"df.assign(FareCluster = clusterS, MinFare=minS, MaxFare=maxS).sort_values(by=""MinFare"")"	1	1
dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'FareBand'] = 1	1	1
test['Title']=test['Title'].replace(['Mme'],'Mr')	1	1
train_df['Cabin']=pd.Series([i[0] if pd.notnull(i) else 'X' for i in train_df['Cabin'] ])	1	1
"train_dat.at[i,""Ticket_g""] = ""PC"""	1	1
"dataset['Sex'] = dataset['Sex'].map( {""female"": 1, ""male"": 2} )"	1	1
"test[""Pclass_2""] = test[""Pclass""] == 2"	1	1
train.drop(['Survived','PassengerId'],axis=1)	1	1
in ['Ticket_Num',  'Cabin_Num']:	1	1
test.drop(columns='Age', inplace=True)	1	1
train_df['family_members'] =  train_df['Parch'] + train_df['SibSp']	1	1
pd.merge(testing_data, gender_submission_data, on='PassengerId')	1	1
trainML[['Age']].values	1	1
train_data['Title'] = train_data['Title'].replace(['Countess.','Don.','Jonkheer.','Lady.','Sir.'],'Noble.')	1	1
"age0_t_df.drop([""Name"", ""Ticket"", ""Age"", ""Sex"", ""Fare"", ""Cabin"", ""Embarked"", ""PassengerId""], axis=1)"	1	1
avg_std_age['High'] = avg_std_age['Age'] + avg_std_age['Std']	1	1
data.loc[(data.Age.isnull())&(data.Title==2)&(data.Pclass==2), 'Age']=24	1	1
train.Name.replace(['Rev','Mlle','Major','Col','Capt','Don','Dona','Jonkheer','Countess'],'Rare')	1	1
"train_data[""Age""][np.isnan(train_data[""Age""])] = np.random.randint(mean_Age - std_Age,mean_Age+ std_Age,null_count_Age_train)"	1	1
df['Title'] ; del df['Cabin'] ; del df['Pclass'] ; del df['Embarked']	1	1
df_test_ml.drop(['PassengerId','Name','Ticket', 'Cabin', 'Age_bin', 'Fare_bin'],axis=1,inplace=True)	1	1
train.corr().nlargest(11, 'Survived')['Survived']	1	1
"np.all(~np.isnan(train[""Age""]))"	1	1
data.Age.astype(int)	1	1
"combined.loc[f_member,""cp_id""] != -1:"	1	1
train_d['Title']=np.nan	1	1
"titanic_sub.to_csv(""titanic_sub.csv"", index=False)"	1	1
"submit.to_csv(""titanic.csv"",index=False)"	1	1
full.loc[full.Title == 'Mme', 'Title'] = 'Mrs'	1	1
input_df.describe()	1	1
"df.to_csv(""submission.csv"", header = True, index = False)"	1	1
test_data['Cabin'] = test_data['Cabin'].apply(lambda x: x[0])	1	1
xgb_feat_red.transform(xgb_final_test)	1	1
train['age_quantile'].isnull().sum()	1	1
"model.add(Dense(arr[-1],kernel_initializer='normal',activation=""sigmoid""))"	1	1
X_train.drop(['Sex*Parch'],axis=1)	1	1
data['Has_Cabin'] = data['Has_Cabin'].astype(int)	1	1
full_dataset.Ticket.apply(lambda x : x[0])	1	1
test[['Pclass','Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]	1	1
df.head(3)	1	1
train.pivot_table(index='Age_categories',values = 'Survived')	1	1
test['HasFamily'] = pd.Series(len(test['Parch']), index = test.index)	1	1
test_X.drop(['Sex','SibSp','Parch'], axis=1, inplace=True)	1	1
"combined[""Title""] = combined[""Title""].replace(['Mrs','Ms','Mme'], 'Mrs')"	1	1
train_ds['Sex']= train_ds['Sex'].map({'male': 0, 'female': 1}).astype(int)	1	1
train.drop(['Sex'], axis=1, inplace=True)	1	1
train_df['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)	1	1
testdf.drop(['PassengerId','Name','Ticket','Cabin','Embarked','Fare'],axis=1)	1	1
algorithm_results.loc[index, 'Parameters'] = str(alg.get_params())	1	1
"titanic_test.drop([""Parch"",""SibSp""], axis = 1)"	1	1
train['InWcg'] = dataset.iloc[:train_len, -1]	1	1
"test_data['Title'] = test_data['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
"train_df.groupby([""Sex"", ""Survived""]).size()"	1	1
full_data['Cabin'].isnull().sum()	1	1
dfTrain['Ticket_Characters']	1	1
"test[""Sex""], uniques = pd.factorize(test[""Sex""])"	1	1
new_train.head(3)	1	1
inter_val.align(inter_test, join='inner',axis=1)	1	1
testdata.ix[testdata.Age > 51, 'AgeCategory'] = 4	1	1
axes[2].axhline(y=np.mean(titanic.groupby('Cabin_group')['Survived'].mean()), linestyle='-.')	1	1
test.groupby(['Sex','Pclass', 'Title'])	1	1
dict.items(param_grid):	1	1
submission_df.to_csv('Titanic Predictions 2.csv',index=False)	1	1
df.drop(['PassengerId','Survived'],axis=1).corr(method='spearman')	1	1
data.drop('Survived', axis=1)	1	1
cabinCode.append('Missing')	1	1
all_data.set_value(290,'Deck',value=all_data.loc[741]['Deck'])	1	1
merged.loc[merged['Group'] == 'Females, large family, class 3', 'Predict'] = 0	1	1
train_X.drop('Name', axis=1, inplace=True)	1	1
train.groupby(['Survived','Pclass','Sex'])['Survived'].count()	1	1
column_copy.loc[column_copy.isnull()] = rand_values	1	1
test['Fare']=test['Fare'].fillna(med)	1	1
X_train.append(pd.DataFrame(-np.ones((20,len(cols)))/10, columns = X_train.columns), ignore_index=True)	1	1
test_df.loc[(test_df['Age'] > 37) & (test_df['Age'] <= 80), 'Age'] = 3	1	1
res_df_solver_max_iter['Train_acc_'+solver_list[i]],	1	1
"testdat.drop(""Cabin"",axis=1,inplace=True)"	1	1
"res.query(""param_criterion == 'gini'"")[""param_max_depth""]"	1	1
df.iloc[:len(train), :].copy()	1	1
datadict['NUnique']=train.nunique()	1	1
dataset.groupby(['Sex', 'Cabin']).size().unstack(0)	1	1
dataset['Sex'] = label.fit_transform(dataset['Sex'])	1	1
"titanic.loc[titanic[""Embarked""] == ""Q"", ""Embarked""] = 3"	1	1
data['Survived'][data.Pc1 ==1].count(),	1	1
"test_set[""Family""] = test_set[""SibSp""] + test_set[""Parch""] + 1"	1	1
test_df.drop(['Name','Ticket','Fare'], axis=1)	1	1
train.fillna(0, inplace=True)	1	1
test['Fare'].fillna(test['Fare'].mean(), inplace=True)	1	1
combine_df['Fare'].fillna(combine_df['Fare'].dropna().median(),inplace=True)	1	1
train.groupby(['Sex'])	1	1
not_survivors['Parch'].value_counts().sort_index()	1	1
combined_features['Age']/=scale	1	1
test_df['Title'] = test_df['Title'].replace(dict2)	1	1
"X['FamilySize']=X[""SibSp""]+X[""Parch""]+1"	1	1
train_df[['Pclass', 'Survived']].groupby(['Pclass']).agg(['count', 'mean'])	1	1
train['IsAlone'] = [x == 1 for x in train.NumFamily]	1	1
train['fare_group'] = train['calculated_fare'].map(fare_group)	1	1
test.loc[test.Age < 10,'Age'] = 1	1	1
train_raw.Age.hist()	1	1
"ship[""Fare""].median()"	1	1
X.fillna(0, inplace=True)	1	1
data.loc[data['Embarked'] == 'S','Embarked'] = 0	1	1
training_data[[ 'Survived','Sex']]	1	1
dataset['Age'] = np.where(dataset['Age'] < 1, 1, dataset['Age'])	1	1
"in [""age"", ""fare"", ""sibsp"", ""parch"" ] :"	1	1
train.drop(['Name','PassengerId'], axis=1)	1	1
test_df['Age'] = test_df['New_Age'].astype(int)	1	1
df.groupby(['key1','key2'])	1	1
dataPrepare['Embarked']=dataPrepare['Embarked'].fillna(0)	1	1
txts.append(txt)	1	1
dfTrain['Survived'].groupby(dfTrain['Sex']).mean()	1	1
train['fare'] = train['fare'].fillna(train['fare'].median())	1	1
test_X.info()	1	1
all_data.loc[all_data['Survived'].notnull(),:].drop(['Survived'],axis=1)	1	1
"testdat[""PassengerId""]"	1	1
test.loc[test['Sex']=='female','Sex'] = 2	1	1
"df_train[""FamilySize""] = df_train[""SibSp""] + df_train[""Parch""] + 1"	1	1
"train_data[[""Parch"", ""Survived""]]"	1	1
train.drop(['Survived'], axis = 1).select_dtypes(include = [np.float, np.int])	1	1
"dataset[""Cabin_known""] = dataset[""Cabin_known""].astype(""int"")"	1	1
fem_analysis[['PTitle','Pclass','Survived','Fsize']].groupby(['Pclass','PTitle','Fsize']).mean()	1	1
DataSetTest.head(10)	1	1
"ax[1].set_title(""Predicted Survival"")"	1	1
titanic.replace('male',1).replace('female',2) # Converting Sex feature to numeric data.	1	1
"input_data[""pclass_1""] = input_data[""Pclass""].apply(lambda x: int(x == 1))"	1	1
feats['feats'] = x_train.columns	1	1
ax[0][0].bar(x,survivor_genders)	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset['Title']==1), 'Age']=22	1	1
"train.loc[(train.Age.isnull())&(train.Sex=='female'),'Age'] = train[""Age""][train[""Sex""] == 'female'].mean()"	1	1
"data[""TicketClean""] = data[""Ticket""].str.extract('(\d{2,})', expand=True)"	1	1
cols_to_drop.append('Cabin')	1	1
"train_set[""Embarked""] = StandardScaler().fit_transform(train_set[""Embarked""].values.reshape(-1,1))"	1	1
df.drop('Cabin', 1)	1	1
titanic_train_data.loc[titanic_train_data.Cabin.str[0] == 'E', 'Cabin'] = 5	1	1
train_df['ID'] = train['PassengerId']	1	1
processed_data.iloc[891:,:]	1	1
df.drop(['Cabin', 'Name', 'Fare'], axis=1, inplace=True)	1	1
dataset.loc[ dataset['Fare'] > 219.167, 'FareBand'] = 5	1	1
evaluation_stats.sort_values(['test' + '_' + scoring + '_mean', 'test' + '_' + scoring + '_std'], ascending=[False, True])	1	1
df_grp.drop(ind)['Survived'].min() #扣掉自己找剩下列的最小值	1	1
importances.sort_values('importance').set_index('feature')	1	1
df_features['Name'] = df_features['Name'].apply(lambda x: dict_names[x.split(',')[1].split(' ')[1]] if x.split(',')[1].split(' ')[1] in dict_names.keys() else 0)	1	1
dataset['train_y_'] = train_y_	1	1
data_test['Family'].loc[data_test['Family'] > 0] = 1	1	1
"test_df[""CabinLetter""] = test_df[""Cabin""].astype(str).str[0]"	1	1
train_data['Cabin_D'] = Cabin_dummy['D']	1	1
axes[0].hist(features_log_transformed['Fare'], bins=30)	1	1
"titanic_train[""Age""]=titanic_train[""Age""].fillna(titanic_train[""Age""].median())"	1	1
data_train.head(3)	1	1
df['Title'] = df.Name.str.extract('([A-Za-z]+)\.', expand=False)	1	1
"submission.to_csv(""tutorial_random_forest_submission.csv"", index=False)"	1	1
X_train['Embarked'].dropna().mode()[0]	1	1
train_df['Cabin']	1	1
train['Name_len'] = train['Name'].apply(lambda x: len(x))	1	1
ship.join(embark_dummies_titanic)	1	1
"train[[""Pclass"", ""Survived""]].groupby([""Pclass""], as_index = False).mean()"	1	1
train_data.drop(['Dataset', 'PassengerId'], axis = 1)	1	1
rawdata.drop(['PassengerId', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin'], axis=1, inplace=True)	1	1
axs[2].set_title('Survival Rate vs Parch + SibSp')	1	1
test_copy['Fare_Category'] = test_copy['Fare_Category'].astype(int)	1	1
train.loc[train['Cabin'].str.len() == 15.0, 'CabinN3'] = train['Cabin'].astype(str).str[9:11]	1	1
Z.drop(['Fare'], axis=1, inplace=True)	1	1
"train[""Pclass_1""] = train[""Pclass""] == 1"	1	1
train.loc[(train['FamilySize']>2) & (train['FamilySize']<5)]	1	1
FamilySize.isnull()	1	1
"test7[""Mrs""] = test7[""Name""].apply(lambda x: x.count(""Mrs.""))"	1	1
titanic['Age'] = titanic[['Age','Title']].apply(impute_age,axis=1)	1	1
"train[""Family""] = train.Parch + train.SibSp"	1	1
all_df.iloc[:len(train)]	1	1
df.Name.replace(['Dr', 'Sir', 'Don', 'Capt', 'Major', 'Rev', 'Col', 'Jonkheer'], 'Mr', regex = True, inplace = True)	1	1
X.loc[(X['Fare Group'] > 31) & (X['Fare Group'] <= 99), 'Fare Group']   = 3	1	1
dataset['Embarked'] = dataset['Embarked']. map(embarked_mapping)	1	1
lbe.transform(train_data[i].values.reshape(-1,1))	1	1
test['fare1'] = test.apply(fare, axis=1).astype('category')	1	1
tumveri.drop('index',inplace=True,axis=1)	1	1
np.std(X_train, axis=0)	1	1
"train[""Age""] = train[""Age""].fillna(train[""Age""].dropna().median())"	1	1
test.drop(columns='Sex', inplace=True)	1	1
train_label.drop(labels = ['AgeBin', 'FamilySize', 'FareBin'], axis=1, inplace=True)	1	1
plt.hist([survived['Pclass'],titanic['Pclass']],bins=20,stacked =True,label=['Survived','total'])	1	1
dfTrain['Survived'].groupby(dfTrain['Ticket_Spaces']).mean()	1	1
"titanic_train_dataframe.loc[row_indices, ""Embarked""] = embarked_mode"	1	1
titanic_train_df.describe(include=['O'])	1	1
data_test_all['Family']=data_test_all['SibSp']+data_test_all['Parch']	1	1
train['Fare_cat'][train.Fare>50]=1	1	1
df.iloc[:, [0, 1, 2, 4, 5, 6, 7, 9, 11]]	1	1
test['Embarked_Num'] = test['Embarked'].map( { 'C': 1, 'Q': 2, 'S': 3} )	1	1
"df_test[""Age_cat""] = pd.cut(df_test.Age, interval, labels=cats)"	1	1
nn_errors.append(error)	1	1
full['_Fare'] = preprocessing.scale(full[['Fare']]) [:,0]	1	1
prep.transform(X_prediction)	1	1
i['FamilyMembers'] = i['SibSp'] + i['Parch'] + 1	1	1
"_df[""ticket_nb""]  = _df.ticket.apply(lambda i : int(i) if "" "" not in i else int(i[i.rfind("" "")+1 :]))"	1	1
train_df['Sex'] = train_df['Sex'].map({'male': 1, 'female': 2})	1	1
"data[""TicketClean""].median()-data[""TicketClean""].std()"	1	1
train[['SibSp', 'Survived']].groupby('SibSp').mean().iplot(kind='bar', colors='blue', title='Survival Rate based on Spouse or number of Siblings')	1	1
Ticket.append(i.replace('.', '').replace('', '').strip().split()[0])	1	1
comb['P1'] = comb['Pclass'] == 1	1	1
train_d['FareBands']=pd.qcut(train_d['Fare'],4)	1	1
"titanicDF[""Parch""].value_counts().plot.pie()"	1	1
training_data.loc[(training_data['Age']>=0)].loc[(training_data['Age']<=15)]	1	1
all_data.loc[all_data['LastName'] == '', 'LastName'] = 'MISC'	1	1
X_logistic.dropna(inplace=True)	1	1
data['Survived'][data['Sex'] == 'female'].value_counts().sort_index() #sort_index()--Sort object by labels	1	1
comb['P3'] = comb['Pclass'] == 3	1	1
df_train.drop(['PassengerId', 'Ticket', 'Cabin'], axis=1)	1	1
"train[""Child""][train[""Age""] < 18]=1"	1	1
df.loc[df['Age'] >= 0, 'AgeC'] = 0	1	1
test.drop(['Ticket','Cabin'],axis=1)	1	1
drop_train.loc[drop_train.Pclass == 3,'Fare'].mean()	1	1
titanic['Title'] = titanic['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	1	1
combined.loc[(combined['Pclass'])==2,'Age'] = combined.loc[(combined['Pclass'])==2,'Age'].fillna(combined.loc[(combined['Pclass'])==2,'Age'].median())	1	1
test_with_age.append(test_no_age)	1	1
predict_df['Survived'] = predicts	1	1
label.transform(model_data.Title)	1	1
combined_df['age_group'] = np.nan # create new empty column	1	1
"test_data.loc[mask,""FsizeD""] = ""small"""	1	1
dfTrain['Title']=dfTrain.Title.map(Title_Dictionary)	1	1
df.loc[~df[freqvar].isnull()]	1	1
"gender_submissionData.to_csv(""result.csv"", index=False)"	1	1
data.Survived.replace(('Died','Survived'), (0,1), inplace = True)	1	1
df.loc[((df.MisAge == 0) & (df.Cabin == 1)) , 'MA_Ca'] = 2 #Age and Cabin	1	1
df.fare.fillna(fare_C.mean())	1	1
train.replace({'male':0, 'female':1}, inplace=True)	1	1
X_test['Sex'] = X_test['Sex'].astype(int)	1	1
scaler.transform(X_test4)	1	1
"test.drop(['PassengerId', ""Ticket"", 'Cabin'], axis=1, inplace = True)"	1	1
output.to_csv('submission_knn.csv', index=False)	1	1
df.Age.loc[df.Age.isnull()] = y_pred	1	1
features.append('sibsp')	1	1
neural_record['Single_Net'][i]=c	1	1
df_train2.reset_index(drop = True)	1	1
test['Age'] = test[['Age','Pclass','Sex']].apply(impute_age_test,axis=1)	1	1
features_dataframe['mean'] = features_dataframe.mean(axis=1)	1	1
test_df.drop(['SibSp', 'Parch'], axis=1)	1	1
df['Embarked'].fillna(X_train['Embarked'].mode()[0], inplace=True)	1	1
full_dataset.loc[full_dataset['Age']<=16.336,'Age']=4	1	1
test_df['SharedCabin'].loc[ test_df['Cabin'].isnull() ] = 0	1	1
axs[1].set_title('Validation_Data',fontsize=20)	1	1
train['Cabin'].isnull().sum()	1	1
tr['Deck'] =tr['Deck'].replace('T',7)	1	1
data['Sex'].unique()	1	1
"titanic_train[""Embarked""].fillna('S',inplace=True)"	1	1
train['Greeting']=train.Name.apply(greeting_search)	1	1
data.surname_Hippach.astype('category')	1	1
test_df.loc[(test_df['Age'] > 30) & (test_df['Age'] <= 40), 'AgeGroup'] = 3	1	1
dataset.loc[(dataset['Age']>16)&(dataset['Age']<=24), 'Age'] = 2	1	1
"dataset[""Title""] = dataset[""Name""].str.extract( ' ([A-Za-z]+\.)', expand= False) #extrcting the title of the passenger"	1	1
test.drop(['Name','Ticket','Cabin'],axis = 1)	1	1
train_df.loc[train_df['Sex'] == sex, 'Age'].std()	1	1
all_data['Fare'].fillna(mode[0], inplace=True) # fill NaNs with the mode	1	1
jsim_df.loc[i, j] = jaccard_similarity_score(pred_df[i], pred_df[j])	1	1
df.isna().sum(),train.isna().sum()	1	1
os.environ['PYTHONHASHSEED'] = '0'	1	1
data_full['IsAlone'] = 0	1	1
sns.boxplot(x = 'Age', data = train_raw)	1	1
"df_train[""FareBand""] = pd.qcut(df_train['Fare'], 8, labels = [1, 2, 3, 4,5,6,7,8]).astype('int')"	1	1
acc.append(pd.DataFrame({'Model': 'K-Nearest Neighbors', 'Accuracy': [accuracy_score(y_true, y_pred)]}))	1	1
dataset['ageFill']=dataset.Age.isnull().map({False:0,True:1})	1	1
test_df['SibSp'] = test_df['SibSp'].apply(Pch_sep)	1	1
train_data.drop(['Ticket', 'Cabin'], axis=1)	1	1
df['Sex']=pd.get_dummies(df.Sex).drop('female',axis=1)	1	1
df_train.drop(to_drop, axis=1, inplace=True);            #drop columns from train dataset	1	1
titanic_df_test['Fare'] = titanic_df_test['Fare'].fillna(titanic_df_test['Fare'].mean())	1	1
dataset['Fsize'] = dataset['SibSp'] + dataset['Parch'] + 1	1	1
df.to_csv(index=False)	1	1
sub.to_csv('SurnameModel.csv', index = False)	1	1
df.Title.replace(['Dona','Lady','Jonkheer','the Countess'],'Lady',inplace=True)	1	1
tpr3.append(count_tp/79.0)	1	1
"df.loc[df[""Fare_Band""].notna(), ""Fare_Band""] = LabelEncoder().fit_transform(df.loc[df[""Fare_Band""].notna(), ""Fare_Band""].astype('category'))"	1	1
"train_data[""Age""] = train_data[""Age""]/np.mean(train_data[""Age""])"	1	1
df_train['training_set'] = True	1	1
train_df['Survived'][train_df['IsAlone']==0].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)	1	1
Data['Ticket_info'].unique()	1	1
"df_train.count()['PassengerId'] - df_train.count()['Cabin'], ""Cabin"","	1	1
df.loc[test_index, :]	1	1
combined_df['Fare'].median()	1	1
test_copy.loc[test_copy['SibSp'] == 2, 'SibSp_Category'] = 2	1	1
"test.drop([""PassengerId""],axis = 1).copy()"	1	1
train_df['Vulnerable'] = train_df[['Age', 'SibSp', 'Parch']].apply(is_vulnerable, axis=1)	1	1
combined_modified[0:891]	1	1
column['Title'] = column['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')	1	1
rows_to_predict.shape	1	1
data.groupby(['Surname'])['Survived'].sum()	1	1
dataset['test_y']	1	1
df['Age'].notnull().mean()	1	1
model.add(Dense(n_h2, activation='relu'))	1	1
titanic_data['AgeBand'] = pd.cut(titanic_data['Age'], 5)	1	1
tr.loc[(tr['Age']>40)&(tr['Age']<=48), 'Age'] = 5	1	1
ship.drop(['Embarked'], axis=1,inplace=True)	1	1
test_set.drop('Name', 1, inplace=True)	1	1
df_test.drop(['Pclass', 'Sex', 'female'], axis=1)	1	1
one_hot_encoded_training_predictors.align(one_hot_encoded_test_predictors, join='left', axis=1)	1	1
test_set_data.loc[:,i_label] = le.fit_transform(test_set_data.loc[:,i_label])	1	1
train.groupby('Embarked').size()	1	1
"data[""cv_scores""] = cv_scores"	1	1
test['CheapTickets'] = 0	1	1
test_df.loc[p, 'Age'] = rand_NMMM_test[not_m]	1	1
acc.append(accuracy_score(pred,y_test))	1	1
axes[1].axhline(y=np.mean(titanic.groupby('Group_size')['Survived'].mean()), linestyle='-.')	1	1
"traindata.groupby(""Embarked"").Survived.mean().plot(kind=""bar"",figsize=(25,25))"	1	1
"dataframe2[""Pclass""]= dataframe[""Pclass""]"	1	1
data['CatAge']=pd.qcut(data.Age,q=4,labels=False)	1	1
titanic_df.values	1	1
"val_df[""Survived""] = t_val"	1	1
"data[""TitleClean""].ix[i]"	1	1
"train[""Name""][train[""Ticket""]==largest_family_ticket].iloc[0]"	1	1
test_df.ix[(test_df.Fare < 70),'Fare2'] = 2	1	1
"passengers_df[""Survived""].sum() / passengers_df[""Survived""].count()"	1	1
test_data.drop(['Ticket'],axis = 1)	1	1
prediction.append(1)	1	1
df.drop(labels=['SibSp', 'Parch'], axis='columns', inplace=True)	1	1
"df_train.loc[df_train[""Sex""] == ""female"", ""Sex""] = 1"	1	1
train.loc[(train['Pclass'] == 1) & (train['isAlone'] == 1), 'class_alone'] = 3 #alone Pclass 1	1	1
df.drop(features_list, axis=1)	1	1
data_copy['Sex']=(data_copy['Sex']-data_copy['Sex'].mean())/data_copy['Sex'].std()	1	1
train['Fam'] #count of family	1	1
acc_svc_list.append((Y_cv_svc==Y_cv).value_counts(True)[True])	1	1
train.drop(train[train['Embarked'].isnull()].index, inplace=True)	1	1
df_train.pivot_table('Survived', index=['Sex', age_bin], columns=[fare_bin, 'Pclass'])	1	1
"train[""Fare""][train.Survived == 1]"	1	1
full_dataset['Title'] = full_dataset['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
t_df['Age'].hist(bins=70)	1	1
aveFare.at[1, 'Fare']	1	1
"train[""Embarked""].fillna(0)"	1	1
data['Embarked'] = data.Embarked.map({'S':0,'C':1,'Q':2})	1	1
"train_df['Title'] = train_df['Title'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
surname.head()	1	1
testOrg['Cabin'] = testOrg['Cabin'].fillna(0)	1	1
predictions['Survived'] = preds	1	1
"copy_test_df.apply(pd.to_numeric, errors = ""coerce"")"	1	1
X_test.loc[X_test['Embarked'] == 'C', 'Embarked'] = 1	1	1
X_test.loc[X_test['Embarked'] == 'C', 'Embarked'] = 2	1	1
halloffame.update(offspring)	1	1
"train.loc[(train[""Age""]>48) & (train[""Age""]<=64),""Age""]=3"	1	1
plt.hist(data.SibSp, label = 'before', alpha = 0.4, color = 'b')	1	1
test_df.hist()	1	1
test['Alone'] = 1;	1	1
"temp.to_csv(""submission_add_family_size_and_isalone.csv"", index = False)"	1	1
test.join(test_sex_frame)	1	1
test_file.shape	1	1
total['Age_Bin'] = pd.qcut(total['Age'], 4,labels=False)	1	1
feats.join(parents['parents'])	1	1
df_all['Cabin_info'].unique()	1	1
dataset.loc[:,['Pclass','Ticket','Cabin2']]	1	1
df_output['Survived'] = prediction2	1	1
le.transform(combined[feature])	1	1
df_test['Embarked'].fillna('Unknown', inplace=True)	1	1
Test_Master.loc[(Test_Master['Age'] > 24) & (Test_Master['Age'] <= 36), 'Age'] = 1	1	1
"traindat[""gpsz""][traindat[""gpsz""]>3]=3"	1	1
ax[2].set_title('Feature Importance in Gradient Boosting')	1	1
"train_X['Title'] = train_X['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
train_test_df['Survived']	1	1
"train[""Age""].head()"	1	1
"testd.fillna({""Embarked"": ""S""})"	1	1
"train_dat.at[i,""Fmsize_c""] = ""SmallF"""	1	1
X.iloc[:,[0,1,2,5]]	1	1
data['Sex_female'] = data.Sex_female.apply(lambda x: int(x))	1	1
"data[""BigFamily""] = 0"	1	1
plt.boxplot(fare_len, showfliers=False, showmeans=True)	1	1
df.loc[df['Title'] == 'Ms.', 'Age'] = df.loc[df['Title'] == 'Ms.', 'Age'].fillna(mean)	1	1
self.add(layers.Dense(Nh_l[2], activation='relu', name='Hidden-3'))	1	1
"df_test[""Age""][np.isnan(df_test[""Age""])] = test_random_ages"	1	1
train.loc[test_index]	1	1
"train_data[""Title""][train_data[""Title""].str.contains(""Mme"")] = ""Mrs"""	1	1
Xmat.query('Age >= 0')	1	1
test_df_clean.loc[test_df_clean['Cabin'].isnull(), 'Cabin'] = 'X000'	1	1
df['Age'] = df['Age'].fillna(np.random.randint(avg-std, avg+std))	1	1
res.drop(Y_columns, axis = 1)	1	1
data['Embarked'].replace(np.nan, 'S', inplace=True)	1	1
allset.drop(['Fare'],axis=1)	1	1
test.drop(['FamilyClass'], axis=1)	1	1
"test[""Embarked""].replace([""S"", ""Q"", ""C""], [0, 1, 2], inplace = True)"	1	1
"titanic_df.drop([""Name"",""Ticket"",""PassengerId""],axis=1, inplace=True)"	1	1
plt.hist(x=train.Age[train.Pclass==2].dropna())	1	1
titanic_df['Age'].fillna(titanic_df['Age'].median(), inplace=True)	1	1
np.round(preds).astype(int).flatten()	1	1
"titanic_test.drop(""Cabin"", axis=1, inplace = True)"	1	1
training_df_orig['Survived']	1	1
data_train.loc[data_train['Fare'].isnull(),'Fare'] = mean_fare	1	1
test_df['Title_num'].fillna(test_df['SX'].map(Freq_title_Series),inplace=True)	1	1
Xreg_test.set_value(i, 'Age', age_lm.predict(Xreg_test.loc[i, Xrcol].values.reshape(1, -1)))	1	1
raw_train_df.copy(deep=True)	1	1
training_x['Survived']	1	1
submit['Survived'] = y_t	1	1
df_family.assign(HasFamily = [1 if k else 0 for k in has_family])	1	1
"dataset_train[""Survived""].groupby(dataset_train[""SibSp""]).mean()"	1	1
df['New_Age'] > 16	1	1
df_train['Fare'].apply(fare_range)	1	1
testdf[['Child','YA','Adult','Male',  'Female',  'Class1',  'Class2',  'Class3', 'famsurrate','nofam','smlfam','bigfam']]	1	1
"dataset['Embarked']=dataset.Embarked.map({'S':0,'Q':1,""C"":2})"	1	1
plt.hist([data1[data1['Survived']==1]['Age'],data1[data1['Survived']==0]['Age']],bins=30,label=['Survived','Not_Survived'])	1	1
data['Deck'] = data.apply(getdeck, axis=1)	1	1
adults.loc[full_train_set['Sex'] == 'female']	1	1
"data[""Sex_adults""][(data[""Sex""]==1)&(data[""Age""]>16)]=1"	1	1
"dataset.loc[dataset[""FamilySize""]==1,""IsAlone""]=1"	1	1
dataset.loc[dataset['Survived'] == 0, 'FamilyCount'].value_counts()	1	1
accuracy_rfclf_kfolds.append(accuracy_rfclf_kfold)	1	1
"data[""Survived""].corr(data[""Alone""]),"	1	1
test['Embarked']  = test['Embarked'].fillna('S')	1	1
titanic['Age'][(female)&(Pclass1)&Family2] = titanic['Age'][(female)&(Pclass1)&Family2].fillna(29)	1	1
sample.append(data[random.randint(0,len(data)-1)])	1	1
ax1[0].set_title('SibSb Survived')	1	1
df_output2.to_excel(writerxls2,'Sheet1')	1	1
model.add(layers.Dense(512, activation='relu', input_shape=(12, )))	1	1
train_features.shape[0]   # number of examples in the training set	1	1
data_train_input.loc[data_train['Sex']=='male','Sex'] = 1   #male	1	1
ada2_params['learning_rate'] = 1	1	1
train.drop(['PassengerId'], axis=1, inplace = True)	1	1
train[['Title', 'Survived']].groupby('Title').mean().iplot(kind='bar', colors='blue', title='Survival based on Titles')	1	1
train_data['Gender'] = train_data['Sex'].map(sex_mapping)	1	1
merged['Group'] = merged['Sex']	1	1
train['new_Parch'] = train.new_Parch.astype(int)	1	1
train_df_concat.loc[(train_df_concat['Survived']<3)]	1	1
sortedVotes[0][0]	1	1
data.surname.apply(lambda x : x if test_surnames.issuperset(set([x])) else 'Exclude')	1	1
test['Age']=test['Age'].fillna(test['Age'].median(skipna=True))	1	1
data[['Age']].where(data.Title==titl).median()	1	1
"ax[1].set_xlabel(""contribution $(y_{n} - t_{n}) \cdot fare $"")"	1	1
csv_data['Survived']	1	1
X_train.drop('Survived',1)	1	1
train_features.shape[1] != 2:	1	1
X_test.Embarked.fillna(0)	1	1
df['NameLen_Range']=pd.qcut(df['NameLen'],12)	1	1
train.drop('Age', axis=1, inplace=True)	1	1
test['GroupID'] = test.apply(lambda row : str(row[7][:-1]) + '-' + str(row[1]) + '-' + str(row[8]) + str(row[9]), axis = 1)	1	1
data['Title']=data['Title'].str.replace('Mme.','123')	1	1
test_data['EmbarkPort'] = test_data['Embarked'].map(embarked_mapping)	1	1
"test_df[[""Pclass"", ""Sex"", ""SibSp"", ""Parch"", ""Embarked""]].copy()"	1	1
df['DisAge'] = df.apply(lambda row: discretAge(row['Age']), axis=1)	1	1
"test_kaggle[""Sex_encoded""] = sexLabelEncoder.transform(test_kaggle[""Sex""])"	1	1
all_data.at[i,'Fare'] = 4	1	1
all_data.at[i,'Fare'] = 2	1	1
all_data.at[i,'Fare'] = 3	1	1
all_data.at[i,'Fare'] = 1	1	1
test_copy['Parch_Category'] = test_copy['Parch_Category'].astype(int)	1	1
"train[""eval_tuned_xgb_tree""] = model.predict(train[features_names])"	1	1
full.iloc[759,:]	1	1
"df_train[""Embarked""] = df_train[""Embarked""].fillna(df_train[""Embarked""].value_counts().index[0])"	1	1
pd.isnull(train2['Age'][x]):	1	1
full_models['set1']['clf_forest'].predict(full_models['set1']['X_test'])	1	1
"test_data[""RelativesOnboard""] = test_data[""SibSp""] + test_data[""Parch""]"	1	1
"test_ini.append(re.findall(r""\w+\."",i))"	1	1
df_train['CategoricalAge'] = pd.cut(df_train['Age'], 8)	1	1
"submit.to_csv(""submit_minor.csv"",index=False)"	1	1
ax[4][0].hist(survivors['Parch'].dropna().tolist(), bins=nbins)	1	1
train ['Embarked'] = train['Embarked'].fillna('S')	1	1
train['standard_fare'] = train['Fare'].apply(lambda i: 1 if i <= 10.0 else 0)	1	1
result.append(result)	1	1
data['Title2'].unique()	1	1
train_df['Embarked'][train_df['Embarked'].isnull()]	1	1
data_train.append(data[i])	1	1
test_df.drop(['ElitePerson'],axis=1,inplace=True)	1	1
non_alpha['Queenstown'].sum()/non_alpha['PassengerId'].count()	1	1
"train.Title.replace(""Dr."", ""Nobility"")"	1	1
titanic_df.isnull().count()	1	1
test['embarked_T'] = raw_test['embarked_T']	1	1
df.loc[(df['Age'] > 0) & (df['Age'] <= 8), 'AgeGroup'] = 0	1	1
test_original['Survived'] = y_pre	1	1
features.loc[features.Age.isnull(), 'Age'] = features.Age.mean()	1	1
titanic.loc[titanic['Fare']<=7.91,'NFare']=0	1	1
ship.info()	1	1
df[['Age', 'Parch', 'SibSp', 'Sex']].notnull().all(axis=1)	1	1
df_test.loc[:,'PassengerId']	1	1
full_set['Age'] = full_set['Age'].astype(int)	1	1
"test_df[""Age""].fillna(test_df[""Age""].mean(), inplace=True)"	1	1
"dataset.drop([""Age""], axis=1)"	1	1
"sns.boxplot(data=jsd, ax=ax, orient=""h"", linewidth=1, saturation=5, palette=palette3)"	1	1
test_data.Embarked.replace(embarked_val)	1	1
train.join(pd.get_dummies(train.Sex))	1	1
sns.boxplot(x='Embarked',y='Fare',data=train_data,ax=ax2)	1	1
"train_df[""Ticket""].nunique()"	1	1
df_pred['PassengerId'].astype(int)	1	1
train_data['Embarked'] = StandardScaler().fit_transform(train_data['Embarked'].values.reshape(-1, 1))	1	1
"df_train.pivot_table(""Name"", ""Parch"", ""Survived"", ""count"").plot(kind=""bar"", stacked=True)"	1	1
titanic2.info()	1	1
"a.loc[(a[""Fare""] > 7.91) & (a[""Fare""] <= 14.454), ""Fare""] = 1"	1	1
datasets.append(titanic_test)	1	1
raw_train['Pclass'].unique():	1	1
df_train.sort_values(by='Fare',ascending=False)	1	1
df['Agebkt'] = pd.cut(df['Age'], [0,5,14,28,32,50,100])	1	1
titanic_df.drop(['parent_of_child'],axis=1,inplace=True)	1	1
tree.query(tmp_imp_arr.loc[nan_v].values.reshape(1,-1), k)	1	1
"total[""Cabin_tog""] = total[""Cabin""].map(mapear.set_index(""Corder"")[""index_C""])"	1	1
df3_train['Survived'].astype(int)	1	1
data_pruned['Age']=data.Age.values	1	1
test_df['Honorific'] = test_df.Honorific.map(title_map)	1	1
df_train.join(pclass_one_hot)	1	1
prefix[0]	1	1
sub_intervals.items():	1	1
"test[""Cabin_type""].head()"	1	1
"train_data[""CabinLetterD""] = 0"	1	1
data.loc[data['Sex']=='female','Survived'].value_counts().sort_index().plot(kind='bar')	1	1
"t[""Family""] = t[""Parch""] + t[""SibSp""]"	1	1
titanic_df['person']=titanic_df[['Age','Sex']].apply(male_female_child,axis=1)	1	1
df_train['Age'] = df_train['Age'].map(lambda s : s if np.isnan(s) else int(s))	1	1
test_df.drop(['Ticket', 'Cabin'], axis = 1)	1	1
df.loc[5:10,]	1	1
np.mean(S_test_temp_p1, axis = 1)	1	1
data['Embarked'] = data['Embarked'].fillna(data['Embarked'].mode()[0]) # Filling null values in Embarked as the mode.	1	1
"nn_submit_dataframe[""PassengerId""] = titanic_test_dataframe[""PassengerId""].copy()"	1	1
df_clone.loc[fold[1],'M1_xgboost'] = cls_xgboost.predict(test.loc[:, columns])	1	1
next_feat[0]	1	1
titanic.iloc[:, 2:].values, titanic.iloc[:, 1].values	1	1
"train[""Parch""].value_counts()"	1	1
train_d.isnull().sum()	1	1
titanic.drop('Cabin', axis=1, inplace=True)	1	1
data.Embarked.astype('str').replace('nan', 'S')	1	1
test_df['Age'] = test_df['Age'].apply(norm_age)	1	1
dataset['Salutation'] = dataset['Salutation'].map(Salutation_mapping)	1	1
df_raw[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']]	1	1
dataset['Cabin'] = pd.Series([x[0] if not pd.isnull(x) else 'X' for x in dataset['Cabin']])	1	1
Each_Passenger['passenger'] = Each_Passenger.Name.str.extract('([A-Za-z]+)\. ', expand = False)	1	1
dftr['PassengerId']	1	1
"train[""Title""] = pd.Series(dataset_title)"	1	1
"train_df[""Name""].head()"	1	1
"full.set_value(full[""Title""] == ""Miss"", ""Title"", 2)"	1	1
df['Fare'] = df['Fare'].fillna(df.Fare.dropna().mean())	1	1
train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False)	1	1
"df_train[""Age""].mean() + df_train[""Age""].std(),"	1	1
all_data['AgeBin'] = pd.cut(all_data['Age'].astype(int), 5)	1	1
titanic_df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'PassengerId', 'Parch', 'SibSp'], axis=1)	1	1
train['isAlone'] = np.where( (train['SibSp']+train['Parch'])==0,0,1)	1	1
age_guess['fill_up_type'] = 'guess'	1	1
data_copy.loc[:, 'Fare'] = data_copy.Fare.fillna(data_copy.Fare.median())	1	1
"axs6[1].set_title(""People who survived"", fontsize=20)"	1	1
X['Cabin'].dropna(axis=0, inplace=True)	1	1
titanic.apply(get_family_id,axis=1)	1	1
submit.to_csv('submission.csv.csv', index=False)	1	1
train4['IsAlone'].loc[train4['FamilySize'] > 1] = 0	1	1
df1.merge(df2, left_index=True, right_index=True)	1	1
df_predictions.corr()	1	1
x_train.values.shape	1	1
rf_rfecv.transform(test_X)	1	1
output.to_csv('titanic-SVC.csv', index = False)	1	1
final_test['Age1'] = final_test['Age'].apply(combine_age)	1	1
test_df['familySize']= test_df.Parch+test_df.SibSp +1	1	1
test_data['Fare']  = test_data['Fare'].astype(int)	1	1
df[['Fare', 'Survived']].groupby(['Fare'],as_index=False).mean().plot.scatter('Fare','Survived')	1	1
dataset['Cabin_T'] = dataset['Cabin'].map(lambda s: 1 if s == 8 else 0)	1	1
"titanic_df[""Embarked""].loc[titanic_df[""Embarked""]==""S""]=1"	1	1
titanic_df['embarked'] = titanic_df['Embarked'].fillna('C')	1	1
train_df['Survived'].groupby(train_df['SibSp']).mean()	1	1
"pipelines.append(( ""ScaledCART"" , Pipeline([( ""Scaler"" , StandardScaler()),( ""CART"" , DecisionTreeClassifier())])))"	1	1
"traindat[""Survived""]"	1	1
dataset['Title']=pd.Series(dataset_title)	1	1
plt.hist(df[column_name], np.arange(len(uniq_values)*2), rwidth=0.3)	1	1
"test_data.drop(""Pclass"", axis=1, inplace=True)"	1	1
output.to_csv('../working/Tucker BAX 452.csv', index = False)	1	1
"df[""Age""] = df[""Age""].where(df[""Age""] < 0, 1)"	1	1
dataset.loc[(dataset['Age'] > 60.105) & (dataset['Age'] <= 70.052), 'AgeBand'] = 6	1	1
train_dataset[['Farebin','Survived']].groupby(['Farebin'],as_index=False).mean()	1	1
raw_test['is_test'] = 1	1	1
model_data.loc[(model_data.Pclass == 1)&(model_data.Title == 3)&model_data.Age.isnull(),('Age')] = 43	1	1
data['name_len_level'] = pd.qcut( data['name_len'], 10 )	1	1
test['Sex'] = test['Sex'].astype('category').cat.codes	1	1
train_df[['FamilySize', 'Survived']].groupby('FamilySize', as_index=False).mean().sort_values(by='FamilySize', ascending=True)	1	1
train_df['Family_Size']=0	1	1
"df.drop(""Cabin"",axis=1,inplace=True)"	1	1
"df[""pclass_2""] = df[""Pclass""].apply(lambda x : 1 if x == 1 else 0)"	1	1
test_df.drop('Cabin', 1)	1	1
test.loc[test['Cabin'].str.len() == 15.0, 'CabinN2'] = test['Cabin'].astype(str).str[5:7]	1	1
"dataset.drop([""Fare""], axis = 1, inplace = True)"	1	1
df['Name'].map(lambda x: re.split('[,.]', x)[1].strip())	1	1
train.loc[train.Age < 10,'Age'] = 1	1	1
cv_results.append(cross_val_score(estimator=classifier,X=X_train,y=Y_train,cv=kfold,scoring='accuracy',n_jobs=-1))	1	1
dataset.loc[(dataset['Age']>=16)&(dataset['Age']<32),'AgeBand']=1	1	1
test_set.loc[test_set['Age'].isnull(), 'Age'] = lin_reg_age.predict(test_set.loc[test_set['Age'].isnull(), X_test_cols])	1	1
titanic_train['P_sex'] = titanic_train['Pclass']*titanic_train['Sex']	1	1
df['Embarked'].fillna('S', inplace = True)    #top value with freq 914	1	1
valid_df1.head()	1	1
"dftrain.groupby([""Sex"",""Pclass""])"	1	1
data[['Embarked']] = data[['Embarked']].fillna(value=data['Embarked'].value_counts().idxmax())	1	1
"test_set[""Age""] = StandardScaler().fit_transform(test_set[""Age""].values.reshape(-1,1))"	1	1
train.Sex.replace(['male', 'female'], [0, 1])	1	1
sns.boxplot(data = outliers)	1	1
fare_df.groupby(['Last name', 'FamilySize']).max()	1	1
train_dataset.tail()	1	1
y_sub.astype(int)	1	1
"age1_df[[""Pclass"",""Age"",""SibSp"",""Parch"",""Gender"",""EmbarkedInt""]]         #特徴量のデータ"	1	1
test.drop('Ticket',axis = 1,inplace = True)# High cordinality , remove	1	1
predictions.to_csv(csv_name, index=False)	1	1
"train_data['FareGroup'] = pd.cut(train_data[""Fare""], bins, labels=labels)"	1	1
x['FreqTicket']	1	1
df[['Age','Fare', 'Parch', 'SibSp', 'Pclass','family']]	1	1
allset.Embarked.mode()[0]	1	1
model.add(Dense(units=56, input_dim=X.shape[1], activation='selu'))	1	1
full[['Survived','Title']].groupby('Title').agg('mean')	1	1
data['TicketPrefix'] = data.Ticket.str.split().str.get(0)	1	1
titanic_data.Embarked.mode()	1	1
all_data.loc[ all_data['Fare'] <= 7.91, 'Fare'] = 0	1	1
df_result.to_csv('titanic_result.csv')	1	1
train['Deck'] = train['Deck'].fillna(0)	1	1
df['Age_categories'] = pd.cut(df['Age'],cut_points,labels = label_names)	1	1
data_test[['PassengerId', 'Survived']].to_csv('usha_titanic_submission4.csv', index=False)	1	1
"dftrain[""Survived_Model""]=clf.predict(dftrain)"	1	1
"tmp[""Embarked""] = tmp[""Embarked""].replace(""C"", 0).replace(""Q"", 1).replace(""S"", 2)"	1	1
df_train[['AgeRange', 'Survived']].groupby(['AgeRange'], as_index=False).count().sort_values(by='AgeRange', ascending=True)	1	1
data['IsAlone'].loc[data['FamilySize'] > 1] = 0	1	1
grid_stats.append(stats, ignore_index = True)	1	1
train_data['Pclass'][np.isnan(train_data['Pclass'])] = int(mean_Pclass) + 1	1	1
train_df['family_onboard'] = train_df['Parch'] + train_df['SibSp']	1	1
test.dropna(inplace = True)	1	1
"related_people.loc[related_people[""PassengerId""]==105,""RGroup""]=""Gustafsson_M"""	1	1
impute ['Fare']= full.Age.fillna(full.Age.mean())	1	1
dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31.0), 'Fare'] = 2	1	1
sub['AGEGROUP'] = sub['AGEGROUP'].astype('category')	1	1
output.iteritems():	1	1
titanic['Age'] = median_pclass_age['Age'].apply(lambda x: x.fillna(x.median()))	1	1
features.copy()	1	1
"test.loc[test[""Age""] < 15, ""Child""] = True"	1	1
lr_submission['Survived'],	1	1
testData.loc[testData.Family_Size==0,'Alone']=1#Alone	1	1
df['Title'].isnull().any() == False	1	1
class_fare.loc[2,:] = df[df['Pclass'] == 2]['Fare_per_ticket_member'].describe()	1	1
test['Cabin_known'] = test['Cabin'].isnull() == False	1	1
predictions[0:10]	1	1
params['clf_logreg'] = grid_search.best_estimator_	1	1
sns.boxplot(data=dftrain)	1	1
test.loc[test['EmbarkedModified'] == 'Q', 'EmbarkedCategorical'] = 2	1	1
df_train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
df2[['Pclass', 'Title', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Embarked']].values	1	1
results.append(benchmark(BernoulliNB(alpha=.01)))	1	1
test_mod['Embarked'] = test_mod['Embarked'].map(ports)	1	1
train_copy.loc[(train_copy['Age'] > 30) & (train_copy['Age'] <= 40), 'Age_Category'] = 3	1	1
par_count.values,	1	1
new_data.Age.fillna(new_data.Age.mean(), inplace=True)	1	1
Y_train.iloc[train_index], Y_train.iloc[test_index]	1	1
df_train['EmbarkedNum'] = df_train.Embarked.map({'S': 0, 'C': 1, 'Q': 2})	1	1
dataset.set_value(rowIndex, 'Age56to65', 1)	1	1
df.loc[(df['Age'] > 32) & (df['Age'] <= 56), 'AgeGroup'] = 2	1	1
train.drop(['Embarked_C','Embarked_Q','Embarked_S'], axis=1)	1	1
np.where((rounded_preds==1) & (rounded_preds!=Y_valid))[0]	1	1
df.drop(labels='Survived', axis=1)	1	1
"test_set[""Fare""] = StandardScaler().fit_transform(test_set[""Fare""].values.reshape(-1,1))"	1	1
combine_df['Dead_female_family'] = np.where(combine_df['Surname'].isin(dead_female_surname),0,1)	1	1
df_test2.iloc[:,-1]	1	1
ticket_numbers.append(int(splitted[len(splitted)-1]))	1	1
data.sons.loc[data.PassengerId==594] = 1 # Sun with diferente pattern (family with two tickets)	1	1
"data.loc[data[""Sex""]==""female"",""Sex2""]=0"	1	1
X_tot.loc[i,'Fare']=(X_tot.loc[i,'Fare']<0)*rnd.choice(farelist)+(X_tot.loc[i,'Fare']>0)*X_tot.loc[i,'Fare']	1	1
full.drop(['Age', 'SibSp', 'Parch', 'Deck_Missing'], axis = 1, inplace = True)	1	1
train_data['Embarked']	1	1
join_data['Title'] = join_data['Title'].map(TitleDict)	1	1
df_test['Survived'] = vote_hard.predict(df_test[data1_x_bin])	1	1
train[['Sex', 'Survived']].groupby(['Sex']).mean()	1	1
scores.append((i, accuracy_score(df['Survived'].values, cnt[:,i])  ))	1	1
X_train.shape,y_train.shape,X_test.shape	1	1
"X_train[""Fare""] = (X_train[""Fare""] - X_train[""Fare""].mean())/X_train[""Fare""].std()"	1	1
"title_list.append(6) #a ""catch-all"" for any other title"	1	1
training_set.drop('Name', 1, inplace=True)	1	1
sub['SURVIVED'] = pandas.to_numeric(sub['SURVIVED'], errors='coerce')	1	1
dataset['PassengerFare'] = dataset['Fare'] / dataset['TicketFreq']	1	1
sub_xgb['Survived'] = pred_all_xgb	1	1
score.append(acc)	1	1
score_list.append(dt.score(x_test,y_test))	1	1
df.loc[(df['Age']>11)&(df['Age']<=20),'Age_band']=1	1	1
test_df.loc[test_df['FamilySize'] > 0, 'Alone'] = 0	1	1
data.distinction_in_tikect_Low.astype(np.uint8)	1	1
test_set['Mature'] = np.where((test_set['Age'] > 40) & (test_set['Age'] <= 60), 1, 0)	1	1
data['Unknown_Fare']= data.apply(Unknown_Fare,axis=1)	1	1
allData_Scaled.iloc[nTrain:, :]	1	1
X_test['age'] = X_test.age.apply(lambda x: np.sqrt(x))	1	1
data.surname_Carter.astype(np.uint8)	1	1
score_b5.append(selector.grid_scores_[3])	1	1
titanic_train.Name.values[i].replace('.',',').split(',')	1	1
"test['Title'] = test.Name.str.extract('([A-Za-z]+)\.',expand=True)  # Extract 'Title' from 'Name"""	1	1
test_processed['Embarked'].replace({'C': 0, 'S': 1, 'Q': 2}, inplace=True)	1	1
combined_df[['Age','Title']].groupby('Title').mean()	1	1
test.Family.loc[test.Family == 0] = 0	1	1
dftrain.head(3)	1	1
titanic_df['Survived'] == 1	1	1
"Test[""PassengerId""],"	1	1
"df['Cabin'].fillna(""N"")"	1	1
plt.hist(data.Age[(np.isnan(data.Age) == False)], bins= 15, alpha = 0.4, color = 'r', label = 'Before')	1	1
dataset.loc[(dataset['Fare']>50) & (dataset['Fare']<=60), 'Fare']=5	1	1
reviews['points'].value_counts().sort_index().plot.bar()	1	1
test_data[['Pclass', 'Sex', 'Age', 'Fare', 'SibSp', 'Parch']].as_matrix()	1	1
dummies_data.append(data[non_dummy])	1	1
"train[""SibSp""] + train[""Parch""] + 1"	1	1
"test[[""Parch"", ""Sex"", ""Age"", ""SibSp"", ""Fare"", ""Embarked"",""Pclass""]].copy()"	1	1
ax3.boxplot(train.Fare)	1	1
df.drop(category_column, axis=1)	1	1
_test.copy()	1	1
dataset['Title'] = dataset['Title'].replace('Master', 'Master')	1	1
dt.loc[dt['Age']<=16,'Age']=0	1	1
train_data.Survived.as_matrix()	1	1
np.dot(X.T,y_hat-y)	1	1
test.loc[(test['Age'] > 30) & (test['Age'] <= 50), 'Age'] = 2	1	1
testData[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch']]	1	1
titanic_df.apply(female_family_pclass, axis = 1)	1	1
train_df['Title'] = train_df['Title'].apply(lambda x: 'other' if titles.loc[x] == True else x)	1	1
data['Title'] = getCleanTitles(title)	1	1
TitlesCount.iteritems():	1	1
df_train.join(deck_one_hot)	1	1
"all_data[""Age""] = all_data[""Age""].fillna(all_data['Age'].median())"	1	1
X_final_test['Name_len'] = X_final_test['Name'].apply(lambda x: x.split())	1	1
male_children['Age'].describe()	1	1
scores_knn.mean()	1	1
full['_AgeLinear'].hist();	1	1
grp_by_pclass['Survived'].mean()	1	1
df_data.drop(['Cabin','Embarked','Title','Age','Sex','Name','Ticket','Deck','Fare'], axis=1)	1	1
Train_Master.loc[ Train_Master['Fare'] > 53, 'Fare'] = 5	1	1
titanic_test_final.drop(['Survived'], axis=1)	1	1
data_test_input.loc[data_test['Embarked']=='C','Embarked'] = 2#female	1	1
"test[""Position""] = test.apply(lambda row:def_position(row[""Cabin""]), axis=1)"	1	1
"df.loc[ df['Age'] <= 16, 'Age'] 					= 0"	1	1
df_train['Age'] = df_train['Age'].fillna(-1)	1	1
dataset.loc[(dataset['Fare'] > 7.854) & (dataset['Fare'] <= 10.5), 'Fare'] = 1	1	1
cv['train_f1_score'].mean(),	1	1
"df_test[""high_prob_group""].sum()"	1	1
test.join(person_dummy_test)	1	1
train['Survived'].plot(kind='hist')	1	1
combine_df['Low_Fare'] = np.where(combine_df['Fare']<=8.662,1,0)	1	1
x.shape[:]	1	1
df[['Ticket', 'Fare']].groupby(['Ticket'], as_index=False).mean()	1	1
df['Age']=df['Age'].fillna(28)	1	1
trainData['Fare'].hist(color='green',bins=40,figsize=(8,4))	1	1
df_train.rename(columns={'Survived': 'Target'})	1	1
test['Title'] = test.Name.str.extract(', (\w{1,})\.')	1	1
"comb[[""Fare"",""Pclass"",""Embarked""]]"	1	1
"test.loc[test[""Age""].isnull(), ""Age""] = test[pd.isnull(test[""Age""])][""call""].map(call_age_dict).values"	1	1
"dataset[""Age2""] = 0"	1	1
test5['IsAlone'].loc[test5['FamilySize'] > 1] = 0	1	1
df.loc[5:10, ['Survived', 'Fare','Embarked']]	1	1
dataset['Embarked']=dataset['Embarked'].fillna(common_value)	1	1
data_train_all.drop(columns=['Name','PassengerId'],inplace=True)	1	1
predict.astype(int)	1	1
xy_train['Person'].value_counts(True)	1	1
combined['Parch']	1	1
group['Group_count'] = group.Group_code.map(dict_gcount)	1	1
sim_title.replace('Ms', 'Miss')	1	1
dataset[['PassengerId', 'Survived']]	1	1
train_processed['Sex'].replace({'male': 0, 'female': 1}, inplace=True)	1	1
test.drop(['PassengerId','Cabin','Ticket','Fare', 'Parch', 'SibSp'], axis=1)	1	1
df['Age']=y	1	1
no_age.drop('Age', axis=1)	1	1
np.dot(layer_0,syn0) + b1 # BxN X NxH ~ BxH	1	1
"pipelines.append(( ""ScaledLR"" , Pipeline([( ""Scaler"" , StandardScaler()),( ""LR"" , LogisticRegression())])))"	1	1
df['Embarked'] = df['Embarked'].fillna( df['Embarked'].value_counts().index[0]) # 用数量最多项填充	1	1
train.info(null_counts=True)	1	1
"train.assign(famSize = train[""SibSp""] + train[""Parch""])"	1	1
test['Name']=test['Name'].str.split(',',expand=True)[1].str.split('.',expand=True)[0]	1	1
categorical_columns.append('Embarked_Category')	1	1
"test['CabinN1'] = ""999"""	1	1
dataset.loc[dataset['Fare']<=7.91,'Fare'] = 0	1	1
"train_df[""Embarked""][829]"	1	1
scaled_X_train.Age.hist(bins=20)	1	1
"test_df['Family'] =  test_df[""Parch""] + test_df[""SibSp""]+1"	1	1
"train.Title.replace(""Mlle."", ""Miss."")"	1	1
train_data.describe(include=['object'])	1	1
train.loc[:, 'Survived']	1	1
"sol.to_csv(""forest.csv"", index=False) # 0.74641, 0.75598"	1	1
rcParams['font.size'] = 9	1	1
data_train.iloc[:, 1]	1	1
train_data.Family_Size.describe()	1	1
"test[""Deck""] = test[""Deck""].astype(""category"")"	1	1
test['Fare'].fillna(train['Fare'].mean(),inplace=True)	1	1
tdf.drop(col, axis=1, inplace=True)	1	1
"df[""CabinFloorScore""].loc[df['CabinFloor'] == ""G""] = 0"	1	1
np.empty((NFOLDS, ntestONS))	1	1
s.replace('.', '')	1	1
combine['Sex'] = combine['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
test_df['Fare'].median()	1	1
all_dummy_df.loc[test_df.index]	1	1
df_data.head()	1	1
validation_train.head()	1	1
data_train['Age'] = ageDF['Age']	1	1
"dftotal.loc[index,""Embarked""]"	1	1
train_df.loc[:,selCols+['Survived']]	1	1
data_to_submit.to_csv('RF_to_submit.csv', index = False)	1	1
train_test['Embarked'].describe()	1	1
"data[""TitleClean""] = data[""TitleClean""].apply(title_to_int)"	1	1
titanic_train.describe(include=['O'])	1	1
allset['LastName']=allset.Name.str.extract('([A-Za-z]+)\,', expand=False)	1	1
data_df['HasTicketString'] = data_df['TicketString'].apply(lambda x: 0 if pd.isnull(x) else 1)	1	1
full['NorAge'] = pd.Series(scaler.fit_transform(full.Age.values.reshape(-1,1)).reshape(-1), index=full.index)	1	1
Data['Title1'].unique()	1	1
np.empty([test_data_scaled.values.shape[0],len(best_classifiers)])	1	1
ID.info()	1	1
test_df['Family_Survival'] = data['Family_Survival'][891:]	1	1
accuracy_df.loc[k, 'BaseSv'] = acc	1	1
train.groupby('Survived')['Pclass'].value_counts().unstack(level=1).plot.bar(stacked=True)	1	1
dataset_df['Title'] = dataset_df['Title'].map({'Master': 0, 'Mr':1, 'Miss':2, 'Mrs':2, 'Rare':3})	1	1
plt.hist(train_df.SibSp)	1	1
titanic_df.drop(['Embarked'], axis=1, inplace=True)	1	1
df2[1043:1044]	1	1
age.loc[ (age.Age_Guess.isnull()) & (age.Sex == i) & (age.Pclass == j+1), 'Age_Guess'] = guess_ages[i,j]	1	1
"test_df.drop(labels = [""Name""], axis = 1, inplace = True)"	1	1
df_surname['SurnameGroup_include_surviving_men'] = df_surname['Surname_surviving_men'] > 0	1	1
data['Single'] = data['f_size'].map(lambda x: 1 if x == 1 else 0)	1	1
train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']].as_matrix()	1	1
df['Title'] = df['Title'].map( {'Mr': 0, 'Mrs': 1, 'Miss': 2, 'Master':3, 'Other':4} )#.astype(int)	1	1
submission.to_csv('to_submit.csv', index=False)	1	1
original_test['Fare'].replace(np.nan, fare_mean, inplace=True)	1	1
data['Agebin_Code']=label.fit_transform(data['Agebin'])	1	1
train.drop(['Sex','Age','SibSp','Parch','Fare','Embarked','family_size'],axis=1,inplace=True)	1	1
test_df['Fare']=test_df['Fare'].fillna(test_df['Fare'].mean())	1	1
df_sex.iloc[0,1]/df_sex.iloc[:, 1].sum()*100	1	1
Title.append(i)	1	1
combined_features.drop('Ticket', axis=1, inplace=True)	1	1
train_df2.drop(['Age','Fare'],axis=1,inplace=True)	1	1
titanic[['Age','Sex']].groupby('Sex').mean()	1	1
df.drop(columns=ycol), df[ycol]	1	1
test.loc[test['Age'] > 40.0, 'ageCat'] = 3	1	1
df_results['estimator'] = key	1	1
fill_age_df['Title'].replace(to_replace=['Mlle', 'Ms'], value='Miss', inplace=True)	1	1
combined_df_imputed['IsMother'] = [is_mother(row) for row in combined_df_imputed.iterrows()]	1	1
output.to_csv('Neural Network Prediction.csv', index=False)	1	1
test.apply(makePredictions2, axis = 1)	1	1
titanic_test['Age']    = titanic_test['Age'].astype(int)	1	1
df.Fare.skew()	1	1
features['importance']= clf.feature_importances_	1	1
test_test_age.dropna()	1	1
df_features.drop(['Pclass', 'Sex', 'female'], axis=1)	1	1
combined_df.copy()	1	1
temp_p.append(int(val))	1	1
dataset.iloc[0:890,1]	1	1
plt.hist(ageOfMaster)	1	1
"ticSur.rename(index=str, columns={""Sex"": ""PassengerCount"", ""Survived"": ""PassengersSurvived""},inplace=True)"	1	1
"train_data[""PassengerId""]"	1	1
dataset.loc[dataset['Fare'] > 30, 'Fare'] = 3	1	1
"X_train.set_index(""PassengerId"")"	1	1
df_test_features.replace('female',0)	1	1
df_train.loc[:,('GenderId','Sex','EmbarkedId','Embarked')].head(20)	1	1
test_df_numerical.as_matrix()	1	1
X.drop(labels=['PassengerId','Survived'],axis=1)#Dropping PassengerId as well as it is inconsequential	1	1
df_dummy.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)	1	1
FeatureDF['Title'][(FeatureDF['Sex'] == 'female') & (FeatureDF['Title'] == 'Mr')] = 'Miss'	1	1
"df_test[""Family_Size""] = df_test[""Parch""] + df_test[""SibSp""]"	1	1
"plt.rcParams[""figure.figsize""] = (1, 1)"	1	1
train['Name_Title'] = train['Name_Title'].apply(Name_Title_Code)	1	1
df[['Embarked', 'Survived']].groupby('Embarked').count().merge(df[['Embarked', 'Survived']].groupby('Embarked').mean(), right_index = True, left_index = True)	1	1
"Class_Results[""Model""],data = Class_Results,"	1	1
combine.ix[(combine.Pclass==1)&(combine.Cabin.isnull()),'Cabin'] = np.random.choice(['A','B','C','D'])	1	1
"data.at[passenger, ""Sex""] == ""female"" and data.at[passenger, ""Pclass""] == 1:"	1	1
"dftest[""TicketButLast""].value_counts()"	1	1
row['fare']	1	1
data['ses']=data.Pclass.apply(lambda x: getSes(x))	1	1
allset['AgeBand']=''	1	1
"dftest[""Age""] = age_slice"	1	1
data_train['Embarked'].head()	1	1
dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 50), 'Age'] = 4	1	1
full_df[ 'Title' ] = full_df[ 'Name' ].map( lambda name: name.split( ',' )[1].split( '.' )[0].strip() )	1	1
train['Embarked'] = train['Embarked'].map(lambda x : 1 if x=='S' else 2 if x=='C' else 3)	1	1
np.mean(female_sample)	1	1
test.loc[(test['Age'] > 15) & (test['Age'] <= 30), 'Age'] = 1	1	1
df.append(row)	1	1
data_test_dummy2['Fare'].values.reshape(-1, 1)	1	1
df_test['Fare']=96.075485	1	1
train['training_set'] = True	1	1
df['name_category'] = df['name_category'].astype('category')	1	1
data['Cabin'] = data['Cabin'].astype('category').cat.codes	1	1
df[['Title', 'Age']].groupby(['Title']).mean()	1	1
"train_drop[""Survived""]"	1	1
df_train['Title']=df_train.Name.str.extract('([A-Za-z]+)\.')	1	1
"test_mod.groupby([""Pclass"",""Sex""]).Age.median()"	1	1
family[ 'FamilySize' ] = All[ 'Parch' ] + All[ 'SibSp' ] + 1	1	1
"data_combined[""Embarked""] = data_combined[""Embarked""].fillna(""S"")"	1	1
X_train.columns.values[FeatSel_XGB.get_support()]	1	1
combine['Fare'].fillna(combine['Fare'].dropna().median(), inplace=True)	1	1
"train_data_train[""Survived""]"	1	1
test_df['Fam_Size']	1	1
cols['Age']	1	1
train['new_SibSp'] = train.SibSp.astype(int)	1	1
train['Young'] = (train['Age']>=18) & (train['Age']<=40)	1	1
salutationDF.append(re.search(r',\s\w+',sal).group().lstrip(', '))	1	1
all_data.iloc[:, 2] = all_data.iloc[:, 2].fillna(all_data.mode(0)['Embarked'][0])	1	1
stacked_models_df['svm'] = clf.predict(x_train)	1	1
train_df.Age.median(axis=0)	1	1
toolbox.select(pop, len(pop))	1	1
data.rename(columns={'S':'SE','C':'CE','Q':'QE'})	1	1
dataset.loc[ (dataset['Fare'] > 31), 'Fare' ] = 3	1	1
df.loc[df.Survived.notnull()].reset_index(drop=True)	1	1
train_data.drop(['Sex', 'SibSp', 'Parch', 'Embarked'], axis=1, inplace=True)	1	1
"axes[1].set_title(""Survival Rate Based \n on Parents/Children aboard"")"	1	1
dataset.loc[(dataset['Age']>16)&(dataset['Age']<=32),'Age_band']=1	1	1
test.loc[i, 'AgeModified'] = rand.uniform(test.Age.mean()-test.Age.std(), test.Age.mean()+test.Age.std())	1	1
"titanic_train[""Survived""].value_counts(sort=False)"	1	1
train5.drop('Survived', axis=1)	1	1
"dftrain[""Survived""]"	1	1
df_train['Sex'] = pd.get_dummies(df_train['Sex'], drop_first=True)	1	1
dfamily.append(pd.DataFrame(listi, columns=dfamily.columns),ignore_index=True)	1	1
train.loc[train['Embarked']=='S','Embarked'] = 1	1	1
imputed['Fare'] = full[['Pclass','Fare']].apply(fill_fare, axis=1)	1	1
x_train.drop(['Pclass','Sex','Age_categories', 'Age', 'SibSp', 'Parch', 'Embarked'], axis=1)	1	1
all.drop(rest,inplace=True,axis=1)	1	1
dataset['Title'] = dataset['Title'].replace('Random', 5)	1	1
pred.astype(int)	1	1
df[['Ticket','Cabin','Name']].groupby('Ticket').count()	1	1
titanic_test.loc[titanic_test['Embarked']=='C', 'Embarked']=1	1	1
train.drop(['Name', 'Ticket', 'PassengerId', 'Cabin'], axis=1) #cabin may be worth revisiting later	1	1
x_test['Cabin_num'] = x_test['Cabin'].map(lambda x: 0 if pd.isnull(x) else len(x.split()))	1	1
test3_df.values # test set	1	1
"train[""Parch_scaled""] = minmax_scale(train[[""Parch""]])"	1	1
data.Fare.describe()	1	1
TitanicTrain['Type'] = 'Train'	1	1
"dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 93),""Fare""] = 2"	1	1
"axes[0].set_ylabel(""No of records"")"	1	1
titanic_train.groupby(['Sex', 'Pclass'])['Survived'].mean()	1	1
train.drop(numerical_columns, axis=1).describe()	1	1
df_full['Embarked'].fillna(df_full['Embarked'].mode()[0], inplace=True)	1	1
train_data['Cabin_E'] = Cabin_dummy['E']	1	1
"X_train_2[""Age""] = imp.transform(X_train_2[""Age""].reshape(-1, 1))"	1	1
dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 35), 'Age'] = 4	1	1
"data[[""Survived""]].groupby([data[""Name""], data[""Pclass""], data[""Sex""], data[""Survived""]]).count()"	1	1
axes[1].bar(ind, alive_m, width, bottom=dead_m)	1	1
dataset_df['NewAge'] = dataset_df['Age'].copy()	1	1
"df[""Cabin_letter""] = df[""Cabin""].str[0]"	1	1
pre_features2['Age'] = pre_features2['Age'].fillna(age_mean)	1	1
train_df['Pclass'] = train_df['Pclass'].astype('object')	1	1
data.loc[(data.passenger_fare>41) & (data.passenger_fare<=41.2) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>41) & (data.passenger_fare<=41.2) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
pf.loc[pf.Pclass==3, 'Fare']	1	1
"feat_imp.sort_values(by=[""score""],inplace=True)"	1	1
df_pred_use_X['Age']=df_pred_use_X.apply(lambda x: svr.predict(x[1:].reshape(1, -1)) if pd.isnull(x['Age']) else x['Age'], axis=1)	1	1
axes[18].cla()	1	1
test_data['SibSp'][np.isnan(test_data['SibSp'])] = int(mean_SibSp) + 1	1	1
train_df[['PassengerId','Survived','Pclass','FareGroup','AgeGroup','SibSpBool','ParchBool','Sex','CabinBool']].corr()	1	1
df_clean.loc[df['Age'].isnull(), 'Age'] = age_mean	1	1
"full.set_value(full[""Sex""] == ""male"", ""Sex"", 0)"	1	1
test_df['family_onboard'] = test_df['family_onboard'].astype('object')	1	1
models_score.loc[classifier] = [classifier, acc]	1	1
test.at[i, 'Sex'] = 0	1	1
full_data.reset_index(inplace=True)	1	1
Priority .sort_values('Importance',ascending = False).set_index('Feature')	1	1
"train_df[""Age""].fillna(age_median, inplace=True)"	1	1
train_d.drop(['Survived','Pclass','PassengerId'],axis=1)	1	1
data_2.head()	1	1
df_train.drop(['FamilySize','SibSp','Parch'], axis=1)	1	1
df['SibSp'] = df['SibSp'].apply(lambda e: 2 if e>2 else e)	1	1
"df[""Age_Band""] = df[""Age_Band""].astype('category')"	1	1
data_test.head(3)	1	1
dataset.loc[(dataset['Fare'] > 7.91)&(dataset['Fare'] <= 14.454), 'Fare'] = 1	1	1
"related_people.loc[related_people[""PassengerId""]==137,""RGroup""]=""Beckwith_M"""	1	1
"test.drop([""Embarked"",""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare""], axis = 1)"	1	1
"train.drop(labels=[""PassengerId"", ""Survived""], axis=1).values"	1	1
allset.drop(['FamilyBucket'],axis=1)	1	1
frame.loc[(frame.Fare > 14.454) & (frame.Fare <= 31) , 'Fare'] = 2	1	1
cv_res['CrossValMeans']	1	1
test_df.join(dummy['Female'])	1	1
df['Sex']=df['Sex'].astype('category')	1	1
Corr.loc[var[1],'Cramer V'] = Cramer_Chi2(confusion_mat)[0]	1	1
df_data['P_Ti_AgeBin'] = pd.qcut(df_data['P_Ti_Age'], 4)	1	1
train['isSenior'] = train.Age > 60	1	1
data['Embark_Q'] = data['Embarked'].map(lambda x: 1 if str(x) == 'Q' else 0)	1	1
dataframe.drop(columns=[column_name, 'Pclass_2'])	1	1
df_features.fillna(fillval)	1	1
titanic_df.head(50)	1	1
train_df.Name.size	1	1
"traindata.groupby(""Parch"").Survived.mean().plot(kind=""bar"",figsize=(25,25))"	1	1
train_df['Sex'] = train_df['Sex'].map( {'male': 0, 'female': 1} )	1	1
pdf['IsChild'] = ((pdf['Age'] < 18) & (pdf['Title'].isin(['master', 'miss']))).astype(int)	1	1
ticket_classes.items():	1	1
"dataset.loc[(dataset[""Age""]>18) & (dataset[""Age""]<=30),""Age""] = 1"	1	1
dataset.set_index('PassengerId', inplace=True)	1	1
"df[""Fare""] = pandas.cut(df[""Fare""], bins=[0,10,50,100,600]).factorize()[0]"	1	1
m.where(m.join(c).FamilyMemberCount > 1, other=-1, axis=1).fillna(-1).join(c)	1	1
"_df.loc[  594,""group_id""] = 214.0"	1	1
"test[""eval_xgb_tree""] = model.predict(test[features_names])"	1	1
accuracy['majority_voting_all_models'] = sum([1 if train_predictions['majority_voting_all_models'].loc[i] == survived.loc[i] else 0 for i in survived.index])/791	1	1
data_test1.as_matrix(columns = features)	1	1
"svc_solution.to_csv(""predict_support_vector_machine.csv"", index_label = [""PassengerId""])"	1	1
x_test[['Embarked']] =  imr.fit_transform(x_test[['Embarked']])	1	1
df['Survived'].groupby(df['Family Size']).value_counts().unstack()	1	1
missing_age.drop(['Age', 'PassengerId'], axis=1)	1	1
"train[[""Person"", ""Survived""]].groupby(['Person'], as_index = False).mean()"	1	1
submission_X_transformed.keys()	1	1
pclass[3]	1	1
inputds2.drop('Sex',axis=1).drop('Age',axis=1).drop('SibSp',axis=1).drop('Parch',axis=1).drop('Embarked',axis=1).values	1	1
dataPrepare['Title']=dataPrepare['Title'].astype('int8')	1	1
df.loc[df['Title'] == 'Master.', 'Age'] = df.loc[df['Title'] == 'Master.', 'Age'].fillna(mean)	1	1
pipeline.append(('classify', clone(base_model)))	1	1
data['parent_alone'] = data.apply(lambda x: 1 if ((x.Parch>0) & (x.SibSp==0) & (x.Age>19) & (x.Age<=45) ) else 0, axis=1)	1	1
train.ix[:, train.columns != column].values	1	1
"train_df.loc[train_df[""Title""] == ""Dona"", ""Title""] = 'Rare Title'"	1	1
arr['F'].append(row)	1	1
test['Sex'] = test['Sex'].map({'male':0, 'female':1})	1	1
train_df['Fare'].unique()	1	1
family_size.var()	1	1
test['IsAlone'] = np.where(test.FamilySize >1, 0, 1)	1	1
train['Embarked'].replace(np.nan,'S',inplace= True)	1	1
pd.pivot_table(data, values=[predict], index=[continous, discret], aggfunc=np.mean)	1	1
sns.boxplot(x='Pclass', y='Age', data=new_train)	1	1
"factors[""t_nShare""]=1"	1	1
"train[[""Sex"", ""Survived""]].groupby([""Sex""], as_index = False).mean()"	1	1
"test.loc[ind,""Title""] = ""rare"""	1	1
data_full.loc[data_full['Ticket']=='3701']	1	1
df.groupby(['Pclass','Sex']).mean()	1	1
std_scaler.transform(X_train)	1	1
test_ToPred['Cabin'].replace(['Z','A', 'B', 'C', 'D', 'E', 'F', 'G', 'T'], [0,1,2,3,4,5,6,7,8],inplace=True)	1	1
AverageFamiliesWithoutDad.Survived.mean() #77.4% Survival rate vs. 61% Survival with older males	1	1
df.groupby(['Pclass']).Age.median()	1	1
data.surname_Doling.astype('category')	1	1
dataset_df['NewAge'] = dataset_df['NewAge'].astype('int')	1	1
"test[""Sex""] = test[""Sex""].map(sex_flag)"	1	1
df01['Sex'].value_counts().index #list all names of app	1	1
train_df.groupby([pd.cut(train_df.Age, bins),'Survived'])['Survived'].count()	1	1
train_csv['FamilyCount'] = train_csv['SibSp'] + train_csv['Parch'] + 1	1	1
Data_train['CategoricalFare'] = pd.qcut(Data_test['Fare'], 4)	1	1
train.drop(['Survived', 'Name', 'PassengerId', 'Ticket', 'Cabin', 'Embarked'], axis=1)	1	1
data.loc[(data.passenger_fare>=12.5) & (data.passenger_fare<13.) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>=12.5) & (data.passenger_fare<13.) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
test_df.Fare.mean()	1	1
X_train.shape  # (n_x: input size, m : number of examples in the train set)	1	1
train.loc[(train.Age.isnull())&(train.Salutations=='Mr'),'Age'] = 32	1	1
dataset.corr() # calculating correlation matrix	1	1
training_set.loc[training_set['Survived'] == 1, 'Age'].dropna(),	1	1
df_data['FamilyLarge'] = (df_data['Family'] >= 5).astype(int)	1	1
"dataset[""Title""].unique()"	1	1
re.sub(r'\W+', '', raw)	1	1
"train_data[""TitleSir""] = 0"	1	1
df['famtestdatcnt'] = df.groupby(['lastname','famsize'])['famtestdat'].transform('sum')	1	1
train.drop(columns=['Name','PassengerId','SibSp','Parch','Age','Fare','Cabin', 'Ticket', 'Survived'], axis=1)	1	1
df_Survived['Fare'].value_counts().plot.box(ax=axes[0], sharey=True);	1	1
train_clean.fillna(train_clean.mean())	1	1
titanic.loc[titanic['Embarked']=='S', 'Embarked'] = 0	1	1
"df['Cabin_numeric_range'] = df['Cabin_number'].apply(lambda x: str(int(x/10)) + ""0 to "" + str(int(x/10 + 1)) + ""0"" if x != 0 else ""No Cabin"")"	1	1
trainingset.drop(['Name'],axis=1)	1	1
titanic_df['ticket_number'].head(10)	1	1
"np.mean(cross_val_score(model,x_train,y_train,cv=k_fold,scoring=""accuracy""))"	1	1
trained_classifiers['QDA']	1	1
df.drop(['SibSp','Parch'], axis=1, inplace=True)	1	1
df['Survived'].groupby(df['Title']).value_counts().unstack()	1	1
test_dataset.loc[test_dataset['Age']<= 16,'Age']=0	1	1
test_dat.as_matrix(columns=('Male', 'train_Age_rep_scale', 'SibSp', 'Parch', 'fare_scale', 'Emb_nr'))	1	1
iset['Ticket_Len'] = iset['Ticket'].apply(lambda x: len(x))	1	1
train['Survived'], test_size=0.20,	1	1
"passengerId.to_csv(""passengerId.csv"",index=False,header=False)"	1	1
"testdataframe2[""Fare""]= testdataframe[""Fare""] /10"	1	1
df_train.dropna(how='any',axis=1,subset=df_train['Survived'])	1	1
Each_Passenger.loc[(Each_Passenger['Parch'] <= 0) | (Each_Passenger['Parch'] <= 0) , 'Parch']  =  0	1	1
raw_train['Age'].isnull().sum()	1	1
"train_df[""Survived""] # Y = outputs"	1	1
train.loc[(train['Pclass'] == pclass) & (train['Deck'].isna()), 'Deck'] = deckmeans[pclass]	1	1
"test_data_1[""Mother_col""] = ""Not Mother"""	1	1
second_class['Survived'].value_counts()# 87/184 survived	1	1
X_test_df['Embarked'] = X_test_df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
data_train.loc[data_train['Survived']==0,'Parch'].value_counts()	1	1
train['Title']=train['Title'].replace('Mlle','Miss',regex=True)	1	1
"test2.to_csv(""Predictions_scale1.csv"", index=False)"	1	1
train.drop(['Age'], 1, inplace=True)	1	1
le.transform(train[column])	1	1
"submission.to_csv(""titanic_survival_prediction.csv"", index=False)"	1	1
test_df.drop(['Name', 'Ticket', 'Cabin'], axis = 1)	1	1
train['Parch'] = pd.DataFrame(parch_scaled)	1	1
test['NFare'] = 0  # Creates a feature 'NFare' and assign an initial value '0'	1	1
"train_df.loc[train_df[""Title""] == ""Mlle"", ""Title""] = 'Miss'"	1	1
feature_dataframe.sample(10)	1	1
trainData.head(5)	1	1
titanic.combine_first(family)	1	1
input_arr['SibSp']	1	1
plt.boxplot(fare, labels =['Dead', 'Survived'])	1	1
combine.Embarked.fillna(combine.Embarked.value_counts().index[0])	1	1
tempdf['avg'] = np.mean(np.array([tempdf[col] for col in pred_cols]),axis=0)	1	1
j.Fare.fillna(j.Fare.mean())	1	1
train_set.iloc[:, 6].values	1	1
dataset.loc[(dataset['Age']>40)&(dataset['Age']<=48), 'Age'] = 5	1	1
feature_count_df.mean(axis=1),	1	1
dataset_t.info()	1	1
k['test'] = test.isnull().sum()	1	1
df.loc[idx_ok, ['Age', 'Parch', 'SibSp']].values	1	1
data_pruned.groupby('Survived').hasCabin.value_counts()	1	1
"titanic_df[""Embarked""] = le.transform(titanic_df.Embarked.values)"	1	1
"train['Cabin_Lett']=train['Cabin_Lett'].replace(""A"",1).replace(""B"",2).replace(""C"",1).replace(""0"",0).replace(""D"",2).replace(""E"",2).replace(""F"",1)"	1	1
df['Embarked'].fillna(0, inplace=True) # because there is approximately 80% of 0 in embarked column	1	1
dataset['Embarked'] = dataset['Embarked'].map({'S':1, 'C':2, 'Q':3})	1	1
train_df.drop(['Name', 'Ticket', 'Cabin','PassengerId', 'Age', 'Pclass'],axis=1)	1	1
"df_test[""Alone""] = np.where(df_test['SibSp'] + df_test['Parch'] + 1 == 1, 1,0) # People travelling alone"	1	1
train_data.Age.fillna(value=train_data.Age.mode()[0],inplace=True)	1	1
names.loc[(names['col'])==1,'mr'] = 1	1	1
"related_people.loc[related_people[""PassengerId""]==218,""RGroup""]=""Jacobsohn_M"""	1	1
full['Deck'] = full['Cabin'].apply(lambda x: cat_deck(x))	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Mlle', 'Miss')	1	1
"test.loc[test[""FamilySize""] == 1, ""Alone""] = 1"	1	1
accuracies_lr.std()	1	1
"test.loc[test[""Age""].isnull() & test[""Fare""].isnull(), ""Age""] = test[""Age""].value_counts().idxmax()"	1	1
df_train.append(df_test,sort=False)	1	1
featureRanks.sort_values(by='importance', inplace=True)	1	1
footballers.head()	1	1
Submission.to_csv(filename,index=False)	1	1
train.loc[ (test.Age.isnull()), 'Age'] = median_age_2	1	1
df_results['val_Precis'] = precission	1	1
trainOrg['Cabin'] = trainOrg['Cabin'].fillna(0)	1	1
"models.append((""GradientBoosting"",GradientBoostingClassifier()))"	1	1
enc['ohe_enc']	1	1
dataset.loc[(dataset.Age.isnull())&(dataset.Initial=='Mr'),'Age']=33	1	1
df['New_Age'].isnull().sum()  # number of null age values	1	1
"train4[""Survived""]"	1	1
train_df.groupby(by=['Sex_female']).Survived.sum()/train_df.groupby(by=['Sex_female']).Survived.count()	1	1
df_titanic['Age'] = (df_titanic['Age'] - df_titanic['Age'].mean()) / df_titanic['Age'].std()	1	1
data.loc[(data['Age'].isnull()) & (data['Initials']=='Mrs'),'Age']=36	1	1
"test_df[""Fare""]=test_df[""Fare""].fillna(test_df[""Fare""].median())"	1	1
train.Embarked.fillna(1,inplace=True)	1	1
test_data['Fare'].fillna(value = np.mean(test_data['Fare']), inplace = True)	1	1
df_train[['Survived', 'Sex']].groupby(['Sex']).mean()	1	1
dataset['FamilySize']  = dataset['SibSp'] + dataset['Parch'] + 1	1	1
"train_dat.at[i,""Ticket_g""] = ""STON"""	1	1
combined_data.drop(['Pclass', 'Title', 'Cabin', 'Deck', 'Name', 'Ticket', 'Parch', 'SibSp', 'Embarked', 'Age_Cat'], axis=1, inplace=True)	1	1
dataset.loc[(dataset['Age']>32)&(dataset['Age']<=48),'Age']=2	1	1
train[640:645]	1	1
df_test_final['Survived'] = predicted	1	1
df_full.groupby('Pclass').mean()['Fare']	1	1
"training.loc[training[""Title""] == ""Dr"", ""Title""] = 4"	1	1
df_pred['FamilyLarge'] = (df_pred['Family'] >= 5).astype(int)	1	1
plt.hist(x=[data1[data1['Survived'] == 1]['FamilySize'], data1[data1['Survived'] == 0]['FamilySize']], stacked=True, color=['g', 'r'], label=['Survived', 'Dead'])	1	1
s.append(1)	1	1
scores.append(model.fit(X_train, y[train]).score(X_test, y[test]))	1	1
join_data.pivot_table(values='Survived',index='Deck',columns='Pclass',margins=True)	1	1
Xy_train_df.loc[Xy_train_df['Pclass']==1],var ='LogFare',	1	1
pdModelos.loc[row,'modelo NAME']= m.__class__.__name__	1	1
valid_X['Embarked'].fillna(valid_X['Embarked'].mode()[0], inplace = True)	1	1
train['AgeBin_Code'] = data['AgeBin_Code'][:891]	1	1
train['Title'] = train['Name'].apply(extract_title)	1	1
AverageFamiliesWithoutDad.groupby('Pclass').Survived.mean() #1st and 2nd Class sported >90% Survival Rates	1	1
X_test.drop(['PassengerId'],axis=1)	1	1
full_dataset.describe()	1	1
df['siblings_3'] = (df.sib_sp == 3).apply(int)	1	1
survived_embarked.sort_values(by='Rate', ascending=False, inplace=True)	1	1
"train_df[""Age""].hist(bins = 70, ax = axis2)"	1	1
data.drop(['Ticket','Cabin'], axis = 1)	1	1
sns.boxplot(train_raw.Age)	1	1
"age.drop(""Age"", axis=1)"	1	1
final_submission['Survived'] = np.array(final_prediction,dtype=int)	1	1
test_df.drop(['PassengerId', 'Ticket', 'Cabin'], 1, inplace=True)	1	1
all_data.groupby(['Pclass'], as_index=False)['Age'].mean()	1	1
df_train['sin_age'] = df_train['age'].map(np.sin)	1	1
train['HaveFamily'] = 0	1	1
titanic_train_data.Cabin.astype('int32')	1	1
dataset['Title'] = dataset['Name'].apply(title_parser)	1	1
data['Male'] = ((data['Sex'] == 'male') + 0)	1	1
"test.drop([""Title"", ""Name""], axis = 1)"	1	1
df['Title'] = df['Title'].replace(df['Title'].unique(), range(8))	1	1
train_df['Title'] = train_df['Title'].replace('Mlle.','Mrs.')	1	1
df.loc[ (age_df.Age.isnull()), 'Age' ] = predictedAges	1	1
titanic_train_data.head(50)	1	1
"sns.boxplot(y = ""Age"", x = ""Sex"", hue = ""Pclass"", data = X_train, palette = ""muted"")"	1	1
dataset['Title'] = dataset['Title'].replace(['Capt', 'Col', 'Don', 'Dr', 'Jonkheer', 'Sir', 'Major', 'Rev'], 'Otherm')	1	1
df['gender']=df['Sex'].map({'male':1,'female':0}).astype(int)	1	1
os.path.join(raw_data_path, 'train.csv')	1	1
"data[[""Pclass"", ""Mr"", ""Mrs"", ""Miss"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare""]]"	1	1
d['Age'] = out	1	1
data.select_dtypes(['category']).columns	1	1
df.loc[df.Embarked.isnull(), 'Embarked'] = df['Embarked'].mode()[0]	1	1
test_df.iloc[:, :].values	1	1
cv.tail(1)	1	1
estimators.append(('GBC', model4))	1	1
survived['Survived'] = result	1	1
trainSample['Died']=1-trainSample['Survived']	1	1
k_f1_scores.append(f1Score)	1	1
Y.drop(drop_columns, axis = 1)	1	1
train.isnull().sum()[train.isnull().sum()>0]	1	1
"train_df[""Pclass""]=train_df[""Pclass""].astype(""category"")"	1	1
"_df.loc[  530, ""group_id""] = 92.0"	1	1
train['LastName'] = train['Name'].apply(lambda x: x.split(',')[0])	1	1
x_train.head(100)	1	1
test['PassengerId'].isnull().sum()	1	1
train[['Pclass','Survived']].groupby(['Pclass'], as_index=False)['Survived'].agg(['mean','count'])	1	1
dfnum['Age'] = df['Age']	1	1
"dataset_med.loc[1,2][""Age""]"	1	1
"data[""Fam_group""] = ""NaN"""	1	1
train_df.head(5) #show title numbers.|	1	1
"_df[""name_last""]     = _df[""_name""].apply(lambda i : i[0])"	1	1
model_data.loc[(model_data.Pclass == 1)&(model_data.Title == 2)&model_data.Age.isnull(),('Age')] = 41	1	1
df_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')	1	1
res_df_solver_max_iter['Sl'] = res_df_solver_max_iter['Sl'].astype(np.uint16)	1	1
train6['FamilySize'] = train6['SibSp'] + train6['Parch'] + 1	1	1
dataset.loc[:,'Survived'] #label - classification problem	1	1
ship['Title_Code'].loc[(ship['Title_Code'] == 0) & (ship['Survived'] == 1)].count()	1	1
data_combined['Fare'].plot(kind='hist', figsize=(15,3),bins=100, xlim=(0,50))	1	1
"df[""Sex""].value_counts().plot(kind=""bar"")"	1	1
df['Title'] == 'Mrs'	1	1
dataset.groupby(['Pclass', variable]).size()[1]	1	1
full['_Title'] = pd.Categorical(full.Title).codes	1	1
test.loc[test['family_size']>4,'travel_company']=2	1	1
train['F1'] = np.array(train['CategoricalFare'] == 1).astype(np.int32)	1	1
df.groupby(pd.cut(df.Age, 8, precision=0)).count()['Age']	1	1
"train_df.loc[train_df[""Title""] == ""Dr"", ""Title""] = 'Rare Title'"	1	1
cnf_matrix[0][0]/(cnf_matrix[0][0]+cnf_matrix[1][0])	1	1
data['Fare'][data['Fare'].isnull()]= data['Fare'].mean()	1	1
df.isnull().any().sum()	1	1
data['Cabin_numerical'] = data['Cabin_numerical'].astype('float')	1	1
dataset['isCabinE'] = dataset['isCabinLetters'].apply(lambda x: 0 if x != 'E' else 1)	1	1
"df_train.describe(include=""all"").round(2)"	1	1
sub['PCLASS'] = sub['PCLASS'].astype('category')	1	1
"df_test[[""cab_b"",""cab_c"",""cab_d"",""cab_e"",""cab_f"",""cab_g"",""cab_z""]] =pd.get_dummies(df_test[""cab""],drop_first=True)"	1	1
"X_transformed[""Survived""]"	1	1
train_df.iloc[0]	1	1
test_df.iloc[152]	1	1
result_df_xgb['Survived'] = model_test_prediction_test.astype(int)	1	1
"train_data[""Child""] = 0"	1	1
tp.corr()	1	1
dataset['Age'] = dataset[['Age','Pclass']].apply(impute_age,axis = 1)	1	1
y.to_csv('random_forest_gender.csv', header=True)	1	1
df.groupby(colName).count()	1	1
train_try['FareBand'] = pd.qcut(train_try['Fare'], 4)	1	1
age_nulls.iterrows():	1	1
"df.dtypes[df.dtypes == ""object""].index"	1	1
df.ix[0:890]	1	1
df['categorized_' + col] = pd.cut(df[col], bins=bins, labels=labels)	1	1
combined['Cabin_num1']	1	1
test['LargeFamily']=np.where(test['FamilySize']>5,1,0)	1	1
"related_people.loc[related_people[""PassengerId""]==70,""RGroup""]=""Kink_M"""	1	1
combined['Ticket'].head(5)	1	1
"tmp_train[""Cabin""].fillna(""U"", inplace=True)"	1	1
"train_df.drop(""Survived"", axis=1)[801:]"	1	1
test_data['Embarked'] = StandardScaler().fit_transform(test_data['Embarked'].values.reshape(-1, 1))	1	1
train.groupby('Survived').Sex.value_counts(normalize = True).unstack()	1	1
pd.notnull(G.node[Passenger]['HyphenName']):	1	1
combined['Sex'] = combined['Sex'].map({'male':0, 'female':1})	1	1
data['Survived'].value_counts().plot(kind = 'bar')	1	1
train['Cabin'] = train['Cabin'].apply(keepfirst)	1	1
family['Family_size'] = 1 + family.Parch + family.SibSp	1	1
mix_results.head(10)	1	1
Titanic_Master.groupby(['Pclass'])['Age'].median()	1	1
train_df.groupby('Title_num')['Age'].transform('median')	1	1
train['EmbarkedQ'][i] = 1	1	1
XGB.to_csv('XGB5.csv')	1	1
df.drop(features, axis=1)	1	1
models.append('RandomForest')	1	1
dft['emb']=dft['Embarked'].map({'S':1,'C':2,'Q':3}).astype(int)	1	1
train_drop.dropna(subset = ['Age'])	1	1
titanic_data[['Fare','Pclass','male','Parch','SibSp','Age']]	1	1
dataTrain['Sex'] = encoder.fit_transform(dataTrain['Sex'])	1	1
"dfTest[""Parch""]"	1	1
predictions.append(test_feat)	1	1
DataFile.drop('Name',axis=1)	1	1
train_dataset.loc[i, 'PassengerId'] == PassengerID_toDrop_EmbarkedNull[j]:	1	1
trainPCA2['5'] = trainPCA[:,4]	1	1
"ALL_DATA[""Age""].isnull().sum()"	1	1
"out.to_csv(""voting.csv"", index=False)"	1	1
Test_real.Fare.fillna(value=0)	1	1
df_train[['Embarked','Survived']].groupby(['Embarked'],as_index = False).mean()	1	1
test_df['Fare'] = test_df['Fare']/test_df['FamilySize']	1	1
df_data['P_Ti_Age'] = df_data['P_Ti_Age'].astype('int')	1	1
xText[['Age', 'Sex']].apply(mapAgeToCategory, axis=1)	1	1
data.drop('Name',inplace=True, axis = 1)	1	1
train_df[['Parch','Survived']].groupby(['Parch']).mean().plot.bar(ax=ax[0])	1	1
le2.transform(test.as_matrix(columns=['Pclass']))	1	1
"X_train[""RelativesCount""] = X_train[""SibSp""].combine(X_train[""Parch""], lambda x1, x2: x1+x2)"	1	1
X_temp['y'] = y_train	1	1
combined_features['Fare']/=scale	1	1
maindf.info()	1	1
title_list.append(i_list[1])	1	1
"test.loc[test[""Embarked""]=='C', ""Embarked_C""] = True"	1	1
df1_test['Fare']=22.202104	1	1
dset.loc[dset['Embarked'].isnull(), 'Embarked'] = dset['Embarked'].value_counts().index[0]	1	1
ensembleDf.loc[:,'mode']	1	1
"train_data[""TitleMr""] = 0"	1	1
df_train['Embarked'].fillna('Unknown', inplace=True)	1	1
train_data['Age'].hist(bins=15,density=True,alpha=0.7)	1	1
k_accuracy.append(accuracy)	1	1
train['Fare_categories'].value_counts()	1	1
"titanic_train.groupby(""Parch"")"	1	1
dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 55), 'Age']   = 4	1	1
"df[""Family_Size""] = df[""Family_Size""].astype(""int64"")"	1	1
test_x.Fare.fillna(test_x.Fare.mean())	1	1
"data.drop([""Cabin"", ""Ticket"",""Name"", ""PassengerId"", ""SibSp"", ""Parch"", ""Age"", ""Fare""], axis=1)"	1	1
"train_df.drop(""Cabin"", axis=1, inplace=True)"	1	1
d.head()	1	1
"X_test.drop(""Survived"", axis=1)"	1	1
training_df.iloc[:,2:].values #.values turns the dataframe into a numpy array (Gets rid of index)	1	1
titanic_df_test['Alone'].loc[titanic_df_test['Alone']>0] = 'With Family'	1	1
"df_data[""TitleCat""] = df_data[""TitleCat""].astype(int)"	1	1
train_copy['Age_Category'] = 8	1	1
dataset.loc[(dataset['Fare']<=14.454) & (dataset['Fare']>7.91),'Fare'] = 1	1	1
"lgbm_params[""metric""][0]"	1	1
"x.replace(""."","";"").replace("","","";"").split("";"")[1]"	1	1
"pd.isnull(df_test[""Fare""][x]):"	1	1
data_pred['Survived']=preds	1	1
"word[0].isupper() and word.endswith('.'): #name into an array of ""words"""	1	1
coeff_df.sort_values(by = 'Correlation Coeff', ascending=False)	1	1
test['NAge'] = 0  # Create a new feature 'NAge' and assign initial value '0'	1	1
test_df[['C_sex', 'Age', 'Fare']].values	1	1
training_data['Embarked'].value_counts()	1	1
dataset['IsChild'] = 0	1	1
data_copy['Fare']=data_copy['Fare']*np.abs(corr_val['Fare'])/total_val	1	1
"res.query(""param_criterion == '{}'"".format(criterion))"	1	1
feats['family_size'].head()	1	1
mix_results.iterrows():	1	1
x_test['Fare'] = x_test['Fare'].fillna(fare_mean)	1	1
RF_accuracies.mean()	1	1
sns.boxplot(survived_fare)	1	1
train.drop(droppings, 1, inplace=True)	1	1
X['Age'].fillna(X['Age'].median(), inplace=True)	1	1
df_test[['PassengerId', 'Survived']].to_csv('log_reg_feat_eng.csv', index=False)	1	1
gender_encoder.transform(test.Sex)	1	1
train['Age'] = train[['Age','Pclass','Sex']].apply(impute_age_train,axis=1)	1	1
df_full['Cabin'].fillna('N', inplace=True)	1	1
axs[1].set_title('Age by Embarked Spot')	1	1
"full.loc[((full.Title.isin([""Mlle"",""Ms"",""Dr""])) & (full.Sex==""female"")),""Title""]=""Miss"""	1	1
train_data['SibSp'].mean()	1	1
train['CabinGroup'] = train['Cabin'].apply(cabingroup)	1	1
X_train['Age'].hist(bins = 70, ax = axis2)	1	1
train.loc[:,tcols].dropna()	1	1
df_train['FamilySize'] = df_train.SibSp + df_train.Parch + 1	1	1
"df[""group_id""]      = df[""group_id""].fillna(1234)"	1	1
"data[""Embarked""][i]= ""S"""	1	1
titanic_train_df.Age.loc[titanic_train_df['Title'] == 'Dr'] = titanic_train_df.Age.fillna(titanic_train_df[(titanic_train_df['Title'] == 'Dr')]['Age'].mean())	1	1
full_df.loc[ (full_df.Age.isnull()) & (full_df.Gender == i) & (full_df.Pclass == j+1),         'AgeFill'] = median_ages[i,j]	1	1
df_test.as_matrix(columns=['Sex'])	1	1
titanic_df['Name_length'] = titanic_df['Name'].apply(len)	1	1
self.values = None	1	1
test.shape # 컬럼 한개가 적다 = survived	1	1
train['Title'].replace(['Mlle','Ms'], 'Miss', inplace = True)	1	1
X_train['Embarked_Label'] = le.fit_transform(X_train['Embarked'])	1	1
train.loc[Qtest_n+1:891, 'Survived'].astype(int).values	1	1
df['Fare_Per_Person'] = df['Fare'] / (df['Family_Size'])	1	1
"test.loc[train[""Age""] >= 13, ""Child""] = 0"	1	1
df_imp.iloc[::-1, :].plot.barh(ax=ax); ax.set_title(est_names[i])	1	1
plt.hist(ageOfMissWithParch)	1	1
df['SibSp'] = SibSp	1	1
my_feature_columns.append(tf.feature_column.numeric_column(key='Age'))	1	1
df.loc[(df['Fare']>31)&(df['Fare']<=513),'Fare_category']=3	1	1
df['Title'].value_counts()[1:10]	1	1
np.where(idx)[0]:	1	1
predictions.append(self.predict(i))	1	1
df_test.join(age_one_hot_test)	1	1
whole.set_value(idx, 'Age', np.random.randint(20,45,1)[0])	1	1
titanic_df['Parch']	1	1
"titanic_train_dataframe.loc[titanic_train_dataframe[""Pclass""] == 3, ""Fare""]"	1	1
titanic_all['Small_fam'].loc[titanic_all['Small_fam'] >= 5] = 0	1	1
sub['SURVIVED'].values	1	1
dft['Embarked']	1	1
plt.hist(df_all[df_all['Survived']==1]['Age'], bins=30, range=[0,100], label='Uratowani')	1	1
file_submit.to_csv('titanic_submit_pred.csv', index=False)	1	1
test.fillna(value=0, method=None)	1	1
"sns.boxplot(train[train[""Pclass""] == 2][""Fare""], ax = ax[1])"	1	1
average_age['Age1'] = average_age['Age1'].astype(int)	1	1
df_train.drop(['Ticket', 'Cabin', 'Fare', 'ticketcount'], axis=1)	1	1
df['Sex'] = labelencoder_sex.fit_transform(df['Sex'].values)	1	1
np.shape(X_scale_train)	1	1
ax[0].set_title('Fare in Pclass 1')	1	1
plt.style.use(style='seaborn')	1	1
"train.drop([""Name"", ""Title""], axis=1)"	1	1
data['has_parents_or_kids'] = data.Parch.apply(lambda x: 1 if x > 0 else 0)	1	1
"data_train[""Survived""].value_counts(normalize=True)"	1	1
titanic_df.loc[(titanic_df['Age'].isnull()) & (titanic_df['Title'] == title), 'Age'] = age_to_impute	1	1
dataset.loc[(dataset['Sex'] == gender) & (dataset['Pclass'] == pclass) & (dataset['Age'] == age),'Embarked'].dropna()	1	1
data.companions.astype('category')	1	1
testOrg['Age'] = testOrg['Age'].fillna(testOrg['Age'].median())	1	1
test.drop(['PassengerId', 'Cabin', 'SibSp', 'Parch', 'Name', 'Ticket'], axis=1, inplace=True)	1	1
train['Pclass'][train['Survived'] == 1].value_counts()	1	1
train_df.corr(),	1	1
test_df['Fare'] = test_df['Fare'].fillna(train_df['Fare'].mean())	1	1
"ranks[""Mean""] = r"	1	1
test_ToPred['Embarked'].replace(['B','S','C','Q'], [0,1,2,3],inplace=True)	1	1
figure['data'][0]['text'] = submission_score.values.flatten().tolist()	1	1
pipelines.append(('ScaledSAG', Pipeline([('Scaler', StandardScaler()),('SAG', LogisticRegression(solver='sag', tol=1e-1, C=1.e4 / x_train.shape[0]))])))	1	1
raw_train['Fare'].hist(bins=100, normed=True, alpha=0.5, color='red')	1	1
df_test_ml['Age_Cat'] = pd.cut(df_test_ml['Age'], bins = 10, labels = [i for i in range(10)])	1	1
data.replace({'Title': title_changes}, inplace=True)	1	1
"dataset['Title'] = dataset['Title'].map({""Mr"": 1, ""Miss"": 2, ""Mrs"": 3, ""Master"": 4, ""unusual"": 5}).astype(int)"	1	1
test['Sex'] = test['Sex'].astype('category')	1	1
dftrain.iloc[:,0].values	1	1
combined['Ticket']=combined['Ticket'].map(cleanTicket)	1	1
"ax[1].set_title(""Survived"")"	1	1
test['Title'] = test['Name'].apply(lambda x: title_re.search(x).group(1))	1	1
"test[[""Sex"", ""Age"", ""Pclass"", ""Fare"", ""Cabin"", ""famSize""]].values"	1	1
abc.to_csv('Submission.csv', index = False)	1	1
df.Fare.fillna(-1)	1	1
ax[0].set_title('Passenger Count by AgeBand')	1	1
test['Embarked'].fillna(0, inplace=True)	1	1
df.loc[(df['Age'] >= 60.105) & (df['Age'] < 70.0525), 'Age'] = 6	1	1
test_df['Embarked']= test_df['Embarked'].fillna('S')	1	1
test_df.drop(['C','Embarked','MasterMiss','Parch','ParchBinary'], axis=1,inplace=True)	1	1
X.transform({self.column_name: transform})	1	1
"train_df[['Sex', 'Survived']].groupby([""Sex""], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
"submission_rfc[""Survived""] = test[""Survived""]"	1	1
"train_df[[""Survived""]].groupby(lambda ind: 'NaN' if (pd.isnull (train_df['Cabin'].loc[ind])) else train_df['Cabin'].loc[ind][0], as_index=True, sort=False, group_keys=True).mean()"	1	1
test.loc[test['Sex']=='male','Sex']=1	1	1
test.loc[test['Sex']=='male','Sex']=0	1	1
"train_sex_numerified.query(""Sex == 'Female'"").query(""Female == 1"").Female.count() == 314"	1	1
"axes[0].set_title(""Class Figure"")"	1	1
data.pop('index')	1	1
inp['Sex'] = inp.Sex == 'male'	1	1
df.loc[df['FamilySize'] == 1, 'FamilySize'] = 0	1	1
"train[""Embarked""].unique()"	1	1
missing_age_test.head()	1	1
"titanic_train[""Age""] = titanic_train[""Age""].fillna(rand_1)"	1	1
X_test_df['Embarked'] = X_test_df['Embarked'].fillna(freq_port)	1	1
final_df.drop(['PassengerId', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'FamilyCount'], axis=1, inplace=True)	1	1
"train_data.loc[train_data[""Name""].str.contains(""Mr.""), ""TitleMr""] = 1"	1	1
le.transform(df_train[features])	1	1
x['Parch'].fillna(0)	1	1
train_df.sort_values('Surname').head(20)	1	1
pds.info()	1	1
model_accuracies.append([lr_val,svc_val,svc_lin_val, rfc_val, knn_val, gnb_val, dtree_val])	1	1
df_full['FamilySizeBin'] = df_full['FamilySizeBin'].map({'alone': 0, 'normal': 1, 'big': 2})	1	1
S['Grade_ordered_factorize'] = S['Grade_ordered'].factorize(sort=True)[0]	1	1
"coeff_df[""Forest""] = rf.feature_importances_"	1	1
data_train['Survived'].loc[(data_train['Parch']==0) & (data_train['SibSp']==0)].value_counts()	1	1
test_df.insert(1, 'Survived', np.nan)	1	1
Age.describe()	1	1
all.Embarked.isnull().sum()	1	1
titanic_df['Embarked'] = titanic_df['Embarked'].fillna('C')	1	1
"test_dataset.loc[ (test_dataset.Pclass == 2) & (test_dataset.Sex == ""female"") & (test_dataset.Age.isnull()), ""Age"" ] = test_dataset.loc[ (test_dataset.Pclass == 2) & (test_dataset.Sex == ""female"") & (test_dataset.Age.isnull()), ""Age"" ].fillna(test_dataset.loc[ (test_dataset.Pclass == 2) & (test_dataset.Sex == ""female"") ][""Age""].median())"	1	1
train.groupby('Title').Survived.mean() #The captain goes down with the ship!	1	1
train_X['Cabin_loc'] = train_X['Cabin'].apply(get_cabin_loc)	1	1
train[['CategoricalAge','Survived']].groupby(train['CategoricalAge']).mean()	1	1
age['Survived'] = combined_df.Survived	1	1
complete_data.values	1	1
all_data.rename(columns={1: 'Pclass1', 2: 'Pclass2', 3: 'Pclass3'}, inplace=True)	1	1
"train.loc[(train[""Pclass""]==1)&(train[""Survived""]==1), ""Age""]"	1	1
"X_train.drop(labels=[""Name"", ""Ticket"", ""Cabin""], axis=1)"	1	1
train['Cabin'].loc[~train.Cabin.isnull()] = 1	1	1
nonsurvivors.count()	1	1
"train_df[""Survived""][0:train_set_size]"	1	1
"train_df[""Age""] = train_df.groupby(""Title"")[""Age""].transform(lambda x: x.fillna(x.mean()))"	1	1
dataset.loc[dataset['FamilySize'] == 0, 'IsAlone'] = 1	1	1
temp_train['SibSp'] = data['SibSp']	1	1
result.to_csv('decisiontree-age-parch-sibsp.csv', index=False)	1	1
males_xt.div(males_xt.sum(1).astype(float), axis=0)	1	1
data['Fare_group'] = Fare_group	1	1
dropped_train_df.drop('Survived', axis=1)	1	1
titanic.groupby(['Name_len']).Survived.mean()	1	1
submit['Survived'] = submit['Survived'].astype('int')	1	1
test_data['Survived'] = test_data['Survived'].astype(int)	1	1
Y_all.values[train_index], Y_all.values[test_index]	1	1
df['Survived'].groupby(df['Embarked']).value_counts().unstack()	1	1
en_test['tree_clf'] = pd.DataFrame(tree_clf.predict_proba(X_test))[1]	1	1
test2_df.drop(mycols, axis = 1)	1	1
train['Embarked_Num'] = train['Embarked'].map( { 'C': 1, 'Q': 2, 'S': 3} )	1	1
test_data['Embarked'].fillna('N', inplace=True)	1	1
ada_rfecv.transform(ada_rfecv_test)	1	1
models_df.loc[index, 'Parameters'] = str(model.get_params())	1	1
df_all.Embarked.replace('Q',1)	1	1
test.loc[(test['Fare'].isnull()), 'Fare'] = test['Fare'].median()	1	1
dataset.loc[dataset['GroupId'] == 0, 'GroupSize'] = 1	1	1
df_train['SibSp'].isnull().sum()	1	1
"test_set[""Sex""] = StandardScaler().fit_transform(test_set[""Sex""].values.reshape(-1,1))"	1	1
"_df.loc[idxs,""group_count""] = c"	1	1
df_train['Senior'] = df_train['Age'].map(lambda s:1 if s>60 else 0)	1	1
concat_set.loc[concat_set['FamilySize'] == 1, 'IsAlone'] = 1	1	1
train_df.loc[train_df['FamMembers'] > 4, 'FamSize'] = 'large (>4 members)'	1	1
"test['Age']=test['Age'].fillna(test[""Age""].median())"	1	1
y_pred_rf['Survived']	1	1
df_train.drop('Name',axis =1, inplace=True)	1	1
test_data['Survived'] = y_test	1	1
rawdata.ix[(np.isnan(rawdata.Age)) & (rawdata.Survived == 1), 'Age']=survAgeAvg	1	1
k.append('Major.')	1	1
titanic_train_df.drop(['Parch', 'SibSp', 'Ticket', 'Cabin', 'Name'], axis=1)	1	1
copy_test_df.info()	1	1
"df.query(""Fare == 0"").head()"	1	1
"df[""Class""] = df[""Pclass""].map(classd)"	1	1
imp.transform(df.Age.values.reshape(-1,1))	1	1
train.drop(drop_list, axis=1, inplace=True)	1	1
full_data[['Title', 'Sex', 'Survived']].groupby(['Sex','Title'], as_index=True).mean()	1	1
data_train.drop(columns=['Survived'])	1	1
train.drop(columns='Fare', inplace=True)	1	1
"dataset.loc[(dataset.Age.isnull()) & (dataset.Title == ""Mrs""), ""Age""] = 36"	1	1
ax1[0].set_title('Age Distribution for Survived')	1	1
dataset['Sex'] = [0 if r == 'male' else 1 for r in dataset['Sex']]	1	1
df_train[['Embarked','Survived']].groupby('Embarked').mean().sort_values(by='Survived',ascending=False)	1	1
age_train.replace(0.0, 0)	1	1
test['hasCabin2'] = train['hasCabin2'].fillna(1)	1	1
df_submit.drop(columns=['SibSp', 'Parch'], inplace=True)	1	1
train_df_imputed.drop('Age_x', axis=1, inplace=True)	1	1
train_data['Suffix'] = train_data['Suffix'].replace('Mlle', 'Miss')	1	1
titanic_df[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean()	1	1
combine_df.drop('Embarked',axis=1)	1	1
titanic_test['Survived'] = grid_rf_estimator.predict(X_test)	1	1
train.describe(include =['O'])	1	1
train_csv.loc[(train_csv.Name.str.contains('Dr') & train_csv.Age.isnull()), 'Age'] = Dr_average_age	1	1
test.Embarked.isnull().value_counts()  # no missing values	1	1
hist.max()	1	1
train.describe(include=['number'])	1	1
"test_df[""Cabin""]"	1	1
imput.transform(age_frame)	1	1
raw_train['Parch'].hist(bins=20, color='magenta', normed=True, alpha=0.5)	1	1
df_train['has_cabin'] = df_train['cabin'].map(lambda c: 0 if c == 'none' else 1)	1	1
rawdata.ix[rawdata.Fare <= 7.775, 'FareCategory'] = 0	1	1
data.sons.loc[data.PassengerId==98] = 1	1	1
df.to_csv('submission_2.csv',header=True)	1	1
data_frame.Pclass.astype(int);	1	1
"result[""Survived""] = result[""probability""].apply(lambda a: 1 if a > 0.7 else 0)"	1	1
"X_transformed.drop([""Survived"", ""Name"", ""Ticket"", ""PassengerId""], axis=1).copy()"	1	1
not_survived_age.plot.hist(20,color = 'r')	1	1
data_copy.loc[:, 'Pclass'] = data_copy['Pclass'].fillna(data_copy['Pclass'].median)	1	1
"data1.drop(""Cabin"",axis=1,inplace=True)"	1	1
"df_female.groupby(""Pclass"").get_group(pclass)"	1	1
"_df[""group_count""] = _df.group_count.fillna(1)"	1	1
transformed_df['Survived'] = combined_df.Survived	1	1
prediction_submission_knn.to_csv('titanic_knn.csv', index=False)	1	1
predictionRF.shape	1	1
df['Family_size']=df['SibSp'] + df['Parch']+1	1	1
df_train['name_length'] = df_train['name_length'].astype('float')	1	1
"test.loc[test.Title.isin(rare_title), ""Title""] = ""Rare"""	1	1
test.loc[(test['AgeModified']>30) & (test['AgeModified']<=40),'AgeCategorical'] = 3	1	1
passenger['SibSp'] > 2:	1	1
train.drop(labels=['Survived'], axis=1,inplace = True)	1	1
ndf.drop(['Cabin_numeric_range_No Cabin', 'Cabin_deck_No'], inplace = True, axis = 1)	1	1
test.to_csv( 'rfm10.csv' , index = False )	1	1
titanic_train.groupby('Ticket').count().PassengerId.describe()	1	1
train.drop(['Cabin'], axis = 1, inplace = True)	1	1
combined_data['Ticket'] = combined_data['Ticket'].map(cleanTicket)	1	1
X.Age.fillna(X.Age.mean(), inplace=True)	1	1
df['fare_med'] = df['Pclass'].apply(lambda x: class_fares[x])	1	1
data_frame.head(891).Embarked.fillna('S', inplace=True)	1	1
data['ImputedAge_bin'] = pd.cut(data.ImputedAge.astype(int), 4, labels = [0,1,2,3])	1	1
W.dot(A_prev) + b     # linear activation for the hidden layers	1	1
simple_data_df['P3_Female'] = np.where((simple_data_df['Sex']==1) & (simple_data_df['Pclass']==3), 1, 0)	1	1
all_data.set_value(1043,'Fare',value=0)	1	1
np.mean(stack_score)	1	1
data_train['Deck'] = data_train['Deck']             .replace(['A','B','C','D','E','F','G','T'],[1,2,3,4,5,6,7,8])	1	1
"train_df.loc[train_df[""SibSp""]==8]"	1	1
"df_train[""Sex_code""] = label.transform(df_train[""Sex""])"	1	1
summary_family.iloc[-1, :]	1	1
predict_test.loc[ (predict_test['Pclass']<3) & (predict_test['Sex']=='female') ,'Survived']=1 # set 1st and 2nd class female survive to 1	1	1
test['SmallF'] = test['Fsize'].map(lambda s: 1 if  s == 2  else 0)	1	1
df_all['Fare'].fillna(value=median_fare, inplace=True)	1	1
X_all.iloc[:,8] = le.fit_transform(X_all.iloc[:,8])	1	1
"all_df.drop([""PassengerId"", ""Name"", ""Sex"", ""Ticket"", ""Cabin"", 'child', ""Embarked"", ""title"", ""mother""], axis = 1)"	1	1
sns.boxplot(x=['Binary', 'OneHot'], y=[hot_compare_df['Binary'], hot_compare_df['OneHot']]);	1	1
df[['Age', 'Fare', 'Parch', 'SibSp', 'Pclass']]	1	1
features.values	1	1
final_test['Age1'] = final_test['Age1'].apply(transform_age)	1	1
train_test['FamilySize'] = train_test['Parch'] + train_test['SibSp']	1	1
train_x.drop(columns=['Name'])	1	1
"train_dat.at[i,""Fmsize_c""] = ""LargeF"""	1	1
original_train_data['Age'].hist(ax=axarr[0][0])	1	1
input_test_data.loc[:,['PassengerId','Survived']].round().astype(int)	1	1
"datacv.set_value(i, 'Name', ""Don"")"	1	1
test_df['Sex'] = pd.Categorical(test_df['Sex'])	1	1
train_df['Age']= train_df['Age'].replace(0, np.nan)	1	1
GroupInfo.append([0.5,1,0]) # Passenger traveling alone (group size of 1) with neutral values	1	1
"namelen.append(len(df_test[""Name""][i]))"	1	1
train.groupby([pd.cut(train.Age,np.arange(0,max(train.Age)+10,10)),'Survived']).PassengerId.count().unstack()	1	1
train['Age'] = train['Age'].apply(lambda x: 1 if x < 15 else 0)	1	1
train_df.drop(['SibSp'], axis=1)	1	1
test.isnull().values.any()	1	1
train_data['Fare'].value_counts()	1	1
test.drop(['Age','Fare','Age_bin','Fare_bin'],1)	1	1
data.loc[(data.passenger_fare>29.69) & (data.passenger_fare<=29.7) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>29.69) & (data.passenger_fare<=29.7) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
df['Embarked'] = df['Embarked'].map({'S':0, 'C':1, 'Q':2})	1	1
"test[""Age""][ test[""Age""] > 64 ] = 4"	1	1
train.loc[(train['Age'] > 12) & (train['Age'] <= 18), 'Age'] = 2, #Teenager	1	1
corrmat.nlargest(k, 'Survived').index	1	1
"train_data.drop([""Survived"", ""Age""], axis= 1)"	1	1
df_train.loc[:,'Fare'] = pd.cut(df_train.Fare, [df_input.Fare.min(),15, df_input.Fare.max()], labels =[0,1])	1	1
titanic_test.drop(['Pclass','Pclass_3'],1)	1	1
full_set.loc[full_set[:]['Embarked'].isnull(), 'Embarked'] = ['S','C']	1	1
"title_dict[""MASTER""] = 5"	1	1
data.drop(['Parch', 'SibSp'], inplace=True, axis=1)	1	1
train['SortFare'] = pd.cut(train['Fare'], n)	1	1
"df_test[""Family_Size""] = 0"	1	1
titanic_df[['person','Survived']].groupby('person', as_index=False).mean()	1	1
df.iloc[:,2:12]	1	1
categorical_columns.append('Name_titleCategory')	1	1
data.loc[data.Cabin.str[0] == 'B', 'Cabin'] = 2	1	1
pd.DataFrame.from_dict(results)	1	1
train_df['IsAlone'] = train_df['FamilySize'].apply(lambda x: 0 if x > 1 else 1)	1	1
"titanic_train[""Age""][np.isnan(titanic_train[""Age""])] = rand_1"	1	1
dataset['MedianAge'] = (dataset['Age']>=18) & (dataset['Age']<=40)	1	1
parameters['num_epochs'] = 2000	1	1
train['Age']=train['Age'].fillna(train['Age'].mode()[0])	1	1
train_df.drop(['Ticket', 'Cabin', 'PassengerId'], axis=1)	1	1
testset.iloc[0:418,[1,3,4]]	1	1
data_df.drop(['index', 'PassengerId'], axis = 1, inplace = True)	1	1
data.loc[data.Age.isnull(),'Age']=data['Age'].mean()	1	1
test_data['Survived']=predictions	1	1
test['title'] = test['title'].apply(title_to_no)	1	1
data['Ticket'] = data['Ticket'].str.replace('.','').str.replace('/','').str.replace(' ','')	1	1
df.loc[df.embarked_fill.isnull(), 'embarked_fill'] = 'S'	1	1
train_obj.head()	1	1
train_df.loc[(train_df['Age']>32)&(train_df['Age']<=48),'Age_band']=3	1	1
test[['Survived']].to_csv(path_or_buf='~/output.csv')	1	1
"xgb_submit[[""PassengerId"",""Survived""]]"	1	1
raw_train[['Parch', 'Survived']].groupby('Parch', as_index=True).mean()	1	1
"dat.loc[dat[""Embarked""] == ""Q"",""Embarked""] = 0"	1	1
categorical_columns.append('Name_title')	1	1
df_titanic['Cabin'] = df_titanic['Cabin'].map(lambda i: i[0] if not pd.isnull(i) else 'Z')	1	1
dataframe.loc[dataframe['Age'].isnull(),features]	1	1
"data_train.groupby(""Survived"")[""Age""].plot(kind=""hist"", title=""Ages of Titanic Survivers vs. Casulities"", legend=True)"	1	1
data_pruned.info()	1	1
df['Female'] = np.where(df['Sex'].str.lower()=='female', 1, 0)	1	1
data['Deck']=data['Deck'].round(4)	1	1
imputer.transform(X_test)	1	1
training_data.groupby(['Sex','Survived']).size()	1	1
train_df.drop('Sex_Class', axis=1, inplace=True)	1	1
test[['male', 'female', 'Higher', 'Middle', 'Lower']]	1	1
train2.drop(['Survived', 'Cabin', 'Ticket', 'PassengerId'], axis=1);	1	1
train_df[['Survived', 'Name']].groupby('Survived').count()	1	1
df_study_rf.reset_index(inplace=True)	1	1
df['Port']	1	1
data.loc[(data.Age.isnull())&(data.Title==4), 'Age']=4	1	1
imputed_T[ 'Fare' ] = test.Fare.fillna( full.Fare.mean() )	1	1
tmp.tail()	1	1
fold_importance_df['feature'] = features.copy()	1	1
data.drop(['PassengerId','Name','Ticket'], axis=1)	1	1
X.loc[:,'Fare'].mean()	1	1
titanic_train_dataset['Title'] = name_title	1	1
combined_df.drop(['Age', 'Fare'], axis=1)	1	1
titanic_df.drop('Name', axis=1, inplace=True)	1	1
df_train.loc[df_train['Age'].isnull(),'Age']=fill_age(df_train)	1	1
x_test['Family'] = x_test['SibSp'] + x_test['Parch']	1	1
expensive_.head(10)	1	1
le1.transform(X.Embarked)	1	1
"related_people.loc[related_people[""PassengerId""]==566,""RGroup""]=""Davies_M"""	1	1
csv_train.info()	1	1
X3test['Embarked'] = X3test['Embarked'].replace(to_replace=['S', 'C', 'Q'], value=[0, 1, 2])	1	1
data['Ticket_categorical'] = data.Ticket.apply(lambda s: s.split()[0])	1	1
master_corr['Age']	1	1
df.iloc[1:5, 2:6]	1	1
d_train.drop(['Survived', 'PassengerId'], axis=1)	1	1
data_train_dummy['Age'].values.reshape(-1, 1)	1	1
predictions['PassengerId'] = test['PassengerId']	1	1
"test.loc[test[""Title""] == ""Mrs"",""Age""] = test.loc[test[""Title""] == ""Mrs"",""Age""].fillna(mrsage)"	1	1
app_train.loc[:,['Age']]	1	1
dataframe['Age'].fillna(fullData['Age'].dropna().median(), inplace=True)	1	1
y_.append(train_predictions) # prediction of current classifier appended	1	1
df_train['AgeRange'] = le.fit_transform(df_train['AgeRange'].astype(str))	1	1
axes[0].set_title('Gender of Passengers')	1	1
df['famsize'] = df['SibSp']+df['Parch']+1	1	1
data_test_split_csv.as_matrix()[:, 2:]	1	1
levels.append(level[0])  #prendi la prima lettera	1	1
"test_reloadedModel.select(""PassengerId"", ""prediction"")         .withColumn('prediction', test_reloadedModel['prediction'].cast('int'))"	1	1
train.loc[(train['Fare']>150) & (train['Fare']<=200),'FareCategorical'] = 3	1	1
train_df.Embarked.fillna(train_df.Embarked.mode()[0], inplace=True)	1	1
df['Ticket'].apply(ticket_number)	1	1
tdf['male'] = (tdf.sex == 'male')	1	1
"train_dat[""Pclass""].value_counts()"	1	1
listTicket_[0]	1	1
"df_tmp.loc[df_tmp.TicketGroupSize != 1, ""Survived""] = df_tmp[""s_with_tgs""]"	1	1
enc['label_enc']	1	1
imp['Features'] = tr.columns	1	1
test['isAlone'] = test['isAlone'].astype(int)	1	1
"test_data[[""Name"", ""Sex"", ""Age"", ""Pclass"", ""Fare"", ""Embarked"", ""SibSp"", ""Parch"", ""Cabin"", ""Ticket""]]"	1	1
test.join([pclass_dummies, sex_dummies, deck_dummies, embarked_dummies])	1	1
my_feature_columns.append(tf.feature_column.numeric_column(key='Fare'))	1	1
"total[[""Title"", ""Age""]].groupby([""Title""]).mean()"	1	1
df_test['Age'].fillna(age_median, inplace=True)	1	1
dataset['Age'] = dataset['Age'].fillna(train['Age'].mean())	1	1
"full_data[""Child""] = 0"	1	1
df['Parch'].values.reshape(-1, 1),	1	1
"new_df.to_csv(""submission.csv"",index=False)"	1	1
Train_Master.describe()	1	1
pd.merge(df, age_median_by_group, on = ['Sex', 'Pclass'])	1	1
dataset_train[['Age', 'Survived']].groupby(['Age']).sum()	1	1
df_all['Age_encoded'] = pd.factorize( df_all['Age_cut'] )[0]	1	1
train.values # Creates an Numpy array of the train data	1	1
dataset['EditedAge'][rowIndex] <= 4:	1	1
feat[1][0]	1	1
test_df['Age'].fillna(test_df['Age'].median(),inplace=True)	1	1
dataset['TicketFreq'] = dataset.groupby('Ticket')['Ticket'].transform('count')	1	1
x.fillna(0)	1	1
"df.loc[i, ""SibSp""] + df.loc[i, ""Parch""] == 0:"	1	1
individual[2] = toolbox.attr_kernel()	1	1
"test_data[""Age""][np.isnan(test_data[""Age""])] = np.random.randint(mean_Age - std_Age,mean_Age+ std_Age,null_count_Age_test)"	1	1
"train.loc[train[""Parch""] == 1, ""pc_c""] = ""1"""	1	1
train_df.copy().dropna(axis=0)	1	1
tt['Ticket'].value_counts().to_dict()	1	1
df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin','Embarked', 'Age', 'Fare'], axis=1, inplace=True)	1	1
"submission.to_csv(""submission4.csv"",index=False)"	1	1
dset.loc[(dset['Sex'] == 0) & (dset['Age'] == 1), 'Title'] = 'Master'	1	1
"test_ori[""FamilySize""]= test_ori[""SibSp""] + test_ori[""Parch""]"	1	1
true_survive.head(n=10)	1	1
"train_df.loc[(train_df['Fare']>102)&(train_df['Fare']<=204),""Fare""]=1"	1	1
change['Sex']=change['Sex'].map({'female':0,'male':1}).astype(int)	1	1
"df_train[""Age""]"	1	1
test['Title'] = test['Title'].astype(int)	1	1
submission['PassengerId'] = new_data_test['PassengerId']	1	1
all_data.loc[all_data['FamilySize'] < 3, 'FamilyID'] = 'Small'	1	1
train.apply(lambda x: fatWallet(x), axis=1)	1	1
train.apply(getMissingValue)	1	1
df['Mister'] = np.where(df['title'].str.lower() == ' mr', 1, 0)	1	1
train['Title']= train['Title'].replace(meantitle['Title'][i], meantitle['Survived'][i])	1	1
full_data['Age'].isnull().sum()	1	1
combined_data['Deck'].value_counts()	1	1
train['Embarked'].fillna(3,inplace=True)	1	1
lre_cv.best_params_['solver'],	1	1
"data[""TicketClean""] = data[""Ticket""].str.extract('(\d{3,})', expand=True)"	1	1
dt_train.drop('Family', axis=1, inplace=True)	1	1
"test_data[""PassengerId""].values,"	1	1
df_train['AgeRange'].value_counts().plot(kind='bar')	1	1
train[['Pclass', 'Fare']].corr()	1	1
data_test.drop(['Name', 'Ticket', 'Cabin'],axis=1,inplace=True)	1	1
valid_df.drop('Survived', 1)	1	1
decisiontrees_test.append(pd.Series(metrics.accuracy_score(y_test,prediction_test)))	1	1
"new_df.CabinKnown.astype(""int"")"	1	1
df['FamSize'] = df['Parch'] + df['SibSp'] + 1	1	1
train['PassengerId'].head(20)	1	1
test_data.fillna(value=nan_values)	1	1
"df[""Title""].replace([""Mr"",""Miss"",""Mrs"",""Master"", ""Officer"", ""Royalty""],[0,1,2,3,4,5], inplace=True)"	1	1
df['Survived']=df['Survived'].astype('category')	1	1
"test[""Age""][(test[""Age""] > 16) & (test[""Age""] <= 32) ] = 1"	1	1
df['total']=df[0]+df[1]	1	1
"test_df.pop(""Cabin"")"	1	1
"train[""Embarked""].value_counts().plot.bar(color = ""skyblue"", ax = ax[0])"	1	1
"X_train.loc[X_train.Age < 18,""Child_col""] = ""Child"""	1	1
row['Sex'] == 'female'and row['Pclass'] == 3 and row['SibSp'] >= 3:	1	1
lgb_params['learning_rate'] = 0.01	1	1
d_res_svc.loc[index_selection_svc,['estimator','params','val_score','mean_test_score','mean_train_score','val_F_score']]	1	1
df_train.loc[df_train['PassengerId'].isin([62,830]), 'Embarked']='C'	1	1
rawdata['Survived'].values	1	1
X_test.drop('Name', axis=1)	1	1
df_tr1.loc[:, column_list]	1	1
"T.style.background_gradient(cmap = ""summer_r"")"	1	1
df['Name_Title'] = df['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	1	1
combined_data['Age_Cat'] = pd.cut(combined_data['Age'], cut_points, labels=label_names)	1	1
names.loc[(names['don'])==1,'don'] = 0	1	1
titanic['ismale'] = titanic.Sex.apply(encode)	1	1
dfcopy.join(pd.get_dummies(dfcopy.Embarked, prefix=c.Embarked))	1	1
group['Group_code'] = ChainCombineGroups(group, 'Family_code', 'Ticket_code')	1	1
gbc_test.to_csv('gbc_test.csv')	1	1
dt.loc[(dt['Fare']>=31),'Fare']=3	1	1
train[['had_Parch', 'Survived']].groupby(['had_Parch'], as_index=False).mean()	1	1
data.loc[(data['Age']>=40)&(data['Age']<60),'Age']=2	1	1
train_df['Embarked'] = train_df['Embarked'].fillna(value='S')	1	1
test_try['FareBand'] = pd.qcut(test_try['Fare'],4)	1	1
dataset.groupby(['Sex', 'Parch']).size().unstack(0).fillna(0)	1	1
test_dataframe.head(10)	1	1
train_csv.loc[(train_csv.Name.str.contains('Master') & train_csv.Age.isnull()), 'Age'] = Master_average_age	1	1
data.describe(include = 'all')	1	1
train_df['Sex'] = train_df['Sex'] == 'male'	1	1
"train[""Survived""] = train_y"	1	1
sc.transform(val_preds)	1	1
df_train.loc[:,('Age','Title')].groupby(['Title']).agg(['median'])	1	1
data.iloc[:,1],	1	1
test['log_fare'] = np.log(test['Fare']+1)	1	1
test['AgeStat'] = float('NaN')	1	1
X['AgeCluster'] = kmeans.labels_	1	1
finaldf.loc[indices, 'pca-2'],	1	1
df_interesting['Sex'] = df_interesting['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
processed_data['Title'] = processed_data['Name'].apply(lambda x: re.split(',|\.',x)[1].lstrip())	1	1
train.drop(['Name','PassengerId'],axis=1,inplace=True)	1	1
j.Embarked.fillna('S')	1	1
all_data['Married'] = [1 if i in ['Mrs', 'Countess', 'Mme', 'Dona'] else 0 for i in all_data['Title']]	1	1
dataset['Master'] = np.where(dataset['Title']=='Master',1,0)	1	1
total_accuracy.loc[i] = accuracies	1	1
df_train[['AgeRange', 'Survived']].groupby(['AgeRange']).mean()	1	1
Test[ 'Cabin' ] = Test[ 'Cabin' ].map( lambda c : c[0] )	1	1
"combined[""c_pre""]=c_pre"	1	1
data_copy.loc[data_copy['Embarked'] == 'C', 'Embarked'] = 0	1	1
output['Survived']=output['Survived'].astype('int8')	1	1
"train.loc[(train[""FamilySize""] > 1) & (train[""FamilySize""] < 5), ""FamilyType""] = ""Nuclear"""	1	1
data.loc[data['Age'] <= 14, 'SortAge_1'] = 0	1	1
test['Fare']=test[['Fare','Pclass']].apply(fare_update, axis=1)	1	1
data['Embarked'].fillna('S', inplace = True)	1	1
test['Age'].values.reshape(-1, 1)	1	1
data.drop(['Age', 'Cabin'], axis = 1, inplace=True)	1	1
"data[""Embarked""][i]!=""Q"":"	1	1
row['Fare'] >=300:	1	1
train_df.loc[(train_df.Embarked == 0) & (train_df.Pclass == 3), ['Fare']]	1	1
data.Title.replace({'Mlle':'Miss', 'Ms':'Miss', 'Mme':'Mrs'}, regex=True)	1	1
data_df['Title'] = data_df['Title'].apply(lambda x: replacement.get(x))	1	1
titanic_df.Embarked.fillna('S', inplace=True)	1	1
test_data[['Survived']] = voting_clf.predict(test_data[features])	1	1
data['Title']=data['Title'].apply(map_marriage)	1	1
dataset.loc[(dataset['Fare'] > dataset['Fare'].quantile(0.6)) & (dataset['Fare'] <= dataset['Fare'].quantile(0.8)), 'Fare'] = 3	1	1
dataset.loc[ dataset['Age'] > 64, 'AgeBand'] = 4	1	1
np.max(test_time)	1	1
titanic_test['Title']=titanic_test.Title.replace(to_replace=['Don','Rev','Dr','Major','Sir','Col','Capt','Jonkheer'],value='Mr')	1	1
"title_dict[""DR""] = 7"	1	1
train_df['CabinBool'] = (train_df['Cabin'].notnull().astype('int'))	1	1
comb['DupTickets'] = comb['Ticket'].map(dup_tickets)	1	1
ada_model['CVScore'],	1	1
"Train_Master.corr().iloc[0].to_frame().reset_index().rename(columns={""index"": ""Feature"", ""Survived"": ""Corr_Coeff""})"	1	1
data['Travelling_alone'] = data['SibSp'] + data['Parch']	1	1
pd.isnull(Age) :	1	1
train['Title'].unique():	1	1
df['FamilySize'] = df.Parch + df.SibSp + 1	1	1
"X_train[[""Embarked"", ""Survived""]].groupby(['Embarked'], as_index=False).mean()"	1	1
train_soft_pred_matrix.set_index([traindex])	1	1
dataset['GroupId'] = dataset.groupby('Ticket')['GroupId'].transform(ticket_group_labeler)	1	1
unknown_age.iloc[:,1:]	1	1
train[['AgeType', 'Survived']].groupby('AgeType').mean().iplot(kind='bar', colors='blue', title='Survival Rate based on Age Type')	1	1
train_set.groupby('Age')	1	1
score_index.append(i)	1	1
dataset['Title'] = dataset['Title'].map(map_title)	1	1
train_df['Alone'] = train_df['Family'].copy()	1	1
dataset['AgeBin']=pd.cut(dataset['Age'].astype(int),5)	1	1
"_df[""embarked""]  == pers[""embarked""]"	1	1
temp.set_index(X.index.values)	1	1
train_data['SibSp'].unique()	1	1
train.loc[train['Cabin'].str.len() == 11.0, 'CabinN2'] = train['Cabin'].astype(str).str[5:7]	1	1
train_engr['engineered_feature'] = train_engr.apply(lambda row: (row[feature1]+row[feature2])/2.,axis=1)	1	1
dataset['Cabin_U'] = dataset['Cabin'].map(lambda s: 1 if s == 0 else 0)	1	1
valid_X['FamilySize'] = valid_X ['SibSp'] + valid_X['Parch'] + 1	1	1
data['TicketNum'] = data.Ticket.str.extract('\s([0-9]+)', expand=False)	1	1
"data[""Fare""].fillna(data[""Fare""].median(), inplace = True)"	1	1
new_df.ix[:,0]	1	1
df.drop('Cabin',axis=1)	1	1
row['Ticket']	1	1
dataset.loc[dataset['Title'] == 'Master', 'Age'] = dataset.loc[dataset['Title'] == 'Master', 'Age'].fillna(medians.loc[medians['Title'] == 'Master']['Age'][0])	1	1
"df.query(""ischild == 1"").Age.dropna().astype(np.uint8).value_counts().sort_index().plot(kind=""bar"", color=""b"")"	1	1
"test.fillna({""Embarked"":""S""})"	1	1
dataset.loc[(dataset.Age.isnull()),'Age'] = avg_age	1	1
train_df['Survived'][y]== 1:	1	1
DataFile.drop('Parch',axis=1)	1	1
score_list_precision.append(cross_val_score(clf, data_now, trainLabel, scoring='precision', cv = 5).mean())	1	1
data['Embarked'] = data['Embarked'].map({'C': 3, 'Q': 2, 'S': 1})	1	1
train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).count()	1	1
t_data['Name_pred'] = t_data['Name_pred'].map(preds)	1	1
test.loc[test['Fare'].isnull(),'Fare'] = test['Fare'].mean()	1	1
"df[""Title""] = df[""Title""].replace(['the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
age1[ '60Plus' ]  = age1[ 'AgeGroup' ].map( lambda r : 1 if 61 <= r else 0 )	1	1
"data_test_v1[""PassengerId""],"	1	1
titanic['Pclass'] == 3	1	1
df_train.loc[:, ['Age*Class', 'Age', 'Pclass']].head(5)	1	1
cabinList.loc[cabinList['Cabin'] == name]	1	1
titanic_data.shape	1	1
enc.transform(agedf_titles).toarray() # encode titles as 5D one-hot vectors	1	1
x.astype(np.float32).values	1	1
"df.loc[(df[""Title""]=='Other') & (np.isnan(df[""Age""])),'Age'] = 42"	1	1
sns.boxplot(x='Pclass',y='Age',data = train,palette = 'winter')	1	1
train_df[['Sex', 'Survived']].groupby(['Sex']).agg(['count', 'mean'])	1	1
df.fillna({'Embarked': embarked})	1	1
test_data['Survived'] = y_prob	1	1
"X.fillna(method=""bfill"")"	1	1
dc['Age']	1	1
train[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
row['Sex'] == 'female' and row['Pclass']== 3:	1	1
estimators_list.append(('Logistic Regression', logreg))	1	1
train_df[['Name','Survived']].groupby('Name', as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
X_ts_plus.fillna({'Age': X_ts['Age'].mean(), 'Fare': X_ts['Fare'].mean()}, inplace=True)	1	1
dataset.loc[(dataset.Age.isnull())&(train.Initial=='Miss'),'Age']=22	1	1
train_df.corr().loc['survived', corr_id].plot.bar(ax=axes)	1	1
titanic_df.drop(['PassengerId'], axis=1)	1	1
data.loc[(data['Fare']>31) & (data['Fare']<=513), 'Fare_cat'] = 3	1	1
test.join(class_dummies)	1	1
df.pivot_table(values = 'Survived', index = ['Sex', 'Pclass']).Survived.plot.bar()	1	1
dataset.loc[ dataset['Familysize'] > 7.5, 'Familysize_cat']  = 3	1	1
"df_test.drop([""PassengerId""],axis=1)"	1	1
"legs[1].set_text(""Yes"")"	1	1
imputer.transform(poly_test_features)	1	1
"test_df.groupby([""Pclass""])['Fare']"	1	1
train['NameLength'] = [len(i) for i in train.Name]	1	1
xtr.iloc[train_index]	1	1
train_df['Initial']=0	1	1
df.describe(include=[np.number])	1	1
train_data.drop(['Survived','PassengerId','Name','Ticket','Cabin'], axis=1)	1	1
dataset['Upper_Class'] = dataset['Pclass'].map(lambda s: 1 if s == 1 else 0)	1	1
sub_dataset.std()	1	1
"dataset[""IsMinor""] = np.where(dataset[""Age""] < 15, 1, 0)"	1	1
"train_df.replace(""female"", 0).replace(""male"", 1)"	1	1
combined_num_cat['Male'] = combined['Sex']	1	1
all_data['age_level']=pd.qcut(all_data['Age'],q=[0,0.1,0.15,0.2,0.25,0.3,0.35,0.55,0.65,0.7,0.75,0.8,0.9,1])	1	1
output.to_csv('csv_to_submit_rf.csv', index = False)	1	1
dataset.iloc[count,2] = 'Rare'	1	1
"train_set[""Name""] = StandardScaler().fit_transform(train_set[""Name""].values.reshape(-1,1))"	1	1
titanic.loc[(titanic.SibSp !=0) ^ (titanic.Parch!=0)]	1	1
"related_people.loc[related_people[""PassengerId""]==775,""RGroup""]=""Hocking_M"""	1	1
"submission[""Survived""] = model.predict(Xtest)"	1	1
params['knn_grid_search'] = grid_search	1	1
"a[""isAlone""] = a[""isAlone""].astype(int)"	1	1
titanic_train.groupby('FreqCabin').count().PassengerId.plot.bar()	1	1
"df_train[""high_prob_group""].sum()"	1	1
df_train.iloc[:,0]	1	1
Xy_train_df_new.equals(Xy_train_df)	1	1
classifier_score['GaussianNB'] = scores.mean()	1	1
test.loc[(test.Age.isnull())&(test.Initial=='Miss'),'Age']=22	1	1
data.fsize.replace(['Single','Medium','Large'],[0,1,2], inplace = True)	1	1
comb.loc[comb['Ticket']=='LINE']	1	1
"df.drop(df[[""PassengerId"", ""Name""]], axis=1)"	1	1
model.add(Dropout(dr))	1	1
dataset.loc[dataset['Age']>64,'Age_cat']=4	1	1
training_set.pivot_table('Survived', ['Sex', age_intervals], 'Pclass').plot(kind='bar')	1	1
data_pred.to_csv('predictions_generative_multGauss.csv', index = False)	1	1
err.append(layer_2_error)	1	1
joined['Age'][joined['Survived'] == 1],	1	1
df.loc[boolColVec, 'Age']= 0	1	1
train5.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
train_df['Embarked'] = train_df['Embarked'].fillna('C')	1	1
_df.loc[idx_1, :]	1	1
df['GroupSurvFlag'] = 0.5	1	1
test['Age_isNaN'] = test['Age'].isnull().astype(int)	1	1
df_test.loc[df_test.Age.isnull(), 'Age'] = df_test[df_test.Age.isnull()].apply(lambda row: average_ages[re.search(', ([A-Za-z]+)\.', row.Name).group(1)], axis=1)	1	1
"train_df.loc[ (train_df[""Sex""]==""female"") & (train_df[""Age""].isnull()), ""Age""] = female_mean_age"	1	1
decisiontrees_train.append(pd.Series(metrics.accuracy_score(y_train,prediction_train)))	1	1
X.Fare.fillna(X.Fare.mean(), inplace=True)	1	1
"tr[""Survived""]"	1	1
data.loc[(data['Fare']>0.7854)&(data['Fare']<=10.5),'Fare_cat']=1	1	1
dataset['GroupSize'] = dataset['SibSp'] + dataset['Parch'] + 1	1	1
allfeat['Age']=allfeat['Age'].fillna(value=np.random.randint(avg-std,avg+std))	1	1
Each_Passenger['passenger'] = Each_Passenger.Sex.str.extract('([A-Za-z]+)\. ', expand = False).apply(lambda x : x == Refer['PassengerId'] if type(x) == str else 1)	1	1
tr['Deck'] =tr['Deck'].replace('F',6)	1	1
train.loc[(train['Age'].isnull()) & (train['Sex'] == 'male'), 'Age'] = aveMaleAge	1	1
ticket[ 'Ticket' ] = All[ 'Ticket' ].map( cleanTicket )	1	1
df.applymap(lambda s: embark_map.get(s) if s in embark_map else s)	1	1
predictions.to_csv('predictions_svm_with_groups.csv')	1	1
data_train_all.groupby(['Pclass']).Age.mean()	1	1
train['Family_Survival'] = data['Family_Survival'][:len(train)]	1	1
reviews['province'].value_counts().head(10).plot.bar()	1	1
df['Embarked'] = df.Embarked.map({'S': 0, 'C': 1, 'Q': 2}).astype(int)	1	1
"combine['AgeGroup'] = pd.cut(combine[""Age""], bins, labels = labels)"	1	1
output.size	1	1
self.le_.transform(y)	1	1
titanic_test['Fare'] = titanic_test['FareBand']	1	1
df['Fare_Scaled'] = scaler.fit_transform(df.Fare.reshape(-1,1), fare_scale_param)	1	1
train_df['Survived'].groupby(train_df['Parch']).mean()	1	1
Y_train.iloc[train_idx]	1	1
"_df.loc[_df[""age""].isna(), : ].index"	1	1
parametros.head(15)	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col',         'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
"in [""Pclass"",""Sex"",""Embarked"", ""Age_categories"", ""Fare_categories""]:"	1	1
"train.drop(""Cabin"", axis = 1, inplace = True)"	1	1
df_norm_1.describe()	1	1
"train_df[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).mean().sort_values(by='Parch',ascending=True)"	1	1
test['data_label'] = 'test'	1	1
traindf['Age'] = traindf['Age'].fillna(traindf['Age'].mean())	1	1
"dataset[""Pclass""] = dataset[""Pclass""].astype('int')"	1	1
train[['Age','Fare','Family']]	1	1
Test_Master['Title'] = Test_Master['Title'].map(Title_dict)	1	1
combined_df[ 'Name' ].map( lambda name: name.split( ',' )[1].split( '.' )[0].strip()).unique()	1	1
"test_df[""Title""] = test_df[""Title""].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
n[3] = 6 6	1	1
final.to_csv('submission.csv', index = False)	1	1
"g.axes.set_title('GB feature importance', fontsize=20,color=""r"")"	1	1
test.Alone.astype(int)	1	1
"X_train.drop(""Embarked"",axis=1)"	1	1
"test[[""Sex"", ""Fare"", ""Cabin""]].values"	1	1
np.round(hard_x_val_score.mean()*100, 2)	1	1
df.drop(['SibSp', 'Parch'], axis = 1, inplace = True)	1	1
df_train.drop(features_drop, axis=1)	1	1
item['Sex']	1	1
i[1].split('. ')[0]	1	1
name_sex_df.head()	1	1
test['FareBand'] = pd.cut(test['Fare'], (-1, 8.05, 14.25, 60.2875, 1000), labels=['0','1','2','3'])	1	1
"data_copy.loc[data_copy[""Embarked""] == ""S"", ""Embarked""] = 0"	1	1
df.loc[ df.Relatives == 0, 'isAlone'] = 1	1	1
valid_df.shape	1	1
"train[""Fsize""] = train[""SibSp""] + train[""Parch""] + 1"	1	1
"train.drop(""Ticket"", 1, inplace = True)"	1	1
df_test.join(person_dummies_test)	1	1
data['Cabin'].str.split('([A-z]+)(\d+)'):	1	1
"related_people.loc[related_people[""PassengerId""]==185,""RGroup""]=""Kink_M"""	1	1
all_data['Age'] = all_data['Age'].fillna(all_data['Age'].median())	1	1
data['Embarked'] = data.Embarked.fillna(0)	1	1
df_train['Title'].apply(replace_title)	1	1
test.to_csv('result.csv', index=False)	1	1
train2['Sex'] = train2['Sex'].map({'male':0,'female':1})	1	1
plt.hist(x=[data1[data1['Survived']==0]['FamilySize'],data1[data1['Survived']==1]['FamilySize']], stacked=True, color=['g','b'], label=['Survived','Dead'])	1	1
test_df.loc[test_df.Age.isnull(),'Age'] = predict_ages	1	1
"full[""Age""] = full[""Age""].astype(int)"	1	1
labelEnc.transform(combined[col].astype('str'))	1	1
plt.hist(data.Age[~np.isnan(data.Age)], range = [data.Age.min(), data.Age.max()], density = True, alpha = 0.5)	1	1
dataset['Age'].hist() # histogram 分布图	1	1
group_survival['confidence'] = confidence * ((1/group_survival['Group_size']) * (group_survival['adj_survived'] - group_survival['adj_dead']))	1	1
test.apply(lambda row: get_ticket_prefix_id(row, get_ticket_prefix_id_mapping), axis=1);	1	1
"test_df[""AgeBin""] = pd.cut(test_df['Age'],agepercentile, labels=[""child"",""youth"",""adult"",""elder""])"	1	1
"train.groupby(""Survived"").Fare.describe()"	1	1
t.corr()	1	1
"X_test[""Age""] = (X_test[""Age""] - X_test[""Age""].mean())/X_test[""Age""].std()"	1	1
ageBelowFifty.sort_values('age')	1	1
train_data.drop('Sex',axis=1)	1	1
titanic['Title'] = titanic['Title'].replace(['Lady', 'Countess', 'Dona'], 'Royalty - Women')	1	1
data1['AgeBin'] = pd.cut(data1['Age'].astype(int), 5)	1	1
"titanic_test_df[""Age""] = titanic_test_df[""Age""].fillna(titanic_test_df[""Age""].median())"	1	1
full.loc[:891,['FamilySize','Survived']].groupby(['FamilySize'],as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
data.loc[data.Cabin.isnull(), 'Cabin'] = data.loc[data.Cabin.isnull(), 'Ticket'].   apply(lambda x: CabinByTicket[CabinByTicket.index==x].min())	1	1
x_train_numerical.info()	1	1
"train_set[""Embarked""] = train_set[""Embarked""].apply(lambda x: replacement2.get(x))"	1	1
df.drop(columns=col_to_drop,axis=1,inplace=True)	1	1
"train[""Sex""] = lb_make.fit_transform(train[""Sex""])"	1	1
titanic_df['Female']=titanic_df[['Sex']].apply(get_female, axis=1)	1	1
train_raw.loc[validation_index]	1	1
train_data[['Embarked','Survived']].groupby('Embarked', as_index=False).mean()	1	1
"rf_submit.to_csv(""submission_rf.csv"",index=False)"	1	1
sc.transform(imputed_X_test)	1	1
"ax[1].set_title(""Accuracy Score Matrix"")"	1	1
titanic_test.groupby('LastName').count().PassengerId.describe()	1	1
fare_mean_per_class.append(mfare)	1	1
one_hot_encoded_test_df.isnull().sum()	1	1
X_dum.head()	1	1
"train_new.drop(""Survived"", axis=1)"	1	1
result.append(clf.predict(test[:,0:-1]))      # Summerize simple model output	1	1
"tp.loc[tp[""Title""]==""Mrs"",""Title_c""] = 2"	1	1
cv_results.sort_values('Accuracy',ascending=False)	1	1
train.groupby('Sex')['Survived'].value_counts()	1	1
test_data.columns.values	1	1
data_train.dtypes	1	1
"related_people.loc[related_people[""PassengerId""]==69,""RGroup""]=""3101281"""	1	1
titanic['Ticket_lett']=titanic['Ticket_lett'].map(replacement)	1	1
"train[[""IsAlone"", ""Survived""]].groupby(['IsAlone'], as_index=False)['Survived'].agg({'Survived': ['mean','count']})"	1	1
df['Age']=df['Age'].fillna(mean1)	1	1
X_test['Fare'] = test_df['Fare']	1	1
np.round(svc_rbf.score(X_train_norm, Y_train), 4)	1	1
np.where(Df['PREULT'].shift(-1) > Df['PREULT'],1,-1)	1	1
train_df['Farecat'] = 0	1	1
train_df['SibSp'].ix[train_df['SibSp']>3] = 4	1	1
df_train.loc[:,df_train.columns!='Survived']	1	1
class_fare.loc[2,:] = df[df['Pclass'] == 2]['Fare'].describe()	1	1
data['Agebin']=pd.cut(data['Age'].astype(int),4)	1	1
df.groupby(['Sex','Pclass','Title']).aggregate(np.median).head(10)  # groub them by the features and get the median value	1	1
df.drop(labels=['Cabin'], axis=1)	1	1
g.fillna(g.mean())	1	1
tot.set_value(i,'Age',tot[tot['Pclass']==row['Pclass']]['Age'].mean())	1	1
df['Embarked'] = df['Embarked'].fillna(df.Embarked.dropna().mode()[0])	1	1
"dataset.loc[(dataset[""Age""] > 25) & (dataset[""Age""] <= 32), ""Age""] = 2"	1	1
test.to_csv( 'random_age_fare_sex_feat.csv' , index = False )	1	1
title_report['Title'],	1	1
"inDF.groupby(""Born"").size().to_dict()"	1	1
"traindat[""Embarked""].value_counts()"	1	1
womanData['Age'].median(axis=0)	1	1
features['Sex'] = full['Sex']	1	1
param.append(c)	1	1
titanic_pclass_group.apply(len)	1	1
tt['Deck'] = tt['Cabin'].apply(lambda x:x[0]) # Extract Deck by the first letter of Cabin	1	1
allset.loc[(allset['Age']>1) & (allset['Age']<=10),'AgeBand']='YoungChild'	1	1
string_list.append(string_length)	1	1
"df[""TyTicket""] = df.Ticket.str.extract('([A-Za-z])', expand=False)"	1	1
"titanic_test[""Age""]= titanic_test[""Age""].fillna(titanic[""Age""].median())"	1	1
df.loc[df.Age.isna(),'Age']=np.array(new_ages)	1	1
"axes[0].set_title(""Age vs frequency"")"	1	1
test_copy['Fare_Category'] = 1	1	1
"Y[""RGroup""]=Y[""Ticket""]+'_R'"	1	1
svm_prediction.astype(int)      #prediction compute from the test dataset	1	1
dataset['MediumF'] = dataset['Fsize'].map(lambda s: 1 if 3 <= s <= 4 else 0)	1	1
df['Embarked'] = df['Embarked'].map({'S':0, 'C':1, 'Q':2, 'X':3})	1	1
data.Age.loc[(data.Age<0) & (data.alone==1) & (data.Personal_Titles=='Technical')] =    data.Age[(data.Age>=0) & (data.alone==1) & (data.Personal_Titles=='Technical')].median()	1	1
"full[""Title""] = full[""Name""].apply(split_title)"	1	1
titanic_test['Fare'].fillna(titanic_test['Fare'].median(), inplace = True)	1	1
"row[""Embarked""] == ""S"":"	1	1
cabin[0]=='F'	1	1
X_age_dummied_test['Parch_6'] = np.zeros(len(X_age_dummied_test))	1	1
combined['Parch'].unique()	1	1
train.drop(columns='Embarked', inplace=True)	1	1
test_df.loc[(test_df.Cabin.isnull())&(test_df.Initial=='Miss'),'Cabin']='E101'	1	1
df_train.drop('PassengerId Name Ticket'.split(), axis=1, inplace=True)	1	1
df_test_features.iloc[rowin,np]=int(cn[1:])	1	1
"result_test1[""Survived""] = y_pred_neigh_rand"	1	1
test_model.head()	1	1
test_ToPred.drop(['PassengerId','Parch','Name','Ticket','Salutation'], axis=1)	1	1
titanic['familly_size'] = titanic['SibSp'] + titanic['Parch'] + 1	1	1
df_all.loc[:,numerical_col].mean()	1	1
final_test.fillna(0)	1	1
"train[""Ticket_s""] = train[""Ticket_s""].fillna(0)"	1	1
train_clean.describe()	1	1
train_df.iloc[:, [4, 14, 5]]	1	1
"df_test[""cab""].unique()"	1	1
train.drop(['S', 'Q'], axis=1, inplace=True)	1	1
np.dot(A1, parameter2) + b2     #713X1	1	1
combined['Cabin_Letter'] = combined['Cabin'].apply(lambda x: str(x)[0])	1	1
full_data.iterrows():	1	1
test_title_dummies.drop(['Mr'],inplace=True,axis=1)	1	1
"titanic[""Age""].mean()"	1	1
"train.loc[train[""Name""].str.contains(""Mr""), ""Title""] = ""Mr"""	1	1
train['c_std_s'] = np.log1p(pd.Series(c_std_scaled, index=train.index))	1	1
df['bigfam'] = np.where(df['famsize']>=5, 1, 0)	1	1
train_data.drop(columns_to_drop+['Survived'],axis=1)	1	1
"pipelines.append(( ""ScaledKNN"" , Pipeline([( ""Scaler"" , StandardScaler()),( ""KNN"" , KNeighborsClassifier())])))"	1	1
"sex[""Sex""] = (sex[""Sex""] != ""female"").astype(int)"	1	1
temp_df.loc[i, 'Deck'] = self.fill_vals.loc[temp_df.loc[i, 'Pclass']]	1	1
"titanic_df['Age'].hist(bins=100, label=""Train set"")"	1	1
test[['1Class','2Class','3Class']] = pd.get_dummies(test['Pclass'])	1	1
train['WcgAllDied'] = dataset.iloc[:train_len, -1]	1	1
"ax[0].set_title(""Age Distribution"")"	1	1
sns.boxplot(x =data[var])	1	1
train_d.drop(['Ticket','PassengerId','Cabin'],axis=1 )	1	1
full['Title'] = full['Title'].replace(['Capt','Col','Dr','Major','Rev'], 'Officers')	1	1
titanic.Name.head()	1	1
plt.hist(x = [data1[data1['Survived']==1]['Fare'], data1[data1['Survived']==0]['Fare']], stacked=True, color = ['g', 'r'], label = ['Survived', 'Dead'])	1	1
data['Surname_Survivors'] = data.apply( lambda x: max(0, survivors_by_surname_dict.get(x.Surname) - 1), axis = 1)	1	1
np.mean(y_dev == y_dev_preds_rf)	1	1
X_test['Ticket_numerical'] = pd.cut(x = X_test['Ticket_numerical'], bins=bins, include_lowest=True)	1	1
"data.set_value(i, 'Name', ""Dr"")"	1	1
train_select.head()	1	1
"result.to_csv(""mysubmission6.csv"", index=False)"	1	1
data.join(m, on='FamilyName')	1	1
test_input['Fare'].apply(lambda x: np.log(x + 1))	1	1
test['Survived'] = mlpclf.predict(test)	1	1
"result_test2[""PassengerId""] = passenger_id_test"	1	1
data_val['Survived']	1	1
training_df.iloc[:,1].values	1	1
testTitanic.drop(['Name','Ticket'], axis=1)	1	1
ship['Title_Code'].loc[(ship['Title_Code'] == 1) & (ship['Survived'] == 1)].count()	1	1
mcs_df.groupby('family_size_level').Survived.mean()	1	1
df_train['Embarked'] = pd.to_numeric(df_train['Embarked'])	1	1
combined.boxplot(column='Fare', by=['Embarked','Pclass'], figsize=(8,6))	1	1
"data5[""Survived""]=y_predict_gradient_boost"	1	1
lastname_table['Alive_dad_w_lastname'] = lastname_table['Alive_dad_w_lastname'].astype(int)	1	1
X_all['Fare'] = X_all['Fare'].fillna(X_all_3_S_median)	1	1
df['emb_C'] = pd.Series(map(lambda x: 1 if x == 'C' else 0 , df.Embarked.values))	1	1
df_train['Embarked'].value_counts().plot.bar(color=['#045FB4'], ax=ax[0])	1	1
"train_df[""Male""] = train_df.Sex.map({""male"": 1, ""female"": 0}).astype(int)"	1	1
traindf['age_nan'] = traindf['Age'].apply(lambda x: 1 if math.isnan(x) else 0)	1	1
X.loc[X['Name'].str.contains('Master')]	1	1
train.drop(['Ticket','Cabin'],axis=1)	1	1
titanic['Sex'] =='male'	1	1
df['middleFamily']=0	1	1
AL.shape[1]               # number of training examples	1	1
train['Ticket_len'] = train['Ticket'].apply(lambda x: len(x))	1	1
ship_numeric.head()	1	1
test['ExpensiveTickets'] = 0	1	1
a_deck_df.head(40)	1	1
sns.boxplot(y='Age', x=col, data= data,ax=ax[ax_cord[c]])	1	1
random.sample(list(data['Name'].values),10)	1	1
"comb_data[""TicketTrim""] = TicketTrim"	1	1
"submission.to_csv(""submision.csv"", index=False)"	1	1
c2.append(c)	1	1
dataset['AgeBand']=pd.cut(dataset['Age'],5)	1	1
train_data['Survived'].copy()	1	1
"X_train.drop(""Alone"", axis = 1)"	1	1
Data['Cabin'] = Data['Cabin'].apply(lambda x: str(x)[0] if not pd.isnull(x) else 'NoCabin')	1	1
"titanic_df.groupby(""Parch"").mean()[""Survived""].plot.bar()"	1	1
grp_by_sibling['Survived'].mean()	1	1
age_rd.drop('Age',axis=1)	1	1
testOrg['AgeGroup'] = np.where(testOrg['AgeGroup']=='Adult', 0, 1)	1	1
"test[""Cabin""][test[""Cabin""] == ""F""] = 5"	1	1
df_train.loc[61]	1	1
ax[1].set(xlabel='C', ylabel='Accuracy')	1	1
data_copy.loc[data_copy['Embarked'] == 'S', 'Embarked'] = 0 # loc is to access a gropu of rows	1	1
train.apply(lambda x: 1 if x['Pclass'] == (idx + 1) else 0, axis = 1)	1	1
model.add(Dense(9, activation='relu', input_dim=10))	1	1
data['AgeCat'] = pd.cut(data.Age,bins,labels=group_names)	1	1
train_df.groupby(['Sex', 'Pclass', 'Honorific'])	1	1
"Titanic[""Alone""] = Titanic.apply(lambda obs: 1 if np.sum(obs['SibSp']+obs['Parch']) == 0 else 0, axis=1)"	1	1
train_label.T	1	1
fem2_analysis[['PTitle','Embarked','Survived']].groupby(['PTitle','Embarked']).count()	1	1
my_res.head(15)	1	1
param_df.set_index('parameter')	1	1
feature_sets_ints_test.append([vocab_to_int[word] for word in each.split()])	1	1
train_data[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
with_age['Age'].values	1	1
"test[""Sex""].replace({""male"": 0, ""female"": 1}, inplace=True)"	1	1
dataset.loc[(dataset['FamilySize'] > 4), 'IsAlone'] = 2	1	1
"train[""Cabin""]=train[""Cabin""].fillna(""U"")"	1	1
np.round(test_pred).astype(int)	1	1
"train_data[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
train['Fam_Size']	1	1
result.to_csv('decisiontree-age-parch.csv', index = False)	1	1
titanicAll['SibSp'].describe()	1	1
train.drop(['Name', 'Survived', 'Ticket', 'Cabin'], axis=1)	1	1
submission2.to_csv('titanic-gradient_boost.csv', index=False)	1	1
"test.loc[i,""Title""] = l[1].strip()"	1	1
rf1_test.to_csv('rf1_test.csv')	1	1
tf.add(tf.matmul(L2, W3), b3)	1	1
df_final['PassengerId'].values	1	1
data[['Age']]=preprocessing.MinMaxScaler().fit_transform(data[['Age']])	1	1
train.Fare.replace(0, np.NaN)	1	1
train_df.drop(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Title', 'Ticket', 'Embarked', 'CabinChar', 'Cabin', 'noTicketRef'], axis=1)	1	1
test.loc[test['Age'] <= 15,'Age'] = 0	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Col"", ""Mr"")"	1	1
sns.boxplot(y='Fare', x='Parch', ax=ax1, data=train_df, linewidth=1, saturation=5, palette=palette7)	1	1
uniq_fsize_2.append('Single')	1	1
data.loc[(data['Fare']>=8)&(data['Fare']<15),'Fare']=1	1	1
imp.sort_values(by = 'Importance', ascending = False, inplace =True)	1	1
ax[3][1].hist(nonsurvivors['SibSp'].dropna().tolist(), bins=nbins)	1	1
train_data['Family_Size']=train_data['SibSp']+train_data['Parch']+1	1	1
final_test.iloc[:,cols-1:cols]	1	1
all_soft_preds.loc[X_test.index, :]	1	1
train_final.keys():	1	1
df['Ticket'].notnull().mean()	1	1
scale.transform(X_test5)	1	1
data_test.Age.hist()	1	1
model.add(Dense(output_dim = neurons_layer_2, init='uniform', activation='relu'))	1	1
"train_data[""Salutation""].value_counts(normalize=True)"	1	1
missing_data1.drop(['Age'],axis=1)	1	1
combine['Deck'] = combine.Deck.astype('category')	1	1
"age[""Between45And60""] = ((age[""Age""] >= 45) & (age[""Age""] < 60)).astype(int)"	1	1
"df['title'] = df['Name'].apply(lambda x: x.split("","")[1].split(""."")[0].strip())"	1	1
params_init['sub_feature'] = 0.5	1	1
data_train['Survived'].loc[data_train['Embarked']=='S'].value_counts()	1	1
"train[""title""] = [i.replace('Sir', 'rare') for i in train.title]"	1	1
df['CabinCat'] = pd.Categorical.from_array(df.Cabin.fillna(0)).codes	1	1
submission['Survived']= Y_pred1	1	1
"X[[""Pclass""]]"	1	1
submission_file['PassengerId'] = test_passengers	1	1
train_df.groupby('Ticket').size().sort_values(ascending=False).head()	1	1
dataset.loc[(dataset.Deck.isnull()) & (dataset.Ticket == ticket),'Deck'] = guess_deck	1	1
testdata['Age'].dropna().astype(int)	1	1
df_train['Sex'].apply(lambda x: x.count('female')).sum()	1	1
data.loc[(data['Age'] > 53) & (data['Age'] <= 66), 'SortAge_1'] = 4	1	1
dataset.loc[ dataset['Age'] <= 16, 'Age']= 0	1	1
y_dev.shape	1	1
train_df['Unvan'] = train_df['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	1	1
train_recoded.info()	1	1
"train_df[""Sex""] = train_df[""Sex""].map({""male"": 0, ""female"": 1})"	1	1
clfs.append(LogisticRegression(random_state=seed))	1	1
train_data.set_value([62, 830], 'Embarked', 'S');	1	1
dataset.loc[(dataset['Age'] == -1) &(dataset['Title'] == 'Master'), 'Age'] = 4.57	1	1
x_test['Title_Miss'] = test_df['Title'].apply(lambda x: 1 if x == 'Miss' else 0)	1	1
"train.loc[(train[""Name""]==""Mr"")&(train[""Age""].isnull()), ""Age""] = train.loc[train[""Name""]==""Mr"",""Age""].mean()"	1	1
Prediction['SVC'] = svc_pred	1	1
df['Sex']=df['Sex'].apply(lambda x : 0 if x=='male' else 1)	1	1
test_X['Age'] = scaler.fit_transform(test_X['Age'].values.reshape(-1,1))	1	1
input_test_data.loc[:,['PassengerId','Survived']].values	1	1
"data[""SibSp""],"	1	1
"pd.isnull(testingset[""Fare""][x]):"	1	1
"testdat.drop(""Name"",axis=1,inplace=True)"	1	1
ada_feat_red.transform(ada_red_train)	1	1
data.drop(['Age','Fare'],axis=1)	1	1
fs.append(f[f.Title == k].Survived.sum())	1	1
combined_features.head(891).groupby(['Sex','Pclass','Title'])	1	1
"test_set.drop(""PassengerId"", axis=1).copy()"	1	1
dummy_train_df.values	1	1
train.drop(['male'],axis=1)	1	1
"train_data[""Embarked""]=train_data[""Embarked""].astype(int)"	1	1
"input_data[""pclass_2""] = input_data[""Pclass""].apply(lambda x: int(x == 2))"	1	1
Age_range_test.append(age_range_test)	1	1
"X_test[""Title""] = test_data[""Title""]"	1	1
df.join(df1)	1	1
dataframe.drop(['PassengerId','Name','Ticket','Embarked','Cabin'], axis=1)	1	1
"df_real_test[""Survived""] = predict"	1	1
data_train.drop(['SibSp'], axis=1)	1	1
train['Sex'] = train['Sex'].apply(sin_bin)	1	1
dataset.describe(include=['O'])	1	1
data['Title'] = data['Title'].replace(['Dr', 'Rev', 'Major', 'Col', 'Lady', 'Sir', 'Don', 'Capt', 'Jonkheer', 'Countess', 'Dona'], 'Rare')	1	1
X_train.drop(['Survived', 'ages'], axis=1, inplace=True)	1	1
Title_Dict.update(dict.fromkeys(['Mme', 'Ms', 'Mrs'], 'Mrs'))	1	1
full_models['set2']['cat_encode'] = 'OneHot'	1	1
train_bfe.drop(columns=train_bfe.columns[index_deleted]).head(3)	1	1
allset['Salutation'] = allset['Salutation'].replace('Mme', 'Mrs')	1	1
titanic.drop(['Cabin'], axis=1, inplace=True)	1	1
df[['male','Survived']].groupby('male').mean()	1	1
tr['Title']='Sir'	1	1
df[['SibSp', 'Age']].groupby(['SibSp']).std()	1	1
train.groupby('Embarked')['Pclass'].count()	1	1
output.to_csv('Titanic-predictions.csv', index = False)	1	1
train.loc[train['EmbarkedModified'] == 'C', 'EmbarkedCategorical'] = 1	1	1
data_encode['Cluster'] = cluster_map_data['cluster']	1	1
"dataframe[""Age""].mean()"	1	1
test['Cabin'] = test['Cabin'].apply(lambda x: replacement.get(x))	1	1
testData.copy()	1	1
train_set.drop('Name', axis = 1, inplace = True)	1	1
"df[""Age""] = df[""Age""].fillna(-0.5) #Some age values are missing. We fill -0.5 these NaN values."	1	1
test_data[['PassengerId', 'Survived']].to_csv('titanic_RandomForest_GridSearch-Final.csv', index=False)	1	1
titanic_df.loc[titanic_df['FamilySize'] == 0, 'Alone'] = 1	1	1
"data[""Survived""].corr(data[""Title""]),"	1	1
"test_data[""Survived""] = pd.Series([])"	1	1
"i[""Name""]"	1	1
"train_df[['FirstName', 'LastName', 'Survived']][train_df['LastName'].str.endswith(""ff"")].head()"	1	1
df['Fare']=df['Fare'].fillna(7.71)	1	1
allset['AgeBand']=pd.cut(allset['Age'],4)	1	1
df_data['Singleton'] = (df_data['Family'] == 1).astype(int)	1	1
data_train.Embarked.fillna(value=0,inplace=True)	1	1
dataset.loc[dataset.Fare.isnull(), 'Fare'] = dataset.groupby('Pclass').Fare.transform('median')	1	1
test_df['TitleKey'] = 0	1	1
test.loc[test['Sex']=='female','Gender']=1	1	1
x_train['Sex'] = le.fit_transform(x_train['Sex'])	1	1
tf.round(tf.sigmoid(Za3))	1	1
titanic['Age'][(male)&(Pclass1)&Family1] = titanic['Age'][(male)&(Pclass1)&Family1].fillna(34)	1	1
data['FareGroup'] = data['Fare'].apply(fare_group)	1	1
test.loc[(test['Fare']>250) & (test['Fare']<=300),'FareCategorical'] = 5	1	1
X_valid.head()	1	1
transformed_df['Embarked_Q'] = embarked.Embarked_Q	1	1
train_df_numerical.head()	1	1
temp.loc[oldmissmask, 'Age'] = 26	1	1
df['Gender']=1 #Adding one colomun	1	1
age_set['Age']	1	1
df.loc[df.FamilySize==df.FamilySize.max(),['Name','Survived','FamilySize','Ticket']]	1	1
test_df['PassengerId'].copy()	1	1
test['Title'] = title_arr	1	1
titanic_df['SmallF'] = titanic_df['Family'].map(lambda s: 1 if  s == 2  else 0)	1	1
"train_data.drop([""PassengerId"", ""Cabin"", ""Ticket""], axis = 1)"	1	1
all_data.drop(['Ticket', 'Cabin'], axis = 1)	1	1
df.Cabin.apply(lambda x: x[0]) #Replace with the first letter	1	1
data.Title.str.replace('Mra', 'Mrs')	1	1
train2_df['FamilySize'] = train2_df['SibSp'] + train2_df['Parch'] + 1	1	1
test_data['Title'] = test_data['Title'].replace('Ms.','Miss.')	1	1
submission.to_csv('submission_ensemble_voting.csv', index=False)	1	1
df.Embarked.isnull().sum(axis=0)	1	1
titanicDF.iterrows():	1	1
df['Sex'] = -1	1	1
frame.Embarked.fillna(frame.Embarked.median(),inplace=True)	1	1
test_try.sample(5)	1	1
train_df.drop(['PassengerId'], axis = 1, inplace = True)	1	1
data.loc[(data['Age']>32) & (data['Age']<=48), 'Age_band'] = 2	1	1
MLA_predict.head(10)	1	1
new_data.fillna(0, inplace=True)	1	1
dataset.drop(['Age','Name', 'Cabin'],axis=1,inplace=True)	1	1
frame.loc[~frame.Ticket.isin(n_ticket.index),'n_ticket']=0	1	1
dataTest.drop('Name', axis = 1, inplace = True)	1	1
y.sum()/len(y)	1	1
data_no_nan['Sex'] = data_set['Sex'].fillna('female')	1	1
df_data['FareBin_6'] = pd.qcut(df_data['Fare'], 6)	1	1
"train[""Age""][train_na] = impute_age_train"	1	1
dataset.loc[(dataset['Familysize'] > 2.5) & (dataset['Familysize'] <= 5.0), 'Familysize_cat'] = 1	1	1
df_train['FareAvg'] = df_train['Fare'] / df_train['FamilySize']	1	1
"df1.replace([""male"", ""female""], [0,1])"	1	1
submit.to_csv('RF_submission.csv', index = False)	1	1
mscores2.append(np.mean(scores))	1	1
"train.loc[(train[""Age""]>64) & (train[""Age""]<=80),""Age""]=4"	1	1
dataset['IsAlone'] = 1 #初始化为1	1	1
train.at[i, 'Age'] > j:	1	1
df.groupby(['Pclass'])['Age', 'Fare'].mean()	1	1
test_dataset.loc[(test_dataset['Age'].isnull()) & (test_dataset['Title']=='Mr'),'Age'] = 33	1	1
"ship['Family'] =  ship[""Parch""] + ship[""SibSp""] # Adding together Parch and SibSp columns"	1	1
data.loc[(data.passenger_fare<7.65) & (data.passenger_fare>=7.225) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Number'] =  data[(data.passenger_fare<7.65) & (data.passenger_fare>=7.225) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Number.min()	1	1
Test['caB'] = Test['Cabin'].map({'A':0,'B':1,'C':0,'D':0,'E':0,'F':0,'G':0,'T':0,'U':0}).astype(int)	1	1
train5['IsAlone'] =  1	1	1
train_test['Low_SibSp']=0	1	1
dfTest['Fare'] = dfTest['Fare'].fillna(dfCombined['Fare'].mean())	1	1
titanic_train_test_merged['Embarked_cat']=titanic_train_test_merged['Embarked'].cat.codes	1	1
ohe.transform(df_train[feature].values.reshape(len(df_train[feature]), 1))	1	1
data['Title'] = data['Title'].map(mapping)	1	1
"row[""Embarked""] == ""Q"":"	1	1
np.round(sigmoid(scores),0)	1	1
np.where(preds >= 0.5, 1, preds)	1	1
train.loc[(train['Fare']>100) & (train['Fare']<=150),'FareCategorical'] = 2	1	1
"test[""eval_tree""] = my_tree.predict(test[features_names].values)"	1	1
df['Cabin_letter'] = df['Cabin'].str[0]	1	1
train.iloc[:,[1]].values	1	1
"df[""Fare""] = df.groupby(['Sex','Pclass','Title'])['Fare'].transform(lambda x: x.fillna(x.median()))"	1	1
df.Sex.fillna('N')	1	1
train.join(Pclass_dummies)	1	1
train.groupby('Embarked').Survived.mean().plot(kind = 'bar')	1	1
train['Age1'] = train['Age'].apply(combine_age)	1	1
dataset['EditedAge'][rowIndex] <= 10:	1	1
test_df['LargeF'] = test_df['Family'].map(lambda s: 1 if s >= 5 else 0)	1	1
plt.rcParams['figure.figsize'] = (8, 6)	1	1
"combined.loc[staff,""isCrew""] = 1"	1	1
train['Age'] = train[['Age', 'Pclass']].apply(substitution, axis = 1)	1	1
"test_df[""age_category""] = pd.cut(test_df[""age""], 6)"	1	1
full['FamilySize'] = full['SibSp'] + full['Parch'] + 1	1	1
dataset['Title_Master'] = dataset['Title'].map(lambda s: 1 if  s == 4  else 0)	1	1
"sns.boxplot(x=""Pclass"", y=""Age"", hue=""Survived"", data=train, palette=""PRGn"")"	1	1
data['Title'] = data['Title'].replace(['Don', 'Capt', 'Col', 'Major', 'Sir', 'Jonkheer', 'Rev', 'Dr'], 'Honor')	1	1
result['Survived'] = optimized_xgb.predict(Xp).T.astype(int)	1	1
df.Cabin.fillna(8,inplace=True)	1	1
titanic_test.groupby('Title').count().PassengerId.plot.bar()	1	1
df['Title'] != 'Master'	1	1
"new_df.SibSp.astype(""int"")"	1	1
trainset.drop(trainset.columns[[0, 3, 8, 10, 11]], axis=1, inplace=True)	1	1
data['tick_length']=ticklength	1	1
df_train.name.apply(lambda x: x.split('.')[0].split(',')[1])	1	1
titanic.head(40)	1	1
"train['Fare_Groups2'] = train['Fare_Groups'].astype(""object"") # Need this conversion for heatmap to work"	1	1
X[ 'Cabin' ] = X.Cabin.fillna('U')	1	1
"data[""LastName""] = train[""Name""].str.split("","", expand=True)[1].str.strip()"	1	1
WholeDataSet.drop('Cabin', axis=1, inplace=True) # too many data missing in the dataset	1	1
"coeff_df.sort_values([""Coefficient Estimate""], ascending=False)"	1	1
testset.Ticket.apply(str_freq)	1	1
fill_age_df['Title'].replace(to_replace='Mme', value='Mrs', inplace=True)	1	1
st.drop(['male'],axis=1)	1	1
in ['S','C','Q']:	1	1
train_csv.loc[:, 'Age_dummy'] = pd.cut(train_csv.Age, 40, labels=range(1, 41))	1	1
allset.loc[ (allset.Age.isnull()) & (allset.Sex == Sex) & (allset.Pclass == Class) & (allset.Salutation == Salutation),'Age'] = AgeGroup.loc[(AgeGroup.Sex==Sex) & (AgeGroup.Pclass==Class) & (AgeGroup.Salutation==Salutation),'Age'].values[0]	1	1
kaggle_df['Survived'] = predictions	1	1
"test_data_1.loc[test_data_1.Age >= 18,""Child_col""] = ""Adult"""	1	1
X.assign(**{self.column_name: y})	1	1
"total_result.loc[alone_in_test, ""Survived""] = (total_result.loc[alone_in_test,  [""KNN"",""GBT"",""RF""]].sum(axis=1) == 3).astype(int)"	1	1
"df[""hasFamily""] = 0"	1	1
X_dummy.drop(['Sex_male','Embarked_S'],axis = 1, inplace=True)	1	1
stacked_models_df['gbm'] = gbm.predict(x_train)	1	1
hist[1]	1	1
"train_df[""family_members""] =  train_df[""Parch""] + train_df[""SibSp""]"	1	1
params['reg_lambda'] = grid.best_params_['reg_lambda']	1	1
data_train_dummy2['Fare_scaled'] = std_scaler.fit_transform(reshape_Fare2, std_scaler_Fare2)	1	1
df.loc[((df.IsAlone == 0) & (df.Pclass == 3)) , 'Cl_IA'] = 6 #poor with family	1	1
"cabin_only.drop([""Cabin"", ""Cabin_Data""], axis=1, inplace=True, errors=""ignore"")"	1	1
"train.loc[train[""Embarked""] == ""S"", ""emk_c""] = ""0"""	1	1
"dataframe.loc[dataframe[""Sex""] == sex]"	1	1
all_data.at[i,'Sex']= sex_mapping[all_data.loc[i].at['Sex']]	1	1
dataset['Title']   =   dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
test_data.drop(['Ticket'], axis=1)	1	1
x_test['Age'].mean()	1	1
test.iloc[:,1:test.shape[1]].values #bağımsız değişkenler	1	1
"full_df[""Age""].mean()"	1	1
plt.hist(np.log10(df.Fare + 0.1), bins=45)	1	1
X_valid_norm.iloc[:,:].values.astype('float');	1	1
train['Age'].fillna(age_fill2_t,inplace=True)	1	1
Data['Title2'] = Data['Title2'].astype('category').cat.codes	1	1
all_data['LastNameFreq'] = all_data['LastName'].map(lastname_dict)	1	1
titanic_decks.append(titanic_deck)	1	1
train_df[['FareBand', 'Survived']].groupby('FareBand', as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
"train[""Name""].head(10)"	1	1
train['Embarked'].fillna(train['Embarked'].mode()[0] ,inplace=True)	1	1
"titanic_df.drop([""Fare"", ""Q"", ""Class2"", ""Class1"", ""C"", ""S"", ""Class3"", ""Parch""], axis = 1, inplace=True)"	1	1
data.Embarked.replace(['C', 'S', 'Q'], [0, 1, 2])	1	1
scaled_X_train.head()	1	1
train_data.sample(15)	1	1
data['Sex']=data['Sex'].apply(lambda x : 1 if x=='male' else 0 )	1	1
model.add(Dense(16, input_shape=(nb_features,), activation='tanh'))	1	1
ticket_table['Dead_kid_on_ticket'].fillna(0, inplace=True)	1	1
self.add(layers.Dense(Nout, activation='softmax'))	1	1
X.shape, Y.shape	1	1
"train_data[""YoungAdult""] = 0"	1	1
train.Age.fillna(np.mean(train.Age), inplace = True)	1	1
titanic.info()  # Overview of dataset features	1	1
train['Pclass'][train['Survived']==0].value_counts().sort_index()	1	1
grp_df['Age'].max()	1	1
curr_row[0][7]	1	1
"processed_features[""FamilySize""] = dataframe[""SibSp""] + dataframe[""Parch""]"	1	1
dataset.loc[ dataset['Age'] > 70, 'Age'] = 7	1	1
"titanic_test[""Sex""] =titanic_test.Sex.apply(f)"	1	1
"train_df[""Name""]"	1	1
one_hot_encoded_training_predictors.drop(corln_col,axis=1)	1	1
"sub.to_csv(""titanic_submission_kn.csv"", index=False)"	1	1
data_train.drop(['Name','Ticket'],axis=1)	1	1
"total_result.loc[family_in_test, ""Survived""]= (total_result.loc[family_in_test,  fml_algs].sum(axis=1) >= n_algs -1).astype(int)"	1	1
"test_df[""IsAlone""] = test_df.apply(isAlone, axis = 1)"	1	1
dataset['train_y_']	1	1
train_dataset.loc[(train_dataset['Age'].isnull()) & (train_dataset['Title']=='Mr'),'Age'] = 33	1	1
predictions.to_csv('submission.csv', index=False)	1	1
"sns.boxplot(x=""Embarked"", y=""Age"", hue=""Sex"", data=titanic_train)"	1	1
"test_mod.drop(""PassengerId"", axis = 1)"	1	1
test_set['Gender'] = test_set['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
"test_df[""Sex""]=test_df[""Sex""].replace(""male"",0).replace(""female"",1)"	1	1
W.dot(A) + b              # Linear activation of the output layer	1	1
t_data['Name_pred'] = t_data['Name_pred'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dr', 'Jonkheer',                                                  'Lady', 'Major', 'Rev', 'Sir'], 'Other')	1	1
"dat.loc[dat[""Sex""]==""female"",""Sex""]= 1"	1	1
df.Fare.min()	1	1
data['FamilyName_Code'] = family_name_label.fit_transform(data.FamilyName)	1	1
"train[""Cabin""]=train[""Cabin""].map(lambda x: x[0])"	1	1
df_train['Pclass'], pos, points=20, widths=0.3,	1	1
train_df.drop(['Sex','Age'], axis = 1, inplace=True)	1	1
test_data.loc[test_data.Fare.isnull()]	1	1
"train_data[""Title""] = train_data[""Title""].apply(rare_title)"	1	1
cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() / len(df_train[df_train['Age'] < i]['Survived']))	1	1
"submission.to_csv(""dtree_submit2.csv"", index=False)"	1	1
test['Fare'] = round(test['Fare'], 1)	1	1
row['Pclass'] == x:	1	1
full_data.loc[full_data.Embarked.isnull(), :]	1	1
data['Alone']  = data['Family'].apply(lambda x: 1 if x == 1 else 0)	1	1
X_train[0:5]	1	1
test_data.drop(['Embarked'], axis=1)	1	1
train.drop('PassengerId',axis=1)	1	1
data.loc[data.Survived>=0, cols].copy()	1	1
df.append(df_test, sort=False)	1	1
df_pred['Survived'] = df_pred.Survived.astype(int)	1	1
dt_train['Age'].fillna(dt['Age'].median(skipna=True), inplace=True)	1	1
re_train.shape	1	1
test['Title'].replace(['Countess','Dona','Lady'], 'Mrs', inplace = True)	1	1
data[['Pclass', 'Age', 'SibSp', 'Parch']]	1	1
data['FamilySizeBin_Code'] = le.fit_transform(data['FamilySizeBin'])	1	1
test7['Sex'] = le.fit_transform(test7['Sex'])	1	1
titanic.loc[train.index].plot(x='Age',y='Survived',c='Pclass',cmap=cm.hot,kind='scatter',figsize=(10,5))	1	1
titanic_test_df['Child'] = titanic_test_df['Agecat'].apply(child)	1	1
titanic['Embarked']=df_train['Embarked'].fillna('NA')	1	1
train_d[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
grid.best_params_['penalty']	1	1
tr['Title'] =tr['Title'].replace('Capt',5)	1	1
titanic.loc[(titanic['Age']>40.00)&(titanic['Age']<=81.00),'NAge']=4	1	1
"titanic[""Room""] = titanic[""Cabin""].str.slice(1,5).str.extract(""([0-9]+)"", expand=False).astype(""float"")"	1	1
df_train.loc[df_train['Fare'].isnull(), 'Fare'] = fare_median	1	1
test_copy.loc[test_copy['Pclass'] == 2, 'Pclass_Category'] = 1	1	1
train_X['Unmarried_female'] = train_X['Name'].apply(is_a_miss)	1	1
train.drop(['AgeBin', 'FareBin'], axis=1)	1	1
"train_df.loc[train_df[""Title""] == ""Ms"", ""Title""] = 'Miss'"	1	1
df['Title'] = df['Title'].map(normalized_titles)	1	1
data.append(test)	1	1
df.Embarked.fillna('X')	1	1
train['Fare'].describe()[['min','25%','50%','75%','max']]	1	1
dfTrain['Ticket_Spaces'].value_counts()	1	1
test.loc[(test.Age.isnull())&(test.Initial=='Mr'),'Age']=33	1	1
train_imputed['withfamily'].unique()	1	1
train_filt_df.head()	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Major', 'Rare')	1	1
"df[""LargeFamily""] = df[""FamilySize""] >= 5"	1	1
"train.loc[ix[0],""Embarked""] = 'S' #since the number of S is the most we will fill the NaN values with S"	1	1
full_set['Title'] = full_set['Name'].apply(get_title)	1	1
train.loc[(train['Fare']>250) & (train['Fare']<=300),'FareCategorical'] = 5	1	1
"total[[""Age""]]"	1	1
input_train.info()	1	1
X_train.shape , Y_train.shape, X_val.shape, Y_val.shape	1	1
dt.loc[(dt['Fare']>=7.91) & (dt['Fare']<14.45),'Fare']=1	1	1
fill_age.append(round(age_summary.xs([row['Sex'], row['Pclass']])['mean'],0))	1	1
"train.insert(value=train.Name.map(lambda name: name.split("","")[1].split(""."")[0].strip()),loc=12,column=""Title"")"	1	1
"dftest.loc[idx,""CountTicketButLast_InTrain""]=(ticketButLast_count_train[ticketButLast])"	1	1
full_df[ 'Family_Single' ] = full_df[ 'Family' ].map( lambda s : 1 if s == 1 else 0 )	1	1
"train.loc[train[""Title""] == ""Miss""].mean()[""Age""]"	1	1
dataset.Cabin.isnull()	1	1
test[['PassengerId','y_hat']]	1	1
data['Age'].isnull().any()	1	1
Y_tot.loc[ntr:ntr+ncv-1]	1	1
titanic_df.drop(['PassengerId', 'Ticket', 'Cabin', 'Embarked', 'Name'], axis = 1, inplace = True)	1	1
"DataSetTrain[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
df.loc[((df.MisAge == 0) & (df.Pclass == 1)) , 'MA_Cl'] = 1 #rich with age	1	1
submission.to_csv('output_model_RF.csv', index=False)	1	1
testingset.drop(['Ticket'],axis=1)	1	1
train_X.drop(['Pclass','Sex','Embarked'],axis=1)	1	1
history.history['val_acc']	1	1
train.drop(['Survived'], axis=1),	1	1
row['Title']	1	1
test[['Age']]	1	1
tt.loc[tt['Surname'] == 1,'alone_NoSameSurname_members'] = 0 # alone	1	1
df_full['SibSp'] + df_full['Parch']	1	1
"test[""Sex""] = test[""Sex""].astype(int)"	1	1
"i[""TicketCount""] = i.groupby([""Ticket""])[""Title""].transform(""count"")"	1	1
"train[[""Embarked"", ""Survived""]].groupby(['Embarked'], as_index=False).agg(['mean', 'count'])"	1	1
"titanic_df[""Fare""] = titanic_df[""Fare""].fillna(na_number)"	1	1
train_Predict['Sex'] = train['Sex'].apply(sex_binary)	1	1
full.drop(['Embarked', 'Name'], axis = 1, inplace = True)	1	1
train_df['Name']=train_df['Name'].map(lambda x: x.split(' ')[1])	1	1
titanic_test_df['Title'] = titanic_test_df.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
titanic_train.loc[test_index]	1	1
rcParams['axes.grid'] = False	1	1
plt.hist(x=train.Age[train.Pclass==1].dropna())	1	1
df_tmp.set_index('Title') #set Title ให้เป็น index	1	1
full_df['Title_Num'] = full_df['Title'].map( {'Mrs': 0, 'Miss': 1, 'special_title':2, 'Master':3, 'Mr':4} ).astype(int)	1	1
df['Cabin'] = df['Cabin'].fillna('Z')	1	1
X_test.transpose();	1	1
test.drop('Name',1,inplace=True)	1	1
df_surname.rename(columns={'surname':'SurnameMembers'}, inplace=True)	1	1
sns.boxplot(x='Pclass',y='Age',data=test_df)	1	1
scalar.transform(Xi)	1	1
result.to_csv( 'titanic_pred_cleuton.csv' , index = False )	1	1
"train_final.drop(""Survived"", axis=1).fillna(0.0)"	1	1
df_output.to_excel(writerxls,'Sheet1')	1	1
df[['Age','Fare','Parch','SibSp']] = (df[['Age','Fare','Parch','SibSp']] - df[['Age','Fare','Parch','SibSp']].mean(axis=0))/df[['Age','Fare','Parch','SibSp']].std(axis=0)	1	1
dataset['FareBin'] = pd.qcut(dataset['Fare'], 5,labels=[1,2,3,4,5])	1	1
"test_set[""Embarked""] = StandardScaler().fit_transform(test_set[""Embarked""].values.reshape(-1,1))"	1	1
"new_data[""Fare""] = fill_na_with_mean(new_data, ""Fare"")"	1	1
torch.sum(torch.round(F.sigmoid(outputs.data)) == Survived.data)	1	1
data_no_nan['Age'] = data_set['Age'].fillna(data_set['Age'].median())	1	1
Test['gender'] = Test['Sex'].map({'female':0,'male':1}).astype(int)	1	1
df['Sex'] = df['Sex'].map( {'female': 1, 'male': 2} ).astype(int)	1	1
test['Age']=test[['title', 'Sex','Age']].apply(newage, axis=1)	1	1
rf_model['CVScore'],	1	1
combine_df['Title'] = combine_df['Name'].apply(lambda x: x.split(', ')[1]).apply(lambda x: x.split('.')[0])	1	1
dataset['Ticket']	1	1
test_dataset.loc[(test_dataset['Age']>64),'Age']=4	1	1
"processed_features.drop(""Ticket"",axis=1)"	1	1
axes[0].set_ylabel('Count')	1	1
combined.iloc[891:].Age.isnull().sum()	1	1
submission.to_csv('../working/simple_submission.csv')	1	1
"result.to_csv(""DecisionTree_tuned_Param_RFE.csv"", index = False)"	1	1
ship.drop(['Person'],axis=1,inplace=True)	1	1
ax.boxplot(results)	1	1
total_MAE.loc[i] = MAEs	1	1
train_df['FareBand'] = pd.qcut(train_df['Fare'], 3)	1	1
test_data['hasCabin'] = test_data.Cabin.notnull().astype(int)	1	1
dset['Age'].fillna(dset['Age'].median(), inplace=True)	1	1
df.to_csv('lr_svd_submission.csv', sep=',')	1	1
cat_pipe.append(('Family_total', Family_total))	1	1
titanic_data.Age.isnull().sum()	1	1
"test[""Sex""] = test[""Sex""].map({""male"":1,""female"":0})"	1	1
data_train.loc[(data_train.Age.isnull()),'Age'] = predictedAges	1	1
titanic_df['Class'] = titanic_df.Pclass.map({1:'1st Class',2:'2nd Class',3:'3rd Class'})	1	1
train['Pclass1'] = train['Pclass']	1	1
full['Surname'] = full['Name'].apply(lambda name:name.split(',')[0])	1	1
train_data.copy(deep=True)	1	1
"sub['PassengerId'] = X_test[""PassengerId""]"	1	1
train['Survived'].values.reshape(len(train), 1)	1	1
data['Initial'] = data.Name.str.extract('([A-Za-z]+)\.')	1	1
"train_data[""Fare""].mean()"	1	1
titanic_dmy.ix[:,0].values	1	1
test2_df['IsAlone'] = np.where(test2_df['FamilySize']==1, 1, 0)	1	1
test_first_model['Survived'] = predicted_survivors	1	1
test.values # Creats an Numpy array of the test data	1	1
ship_numeric.loc[:, col + '_was_missing'] = ship_numeric[col].isnull()	1	1
"data_test[""SibSp""] + data_test[""Parch""] + 1"	1	1
results.append(0.5 * (entropy(_P, _M) + entropy(_Q, _M)))	1	1
train_data.groupby(['Pclass', 'Sex', 'Survived']).size()	1	1
df.drop('PassengerId', axis = 1, inplace = True)	1	1
"df_train['Name'].map(lambda x: x.split(',')[0].lower()).value_counts().reset_index().rename(index=str, columns={""index"": ""_Name"",""Name"": ""counts"" })"	1	1
test_set.drop('Ticket', axis = 1, inplace = True)	1	1
combine.ix[(combine.Pclass==2)&(combine.Cabin.isnull()),'Cabin'] = np.random.choice(['D','E','F'])	1	1
sns.boxplot(x='Pclass', y = 'Age', data =train)	1	1
titanic_p.loc[(titanic_p['Ptype']=='child') & (titanic_p['family']=='without family')]	1	1
"df.to_csv(""{}.csv"".format(label),header=True,index=False)"	1	1
train_data['TAlone']=[0 if (train_data['SibSp'][i]+train_data['Parch'][i])>0  else 1  for i in range(len(train_data)) ]	1	1
fare_df.dropna().as_matrix()	1	1
test_result.T[0]	1	1
X2test['Embarked'][i] = 0	1	1
"train_df.groupby([""Cabin_prefix"",""Pclass""])[""Pclass""].agg([""count""]).reset_index()"	1	1
train_df.drop('Parch', axis=1, inplace=True)	1	1
df['Embarked']=df['Embarked'].fillna('s')	1	1
combined_df['Prefix'] = combined_df['Name'].apply(extract_prefix)	1	1
testdata['FareCategory']=0	1	1
data_one_hot.drop(labels = ['Sex_female'], axis = 1)	1	1
ax[0].set_title('Embarked vs Survived')	1	1
train_df['GenderPclass'] = train_df['Pclass'] - train_df['Gender'] + 1	1	1
axis2.spines['left'].set_linewidth(lw)	1	1
"df_data[""Free""] = np.where(df_data['Fare'] ==0, 1,0)"	1	1
hf['X_val'].value	1	1
"data[""Name""].unique()"	1	1
data['HasCabin']=1	1	1
test['Embarked'] = test[['Embarked','Pclass']].apply(embarked_enumerator,axis=1)	1	1
row['Age'] <= 6.5 and row['Pclass'] <= 2.5:	1	1
data.loc[(data['title']==title) & (data['Fare'].isnull()), 'Fare'] = data.groupby('title')['Fare'].median()[title]	1	1
df[['Pclass', 'Fare']].groupby(['Pclass']).mean()	1	1
Y.drop(col, axis=1)	1	1
dfTrain['Ticket_FirstLetter'].value_counts()	1	1
dfcopy.Parch.isnull().sum() == 0	1	1
data['Age'] = data.Age.astype(int)	1	1
train_df.replace(to_replace, None, 'Title')	1	1
df['SexN'].replace({'male': 0, 'female': 1},inplace=True)	1	1
m.rename(columns={'Survived': 'FamilySurvived'})	1	1
torch.eq(y_val, y_val_pred.round_()).cpu().float().mean().data[0]	1	1
all_data.drop(columns=['Cabin'], axis=1, inplace=True)	1	1
full['_AgeCategory'] = full['AgeCategory'].cat.codes # Add column with range of Age	1	1
train2.drop(['Cabin', 'Ticket'], axis = 1)	1	1
final_X.head(2)	1	1
train.dtypes.value_counts()	1	1
classifiers.append(ExtraTreesClassifier(random_state=seed))	1	1
train['Child'] = [1 if i<10 else 0 for i in train.Age]	1	1
df_test['Embarked'].fillna(df_test['Embarked'].value_counts().index[0], inplace=True)	1	1
train_df['FareCategorical'].value_counts()	1	1
titanic_test['Age'].fillna(titanic['Age'].median(), inplace = True)	1	1
"X_train[""Age""] = X_train[""Age""].astype(int)"	1	1
dataset.loc[dataset['GroupSize'] == 1, 'GroupSize'] = 0	1	1
dataset.loc[(dataset['Fare'] > 10) & (dataset['Fare'] <= 40), 'Fare'] = 2	1	1
"all_data[""hasCabin""] = (all_data[""Cabin""].notnull().astype('int'))"	1	1
transformed_df['Title_Master'] = title.Title_Master	1	1
"combined.loc[f_member,""family_role""] = ""Mother"""	1	1
"miss_tab.rename(columns={0: ""Missing values"", 1: ""Missing value %""})"	1	1
"test[""FamilySize""] = test[""Parch""] + test[""SibSp""] + 1"	1	1
data_pca.values	1	1
train_copy.loc[train_copy['Fare'] <= 7.9104, 'Fare_Category'] = 0	1	1
dataset['AgeBin'] = pd.cut(dataset['Age'].astype(int), 6)	1	1
submission.to_csv('Submit.csv', index = False)	1	1
test_data_only_first_class_female_Cherbourg_age.ix[~(test_data_only_first_class_female_Cherbourg_age['Age'] == age)]	1	1
test_df['Initial'].replace(['Ms','Dr','Col','Rev','Sir','Dona'],['Miss','Mr','Other','Other','Mr','Other'],inplace=True)	1	1
missing_data['Type'] = long	1	1
"datacv.set_value(i, 'Name', ""Sir"")"	1	1
"train[[""Age_group"", ""Survived""]].groupby(['Age_group'], as_index=False)['Survived'].agg(['mean','count'])"	1	1
dataset['Embarked'] = dataset['Embarked'].fillna('S') # Fill it with the Mode	1	1
sub.to_csv('minimalistic.csv', index = False, float_format='%1d')	1	1
ax[1].set_title('Survival Rate by Sex')	1	1
dataset['Shared_ticket'] = 3	1	1
raw_train_data.describe()	1	1
train7['Embarked'] = le.fit_transform(train7['Embarked'])	1	1
all_arr.set_value(nan_v, feature, imp_val)	1	1
Xmat['Fare'] = Xmat['Fare'].fillna(Xmat['Fare'].mean())	1	1
numerical_columns.append('Frugal_First_Class_Single_Man')	1	1
data['Cabin1stClass']= data.apply(cabin1stclass,axis=1)	1	1
imputer.transform(X_oh_test)	1	1
dataset.groupby([c1, c2]).size()	1	1
dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\.',expand=False)	1	1
dataset.loc[dataset['Fare'] <= 17,'Fare'] = 0	1	1
final_train['Survived'].tolist()	1	1
syn[0] += X.T.dot(l1_delta)	1	1
gender_data.head()	1	1
"train_df.pop(""Ticket"")"	1	1
acc_voting.mean()	1	1
"df_test['Minor'] = df_test[""Age""].apply(is_minor)"	1	1
df.pivot_table(values = 'Age', index = ['Pclass', 'SibSp'], aggfunc = 'median').Age.plot.bar()	1	1
"test.drop(""Embarked"", axis=1)"	1	1
test['Embarked'] = test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} )	1	1
titanic_train_dataset_for_training_step.iloc[:, 1:]	1	1
df.loc[:, self.column_names] = self.min_max_scalar.transform(df[self.column_names].as_matrix())	1	1
data.replace({'Title': mapping}, inplace=True)	1	1
merged_df['family'] = merged_df['family'].astype(int)	1	1
train.join(train_child.rename('Child'))	1	1
"predictions.to_csv(""titanic_predictions.csv"", index=False)"	1	1
sub_logreg['Survived'] = pred_all_logreg	1	1
"titanic_test.drop([""Embarked""],axis=1, inplace=True)"	1	1
dataset['Age'] = np.where((dataset['Age']> 0) & (dataset['Age']<7), 1, 0)	1	1
train_ex_df['Survived']	1	1
"train_data_train.drop(""Survived"",axis=1)"	1	1
dataset.loc[(dataset['Fare'] > 2.7) & (dataset['Fare'] <= 3.2), 'Fare']   = 1	1	1
data.drop(['Name', 'Ticket', 'Cabin'], axis = 1)	1	1
ax[1].set_title('Pclass vs Survived')	1	1
TitanicSubmission['Survived'] = np.NaN	1	1
"ax4.hist(train_Age_rep_scale, bins_scale, normed=1, alpha=0.75, label=""All"")"	1	1
"train[""Fare_scaled""] = minmax_scale(train[[""Fare""]])"	1	1
train.groupby('SibSp').Survived.mean()	1	1
df.dtypes.sample(9)	1	1
train_data['Cabin'].unique()	1	1
data.loc[(data['Age'] < 32) & (data['Age'] > 14.9), 'Age'] = 3	1	1
titanic_test.Fare.fillna(titanic_test.Fare.mean(), inplace = True)	1	1
df1.append(df2)	1	1
"data[""IsAlone""] = 0"	1	1
group_final.Survived.apply(lambda x: 1 if x == 0 else 0)	1	1
full['NorFare'] = pd.Series(scaler.fit_transform(full.Fare.values.reshape(-1,1)).reshape(-1), index=full.index)	1	1
dataset.loc[(dataset['Age'] > 24.294) & (dataset['Age'] <= 32.252), 'Age'] = 3	1	1
df.loc[age_null, 'Age'] = df.loc[age_null, ['Pclass', 'SibSp']].apply(lambda x: group_med_age.loc[(group_med_age.index.get_level_values('Pclass') == x.Pclass) & (group_med_age.index.get_level_values('SibSp') == x.SibSp)].Age.values[0], axis = 1)	1	1
dataset.reset_index(drop=True)	1	1
df.loc[:,features_list ]	1	1
Fare.plot.hist(bins=20,color='green',ax=ax[1,1])	1	1
"train[""Title_mrs""] = train[""Title""] == 'Mrs'"	1	1
df['AgeBin'] = pd.cut(df['Age'], bins, labels = names)	1	1
"train.loc[(train.Age.isnull())&(train.Sex=='male'),'Age'] = train[""Age""][train[""Sex""] == 'male'].mean()"	1	1
titanic.Embarked.isnull().sum()	1	1
dataset['Alone']= dataset['Alone'].map({True:1 , False: 0})	1	1
traind.drop(['Ticket', 'Cabin', 'PassengerId'], axis=1)	1	1
train.loc[train['Embarked']=='s','Embarked'] = 'S'	1	1
fill_age_df.drop(columns=['Name', 'Sex', 'Title'], inplace=True)	1	1
data['SibSp'].replace(0, 9, inplace=True)	1	1
data_frame.Survived.astype(int);	1	1
X_train_age.drop(['PassengerId', 'Age', 'Name'], axis=1)	1	1
ds_test.drop(remove_attribute, axis = 1)	1	1
Xtrain.select_dtypes(exclude=['object']).copy()	1	1
"train[""Survived""][train[m]==i].value_counts().index[0]==0:"	1	1
titanic_df['Alone'] = titanic_df.Parch + titanic_df.SibSp	1	1
titanic[['PassengerId','Pclass', 'Sex', 'SibSp','Parch','Fare','Embarked','Age']]	1	1
pd.merge(_, dummy_emb, left_index=True, right_index=True)	1	1
Final_predictions.head()	1	1
"train_test.loc[train_test[""Age""].isnull()]['Survived'].mean() # Age 不为空 存活率"	1	1
df3.drop(['PassengerId','Name','Ticket','Cabin','Embarked','Fare','Survived'],axis=1)	1	1
input_data.isnull().sum()	1	1
df.loc[df['Deck']=='T', 'Deck'] = 0	1	1
"related_people.drop(columns={""Ticket"",""Last_Name"",""Name"",""SibSp"",""Parch"",""total_related""})"	1	1
fare[ 'Fare' ] = full.Fare.fillna( full.Fare.mean() )	1	1
"train[""Fare_fillin""] = train[""Fare_fillin""] / 10.0"	1	1
valid_X['IsAlone'].loc[valid_X['FamilySize'] > 1] = 0 # now update to no/0 if family size is greater than 1	1	1
"train[""Survived""][train[""Sex""]=='male'][train[""Age""]>=18][train[""Pclass""]==2].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
combine_df.drop('Age',axis=1)	1	1
X_one_hot.columns.drop('Age'),	1	1
"train[""Ticket""].head()"	1	1
ticket_count.append(new_ticket_count)	1	1
train.drop(['Survived', 'PassengerId'], axis = 1, inplace = False), train['Survived'],	1	1
train['Survived'] = train['Survived'].astype(np.uint8)	1	1
Prediction['LR'] = lr_pred	1	1
df_test.loc[152]	1	1
df_train.loc[:,('PassengerId','Title')][df_train['Age'].isnull()].groupby(['Title']).agg(['count'])	1	1
titanic_age_group.apply(get_survival_ratio)	1	1
test['IsAlone'] = test[['SibSp','Parch']].apply(isAlone,axis=1)	1	1
dataset['Salutation'] = dataset['Salutation'].fillna(0)	1	1
train.dropna(subset=['Embarked'], inplace=True)	1	1
full_set['Title'][full_set['Title'].isin(rares)] = 'Rare'	1	1
testset[['Pclass','Sex','Age','Fare','Embarked']]	1	1
avg_fare_groupedby_sex_v_class.loc[:,'abs_diff_1_3'] = abs(avg_fare_groupedby_sex_v_class.loc[:,3] - avg_fare_groupedby_sex_v_class.loc[:,1])	1	1
train['Fare'] = train['Fare'].fillna(np.mean(train['Fare']))	1	1
Embarked_No['embarked'] = Embarked_No.index	1	1
feats['parents'].sum()	1	1
train.apply(lambda x: 1 if x['Embarked'] == f_val else 0, axis=1)	1	1
X_age.shape, X_age_pred.shape	1	1
features['Parch'] = normMinMax(features['Parch'])	1	1
ax[0].set_title('Survival per Embarked Place')	1	1
allfeat.drop(columns=['SibSp','Parch']) #column no longer needed	1	1
data['fsize']  = data.Parch+data.SibSp+1 #Parch denotes children and sibsp is for siblings while added 1 for self	1	1
i['Isalone'] = 1 #initiate to yes/1 is alone	1	1
df_train[['Pclass', 'Sex', 'AgeRange']]	1	1
titanic_data.Embarked.replace(['C', 'S', 'Q'], [0, 1, 2])	1	1
test['Fsize'] = test['SibSp'] + test['Parch']	1	1
train_data.loc[:,['Pclass','Sex','Age','Fare','Embarked']]	1	1
X.select_dtypes(include=self.include, exclude=self.exclude)	1	1
features['importance'] = model.feature_importances_	1	1
test.loc[(test['Fare'] > 7) & (test['Fare'] <= 14), 'Fare'] = 1	1	1
data.drop(output,axis=1)	1	1
train.loc[train['Age'] == -1.0, 'ageCat'] = 5	1	1
df_titanic_train_mod.loc[index,'Title'] = title.strip()	1	1
train_df.drop(['Ticket', 'Cabin'], axis = 1)	1	1
X_test['FamSize'] = test_df['FamSize'].map(label_dict).astype(int)	1	1
"data.set_value(i, 'Name', ""Sir"")"	1	1
df_combined.drop('Embarked',axis=1)	1	1
"combined[""family_role""] = ""no_role"""	1	1
family_survived_relation.sort_values(by='Survived', ascending=False)	1	1
tf.add(tf.matmul(W2, A1), b2)                     # Z2 = np.dot(W2, a1) + b2	1	1
dataset['EditedAge'][rowIndex] <= 22:	1	1
training_data['Age'] = training_data['Age'].astype(int) + 1	1	1
"train[""Nuclear""] = False"	1	1
data['Pc2'] = (data['Pclass']==2).astype(int)	1	1
df_train.groupby(['Survived', 'Pclass']).mean()	1	1
train.loc[(train['Age']>32)&(train['Age']<=48),'Age_band']=2	1	1
indices_to_remove.append(i)	1	1
age_data.reset_index(inplace=True)	1	1
features_long['maleadult'] = ((features_long.Age>15)&(features_long.Sex_d==1)).astype(int)	1	1
"X.fillna({""Embarked"":""<NAN>""})"	1	1
plt.hist(normalize_sex(df), bins=2)	1	1
FeatureDF['Fare'] = FeatureDF[['Fare','Pclass','Sex']].apply(FareImp,axis=1)	1	1
"X_data[""Survived""]"	1	1
df_test.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'])	1	1
train_df.head(10).T	1	1
data_sub[['PassengerId' , 'Survived']]	1	1
dat['isMiss'].fillna( 0, inplace = True)	1	1
"train[""Sex""][train[""Sex""] == ""female""] = 0"	1	1
validation_test['M3_gradient'] = cls_gradient.predict(validation_test.loc[:, columns])	1	1
testset.loc[:, features]	1	1
raw_train[['Embarked', 'Survived']].groupby('Embarked').mean()	1	1
Titanic_Master['Cabin_t']= Titanic_Master['Cabin_t'].str.replace('\d+', '')	1	1
dataset.loc[(dataset['Fare'] > 16.1) & (dataset['Fare'] <= 26), 'Fare'] = 3	1	1
"y.append(""Missing"")"	1	1
test['Parch']	1	1
"KNN_result[1][""best_model""],"	1	1
"combine['Deck'] = combine['Deck'].fillna(value = ""U"")"	1	1
train.iloc[:,2:], train.iloc[:,1] # separating the labels	1	1
clfs.append(DecisionTreeClassifier(random_state=seed))	1	1
train_ds[9:12]['Name']	1	1
train.groupby(['SibSp'])[['Survived']].count()	1	1
dataset['AgeBand'] = pd.cut(dataset['Age'], age_bands)	1	1
test_df['Embarked'].dropna().mode().values	1	1
train_df['Family_Survival'] = data_df['Family_Survival'][:891]	1	1
train_set[['fare_group', 'Survived']].groupby(['fare_group'],as_index=False).mean()	1	1
full.describe(include='all')	1	1
np.abs(M).ravel()	1	1
data['Alone'] = np.where(data['Family'] > 0, 0, 1)	1	1
data.Fare.hist(bins=50, alpha=0.5)	1	1
df.loc[df['Title'] == 'Mrs.', 'Age'] = df.loc[df['Title'] == 'Mrs.', 'Age'].fillna(mean)	1	1
train.loc[train['Survived'] == 1, 'SibSp']	1	1
importances_forest.append(forest.feature_importances_)	1	1
df.pipe(fix_age)	1	1
"X.copy()[[""Age"", ""Name""]] #  mutation ahead"	1	1
agetestdf[['Class1',  'Class2',  'Class3']]	1	1
dataset.loc[(dataset['Age']>64),'Age'] = 4	1	1
seq.add(Dense(1,activation='relu'))	1	1
test['label'] = 'test'	1	1
simple_data_df.drop(columns=columns, axis=1, inplace=True)	1	1
titanic_train_org.copy() # Copy original titanic dataset for feature changes	1	1
train_data['Fare'] = train_data['Fare'].fillna(train_data['Fare'].mean())	1	1
Submission.to_csv('randomforestcats01.csv',sep=',')	1	1
T[0]	1	1
df_train['FareRange'] = pd.cut(df_train['Fare'], 4)	1	1
lb.transform(cat_feature)	1	1
submission.to_csv('titanic_pre.csv', index=False)	1	1
X['Pclass'] = X['Pclass'].astype('object')	1	1
"test[""FamilySize""].max()"	1	1
encoding_list.append(list(le.transform(training_set[column].unique())))	1	1
df_titanic['Age'] = round(df_titanic['Age'])	1	1
dataset['Class2'][rowIndex] == 1:	1	1
titanic_df.groupby(titanic_df['cabin_initial']).mean()['Survived']	1	1
my_imputer.transform(OHE_X_submit_plus)	1	1
"X_train[""Fare""].mean()"	1	1
"df[""Embarked""].replace([""S"",""C"",""Q""],[0,1,2],inplace=True)"	1	1
"train_df[[""Sex"",""Survived""]].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False)"	1	1
"test[""TicketCategory""] = data[""TicketCategory""][891:].astype(int)"	1	1
titanic_test_df['Family'] = titanic_test_df['Familysize'].apply(famsz)	1	1
"X[""Age""].fillna(Y[""Age""].mean(), inplace=True)"	1	1
"data[""Age_cohort""][(data[""Age""]>6)&(data[""Age""]<=10)]=2"	1	1
fit.append('forest_cv')	1	1
survivors['Parch'].value_counts().sort_index()	1	1
X_train.iloc[train_idx], Y_train.iloc[train_idx]	1	1
ctb_.style.background_gradient(cmap='summer_r')#ctb.plot(kind='bar')	1	1
dataset_train.Age.mean()	1	1
groups.values.flatten(),	1	1
"test_df[""Embarked""]=test_df[""Embarked""].astype(""category"")"	1	1
cv_scores.append(scores.mean())	1	1
d_res_svc.sort_values(by=['val_score','std_test_score'],ascending=[False,True],inplace=True)	1	1
data['fam_size']=data.Parch+data.SibSp+1	1	1
"a[""CatTitle""] = a[""Title""]"	1	1
dfTrain['Ticket_Len'] = dfTrain['Ticket'].apply(lambda x: len(x))	1	1
"train_df[""AgeBin""] = pd.cut(train_df['Age'],agepercentile, labels=[""child"",""youth"",""adult"",""elder""])"	1	1
data['RoomBand'] = 0	1	1
train_set_data.loc[:,i_label] = le.fit_transform(train_set_data.loc[:,i_label])	1	1
test.loc[test['Age'] == -1.0, 'ageCat'] = 5	1	1
train_df['Title'] = train_df['Title'].replace(dict1)	1	1
combine_df.loc[(combine_df['Fare'] > 14.454) & (combine_df['Fare'] <= 31), 'Fare']   = 2	1	1
all_df.groupby('Ticket')	1	1
df_train['Fare'].std()	1	1
best_gradientboost.best_params_.get('max_features'),	1	1
"df_test[""Embarked""] = df_data['Embarked'][891:] #Assign Columns to Test Data"	1	1
"copy[""Age""] = copy[""Age""].fillna(age_median)"	1	1
df_test['IsKid'] = (df_test['Age'] < 16).astype(int)	1	1
"data[""SibSp""].astype('int32')"	1	1
"train_data[""Fare""][np.isnan(train_data[""Fare""])] = np.random.randint(mean_Fare - std_Fare,mean_Fare+ std_Fare,null_count_Fare_train)"	1	1
np.mean(train['Survived'][train['Sex']==1])	1	1
test['fare_group'] = test['calculated_fare'].map(fare_group)	1	1
test_data.loc[test_data['Sex'] == 'male', 'Sex'] = 0	1	1
df_surname['SurnameGroup_include_perishing_women'] = df_surname['SurnameGroup_include_perishing_women'].astype(int)	1	1
prefix.append(split)	1	1
dataset.loc[dataset['Sex'] == 'female', 'Female'] = 1	1	1
data.sons.astype('category')	1	1
clf.add(Dense(50,activation='relu',input_shape=(7,)))	1	1
feats['importance'] = rfc.feature_importances_	1	1
data_test.loc[data_test['Age']<16,'Sex'] = 'child' #kid	1	1
perf_kaggle.insert(loc=2, column='Accuracy Score', value=acc.Accuracy.values)	1	1
df_1.dtypes	1	1
x_train['Cabin'].apply(lambda x: 0 if type(x) == float else 1)	1	1
test2.to_csv( 'titanic_pred2.csv' , index = False )	1	1
data_train['Age'].loc[data_train['Pclass']==3].plot(kind='kde')	1	1
data_test['Sex'] = data_test['Sex'].map({'female': 1, 'male':0})	1	1
all_data['Fare'].loc[(all_data['Embarked'] == 'S') & (all_data['Pclass'] == 3)]	1	1
test_df['Cabin'].fillna('X', inplace = True)	1	1
titanic_train.groupby('Pclass')['Survived'].agg(['sum','count'])	1	1
feats['Fare'].isnull().sum()	1	1
ship.drop(['Sex'],axis=1,inplace=True)	1	1
"train_df.drop([""Survived""] , axis=1)"	1	1
Data.groupby(['Title2'])['Age'].mean()	1	1
predict[['PassengerId','Survived']].to_csv('gender.csv', header=True, index=False)	1	1
df_test.drop('Cabin', axis='columns')	1	1
testWithHistory.head()	1	1
"data[""Cabin""].fillna("" "", inplace=True)"	1	1
tf.add(a,b)	1	1
"data_df['Embarked']=data_df['Embarked'].fillna(""S"")"	1	1
result.astype(int)	1	1
titanic_df['CatAge'] = pd.cut(titanic_df['Age'], custom_bucket_array)	1	1
df['Age_sec'] = pd.cut(df.Age, bins=[-1,18,25,40,60,100],labels=[1,2,3,4,5])	1	1
AA_test['Age']	1	1
train.groupby(['Survived'], as_index=False).mean()	1	1
raw_train_data.info()	1	1
all_data.Fare.count()	1	1
valid_X.as_matrix()	1	1
full_models['set4'] = {}	1	1
test_df.tail(3)	1	1
"ax[0].set_title(""True Survival"")"	1	1
"df_test['Sex'] = pd.Categorical(df_test[""Sex""])"	1	1
"train[""Family_flag""].loc[train[""Family""] > 0] = 1"	1	1
test['Age'].interpolate(inplace = True)	1	1
"train_df[""Fare""][train_df[""Survived""] == 0]"	1	1
"df_train[""Fare""][x] = round(df_train[df_train[""Pclass""] == pclass][""Fare""].mean(), 8)"	1	1
params['hidden_units']:	1	1
"titanic_test.drop([""Sex""], axis=1,inplace=True)"	1	1
x_test['Name_Len_words'] = x_test['Name'].map(lambda x: len(x.split()))	1	1
models.sort_values(by='Score')	1	1
non_alpha['Cherbourg'].sum()/non_alpha['PassengerId'].count()	1	1
feats[0]	1	1
"le.transform(test[""Embarked""])"	1	1
data['name_title'] = (data.Name.str.split('.',expand = True))[:][0].str.split(',', expand = True)[:][1]	1	1
df.loc[df['Cabin'] != 'Unknown', 'Cabin'].str.split()	1	1
"np.where(dftrain[""Embarked""].isnull())[0]"	1	1
test_data['AGE'] = test_data['AGE'].replace(numpy.nan, test_data['AGE'].median())	1	1
in ['Age',  'Fare']:	1	1
"row[""FamilySize""] > 0:"	1	1
plt.hist(class_surv['Pclass'], weights=class_surv['Survived'])	1	1
score['RandomForestClassifier'] = random_forest.score(X_train, Y_train)	1	1
"df_test.loc[((df_test[""title""]==""mr."") & (df_test[""Age""].isnull()==True)).tolist(),'Age']=avg_mr"	1	1
data.loc[data['Fare'] <= 7.91, 'SortFare_4'] = 0	1	1
one_hot_test.drop('Parch_9', axis = 1)	1	1
df['Single'] = df['Fsize'].map(lambda s: 1 if s == 1 else 0)	1	1
train_df['Title']=train_df['Title'].apply(lambda x: 'Misc' if title_num[x]==True else x)	1	1
"train_df.corr()#[""Survived""]"	1	1
df['Sex'].notnull().mean()	1	1
train['Class1_Premium'] = 0	1	1
cols.insert(index, col_name)	1	1
"res_dectree.to_csv(""res_dectree.csv"", index= False)"	1	1
plt.hist([survived['Age'].fillna(0), not_survived['Age'].fillna(0)], color=['r','b'], alpha=0.5)	1	1
df['Age_categories'] = pd.cut(df['Age'], cut_points, labels=label_names)	1	1
df['NumFam'] = df['SibSp'] + df['Parch'] + 1	1	1
"test.loc[test.Title == ""Mme"", ""Title""] = ""Mrs"""	1	1
data_test.Age.mean()	1	1
train_data.groupby(['Pclass','Survived']).Pclass.count().unstack()	1	1
train.loc[train_n+1:891, :]	1	1
titanic_df['FareClass'] = titanic_df['Fare'].apply(fare_class)	1	1
df3['Parch']	1	1
df_train_features.replace('male',1)	1	1
test_df.info() # check all nulls have been filled	1	1
train_df.loc[ train_df['Fare'] <= 7.91, 'Fare']= 0	1	1
"v_targets[""target""],"	1	1
test['Training_set'] = False	1	1
PointBiser.sort_values('Pval',ascending=True,inplace=True)	1	1
combined['Title'] = combined['Title'].map(title_mapping)	1	1
dataset.Fare.apply(lambda x: np.log(x) if x > 0 else 0)	1	1
plt.hist(titanic_train.Pclass)    #to determine class 2 or class 3 to drop	1	1
ax2[0].set_ylabel('Amount')	1	1
Submission.to_csv('Treegridsearch03.csv',sep=',')	1	1
df_grp.drop(ind)['Survived'].max() #扣掉自己找剩下列的最大值	1	1
df_data['AgeBin'] = pd.cut(df_data['Age'].astype(int), 5)	1	1
"_df.loc[idxs,""group_id""] = i"	1	1
dataset['Queenstown'] = np.where(dataset['Embarked']=='Q',1,0)	1	1
train.drop(['PassengerId', 'Survived', 'Name','Ticket','Cabin','Embarked','title'], axis=1)	1	1
features.drop(columns = ['ID', 'Survived'])	1	1
t_data['Name_pred'] = data.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
"data.drop(""PassengerId"", axis=1)"	1	1
res_acc.append(cross_val_score(logClass,X,y,scoring='accuracy',cv=10).mean()*100)	1	1
DataFile.drop('Age',axis=1)	1	1
"QF_OH_Target.corr(method='pearson')[""Survived""]"	1	1
df.Fare.fillna(mean)	1	1
X_title['Title'] = X_orig.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\.', x).group(1))	1	1
dataset.loc[ dataset['Fare'] <= 8, 'Fare'] = 0	1	1
testdata['PassengerId'] #for submission	1	1
data_one['Cluster'] = cluster_map_data['cluster']	1	1
train['Sex'] = le.fit_transform(train['Sex'])	1	1
"final_df.to_csv(""XGBSub.csv"", index=False)"	1	1
X_train['Age'].fillna(-1).tolist()	1	1
train.drop('Survived',axis = 1)	1	1
df_train['SibSp'] + df_train['Parch'] + 1	1	1
"train.loc[train[""Age""].isnull(), ""Age""] = train[pd.isnull(train[""Age""])][""call""].map(call_age_dict).values"	1	1
X_hot.drop('Name',axis=1)	1	1
"df.drop(""Ticket"", axis=1).drop(""Name"", axis=1) #also covered by class/cabin"	1	1
"axes[0].set(xlabel='Survived', ylabel="""")"	1	1
dataset.loc[(dataset['GroupSize'] > 4) & (dataset['GroupSize'] <= 7), 'GroupSize'] = 2	1	1
test_features.info()	1	1
data1.drop(labels=['Survived'], axis=1)	1	1
p.to_csv('Tit_pred.csv',index=False)	1	1
test_x.drop(['Sex_male','Embarked_S'],axis = 1, inplace=True)	1	1
full['Ticket_short'] = full.Ticket.map(parse_ticket)	1	1
X_test.reset_index()	1	1
model.add(Dense(9, kernel_initializer = 'uniform', activation = 'relu'))	1	1
df_train.select_dtypes(include=['int64','float64']).columns	1	1
test_dataset.Fare.astype(int)	1	1
dataset['Sex'] = dataset['Sex'].map( {'female': 2, 'male': 1} ).astype(int)	1	1
df.loc[df['Deck']=='A', 'Deck'] = 7	1	1
X_train.iloc[valid_idx],  y_train.iloc[valid_idx]	1	1
"X[""FamilySize""].apply(lambda row: ""Single"" if row == 1 else (""Large"" if row < 5 else ""Extreme""))"	1	1
df['Pclass']=df['Pclass'].astype('category')	1	1
df[['Age']].describe()    #Re-Check that we have fill all of missing data	1	1
test['Fare'].iat[152] = test.Fare.mean()	1	1
X['caT'] = X['Cabin'].map({'A':0,'B':0,'C':0,'D':0,'E':0,'F':0,'G':0,'T':1,'U':0}).astype(int)	1	1
titanic_test['Age']=titanic_test['Age'].fillna(titanic['Age'].median())	1	1
titanic_test.loc[titanic_test['Sex']=='female','Sex']=1	1	1
whole.set_value(temp.index, 'Fid', fid)	1	1
df['Poor_Old_Miss_Third_Class'] = 0	1	1
data['Embarked'] = data['Embarked'].map({'C':1, 'S':2, 'Q':3})	1	1
data['Survived'][data.Woman ==1].count(),	1	1
df3_train_Y.shape	1	1
df['Title'] = df['Title'].map({'Mrs': 0, 'Miss': 1, 'Master': 2, 'Profession': 3, 'Mr': 4, 'Rare': 5})	1	1
"test.loc[:, ""Age""].fillna(0, inplace=True)"	1	1
data['Status'] = data.Survived.fillna(0)  # unknown survival status=0	1	1
train.loc[((train['Sex'] == 1) & (train['Pclass'] == 3)), 'gender_class'] = 6 #male Pclass 3	1	1
combined['family_size'] = combined.SibSp + combined.Parch+1	1	1
train['Age'].hist(bins=50) #check the Age duistribution	1	1
param_df.head()	1	1
titanic_test['Ticket']	1	1
dataset.hist(bins=50, figsize=(14,8))	1	1
df_to_imp['Pclass'].unique():	1	1
scoring.append(ssmodel.score(X_train, y_train) * 100)	1	1
ax[0].set_title('FamilySize vs Survived')	1	1
dataset['isCabinC'] = dataset['isCabinLetters'].apply(lambda x: 0 if x != 'C' else 1)	1	1
final.to_csv( 'titanic_again.csv' , index = False )	1	1
min_max_scaler.transform(test.as_matrix(columns=['Fare']))	1	1
df_train.drop(columns=['PassengerId', 'Survived']) # 不要な列を削除	1	1
"submission.to_csv(""titanic_predict_gp.csv"", index=False)"	1	1
train_df.groupby('Pclass').size()	1	1
plt.boxplot(results.values())	1	1
X_train.age_2.apply(lambda x: np.power(x, 0.3)).plot(kind='hist');	1	1
featureRanks['support'] = best_dtc.named_steps['rfe'].support_	1	1
knowtickets.append(tick)	1	1
d_test.groupby(['Pclass']).mean()	1	1
output_women_and_toddlers_first.to_csv('women_and_toddlers_first.csv', index=False) # score 0.75598 (4523/7071)	1	1
combine_df.loc[(combine_df['Age'] > 32) & (combine_df['Age'] <= 48), 'Age'] = 2	1	1
"combined.loc[f_group.index, ""family_size""] = fs"	1	1
combined.groupby('Pclass').mean()['Age']	1	1
original_test.isnull().sum()	1	1
test.loc[test['Age'].isnull() & test['NameTitle'].str.contains('Mr.'), 'Age'] = 32	1	1
x['Model'].predict(x_validation, x_validation_normalized)	1	1
train[['Parch','Survived']].groupby(['Parch']).mean().plot.bar(ax=ax[2])	1	1
updated_test_data.head()	1	1
Test_Master.loc[ Test_Master['Fare'] == 0.0 , 'Fare'] = 0	1	1
data2['Tree_Predict'] = 0	1	1
combined.drop('Cabin', inplace=True, axis=1)	1	1
simple_data_df.sample(5)	1	1
df.to_csv('voting_gauss_nn_3.csv', sep=',')	1	1
"TicketTrim.append(i.replace(""."","""").replace(""/"","""").strip().split(' ')[0]) #Take prefix"	1	1
"df_train[""cab""] = df_train[""Cabin""].str.lower().str.get(0)"	1	1
trainPCA.drop(columns = ['Survived'])	1	1
train_dat.drop(['Cabin', 'Ticket'], axis=1, inplace=True)	1	1
"submit.to_csv(""submit.csv"", index=False)"	1	1
dataset['WealthFactor'] = 0	1	1
model.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu', input_dim = 2))	1	1
ages.append(pd.Series([0, 80]))	1	1
df['title_status'] = df['title_status'].replace(['Miss'], 'Mrs')	1	1
test['Gender'] = (test['Sex'] == 'female').astype(int)	1	1
train2['Sex'] = train2['Sex'].map(sex_map)	1	1
imp.sort_values( [ 'Importance' ] , ascending = False )	1	1
titanic['SibSp'].unique()	1	1
all_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by = ['Survived'], ascending = False)	1	1
df_comb['Ticket']	1	1
train_data.Age.fillna(test_data.Age.median())	1	1
train.pivot_table(index='Sex', columns='new_SibSp', values='Survived', aggfunc='mean').plot(kind='bar')	1	1
cv_f['Survived']	1	1
train7['Ticket'] = le.transform(list(train7['Ticket'].values))	1	1
data_train['Survived'].count() - data_train.count()	1	1
train_df.pop('Cabin')	1	1
NameList.append(G.node[Passenger]['LastName'])	1	1
"df_train.set_value(61,""Embarked"",""C"")"	1	1
"submission[""Survived""] = pred"	1	1
plt.hist(ageHasNoParch)	1	1
"df[[""Fare"" , ""Fare_bin""]].head(10)"	1	1
fresh_df.info()	1	1
full.loc[~full.Title.isin(['Master', 'Mr', 'Mrs', 'Miss']), 'Title'] = 'Rare'	1	1
titanic['Fare'].value_counts()	1	1
"dataset_train[""Cabin""].value_counts()"	1	1
test['Age'].fillna(test['Age'].mode()[0],inplace=True)	1	1
standardize_df.drop(['Survived'],  axis=1)	1	1
"result.to_csv(""random_forest.csv"", index=False)"	1	1
dfTest.loc[i]['PassengerId']	1	1
train.isnull().count()	1	1
test.iloc[:,0].values #test_orj['PassengerId'].copy()	1	1
titanic.loc[train.index].groupby('has_Family')['has_Family','Survived'].agg({'has_Family':['count'],'Survived':['sum']})	1	1
test.drop(columns='Cabin', inplace=True)	1	1
train_with_age.iloc[:, train_with_age.columns != 'Age'].values	1	1
df_data['Sex_Code'] = df_data['Sex'].map({'female' : 1, 'male' : 0}).astype('int')	1	1
"i[""Cabin""]"	1	1
df1['Sex'].value_counts()	1	1
result['Survived'] = predictDTC	1	1
df_test['Embarked'] = df_test['Embarked'].fillna(1)	1	1
df['Alone_male'] = 0	1	1
curated_data.loc[ train['Age'] > 60, 'Age'] = 4	1	1
train_dataset.Age.fillna(rand_age)	1	1
train['HaveLessThanFiveBrothers'][train['SibSp'] < 5] = 0	1	1
nonsur['Age'].dropna().values,	1	1
train_pre.shape[1]	1	1
"titanic['Embarked'] = titanic['Embarked'].fillna(""S"")"	1	1
Model.append('RandomForestClassifier')	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset.Sex == i ) & (dataset.Pclass == j+1),                         'Age']= guess_ages[i,j]	1	1
"ax[1].set_title(""Embarked: Survived vs Unsurvived"")"	1	1
df2['low_fare'] = [1 if i < 5 else 0 for i in df2.Fare]	1	1
df_test.drop('Embarked',axis=1)	1	1
"train_df[""NumberCabins""] == 0"	1	1
train.loc[train['Survived'] == 1, 'Parch']	1	1
"test_df[""Sex""] = train_df[""Sex""].apply(lambda x: 1 if x == ""male"" else 0)"	1	1
"total[[""Embarked"", ""Pclass"", ""Fare""]].groupby([""Embarked"", ""Pclass""]).mean()"	1	1
df_train.Fare.corr(-df_train.Pclass)	1	1
titanic_df['Age'][np.isnan(titanic_df['Age'])]=rand1	1	1
combined_df['deck_known'] = combined_df['deck'].notnull()	1	1
merged.Age.isnull().any()	1	1
"dftest[""Survived""]=clf.predict(dftest)"	1	1
"data.set_value(i, 'Name', ""Col"")"	1	1
"test_data.drop(""PassengerId"", axis=1).copy()"	1	1
train.Age.dropna().mean()	1	1
train_df.Embarked.isnull()	1	1
test['Embarked'] = test['Embarked'].map({'S': 0, 'Q': 1, 'C': 2}).astype(int)	1	1
testdf.head(3)	1	1
train.drop(labels=['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
"Cabin_t.append(Titanic_Master.Ticket.str.split("" "", n = 1)[i][0].replace( '.' , '' ).replace( '/' , '' ))"	1	1
data.surname_Chambers.astype('category')	1	1
df_train.drop(['Name'],axis = 1)	1	1
in ['KerasClassifier'] else -1	1	1
"training[""Family_Size""] = training[""SibSp""] + training[""Parch""] + 1"	1	1
df_dums.drop('Sex_male', axis=1).corr()	1	1
train_df.describe() #describing basic statistics of numerical values	1	1
"tmp[""Fare""].fillna(tmp[""Fare""].median(), inplace=True)"	1	1
predict.loc[predict['Sex']=='female','Survived'] = 1	1	1
train7.drop(['PassengerId', 'Name'], axis=1)	1	1
self.cost_.append(cost)	1	1
train.Embarked.count() # filled the values with Mode.	1	1
df['Embarked_code'] = df.Embarked.cat.codes	1	1
train_df.replace('male',1)	1	1
data['Embarked'] = data['Embarked'].replace(['S', 'C', 'Q'], [1, 2, 3])	1	1
"plt.hist(df_train.loc[df_train[""Survived""]==1,""Pclass""], bins = [0.5,1.5,2.5,3.5],label = ""Survived"", alpha = 0.3)"	1	1
fare.plot.hist(bins=50, title='Fare', ax=axs[2, 0])	1	1
train0.drop(drop_elements, axis = 1)	1	1
test.loc[test['family_size']>=1,'travel_company']=0	1	1
"titanic_df[""Sex""].loc[titanic_df[""Sex""]==""male""]=1"	1	1
"test_set[""Name""].fillna(test_set[""Name""].mode()[0],inplace=True)"	1	1
model['prediction'].eval({model['X']: test_X})	1	1
train_df['Ticket']	1	1
dataframe.info()	1	1
"test.drop(""Cabin"", axis = 1, inplace = True)"	1	1
test[['Pclass','Fare','male','Age']]	1	1
P_Ti_vs_Ti_diff.mean()	1	1
rf_rfecv.transform(rf_rfecv_final_test)	1	1
test_data_X.head()	1	1
train_df['Fare'].plot(kind='hist', figsize=(12, 3), bins=100, xlim=(0, 50))	1	1
df_train['Embarked'] = df_train['Embarked'].fillna(df_train['Embarked'].mode()[0])	1	1
data.sort_values('age').age.unique()	1	1
S['Grade_factorized'] = S['Grade'].factorize(sort=True)[0]	1	1
survived['Embarked'].value_counts().sort_index().plot.bar(ax=axs6[1], fontsize=16)	1	1
test_copy.loc[test_copy['Parch'] == 2, 'Parch_Category'] = 2	1	1
data.drop('Survived',1,inplace=True)	1	1
age_df.insert(0,'Age',age_df.pop('Age'))	1	1
data1['IsAlone'] = 1 #create a new feature and initialize to yes/1 is alone	1	1
my_data['Fare'].hist(color='green',bins=40,figsize=(8,4))	1	1
"train[""Sex""] = train[""Sex""].replace({""female"":0, ""male"":1})"	1	1
train_df['ID'].corr(train_df[col])	1	1
"df_train[""Title""] = titles_train"	1	1
combined.drop('Name', axis = 1, inplace = True)	1	1
all_data['FamilyID'] = ''	1	1
encoders.append(le)	1	1
"Submission.to_csv(model.name + "".csv"", index = False)"	1	1
train['Family_Survival'] = data['Family_Survival'][:891]	1	1
test_data_1.isnull().any()  ### Now we have null values in only in Age	1	1
train_df.loc[ train_df['Sex']=='male' ]	1	1
train['Pclass3'][i] = 0	1	1
train['Pclass3'][i] = 1	1	1
X.Embarked.fillna('S', inplace=True)	1	1
data.groupby(['SibSp'])['Survived'].mean()	1	1
df['Sex'] = df['Sex'].replace(['male','female'], [0,1])	1	1
df_all['SharedFeatures'] == 0,	1	1
"clean_data[""Sex""] = clean_data[""Sex""].map({""female"": 1, ""male"": 0})"	1	1
"test_df.loc[test_df[""Title""] == ""Ms"", ""Title""] = 'Miss'"	1	1
"coeff_df[""Correlation""] = pd.Series(classifier_logistic.coef_[0])"	1	1
train.drop(['LargeFamily', 'FamilyClass'], axis=1)	1	1
X_train['Sex'].loc[X_train['Sex']=='male'] = 1	1	1
test_df['TraveledAlone'] = (test_df['FamilySize'] == 1).astype(int)	1	1
read.drop(['Survived', 'Cabin', 'Ticket','Name'], axis=1)	1	1
df_svc.head()	1	1
title_list.append(3)	1	1
LastNameResult['counts'].value_counts(sort=False)	1	1
data.loc[(data['Age'] > 14) & (data['Age'] <= 27), 'SortAge_1'] = 1	1	1
train_dataset['Fareband'] = pd.qcut(train_dataset['Fare'],4)	1	1
"train_two[""family_size""] = train_two['SibSp'] + train_two['Parch'] + 1"	1	1
test['Title'] = [val if val in ['Mr', 'Mrs', 'Miss', 'Ms', 'Master'] else 'Others' for val in test['Title']]	1	1
data_test.drop(['Pclass', 'Sex', 'Embarked'], axis=1, inplace=True)	1	1
cabin_types.append(None)	1	1
train.drop('Name',axis=1)	1	1
full.drop(['Cabin','Deck','Deck_T'], axis = 1)	1	1
test['Embarked'] = test['Embarked'].astype(int)	1	1
train.Age.fillna(meanAge, inplace=True)	1	1
train_data_features['Sex'] = train_data_features['Sex'].apply(lambda x: 1 if x =='female' else 0)	1	1
titanic_df['Type'] = titanic_df['Type'].map({'male': 0, 'female': 1, 'child':2})	1	1
figure['data'][0]['textfont'] = dict(family = 'sans serif', size = 18, color = 'aquamarine')	1	1
raw_test.loc[index, 'Age'] = ages[row['Title']][row['Pclass']]	1	1
test['Fare']=test['Fare'].fillna('Fare_med')	1	1
distances.append((trainingSet[x],dist))	1	1
data.Age.fillna(data.Age.median(),inplace=True)	1	1
d_dev[['Survived']]	1	1
df_all['_Cabin'] =df_all.Cabin.astype(str).str[0]	1	1
"train[""Fare_1""] = train[""Fare""]<20"	1	1
train_dataset.Fare.describe()	1	1
test.loc[test['Embarked']=='C', 'Embarked'] = 1	1	1
data_train_trans.drop(['Survived','PassengerId'], axis=1)	1	1
df.drop(['Ticket', 'Cabin'], axis = 1, inplace = True)	1	1
test_df['Age'].apply(lambda x: 1 if (x > 64 and x <= 80) else 0)	1	1
train_y.iloc[val_idx]	1	1
np.where(anny>=0.5,1,0)	1	1
cabin.fillna('N',inplace=True)	1	1
test_df['Fare'].fillna(train_df['Fare'].mean(), inplace = True)	1	1
titanic_train_data['Name'].apply(titleMiss)	1	1
linear_reg_df.Age.values.reshape(-1,1)	1	1
"Age_Sex_Title_Pclass_missing[""Age""]  = Age_Sex_Title_Pclass_missing.apply(Age_filler, axis = 1)"	1	1
dataset['Title'] = dataset['Title'].replace('Major', 'Officer')	1	1
test.to_csv( 'logis_age_fare_sex_feat.csv' , index = False )	1	1
ax[0].set_title('Number Of Passengers Who Boarded Titatnic By Pclass')	1	1
"test_df.sort_values(""Y_scores"",ascending=True).index[:5]"	1	1
"dataset['Class3'] = dataset[""Pclass""].apply(lambda x: 0 if x != 3 else 1)"	1	1
data.loc[ data['Age'] <= 16, 'Age'] = int(0)	1	1
traind['Survived'].groupby(traind['Parch']).mean()	1	1
enc.transform(test_df.Sex)	1	1
test.assign(male=Sex_test['Sex_male'], female=Sex_test['Sex_female'])	1	1
best_estimator.append(gs.best_estimator_)	1	1
combined_df['Age'][combined_df['Title'] == 0].mean()	1	1
"title_dummies_test.drop(["" Mr""], axis = 1)"	1	1
full_models['set4']['num_attrs'] = ['Fare', 'Age']	1	1
ax2[0].set_xlabel('Age')	1	1
"combined[""Title""] = combined[""Title""].map({""Master"":0, ""Miss"":1, ""Mrs"":2, ""Mr"":3, ""officer"":4,""Royalty"":5})"	1	1
train['SmallF'] = train['Fsize'].map(lambda s: 1 if  s == 2  else 0)	1	1
all_data.loc[i].at['Sex'] in sex_mapping:	1	1
"train.loc[train[""Survived""]==1, [""Pclass"",""Sex"",""PassengerId""]]"	1	1
AgeGroup.loc[(AgeGroup.Sex==Sex) & (AgeGroup.Pclass==Class) & (AgeGroup.Salutation==Salutation),'Age'].count()>0:	1	1
df.loc[df.Age >= 50, 'AgeF'] = 'Elderly'	1	1
df_train['T']	1	1
data_pruned.loc[ data_pruned['Age'] <= 8, 'Age'] = 0	1	1
x['Embarked'].map({'S': 0, 'C': 1, 'Q': 2, None: 3})	1	1
"train_data[""CabinLetterE""] = 0"	1	1
tit_df_san.corr().loc['Survived']	1	1
y_test.values.reshape(-1)	1	1
submit_df.to_csv('titanic.csv', index_label=['PassengerId'])	1	1
"test_df[""Age""] = test_df.Age.interpolate()"	1	1
test_df['Age'] = test_df['Age'].fillna(train_df['Age'].median())	1	1
df_all['Ratio']=df_all['Survived']/df_all['Total']	1	1
train.where(train['age0']==1).dropna().head(5)	1	1
train_df.shape,test_df.shape,combine[0].shape,combine[1].shape	1	1
dataset['Embarked'] = dataset['Embarked'].map( {'C': 1, 'Q': 2, 'S':3} )	1	1
age_non_na.skew()	1	1
results.append(benchmark(NearestCentroid()))	1	1
submission.to_csv('titanic5.csv', index=False)	1	1
train['Survived'].groupby(train['Pclass']).value_counts()	1	1
"X[""Cabin""]=X[""Cabin""].fillna(0)"	1	1
"ax[0].set_xlabel(""per feature weight"")"	1	1
"dftest.loc[idx,""CountTicket""]=ticket_count_test[ticket]"	1	1
"test_data[""Fare""][np.isnan(test_data[""Fare""])] = generated_fare"	1	1
test_df['Age'] = imp_median_age.transform(test_df[['Age']]).ravel()	1	1
test['Fare'] = test['Fare'].apply(map_fare)	1	1
ports_map.update({ports[i]:i})	1	1
"Results.append(predict(x, data[""Survived""]))"	1	1
test.groupby('Pclass')['Fare'].transform('median').head()	1	1
"X.drop([""Survived"",""PassengerId""], axis = 1, inplace=True)"	1	1
result_df.reset_index().plot.bar();	1	1
concat_set['Fare'].fillna((concat_set['Fare'].median()), inplace=True)	1	1
train_df.loc[train_df['Age'] < 10.367, 'Age'] = 0	1	1
train_df.ix[i, 'Sharedticket'] = ticketgrouptrain.Count[ticketgrouptrain.Ticket == train_df.Ticket[i]].item()	1	1
train_df['Family'] = train_df['Family'].apply(changeFamily)	1	1
train_data.assign(Title=titles)	1	1
data_cabin_pd['Pclass']=train['Pclass'][cabin_index_ST]	1	1
"test.loc[test[""Embarked""] == 'C', 'Embarked'] = 1"	1	1
"train_x.describe(include=""all"")"	1	1
pd.DataFrame.from_dict(results,orient='index')	1	1
data_scaled.describe()	1	1
all_data.drop('Name',axis=1,inplace=True)	1	1
titanic_df['Sex'].isnull().sum()	1	1
data['Title'].loc[data['Title_count'] <= 10] = 'Misc'	1	1
train_data['Embarked'] = train_data['Embarked'].map(embkarked_map)	1	1
test_df_bkp['PassengerId']	1	1
data['Cabin']    = data['Cabin'].fillna('Z')	1	1
stdScaler.transform(X)	1	1
"copy_df[""EmbarkedS""] = train_OneHotEncoded[:,0]"	1	1
np.dot(dZ2, np.transpose(parameters2))	1	1
train.drop(['Title', 'Name'], axis=1)	1	1
"train[""Title""], uniques = pd.factorize(train[""Title""])"	1	1
"df[""Family_Size""] = df[""SibSp""] + df[""Parch""] + 1"	1	1
valid.shape	1	1
train_data.dropna(how='any', inplace=True)	1	1
data_train['Deck'] = data_train.Cabin.str.slice(0,1)	1	1
dataset['Deck'] = dataset['Deck'].map( {'U': 0, 'C': 1, 'E': 2,'G': 3, 'D': 4, 'A': 5,'B': 6, 'F': 7, 'T': 8} ).astype(int)	1	1
df_test['Family'] = df_test['SibSp'] + df_test['Parch']	1	1
full_set['Pclass'] = full_set['Pclass'].astype('str')	1	1
train.iloc[:,1:],train['Survived']	1	1
df[['SibSp', 'Survived']].groupby('SibSp').count().merge(df[['SibSp', 'Survived']].groupby('SibSp').sum(), right_index = True, left_index = True)	1	1
Y_train.head(10)	1	1
datasets.append(titanic_train)	1	1
original_train_data['Ticket'].head(10)	1	1
passengerIdValues.join(predictValues)	1	1
np.mean(cv_score_rs)	1	1
test_df['isAlone'] = test_df['family_size'][test_df['family_size'] == 1]	1	1
model.transform(test_df)	1	1
test_df.to_csv('submission.csv', index=False)	1	1
"data.corr()[""Survived""]"	1	1
train_model.corr()	1	1
whole['Fid']= np.nan	1	1
"train_data.loc[(train_data[""Age""] >= 13) & (train_data[""Age""] < 18), ""Teenager""] = 1"	1	1
df['Title'] = df.apply(lambda row: row['Name'].split(',')[1].split('.')[0].strip(), axis=1).map(title_map)	1	1
dataset['FareBin'] = label.fit_transform(dataset['FareBin'])	1	1
Xtrf_df['Fsize'] = Xtrf_df['SibSp'] + Xtrf_df['Parch']	1	1
train_data.drop(['Sex_S'],axis=1)	1	1
gs_metrics.iloc[5, 5]	1	1
X_test['Embarked'] = X_test['Embarked'].fillna('0')	1	1
tit_df['Age'] = tit_df['Age'].apply(norm_age)	1	1
np.where(train_data.Survived == 1)	1	1
titanic.groupby('Pclass')['Fare'].describe()	1	1
data_copy.loc[data_copy['Sex'] == 'female','Sex'] = 0	1	1
my_solution.to_csv('my_solution_one.csv', index_label=['PassengerId'])	1	1
Titanic_Kaggle_Submit.Survived.astype(int)	1	1
train_raw.drop(['Survived'],1)	1	1
train.Embarked.isnull().value_counts() # 2 missing values	1	1
comb_list[0]	1	1
train.drop(['AgeGroup'], axis=1)	1	1
guess_age_df.median()	1	1
test0.head(10)	1	1
"df[""Title""] = df[""Title""].astype('int')"	1	1
data_train[['Name_length','Survived']].groupby(['Name_length'],as_index=False).mean()	1	1
test_df['Age'].value_counts()	1	1
"df.loc[pd.notnull(df[""Cabin""]) & (df.Cabin.str.len() == 5), ""Deck""] = df[""Cabin""].str[2]"	1	1
test_df.update(result)	1	1
traindf[['Pclass','Sex','SibSp','Parch']]	1	1
df_test.apply(get_family_id, axis=1)	1	1
test_df['Embarked']= test_df['Embarked'].fillna('Z')	1	1
dat.drop(drop_column, axis=1, inplace = True)	1	1
testdata['Related'] = testdata['SibSp'] + testdata['Parch']	1	1
tt.info()	1	1
ship['Family'].loc[ship['Family'] == 0] = 0	1	1
dataset_test['Fare'].fillna(dataset_train['Fare'].mean(), inplace = True)	1	1
"X_train.drop(labels = [""PassengerId"", ""Sex"",""Name"", ""Title"", ""Embarked""], axis = 1, inplace = True)"	1	1
dftest.drop(['Ticket','PassengerId'],axis=1)	1	1
"dataset[""Age""][((dataset['SibSp'] == dataset['SibSp'][i]) & (dataset['Parch'] == dataset['Parch'][i]) & (dataset['Pclass'] == dataset['Pclass'][i]))].median()"	1	1
test.drop(features_drop, axis = 1)	1	1
ensemble_models.get('KNN'),	1	1
df.iloc[:,2:]	1	1
"df2[""Age""].fillna(df[""Age""].median(skipna=True), inplace=True)"	1	1
df_test[['PassengerId', 'Survived']]	1	1
submission.to_csv('kNN15_submission.csv', index = False)	1	1
combined_df.loc[combined_df['Pclass'] == 1][['Embarked','PassengerId']].groupby(by='Embarked').count()	1	1
df.loc[index, 'Title'] = 'Master'	1	1
cleaned_y.head()	1	1
"df_test.to_csv(path_or_buf=""test_processed.csv"")"	1	1
data_copy['Sex'] = data_copy['Sex'].fillna('female')	1	1
"train[[""Title""]] = train[[""Title""]].replace('Mme', 'Mrs')"	1	1
"tmp.select_dtypes(include=[""O""]).columns"	1	1
test.drop('Name',inplace=True, axis = 1)	1	1
train['Age_group']=pd.cut(train.Age, 8).cat.codes	1	1
"df_test[""Title""] = df_test[""Title""].astype(int)"	1	1
"traindat.drop(""Name"", axis=1, inplace=True)#No use for this"	1	1
glbl['random_state'] = 5   # = None if we dont need demo mode	1	1
df['Honoric'] = df['Honoric'].replace(replace_dict)	1	1
"data.set_value(i, 'Name', ""Mme"")"	1	1
test.fillna('')	1	1
df.loc[male & Class1,'Class'] = (3)	1	1
test_df['Age'] = test_df.apply(imput_age, axis=1)	1	1
df.Survived.fillna(value=-1, inplace=True)	1	1
df['embarked_T'] = df.apply(lambda x: 1 if str(x['Embarked']) == 'C' else x['embarked_T'], axis=1)	1	1
train_data.append(test_data, ignore_index=True)	1	1
"cache[""A1""]"	1	1
test.applymap(lambda s: sex_map.get(s) if s in sex_map else s)	1	1
"data.loc[data['SharedTicket']==1, ['Ticket', 'Name']].sort_values(""Ticket"").head(20)"	1	1
train.groupby(['FamilyBin'])[['Survived']].count()	1	1
temp_df.loc[i, 'Ticket_number'] = int(isearch[-1])	1	1
closest_y.append(training_labels[rank[x]])	1	1
titanic_sub.rename(columns={0:'Survived'})	1	1
df_tsne['Survived'] = df['Survived']	1	1
test_data['Age'].fillna(r, inplace=True)	1	1
"total[[""Pclass"", ""Fare""]].groupby(['Pclass']).agg(lambda x: stats.mode(x)[0][0])"	1	1
X.loc[:,'Fare'].min(axis=0)	1	1
X.head(50)	1	1
train.drop(['Age'],axis = 1, inplace = True)	1	1
train['Pclass'].value_counts().plot.bar(ax=ax[0])	1	1
features_long.Age.round(0)	1	1
data_df['Ticket'] = Ticket	1	1
dataset.loc[(dataset['Age']>48)&(dataset['Age']<=64), 'Age'] = 3	1	1
"train[""Age_2""] = (4 <= train[""Age""])&(train[""Age""]<15)"	1	1
train['Age']=train[['title', 'Sex','Age']].apply(newage, axis=1)	1	1
df['Fare'].fillna(estimated_fare, inplace=True)	1	1
dataset['Title_Rare'] = dataset['Title'].map(lambda s: 1 if  s == 6  else 0)	1	1
np.mean(accuracyLs)	1	1
dfn['Survived'].values	1	1
Submission.to_csv('randomforestcat02.csv',sep=',')	1	1
"age[""LessThan5""] = (age[""Age""] < 5).astype(int)"	1	1
big['XFam'] = np.log1p((big['XFam'] - big['XFam'].mean()) / big['XFam'].std())	1	1
correl_train.copy()	1	1
"df.fillna(value={""Age"": 0, ""Born"": ""None""})"	1	1
X.loc[1043]	1	1
train['Sex']=train['Sex'].map({'female':0,'male':1})	1	1
df.describe(include=['O']) # Objects	1	1
Lr['Feature'] = list(X_train.columns)	1	1
"train[""Age""].fillna(round(np.mean(train[""Age""])), inplace=True)"	1	1
train_df['Age'].plot(kind='hist')	1	1
df_comb.loc[[62, 830]]	1	1
CopyOfTrainDataSet.head()	1	1
fulldata.set_value(fulldata.Age.isnull(), 'Age', pred_age)	1	1
train['Cabin'] = train.Cabin.map(lambda x: x[0]).replace(' ', np.nan)	1	1
"rf_submit[[""PassengerId"",""Survived""]]"	1	1
total_data['final_total_data'] = total_data.apply(all_vs_survival, axis = 1)	1	1
"df_test[""FareBand""] = pd.qcut(df_test['Fare'], 8, labels = [1, 2, 3, 4,5,6,7,8]).astype('int')"	1	1
train_data.drop(['CategoricalAge','CategoricalFare'], axis = 1)	1	1
train[['Embarked', 'Survived']].groupby(['Embarked']).mean().plot(kind='bar', ax=ax2)	1	1
train_X['Embarked'].fillna(train_X['Embarked'].mode()[0], inplace = True)	1	1
full.loc[(full['Age'] > 32.102) & (full['Age'] <= 48.068), 'Age']   = 3	1	1
df_raw['Survived']	1	1
model.add(Dropout(0.6))	1	1
predictions.append(model.predict_proba(test)[:, 1])	1	1
Y_test.append(int(np.rint(y_[0][0])))	1	1
df_train.head().T	1	1
X['Age']	1	1
row['Deck']	1	1
"_df.loc[idx, ""name_first""] = ""Lucy Noel Martha Dyer-Edwards"""	1	1
train_df.drop(['PassengerId','Ticket','Name','Fare','Age','SibSp','Parch'],axis=1,inplace=True)	1	1
data.drop(data[data.Sex == 'female'].index)	1	1
"train_data[""TitleJonkheer""] = 0"	1	1
plt.boxplot(data1['Fare'], showmeans=True, meanline=True)	1	1
"GBT_result[0][""best_score""],"	1	1
data.loc[data.Sex=='female','Survived'].value_counts()	1	1
plt.rcParams['figure.figsize'] = (8.0, 8.0)	1	1
train_df['Fare'].fillna(train_df['Fare'].mean())	1	1
"copy[""Sex""] = copy[""Sex""].fillna(sex_median)"	1	1
"titanic_train_dataframe[""NormalizedFare""] = np.log1p(titanic_train_dataframe[""Fare""])"	1	1
train.drop(['PassengerId','Name','Ticket','Cabin'], axis= 1)	1	1
dataset['Sex'] = dataset['Sex'].replace('male', 0)	1	1
"output.to_csv(filename, index=False, header=[""PassengerId"", ""Survived""])"	1	1
data_pruned.groupby(['Pclass']).Fare.median()	1	1
"traindata.groupby(""Sex"").Survived.mean().plot(kind=""bar"")"	1	1
test_data.Age.fillna(value=test_data.Age.mode()[0], inplace=True)	1	1
data['Title']=data['Title'].str.replace('Mr.','124')	1	1
df1['Fare']=21.357921	1	1
df_norm_2.describe()	1	1
df.groupby(['Ticket'])	1	1
"df.drop([""age""], axis=1)"	1	1
df_train_all_num.head(5)	1	1
np.mean(training_scores, axis=1)	1	1
X_full['Pclass']=full['Pclass'] - 2	1	1
gauss_submission.to_csv('bayes.csv', index=False)	1	1
train['Sex'] = train['Sex'].map({1:'female', 0:'male'})	1	1
cabin.head(100)	1	1
test_data.Name_pred.apply(int)	1	1
df.loc[female & Class2,'Class'] = (1)	1	1
combine_df.groupby(['Title', 'Pclass'])['Age']	1	1
train_df_imputed.rename(columns={'Age_y': 'Age'}, inplace=True)	1	1
scaled_X_test.head()	1	1
"train.pivot_table(index = ""Pclass"", values = ""Survived"")"	1	1
data['FamilySize']=data['SibSp'] + data['Parch'] + 1	1	1
"test[""TicketGroupSize""],"	1	1
"train[""Survived""].value_counts().plot(kind=""bar"")"	1	1
train_copy['Embarked_Category'] = train_copy['Embarked_Category'].astype(int)	1	1
X.apply(lambda x: ' '.join(x), axis=1)	1	1
"df[""Fare_categories""] = pd.cut(df[""Fare""], cut_points, labels = label_names)"	1	1
"test_data[""Age""][((test_data['SibSp'] == test_data.iloc[i][""SibSp""]) & (test_data['Parch'] == test_data.iloc[i][""Parch""]) & (test_data['Pclass'] == test_data.iloc[i][""Pclass""]))].median()"	1	1
Test.drop('Age',axis=1)	1	1
"x[""Age""] = x[""Age""].fillna(x[""Age""].mean())"	1	1
"train_data.drop([""Survived""], axis = 1)"	1	1
model.best_score_['train']['auc']	1	1
df2.T	1	1
train_df.drop(['Parch',], axis=1)	1	1
df['fare_T'] = df.apply(lambda x: 3 if  x['Fare'] >= 31  else x['fare_T'], axis=1)	1	1
"_df.loc[i, ""title"" ] + "" ""+ _df.loc[i, ""name_first""] + "" "" + second + "" "" + _df.loc[i, ""name_last""]"	1	1
dataset['Title']   =   dataset['Title'].fillna(0)	1	1
"train_data.loc[train_data[""Sex""] == ""male"", ""Male""] = 1"	1	1
test3.head()	1	1
testdf['PassengerId']	1	1
df_data.pivot_table(values='Age', index=['Pclass'], columns=['Title'],aggfunc=np.median).values	1	1
dataset['WcgAllDied'] = (1 - dataset.loc[dataset['InWcg'] == 1].groupby('GroupId')['Survived'].transform(np.nanmean))	1	1
"test[""Embarked""].isnull().sum()   # count_nan_embarked_test = 0"	1	1
sns.boxplot(x='Parch', y='Age', hue='Survived', data=df3)	1	1
data['parents'] = data.apply(lambda x :                               1 if ((x.Ticket in (['2661', '2668', 'A/5. 851', '4133'])) & (x.SibSp==0)) else 0, axis=1)	1	1
titanic.drop('index',inplace=True,axis=1)	1	1
"full.set_value(full[""Title""] == ""Master"", ""Title"", 3)"	1	1
ax[0][1].set_title('Nonsurvivors')	1	1
train_df['Survived'].value_counts(normalize = True)	1	1
"full.groupby(""Title"").Survived.describe()"	1	1
traindf['FareBand'] = pd.qcut(traindf['Fare'], 4)	1	1
df_submit.to_csv('output.csv', index=False)	1	1
Xt_cat.apply(le.fit_transform)	1	1
df['decade'] = df['Age'].apply(lambda age: int(age/10))	1	1
"df_data[""Title""] = df_data[""Title""].replace(['Don','Jonkheer'],'Mr')"	1	1
"train.drop(labels=""Survived"", axis=1, inplace=True)"	1	1
test.drop(['Sex', 'Person'], inplace=True, axis=1)	1	1
"traindf.drop([""PassengerId""], axis=1, inplace = True)"	1	1
results['pred_time'] = end-start	1	1
join.iloc[0:891]	1	1
pd.DataFrame.as_matrix(dfTest[['Pclass','Age','Sex','Fare']])	1	1
train_data['Title'] = train_data.Name.map( lambda x: x.split(',')[1].split( '.' )[0].strip())	1	1
data.corr()['Survived'].sort_values(ascending=False)	1	1
data.loc[(data.Age > 37.5) & (data.Age <= 45), 'AgeBand'] = 3	1	1
"titanicDF[""Embarked""].value_counts().plot.pie()"	1	1
train_set['age_group'] = train_set.apply(lambda r: int(r.Age/2.5), axis=1)	1	1
data_test['Age'].std()	1	1
"train[""Age""].hist(width=6)"	1	1
test_X.drop(columns=['SibSp', 'Parch'])	1	1
data.loc[data['Sex']=='male','Survived'].value_counts().plot(kind='bar')	1	1
data['Ticket_info'] = data['Ticket_info'].astype('category').cat.codes	1	1
"test.loc[test[""Embarked""].notnull(), ""Embarked""] = LabelEncoder().fit_transform(test.loc[test[""Embarked""].notnull(), ""Embarked""])"	1	1
"df_train.loc[:,[""Age"", ""Embarked"", ""Fare"", ""Pclass"", ""Sex"", ""Cabin"", ""FamMem"",""Title"", ""isAlone"",""def_Cabin"",""rep_ticket"", ""fare/ticket"",""age*Pclass"", ""age*fare""]]"	1	1
train_df['noTicketRef'] = np.where(train_df['Ticket'].map(ticketInTrain)==1,1,0)	1	1
df['MaleCh'] = 0	1	1
train_data.loc[train_data['PassengerId'] == 767, 'Age'] = 30	1	1
pd.pivot_table(df_train, values='Survived', index=['Pclass'])	1	1
dataset.loc[(dataset['Age'] > 40.21) & (dataset['Age'] <= 48.168), 'Age'] = 5	1	1
df['Embarked'] = df['Embarked'].apply(lambda x: 1 if (x == 'Q') else (2 if (x == 'S') else 3))	1	1
col_corr.add(colname)	1	1
titanic_data['BigFamily'] = 0	1	1
"comb_data[""Survived""] = comb_data[""Survived""].astype(str)"	1	1
data.Fare.fillna(data.Fare.median(),inplace=True)	1	1
train_df.loc[train_df['Name'] == 'Mrs', 'Name'] = 'Miss'	1	1
df['U18'] = df['Age'] < 18	1	1
train_data.groupby(['Cabin'])['Survived'].sum() - 1	1	1
numeric_data.info()	1	1
train.Cabin.isnull().mean()	1	1
data.loc[data.Family==0,'Alone']=1	1	1
combined.notnull().sum()	1	1
"_both_df.drop([""group_id"", ""ticket_nb"", ""ticket_let"", ""name_last"", ""title"", ""name_first"",""name_second"", ""cabin_nb"", ""cabin_let""], axis=1)"	1	1
test_raw['Fare'] = test_raw.Fare.fillna(test_raw.Fare.mean())	1	1
dataset.groupby(['Sex', variable]).size()['female'].index.values	1	1
unknown_set.values.reshape((263,7))	1	1
titanic_df.drop(columns=['PassengerId'], inplace = True)	1	1
train_df['Embarked'] = train_df['Embarked'].map(embarked_mapping)	1	1
dataset['WcgAllSurvived'] = dataset.loc[dataset['InWcg'] == 1].groupby('GroupId')['Survived'].transform(np.nanmean)	1	1
test.loc[ test['Age'] > 64, 'Age']	1	1
titanic_df['Title'] == 'Master'	1	1
test_df['Fare'].fillna(test_df[(test_df['Pclass'] == 3)].mean(0)['Fare'], inplace = True)	1	1
dt_submission.to_csv('dec-tree.csv', index=False)	1	1
titanic['Fare']=df_train['Fare']	1	1
"df.Sex.apply(lambda x: x.lower() if x.lower() in [""female"", ""male""] else ""unknown"")"	1	1
"train.loc[train[""FamilySize""]==1, ""Single""] = True"	1	1
data_df['Cabin'] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in data_df['Cabin'] ])	1	1
train_test['Fare_Range']=pd.qcut(train_test['Fare'],12)	1	1
test_df.loc[(test_df['FamMembers'] >= 2) & (test_df['FamMembers'] <= 4), 'FamSize'] = 'small (2-4 members)'	1	1
features['features']= X.columns	1	1
np.median(rf_score)	1	1
Qtown.Cabin.replace(np.nan, 'N/A', inplace=True)	1	1
dfTrain['Age'] = dfTrain['Age'].fillna(dfCombined['Age'].mean())	1	1
train_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
processed_data[['Age', 'Fare', 'FamilySize', 'SibSp', 'Sex_female', 'Sex_male', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Embarked_C', 'Embarked_Q', 'Embarked_S']]	1	1
df_te1.loc[:, column_list]	1	1
data.Age.loc[(data.Age<0) & (data.alone==1) & (data.Personal_Titles=='Mr')] =    data.Age[(data.Age>=0) & (data.alone==1) & (data.Personal_Titles=='Mr')].median()	1	1
"train[""Name""].head()"	1	1
data_train.Survived.values	1	1
"_df[""status""]     = _df.childness.apply(lambda x : 2 if x > 0 else -1)"	1	1
each.loc[each['FamilySize']==1,'FamilySizeGroup'] = 'Alone'	1	1
csv_train_OneHot.fillna(0)	1	1
test_df.shape, train_df.shape	1	1
all_data.at[index,'Age'] = group_age_mapping[all_data.loc[index].at['Title']]	1	1
"roc_auc[""micro""] = auc(fpr[""micro""], tpr[""micro""])"	1	1
"df[""Title""]=df[""FullName""].map(lambda x: x.split(""."")[0].strip())"	1	1
titanic_train_data.loc[titanic_train_data.Embarked == 'C', 'Embarked'] = 1	1	1
pred.head(5)	1	1
score.append(rforest_model.score(X_val, y_val))	1	1
train_data[['Age','Survived']].groupby('Age',as_index=False).mean()	1	1
data['Alone'] = data['FamSize'].map(lambda x: 1 if int(x) == 0 else 0) # binary data on if the person was alone on the ship	1	1
test_df.loc[(test_df['Fare'] > 31) & (test_df['Fare']<=513),'Farecat'] = 3	1	1
data_df.groupby(['Ticket_Len'])['Survived'].mean()	1	1
data.groupby('AgeBand')['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')	1	1
x.values, df_tsne[df_tsne.Survived==0].y.values,	1	1
group['Ticket_count'] = full.Ticket.map(dict_tcount)	1	1
train_df.loc[:,['Age*Class','Age','Pclass']].head(10)	1	1
original_train_data.append(original_test_data)	1	1
features.loc[features.Fare.isnull(), 'Fare'] = features.Fare.mean()	1	1
"df_test.drop(labels=[""Survived""],axis = 1,inplace=True)"	1	1
"df.loc[(df.Survived == 1) & (df.Sex == ""female"") , :].count()"	1	1
full_data['Survived'].iloc[:891]	1	1
titanic_df['top_cabin'][titanic_df['top_cabin'] != 1] = 0	1	1
dataset['Title'] = dataset['Title'].replace(['Ms','Mlle'],'Miss')	1	1
"df[""pclass_3""] = df[""Pclass""].apply(lambda x : 1 if x == 1 else 0)"	1	1
sub_csv.to_csv('Submission.csv',index=False)	1	1
combined['Family'] = combined['SibSp'] + combined['Parch'] + 1	1	1
test.join(test_titles)	1	1
data_train_all['Title'] = data_train_all['Title'].replace(['Capt','Col','Major'],'Army')	1	1
dummy_df.drop('Sex_female', axis=1, inplace=True)	1	1
kids_no_family.loc[kids_no_family['Age']>8]	1	1
train_dataset.loc[(train_dataset['Age'].isnull()) & (train_dataset['Title']=='Rare'),'Age'] = 46	1	1
test2.drop(['Fare'], axis = 1)	1	1
df1.select_dtypes(include =['category']).columns	1	1
"res.describe().T.loc[:,  [""mean"", ""50%"", ""75%"", ""25%""]].plot(ax=ax)"	1	1
"df_train[""Embarked""] = df_data['Embarked'][:891] # Assign Columns to Train Data"	1	1
data.apply(to_lowest_numeric, axis=0)	1	1
sns.boxplot(data=combined,x='Pclass',y='Age')	1	1
train.groupby('Sex')	1	1
test_df['family_status'] = test_df['family_status'].replace(dict2)	1	1
df.to_csv('rfcresult.csv', index=False)	1	1
testingset.drop(['Age'], axis = 1)	1	1
df_test_ml['SurvivedSVC'] = svc.predict(X_predict_svc).astype(int)	1	1
np.mean(perc_scores)	1	1
testdf['Fare'] = testdf['Fare'].fillna(testdf['Fare'].mean())	1	1
dset.loc[356, 'FamCode'] = 46	1	1
train_df['Cabin'] = train_df['Cabin'].map(lambda x: x[0])	1	1
ship.drop(['Age_was_missing'],axis=1,inplace=True)	1	1
data.loc[(data['Age'] > 50),'Age'] = 3	1	1
test.loc[test['Cabin'].str.len() == 7.0, 'CabinN1'] = test['Cabin'].astype(str).str[1:3]	1	1
"titanic_train.drop([""Embarked""], axis=1,inplace=True)"	1	1
test_data['Survived'] = gender_data.Survived	1	1
survived_title['Rate'] = survived_title[1]/survived_title.sum(axis=1)	1	1
df_test['AgeRange'] = pd.cut(df_test['Age'], [0, 15, 40, 80], labels=['child', 'adult', 'aged'])	1	1
test[['Pclass','Sex','Age',]]	1	1
train.head() # display the first few rows	1	1
df['Age'] = df.Age.fillna(train_df.Age.median())	1	1
"dev_data[""Survived""]"	1	1
df['Pclass'] = df0['Pclass'].apply(lambda e: -1 if pd.isnull(e) else e)	1	1
"train[""Title""] = pd.Series(title)"	1	1
test['Embarked'].replace({'S':0,'C':1,'Q':2}, inplace = True)	1	1
pca.transform(X_test_std)	1	1
titanic_test['Sex'] = titanic_test['Sex'].map(d)	1	1
"combined_pre.shape, pd.read_hdf(fname,""pre"").shape"	1	1
submission.to_csv('titanic-predictions-4.csv', index = False)	1	1
titanic['Ptype']=np.where(titanic.Age<16,'child',titanic.Sex)	1	1
train.drop(['Age_2'], axis = 1, inplace = True)	1	1
data.sons.loc[data.PassengerId==1084] = 1	1	1
"train_df.loc[train_df[""Title""] == ""Countess"", ""Title""] = 'Rare Title'"	1	1
df['LargeF'] = df['Fsize'].map(lambda s: 1 if s >= 5 else 0)	1	1
"testdat[""gpsz""] = testdat[""SibSp""] + testdat[""Parch""] + 1"	1	1
all_data['Pclass'] = all_data['Pclass'].astype('category')	1	1
train.groupby(by = 'Sex')['Age'].describe()	1	1
df_train['log_age'] = df_train['age'].map(lambda a: 0 if a == 0.0 else np.log(a))	1	1
train_means[0]	1	1
"sns.boxplot(x=""target_name"", y=column, data=train_data, ax=plt.subplot(224));"	1	1
score_list_f1.append(cross_val_score(clf, data_now, trainLabel, scoring='f1', cv = 5).mean())	1	1
data_train_input.loc[data_train['Embarked']=='S','Embarked'] = 1   #male	1	1
"test_df[""NumberCabins""] == 0"	1	1
test.drop(['Sex'], axis=1)	1	1
combined_data.drop('Name_title',axis=1,inplace=True)	1	1
data_train['Age'] = data_train['Age'].fillna(data_train['Age'].median())	1	1
"bp[""n_estimators""]"	1	1
data_train1.head()	1	1
pclass_died_counts[0:3].sort_index()	1	1
"dataset[""PassengerId""]"	1	1
data.loc[(data['Age'] > 16) & (data['Age'] <= 40), 'AgeGroup'] = 2	1	1
"pd.pivot_table(train,index=[""Survived""], values=[ ""Unit""],aggfunc=np.sum)"	1	1
full_train2.head()	1	1
submission.to_csv('randonforest_titanic.csv', index=False)	1	1
full_df['Title'] = full_df['Title'].replace('Mlle', 'Miss')	1	1
data.surname_Hamalainen.astype('category')	1	1
np.mean(age[~df['Age'].isnull()])	1	1
ticket_table.loc[ticket_table['Dead_kid_on_ticket'] > 0, 'Dead_kid_on_ticket'] = 1	1	1
x.Age.mean()	1	1
not_survivors['par_ch'].value_counts().sort_index()	1	1
dfn.sum()	1	1
X.loc[row,'Cabin'].startswith('T'):	1	1
"data.loc[data[""Embarked""] == ""Q"", ""Embarked""] = 3"	1	1
"data.loc[data[""Embarked""] == ""Q"", ""Embarked""] = 2"	1	1
data.loc[data['Title'].isin(['the Countess'])]['Age']    # 33	1	1
nodelist.append(n)	1	1
"train_data[""Age""]=train_data.Age.fillna(train_data.Age.mean())"	1	1
df_train['Port']	1	1
df_train['FareBinCode'].unique()	1	1
df_train.Embarked.replace('S','Q',inplace=True)	1	1
test_df_bkp.head()	1	1
"titanic['Age'] = titanic[['Age','Pclass','Title']].apply(age_fix,axis=1) #The ""age_fix"" function is applied to ""titanic"" dataset"	1	1
dataset['Title'] = le.fit_transform(dataset['Title'].astype(str))	1	1
"results_df[""Predictions""] = predictions"	1	1
full.loc[full['Age'] <= 16.136, 'Age'] = 1	1	1
training_df['Sex_Index'] = training_df['Sex'].replace(['female', 'male'], [0, 1])	1	1
X_train.skew()	1	1
df.loc[((df.Sex == 2) & (df.Cabin == 0)) , 'Se_Ca'] = 3 #female without cabin	1	1
df_test['Age_index']=pd.cut(df_test.Age, bins=bins,labels=labels)	1	1
axes[0].set_title('Survivors by Age Groups Histogram')	1	1
df['Sex']  = pd.get_dummies(df.Sex, drop_first=True)	1	1
family_df.loc[family_df.FamilySize==2,'FamilyLabel'] = 'Couple'	1	1
"train[""Fare""].plot(kind='hist',bins=100)"	1	1
"dataset.loc[(dataset[""Age""] > 16) & (dataset[""Age""] <=32), ""Age_group""] = 1"	1	1
df_train['Age'].fillna(0, inplace=True)	1	1
df.hist(grid=True,bins=50, figsize=(10,10))	1	1
cleaned_df['Family'] = cleaned_df['Parch'] + cleaned_df['SibSp']	1	1
"df1.loc[:,[""Survived""]].values"	1	1
"sns.boxplot( x=train_set[""Pclass""], y=train_set[""Fare""], palette=PClass_palette, showfliers=True)"	1	1
"age1_df.drop([""Name"", ""Ticket"", ""Sex"", ""Fare"", ""Cabin"", ""Embarked"", ""PassengerId""], axis=1)"	1	1
dfTrain.join(Titles)	1	1
t.iloc[1,:]/t.sum()	1	1
train_x.drop(columns=['Survived'])	1	1
"survived[""Age""].plot.hist(alpha=0.5,color='green',bins=50)"	1	1
"ages_probabilities.drop([""index""],axis=1)"	1	1
"train_df[""Age""].dropna()"	1	1
test_data['Sex'] = test_data['Sex'].map( {'female': 1, 'male': 0}).astype(int)	1	1
df['Title'] = split_view.str[0]	1	1
dataset['Cabin'].describe()	1	1
df['Title'] = df['Name'].apply(lambda x: x.split(',')[1].split(' ')[1])	1	1
X.head(2)         # Header of the Predictor Variable (X)	1	1
X_test[['Sex', 'Pclass', 'Fare', 'Age', 'TraveledAlone']]	1	1
train_df.Age.plot.hist(bins = 20, ax= ax[0])	1	1
entire.groupby('Ticket')	1	1
feature_importance['feature'] = features	1	1
final['Survived']=results	1	1
"dt_test[""Fam_cat""] = pd.cut(dt_test.Family, intervals, labels=cats)"	1	1
data.iloc[:,0]	1	1
"_df.loc[_df.fare >200,""fare""] = 220"	1	1
training_data[['Survived']].values	1	1
df.loc[:,c].mean()	1	1
train['Age'] = train[['Age','Pclass']].apply(fill_na_age,axis = 1)	1	1
"submission.to_csv(""titanic_submission_logregres_tuned_scaled.csv"", index=False)"	1	1
"titanic_df.drop([""Survived""], axis=1)"	1	1
data['Status'] = status	1	1
test.loc[test['Age']<15,'child']=1	1	1
perf.append(getMetrics(y_test, y_pred, 'Decision Tree - Gini Impurity'))	1	1
df['isOld'] = 0	1	1
submission['Survived']=pred_test	1	1
data.PassengerId.values	1	1
train_df.loc[(train_df['Age'] >= 20.315) & (train_df['Age'] < 30.263), 'Age'] = 2	1	1
"lastname_table[""Lastname_id""]= pd.Categorical(lastname_table.index).codes"	1	1
"dataset[""Age3""] = 0"	1	1
values_gbc.Variable.head(25)	1	1
train_df[['SibSp', 'Survived']].groupby(['SibSp']).mean().sort_values(by='Survived', ascending=False)	1	1
test_df['TravelAlone']=np.where(test_df['TravelBuds']>0, 0, 1)	1	1
"GradientBoost.to_csv(""GradientBoost.csv"", index=False)"	1	1
train[['Salutation', 'Survived']].groupby(['Salutation'], as_index=False).mean()	1	1
df.loc[(df.NumFam > 1), 'FamSize'] = 1 #small families	1	1
t_df['person'].value_counts()	1	1
"rawdata.groupby(['Pclass', 'Survived'])['Survived'].count().reset_index(name=""count"")"	1	1
"df.drop("" Dona"", axis = 1)"	1	1
test_df.drop(['SibSp', 'Parch'], axis=1, inplace=True)	1	1
dataset['Gender'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
test_dataset.Age.fillna(rand_age)	1	1
model.add(Dropout(.3))	1	1
train_df_dummies_X.as_matrix()	1	1
data['Fare'] = data.Fare.fillna(data.Fare.mean())	1	1
best_iteration[2]:	1	1
it.product(*(d[feat] for feat in d))	1	1
data.sons.loc[data.PassengerId==540] = 1	1	1
"full_data[""AdultFemale""][(full_data[""Age""] > 18) & (full_data[""Sex""] == 'female')] = 1"	1	1
data.loc[data.Cabin.str[0] == 'C', 'Cabin'] = 3	1	1
"df.drop([""Sex""], axis=1, inplace = True)"	1	1
combined['Single'] = combined['family_size'].map(lambda s: 1 if s == 1 else 0)	1	1
data.iloc[:,[0,2,4]]	1	1
test_set.shape	1	1
clf.add(Dense(num_classes,activation='softmax',input_shape=(50,1)))	1	1
df_test.drop(to_drop, axis=1, inplace=True);             #drop columns from test dataset	1	1
data.loc[0:11]	1	1
train_X['Embarked'] = pd.Categorical(train_X['Embarked'], categories=['S', 'C', 'Q']).codes	1	1
comb['EQ'] = comb['Embarked'] == 'Q'	1	1
train_nonNullAge['Age'] = train_nonNullAge['Age'].apply(lambda x: ceil(x))	1	1
best_rf.best_params_.get('max_features'),	1	1
raw_train_data.head()	1	1
data['Age'].isnull().value_counts()	1	1
sub['PassengerID'] = ids	1	1
"ExtraTree.to_csv(""ExtraTree.csv"", index=False)"	1	1
train['Fare'].values.reshape(-1,1)	1	1
np.mean(pred==y_valid)  # accuracy on validation	1	1
titanic_df[['Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_C', 'Embarked_S', 'HasCabin', 'IsAlone', 'Title_Master', 'Title_Miss', 'Title_Mr', 'Title_Mrs']]	1	1
df['TitleScore'] = TitleScore_list	1	1
"X_train.drop(""PassengerId"",axis=1)"	1	1
titanic_df['CategoricalAge'] = pd.cut(titanic_df['Age'], 5)	1	1
train_csv['SimplifiedTitle'] = get_simplified_title(train_csv)	1	1
data['Survived'].value_counts().plot.pie(explode=[0,0.05],autopct='%1.1f%%',ax=ax[0],shadow=True)	1	1
training_df['Age_Index'] = pd.cut(training_df.Age, bins=age_bins, labels=age_labels)	1	1
axes[18].legend().set_visible(False)	1	1
test['SibSp'] = test.SibSp.astype(float)	1	1
data.Embarked.replace(('Southampton','Cherbourg','Queenstown'), (0,1,2), inplace = True)	1	1
"df_train[""high_prob_group""]=df_train[""title""].isin(lookfor).astype('uint8')"	1	1
test['Age']=test[['Age', 'Pclass']].apply(impute_age2, axis=1)	1	1
np.where(train[variable].isin(frequent_cat), train[variable], mode_label)	1	1
allset.head(20)	1	1
df_final['EmbkS'][df_final.Embarked == 'S'] = 10	1	1
features.head(5)	1	1
"train_data[""TitleCol""] = 0"	1	1
csv_final_test.info()	1	1
df_train['Ticket'].unique()	1	1
df_train.loc[(df_train['Fare'] > 14.454) & (df_train['Fare'] <= 31), 'Fare']     = 2	1	1
feats['surname'] = surname	1	1
df.Age.fillna(age_title_median, inplace=True)	1	1
y_test.T	1	1
data.Fare.hist(figsize=(15, 10), bins=50)	1	1
train_df[['Pclass', 'Sex', 'Survived']].groupby(['Pclass', 'Sex']).mean()	1	1
features.append('embarked_code')	1	1
dataInput.copy(deep=True)	1	1
train_data['Age'].fillna(train_data['Age'].mean(), inplace = True)	1	1
train[['FamilySize','Pclass','Survived']].groupby(['FamilySize','Pclass']).mean().sort_values(by='Survived', ascending=False)	1	1
combined.t_titles.isnull().sum()==0:	1	1
df2.info()	1	1
data.fillna(method='bfill')	1	1
title_age[['Title', 'Age']].groupby('Title', as_index=False).mean()	1	1
"df_train[""Mother""] = df_data[""Mother""][:891]"	1	1
train[['Age']].isnull().sum()	1	1
df.loc[df.Cabin == 'T']	1	1
train.drop(unused_col, axis=1)	1	1
test_df['Title'] = test_df['Title'].replace(['Lady', 'Countess','Capt', 'Col',                                             'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
pdf['IsMother'] = ((pdf['Age'] > 18) & (pdf['Title'] == 'mrs') & (pdf['Parch'] > 0)).astype(int)	1	1
"titanic[""Survived""].values"	1	1
train.fillna(value={'Age':ageMedian}, inplace=True)	1	1
"titanic_test_data.loc[titanic_test_data[""Sex""]==""male"",""Sex""] = 0"	1	1
df.loc[(df['AgeGroup']>19) & (df['AgeGroup']<=30), 'AgeGroup'] = 1	1	1
x_train['Embarked'] = le.fit_transform(x_train['Embarked'])	1	1
df_train['Family_Size'] = df_train['SibSp'] + df_train['Parch']	1	1
"testdat[""gpsz""][testdat[""gpsz""]>3]=3"	1	1
df_main.loc[:,['Age','Fare','SibSp','Parch']]	1	1
combined_df.drop(['PassengerId', 'Ticket'], axis=1)	1	1
test['Survived'] = clf.predict(X_test)	1	1
passengerIdValues['PassengerId'] = dfTest['PassengerId']	1	1
dataset['Cabin'] = dataset.Cabin.str.extract('([A-Z])', expand=False)	1	1
all_data.drop(['FareRange'], axis=1)	1	1
filt_df['has_cabin'] = filt_df['has_cabin'].notnull().astype('int')	1	1
data['k'] = (data['Survived'] == data['y_p'])	1	1
drop_elementsONSWAR.append('EditedAge')	1	1
"titanic.drop(""Ticket"", axis=1, inplace = True)"	1	1
"train_p['Age_new'][train_p[""Age""]<16] = 0"	1	1
plt.hist([data[data['Survived']==1]['Fare'],data[data['Survived']==0]['Fare']],bins=10,label=['Survived','Died'])	1	1
data.loc[(data['Age'] > 30) & (data['Age'] <= 50), 'Age'] = 2	1	1
df1['Pclass'].value_counts().plot.bar()	1	1
"data[""Name""] = data[""Name""].str.replace(""Sir"",""Mr"")"	1	1
"train_df[[""Ticket""]].values[0:10]"	1	1
train_df['FareRange'] = pd.qcut(train_df['Fare'], 4)	1	1
dataset.loc[(dataset.Fare.isnull()) & (dataset.Pclass == i+1),'Fare'] = fare_est[i]	1	1
dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),'Age' ] = guess_ages[i][j]	1	1
whole['Title'] = whole.Name.map(lambda x: re.search('\w+\.',x).group(0))	1	1
train_data.SibSp.describe()	1	1
dset.loc[dset['Age'].isnull(), 'Age'] = dset.loc[dset['Age'].isnull(), 'Title'].map(info)	1	1
features.append('age_f')	1	1
_train_df.dtypes	1	1
x['FamilySize'] > 0:	1	1
df_train['AdjFare'] = df_all[df_all['Dataset'] == 'train']['AdjFare']	1	1
dmodel.add(Dense(25, activation = 'relu'))	1	1
train_data.groupby('Pclass').agg('count')['Age'].plot.pie(title='Class', ax=axs[1, 1])	1	1
df.loc[(df['Fare']>14.454)&(df['Fare']<=31),'Fare_category']=2	1	1
data['Surname'] = data['Name'].str.extract('([A-Za-z]+)\,', expand=False)	1	1
train_copy.loc[train_copy['Parch'] == 0, 'Parch_Category'] = 0	1	1
test_X[['PassengerId','Survived']]	1	1
df_best_acc.iloc[0, 0] #	1	1
test_set['FareBand'] = test_set['FareBand'].cat.codes	1	1
dataset['EditedAge'][rowIndex] <= 18:	1	1
test.loc[test.Age.isnull() & (test.Title == i), 'Age'] = age_mean[i]	1	1
test_df['Fare'].fillna(test_df['Fare'].median(),inplace= True)	1	1
train_df.loc[train_df['Title'] == 'Miss', 'Title'] = 'Ms'	1	1
titanic_df['FamilySize'].unique() # unique familysize values.	1	1
data.Age.fillna(data.Age.median())	1	1
my_feature_columns.append(name_feature_columns())	1	1
train_df.groupby('Title')['Age'].mean()	1	1
test_df['Family'] = test_df['Family'].apply(changeFamily)	1	1
data['Age_cats'] = pd.cut(data.Age, interval, labels = categories)	1	1
Age.head()	1	1
temp_train['Title'] = labelencoder_title.fit_transform(temp_train['Title'])	1	1
df.boxplot(column='Age', by = 'New_Salutation')	1	1
data.loc[(data['Fare']>14.454) & (data['Fare']<=31), 'Fare_cat'] = 2	1	1
train.drop(columns='Sex', inplace=True)	1	1
test_df1.loc[:, ['Age']] = imputer_test.transform(test_df1.loc[:, ['Age']])	1	1
df.loc[(df['Sex']==a) & (df['Pclass']==b),'Title'].unique():	1	1
df['title_group'] = df['title'].apply(lambda t: title_groups[t] if t in title_groups else 'other')	1	1
params_init_l['num_threads'] = 16	1	1
"Filler_Ages.female.loc[row[""Title""], row[""Pclass""]]"	1	1
input_test_featured.head()	1	1
df.loc[df.Cabin=='T']	1	1
"train[""Embarked""].replace([""S"", ""Q"", ""C""], [0, 1, 2], inplace = True)"	1	1
"test[""title""] = train[""title""].replace('Mlle', 'Miss')"	1	1
test_df.loc[:,'PassengerId'],	1	1
val.sample(5)	1	1
all_data.set_value(841,'Deck',value=all_data.loc[772]['Deck'])	1	1
fpr2.append(count_fp/100.0)	1	1
"test_df.drop([""Survived""],axis=1)"	1	1
accuracies_svc.std()	1	1
"test.loc[(test[""Name""]==""Mrs"")&(test[""Age""].isnull()), ""Age""] = train.loc[train[""Name""]==""Mrs"",""Age""].mean()"	1	1
"train_df.loc[(train_df[""Age""]>32)&(train_df['Age']<48),'Age']=2"	1	1
test4['Embarked'] = le.fit_transform(test4['Embarked'])	1	1
df_train['Title'] = df_train['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Miss'})	1	1
data_train.replace(to_replace='female',value=0,inplace=True)	1	1
submission.to_csv('titanic_linear.csv', index=False)	1	1
train_df.drop(labels='Ticket', axis='columns', inplace=True)	1	1
df_all['Fare']=df_all['Fare'].fillna(fare_med)	1	1
train_cp['Title'] = train_cp['Title'].replace('Ms', 'Miss')	1	1
train_df.groupby('Title')['Survived'].aggregate('count').reset_index()	1	1
train.groupby(['Age1'])['Survived'].mean()	1	1
train_data.drop('Survived',axis=1)	1	1
train_df.groupby('Sharedticket').size().index,	1	1
train_df.drop(features_extra, axis=1)	1	1
df['Age'] = (df['Age']-df['Age'].min()) /(df['Age'].max()-df['Age'].min())	1	1
full_df['Embarked'] = full_df['Embarked'].fillna('S')	1	1
etc_reduced_final_test.drop(drop, axis = 1, inplace = True)	1	1
data.loc[mask_m,'Man'] = 1	1	1
"df.loc[df['Family'] == name,""FamilyMemberOnBoard""] = number;"	1	1
"XX[""CabinCat""]=X[""Cabin""].map(lambda x: first_letter(x))"	1	1
comb['FS_large'] = comb['Family_Size'].map(lambda x: 1 if x>=5 else 0)	1	1
dataset.drop(['PassengerId','Ticket'],axis=1)	1	1
"titanic_train.loc[titanic_train[""Embarked""] == 'S',""Embarked""] = 0"	1	1
clf_svm_tune_.cv_results_['mean_test_score']	1	1
df_train_ml['Age'].fillna(value=df_train_ml['Age'].mean(), inplace=True)	1	1
titanic_test['Mod_col_1']=col_2[:,0]	1	1
df2['is_miss']=[1 if i == 'Miss.' else 0 for i in df2.title]	1	1
gender_data['final_gender_data'] = gender_data.apply(sex_vs_survivor, axis = 1)	1	1
df['Deck'][df['Deck'] != 'X'], hue='Survived', data=df,	1	1
X_final_test['Name_title']= X_final_test['Name_title'].apply(lambda x: x.split()[0])	1	1
"df_titanic[[""Age"", ""SibSp"", ""Parch"", ""Pclass"", ""Sex""]].corr(),"	1	1
"df_test[""Age""].fillna(28,inplace=True)"	1	1
ship['Title_Code'].loc[(ship['Title_Code'] == 1) & (ship['Survived'] == 0)].count()	1	1
"test_set[""Fare""].fillna(train_set[""Fare""].median(),inplace=True)"	1	1
"df_train[""Age""] = df_train[""Age""].fillna(med)"	1	1
sns.boxplot(y='Fare', x='Embarked', ax=ax2, data=test_df, linewidth=1, saturation=5, order=['S', 'C', 'Q'], palette=palette3)	1	1
titanic.loc[titanic['Sex'] == 'male', 'Sex'] = 0        # turn string into int	1	1
full.loc['train']	1	1
"train_two[[""Pclass"", ""Sex"", ""Age"", ""Fare"", ""SibSp"", ""Parch"", ""Embarked"", ""FamilySize""]].values"	1	1
"train[""title""] = [i.replace('Jonkheer', 'rare') for i in train.title]"	1	1
"titanic_df.groupby('Embarked')['Survived'].sum().plot(kind=""pie"", autopct='%1.1f%%' , legend=""True"")"	1	1
"dataset_train[""Name""].describe()"	1	1
X_train['Fare'] = Norm(X_train['Fare'])	1	1
merged['PTitle'] = Title	1	1
row['age']	1	1
train['Alone'] = 1;	1	1
dataY.append(row[0])	1	1
label.transform(test.Sex)	1	1
test['Embarked'] =test['Embarked'].fillna('S')	1	1
"titanic_train[""Age""].dropna().astype(int).hist(bins=70, ax=axis1)"	1	1
"titanic.drop(""Cabin"", axis=1, inplace = True)"	1	1
test['Embarked'] = test['Embarked'].map(embarked_map)	1	1
X_test['Parch']	1	1
titanic_test['Embarked']=titanic_test['Embarked'].fillna('S')	1	1
embarked_dummy.drop(columns = ['S'])	1	1
x['FamilySize'] = x['Parch'] + x['SibSp']	1	1
dfTest['Sex'] = pd.factorize(dfTest['Sex'])[0]	1	1
"test[""Embarked_3""] = test[""Embarked""] == 'S'"	1	1
dataset['Title'] = dataset['Title'].replace('Mlle', 'Ms')	1	1
test.drop('Ticket', axis = 1)	1	1
train.drop(['Name','Age','PassengerId','Survived','Sex','Ticket','Cabin','Embarked'], axis=1)	1	1
"test_data[""Fare""].fillna(data[""Fare""].median(skipna=True), inplace=True)"	1	1
test_op.to_csv('titanicPrediction.csv', index=False)	1	1
df_submit['Survived'] = df_pred	1	1
train['P3'] = np.array(train['Pclass'] == 3).astype(np.int32)	1	1
all_df['Fare'].fillna(all_df['Fare'].mean(), inplace=True)	1	1
df['Man'] = (df['Man']).fillna(0)	1	1
combined_data['Cabin'] = combined_data['Cabin'][combined_data['Cabin'].notnull()].map(lambda c:c[0])	1	1
"ax[1].set_title(""Pclass: Survived vs Dead"")"	1	1
"full.set_value(full[""Family""] == ""singleton"", ""Family"", 0)"	1	1
new_train['FriendsSurvived'] = -1	1	1
acc_dict['mix'] += acc	1	1
ship.drop(columns_to_drop, axis=1)	1	1
train['Fare'][train['Pclass']==1]	1	1
dataset.loc[(dataset['Fare'] > 87.667) & (dataset['Fare'] <= 131.5), 'FareBand'] = 2	1	1
df['Name'].apply(lambda x: x.split('. ')[-1])	1	1
df.loc[(df['Survived'] == df['Pred_survived'])]	1	1
sub['Survived']=y_predict	1	1
data_train_x.fillna(0.0,inplace = True) #fill NaN values with zero.We write '0.0' because we want to fill with float values	1	1
df.loc[df.Age.isnull(),['Age']] = age_preds	1	1
row['Age'] <=1:	1	1
combined[['Fare']] = combined[['Fare']].fillna(value=unknownFare)	1	1
test_df['Embarked'].value_counts().plot(kind='barh', ax=ax2)	1	1
imr.transform(dfTest.values)	1	1
testdata.ix[testdata.Fare <= 7.775, 'FareCategory'] = 0	1	1
"X.drop(""PassengerId"", axis=1)"	1	1
comb_data.loc[(comb_data.Age.isnull()), 'Age'] = Age_pred	1	1
men.loc[full_train_set['Survived'] == 1].shape[0]	1	1
test['child'] = [1 if i<16 else 0 for i in test.Age]	1	1
df['Family'] = df['Parch'] + df['SibSp']	1	1
df_data.groupby('Embarked')['Fare'].median()[embarked.index(port)]	1	1
df[['Pclass', 'Fare']].groupby(['Pclass']).std() / df[['Pclass', 'Fare']].groupby(['Pclass']).mean()	1	1
dataframe1[['AgeBin','Survived']].groupby(['AgeBin'],as_index=False).mean()	1	1
copy_train_df.iloc[:, 1]	1	1
full.Ticket_Count.head()	1	1
combine['Family'] = combine['Parch'] + combine['SibSp']	1	1
X_valid.drop(feature, axis=1)	1	1
test_df['ID'] = train['PassengerId']	1	1
train['CabinBool'] = train['Cabin'].notnull().astype('int')	1	1
df_test['Family_members'] = df_test['SibSp'] + df_test['Parch']	1	1
train4['FamilySize'] = train4['SibSp'] + train4['Parch'] + 1	1	1
data1['IsAlone'].loc[data1['FamilySize'] > 1] = 0 # now update to no/0 if family size is greater than 1	1	1
np.transpose(x_train_data)[:, [0, 1, 3, 4, 5, 6]]	1	1
df['Gen_Clas']=df['Name'].apply(mr_mrs_other)	1	1
dat['isMrs'].fillna( 0, inplace = True)	1	1
titanic_test.drop(['SibSp', 'Parch', 'PassengerId', 'Name', 'Ticket', 'Embarked'], axis=1, inplace=True)	1	1
plt.hist(train['Fare'], bins=30, range=[0,300]) #number of bins chosen using the square root rule	1	1
titanic_train_df['Survived'].values	1	1
data_train.loc[data_train.Embarked.isnull()]	1	1
data['Title'] = data['Title'].map({'Master.': 0, 'Miss.': 1, 'Mr.': 2,'Mrs.':3}).fillna(4).astype(int)	1	1
dc['Age']  = dc.groupby(['female','ClassUp','ClassMid','ClassLow','SibSp','Parch','Title'])['Age'].transform(lambda x: x.fillna(x.median()))	1	1
grouped.ix[grouped.index.get_level_values(1)==col]	1	1
train['Age'].isna().sum()	1	1
train.index.size	1	1
df.groupby(['Pclass'])['Age'].median().values #get median values	1	1
y_pred.append('Deceased')	1	1
"Y.set_index(""Last_Name"",inplace=True)"	1	1
"train_df[[""Title"", ""Survived""]].groupby([""Title""], as_index=False).mean()"	1	1
"tab.div(tab.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True, ax=ax1)"	1	1
base_predictions_trainONS.head()	1	1
result['PassengerId'] = raw_test['PassengerId'].astype('int')	1	1
"test[""Age""] = test[""Age""].fillna(value=-0.5)"	1	1
joblib_load_best.named_steps['est']	1	1
data_groupBy_Class.mean()	1	1
df_train.head(n=5)	1	1
df.drop(['Cabin','Name','Ticket','Parch','SibSp','Sex'], axis=1, inplace=True)	1	1
X_Test.drop(['Embarked', 'Embarked_S'],axis=1)	1	1
testdata.ix[(testdata.Fare > 14.454) & (testdata.Fare <= 26), 'FareCategory'] = 3	1	1
data_df['IsChild'] = data_df['Title'].apply(lambda x: 1 if x == 'Master' else 0)	1	1
boy_femSurvival.head()	1	1
tot.drop(['Name','Ticket'],axis=1)	1	1
train_df[['Survived', 'Age']]	1	1
in ['Age','Parch','SibSp','Family_size']:	1	1
"test[""Family""] = (test[""SibSp""] + test[""Parch""]).copy()"	1	1
df_data['Survived']	1	1
df['Class3'] = np.where(df['Pclass']==3, 1, 0)	1	1
axes[0].set_ylabel('# Passengers')	1	1
"df_train[""Family_Size""] = 0"	1	1
"df.loc[df[""Age""] <= 16.336, ""Age""] = 0"	1	1
dfTest.drop(['Name'],axis=1,inplace=True)	1	1
imp.transform(featuresTestDummies)	1	1
train_df.loc[(train_df['Age'] > 30) & (train_df['Age'] <= 40), 'AgeGroup'] = 3	1	1
model.add(Dense(50, input_dim=10))	1	1
preferredOrder[1:5] # ignore `PassengerId`	1	1
train.loc[train['Sex']=='male','SexCategorical'] = 0	1	1
train.drop(labels=['Cabin'],axis=1,inplace=True)	1	1
sub_df.fare.std()	1	1
"train[""Fare""] = train.groupby(""Pclass"")[""Fare""].transform(lambda x: x.fillna(x.mean()))"	1	1
df_full.loc[mask_valid, data_columns] = scaler.transform(df_full.loc[mask_valid, data_columns])	1	1
df.Fare.median()	1	1
dataset['IsAlone'].loc[dataset['FamilySize']>1] = 0	1	1
no_family[['PassengerId', 'Group_size']]	1	1
combined.describe(include='all')	1	1
"models.append((""GaussianProcessClassifier"",  GaussianProcessClassifier))"	1	1
n[4] = 1 4	1	1
dataset['Title']=dataset['Title'].replace('Ms','Miss')	1	1
data.pivot_table('PassengerId', index = 'Pclass', aggfunc = 'count')	1	1
Xy[3]	1	1
train_data.drop(['Name', 'Ticket','Cabin'], axis = 1)	1	1
fig.layout.xaxis1.update({'title':'Age'})	1	1
predictions.to_csv('titanic_predictions.csv')	1	1
test.loc[(test['Name_len'] > 27) & (test['Name_len'] <= 32), 'Name_len'] = 3	1	1
data['Title_Dr'] = [1 if title in ['Dr'] else 0 for title in data['Title']]	1	1
row['Count']-1	1	1
"original_train_data['IsAlone']=(original_train_data[""SibSp""]+original_train_data[""Parch""]).apply(lambda x: 0 if x>0 else 1)"	1	1
test_df['Survived'] = (pred_survived_train4).astype(int)	1	1
test.values:	1	1
submission.to_csv('submissions_ada.csv', index=False)	1	1
"big['Last_Name'] = big['Name'].apply(lambda x: str.split(x, "","")[0])"	1	1
"train_data.pop(""Survived"")"	1	1
train_data_only_first_class_female_Cherbourg['Age']:	1	1
df['Age'].dropna()	1	1
"dataset[""Embarked""].replace([""S"", ""C"", ""Q""], [0, 1, 2], inplace = True)"	1	1
train.apply(lambda row: get_family_id(row, family_id_mapping), axis=1)	1	1
y_pred_submission[['PassengerId', 'Survived']]	1	1
data_copy.loc[data_copy['Embarked'] == 'Q', 'Embarked'] = 1	1	1
combined[1]	1	1
np.empty([n_loops,3],dtype=float)	1	1
valid_X['Title'] = valid_X['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)	1	1
family_data.reindex(columns=columnsTitles)	1	1
full['Title'] = full['Name'].str.extract(' ([A-Za-z]+)\.', expand=True)	1	1
"title_survive_transformed.groupby(""Survived"").apply(lambda column: column.sum()).transpose().drop([""Survived""])"	1	1
total_RMSE.loc[i] = RMSEs	1	1
data_eval.drop(columns=['Survived'])	1	1
np.empty([0,2])	1	1
dataf_to_ref[['Title','Age']][dataf_to_ref['Age'].notnull()].groupby('Title').mean()	1	1
train_df.ix[(train_df.Cabin == 'Z'), 'Cabinknown'] = 'No'	1	1
data.distinction_in_name.astype('category')	1	1
df['Embarked_Code'] = label.fit_transform(df['Embarked'])	1	1
data['Woman'] = (data[data.Sex=='female'].Age>=age_cutoff).astype(int)	1	1
acc_knn.std()	1	1
test_df.drop(['PassengerId','Name','Parch', 'SibSp', 'FamilySize'], axis=1).copy()	1	1
importances.tail(8).index.tolist()	1	1
output.to_csv('submission.csv', index_label = 'PassengerId')	1	1
"dataset['Sex'] = dataset['Sex'].apply(lambda x:1 if x==""male"" else 0)"	1	1
"logregsubmission.to_csv(""logregsubmission.csv"",index=False)"	1	1
X_test_stack.shape	1	1
trainONSWAR['Survived'].ravel()	1	1
"train_df.drop([""Cabin"", ""Ticket""], axis=1)"	1	1
original_train.Survived.values	1	1
total_result.describe()	1	1
train.cabin.fillna('U')	1	1
"df[""Title""] = df[""Title""].replace('Mme', 'Mrs')"	1	1
test_X.Age.fillna(test_X.Age.median(), inplace=True)	1	1
"family.pivot_table(index=""familysize"",values=""Survived"")"	1	1
LastNameResult.groupby(['counts'])['Survived'].sum()	1	1
final.tail()	1	1
Train_Master.loc[(Train_Master['Fare'] > 0.0) & (Train_Master['Fare'] <= 7.85), 'Fare'] = 1	1	1
train_df['FareBand'] = pd.qcut(train_df['Fare'], 20)	1	1
df_raw_train.drop('Survived', axis=1, inplace=True)	1	1
"train[""FamilySize""] = train[""FamilySize""].map({""Small"": 0,""Medium"" : 1,""Large"": 2})"	1	1
"test_set[""Embarked""].fillna(""S"",inplace=True)"	1	1
"pd.DataFrame.from_dict({""PassengerId"":ids,""Survived"":prediction.astype(np.int64)})"	1	1
data.loc[data.Survived == 1,'Age'].value_counts().sort_index().plot(figsize=(13,8))	1	1
data[['Age', 'Fare']] = ss.fit_transform(data[['Age', 'Fare']]) # standardizing Age and Fare for machine learning models.	1	1
"i[""FamilySize""] = np.where((i[""SibSp""]+i[""Parch""]) == 0 , ""Single"", np.where((i[""SibSp""]+i[""Parch""]) <= 3,""Small"", ""Big""))"	1	1
"train_df.drop(""Fareband"", axis=1, inplace=True)"	1	1
test_df.drop('Sex',axis=1)	1	1
dataset.loc[(dataset['Age']>=32)&(dataset['Age']<48),'AgeBand']=2	1	1
train.drop({'Cabin'}, axis=1)	1	1
test.drop(['Male'], axis=1, inplace=True)	1	1
"dataframe[""Title""] = dataframe[""Title""].replace([""Rev"", ""Dr"", ""Col"", ""Major"", ""Capt"", ""Lady"", ""Jonkheer"", ""Dona"", ""Don"", ""Countess"", ""Sir""], ""Other"")"	1	1
"combined.loc[tag.index,""family_has_couple""] = combined.loc[cp[0], ""cp_id""]"	1	1
dataframe.drop(labels = column_drop, axis = 1, inplace = True )	1	1
df['Male'] = train_Sex_male	1	1
"data[""Embarked""][i]!=""C"":"	1	1
df_clone.loc[fold[1],'M3_gradient'] = cls_gradient.predict(test.loc[:, columns])	1	1
X_full.drop('PassengerId', axis = 1, inplace=True)	1	1
model.add(tf.keras.layers.Dense(2,activation = tf.nn.softmax))	1	1
df_train['Survived'][df_train['Sex']=='female'].value_counts().plot.pie(explode=[0,0.2],autopct='%1.1f%%',ax=ax[1],shadow=True)	1	1
halloffame.update(population)	1	1
titanic_df['Embarked'].replace(['B','S','C','Q'], [0,1,2,3],inplace=True)	1	1
"titanic_df['Has_Cabin'] = titanic_df[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
dataset.loc[:, 'Title'].value_counts().sort_index()	1	1
data.loc[(data.Age.isnull()) & (data.Initial=='Miss'),'Age'] = 22	1	1
frame['female']=(frame.Sex=='female').astype(int)	1	1
"df[""Sex""] = LabelBinarizer().fit_transform(df[""Sex""])"	1	1
FeatureDF.replace({'Deck':DeckDict},inplace=True)	1	1
acc_gradiantBoosting.mean()	1	1
combine_df['Cabin_isNull'] = np.where(combine_df['Cabin'].isnull(),0,1)	1	1
data.loc[(data['Age']>cat[1]) & (data['Age']<=cat[2]),'Age']=2	1	1
dataset.loc[(dataset['Fare'] > 13) & (dataset['Fare'] <= 16.1), 'Fare'] = 2	1	1
numerical_columns.append('Ticket_surviving_men')	1	1
DataSetGender.shape	1	1
"holdout[""isalone""] = np.where(familySize_holdout>=1, 1, 0)"	1	1
"df.loc[ df[""Age""] <= 16, ""Age"" ] = 1"	1	1
tr_df['Age']=(tr_df['Age']-tr_df['Age'].mean())/(tr_df['Age'].max()-tr_df['Age'].min())	1	1
np.round(probabilities).astype(int).tolist()	1	1
split_count_df.mean(axis=1),	1	1
whole.set_value(478,'Fid',1) # Braund, couple with different price	1	1
"train_data[""TitleCat""] = train_data.loc[:,'Title'].map(title_mapping);"	1	1
df.Survived.astype(np.bool)	1	1
train_df.Cabin.isnull().mean()	1	1
data_train.iloc[:,1]	1	1
imp.transform(test_float)	1	1
plt.hist([y1,y2], bins = range(0,80,4), width = 4, edgecolor = 'black', linewidth = 0.5, color = [vert,rouge], histtype = 'barstacked', label = ['Survécu','Non-Survécu'])	1	1
"df.drop([""Name"", ""Ticket"", ""Cabin""], axis=1)"	1	1
"df[""Age""].median()"	1	1
nan_test_age.replace('nan', 30)	1	1
training_data['Survived']	1	1
dataset.loc[(dataset['Age']>16)&(dataset['Age']<=32), 'Age'] = 1	1	1
"df[""Age""] = df[""Age""].fillna(X[""Age""].mean())"	1	1
np.copy(centroids)	1	1
"train_data.drop(axis=1,columns=[""PassengerId"",""Name"",""Ticket"",""Cabin"",""Family_Size""])"	1	1
"randreg_submit.to_csv(""randreg.csv"", index=False)  # Kaggle: 0.75598"	1	1
titanic_test.drop(['Cabin'],1)	1	1
df_predict['Fare']=df_predict['Fare'].fillna(df_predict['Fare'].mean())	1	1
df['Name'] = df.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
"test_df[""family_size_category""] = pd.cut(test_df[""family_size""], [-1, 0.5, 3, 10])"	1	1
"results_df.to_csv(""Predictions"", index=False)"	1	1
val_app.append(val_acc)	1	1
merged.loc[(merged['Fare']>7.91)&(merged['Fare']<=14.454),'Fare_cat']=1	1	1
train_df['FareAdj'] = train_df['Fare'] / train_df['Ticket C']	1	1
X.sample(5)	1	1
df_train_features.drop(columns=['Cabin'])	1	1
"titanic[""Room""] = titanic[""Room""].fillna(titanic[""Room""].mean())"	1	1
train2.loc[mrs.index] = value_imp(mrs)	1	1
"train[""Family""] = train[""Family""].map({""Alone"" : 0, ""withFamily"" : 1})"	1	1
"test2[""PassengerId""],"	1	1
age_learn.assign(Age = age_rf.predict(age_learn[['Pclass', 'encodedTitle', 'SibSpGroup1', 'SibSpGroup2', 'SibSpGroup3', 'ParChGT2']]))	1	1
svc_model['CVScore'],	1	1
data['Embarked'].value_counts().index[0]	1	1
submission.to_csv('survive_or_not.csv')	1	1
titanic_df['Age']  =  titanic_df['Age'].astype(float)	1	1
train['prediction'] = clf.predict(train[features])	1	1
train.groupby('Sex').Survived.mean().plot(kind = 'bar')	1	1
"trainingset[""Survived""]"	1	1
csv.drop(columns=['PassengerId', 'Fare', 'Name', 'SibSp', 'Parch', 'Ticket', 'Embarked'])	1	1
X_train.drop(['Age','Embarked','AgeBand','Fare','IsAlone'], axis=1)	1	1
test.reset_index()['PassengerId']	1	1
"test.loc[test[""Sex""] == 'female', 'Sex'] = 1"	1	1
data.Cabin.fillna(value=(data.Cabin.value_counts().idxmax()), inplace=True)	1	1
"tp.loc[tp[""Ticket_g""]==""Others"",""Ticket_c""] = 0"	1	1
dataset['Familysize_cat'] = dataset['Familysize_cat'].astype(int)	1	1
"ax[0].set_title(""Embarkation counts"")"	1	1
vc_x_train.shape,vc_x_test.shape	1	1
"dataset[""Family""] = dataset['SibSp'] + dataset['Parch']"	1	1
survived_df.head()	1	1
train['Embarked'] = train['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})	1	1
data['Title'] = data['Title'].replace('Mme', 'Miss')	1	1
train_cp[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean()	1	1
tf.add(tf.matmul(W1, x), b1, name='Za1')	1	1
Ticket_Prefix.append('')	1	1
"X[""Age""].median()"	1	1
ds['features'] = features	1	1
test['Ticket_Cat'] = np.where(test.Ticket_Cat.str.isdigit(),  np.nan, test['Ticket_Cat'])	1	1
train_df.drop('Survived', axis=1).append(test_df)	1	1
the_df['FamilySize'] = the_df['SibSp'] + the_df['Parch']	1	1
best_bagging.best_params_.get('base_estimator__min_samples_split'),	1	1
data['Room'] = data['Cabin'].str.slice(1,5).str.extract('([0-9]+)', expand=False).fillna(-999).astype(float) # non cat feature	1	1
train.Embarked.iloc[829] = 'S'	1	1
imputed_data.drop('Survived',axis=1)	1	1
tdata.fillna(method='bfill')	1	1
"train.drop(labels=[""source""],axis = 1,inplace=True)"	1	1
"train[""FamilySize""] = train.SibSp + train.Parch"	1	1
train_X.shape[0]	1	1
data_whole.iloc[0:891,:]	1	1
plt.hist(train_data.Survived[pd.Categorical(train_data.Embarked).codes==1], color = 'green',label='')	1	1
train_data.drop('Survived', axis=1, inplace=True)	1	1
"data[[""Pclass"", ""Miss"", ""Mr"", ""Mrs"", ""Sex"", ""Age"", ""SibSp"", ""Parch""]]"	1	1
"titanic_df.groupby([""Pclass"",""Embarked""]).mean()[""Survived""][1].plot.bar(ax=axes[0] )"	1	1
"testdata[""Sex""] = testdata[""Sex""].map({""male"":0,""female"":1})"	1	1
dataset.loc[(dataset['Age'] > 34) & (dataset['Age'] <= 42), 'Age'] = 2,	1	1
titanic_2.head()	1	1
Data_test['Fare'] = Data_test['Fare'].fillna(Data_test['Fare'].median())	1	1
train_df.corr()['Survived'].sort_values()	1	1
train_df.corr()['Survived']	1	1
gs.best_params_['max_features'],	1	1
test2_df.drop(['Title'], axis = 1)	1	1
trainmodel.head()	1	1
dataset.loc[ (dataset['Age'] > -1) & (dataset['Age'] <= 20), 'Age'] = 1	1	1
x_test.shape[:]	1	1
"test.Title.replace(""Ms."", ""Miss."")"	1	1
misses.fillna(misses.median())	1	1
tr['Sex'] =tr['Sex'].replace('male',1)	1	1
train_X['Age'].fillna(train_X['Age'].median(),inplace=True)	1	1
data.loc[0:11,['Name', 'Sex', 'Ticket']]	1	1
dataset[['Survived','Age']].copy(deep=True)	1	1
dataset_to_train.loc[:, ['Survived']]	1	1
df_submit['Status'] = df_submit['Status'].str.replace(r'Dr|Rev|Col|Mlle|Major|Lady|Sir|Don|Capt|Mme|Jonkheer|Countess|Ms', 'Rare')	1	1
test['Embarked'] = test['Embarked'].fillna(1)	1	1
X.loc[:,'Age'].max()	1	1
np.round(knn.score(X_valid_norm, Y_valid), 4)	1	1
dfc.corr()	1	1
res[0]	1	1
tdata.drop('Embarked' , axis=1)	1	1
df['IsMale']=np.where(df.Sex=='Male',1,0)	1	1
"X_test.drop(""Name"", axis=1, inplace=True)"	1	1
train['Embarked_Q'] = train['Embarked_Q'].fillna(0)	1	1
df_train_all_num['Survived']	1	1
data.iloc[:891,:]	1	1
titanic_df['Class'] = titanic_df['Fare'].apply(Class)	1	1
predictions.to_csv('predictions.csv', index = False)	1	1
titanic_sibsp_group.apply(len)	1	1
train_df['Survived'] = train_results	1	1
train_data.describe(percentiles=[.1, .2, .3, .4, .5, .6, .7, .8, .9, 1.])	1	1
"train['Cabin'] = train['Cabin'].fillna(""Z999"")"	1	1
titanic_data.groupby('Embarked').agg('sum')[['Survived', 'Died']].plot(kind='bar', stacked=True, colors=['green', 'red']);	1	1
data['Initials'].value_counts() # to see the distinct values that were found.	1	1
full.Last_Name.sample(10)	1	1
output.set_index('PassengerId', inplace=True)	1	1
Data['Sex'] = Data['Sex'].astype('category').cat.codes	1	1
"data_train[""Age""] = data_train[""Age""].fillna(data_train.groupby([""Pclass"",""Parch""])[""Age""].transform(""mean""))"	1	1
submission.to_csv('sub_preds.csv', index=False)	1	1
X_final_test.drop(['Name'],axis=1)	1	1
test.join(test_pclass_frame)	1	1
"train[[""Pclass"", ""Sex"", ""Age"", ""Fare"", ""Embarked""]].values"	1	1
train_d.drop('Survived',axis=1)	1	1
np.round(forest_predictions)	1	1
data[888:894]	1	1
"total[""Title""] = total[""Title""].replace(['Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev'], 'Officer')"	1	1
train.loc[train['Sex']=='female']	1	1
df_train.append(df_test, ignore_index=True, sort=False)	1	1
train2_df.drop(['Title'], axis = 1)	1	1
train_df.merge(train_agg, on = 'ID', how = 'left')	1	1
test.drop(['PassengerId','Name','Sex','Ticket','Cabin','Embarked'],inplace = True,axis = 1)	1	1
converted_df.iloc[:, 0].values	1	1
test.pivot_table(index='Sex', values='PassengerId', aggfunc='count').plot(kind='bar', ax=ax[1])	1	1
tips.groupby(['day'])['total_bill'].median().values	1	1
dataset.set_value(rowIndex, 'Age66up', 1)	1	1
train[['AgeBand','Survived']].groupby(['AgeBand'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
model.add(Dense(1024, input_shape=(x.shape[1],), activation='relu'))	1	1
sns.boxplot(x='Pclass',y='Age',data=traindf)	1	1
t.loc[(t['Age'] > 25) & (t['Age'] <= 48), 'Age'] = 2	1	1
df.loc[train_index, :]	1	1
train_data.boxplot(column = 'Fare',by = 'Survived',ax = axes[1])	1	1
best_model['Model'].values[0]	1	1
test['Fare']=test[['Fare','Pclass']].apply(impute_fare,axis=1)	1	1
df_acc.append(valid_acc)	1	1
Data['Embarked'] = Data['Embarked'].fillna('S')	1	1
titanic_test.loc[titanic_test['Sex'] == 'male','Sex'] = 0	1	1
one_hot_survival_predictors.dtypes.sample(10)	1	1
df.loc[idx_ok, ['Age']].values	1	1
df_result.to_csv('../working/titanic_1-2.csv', index=False)	1	1
df_scores.append({'Layers': i, 'Activation' : a, 'Score': clf.score(trainXNN, trainY), 'CVScore': np.mean(cross_val_score(clf, trainXNN, trainY, cv=2))}, ignore_index=True)	1	1
full.loc[full.Age.isnull(), 'Age'] = np.median(full['Age'].loc[full.Age.notnull()])	1	1
titanic.iloc[y_test.index.values]['Survived']	1	1
testdf.drop('PassengerId', axis=1)	1	1
"df_test[""high_prob_group""]=df_test[""title""].isin(lookfor).astype('uint8')"	1	1
test.drop(labels = ['Cabin', 'Ticket'], axis = 1, inplace = True)	1	1
data['Title_Class'] = data.apply(lambda row: title_dict.get(row.Title), axis = 1).astype(int)	1	1
"df_new[""Survived""]"	1	1
titanic['Fare'] = titanic['Fare'] / titanic['Same_Ticket']	1	1
all_data.loc[:, 'Title'] = all_data['Name'].apply(get_title)	1	1
training_itemList.append(getTicketType(ticket,False))	1	1
"train[[""Pclass"", ""Sex"", ""Age"", ""Fare"", 'Embarked_C', 'Embarked_Q', 'Embarked_S']].values"	1	1
df['title_status'] = df['title_status'].replace(['Dr', 'Mme', 'Ms', 'Major', 'Lady', 'Sir', 'Mlle', 'Col', 'the Countess', 'Dona'], 'Mrs')	1	1
train_df.reindex(np.random.permutation(train_df.index))	1	1
"titanic[[""Pclass"", ""Survived""]].groupby([""Pclass""], as_index= False).mean()"	1	1
df_titanic.loc[0:890,]	1	1
"X_logistic[""SexAndAge""] = X_logistic[""Age""] * X_logistic[""Sex""]"	1	1
"train[[""Ticket_group"", ""Survived""]].groupby(['Ticket_group'],as_index=False).mean()"	1	1
titanic_df['ticket_prefix'] = ticketprefix.values	1	1
data_test_input.loc[data_test['Sex']=='female','Sex'] = 2#female	1	1
test_copy.loc[test_copy['Parch'] == 3, 'Parch_Category'] = 3	1	1
gb.describe()	1	1
data2row['PassengerId'] == data1row['PassengerId'] and data2row['Survived'] != data1row['Survived']:	1	1
df['Sex']=='male'	1	1
data_train_df['Cabin'] = data_train_df['Cabin'].astype(str)	1	1
"df[['Cabin']] = df[['Cabin']].fillna(value=""Unknown"")"	1	1
titanic.drop(['Ticket'], axis=1, inplace=True)	1	1
test.loc[test['Sex']=='male','Gender']=0	1	1
"tot[""RT""] = tot.RT.map(lambda x: str(x)[0])"	1	1
df_train.age.mean()	1	1
dfTrain['Title']=dfTrain.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
"train['Title']=train['Title'].map({""Mr"": 1, ""Miss"": 2, ""Mrs"": 3, ""Master"": 4, ""Rare"": 5}).astype(int)"	1	1
data_df['SurvivedTour'] = data_df['SurvivedTour'].fillna(-1)	1	1
data_test_input.loc[data_test['Embarked']=='Q','Embarked'] = 3  #child	1	1
gird_result.named_steps['selector']	1	1
"df.drop([""PassengerId""], axis=1, inplace = True)"	1	1
training_df1.loc[:, ['Survived']]	1	1
out.head()	1	1
df_train.sort_values(by='FarePP', ascending=False).head(10)	1	1
all.loc[all['Survived'].isin([np.nan]) == False]	1	1
"test[""Age_3""] = (15 <= test[""Age""])&(test[""Age""]<30)"	1	1
df['FamSize'] = df['SibSp'] + df['Parch']	1	1
titanicTrain1.append(titanicTrain2)	1	1
ax[0].set_yticks(range(0,550,50))	1	1
train['child'] = 0	1	1
dfTest.join(Titles)	1	1
test['Cabin']=test['Cabin'].fillna(0)	1	1
train_df.drop('Cabin_T', inplace=True, axis=1)	1	1
"DataSetTrain[""Sex""].value_counts().nlargest(10)"	1	1
X_test['Fare'].fillna(X_train['Fare'].median(), inplace = True)	1	1
test['farePP'] = (test['Fare'] / (test['famSize'] + 1.0)).round(1)	1	1
"df_best_acc.index.values[0]; print(f""best_acc_index: {best_acc_index}"") # インデクスを取得して"	1	1
"newDF.groupby(""isChild"")[""Survived""]"	1	1
df.loc[(df['AgeGroup']>30) & (df['AgeGroup']<=40), 'AgeGroup'] = 3	1	1
clean_data['Survived'].value_counts()	1	1
df['CabinLoc'][df['CabinLoc'] != 'unknown'], hue='Survived', data=df,	1	1
train_features['Embarked'] = train_features['Embarked'].fillna('S',axis=0)	1	1
my_feature_columns.append(tf.feature_column.numeric_column(key=key))	1	1
dataset.loc[ dataset['Age'] > 72.042, 'Age'] = 9	1	1
titanic['Survived'] = df_train['Survived']	1	1
train_df.groupby('Ticket')['PassengerId'].count()	1	1
"train_df.drop([""Survived"",""PassengerId"", ""Name"", ""Ticket"", ""Cabin""], axis=1)"	1	1
score_list.append(rf.score(x_test,y_test))	1	1
plt.hist(female_data.Age, bins=sex_bins, alpha= .5, label ='females')	1	1
dft.iloc[:-1,:].iplot(kind='bar',title='SibSp: Survived Vs Dead')	1	1
"dfTrain['Sex']=dfTrain['Sex'].map({""male"":0,""female"":1})"	1	1
"test_data[""Fare""][np.isnan(test_data[""Fare""])] = np.random.randint(mean_Fare - std_Fare,mean_Fare+ std_Fare,null_count_Fare_test)"	1	1
dataset['SibSp'] + dataset['Parch']	1	1
"importance.sort_values(by=""importance"", ascending=False)"	1	1
titanic['Age'].plot(kind='hist',bins=30,xlim=(0,75),figsize=(12,4))	1	1
"train.drop([""SibSp"",""Parch""], axis=1)"	1	1
train_df['AgeBand'] = pd.cut(train_df['Age'], 20)	1	1
"dataset[""Pclass""][x]==3:"	1	1
t[0] == '1':	1	1
train.loc[train['Survived'] == 0,'Pclass']	1	1
np.mean(y_train == y_train_preds_svm)	1	1
"training_df[""Embarked""].unique()"	1	1
"dataframe1.drop([""AgeBin""],axis=1)"	1	1
test_df['Fare']/test_df['FamMembers']	1	1
"ds_submission.to_csv(""all_dead.csv"", index=False)"	1	1
test['Family_Survival'] = data['Family_Survival'][len(train):]	1	1
raw_df['Title']=raw_df.apply(replace_titles, axis=1)	1	1
"test[""Fare_2""] = (20 <= test[""Fare""])&(test[""Fare""]<40)"	1	1
model.transform(data)	1	1
train_data.Age.fillna(joined.Age_y, axis=0)	1	1
full.head(n=10)	1	1
df['Sex'] = df['Sex'].replace({'male': '1', 'female': '0'})	1	1
data[['Age','Pclass','Sex']].dropna()	1	1
test.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Fare'], axis=1, inplace=True)	1	1
test_null['Age'].index.tolist()	1	1
droped_dataset.iloc[0:891,:]	1	1
final_test.drop(['SibSp', 'Parch'], axis = 1, inplace = True)	1	1
feats['Fare'].fillna(desc['mean'], inplace=True)	1	1
data.name_title.replace([' Mr',' Master', ' Miss', ' Mrs', ' Rare Titles'],[0,1,2,3,4], inplace = True)	1	1
dt.loc[(dt['Age']>32)&(dt['Age']<48),'Age']=2	1	1
merged_df['Age'].median()	1	1
scores.append(classifier.score(x, y))	1	1
df.to_csv('Results.csv', index=False)	1	1
_data.copy()	1	1
X['Age'] = X['Age'].fillna(np.mean(X['Age']))	1	1
"test.drop([""Cabin"", ""Name"", ""Ticket""], axis=1)"	1	1
merged.loc[(merged.Age.isnull())&(merged.NameTitle=='Mrs'),'Age']=37	1	1
accuracies.append(knn_score)	1	1
curated_data.loc[ train['Fare'] > 30, 'Fare'] =1	1	1
Answer['Survived']=lg.predict(test[['Male','Class','EmbarkedNum','FamilySize']])	1	1
y_hat.to_csv('accountant_titanic_05.csv', index=False)	1	1
full_set['Title'] = full_set['Title'].replace('Ms','Miss')	1	1
data['Travelling_alone'] = np.where(data['Travelling_alone'] > 0, 0, 1)	1	1
"ax[1].set_ylabel(""change of weights"")"	1	1
df_train.join(title_one_hot)	1	1
result.to_csv(path_or_buf='knn_submittion.csv', index = False, header = True)	1	1
"dad_s['Pclass'].value_counts(sort=False).plot(kind=""bar"",alpha=0.5,color='red',ax=axes[1,0])"	1	1
df.loc[df['Fare']<=7.91,'Fare_category']=0	1	1
drop_train.drop(['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked'],axis=1)	1	1
train.Ticket.nunique()	1	1
dfTrain.drop(['Name'],axis=1,inplace=True)	1	1
df_train['Fare'].max(), df_test['Fare'].max()	1	1
test.drop(['Pclass','Sex','Name','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Age'],axis=1)	1	1
tt['DeckKnown'] = tt['Deck'].apply(lambda x: 1 if x == 'U' else 0)	1	1
test_Y01.shape	1	1
df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)	1	1
train_df.drop(['Ticket', 'CabinLetter'], axis=1)	1	1
train['Sex'].groupby(train['Sex']).count()	1	1
row['Title'] == 'Lady':	1	1
newDf.select_dtypes(['number'])	1	1
"in [""sex"", ""pclass"", ""embarked""] :"	1	1
"data.select_dtypes(include = [""object""]).columns"	1	1
df_train['Age'] = df_train['Age'].fillna(np.float64(130))	1	1
"test[""Family""] = test[""SibSp""] + test[""Parch""]"	1	1
X_test['Sex'].loc[X_test['Sex']=='male'] = 1	1	1
"df_j['age'].dropna().hist(ax=ax, color=colors[j], alpha=.3, bins=bins, label=""sex: {}"".format(j))"	1	1
in ['Dr', 'Rev', 'Major', 'Col', 'Capt', 'Major']:	1	1
Age.hist(figsize=(70,30), bins=7)	1	1
agetraindf[[  'Class1',  'Class2',  'Class3']]	1	1
titanicTrain.drop('Cabin',1)	1	1
pd.merge(titanic1, titanic2, how='outer')	1	1
full_set['Age'][full_set['Age'].isnull()] = full_set['Age'].median()	1	1
"row[1][""Survived""] > 0.1:"	1	1
x['FreqLastName']	1	1
"train[[""FamilySize""]].head()"	1	1
together['isalone'] = '?'	1	1
data_parch.loc['male'].plot(kind='bar', color='magenta', ylim=[0, 1])	1	1
dataset['GroupId'] = dataset['SPTE'].apply(spte_group_lebeler)	1	1
i['FamilySize'] = i.apply(getFamilySize, axis=1)	1	1
"df_all['Ticket_info'] = df_all['Ticket'].apply(lambda x : x.replace(""."","""").replace(""/"","""").strip().split(' ')[0] if not x.isdigit() else 'X')"	1	1
df_results['val_Confusion'] = str(confusion_mat)	1	1
train_x.drop(['Age'], 1)	1	1
test.head()['Name']	1	1
"df_train.pivot_table(""Name"", ""Embarked"", ""Survived"", ""count"").plot(kind=""bar"", stacked=True)"	1	1
combined.drop('Parch', inplace=True, axis=1)	1	1
test7['Fare'] = test7['Fare'].fillna(test7['Fare'].median())	1	1
feats.iloc[:n], sex[:n], embarked[:n], cabin_not_null[:n],	1	1
train_df['Family_Size'] = data['Family_Size'][:891]	1	1
df['miss_perc'] = (df[df.columns[0]]/(df[df.columns[0]] + df[df.columns[1]]))	1	1
df_test_ml['Title'] = df_test_ml['Title'].replace(man_regular, 1)	1	1
test_df.copy(deep=True)	1	1
family_df.loc[:,'FamilySize'] =  family_df['SibSp'] + family_df['Parch'] +1	1	1
"test[""Survived""] = rf.predict(test_data_X)"	1	1
data.Age.fillna(nan_sub)	1	1
"train[""Age""] = train[""Age""].fillna(29)"	1	1
train_df.isnull().any().sum()	1	1
df['AgeBand'] = 0	1	1
train.loc[train['Cabin'].str.len() == 11.0, 'CabinN1'] = train['Cabin'].astype(str).str[1:3]	1	1
training_data['Name']	1	1
"train_df[""Title""] = train_df[""Name""].apply(title_mapper)"	1	1
"a[""FamilySize""] = (a[""SibSp""].values + a[""Parch""].values + 1)"	1	1
trainingData['is_test'] = 0 # this will be helpful when we split up the data again later	1	1
df[['cabin_letter','Name']].groupby(['cabin_letter']).count().rename(columns={'Name': 'passenger_count'})	1	1
test_X.drop(columns='Name')	1	1
X_train.drop('Survived',axis = 1)	1	1
y_train.head(10)	1	1
"df[""Fare""]/df[""rep_ticket""]"	1	1
train_data_prep['Cabin_Lett'].value_counts()	1	1
train.pivot_table(index = ['Pclass'],values = ['Survived'])	1	1
dataset.loc[(dataset['Age']>16)&(dataset['Age']<=32),'Age']=1	1	1
x.drop(['Name', 'SibSp', 'Parch', 'Age', 'Fare', 'Title'], axis=1, inplace=True)	1	1
df.apply(lambda x: x.isnull().sum())	1	1
train_dataset.drop(labels=['Cabin'], axis=1)	1	1
family_survived.div(family_survived.sum(axis=1), axis=0)	1	1
id_df.join(predicted)	1	1
np.dot(layer_2_delta,syn1.T) # Bx1 X 1xH ~ BxH	1	1
sex_test.replace(['male', 'female'], ['0', '1'])	1	1
train_csv['Family'] = 0.0	1	1
test_means[0]	1	1
"test[""Embarked""].fillna(0, inplace=True)"	1	1
df_final.head(10)	1	1
"a[""CatFare""] = pd.qcut(a[""Fare""], 4)"	1	1
row[8] = float(row[8])  # to make a float	1	1
estimators['LogisticRegression'] = linear_model.LogisticRegression()	1	1
df.drop(j, axis = 1)	1	1
data.loc[ (data['Age'] >33) & (data['Age']<=40),'Age'] = 5	1	1
train['HasFamily'] = pd.Series(len(train['Parch']), index = train.index)	1	1
test_set['Title'] = test_set['Title'].str.replace('(Dr|Rev|Col|Major|Sir|Capt)', 'Occupation')	1	1
test_df['Name'].index.tolist()	1	1
feats.append(feat)	1	1
"dt_train[""Age_cat""] = pd.cut(dt_train.Age, intervals, labels=cats)"	1	1
X_age_dummied_test['Parch_3'] = np.zeros(len(X_age_dummied_test))	1	1
x_train.head(5)	1	1
df['Ticket']=df['Ticket'].apply(lambda x: cleanTicket(x))	1	1
merged.Cabin.apply( lambda x : x[0])	1	1
full_models['set3'] = {}	1	1
df.loc[accompanied_females, 'Accompanied_female_age_band'] = df.loc[accompanied_females, 'Age band']	1	1
"train_df['Title'] = train_df['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
train_with_age_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)	1	1
df_lr_coeff['Correlation'] = pd.Series(logreg.coef_[0])	1	1
data_train.loc[:,['Survived','Parch']].groupby('Parch').mean().plot(kind='bar')	1	1
titanic.drop('Survived',axis=1)	1	1
submission['Survived'] = pd.Series(predicao)	1	1
"test[""Fare_scaled""] = minmax_scale(test[[""Fare""]])"	1	1
dataset.loc[(dataset['Fare']<=31.0) & (dataset['Fare']>14.454),'Fare'] = 2	1	1
data['Family_Size']=data['Parch']+data['SibSp']	1	1
output.to_csv('survived_submission.csv', header=True, index=True, sep=',')	1	1
test_dummy.head()	1	1
test.drop(labels=['Name'], axis=1)	1	1
df.index.values.tolist()	1	1
df['IsMale'] = np.where(df.Sex == 'male', 1, 0)	1	1
model_results.append(gbc_results)	1	1
dataset['Fare'][rowIndex] != dataset['Fare'][rowIndex]:	1	1
"train[""Age""]:"	1	1
feature_extractor.transform(data_test)	1	1
test['Age']=test['Age'].fillna('5')	1	1
test['Sex'] = test['Sex'].apply(lambda x:1 if x == 'female' else 0)	1	1
df.groupby('A')['B'].transform('median')	1	1
Corr.sort_values('Chi 2 Pval',ascending=True,inplace=True)	1	1
dftr['Ticket']	1	1
dataset['Name'] = dataset.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
"test_df.drop(columns={""Name"",""Cabin"",""Ticket"",""PassengerId""},inplace=True)"	1	1
"plt.hist(df_train.loc[df_train[""Survived""]==1,""Fare""], label = ""Survived"", alpha = 0.3)"	1	1
a.sort_values(by=['Values'], ascending=True, inplace=True)	1	1
"df['LastName'] = df['Name'].apply(lambda x: str.split(x, "","")[0])"	1	1
combined.head(891).Embarked.fillna('S', inplace = True)	1	1
test.loc[((test['Mrs']==1) | (test['Ms']==1) | (test['Miss']==1) | (test['Dona']==1)),'FemaleTitle'] = 1	1	1
full.loc[full.Age.isnull(),:]	1	1
test_soft_pred_matrix.set_index([testdex])	1	1
test[['PassengerId', 'Survived']].to_csv('First_Logistic_Regression.csv', index=False)	1	1
train.Family.loc[train.Family > 0] = 1	1	1
train_df_dummies.shape	1	1
y_eval.iloc[i]:	1	1
test_raw['Age'] = test_raw.Age.fillna(test_raw.Age.mean())	1	1
"test[""call""] = test[""Name""].apply(find_call)"	1	1
test['Cabin_isnan'] = 1	1	1
data['Sex'].head()	1	1
data['Sex'] = data['Sex'].map({'male': 0, 'female': 1}).astype(int)	1	1
dataset.loc[ dataset['Fare'] > 32, 'Fare'] = 3	1	1
child12_dead.PassengerId.count()	1	1
df_train.index.size	1	1
"train_data[[""Name"", ""Sex"", ""Age"", ""Pclass"", ""Fare"", ""Embarked"", ""SibSp"", ""Parch"", ""Cabin"", ""Ticket""]]"	1	1
test_copy['Embarked_Category'] = 0	1	1
dataset_train['Ticket_Initials'] = lb_Ticket_init.fit_transform(dataset_train.Ticket_Initials)	1	1
featured_set['Survived']	1	1
seg_by_embarked['Embarked'].count()	1	1
test_df['Embarked'].fillna('S', inplace=True)	1	1
"ax1.hist(train['Age'][sel_age_fin][sel_age_male], bins, normed=0, alpha=0.75, label=""male"")"	1	1
data['Family_Size']=data['SibSp']+data['Parch']+1	1	1
xval_ex_df['Survived']	1	1
df_train.iloc[:,1:8]	1	1
df['Train'] = df['Survived'].notna() * 1	1	1
classifiers.append(est)	1	1
df.loc[(df.NumFam > 5), 'FamSize'] = 3 #big families	1	1
drop_attri.transform(validation_attri.values)	1	1
"test[""Age_2""] = (4 <= test[""Age""])&(test[""Age""]<15)"	1	1
train['Sex'][train['Survived'] == 0].value_counts()	1	1
join['Title'] = join['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	1	1
"titanic_test[""Embarked""]= titanic_test[""Embarked""].fillna(""S"")"	1	1
df_test['Deck'] = pd.Series([re.split('(\d.*)',s)[0][0] for s in df_test['Cabin']])	1	1
"train_df.loc[train_df[""Title""] == ""Jonkheer"", ""Title""] = 'Rare Title'"	1	1
train[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
train['Sex'] = train['Sex'].apply(transform_sex)	1	1
train_df.isnull().sum()/ len(train_df) *100	1	1
np.empty((NFOLDS, ntestONSWAR))	1	1
np.round(soft_x_val_score.mean()*100, 2)	1	1
"test_data[""Age""].median()"	1	1
"combined_df[""Title""] = train_df.Name.map(get_title)"	1	1
"train_df[[""Fare"",""Pclass"",""Embarked""]].groupby([""Pclass"",'Embarked']).describe()"	1	1
family['Family_Large'] = family['FamilySize'].map(lambda s: 1 if 5 <= s else 0)	1	1
df.groupby('Embarked').count().orderBy('count',ascending=False).head()[0]	1	1
combined[0]	1	1
results['f_train'] = fbeta_score(y_train,predictions_train,beta=0.5)	1	1
"X_dum.drop([""Ticket"", ""Cabin""], axis = 1, inplace=True)"	1	1
data.iloc[len(traindf):]	1	1
train.drop(['PassengerId','Pclass','Sex','Name','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Age'],axis=1)	1	1
train_df.drop(columns=['Age','Name','Ticket','Cabin'], inplace=True)	1	1
train['age_quantile'].describe()	1	1
X_text.shape	1	1
"data_frame[""Title""] = [name.split("", "", 1)[1].split(""."", 1)[0] for name in name_data]"	1	1
dat['isDr'].fillna( 0, inplace = True)	1	1
data.loc[data.Age > 45, 'AgeBand'] = 4	1	1
titanic_sub['Sex'] = titanic_sub['Sex'].map({'male':0,'female':1})	1	1
"titanic['Ticket'].value_counts().head(20)   # A quick value count of ""Ticket"""	1	1
test.loc[train.new_Parch > 1, 'new_Parch'] = 2	1	1
df_FULL.join(pd.get_dummies(df_FULL[['Deck']]))	1	1
imput.transform(X)	1	1
train_df.head(n=3)	1	1
data['Initial'] = 0	1	1
dataset.Name.head(10)	1	1
data['Has_Cabin'] = (data.Cabin.str.get(0).fillna('Z') != 'Z').astype('int32')	1	1
score_acc.append(accuracy_score(Y_train,Y_pred))	1	1
"titanic_df.drop(""Survived"",axis=1), titanic_df[""Survived""],"	1	1
"tot[""LT""] = tot.Ticket.map(lambda x: str(x.split("" "")[0])[0] if len(x.split("" "")) >1 else np.nan)"	1	1
test_data.set_value(index,'AgeRange','15-30')	1	1
"plt.hist(np.round(np.log2(df.query(""Fare > 0"").Fare), 2), bins=45)"	1	1
"X_train_dataset.drop(""Hypothesis"", axis=1)"	1	1
df.to_csv('titanic_submission_dt.csv', index=False, header=True)	1	1
filt_df['has_family'] = filt_df['sibling_count'] + filt_df['parent_child_count']	1	1
"X[[""Title"", ""Survived""]]"	1	1
train2.loc[train2['Name'].str.contains('Mrs.')]	1	1
"i.loc[i[""CabinCount""] == 2,[""CabinType""]] = ""Double"""	1	1
data_copy.loc[data_copy.Sex == 'male', 'Sex'] = 1	1	1
train_df['age'].plot.hist(bins=h_bins, alpha=.3)	1	1
"sns.boxplot(""Survived"", ""Age"", data = train)"	1	1
tdf['age'] = tdf.age.fillna(tdf.age.median())	1	1
my_data.describe()	1	1
"dataset['CabinClass'] = dataset['Cabin'].astype(str).map(lambda x: re.sub('^(\w)?.*', '\\1', x) if x != ""nan"" else None )"	1	1
"test[[""Sex"", ""Age"", ""Pclass"", ""Fare""]].values"	1	1
df_full.loc[mask_zerofare]	1	1
train[['Cabin', 'PassengerId']]	1	1
dataset.loc[(dataset['Sex'] == 'female') & (dataset['Parch'] > 0) & (dataset['Title'] == 'Mrs'), 'IsMother'] = 1	1	1
df_comb['TkDup'] = df_comb.Ticket.isin(dataset_dup['Ticket'])	1	1
train_copy['Pclass_Category'] = train_copy['Pclass_Category'].astype(int)	1	1
train.iloc[:, [0]].values	1	1
train.groupby(['Title', 'Pclass'])['Age'].median()	1	1
"sns.boxplot(x=""Sex"", y=""Age"", hue=""Survived"", data=data);"	1	1
df_comb.loc[[28, 76, 89, 129]]	1	1
"X[[""Ticket""]].apply(extract_prefix, axis=1).values.reshape(-1, 1)"	1	1
columns.append('train_%s_%s' % (var, stat))	1	1
df.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Embarked'], axis=1, inplace=True)	1	1
test.drop(['Cabin','Name','PassengerId','Ticket'],axis=1)	1	1
titanic_test.loc[titanic_test['Sex']=='male','Sex']=0	1	1
combined['Age_Null_Flag'] = combined['Age'].apply(lambda x: 1 if pd.isnull(x) else 0)	1	1
"data_test.drop(""Embarked"", axis=1, inplace = True)"	1	1
df_train[['Embarked', 'Survived']].groupby(['Embarked']).mean().plot.bar()	1	1
combine['Title'] = combine['Title'].map( {'Mr': 0, 'Mrs': 1, 'Miss': 2, 'Master': 3, 'Rev': 4, 'Dr': 5} ).astype(int)	1	1
train.groupby(['Sex'])[['Survived']].mean()	1	1
"related_people.loc[related_people[""PassengerId""]==418,""RGroup""]=""Lahtinen_M"""	1	1
data.groupby(['Embarked'])['Survived'].mean()	1	1
test_data['Sex'].isnull().sum()	1	1
titanic_data.Age.fillna(titanic_data.Age.median())	1	1
"test_data_1.loc[test_data_1.Age < 18,""Child_col""] = ""Child"""	1	1
"train[""Title""] = train[""Name""].str.extract(""\,\s(.*?)\."" , expand=True)"	1	1
pca.transform(X_train_scaled)	1	1
"copy_train_df.ticket.fillna(train_df[""ticket""].mode()[0], inplace=True)"	1	1
combine['LuckyAnna'] = np.where((combine['FirstName']=='Anna'),1,0)	1	1
train['Embarked'][train['Survived']==1].value_counts().sort_index()	1	1
tr.loc[(tr['Age']<16),'Child']=1	1	1
whole.set_value([672,984],'Fid',188) #display(whole[whole.Name.str.contains(r'Davidson|Hays')])	1	1
test.info() #we are showing 1 row where Fare is null. We cannot simply drop this column	1	1
"df[""Age""] = df[""Age""].astype(int)"	1	1
Train_Master.isnull().sum(axis=0)	1	1
testdf['Fare'].fillna(df['Fare'].median(), inplace = True)	1	1
titanic['Pclass']=titanic['Pclass'].replace(labels)	1	1
"data_copy.loc[data_copy[""Embarked""] == ""C"", ""Embarked""] = 1"	1	1
coeff_df['correlation'] = logreg.coef_.ravel()	1	1
ax.hist([data[data['Survived']==1]['FamilySize'],data[data['Survived']==0]['FamilySize']],color = ['g','r'],)	1	1
new_data.drop(labels=category_labels,axis=1)	1	1
"df_female_class[""Age""].median()"	1	1
Y_age.Age.isnull()	1	1
scores_lr.std(),	1	1
train_data['Name']	1	1
validation_dataset['Cabin']:	1	1
train['E2'] = np.array(train['Embarked'] == 'C').astype(np.int32)	1	1
combined_features.drop('Embarked', axis=1, inplace=True)	1	1
"data_combined[""Fare""][data_combined[""Survived""] == 1]"	1	1
raw_train_df.describe()	1	1
data_full.loc[data_full['Fare'].isnull(), 'Fare'] = data_full.loc[data_full['Pclass'] == 3, 'Fare'].median()	1	1
df_train.dropna(subset=['Age'])	1	1
test.loc[(test['Age'] < 10), 'Child'] = 1	1	1
train['Fare'].fillna(train.groupby('Pclass')['Fare'].transform('median'),inplace = True)	1	1
df_test.drop(['PassengerId'],axis=1,inplace=True)	1	1
p[0]	1	1
"data[""Age""] = age_slice"	1	1
test['Cabin'] = test['Cabin'].apply(lambda x : x[0] if x != 'None' else 'None')	1	1
df_train['Embarked'] = df_train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} )	1	1
reviews['points'].value_counts().sort_index().plot.line()	1	1
Test.drop('SibSp',axis=1)	1	1
train_dat.loc[train_dat['Survived'] == 1]['Fare'].dropna()	1	1
test[['PassengerId', 'Survived']].set_index('PassengerId').to_csv('LS5.csv')	1	1
df_test['Sex_bool']=df_test.Sex.map(context1)	1	1
df.drop(Variables,axis=1)	1	1
age.mean(), age.std()	1	1
data['Pc1'] = (data['Pclass']==1).astype(int)	1	1
"train_data[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean()"	1	1
dataset['Age'][np.isnan(dataset['Age'])] = avg_age	1	1
"processed_dataframe[""Pclass""] = dataframe[""Pclass""].copy()"	1	1
"data[""Fare_group""] = ""NaN"""	1	1
raw_train.describe()	1	1
dataset_train['Name_Length'] = ((dataset_train.Name_Length)/15).astype(np.int64)+1	1	1
df_train.pivot_table(index='Sex', columns=age_bin, values='Survived')	1	1
plt.hist(x=[data1[data1['Survived'] == 1]['Age'], data1[data1['Survived'] == 0]['Age']], stacked=True, color=['g', 'r'], label=['Survived', 'Dead'])	1	1
titanic_sex_group.apply(len)	1	1
test_dataset.iloc[:,0].values	1	1
"related_people.loc[related_people[""PassengerId""]==1211,""RGroup""]=""Renouf_M"""	1	1
test.drop(['source','Survived'],axis=1)	1	1
raw_train.loc[(raw_train['Title']=='Dr') & (raw_train['Sex']=='female'),'Title'] = 'Mrs'	1	1
"copy_train_df.apply(pd.to_numeric, errors = ""coerce"")"	1	1
melb_data_subset.describe()	1	1
data.loc[(data['Fare']>=15)&(data['Fare']<31),'Fare']=2	1	1
train.iloc[ix]	1	1
"dt_solution.to_csv(""my_solution_two.csv"", index_label = [""PassengerId""])"	1	1
dataset['Name'].apply(lambda x: x[:x.find(',')])	1	1
dataset['fare'] = qcut	1	1
nwdata1[['Age', 'Survived']].groupby(['Age'], as_index=False).mean()	1	1
test['Fare'].values.reshape(-1,1)	1	1
"res.fillna(method=""bfill"")  # if first one is nan"	1	1
df_train['Embarked'].replace(['S', 'C', 'Q'], [0, 1, 2], inplace=True)	1	1
df.drop(['Alone'], axis=1, inplace=True)	1	1
train1.describe()	1	1
titanic['confidence'] = group_survival['confidence']	1	1
np.round(logreg.score(X_train_norm, Y_train), 4)	1	1
data_out['Cabin_Lett'] = np.where((data_out['Cabin_Lett']).isin(['n', 'C', 'B', 'D', 'E', 'F', 'A']), data_out['Cabin_Lett'], 'None')	1	1
"died[""Age""].plot.hist(alpha=0.5,color=""blue"",bins=50)"	1	1
my_imputer.transform(imputed_val_X)	1	1
allset.drop(['Sex'],axis=1)	1	1
"cv_results.append(cross_val_score(model, X_train, y=y_train, scoring=""accuracy"", cv=kfold, n_jobs=4))"	1	1
train_df.iloc[0:5]	1	1
y_test_pred_final.head()	1	1
titanic_train.join(person_dummies_titanic)	1	1
data_test_all.Fare.hist(bins=20)	1	1
data_frame.drop('Pclass',axis=1,inplace=True)	1	1
df_test['HasCabin'] = df_test['Cabin'].isnull().astype(int)	1	1
features_normalized.drop(['Cabin', 'PassengerId', 'Name', 'Ticket', 'SibSp', 'Parch'], axis=1)	1	1
X['y'] = y	1	1
"titanic_df.groupby('Embarked')['Survived'].sum().plot(kind=""bar"" ,figsize = (10,10), grid = 10 ,logy = 0, title = ""No of survivors from each station "").set_ylabel(""Frequency"")"	1	1
train_valid_y.head()	1	1
sns.boxplot(train_data['SibSp'])	1	1
"train_p['Gender'][train_p['Sex']==""male""] = 1"	1	1
dataset['AgeBand'].cat.categories,	1	1
plt.hist(test_df['Age'].dropna(),bins=80)	1	1
dataset['AgeBin_Code']=label.fit_transform(dataset['AgeBin'])	1	1
"train_df[""Embarked""][61] = str('S')"	1	1
trainPCA2['1'] = trainPCA[:,0]	1	1
df_train[['Parch','Survived']].groupby('Parch').mean().sort_values(by='Survived',ascending=False)	1	1
X_df.head(5)	1	1
"test.loc[i,""Commentaire""] = float(""nan"")"	1	1
"dataset.drop([""PassengerId"",""Ticket"",""Cabin""], axis=1)"	1	1
df_train['fare_bin'] = df_train['fare_bin'].astype('int')	1	1
"train_df[[""Pclass"", ""Survived""]].groupby(['Pclass'], as_index=False).mean()"	1	1
test_df[['PassengerId','Name']]	1	1
params['clf_forest'] = grid_search.best_estimator_	1	1
test_data.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)	1	1
df['Title'] != 'Ms'	1	1
"test_data.drop([""Name"", ""Ticket"", ""Family"", ""Parch"", ""SibSp""], axis=1)"	1	1
data['ClassLow'] = data.apply(lowerclass,axis=1)	1	1
"train[""Sex""].replace({""male"": 0, ""female"": 1}, inplace=True)"	1	1
data_df.copy()	1	1
dataset.set_value(rowIndex, 'Age11to13', 1)	1	1
X.fillna(method='ffill')	1	1
combined.loc[test.index]	1	1
data['is_minor'] = np.where(data['Age'] <= 16, 1, 0)	1	1
test_data['Age'].fillna(test_data['Age'].median(), inplace= True)	1	1
missing_values_table.rename(columns= { 0: '欠損数', 1: '%'})	1	1
data['genre'] = data.Sex.apply(lambda x: 1 if x=='male' else 0)	1	1
df[0:891].drop(['Survived','PassengerId'], axis=1).values	1	1
"training.drop(labels=[""PassengerId"", ""Survived""], axis=1) #define training features set"	1	1
predictions.astype(int, copy=False)	1	1
data_train.loc[:,['Survived','Pclass']].groupby(['Pclass']).sum()	1	1
"train_set[""Survived""].ravel()"	1	1
test_df['Pclass'] = test_df['Pclass'] / 3	1	1
comb.join(gender_dummies)	1	1
titanic_df.loc[master_mask, 'Age'] = titanic_df.loc[master_mask, 'Age'].fillna(titanic_df[titanic_df.Title == 'Master'].Age.mean())	1	1
row[8] > fare_ceiling:	1	1
ordered.items():	1	1
res['Fare'].mean()	1	1
train_data['CategoricalAge'] = pd.cut(train_data['Age'],5)	1	1
layers_dims[0]	1	1
"train_set.drop([""Survived"",""PassengerId""] , axis=1)"	1	1
clfs.append(randomForest)	1	1
survived_age['Survived'] = survived_age['Survived'].astype(int)	1	1
results_kfold.append((K,res.mean()*100, res.std()*100))	1	1
titanic_data['Age'] = titanic_data['Age'].fillna(titanic_data['Age'].median()) # imputing null values with median value temporarily	1	1
titanic_submission.head(10)	1	1
df['name_prefix'] = df.name.apply(lambda x: x.split(' ')[1])	1	1
"df_train[[""embC"",""embQ"",""embS""]]=pd.get_dummies(df_train[""Embarked""], dtype=""uint8"")"	1	1
pd.isnull(pasngr_cabin):	1	1
dft.iloc[:-1,:].iplot(kind='bar',title='Parch: Survived Vs Dead')	1	1
"submission.to_csv(""../output/submission.csv"",index = False)"	1	1
df_test_ml['SurvivedLRE'].rename('Survived')	1	1
df['Name'] = df['Name'].replace('Ms', 'Miss')	1	1
"train[""Gender""] = 0"	1	1
df1['Sex'] = np.where(df1['Sex']== 'male', 1 , 0  )	1	1
trainONS.values # Creates an array of the train data	1	1
frame['TicketSurv'] = frame.Ticket.replace(tick_surv)	1	1
features.align(test_features, join = 'inner', axis = 1)	1	1
the_best_result['model'].predict(X_test)	1	1
concat_set['FamilySize'] = concat_set['SibSp'] + concat_set['Parch'] + 1	1	1
df['Name_len'] = df['Name'].apply(lambda x: len(x)).astype(int)	1	1
df['N_ticket'] = df['Ticket'].apply(lambda f: ticket_values[f])	1	1
family_df_t.head()	1	1
"titanic_df.groupby([""Pclass"",""Embarked""]).mean()[""Survived""][3].plot.bar(ax=axes[2] )"	1	1
"input_data[""Embarked_C""] = input_data[""Embarked""].apply(lambda x: int(x == ""C""))"	1	1
test.Age.fillna(age_mean,inplace=True)	1	1
"train.loc[train[""FamilySize""]==1, ""FamilyType""] = ""Single"""	1	1
test['c_mean']	1	1
"df2[""Fare""].mean()"	1	1
train.loc[train.new_Parch > 1, 'new_Parch'] = 2	1	1
titanic[['Survived', 'Sex']].groupby('Sex').mean()	1	1
dft.drop('Sex',axis=1, inplace=True)	1	1
train.loc[train['Fare']>31,'Fare_cat']=3	1	1
cost.append(np.sum(np.abs(a_2-y))/y.shape[0])	1	1
pd.merge(df1,df2, left_index=True, right_index = True)	1	1
train['Family'].loc[train['Family'] > 1] = 'withFamily'	1	1
df3.copy()	1	1
params['clf_knn'] = grid_search.best_estimator_	1	1
data['MaidenLastName'] = data['MaidenName'].str.rsplit(' ', expand = True, n=1)[1]	1	1
"train[""Age""][(train[""Age""] > 48) & (train[""Age""] <= 64) ] = 3"	1	1
traind.info()	1	1
Titanic_dataframe.loc[a, 'Last_Rep'] = Last_rep[str(i)]	1	1
allset.drop(['Name'],axis=1)	1	1
rawdata['Party']=rawdata['SibSp'] + rawdata['Parch']	1	1
"combine[1][""kmeans_labels""] = pd.Series(kmeans.predict(tmp_test))"	1	1
"df_train[""title_mr""] = df_train[""title""].isin([""mr.""]).astype('uint8')"	1	1
full_dataset.drop(['PassengerId'],axis=1,inplace=True)	1	1
sns.boxplot(x='Embarked', y='Fare', data=df_train)	1	1
submission.to_csv( 'titanic_pred_KNN.csv' , index = False )	1	1
dataset['Deck'] = dataset['Cabin'].map(lambda x: re.compile('([a-zA-Z]+)').search(x).group())	1	1
data[['Age']] = data[['Age']].fillna(value=data[['Age']].mean())	1	1
dataset.loc[(dataset['Age'] > 50) & (dataset['Age'] <= 60), 'AgeGroup'] = 2	1	1
df.to_csv('titanic_test_kaggle_submission.csv', index_label='PassengerId')	1	1
df_combined.info()	1	1
data.Age.loc[(data.Age<0) & (data.parents==1) & (data.Personal_Titles=='Mrs')] =    data.Age[(data.Age>=0) & (data.parents==1) & (data.Personal_Titles=='Mrs')].median()	1	1
data_train.Age.fillna(data_train.Age.mean(), inplace = True)	1	1
titanic_test.drop(titanic_test.columns[7], axis = 1) # Removing the cabin column as it contains more nan than data.	1	1
feats.set_index('feats', inplace=True)	1	1
X_train['Sex'] = X_train[X_train['Sex'].map({'female':0, 'male':1})]	1	1
importance['importance'] = xlf.feature_importances_	1	1
training_data.drop(labels='Ticket', axis=1, inplace=True)	1	1
titanic_data[['Survived', 'Age']];	1	1
df2['Sex'] = lb_t.fit_transform(df2['Sex'])	1	1
df['Title'] = df['Title'].astype('category').cat.codes	1	1
x['Age']=pd.cut(x['Age'],bins=[-100,1,10,20,40,60,100],labels=['invalid','small','teen','adult','matured','old'])	1	1
"test[""Pclass""].isnull().sum()"	1	1
va.shape	1	1
train['Person'] = train[['Age', 'Sex']].apply(person, axis=1)	1	1
df.isna().sum()[df.isna().sum() != 0]/df.shape[0] * 100	1	1
"combined[""Title""] = pd.Series(combined_title)"	1	1
"df_test[""Family""] = df_test[""SibSp""] + df_test[""Parch""] + 1"	1	1
data_test_all.head()	1	1
train_20['Survived']	1	1
simple_train_df.drop('Survived', 1)	1	1
test['Embarked']=test['Embarked'].apply(lambda x:Embarked_map[x])	1	1
X_stats['Max'] = np.max(X, axis = 0)	1	1
known_age_data.drop('Age', axis=1).values	1	1
ages.groupby('Age').agg(['mean','count'])	1	1
y_pred.to_csv('titanic_pred_rfc.csv',index=False)	1	1
dataset.loc[fil2, 'Cabin'] = 1	1	1
full.set_value(index, 'Title', 'Mrs')	1	1
dataset['Title'] = dataset['Title'].replace('Ms', 'Mrs')	1	1
df[['Age','Master','Miss','Mr','Mrs','Others','Fare-bin','SibSp']]	1	1
df_data['FamilySize'] = df_data['SibSp'] + df_data['Parch'] + 1	1	1
titanic['Sex'] = labelEncoder.fit_transform(titanic['Sex'])	1	1
encoder.transform(train)	1	1
train.drop(['Cabin_T', 'family_size','Ticket','Name', 'Fare','name_length'], axis=1, inplace=True)	1	1
df['Cabin_available'] = df['Cabin'].isnull()	1	1
df_test['age_jnr'] = df_test['Age'].apply(lambda x: 1 if x <= 10 else 0)	1	1
X_train['age'] = X_train.age.apply(lambda x: np.sqrt(x))	1	1
sex_survived.loc[1, 'male']	1	1
"full_data[""FamilySize""] = full_data[""SibSp""] + full_data[""Parch""]"	1	1
"train_df.pivot_table(index=""Fare_categories"",values='Survived')"	1	1
df.loc[index,'Rare']=1	1	1
data['SibSp'].unique():	1	1
abs_feature_importance_ordered.items():	1	1
dataset.loc[dataset['WcgAllDied'].isna(), 'WcgAllDied'] = 0	1	1
df.loc[(df['AgeGroup']>18) & (df['AgeGroup']<=30), 'AgeGroup'] = 2	1	1
kaggle['PassengerId']	1	1
titanic_train_data.Embarked.fillna(0, inplace=True)	1	1
training_set['Survived'].values	1	1
test_dataset['Title'].replace(['Lady','Countess','Capt','Col','Don','Dr','Major','Rev','Sir','Jonkheer','Dona'],'Rare',inplace=True)	1	1
"train[""Embarked""] = train.Embarked.fillna(""C"")"	1	1
"coefficient_dataframe[""Features""] = pd.Series(list(logistic_training_X.columns))"	1	1
sex['Samples'] = samples['Survived']	1	1
train.groupby('Sex').apply(top, n=5, column='Fare')	1	1
train_df[['PassengerId']]	1	1
test_df['Fare'].fillna(test_df['Fare'].median(),inplace=True)	1	1
"dftrain[""Ticket""].value_counts()[:6]"	1	1
dataset.loc[(dataset['Age']> 48) & (dataset['Age']<=64), 'Age'] = 3	1	1
"X_validation.loc[((X_validation.Parch > 0) & (X_validation.Title_Miss == 0) & (X_validation.Sex_male == 0) & (X_validation.Child_col == ""Adult"")),""Mother_col""] = ""Mother"""	1	1
submission['Survived'] = classifier_rf.predict(data_test) #Here is were the predictions were made! ^^	1	1
RF_submission.to_csv('RF-submission.csv', index=False)	1	1
full['Age'] = full.groupby(['Pclass', 'Sex', 'Title'])['Age'].transform(lambda x: x.fillna(x.mean()))	1	1
plt.boxplot(data)	1	1
df['Embarked'].isna().sum()	1	1
titanic_train['Embarked'] = titanic_train['Embarked'].fillna(titanic_train['Embarked'].dropna().mode()[0])	1	1
data_set['Title'] = data_set['Title'].replace('Mlle', 'Ms')	1	1
train_data.iloc[:, 1:8].values	1	1
titanic_test_data.apply(get_family_id, axis=1)	1	1
raw_test.copy()	1	1
train_df['Embarked'] = train_df['Embarked'].map({'S': 1, 'C': 2, 'Q': 3})	1	1
data['Family'] = data['SibSp'] + data['Parch'] + 1	1	1
pred['class_ids'][0]	1	1
"train_df.drop([""Name"", ""Parch"", ""SibSp""], axis=1, inplace=True)"	1	1
train['Cabin'] = train['Cabin'].apply(lambda x: 'Z' if x is np.nan else x[0])	1	1
df_dums['age_2']=[1 if (ele <= 10.) & (ele > 5.) else 0 for ele in df_dums['Age']]	1	1
submission.to_csv('gender_submissionrandom.csv', index=False)	1	1
full_df['FamilySizeCategories'] = full_df['FamilySize']	1	1
"missing.loc[(missing['missing_ratio']>0)]    .sort_values(by=[""missing_ratio""], ascending=False)"	1	1
x['Age'] = 29	1	1
comb['Cabin'] = comb['Cabin'].map(lambda x:x[0])	1	1
X_train['FamilySize'] = X_train['SibSp'] + X_train['Parch'] + 1	1	1
data['Embarked'] = data['Embarked'].fillna('S') # most common value	1	1
df_test['Survived'] = y_pred.astype(int)	1	1
test.loc[(test['Pclass'] == 1) & (test['hasAge'] == 1), 'class_hasage'] = 1	1	1
age_df.sort_values(by=['PassengerId'])	1	1
"SVC_result[1][""best_model""],"	1	1
dataframe.loc[(dataframe[column_name] >= 41) & (dataframe[column_name] < 51), column_name] = 4	1	1
X['Age'] = X['Age'].astype(int)	1	1
df_full['Name'].str.extract('([A-Za-z]+)\,', expand=False)	1	1
df['Ticket_count'] = df['Ticket_count'].astype('category')	1	1
df_pred['Child'] = (df_pred['Age'] < 10).astype(int)	1	1
train[['Pclass', 'Survived']].groupby('Pclass').mean().iplot(kind='bar', colors='blue', title='Survival Rate based on Passenger Class')	1	1
train[['Name','Cabin']].head(10)	1	1
train['Title']=train['Title'].map(Title_mapping)	1	1
test['Alone'] = np.where(test['Fam'] > 0, 0, 1)	1	1
survived_count.append(new_survived_count)	1	1
kaggle_df[['PassengerId', 'out']]	1	1
train['SortAge'] = pd.cut(train['Age'], n)	1	1
train_df.head(891).groupby(['Sex','Pclass','Title'])	1	1
new_columns.append(pd.get_dummies(df[col], drop_first=True))	1	1
titanic['Age'].fillna(titanic['Age'].median(), inplace = True)	1	1
data.append(pd.read_csv('../input/test.csv'))	1	1
"df[""Ticket_Value""] = df.Ticket.map(df.Ticket.value_counts())"	1	1
all_data.drop(columns=['Name','Age','Fare','Parch','SibSp','Ticket'],inplace=True)	1	1
train_df_concat['Ticket']:	1	1
submission2.to_csv('xgbgood.csv', index=False)	1	1
sns.boxplot(x=feature,data=train)	1	1
data_test.loc[data_test['Fare'].isnull(),'Fare'] = 0	1	1
"data_test[""Fare""].fillna(data_test[""Fare""].median(), inplace=True)"	1	1
train['Mother'][train['Survived']==1].value_counts().sort_index()	1	1
titanicAll.info()	1	1
titanic_train_dataset['Age'] = titanic_train_dataset['Age'].fillna(np.random.randint(low = mean_age - std_age, high = mean_age + std_age))	1	1
X_train['Embarked'] = X_train['Embarked'].fillna(method = 'ffill')	1	1
test_copy['Pclass_Category'] = 2	1	1
Prediction['RF'] = rf_pred	1	1
train['hasCabin1'] = train['hasCabin1'].fillna(1)	1	1
"data[""CabinCount""].value_counts().index"	1	1
df.loc[(df.Sex == 0)   & (df.Title == 'Dr'),'Title'] = 'Mr'	1	1
traind['Survived'].groupby(pd.qcut(traind['Age'],5)).mean()	1	1
"results.query(""Model not in @ignore"")"	1	1
X_temp['y_hat'] = y_train_hat_lr	1	1
df['TicketP'] = df['Ticket'].apply(lambda x: x.split()[-1][:-2]) # Removing the last two digits of the ticket	1	1
train7['Age'] = pd.cut(train7['Age'], 5, labels=False)	1	1
test['Female'] = 0	1	1
train_o_df.head(200)	1	1
df['Survived'].iloc[:train_size]	1	1
test['Embarked'] = test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
X.drop('Embarked_Missing',axis=1,inplace=True)	1	1
dataset.loc[dataset['Fare'] <= 128.082, 'Fare'] = 1	1	1
"full_data[""FareLog""] = full_data[""Fare""].apply(lambda x: 0 if x == 0 else math.log2(x))"	1	1
dataset['Fare'].hist(density=True) # histogram 分布图用比率	1	1
titanic['FamilyId']=family_ids	1	1
df.loc[((df.IsAlone == 0) & (df.Pclass == 2)) , 'Cl_IA'] = 5 #avg with family	1	1
dataset.loc[ dataset['Age'] >= 60, 'Age'] = 6	1	1
dataset['Embarked']=dataset['Embarked'].fillna(dataset['Embarked'].mode()[0])	1	1
classifiers.append(svm)	1	1
"titanic_test['Embarked'] = titanic_test['Embarked'].fillna(""S"")"	1	1
test['Embarked']=test['Embarked'].fillna(test['Embarked'].mode()[0])	1	1
"train_data[""TitleMrs""] = 0"	1	1
df_train.groupby(['Sex'])['Name'].count()[1]	1	1
df['Cabin'] = df['Cabin'].fillna('').str.replace(r'[^A-Z]', '').apply(lambda x: str(x)[0] if len(str(x)) > 0 else '').astype('category')	1	1
sns.boxplot(data=X)     # plot on single axis	1	1
"train[""Cabin""][train[""Cabin""] == ""F""] = 5"	1	1
df_test['NameLenGroup'] = pd.cut(df_test['NameLen'], bins)	1	1
test_csv['Child'] = 0.0	1	1
"titanic_df[""Fare""][titanic_df[""Survived""]==0]"	1	1
model_scores['XGBoost'] = XGB_grid_score	1	1
model_data.loc[(model_data.Pclass == 3)&(model_data.Title == 0)&model_data.Age.isnull(),('Age')] = 6	1	1
test['FamilyCategory'] = test['FamilySize'].apply(get_family_category)	1	1
data_test_all['Title'].value_counts()	1	1
"test['SharedTicket']= 0 # A new feature ""FanTicket"" created with initial value ""0"""	1	1
result.to_csv('survival.csv', index = False)	1	1
test_data['Cabin'] = test_data['Cabin'].fillna('U')	1	1
"titanic_train[[""Person"",""Survived""]].groupby([""Person""],as_index = False).mean()"	1	1
titanic.drop('Embarked',axis=1,inplace=True)	1	1
dataset['Embarked'] = dataset['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}) #.astype(int)	1	1
titanic_test_data_X['Survived_new'] = voting_est.predict(Stacked_test_df)	1	1
dftest.iloc[boys_survived_ids,col_index]=1	1	1
"train.loc[train.Embarked != train.Embarked, ""Embarked""] = ""C"""	1	1
df_test.drop('Ticket', axis='columns')	1	1
a['CatTitle'] = a['CatTitle'].replace(['Lady', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')	1	1
"train[""FareBand""]=pd.qcut(train[""Fare""],4,labels=[1,2,3,4])"	1	1
dataset['Title'] = dataset['Title'].replace('Dr', 'Officer')	1	1
df['Age'].fillna(-0.5, inplace = True)	1	1
dataset.loc[dataset['Relatives']>0, 'not_alone'] = 0	1	1
"total[""Cabin""].unique()"	1	1
titanic_p['Survival']=np.where(titanic_p['Survived']==1, 'yes', 'no')	1	1
test_df['Sex'] = test_df.Sex.map({'male': 0, 'female': 1})	1	1
t['Embarked'].replace({'S':0,'C':1,'Q':2})	1	1
"CopyOfTrainDataSet.drop([""Survived""],axis=1)"	1	1
titanic_train.drop(['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True)	1	1
test_data['Sex']=test_data['Sex'].apply(lambda x : 1 if x=='male' else 0 )	1	1
data.drop(['PassengerId','Name','Ticket','Cabin', 'Embarked', 'Parch', 'SibSp'],axis=1)	1	1
copy_train_df.iloc[:, [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]	1	1
df[['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Cabin']].copy()	1	1
"train_data[""Embarked""].value_counts(normalize=True).sort_index()"	1	1
y_df['PassengerId'] = test_data.PassengerId	1	1
df_submission['name_length'] = df_submission['name'].map(len)	1	1
self.add(layers.Dense(Nh_l[0], activation='relu', input_shape=(Nin,), name='Hidden-1'))	1	1
validation_data.describe()	1	1
dataset1.drop(labels='Survived',axis=1,inplace=True)	1	1
train['sex_T'] = dataset['sex_T']	1	1
pv_t.loc[cols[i], :].plot.bar(ax=ax)	1	1
t.nlargest(30)	1	1
xtest.shape	1	1
train.loc[train['Age'].notna(),['Survived','Age']]	1	1
"df[""is_"" + title[:-1]] = df.Name.str.contains(title.replace(""."", ""\."")).astype(np.uint8)"	1	1
df_titanic.shape	1	1
raw_test.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Title', 'Ticket', 'Cabin', 'Sex', 'Embarked', 'FamilyMembers', 'FamilySize', 'Deck', 'Fare'], axis=1)	1	1
df.fillna(df.mean(), inplace=True)	1	1
test_df['person']= titanic_df[['Sex','Age']].apply(get_person, axis=1 )	1	1
ax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)	1	1
result.to_csv('xgboost-noname.csv', index=False)	1	1
df_test['Group_Size'] = df_test['Parch'] + df['SibSp'] + 1	1	1
dfcopy.assign(Title=[remap_title(extract_title(s)) for s in dfcopy.Name])	1	1
df_test['FirstName'].str.strip().str.split(' ', n=1, expand=True)	1	1
train_df['isAlone']	1	1
predictions.append(0) # everyone else perished	1	1
"dftotal.loc[index,""Ticket1""]"	1	1
model_results['MultinomialNB'] = np.mean(scores)	1	1
submission.to_csv('submission_1.csv', index=False)	1	1
data_to_submit.to_csv('RF_opt_to_submit.csv', index = False)	1	1
titanic['Pclass'].unique()	1	1
df_rows.head()	1	1
"train_df[""percentage""]="""""	1	1
data_titanic_mod.replace(['male', 'female', 'S', 'C', 'Q'], [1, 0, 1,2,3])	1	1
raw_train['Embarked'] = raw_train['Embarked'].fillna('C')	1	1
data_df['Title'].median()	1	1
df.drop(to_be_dropped, axis = 1)	1	1
"comb[""Fare""][(comb.Pclass==3) & (comb.Embarked=='S')]"	1	1
"train[""Fare_2""] = (20 <= train[""Fare""])&(train[""Fare""]<40)"	1	1
df['ageIsNull'] * df['Pclass']	1	1
y.astype(float).reshape(-1, 1)	1	1
np.sum(dZ1, axis = 0)	1	1
allset.loc[(allset['LastName']==lastname),'FamilySurvived']=1	1	1
model.sort_values('Acc_Score',ascending=False)	1	1
titanic_df.describe(include=['O'])	1	1
train_df['Sex']=train_df['Sex'].apply(m_f)	1	1
test['Singleton'] = test['FamilySize'].map(lambda s: 1 if s == 1 else 0)	1	1
test.drop(['PassengerId','Name','Ticket','Cabin','Embarked'], axis = 1, inplace = True)	1	1
DataSetTrain.groupby(['Embarked','Survived', 'Pclass'])['Survived'].count()	1	1
c.head()	1	1
random.sample(list(test_data['Name'].values),10)	1	1
X_tr_plus.fillna({'Age': X_tr['Age'].mean(), 'Embarked': 3}, inplace=True)	1	1
X.loc[row,'Cabin'].startswith('A'):	1	1
"df.loc[df[""Title""]==key, ""Title""] = val"	1	1
testdata['Party']=testdata['SibSp'] + testdata['Parch']	1	1
data[['Name', 'Sex']]	1	1
data.drop('PassengerId', axis = 1).hist(figsize=(30,20), layout=(4,3))	1	1
"test_df[""Embarked""] = test_df[""Embarked""].astype(""category"")"	1	1
train.append(sex)	1	1
data_test['Age_bins'] = le.transform(age_qcut_test)	1	1
"dataset[""SibSp""][x]==8:"	1	1
train.groupby(by = 'Sex')['Survived'].mean()	1	1
out_df.to_csv('titanic-result.csv', index=False)	1	1
combine['Cabin'].unique()	1	1
train.drop(['Embarked'], axis=1)	1	1
"processed_dataframe[""Age""] = dataframe[""Age""].copy()"	1	1
data_train.loc[data_train['Fare'] > 300] #Show all passengers that paid more than 300	1	1
names.loc[(names['major'])==1,'mr'] = 1	1	1
"train_df.loc[ train_df[""Pclass""]==1 , [""Survived""] ]"	1	1
train.loc[(train.Age > 10)]	1	1
df['alone'] = df[['ticket_owners','no_family']].apply(lambda row: 1 if row.ticket_owners==1 and row.no_family==1 else 0 , axis=1)	1	1
test.loc[:,['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
test_csv['Mother'] = 0.0	1	1
"data_test['Age'][pd.isnull(data_test[""Age""])] = tofillwith"	1	1
df.loc[df['Cabin']!= 0, 'Cabin'] = 1	1	1
train['Embarked_C'] = train['Embarked_C'].fillna(0)	1	1
df_copy.iloc[:,0]	1	1
titanic_df['Familial'] = (titanic_df['SibSp'] + titanic_df['Parch']) > 0	1	1
drop_elementsNMD.append('isCabinB')	1	1
"df.drop([""parch""], axis=1)"	1	1
"tmp_age_test.append(Counter(tmp_test.loc[tmp_test[""kmeans_labels""] == i, ""Age""]).most_common()[0][0])"	1	1
estimators_list.append(('Random Forest', rf))	1	1
train['Pclass'].fillna(4)	1	1
"i.loc[i[""Title""] == ""Major."",[""Title""]] = ""Other"""	1	1
"df_test[""Pclass""].hist()"	1	1
df['Title_x'] = df['Title_x'].replace('Ms', 'Miss')	1	1
"data_full['Titles'] = data_full['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
train.drop('Cabin', 1)	1	1
"y[""Fare""] = y[""Fare""].astype(int)    #check the titanic.info() and you see fare is all good too"	1	1
family.loc[idx, 'Surname_adj'] =  s + '-hidfam' + fam_code	1	1
test.drop(['Name','Age','PassengerId','Sex','Ticket','Cabin','Embarked'], axis=1)	1	1
big['XWho'] = big['TName']	1	1
"train['miss'] = np.where(train['Name'].str.contains(""Miss. ""), 1, 0)"	1	1
"train[[""withfamily"", ""Survived""]].groupby([""withfamily""], as_index = False).mean()"	1	1
train.loc[(train['Fare']>=7)&(train['Fare']<14),'Fare']=2	1	1
train_data['AgeBand']=pd.cut(train_data['Age'],5)	1	1
train[['Age','Survived']].groupby(['Age']).mean()	1	1
df.pivot_table(values = 'Age', index = ['Pclass', 'SibSp'], aggfunc = 'median')	1	1
"train[""eval_forest""] = my_forest.predict(features)"	1	1
"test_df.drop(""Age"", axis=1).copy()"	1	1
testData['Fare']=testData.groupby(['Pclass','Sex'])['Fare'].transform(lambda x: x.fillna(x.median()))	1	1
dt['Sex']= dt['Sex'].map(gender_mapping)	1	1
"total.drop(labels = [""Name""], axis = 1, inplace = True)"	1	1
dfsex['Sex'] = dfsex['Sex'].map(dicsex)	1	1
test_df['Age'] = pred_values	1	1
df.sort_values('mean_test_score',ascending=False,inplace=True)	1	1
df.loc[ df['Fare'] <= 7.91, 'Fare']                          = 0	1	1
imputer_test.loc[imputer_test['Fare'].isnull(), 'Fare'] = meanFarePclass3	1	1
"train_file.pivot_table(index=""Sex"", values=""Survived"")"	1	1
dataset['Embarked'] = dataset['Embarked'].map( {'C': 1, 'Q': 2, 'S': 3} ).astype(int)	1	1
combined['Age'].std()	1	1
"train_dat[""Title""] = train_dat['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
"clean_data[""Embarked""][i]= ""S"""	1	1
fare_series.median()	1	1
df.sort_values(by='index')	1	1
"coeff_df.sort_values(by = ""Correlation"", ascending = False)"	1	1
"train_df[[""TraveledAlone"", ""Survived""]].groupby(['TraveledAlone'], as_index=False).mean()"	1	1
"submission.to_csv(""titanic_prediction.csv"")"	1	1
_df1['Title'] = _df1['Title'].replace('Ms.', 'Miss.')	1	1
submission_ex.tail()	1	1
port.Embarked.replace(cities,inplace=True)	1	1
dataset['isCabinLetters'] = dataset['Cabin'].apply(get_cabin_letter)	1	1
X_test.drop(cat,axis=1,inplace=True)	1	1
"df_real_test[""PassengerId""] = df_real_test_initial[""PassengerId""]"	1	1
test_file['Sex']=test_file['Sex'].map({'female':1,'male':0})	1	1
all_data[['SibSp', 'Survived']].groupby(['SibSp'], as_index = False).mean().sort_values(by = ['Survived'], ascending = False)	1	1
df_full.loc[df_full['PassengerId'].isin([62, 830]), 'Embarked'] = 'C'	1	1
ship['Age_was_missing'] = ship_numeric['Age_was_missing'].copy() # We will use this later	1	1
result.to_csv('randomforest-many-variable3-debugged.csv', index=False)	1	1
data.apply(lambda x : 1 if ((x.Ticket in (['W./C. 6607'])) & (x.Personal_Titles in (['Mr', 'Mrs'])))                                 else 0, axis=1)	1	1
Each_Passenger.loc[(Each_Passenger['Pclass'] <= 0) & (Each_Passenger['Parch'] <= 0) , 'Pclass']  =  0	1	1
"titanic_test.drop([""Cabin""],axis=1,inplace=True)"	1	1
raw_df['Fare'] = raw_df['Fare'].fillna(0)	1	1
data['Deck'] = data.apply( lambda x: family_deck_dict.get(x.Surname), axis = 1)	1	1
classifiers['name'],	1	1
"data.isnull().sum().to_frame(""Count"")"	1	1
data.loc[data['Age'] > 64, 'Age']	1	1
dataset.loc[(dataset['Fare']>7.91)&(dataset['Fare']<=14.454),'Fare_cat']=1	1	1
t.loc[n] * np.log(y[n]) +	1	1
train_df.columns.isin(['passengerid', 'name']).any()	1	1
train_data.loc[Outliers_to_drop]	1	1
surv['Survived'].replace(['No','Yes'],[0,1], inplace=True)	1	1
"test_dataset.loc[ (test_dataset.Pclass == 3) & (test_dataset.Sex == ""female"") & (test_dataset.Age.isnull()), ""Age"" ] = test_dataset.loc[ (test_dataset.Pclass == 3) & (test_dataset.Sex == ""female"") & (test_dataset.Age.isnull()), ""Age"" ].fillna(test_dataset.loc[ (test_dataset.Pclass == 3) & (test_dataset.Sex == ""female"") ][""Age""].median())"	1	1
results.mean()*100	1	1
enc['col_name']	1	1
test['Person'] = test[['Age', 'Sex']].apply(check_child, axis=1)	1	1
pd.merge(df, temp)	1	1
Data['Ticket_info'] = Data['Ticket_info'].astype('category').cat.codes	1	1
titanic_sub.drop(['Name','Ticket','Cabin'], axis=1)	1	1
combined['SmallF'] = combined['family_size'].map(lambda s: 1 if  s == 2  else 0)	1	1
ax[0].set_title('Sex vs Survived')	1	1
data_train['Fare'].loc[data_train['Survived']==0].plot(kind='kde',label='not survival')	1	1
df_full.groupby('Ticket')['Name'].count()	1	1
final_csv['FamilyCount'] = final_csv['SibSp'] + final_csv['Parch'] + 1	1	1
df_train['Initial']= df_train.Name.str.extract('([A-Za-z]+)\.')	1	1
RealPrediction.head()	1	1
AgeList_trn.append(i)	1	1
train.loc[train['Cabin'].notnull(),'HasCabin'] = 1	1	1
data.sons.loc[data.PassengerId==1294] = 1	1	1
test_X_transformed.keys()	1	1
train.Embarked.fillna(freq_port)	1	1
dataset.groupby('Title')['Age'].describe()	1	1
train[['Pclass','Age','Sex','Fare','SibSp','Parch','Embarked']].values	1	1
SurvivedFareData['Fare'].max()	1	1
dc.drop(['PassengerId'], axis=1, inplace=True) #they're kinda redundant now	1	1
dataPrepare['Fare']=dataPrepare['Fare'].fillna(0)	1	1
np.dot(w,x)	1	1
train_df.describe(include='O')	1	1
full_data[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean()	1	1
df['filled_ages'],df['Age']	1	1
train.loc[(train['PaxclassA']==0),'Class1_Premium'] = 1	1	1
test.loc[test['CabinN2'] == 999, 'hasCabin2'] = 0	1	1
test1['Survived']	1	1
"_df[""_cabin""]    = _df._cabin.apply(lambda i : sorted(i))"	1	1
test_original.info()	1	1
score.append(mlp.score(X_train,y_train))	1	1
train_X.loc[train_X['Age'].isnull(), 'Age'] = train_X['Age'].mean()	1	1
"df_titanic.loc[df_titanic[""family""] >3 | (df_titanic[""family""]==0) ,""family""]=0"	1	1
test['tkno']	1	1
df_train.drop(['PassengerId', 'Survived','Pclass'], axis=1).describe()	1	1
z.append(0)	1	1
"sns.boxplot(x = ""Pclass"", y = ""Age"", hue = ""Sex"", data = X_train);"	1	1
models['set4']['cat_encode'] = 'OneHot'	1	1
df_test['Cabin_available'].replace([True,False],[2,3],inplace=True)	1	1
data['Small_Family'] = pd.Series(data.SibSp+data.Parch).apply(lambda x: 1 if x>0 and x<4 else 0)	1	1
perf.append(getMetrics(y_test, y_pred, 'SVM'))	1	1
tmp_test_df['Sex'].replace(['male', 'female'], [0,1], inplace=True)	1	1
"test[""title""] = train[""title""].replace('Ms', 'Miss')"	1	1
train.isnull().sum() / train.shape[0] * 100	1	1
"no_survivors.to_csv(""no_survivors.csv"", index=False)"	1	1
titanic_test.drop(['Sex','Sex_male'],1)	1	1
axes[0].pie(train_data.groupby(['Survived'])['PassengerId'].count(),labels = ['Not Survived','Survived'])	1	1
dataset.drop(['Cabin'], axis=1,inplace = True)	1	1
df['Cabin'] = df['Cabin'].str.extract('([A-Z])', expand=False)	1	1
tot.iloc[i,:].Name	1	1
"test.drop([""PassengerId""], axis = 1)"	1	1
test_data_only_first_class.ix[~(test_data_only_first_class['Sex'] != 'female')]	1	1
LastNameSum.sort_values('_Name').reset_index().set_index('_Name')	1	1
train.drop(['Person'],axis=1,inplace=True)	1	1
df['Port'] = df.Embarked.map({'C':1, 'S':2, 'Q':3}).astype(int)	1	1
Train_Master.drop(columns=['Title_Rev', 'FamilySize_3', 'Cabin_U','Age_0'], inplace=True)	1	1
regressor_OLS.rsquared_adj.astype(float)	1	1
missing_data.head(13)	1	1
train.loc[train['Name'].str.contains('Master')]	1	1
"test[""Cabin""] = test[""Cabin""].str.extract(r""([A-Z])"")"	1	1
test_copy.loc[(test_copy['Age'] > 20) & (test_copy['Age'] <= 30), 'Age_Category'] = 2	1	1
df_Not_Survived['Embarked'].value_counts().plot.bar(ax=axes[1]);	1	1
df['Cabin'].apply(lambda c : c[0])	1	1
"titanic_train.drop([""Embarked""],axis=1, inplace=True)"	1	1
predicted.to_csv('submission.csv', index=False)	1	1
test.Age.isnull().any()	1	1
data.genre.astype(np.uint8)	1	1
"data_df.loc[data_df[""Fare""] <= 7.896, 'Fare_Grouped'] = 0"	1	1
"family_df[""Fsize""] = family_df.SibSp + family_df.Parch + 1"	1	1
plt.hist(x=[data1[data1['Survived']==0]['Age'],data1[data1['Survived']==1]['Age']], stacked=True, color=['g','b'], label=['Survived','Dead'])	1	1
frame.loc[(frame.Age >32) & (frame.Age<=48) , 'Age'] = 2	1	1
Titanic_dataframe.loc[:, 'Embarked'] = pd.to_numeric(Titanic_dataframe.loc[:, 'Embarked'])	1	1
df['NameLenBin']=np.nan	1	1
test_df.filter(regex='Age|Fare|SibSp|Parch|Sex_.*|Pclass_.*')	1	1
Cabin_t.append('U')	1	1
transformed_df['Age_Categorized_Teenager'] = age.Age_Categorized_Guess_Teenager	1	1
dataTest.Age.fillna(dataTest.Age.mean(), inplace = True)	1	1
train.loc[(train.Age.isnull())&(train.Salutations=='Mrs'),'Age'] = 36	1	1
in ['Countess', 'Dona', 'Lady', 'Jonkheer', 'Mme', 'Mlle', 'Ms', 'Capt', 'Col', 'Don', 'Sir', 'Major', 'Rev', 'Dr']:	1	1
y_pred_all_1.is_copy = False	1	1
"dat[""tick_PC""] =  dat['Ticket'].map(lambda s: 1 if re.search(""PC"",s)!=None else 0)"	1	1
"train_data[""Southampton""] = 0"	1	1
test['NameTitle'] = test['NameTitle'].map({'Mr.': 0, 'Other.': 1, 'Master.': 2, 'Miss.': 3, 'Mrs.': 4, 'Dona.': 1}).astype(int)	1	1
data['MaidenName2'] = np.where(data.Title=='Mrs', data.Name.str.extract('([A-Za-z]+)$', expand=False), np.NaN)	1	1
"dataframe[""Title""] = dataframe[""Name""].str.extract(r"" ([A-Za-z]+)\."", expand=False)"	1	1
df_train['ParchBool'] = (df_train['Parch'] > 0)	1	1
df['Fare']=df['Fare'].fillna(value=df.Fare.mean())	1	1
titanic_df['TitleInt'] = titanic_df['Title'].map({'Mr':0, 'Mrs':1, 'Miss':2, 'Master':3, 'Rev':4, 'Dr':5})	1	1
"X[""Person""] = X[""Person""].map(person_map)"	1	1
test.drop(['Cabin','Ticket'],axis = 1)	1	1
dataset['Deck'] = dataset['Cabin'].str[:1]	1	1
train_data[['Survived','Embarked']].groupby(['Embarked'],as_index=False).count() #to check which port has highest intake	1	1
np.std(dataset,axis=0)	1	1
dfcopy.join(pd.get_dummies(dfcopy.Pclass, prefix=c.Pclass))	1	1
Feature_rfe['Feature'] = list(data.columns)	1	1
test.drop(columns=['Name', 'Ticket', 'PassengerId', 'Cabin','SibSp', 'Parch','Fare','Age', 'Embarked', 'FamilySize','FareBand', 'Pclass', 'Sex'])	1	1
raw_train.iterrows():	1	1
importance.append((name, model.feature_importances_))	1	1
pd.DataFrame.from_records(res,columns = ['PassengerId','Survived'])	1	1
train['Pclass1'][i] = 0	1	1
train['Pclass1'][i] = 1	1	1
comb.Title.loc[(comb.Title.isin(['Countess', 'Dona', 'Lady', 'Mlle', 'Mme', 'Dr'])) & (comb.Sex=='female')] = 'Mme'	1	1
dataset.loc[dataset['Survived'] == 1, 'Pclass'].value_counts().sort_index()	1	1
train['Sex'] = sex_encoder.fit_transform(train.Sex)	1	1
plt.hist(accuracy_dict_tt_val);	1	1
Survived.corr(train_df['Deck'])	1	1
"test.drop(columns = ""Embarked"")"	1	1
children.loc[full_train_set['Survived'] == 0].shape[0]	1	1
pd.DataFrame.from_dict({'PassengerId' : test['PassengerId'], 'Survived' : pred_bag})	1	1
df['CabinLoc'] = df['Cabin'].apply(getfmb)	1	1
test['Age'].fillna(test['Age'].median(), inplace = True)	1	1
ax[0].annotate('Upper Whisker', xy=(0,upper_whisker), xytext=(0,upper_whisker))	1	1
all_data['Sex'] = all_data['Sex'].map({'female': 0, 'male': 1}).astype(int)	1	1
mimi[0]	1	1
train[['Survived']].as_matrix()	1	1
"df_test[""Fare""].std()"	1	1
"data[""Title""] = data.Name.apply(lambda x: re.search(""([A-Z][a-z]+)\."", x).group(1))"	1	1
train_df[['Name', 'Sex', 'Female']].head(2).T	1	1
train.groupby(['Parch','Survived']).PassengerId.count().unstack()	1	1
data_train_split_csv.as_matrix()[:, 1]	1	1
titanic['Title'] = le.transform(titanic['Title'])	1	1
ax[0].set_xlabel('Fare')	1	1
train_dummy.drop(columns=bad_title, inplace=True)	1	1
"i.loc[i[""Title""] == ""Jonkheer."",[""Title""]] = ""Other"""	1	1
"df.drop(columns=[""Embarked""])"	1	1
train_all.loc['test']	1	1
string.replace(s, new_separator)	1	1
"train_with_age.groupby([""Sex"",""Age""], as_index = False)[""Survived""].mean()"	1	1
test_df.drop(columns=['Survived'])	1	1
x_train_categorical['Embarked'].value_counts(True)	1	1
result.to_csv('titanic-results.csv')	1	1
train.select_dtypes(include=['int64'])	1	1
"age0_df[""Survived""]          #特徴量に対する正解データ"	1	1
"combined.loc[pid,""Age_cat""] != ""NA"":"	1	1
train.drop(columns=['Name','Ticket'])	1	1
arr['C'].append(row)	1	1
evtrain['accuracy'],	1	1
df_train_ml_sc.info()	1	1
submission.to_csv('Submission_logit.csv', index=False)	1	1
train.groupby(['Pclass', 'Sex'])['Age'].median()	1	1
train[['Parch','SibSp']].describe()	1	1
df_test['Embarked'] = df_test['Embarked'].fillna(df_test['Embarked'].mode().iloc[0])	1	1
test['Survived']=regressor.predict(xtest)	1	1
"train[""Deck""] = train[""Deck""].astype(""int"")"	1	1
female_ages_survived_age['Age'].mean()	1	1
test.drop(['PassengerCount','PassengersSurvived','Ticket'],axis=1,inplace=True)	1	1
test.loc[(test['Fare']>200) & (test['Fare']<=250),'FareCategorical'] = 4	1	1
data_sex_int['Sex'] = data_sex_int['Sex'].map(sex_to_int)	1	1
"predictors2[""Age_Fare""] = predictors2.Age * predictors2.Fare"	1	1
"train_df[""IsAlone""] = train_df.apply(isAlone, axis = 1)"	1	1
model.add(Dropout(0.15))	1	1
x_train.count()	1	1
titanic_df['Embarked'].fillna('B' , inplace=True)	1	1
"solution1.to_csv('solution1.csv', index_label= [""PassengerId""])"	1	1
full.loc[ full['Fare'] <= 1.56, 'Fare'] = 1	1	1
x_train[['Cabin']]=imr.fit_transform(x_train[['Cabin']])	1	1
train_y.head(train_num)	1	1
"train[""Sex""] = train[""Sex""].map({""male"":1,""female"":0})"	1	1
np.round(gaussianNB.score(X_train_norm, Y_train), 4)	1	1
train_test.drop(['Name','Lname'],axis = 1)	1	1
X_test.drop(['Sex*Parch'],axis=1)	1	1
scaler.transform( f )	1	1
data_train.loc[data_train.Embarked.isnull(), 'Embarked'] = 'S'	1	1
"comb_data[""DataType""] = comb_data[""DataType""].astype(str) # to exclude from dummy function"	1	1
test['NumFamily'] = test['SibSp']+test['Parch']+1	1	1
"title_by_sex2[""Female""] = full[full[""Sex""] == 1][""Title""].value_counts()"	1	1
test.drop(['PassengerId'], axis = 1, inplace = True)	1	1
all_data.Age.count() # 非空数值个数	1	1
"titanic_df.groupby([""Pclass"",""Sex""]).mean()[""Survived""].index.levels"	1	1
df_output[['PassengerId','Survived']].to_csv('titanic_submission_final.csv', index=False)	1	1
test_df['Name_Len'] = test_df['Name'].apply(lambda x: len(x))	1	1
trainingData.shape	1	1
"data.loc[(data[""Age""] > 32) & (data['Age'] <= 48), 'Age'] = 2"	1	1
"submission.to_csv(""predict.csv"", index=False)"	1	1
train_df[['Age','Survived']].groupby(['Age'],as_index=False).mean().sort_values(by='Survived',ascending= False)	1	1
"test[""Cabin""] = test[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
df.loc[(df.Survived==1) &(df.Sex=='male'),:].count()	1	1
np.std(accuracyLs)	1	1
score_test.append(1-accuracy_score(pred_test, y_test))	1	1
df.drop(['Embarked'], axis=1)	1	1
train1.head()	1	1
"test.loc[test[""Embarked""]==""S"",""Embarked""] =0"	1	1
allData_Scaled.iloc[:nTrain, :]	1	1
"prediction.to_csv(""Kaggle_first_try.csv"",index=False)"	1	1
df_train.merge(df_train_tmp,on='PassengerId',how='left')	1	1
"combined[""group_size""] = 1"	1	1
tr.loc[ tr['Age']<= 8 , 'Age'] = 0	1	1
df_train['Target']	1	1
train_X.copy()	1	1
best_cols_global.append(best_col)	1	1
data_train['Sex'] = data_train['Sex'].map({'female': 1, 'male':0})	1	1
train_df['Cabin_wing'] = train_df['Cabin'].astype(str).str[0]	1	1
train_data.drop(['Sex', 'Embarked'], axis = 1, inplace = True)	1	1
final_df.to_csv('passenger_survival.csv',sep=',',index=False)	1	1
sns.boxplot(x = 'Sex', y = 'Age', data = train)	1	1
"full_data[""FamilyCat""] = 0"	1	1
dftest.drop(['Age','Fare'],axis=1)	1	1
p_df.sum(axis=1).apply(lambda x: 1 if x > int(num_trials/2) else 0)	1	1
test['Title']	1	1
test.loc[test['Sex'] == 'female', 'Sex'] = 1	1	1
test.loc[test['Sex'] == 'female', 'Sex'] = 0	1	1
df['age_T'] = df.apply(lambda x: 1 if (x['Age'] >= 5 and x['age_T'] < 12) else x['age_T'], axis=1)	1	1
ax[1].set_title('Pclass: Survived vs Dead', y=y_position)	1	1
sns.boxplot(train_dat['Pclass'], train_dat['Fare'])	1	1
x_test.fillna( x_test.median() ,inplace = True)	1	1
"train_df.drop([""PassengerId""], axis=1, inplace=True)"	1	1
train['cabin'] = train['cabin'].fillna('Unknown')	1	1
"combine[0][""kmeans_labels""] = pd.Series(kmeans.labels_)"	1	1
cabin['Pclass'] = combined_df.Pclass	1	1
df_age.dropna(axis=0)	1	1
d.dropna()	1	1
train_data.drop('Title',axis=1)	1	1
series.apply(lambda x:math.log(x+1.0))	1	1
final_csv['Fare'].quantile(.75),	1	1
test_df['Survived']= -888 #adding survived with a default value	1	1
test_df.drop(['top_cabin'],axis=1,inplace=True)	1	1
ax1[1].set_title('SibSb Not Survived')	1	1
test_data['Predictions'] = predictions	1	1
X_data.drop(columns=['Embarked_Q', 'Embarked_S'])	1	1
rows_with_missing_age['Title'].value_counts().index,	1	1
test_df['Family']=test_df['SibSp']+test_df['Parch']	1	1
"test[""Title""] = titles"	1	1
test_df['S_Family'] = ((test_df.Family>0)&(test_df.Family<4)).astype(int)	1	1
df_train['EmbarkedId'], embarked_desc = pd.factorize(df_train['Embarked'])	1	1
comb['NoAge'] = comb['Age'] == np.NAN	1	1
train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True) #delete Outliers in train	1	1
titanic.loc[titanic['Title']=='Mme', 'Title']='Mrs'.strip()	1	1
Xtest_float.head()	1	1
titanic['NameLength']=titanic['Name'].apply(lambda x: len(x))	1	1
train_df['CategoricalAge']=pd.qcut(train_df['Age'],4)	1	1
splited[0][0]	1	1
df_titanic['Alone'] = df_titanic['Family'].map(lambda i: 1 if i == 1 else 0)	1	1
full.groupby(['Title'])['Age'].std()	1	1
"test_data[""Title""] = test_data.Name.str.split("","").str.get(1).str.split(""."").str.get(0).str.strip()"	1	1
"train_kaggle[[""Fare""]].plot.box(vert=False, figsize=(15,5))"	1	1
data_test.drop(columns=drop_col,axis=1,inplace=True)	1	1
conf_matrix_[0][0]+conf_matrix_[1][1]	1	1
test['Fsize'].hist()	1	1
"copy_that_dev[[""Age"", ""SibSp"", ""Parch"", ""Fare""]] = pd.DataFrame(copy_that_dev, columns=[""Age"", ""SibSp"", ""Parch"", ""Fare""], index = copy_that_dev.index)"	1	1
titanic_training_df['Pclass'].hist()	1	1
df.round()	1	1
train.drop(['Survived', 'PassengerId'], axis=1),	1	1
data['name_title'] = data['name'].apply(lambda x: x.split(',')[1] if len(x.split(',')) > 1 else x.split(',')[0]).apply(lambda x: x.split()[0])	1	1
gbc_predictions.set_index(test_df['PassengerId'], inplace=True)	1	1
test_Pre.head()	1	1
data_train['Survived'].loc[data_train['Pclass']==3].value_counts()	1	1
correctArr.append(1)	1	1
test['Age'] # it's unnecessary anymore	1	1
train_df.loc[train_df['Embarked'].isnull(), 'EmbarkedFill'] = freq_port	1	1
titanic_df['Ticket'].head(10)	1	1
sub.to_csv('prediction.csv',index=False)	1	1
data_frame['LargeFamily'] = data_frame['FamilySize'].map(lambda s: 1 if 5<=s else 0)	1	1
ax2[0].set_yticks(range(0,110,10))	1	1
d['FareBand'] = pd.qcut(d['Fare'], 4)	1	1
np.where(np.isnan(dataset[column2]))[0]:	1	1
submission['PassengerId'] = data_test.index	1	1
train_data['SibSp'].value_counts()	1	1
"train_data.loc[(train_data[""Fare""] >= 20) & (train_data[""Fare""] < 40), ""FareBetween20And40""] = 1"	1	1
cabin_notnull['Cabin'].value_counts()	1	1
new_train_df.drop(['Survived'], axis=1)	1	1
np.multiply(error, X[:,i])	1	1
train.drop(['FamilyClass'], axis=1)	1	1
features.drop(columns = collinear_features)	1	1
dataset['Cabin'] = dataset['Cabin'].fillna('U0')	1	1
"train_df[[""Fare_range"", ""Survived""]].groupby([""Fare_range""], as_index = False).mean().sort_values(by = ""Fare_range"", ascending = True)"	1	1
test_y.values.T	1	1
new_train.corr()	1	1
df['FemaleCh'] = 0	1	1
y.loc['2014']	1	1
"data_test[""Age""] = pd.cut(data_test[""Age""], agebins, labels=group_names) # Note - test set imputed FROM TRAINING set"	1	1
"Submission3.to_csv(""StackingSubmission.csv"", index=False)"	1	1
"test[""Title""] = test[""Title""].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
null_embarked.at[index, 'Embarked'] = GetEmbarked(GetIntervals(data_frame), row.Pclass);	1	1
Y_valid.iloc[:].values.reshape(Y_valid.shape[0],1).astype('float');	1	1
data_copy.loc[:, 'Embarked']=data_copy['Embarked'].fillna('S')	1	1
data['Sex'] = data['Sex'].map(sex_mapping)	1	1
testONSWAR.values # Creats an array of the test data	1	1
train_data.drop('Cabin_cat',axis=1)	1	1
data_raw.describe(include='all')'''	1	1
df_test.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin','Embarked', 'Age', 'Fare'], axis=1, inplace=True)	1	1
df.loc[:,c].mode()[0]	1	1
"df_train[""Name""].apply(get_title)"	1	1
all_data['Title'] = all_data['Title'].replace('Mme','Mrs')	1	1
train.loc[(train.Age >= 10) & (train.Age < 25),'Age'] = 2	1	1
np.round(y_pred)	1	1
df_1['survival'] = df_1['survival'].apply(pd.to_numeric, errors='coerce')	1	1
df2['Cabin_exist'] = cabin_exist(df2.Cabin)	1	1
Train_Master['FamilySize'] = Train_Master['SibSp'] + Train_Master['Parch']	1	1
df_test[['Pclass','Sex','Parch','Fare','SibSp','Age','Cabin_available']].head()	1	1
df_input.values.reshape(-1,1)	1	1
train.pivot_table(index='Embarked', columns='Survived', aggfunc='count').Age	1	1
sns.boxplot(x='Pclass',y='Age',data=train_data, palette='viridis')	1	1
test_set['Age'].fillna(test_set['Age'].median(), inplace = True)	1	1
train_df[['Title', 'Sex', 'Age']].groupby(['Title', 'Sex'], as_index=False).mean()	1	1
test.loc[ test['Name_len'] > 32, 'Name_len'] = 4	1	1
df.drop('Cabin',inplace=True,axis=1)	1	1
sub_df.to_csv('RF_result.csv', index = False)	1	1
dftest.convert_objects(convert_numeric=True)	1	1
train.drop(['Cabin','Name','PassengerId','Ticket'],axis=1)	1	1
titanic_dirty.drop(['PassengerId', 'Cabin', 'Name', 'Ticket'],axis=1,inplace=True) # most likely to create spurious correlations than causal ones	1	1
"test[""FareBand""]=pd.qcut(test[""Fare""],4,labels=[1,2,3,4])"	1	1
train2.fillna({'Embarked' : 'S'})	1	1
train['fare_T'] = dataset['fare_T']	1	1
data_train.loc[data_train['Cabin'].isnull(),'Cabin'] = 'No'	1	1
df['Person']= np.where(df['Age']<16,'child',df['Sex'])	1	1
fulldata.set_value(fulldata.family_num > 4, 'Family_size', 'L')	1	1
plt.hist(fareUnder181)	1	1
titanic[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	1	1
"total_result.loc[acq_in_test, ""Survived""] = (total_result.loc[acq_in_test,  [""LR"",""Bagging"",""GBT""]].sum(axis=1) == 3).astype(int)"	1	1
train_df.drop(['Name','PassengerId','Ticket'], axis=1)	1	1
"train_df[""PricePerCabin""] = train_df[""Fare""]/train_df[""NumberCabins""]"	1	1
testdf.columns.values	1	1
data.drop(['Cabin','Ticket'],axis=1,inplace=True)	1	1
train.isnull().sum(axis=0)	1	1
ax[1].set_title('SibSp:Survived vs Dead')	1	1
data['Survived'][data.Pc2 ==1].mean(),	1	1
data['Sex'].replace('female', 1, inplace=True)	1	1
train_data.drop(UNUSED_COLUMNS, axis=1)	1	1
test_data.drop(['Name', 'Fare', 'Embarked'],axis=1)	1	1
X.drop(['PassengerId','Ticket','Cabin'],axis = 1,inplace=True)	1	1
"df_perc[""Age""] < 20, ""11-20"","	1	1
"titanic_df.drop([""Survived"", ""Family"", ""Class_1"", ""Class_2""],axis=1)"	1	1
temp_df['titles'].value_counts()	1	1
dataset.groupby(['Sex', 'Pclass']).size().unstack(0)	1	1
df_all['_TicketCounts'] = df_all.groupby(['Ticket'])['Ticket'].transform('count')	1	1
submission2.to_csv('../working/submission.csv', index=False)	1	1
full[['Age', 'TicketFare']].describe()	1	1
x_train['Name'].apply(lambda x: len(x))	1	1
raw_train['Deck'].value_counts().plot(kind='bar', color='brown')	1	1
train.loc[train['Age']<16,'Age']=1	1	1
full['Age'] = full.groupby(['Sex','Pclass','Title'])['Age'].transform(lambda x: x.fillna(x.median()))	1	1
train_df[['Sex', 'Embarked', 'Deck']] = train_df[['Sex', 'Embarked', 'Deck']].apply(lambda feat: encoder.fit_transform(feat))	1	1
train6['Sex'] = le.fit_transform(train6['Sex'])	1	1
combined.iloc[:891].Age.isnull().sum()	1	1
scores.append( best_dtc.score(X_test, y_test) )	1	1
inputData['Fare'].values.tolist()	1	1
train.loc[train['CabinN2'] == 999, 'hasCabin2'] = 0	1	1
train_data.tail(10)	1	1
submission.to_csv('result.csv', index=False)	1	1
"df.drop(  df[ (df[""Age""].isnull() | df[""Fare""].isnull()  | df[""SibSp""].isnull() ) ].index )"	1	1
data['Sex'] = data['Sex'].replace('female', 1)	1	1
"total[""Fare""] = total[""Fare""].fillna(8.05)"	1	1
"new_df.Embarked.astype(""int"")"	1	1
X_data[0:700]	1	1
df['Survived'].describe()	1	1
test['Survived'] = clf.predict(test[features])	1	1
MLA_compare.loc[index, 'MLA Precission'] = precision_score(val_y, predicted)	1	1
X_train['age'] = X_train.age.apply(lambda x: (x - age_mean) / age_std if x > 0 else x)	1	1
titanic_data['Embarked'] = titanic_data['Embarked'].replace('Unknown', 'U')	1	1
"test[""Survived""] = svc.predict(test_data_X_sd)"	1	1
df['Sex'].value_counts().plot(kind='bar')	1	1
test_data['Fare'].fillna(test_data['Fare'][test_data.Pclass.values==3].mean(),inplace=True)	1	1
plt.hist(np.log2(np.log10(df.Fare + 1) + 1), bins=45)	1	1
"dataset[""Sex""] = le.fit_transform(dataset[""Sex""])"	1	1
test5['Embarked'] = le.fit_transform(test5['Embarked'])	1	1
"df_train['Has_Cabin'] = df_train[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
np.sum(y == 1)	1	1
train_df.copy(deep=True)	1	1
"np.where(dataset[""Cabin""]==""B"",1,0)"	1	1
train_d[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
df_test['Age'] = df_test['Age'].fillna(value=1000)	1	1
df.loc[ (df.Age.isnull()) & (df.Gender == i) & (df.Pclass == j+1),              'AgeFill'] = median_ages[i,j]	1	1
titanic['Mother'] = 0	1	1
"df[""EmbarkedInt""] =df[""Embarked""].map({""S"":0, ""C"":1, ""Q"":2}).astype(int)"	1	1
train_test['Age'] = pd.cut(train_test['Age'], bins=[0,10,18,30,50,100],labels=[1,2,3,4,5])	1	1
X['caG'] = X['Cabin'].map({'A':0,'B':0,'C':0,'D':0,'E':0,'F':0,'G':1,'T':0,'U':0}).astype(int)	1	1
"train_eval[""Survived""] # generate the results list"	1	1
test1.iloc[:, [1]].values	1	1
"ages_prob.drop([""index""], axis=1)"	1	1
"op.to_csv(""op_rf.csv"", index=False)"	1	1
stacked_models_df.values	1	1
imputed[ 'Has_Age' ] = full.Age.notnull()	1	1
data_female['Age'].mean()	1	1
"sns.boxplot(x = ""Embarked"", y = ""Fare"", hue = ""Pclass"", data = X_train);"	1	1
X['Sex'] = le.fit_transform(X['Sex'].astype(str))	1	1
test.join(embarked_oh_test)	1	1
survivors['par_ch'].value_counts().sort_index()	1	1
titanic_df.join(personclass_dummies_titanic)	1	1
"df_male.groupby(""Pclass"").get_group(pclass)"	1	1
in ['Pclass', 'Sex', 'SibSp', 'Parch','Embarked', 'FamilySize', 'IsAlone', 'Title','Ticket_Cat', 'Cabin_Cat', 'FareBin', 'AgeBin']:	1	1
output2.head()	1	1
train_df.drop('index', inplace=True, axis=1)	1	1
test_d.drop(['Ticket','Cabin'],axis=1)	1	1
my_feature_columns.append(cabin_feature_columns())	1	1
dataset_test.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)	1	1
train_data.groupby(['Embarked']).Survived.describe()	1	1
ss.transform(test)	1	1
train_copy['first_class_female'][n] = 0	1	1
"test[""Title""] = test[""Name""].str.extract(""([A-Za-z]+)\."",expand=True)"	1	1
sns.boxplot(x='Pclass',y='Age',data=train,palette='rainbow')	1	1
"in [""Survived""] + feature_candidates:"	1	1
plt.hist(data['Age'], bins=40)	1	1
comb_data['AgeData'] = np.where(comb_data[['Age']].isnull().all(1), 'No', 'Yes')	1	1
test_df.loc[(test_df.Cabin.isnull())&(test_df.Initial=='Mrs'),'Cabin']='D'	1	1
plt.style.use(style='_classic_test')	1	1
data_train.Age.hist()	1	1
titanic_testxdf[['Pclass','Sex','Age','SibSp', 'Parch','Fare']]	1	1
df_train.drop('PassengerId',axis =1, inplace=True)	1	1
test_df1['ParchBool'] = (test_df1['Parch'].apply(lambda x: 1 if x>0 else 0))	1	1
"family_size[""Survived""] = X[""Survived""]"	1	1
"train.loc[(train[""Survived""]==1)&(train[""Pclass""]==2), ""Age""]"	1	1
example.head()	1	1
all_df.set_index(['PassengerId'], inplace=True) ## This is to make sure of a unique index for both train & test	1	1
titanic_test.loc[titanic_test['Fare'].isnull(), 'Fare'] = titanic_test['Fare'].median()	1	1
imputed_data['Survived']	1	1
extra_features.append('Survived')	1	1
"res.to_csv(""2nd_submit.csv"", index=False)"	1	1
"related_people.loc[related_people[""PassengerId""]==832,""RGroup""]=""Richards_M"""	1	1
ax[1].set_title('Variation in Validation Data Accuracy w.r.t to Max Iterations for different Solvers')	1	1
df.loc[(df['AgeGroup']>12) & (df['AgeGroup']<=18), 'AgeGroup'] = 1	1	1
y.append( model.predict(test_df[:]))	1	1
titanic_df.Age.mean()	1	1
data_copy.loc[:,'Fare']=data_copy['Fare'].fillna(data_copy['Fare'].median())# replace number with median	1	1
X.loc[X['Fare'] > 250, 'Fare'] = 5	1	1
"data_train.drop(""Cabin"", axis=1, inplace = True)"	1	1
"combined[""Title""] = combined[""Title""].replace(['Capt', 'Col', 'Dr', 'Major', 'Rev'], 'officer')"	1	1
data['SmallF'] = data['f_size'].map(lambda x: 1 if  x == 2  else 0)	1	1
df['emb_S'] = pd.Series(map(lambda x: 1 if x == 'S' else 0 , df.Embarked.values))	1	1
X2test['Fare'][i] = fare_avg	1	1
df1['Embarked'] = np.where(df1['Embarked']== 'Q', 1 ,df1['Embarked']  )	1	1
test.loc[(test['Fare']>14.454)&(test['Fare']<=31),'NFare']=2	1	1
sc.transform(test_set[column].values.reshape(-1,1))	1	1
data['Embarked'] = data.Embarked.fillna(value = 0.0)	1	1
combined_df.drop('title_extracted', axis=1, inplace=True)	1	1
"train.loc[train.Embarked.isna(),""Embarked""] = ""S"""	1	1
data.parent_alone.loc[data.PassengerId==98] = 0	1	1
test['Title'] = test['Name'].str.replace('(.*, )|(\\..*)', '')	1	1
"big['XWho'][big['TName'] == i] = ""Mr."""	1	1
"data[""Initial""] = data.Name.str.extract('([A-Za-z]+)\.')"	1	1
data_copy['Sex']=data_copy['Sex']*np.abs(corr_val['Sex'])/total_val	1	1
Anova.loc[var[0],'Feature'] = var[1]	1	1
"trainingdata[""Age""][np.isnan(trainingdata[""Age""])] = rand_age_train"	1	1
train.shape # --> (891, 12)	1	1
"test[""Fare""].fillna(test[""Fare""].median(), inplace = True)"	1	1
x_train.shape, y_train.shape	1	1
test_df['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)	1	1
join.head()	1	1
df.loc[fil, 'IsAlone'] = 1	1	1
df['CategoricalAge'] = pd.qcut(titanic_train_dataset['Age'], q = 4)	1	1
c_data.Age.astype(np.uint8).value_counts()	1	1
testONSWAR.shape[0]	1	1
dataframe.loc[(dataframe[column_name] >= 31) & (dataframe[column_name] < 41), column_name] = 3	1	1
test.head()['Cabin']	1	1
train.drop(['Name','Ticket','Embarked','Cabin','Sex'],axis=1)	1	1
test_df.fillna(-999,inplace=True)	1	1
tit_df.loc[p, 'Age'] = rand_MMM_tit[is_m]	1	1
ff.append(sortfare)	1	1
X_t.values	1	1
"df[""Age_Band""].astype(int) * df[""Pclass""].astype(int)"	1	1
df.copy() # make a copy to make all changes do not touch initial DataFrame	1	1
titanic_test['Pclass_2']=(titanic_test['Pclass']==2).astype(int)	1	1
combined['Fare_grp'] = pd.qcut(combined['Fare_per_person'],5,labels=[1,2,3,4,5])	1	1
"titanic.drop(""Survived"",axis=1)"	1	1
test_df.drop(['Ticket','Cabin','Fare','SibSp'], axis=1)	1	1
data_train_dummy2['Family'].values.reshape(-1, 1)	1	1
titanic[['Embarked', 'Survived']].groupby(['Embarked'],as_index=False).mean()	1	1
train['Salutation'] = train['Salutation'].map(dict_sal).astype(int)	1	1
"df[""WithAge""] = 1"	1	1
np.round(y_predict,0).astype(int)	1	1
dc['Fare'] =            dc.groupby(['ClassUp','ClassMid','ClassLow','Family_Size' ])['Fare'].transform(lambda x: x.fillna(x.median()))	1	1
"data_train.loc[data_train[""Sex""] == ""female"", ""Sex""] = 1"	1	1
train_df.loc[:, ['Age*Class', 'AgeFill', 'Pclass']].head(10)	1	1
df['Title'] = df.Name.str.extract(regex, expand = True)	1	1
test_processed['Sex'].replace({'male': 0, 'female': 1}, inplace=True)	1	1
training_set['Survived'].unique() # get the number of bars	1	1
a['CatTitle'] = a['CatTitle'].replace('Mlle', 'Miss')	1	1
tdf['embarked_code'] = tdf.embarked.astype('category').cat.codes	1	1
train_data['WithFamily'].loc[train_data['WithFamily'] > 0] = 1	1	1
pdModelos.loc[row, 'Modelo'] = pipe.steps[3][1]	1	1
dataset['age'] = cut	1	1
"train_df[""Fare""].plot.hist(x=""Fare"", ax = ax [2,0])"	1	1
train.iloc[1043, 6] = 7.90	1	1
X_test[0:5]	1	1
df.apply(get_family_id, axis=1)	1	1
"train.loc[i,""Commentaire""] = l[3].strip()"	1	1
train_df.drop(['Name','Ticket','Fare_Range','Cabin'], axis=1)	1	1
train.drop('Survived', axis=1).append(test)	1	1
train_df['aile_boyut']=train_df['SibSp']+train_df['Parch']	1	1
test_df['Title'] = test_df['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')	1	1
x_test['Age']=x['Age'].fillna(mean_value)	1	1
train['CategoricalFare']=pd.qcut(train['Fare'],4,duplicates='drop')	1	1
X_train.loc[X_train['Embarked'] == 'Q', 'Embarked'] = 3	1	1
X_train.loc[X_train['Embarked'] == 'Q', 'Embarked'] = 2	1	1
parents['parents'] = 1	1	1
full_data['Title'] = full_data['Name'].apply(get_title)	1	1
"dftrain[""Age""].copy()"	1	1
self.values else 'Other'	1	1
train_df.drop(['Ticket','PassengerId'],axis=1,inplace=True)	1	1
dataset['Embarked_S'] = dataset['Embarked'].map(lambda s: 1 if s == 0 else 0)	1	1
data.iloc[55]	1	1
"test_df[""Sex""] = test_df[""Sex""].astype(""category"")"	1	1
"Test[""Title""]=Test.Title.map(title_map)"	1	1
df['AgeBand'] = pd.cut(df['Age'], 5)	1	1
df['CabinCount'] = df['Cabin'].fillna(' ').apply(get_cabin_count)	1	1
"test.loc[(test[""Fare""] >= 14.454) & (test[""Fare""] < 31.0),""Fare""] = 2"	1	1
submit[['PassengerId','Survived']].to_csv('submit.csv',index=False)	1	1
df_submission['age_bin'] = pd.cut(df_submission['age'].astype(int), bins=bins_age, labels=range(5), include_lowest=True)	1	1
"train_df['Age']= train_df['Age'].fillna(train_df[""Age""].median())"	1	1
df_comb['Title'] = df_comb['Name'].apply(get_title)	1	1
train[['Sex', 'Age']].groupby('Sex').mean()	1	1
test_df['Cabin_wing'] = test_df['Cabin'].astype(str).str[0]	1	1
train['Fare'].plot(kind='hist', figsize=(15, 3), bins=100, xlim=(0, 50))	1	1
df_grouped_pclass.Age.mean()	1	1
test2_df.isnull().sum()	1	1
"df_test[[""age15"",""age25"",""age50"",""age100""]]=pd.get_dummies(df_test[""age_group""], dtype=""uint8"")"	1	1
df_train['AgeCat']=pd.cut(df_train['Age'], bins=[0, 18, 100], include_lowest=True, labels=[1, 2])	1	1
dftrain.drop(['Age','Fare'],axis=1)	1	1
test['CabinKnown'] = test['Cabin'].apply(has_cabin)	1	1
gbc_feat_red.transform(gbc_red_test)	1	1
"data_combined[""Fare""].fillna(data_combined[""Fare""].median(), inplace=True)"	1	1
X.loc[[61, 829],['Embarked']] = 'S'	1	1
title_age.dropna(axis = 0)	1	1
full.loc[(full.Title == 'Dr') & (full.Sex == 'female'), 'Title'] = 'Mrs'	1	1
X_train['Age'] =imr.fit_transform(X_train[['Age']].values)	1	1
train_Data.copy()	1	1
X_train.shape[0],	1	1
"train[""SibSp_scaled""] = minmax_scale(train[[""SibSp""]])"	1	1
test['Child'] = 0	1	1
test['Age_num']=label.fit_transform(test['Age_bin'])	1	1
df['NameLength'].hist(bins=30) #most of passenger has name length around 20-30 character	1	1
titanic_test.drop(['Name','Ticket','Cabin'],axis=1,inplace=True)	1	1
train_df['Survived'] = train['Survived']	1	1
test.to_csv( 'random_all_feat.csv' , index = False )	1	1
"validation_targets[""target""],"	1	1
useful.append('Pclass')	1	1
train_data.count()	1	1
test_df.join(dummy)	1	1
df['gender'] = df['Sex'].map( lambda x: x[0].lower() )	1	1
df_combined.describe(include='all')	1	1
Age_range.append(age_range)	1	1
dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <=64) , 'Age' ] = 3	1	1
train_df['IsAlone'] =0	1	1
df.Embarked.apply(lambda x: x[0])	1	1
sibsp_df.max() - sibsp_df.min()	1	1
"dataset[""SibSp""][x]==5:"	1	1
train['Fare'] = np.log1p((train['Fare'] - train['Fare'].mean()) / train['Fare'].std())	1	1
y_train.append(training_set_scaled[i,0])	1	1
df['Age_scaled'] = scaler.fit_transform(df[['Age', 'Fare']], scale_param)[:, 0]	1	1
test['Fare'].index[test['Fare'].apply(np.isnan)].tolist	1	1
trainSet['Embarked']	1	1
data['Fare'].median()	1	1
"data['Initial'].replace(['Mlle', ""Mme"", 'Ms', 'Dr', 'Major', 'Lady', 'Countess', 'Jonkheer', 'Col', 'Rev', 'Capt', 'Sir', 'Don'], ['Miss', 'Miss','Miss', 'Mr', 'Mr', 'Mrs', 'Mrs', 'Other', 'Other', 'Other', 'Mr', 'Mr', 'Mr'], inplace=True)"	1	1
pd.DataFrame.from_dict(data=score_dict, orient='index' )	1	1
y.astype(str)	1	1
name_second_place.append(second_place)	1	1
"grouped[""s_rate""] = grouped[""sum_of_survior""] / grouped[""count_of_sex""]"	1	1
ts.head(2)	1	1
"df_titanic[""Parch""].value_counts()"	1	1
res.to_csv('res.csv', index = None)	1	1
train_data_X.drop(['NamePrefix'],axis=1)	1	1
train_set.fillna(train_set.mean(),inplace=True)	1	1
df_test.join(embarked_one_hot_test)	1	1
"test.set_index(""PassengerId"")"	1	1
t.shape[0]	1	1
models.append(mod_name)	1	1
a['CatTitle'] = a['CatTitle'].replace(['Countess', 'Lady', 'Sir'], 'Royal')	1	1
raw_train['Age'] = age_scaler.fit_transform(raw_train['Age'].values.reshape(-1, 1))	1	1
"TitanicTrain.corr()[""Survived""].to_frame().sort_values(by=['Survived'],ascending=False)"	1	1
base_predictions_train.astype(float).corr(),linewidths=0.1,vmax=1.0, square=True,	1	1
"train_data[""Female""] = 0"	1	1
tr.loc[(tr['Age']>48)&(tr['Age']<=56), 'Age'] = 6	1	1
"train_data[""Ticket""].head(10)"	1	1
test_df.drop(['Male'],axis=1,inplace=True)	1	1
dataset['Young_m'] = (dataset['Age']>=18) & (dataset['Age']<=40) & (dataset['Sex']==0)	1	1
"train_df[""Person""] = train_df[['Age','Sex']].apply(get_person, axis=1)"	1	1
dfresult.to_csv('predictions.csv')	1	1
Data['Family_Size'] = Data['Parch'] + Data['SibSp']	1	1
df_analysis['Embarked'].value_counts().sort_values()	1	1
data.loc[(data.FamilySize > 2) & (data.FamilySize <= 4), 'FamilySizeBand'] = 2	1	1
data.loc[(data.FamilySize > 2) & (data.FamilySize <= 4), 'FamilySizeBand'] = 3	1	1
model_results['DummyClassifier'] = np.mean(scores)	1	1
df_train.drop(['Age', 'AgeBin'], axis=1)	1	1
groupings.groups.keys()	1	1
train.dtypes.reset_index()	1	1
test_data.drop(['PassengerId','Name','Ticket'],axis = 1)	1	1
df['Sex'] # 删除	1	1
df.Embarked.fillna(mode_embarked)	1	1
df.apply(lambda x : 0 if np.sum(x) <= 2 else 1)	1	1
df_train.loc[~df_train['Fare'].isnull(), 'Fare'].median()	1	1
df1['Cabin_grp']= df1['Cabin'].astype(str).str[0]	1	1
data['Embarked'][pd.isna(data['Embarked'])] = 'S'	1	1
submission.to_csv('jsm_submission.csv', index=False)	1	1
train_df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'Fare', 'Age'], axis=1)	1	1
frame['Boy'] = frame['Name'].str.contains('Master').astype(int)	1	1
df['Title'] = df['Title'].map({'NoTitle': 0, 'Mr': 1, 'Miss': 2, 'Mrs': 3, 'Master': 4, 'Rare': 5}).astype(int)	1	1
"data_train_p.drop([""Survived""],axis=1)"	1	1
"train[""eval_tree""] = my_tree.predict(features)"	1	1
models_df.loc[index, 'Validation Accuracy'] = scores['test_score'].mean()	1	1
values.append(train_df[col].isnull().sum())	1	1
train_label.groupby(['Survived'], as_index=False).mean()	1	1
"re.sub('\.', '', re.sub("" "", """", m.group(0)))"	1	1
df_train.tail(5)	1	1
tf.round(tf.sigmoid(hypothesis))	1	1
full['Sib_cat'] = pd.cut(full['SibSp'], bins = [-1,0,2,8], labels = [1,2,3])	1	1
titanicTest.drop('Embarked',1)	1	1
cols.values	1	1
titanic_df.drop(['Fare'], axis=1)	1	1
df.drop(labels=[each], axis=1)	1	1
df.loc[(df['Fare']>31)&(df['Fare']<=513),'Fare_cat']=4	1	1
"test.loc[(test[""Age""] >= 18) ,""Age""] = 2"	1	1
data.loc[data['Fare'] <= 8.66, 'SortFare_3'] = 0	1	1
"df_train.groupby('sex')['fare'].mean().plot(kind='bar', figsize=(10,8), title = ""Average Passage Value By Gender"");"	1	1
"orig_test_set[""PassengerId""],"	1	1
data.surname_Mellinger.astype('category')	1	1
train_df.drop('Parch', axis = 1, inplace = True)	1	1
df_train.loc[:, ['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
df1['Age'].value_counts().plot.hist( grid=True,color='b',alpha=0.7)	1	1
cabins_for_classes.append([a.loc[a['Pclass']==1]['Cabin2'].value_counts()])	1	1
"X_train.drop(""Age Group"", axis = 1)"	1	1
"X_logistic.drop(""Name"", axis=1, inplace=True)"	1	1
train_df.fillna(train_df.mean(), inplace=True)	1	1
output.to_csv('final-predictions_LR.csv', index = False)	1	1
test_hot.drop('Name',axis=1)	1	1
all_df['DeckPred'] = YDeck_pred	1	1
df['age_T'] = df.apply(lambda x: -1 if x['Age'] == -1 else x['age_T'], axis=1)	1	1
test['AgeBin_Code'] = data['AgeBin_Code'][891:]	1	1
test_df['fare'].fillna(test_df['fare'].dropna().median(), inplace=True)	1	1
full['GroupSize'] = full[['FamilySize','TicketSize']].max(axis=1)	1	1
train['Age'].fillna(train['Age'].median() , inplace=True)	1	1
"df_titanic['Pclass'] = df_titanic['Pclass'].astype(""category"")"	1	1
combined['Sex'] = combined['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
kaggle_test.head()	1	1
X.loc[X['Parch']==0]	1	1
names.loc[(names['dona'])==1,'dona'] = 0	1	1
test['CategoricalFare'] = full_fare[891:]	1	1
submissions.Survived.apply(lambda x : 1 if x > 0.49 else 0)	1	1
test[['Pclass', 'Sex', 'Age', 'Fare']].values # Features yang sama dengan training	1	1
"holdout[""Embarked""] = holdout[""Embarked""].fillna(""S"")"	1	1
incorrect_rel.astype(float)	1	1
df.hist(bins=50, figsize=(20,15))	1	1
"train_df[""Embarked""] = train_df[""Embarked""].map({""S"":0, ""C"":1, ""Q"":2})"	1	1
train.loc[(train['Fare']>8)&(train['Fare']<=15),'Fare_cat']=1	1	1
data.distinction_in_tikect_Others.astype('category')	1	1
train['new_SibSp'] = train.SibSp	1	1
test['Embarked'] = test['Embarked'].map({'S':1,'Q':2,'C':3}).astype(int)	1	1
simple_data_df['P2_Female'] = np.where((simple_data_df['Sex']==1) & (simple_data_df['Pclass']==2), 1, 0)	1	1
df_test.Fare.fillna(avg_fare, inplace=True)	1	1
FeatureDF['Age'] = FeatureDF[['Age','Pclass','Sex']].apply(AgeImp,axis=1)	1	1
"train[""Sex""].value_counts().plot(kind=""bar"")"	1	1
axes[1].bar(ind, dead_m, width, color='#d62728')	1	1
filt_df['has_family'] = filt_df['has_family'].apply(lambda count: 1 if count > 0 else 0)	1	1
test_df['Age'].dropna().min().astype(int)	1	1
"title_dict[""CAPT""] = 2"	1	1
test_set.head(20)	1	1
big['XName'] = big['Name'].apply(lambda x: str(x)[0:str(x).find(',')] if str(x).find(',') != -1 else x)	1	1
test.select_dtypes(include=['float64'])	1	1
finalIsSurvived.to_csv('submit.csv', encoding='utf-8', index=False)	1	1
nan.mask(nan==0).dropna().index	1	1
df['Age'] = df.groupby(['Pclass'])['Age'].transform(lambda x: x.fillna(x.mean()))	1	1
dataset.loc[(dataset['Fare'] > 26) & (dataset['Fare'] <= 27), 'Fare'] = 4	1	1
one_hot_encoded_test_df.head()	1	1
np.where(test[variable].isin(frequent_cat), test[variable], mode_label)	1	1
train_df.head(25)	1	1
"dat[""Fsize""] = dat[""SibSp""] + dat[""Parch""] + 1"	1	1
df['Deck'] = df['Cabin'].fillna(value='NA').apply(lambda x: ''.join(filter(str.isalpha, x))[0] if x != 'NA' else x)	1	1
train.loc[:, 'Survived'] = Survived	1	1
"testingset[""AgeBin""][x] == ""Missing"":"	1	1
train.loc[(train['Age']>16)&(train['Age']<=32),'Age_band']=1	1	1
res['Survived'].tolist()	1	1
train3_df.iloc[:,0].values	1	1
member['FamilySize'] = member['SibSp'] + member['Parch'] + 1	1	1
titanic.groupby('Embarked')['Fare'].describe()	1	1
train_data.select_dtypes(include=['object']).head()	1	1
train.drop(['Cabin','Name', 'Ticket'], axis=1, inplace=True)	1	1
test_set.iloc[:, [1,3,4,5,6]].values # Pclass, Sex, Age, SibSp, Parch	1	1
merged.loc[merged['Group'] == 'Rare title, Cabin Pclass 1, not large', 'Predict'] = 1	1	1
train['child'] = [1 if i<16 else 0 for i in train.Age]	1	1
X_test.fillna(median(hlp['Age'].tolist()), inplace=True)	1	1
train_df[['Pclass','Survived']].groupby('Pclass',as_index=False).mean()	1	1
tit_df_san['Survived']	1	1
"X[""Name""]"	1	1
"data[""Embarked""] = data[""Embarked""].fillna(""U"").apply(lambda e: embarkments.get(e))"	1	1
imputer_test.transform(df_num_test)	1	1
train[['Sex', 'Survived']].groupby('Sex').mean().iplot(kind='bar', colors='blue', title='Survival Rate based on Gender')	1	1
axes[1].set_xlabel('Embarked')	1	1
data['Embarked_fillZ'] = data.Embarked.fillna('Z')	1	1
"train[""TicketPrefix""] = train.apply(lambda row: get_ticket_prefix_id_mapping[get_ticket_prefix(row['Ticket'])], axis=1)"	1	1
test_data.drop(['Sex'], inplace=True, axis=1)	1	1
"train_data[[""Sex"", ""Survived""]]"	1	1
train_data[['Pclass', 'Survived']].groupby('Pclass')	1	1
test['title']=test.Name.apply(lambda x: x.split('.')[0].split(',')[1].strip())	1	1
accuList.append(100. * (vcount / len(validL)))	1	1
"df_test[""FSize""] = df_test[""Parch""] + df_test[""SibSp""] + 1"	1	1
"test[""Embarked""] = labelEncoder_X_2.fit_transform(test[""Embarked""])"	1	1
x['Ticket']	1	1
"df.loc[(df.ischild == 1)&(df.Age.isna()), ""Age""].shape[0]"	1	1
df_ticket.sort_values(by='Survived')	1	1
train_df.drop('PassengerId', axis = 1, inplace = True)	1	1
"factors[""t_num_log10""]=1"	1	1
testData.drop(['Name', 'Ticket','Cabin'], axis=1, inplace=True)	1	1
acc.append(metrics.accuracy_score(y, P.loc[:,m]))	1	1
tr['Embarked'] =tr['Embarked'].replace('C',2)	1	1
df['fare_T'] = df.apply(lambda x: 0 if  x['Fare'] < 8 else x['fare_T'], axis=1)	1	1
train['Child'] = train['Age']<=10	1	1
df_dums['age_5']=[1 if ele > 50. else 0 for ele in df_dums['Age']]	1	1
data.loc[data['FamilySize'] == 2, 'Couple'] = 1	1	1
treated_df.fillna(0) #treated_df = treated_df.dropna()	1	1
X_Test.iloc[:,1]=pd.DataFrame(got_test).Name.str.split('\s+').str[1]	1	1
data['Name']=nameEncoder.fit_transform(data['Name'].transform(lambda n: n[n.index(',')+2:n.index('.')]))	1	1
train.loc[train['Embarked'] == 'Q', 'Embarked'] = 0	1	1
"axes[0].set_xticklabels((""First class"", ""Second class"", ""Third class""))"	1	1
"df[""Title""][df[""Title""] == ""Mlle""] = ""Miss"""	1	1
np.round(predicted_Survived)	1	1
df['Ticket'].unique()	1	1
result.probability.describe()	1	1
scores.append((estimator, local_scores.mean(), local_scores.std()))	1	1
final_csv['Fare'].fillna(final_csv['Fare'].median(), inplace = True)	1	1
df[['Family_Size', 'Survived']].groupby('Family_Size').count().merge(df[['Family_Size', 'Survived']].groupby('Family_Size').sum(), right_index = True, left_index = True)	1	1
train['Title'] = train['Name'].apply(func=get_title)	1	1
X_test['Fare'].fillna(value=35,inplace=True)	1	1
"test[""FamilyId""] = family_ids"	1	1
test.to_csv('out.csv')	1	1
decks_by_class[0],size=1,	1	1
scores.append(cv_results)	1	1
result_prediction.to_csv('titanic_prediction.csv')	1	1
data['Families'] = data.SibSp + data.Parch + 1	1	1
df['CLASS'] = df['A'] + df['B']*df['C'] + df['A']*df['D']	1	1
df_test['Embarked'] = df_test['Embarked'].replace(numembark)	1	1
test['Age_group'] = Age_group_test	1	1
df_train['AgeRange'] = pd.cut(df_train['Age'], [0, 15, 40, 80], labels=['child', 'adult', 'aged'])	1	1
train.as_matrix(columns=features1)	1	1
test_df1_pred.head()	1	1
"data['Nickname'] = data['Name'].str.split('""').str.get(1)"	1	1
X.drop(['Ticket'], axis=1, inplace=True)	1	1
np.round(decision_tree.score(X_train_norm, Y_train), 4)	1	1
train['Age'].fillna(train.groupby(['Sex','Pclass','Title'])['Age'].transform('median'),inplace=True )	1	1
df_train['FareAvg'].max(), df_test['FareAvg'].max()	1	1
train_df.iloc[:,0]	1	1
miss.drop([x for x in miss.index if x in parch.index])	1	1
plt.hist(age_dist_before, normed=True)	1	1
data_train.drop(labels=['PassengerId'], axis = 1)	1	1
train6['HasCabin'].loc[train6['Cabin'].isnull()] = 0	1	1
train.Cabin.isnull().value_counts()	1	1
test_acc.append(batch_acc)	1	1
vals.dropna(axis=0,inplace=True)	1	1
"full_dataset[""Fare""] = full_dataset[""Fare""].fillna(full_dataset[""Fare""].median())"	1	1
train['FareCategorical'] = train['FareCategorical'].astype(int)	1	1
np.where(X_test[variable].isin(frequent_cat), X_test[variable], mode_label)	1	1
total_data.sum()	1	1
X_test['Fare'].dropna().median()	1	1
"test_data.drop(axis=1,columns=[""PassengerId"",""Name"",""Ticket"",""Cabin"",""Family_Size""])"	1	1
train_data.size	1	1
results.append(get_scaled_models_results(scaled_models, scaler_tuple[0], x, y, kfolds))	1	1
df['IsAlone'].value_counts()	1	1
sns.boxplot(y='Age', x='Pclass', ax=ax1, data=train_df, linewidth=1, saturation=5, palette=palette3)	1	1
"dataset.drop([""SibSp"",""Parch""],axis=1)"	1	1
titanic_df.groupby(titanic_df['Cabin'].isnull()).mean()['Survived']	1	1
train_df_backup_filledna_still_having_categorical_data.head()	1	1
all_data.drop(cols_to_be_dropped, axis=1, inplace=True)	1	1
test.as_matrix().astype(np.float)	1	1
df[['Survived', 'Pclass']].groupby('Pclass').sum()	1	1
allset[['Age', 'Pclass','Sex']].groupby(['Sex','Pclass'], as_index=False).mean().sort_values(by=['Sex','Pclass'], ascending=True)	1	1
"_df.loc[ [353, 533, 1229, 774], ""group_id""] = 1001.0"	1	1
train_X[['Pclass','Sex','Embarked']]	1	1
full_train_set.loc[full_train_set['Pclass'] == 1]	1	1
train_df[['Survived'] + selected_feature].copy()	1	1
test['Fare_group'] = Fare_group_test	1	1
rest.append('Ticket')	1	1
pp.boxplot([train_data['Fare']])	1	1
ax[0].set_title('Survived vs Embarked')	1	1
df_train['Family'] = df_train['Parch'] + df_train['SibSp']	1	1
data_full['AgeBin'] = bins[:-2].astype(float)	1	1
train_dataset['Sex'].unique():	1	1
train_test.describe()	1	1
"titanic_test[""Embarked""] = titanic_test[""Embarked""].fillna('S')"	1	1
data.loc[data['Age'] <= 15,'Age'] = 0	1	1
"test_df[""Fare""][152] = float(14.644083)"	1	1
df[['Survived']].groupby(df['Deck']).mean().plot.bar()	1	1
dataset.loc[ dataset['Fare'] <= 7.854, 'Fare'] = 0	1	1
np.sum(y_mix, axis=0)	1	1
"df[""Age""].median(skipna=True)"	1	1
test2['Age'][x] = age_mapping[test2['Title'][x]]	1	1
test_df['IsAlone'] =0	1	1
FeatureDF['RealFare'] = FeatureDF['Fare']/FeatureDF['FamilySize']	1	1
names.loc[(names['capt'])==1,'mr'] = 1	1	1
X.shape[0]   #number of rows	1	1
male['Age'].replace(np.nan,30.7,inplace= True)	1	1
dataset['noTicketPartner'] = np.where(dataset['ticketSize']==1,1,0)	1	1
df['Deck'] = df['Cabin'].map(lambda x: getDeck(x))	1	1
df['FamilySize_bin'] = pd.cut(df['FamilySize'], bins=[0,1,2,4,20], labels=['Single','Small','Large','Fuge'])	1	1
"dataset[""Age1""] = 0"	1	1
"df_real_test[""Fare""] = df_real_test[""Fare""].fillna(0)"	1	1
df_data['Ti_Code'] = label.fit_transform(df_data['Ti_AgeBin'])	1	1
df.loc[(df['Family_size'] >= 2) & (df['Family_size'] <= 4), 'Family_size_bin'] = 1	1	1
"train[""Deck""] = train[""Deck""].astype(""category"")"	1	1
"df_test[""Fare""].fillna(df_test[""Fare""].median(), inplace=True)"	1	1
"combined_test.drop([""PassengerId"",""Survived""], axis=1)"	1	1
data.astype(float).corr(),linewidths=0.1,vmax=1.0,	1	1
X_train.shape, Y_train.shape, X_val.shape, Y_val.shape, X_test.shape	1	1
train[['Pclass','Survived']].groupby(['Pclass']).mean().plot.bar()	1	1
X_train.columns.values[FeatSel_log.get_support()]	1	1
df.join(dumm)	1	1
train_reg.loc[:, Xrcol]	1	1
dataset[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	1	1
df_train.groupby(['_Name'])['Survived'].sum().reset_index()	1	1
le.transform(finalTest.Sex)	1	1
train_all.loc['train']	1	1
test_dmy.isnull().sum()	1	1
parameters.items():	1	1
df['Name'] = df['Name'].replace('Mlle', 'Miss')	1	1
"params[""learning_rate""] = 0.01"	1	1
tree.query(tmp_imp_arr[nan_v,:].reshape(1,-1), k)	1	1
X2test['Age'][i] = age_avg	1	1
results.append(tree.score(X_test,y_test))	1	1
submission.to_csv('clf_titanic.csv', index=False)	1	1
data_train['Embarked'].value_counts().plot(kind='bar')	1	1
ax[2][0].set_ylabel('Age', rotation=0, labelpad=80)	1	1
data_test_all.Cabin.apply(f)	1	1
model.add(Dense(units = 14, kernel_initializer = 'random_uniform', activation = 'relu'))	1	1
"combined[""SibSp""] + combined[""Parch""]"	1	1
test_dataset.Age.astype(int)	1	1
titanic_df.drop(['Parch'],axis=1,inplace=True)	1	1
df_train['Parch'].isnull().sum()	1	1
df_train.groupby(['Pclass','Embarked'])	1	1
df['Fare_cats']=pd.cut(df['Fare'],cut_points,labels=label_names)	1	1
data.loc[(data.Age.isnull()) & (data.Title == 'Officer.'), 'Age'] = data.loc[data.Title == 'Officer.', 'Age'].median()	1	1
test.drop('Pclass', axis=1, inplace=True)	1	1
tmp_scaled.assign(Embarked=train_data['Embarked'])	1	1
base_prediction.drop(columns = ['ABC', 'SVC', 'ETC'], axis = 1)	1	1
df.loc[mask_c, 'Child'] = 1	1	1
test_data['Name_pred'] = test_data['Name_pred'].map(preds)	1	1
titanic['CA'] = (titanic['Ticks'] == 'CA').astype(int)	1	1
data_test.drop(['Age'], axis = 1)	1	1
People_Survived.head()	1	1
raw_train['Title'].unique()	1	1
simple_data_df.drop(columns=['Pclass', 'Sex'], axis=1, inplace=True)	1	1
titanic_train_df.Age.loc[titanic_train_df['Title'] == 'Master'] = titanic_train_df.Age.fillna(titanic_train_df[(titanic_train_df['Title'] == 'Master')]['Age'].mean())	1	1
"df[""Parch""]"	1	1
x_one_hot_encoded.align(one_hot_encoded_test_predictors,join='inner',  axis=1)	1	1
ship.copy()	1	1
"pd.isnull(df_train[""Fare""][x]):"	1	1
titanic[['Embarked', 'Fare']].groupby('Embarked').mean()	1	1
train_set[['Pclass', 'SibSp', 'Fare', 'FamliySize', 'Alone', 'Age']]	1	1
df.Cabin.apply(lambda x:x[0].upper())	1	1
df_real_test.fillna(0)	1	1
dataset_train[['Age', 'Survived']].groupby(['Age']).count()	1	1
df.drop('PassengerId',axis=1,inplace=True)	1	1
dftr.set_index(dftr['PassengerId'])	1	1
df_test.loc[df_test['Fare'].isnull(),'Fare']=0	1	1
dataset[['class1','class2']] = pd.get_dummies(dataset['Pclass'],drop_first=True)	1	1
iset['Name_Len'] = iset['Name'].apply(lambda x: len(x))	1	1
processed.loc[processed[isnull_col_name], col_name] = 0	1	1
"test_reloadedModel.select(""PassengerId"", ""prediction"").show(5)"	1	1
converted_df.head()	1	1
train_df.drop(['Cabin', 'SibSp', 'Parch', 'Ticket', 'Survived'], axis=1).dropna()	1	1
X_valid.copy()	1	1
result_df.drop(['Pclass', 'Name', 'Sex', 'Age','SibSp', 'Parch','Ticket','Fare','Cabin','Embarked'],  axis=1)	1	1
"df[""Sex""].map(lambda x: 1 if x == ""female"" else 0)"	1	1
"dftotal.loc[index,""KSurvivalRate""]=dftotal.loc[nbours_index,""Survived""].mean()"	1	1
titanic_df['Cabin'].isnull().sum()	1	1
"results.to_csv(""Titanic_test_set_prediction.csv"",index=False)"	1	1
df_test['Deck'] = df_test['Cabin'].str.slice(0,1)	1	1
train_data['Cabin_B'] = Cabin_dummy['B']	1	1
train_df.groupby(['Survived', 'Sex', pd.cut(train_df['Pclass'], np.arange(0, 4))]).size().unstack(0).plot.bar(stacked=True)	1	1
whole.set_value(386,'Fid',147) # Davies Mr. Charles Henry SibSp, Parch =0 but seems like an error	1	1
"train_df.drop(columns={""Cabin"",""Cabin_prefix""},inplace=True)"	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset.Sex == s) & (dataset.Pclass == p + 1),                    'Age'] = age_fill[s,p]	1	1
"test[""Family""] = test[""Family""].map({""Alone"" : 0, ""withFamily"" : 1})"	1	1
data_test_df['Embarked'] = data_test_df['Embarked'].astype(str)	1	1
S1.head(5)	1	1
train.groupby(['Survived','Embarked','Pclass']).mean()[['Parch','SibSp']]	1	1
test_copy['SibSp_Category'] = test_copy['SibSp_Category'].astype(int)	1	1
test_original.head()	1	1
"dftrain.loc[idx,""CountTicketButLast""]=ticketButLast_count_train[ticketButLast]"	1	1
test_data.drop(drop_features, axis=1)	1	1
dataset['Title_Code']=label.fit_transform(dataset['Title'])	1	1
train_cp[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	1	1
trainset.shape	1	1
data_test.drop(['Cabin','Ticket'],axis=1)	1	1
"train_df.drop([""PassengerId"", ""Survived"", ""Name"", ""Ticket"", ""Cabin""], axis=1)"	1	1
dataset.loc[ dataset['Fare'] <= 7.91, 'Fare']= 0	1	1
"X[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
dataset['Title']   =   dataset['Title'].replace('Ms', 'Miss')	1	1
"dfWF[""val""]"	1	1
Xknn_test.Age.isnull().nonzero()[0]	1	1
"data_combined['FamilySize'] =  data_combined[""Parch""] + data_combined[""SibSp""] + 1"	1	1
age[['Age_Categorized_Unknowns', 'Survived']].groupby(['Age_Categorized_Unknowns'], as_index=False).mean().sort_values(by='Age_Categorized_Unknowns', ascending=True)	1	1
df['age'] = pd.cut(df.age, bins, labels=group_names)	1	1
df.loc[df['Age'] > 56, 'AgeGroup'] = 3	1	1
train[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
"combined.loc[f_member,""Sex""] == ""male"":"	1	1
dataset['Sex_Code']=label.fit_transform(dataset['Sex'])	1	1
df['NameTitleCat'] = df.NameTitle.map(TitleMap).astype(int)	1	1
df['Pclass'] = df['Pclass'].astype('category')	1	1
"train_df[""Title""] = titles"	1	1
classifiers.append(LinearSVC(random_state = 0))	1	1
died_data['Survived'].loc[died_data['Pclass']==3]	1	1
df.Age_bin.fillna(df.Age_bin.mean() , inplace=True)	1	1
stacked_models_df['rf'] = clf.predict(x_train)	1	1
"_df.loc[  1197,""group_id""] = 149.0"	1	1
data_full['Age']	1	1
titanic_train.join(pclass_dummies_titanic)	1	1
training_data[['Sex','Age', 'Survived']].groupby('Age').mean()	1	1
pdModelos.confM[0]/pdModelos.confM[0].sum(axis=1)[:,  np.newaxis],	1	1
"test[""Cabin_type""] = test[""Cabin_type""].fillna(""Unknown"")"	1	1
train_df.drop(['EmbarkedFill', 'Title'], axis=1)	1	1
df_train['FamilyBool'] = (df_train['SibSp'] > 0) | (df_train['Parch'] > 0)	1	1
full_df['AgeIsNull'] = pd.isnull(full_df.Age).astype(int)	1	1
"df[""Age""] = df[""Age""].astype('int')"	1	1
"submission.to_csv(""solution_logit.csv"", index=False)"	1	1
"train[""Pclass""].hist()"	1	1
df_full['Age'].fillna(df_full['Age'].median(), inplace=True)	1	1
"df_train[""age_group""]=pd.cut(df_train[""Age""],bins)"	1	1
predictions.round()	1	1
train['Age'][i] = train['Age'].mean()	1	1
"ans.to_csv(""submit_rf.csv"", index = False)"	1	1
"missing_values.sort_values(by = ""Count"", ascending = False)"	1	1
combine.describe(include=['O'])	1	1
train['AgeCategory'] = train['Age'].apply(get_age_categories)	1	1
df3_train.drop('Survived', axis=1)	1	1
combine_df['Title'] = combine_df['Title'].replace(['the Countess','Mme','Lady','Dr'], 'Mrs')	1	1
df['YA'] = np.where((df['Age']>5) & (df['Age']<=15), 1, 0)	1	1
titanic['Title'] = titanic[['Title', 'Age']].apply(girls_title, axis=1)	1	1
tr['Title'] =tr['Title'].replace('the Countess',3)	1	1
full.drop(['Sibling_Spouse','Parent_Children'], axis=1, inplace=True)	1	1
"holdout[""Cabin_type""] = holdout[""Cabin_type""].fillna(""Unknown"")"	1	1
df[['Fare','Pclass','Survived']].corr()	1	1
"big['XWho'][big['TName'] == i] = ""High."""	1	1
WholeDataSet['Fare'] = WholeDataSet['Fare'].fillna(WholeDataSet.Fare.median()) # use the average fare is good enough	1	1
newDf.dropna(axis=1, how='any')	1	1
model_num.add(Dense(64, activation='relu', input_shape=(4,)))	1	1
test['family_size']=test['SibSp']+ test['Parch'] + 1	1	1
train_df_X['Age']= train_df_X['Age'].interpolate()	1	1
dataset[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()	1	1
predictions['NaiveBayes_Gaussian']=accuracy_NB_GM*100	1	1
full.drop('PassengerId', axis=1, inplace=True)	1	1
test_data['Title'] = test_data.Name.map( lambda x: x.split(',')[1].split( '.' )[0].strip())	1	1
dataset['Cabin_B'] = dataset['Cabin'].map(lambda s: 1 if s == 6 else 0)	1	1
test_copy.loc[test_copy['SibSp'] == 0, 'SibSp_Category'] = 0	1	1
train.groupby('Survived').Age.value_counts().unstack()	1	1
dataset['Name'] = dataset['Name'].replace('Mlle', 'Miss')	1	1
axes[1].set_title('Survival Rate vs Embarked')	1	1
row['Title'] in rare_title:	1	1
"train['Embarked'] = train['Embarked'].fillna(value=""S"")"	1	1
test['Title']=test['Name'].map(lambda x: substrings_in_string(str(x), title_list))	1	1
combined.sample()	1	1
y_train.shape[:]	1	1
test.drop('Name',axis=1)	1	1
train[['Parch','Survived']].groupby('Parch',as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
submission_df.to_csv('basic_random_forest.csv', index=False)	1	1
tr['Title'] =tr['Title'].replace('Miss',3)	1	1
"svc_solution.to_csv(""svc_solution_gradient.csv"", index_label = [""PassengerId""])"	1	1
df['big_family'] = df['family_size'].apply(lambda size: 1 if size>=7 else 0)	1	1
combined_data.apply(lambda x: sum(x.isnull()))	1	1
dataset['Title'] = dataset['Title'].replace(['Capt','Major','Col'],'Military')	1	1
comb_data['Sex'] = np.where(comb_data['Sex']=='male', 'Male', 'Female')	1	1
testdata.ix[(testdata.Age >= 25) & (testdata.Age < 51), 'AgeCategory'] = 3	1	1
test['Embarked'][test['Embarked']=='Q']=2	1	1
sns.boxplot(y='Fare',x='Survived',data=train,ax=ax2)	1	1
"train[""Cabin""][train[""Cabin""] == ""T""] = 7"	1	1
train.SibSp.astype(str)	1	1
test.groupby('Cabin')['Pclass'].count()	1	1
misclassified.append(train_labels[test_index][pred != train_labels[test_index]].index)	1	1
test_data['Famly'] = test_data.apply(lambda x:0  if((x['SibSp'] + x['Parch']==0))  else (1 if((x['SibSp'] + x['Parch']<4))  else 2)  , axis=1)	1	1
train3_df.iloc[:,1:].values	1	1
train['Pclass2'] = train['Pclass']	1	1
Titanic_Master.Fare.isnull().any()	1	1
X.dropna(subset=features_to_check)	1	1
training_df.filter(key_features)	1	1
combined.loc[ combined['Age'] > 64, 'Age'] = 4	1	1
all_data.Embarked.fillna(all_data.Embarked.mode()[0],)	1	1
"test[""Age""].median()"	1	1
test.loc[test['CabinN3'] == 999, 'hasCabin3'] = 0	1	1
train_p['Age_new'].hist()	1	1
trainPCA.copy()	1	1
test_df.loc[test_df.Title == 'Mme', 'Title'] = 'Mrs'	1	1
S['New_Grade'] = S['Grade'] .map({'Ex':4,'Gd':3,'Ag':2,'Po':1})	1	1
train.Embarked.isna().value_counts()	1	1
test_X.dropna(axis=0)	1	1
"logistic_submit_dataframe[""PassengerId""] = titanic_test_dataframe[""PassengerId""].copy()"	1	1
df_train.drop(['Fare', 'FamilySize', 'FarePPBin', 'FarePP'], axis=1)	1	1
train_df.drop(['PassengerId','Name','Ticket'], axis = 1)	1	1
d_res_rf.loc[index_selection_rf,['estimator','params','val_score','mean_test_score','mean_train_score','val_F_score']]	1	1
"data.loc[train[""Fare""] == 0, ""Fare""] = None"	1	1
df['CabinCategory'] = pd.Categorical.from_array(df.Cabin.fillna('0').apply(lambda x:x[0])).codes	1	1
family_ticket_share_df.loc[1,1] = np.nan	1	1
"train.join(pd.get_dummies(train[""Embarked""]))"	1	1
combined_df[['Sex','Age']].groupby(by='Sex').median()	1	1
df.to_csv('submission.csv', encoding='utf-8', mode = 'w', index=False)	1	1
df1['Sex'].value_counts().plot.bar(color='g')	1	1
"data_df[""Sex""] = data_df[""Sex""].replace(""male"", 0).replace(""female"", 1)"	1	1
train_p['Family'].loc[train_p['Family'] == 0] = 0	1	1
"final_test.drop(""Survived"", axis = 1)"	1	1
df.loc[idx_ok, ['Age', 'Parch', 'SibSp', 'Sex']].values	1	1
"train[""Cabin""] = (train[""Cabin""].notnull().astype('int'))"	1	1
train_data[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean()	1	1
titanic['Embarked'].fillna(value = 'S', inplace = True)	1	1
test_df_clean.isnull().sum()	1	1
train3_df.head(10)	1	1
y_pred[['PassengerId', 'Survived']]	1	1
train_X['Embarked'].isnull().sum()	1	1
titanic_df['Family'] =  titanic_df['Parch'] + titanic_df['SibSp']	1	1
x_test['Embarked'] = embarked_encoder.fit_transform(x_test['Embarked'])	1	1
test[['Pclass','Sex','Age','Parch','SibSp','Embarked']].copy()	1	1
training_examples.copy()	1	1
"traindata[""title""] = traindata[""title""].fillna(5)"	1	1
train['source'] = 'train'	1	1
col_name.append(c)	1	1
titanic.loc[:,i]=titanic.loc[:,i].round()	1	1
data_to_submit.to_csv('neuralNet.csv', index = False)	1	1
"train.loc[(train[""Pclass""]==1)&(train[""Survived""]==0), ""Age""]"	1	1
cat_pipe.append(('Deck', Deck_add()))	1	1
"data.loc[data[""Age""] > 18, ""Child""] = 1 # Adult"	1	1
train_data['Embarked'].fillna('N', inplace=True)	1	1
df.loc[df['Age']<13]	1	1
np.round(train_pred).astype(int)	1	1
dataset.loc[(dataset['Fare'] > 40) & (dataset['Fare'] <= 80), 'Fare'] = 3	1	1
train['Singleton'] = train['FamilySize'].map(lambda s: 1 if s == 1 else 0)	1	1
df_train.drop('Embarked',axis=1)	1	1
values.any():	1	1
tr['Deck'] =tr['Deck'].replace('A',1)	1	1
dataframe['Name']	1	1
train_df.loc[(train_df.Cabin.isnull())&(train_df.Initial=='Miss'),'Cabin']='E101'	1	1
known_data.head()	1	1
df['Age_Group'] = labels	1	1
"solution.to_csv(""log_sol.csv"", index = False)"	1	1
"train.loc[train[""Sex""]==""female"",""Sex""]=1"	1	1
train.Survived.astype('category', ordered=False)	1	1
"copyTest_df[""Embarked""].reshape(-1,1)"	1	1
test.drop(['Fare'],axis=1,inplace=True)#dropping Fare because it does not contribute and has missing values	1	1
test_dataset.describe()	1	1
data['TktNum'] = pd.Series(TktNum)	1	1
train.loc[(train['Fare']>15)&(train['Fare']<=31),'Fare_cat']=2	1	1
res.to_csv('result')	1	1
"models.append((""KNN"", KNeighborsClassifier))"	1	1
analysis_df.loc[input_df.index]	1	1
np.where(embarked=='Q', 1, embarked)	1	1
data.parent_alone.loc[data.PassengerId==680] = 0	1	1
df['Name'].copy()	1	1
"titanic_test_dataframe.loc[row_indices, ""Fare""] = fare_median"	1	1
test_df1['PassengerId']	1	1
t.fillna(t.mean())	1	1
np.max(training_time)	1	1
"test[""Deck""] = test[""Deck""].astype(""int"")"	1	1
test_mod.Fare.describe()	1	1
dataset.loc[(dataset['Fare']>30)&(dataset['Fare']<=100), 'Fare']=2,	1	1
train_raw.Fare.hist(density = True)	1	1
"titanic_df[""sex""].unique()"	1	1
"fpr[""macro""], tpr[""macro""],"	1	1
"test_df.loc[test_df[""Title""] == ""Jonkheer"", ""Title""] = 'Rare Title'"	1	1
train.loc[train['Cabin'].str.len() <= 4.0, 'CabinN1'] = train['Cabin'].astype(str).str[1:]	1	1
train.loc[(train['Family']<4)&(train['Family']>1),'Family']=1	1	1
X_train.loc[:,selector.support_]	1	1
data_test.sample(3)	1	1
in ['Capt','Col','Don' ,'Dr' ,'Major','Rev' ,'Sir']:	1	1
imputer.transform(X_validation)	1	1
df_train['Embarked'] = df_train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
"train_data[""Fare""].std()"	1	1
cv['test_f1_score'].mean(),	1	1
train.drop(['Ticket'],axis=1,inplace=True)	1	1
results2.to_csv('SUBMISSION22.CSV', index = False)	1	1
"models.append((""AdaBoostClassifier"", AdaBoostClassifier))"	1	1
test.loc[(test['Parch'] != 0), 'Alone'] = 0	1	1
acc_df.sort_values('Accuracy',ascending = 0)	1	1
df.shape[0], df[df.Survived==1].shape[0]	1	1
"df[""Name""].str.split("","", expand = True) #with expand i creates a dataframe not a series"	1	1
df.loc[df.Age.isnull(), 'Age' ] = Age_predict	1	1
np.where(test_Y > 0.5, 1, 0)	1	1
test_df.drop('passengerid', axis=1).copy()	1	1
confused_mat[0][0]	1	1
titanicTrain_X.drop('Survived', axis=1)	1	1
titanic_train_data['Name'].apply(titleMrs)	1	1
family_df.loc[family_df.FamilySize==1,'FamilyLabel'] = 'Single'	1	1
all_data.loc[ all_data['Fare'] > 31, 'Fare'] = 3	1	1
test_df['Old_Female'] = (test_df['Age']>50)&(test_df['Sex']=='female')	1	1
dt.values	1	1
"train.loc[train[""Embarked""].isnull(),""Embarked""]  = train[""Embarked""].mode()[0]"	1	1
titanic_train_data['Fare'].iplot(kind='hist', bins=30)	1	1
"title_by_sex[""Male""] = full[full[""Sex""] == 0][""Title""].value_counts()"	1	1
df_features['Ticket'] = df_features['Ticket'].apply(lambda x: dict_tickets[x] if x in dict_tickets.keys() else 0)	1	1
titanic_train_dataset.loc[titanic_train_dataset['FamilySize'] == 1, 'IsAlone'] = 1	1	1
np.dot(W1,X) + b1	1	1
np.sum(ans==MLP_pred)/len(dtest)	1	1
test['Pclass'] = test.Pclass.astype(float)	1	1
Xdf.loc[(Xdf['Age'] > 48) & (Xdf['Age'] <= 64), 'Age'] = 3	1	1
train_df['Embarked'] = train_df['Embarked'].astype('object')	1	1
train_1.describe()	1	1
df.Age.fillna(median_age, inplace=True)	1	1
test_input.drop('Embarked',axis=1,inplace=True)	1	1
testOrg['AgeGroup'] = '0'	1	1
test_x.select_dtypes(['object'])	1	1
df.Fare.max()	1	1
raw_data['Title'] = raw_data['Title'].replace('Ms', 'Miss')	1	1
df_train.drop('Target', axis=1)	1	1
train_1.drop(['SibSp','Parch'], axis = 1,inplace = True)	1	1
data['Title'] = data.Name.str.extract('([A-Za-z]+)\.', expand = False)	1	1
titanic_train['Fare']=titanic_train['Fare'].astype(int)	1	1
ax[0][0].set_title('Survivors')	1	1
df.iloc[:,1:].values	1	1
test['family_size'] = 1 + test['SibSp'] + test['Parch']	1	1
imputer.transform(df_num)	1	1
titanic_train_org.describe(include='all')	1	1
item['param_values']:	1	1
"test_ori[""Title""]=(test_ori[""Name""].str.split(', ').str[1]).str.split('. ').str[0]"	1	1
dataset['Age'] = scaler_age.fit_transform(np.array(dataset['Age']).reshape(-1, 1))	1	1
sub_rf['Survived'] = pred_all_rf	1	1
train.join(d_t)	1	1
test_data_only_first_class_female_Cherbourg.ix[~(test_data_only_first_class_female_Cherbourg['Age'] > age)]	1	1
ticketgrouptrain.rename(columns = {0: 'Count'}, inplace=True)	1	1
train['Title']=train['Title'].replace('Ms','Miss',regex=True)	1	1
train.loc[(train['AgeModified']>70) & (train['AgeModified']<=80),'AgeCategorical'] = 7	1	1
pd.isnull(test2['Fare'][x]):	1	1
train.groupby('Title')['Age'].transform('median')	1	1
train.values[:,0]	1	1
train_dataset.Age.astype(int)	1	1
data.CabinCode.fillna('U',inplace=True)	1	1
np.append(testfeatures.toarray(), feature1, 1)	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Sir', 'Rare')	1	1
train['age_quantile'].value_counts().sort_index()	1	1
"train[""Title""] = train[""Title""].astype(int)"	1	1
x.set_value(row.Index,'FP_Died',len(f[f.Survived==0]))	1	1
feature_importances.sort_values()	1	1
X.loc[X['Name'].str.contains('Mr. ')]	1	1
test['FemaleTitle'] = 0	1	1
train_df[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean()	1	1
new_output.head(10)	1	1
bin_deck.transform(raw_test['Deck'])	1	1
svc_classifiers.cv_results_['std_test_score'][svc_classifiers.best_index_],	1	1
data.Personal_Titles_Miss.astype(np.uint8)	1	1
train['Deck'] = train['Deck'].astype(int)	1	1
"test[""Survived""] = vot.predict(test_data_X_sd)"	1	1
y_pred_submission['PassengerId'] = titanic_test_dataset['PassengerId']	1	1
mask1.sum()==0 and mask2.sum()==0 :	1	1
female['Age'].replace(np.nan,27.9,inplace= True)	1	1
X['Age'].std()	1	1
combined_One_Hot_Cat['Male'] = combined['Sex']	1	1
df['CabinLocation'] = df['Cabin'].fillna(' ').apply(get_cabin_location)	1	1
"train[[""Pclass"",""Survived""]]"	1	1
"train_data.drop([""PassengerId"", ""Survived"", ""Name"", ""Age"", ""Ticket"", ""Cabin""], axis=1)"	1	1
data.groupby('NameTitle')['Age'].mean()	1	1
train_df.drop(['Lastname'], axis=1)	1	1
data[0:891]	1	1
df_full['Title'] = df_full['Title'].replace('Mlle', 'Miss')	1	1
"np.where(dataset[""Embarked""]==""S"",1,0)"	1	1
"data[""Title""].value_counts().index"	1	1
imputed[ 'Fare' ] = All.Fare.fillna( All.Fare.mean() )	1	1
"titanic_train.loc[titanic_train[""Embarked""] == 'C',""Embarked""] = 1"	1	1
df3['Sex'] = sex	1	1
"submission.to_csv(""titanic_predict_xgb.csv"", index=False)"	1	1
SibSp_data.sum()	1	1
titanic_df['LargeF'] = titanic_df['Family'].map(lambda s: 1 if s >= 5 else 0)	1	1
ds_train['Title'].replace(['Don','Dona', 'Rev', 'Dr', 'Major', 'Lady', 'Sir', 'Col', 'Capt', 'the Countess', 'Jonkheer'], 'Special', inplace=True, regex=True)	1	1
df.drop(drop_columns, 1)	1	1
df_imp.iloc[:,[0,3,4,5,6,157]].corr()	1	1
df.loc[row,col] = metrics.accuracy_score(data.loc[:,row],data.loc[:,col]).astype(float)	1	1
submision.to_csv('Titanic submision.csv')	1	1
"dataset[""Familysize""] = dataset[""SibSp""] + dataset[""Parch""]"	1	1
df_train['Survived'].value_counts().plot(kind='bar')	1	1
"Test[""Cabin""]=Test[""Cabin""].fillna(""U"")"	1	1
submission.to_csv(output, index=False)	1	1
"holdout[[""SibSp"",""Parch""]].sum(axis=1)"	1	1
train_df['SX'],S=train_df['Sex'].factorize()	1	1
train.loc[train['Fare']>50].Survived.mean() #68% survival rate Expensive Tickets	1	1
test_df_log_transformed['Family'] =  test_df_log_transformed['SibSp'] +  test_df_log_transformed['Parch']	1	1
test['Fare'].fillna(test.groupby('Pclass')['Fare'].transform('median'), inplace=True)	1	1
dataframe['Age'].isnull().sum() # Counts the number of nan values	1	1
"data.sort_values(by=""unique values"", ascending=False)"	1	1
train_df.drop('FareBand',axis=1)	1	1
AgeNotNull['Age'].plot.kde()	1	1
test_no_age['Age'] = test_predictions	1	1
df['Age'] = df['Age'].apply(lambda a: df['Age'].median() if math.isnan(a) else a)	1	1
df.loc[df['Age']<1,'isInfant']= 1	1	1
oneHot_train['Survived']	1	1
full_data.groupby(['Sex', 'Pclass', 'Title'])	1	1
transformed_df.describe()	1	1
"df_train[""cab""].fillna(value=""z"",inplace=True)"	1	1
result.to_csv('randomforest-age-parch-sibsp-sex.csv', index=False)	1	1
"train[""Fare""] = train[""Fare""].fillna(train[""Fare""].median())"	1	1
"pd.pivot_table(train,index=[""Survived"", ""Sex""], values=[ ""Unit""],aggfunc=np.sum)"	1	1
train_df.loc[train_df['Survived']==1]	1	1
pred_table_lr_1_test['Pred'] = pred_table_lr_1_test['Prob'].map(lambda x: 1 if x > 0.5 else 0)	1	1
testingdata.head()	1	1
"test[""Deck""].cat.categories = [0,1,2,3,4,5,6,7]"	1	1
"df_titanic['Pclass'] == df_titanic.iloc[age][""Pclass""]"	1	1
"test.loc[i, ""SibSp""] + test.loc[i, ""Parch""] == 0:"	1	1
"data[""Age""],"	1	1
"aa.loc[:,1].str.split(""."", expand = True)"	1	1
new_age['Age'] = train_df.Age.fillna(train_df.Age.mean())	1	1
"test_data_1.loc[((test_data_1.Parch > 0) & (test_data_1.Title_Miss == 0) & (test_data_1.Sex_male == 0) & (test_data_1.Child_col == ""Adult"")),""Mother_col""] = ""Mother"""	1	1
df_train.isnull().sum()  ##age,cabin,embarked has null values	1	1
y.head(2)       # Header of the Target Variable (y)	1	1
dft.rename(columns={'gender':'Sex'},inplace=True)	1	1
classifier_.add(Dense(units = 1, kernel_initializer = 'random_uniform', activation = 'sigmoid'))	1	1
df2['is_class3'] = [1 if i == 3 else 0 for i in df2.Pclass]	1	1
cabin[0]=='C' and int(cabin[1:4])<=46	1	1
df_test.drop(['Name', 'Ticket', 'Cabin', 'PassengerId', 'Embarked'], axis=1, inplace=True)	1	1
train_df.head(200)	1	1
train[['Pclass', 'Title', 'Sex', 'Age1', 'family_size', 'fare1', 'Embarked']]	1	1
df_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3 , 'Honorable' : 4})	1	1
"processed_features[""FamilySize""] = (processed_features[""FamilySize""] - processed_features[""FamilySize""].min()) / (processed_features[""FamilySize""].max() - processed_features[""FamilySize""].min())"	1	1
combine['Embarked'] = combine.Embarked.astype('int')	1	1
X.drop('Cabin',inplace=True,axis=1)	1	1
df['Title'] =  df.Name.map(lambda x : GetTitle(x))	1	1
"train[""title""] = [i.replace('Rev', 'rare') for i in train.title]"	1	1
not_recorded_titles.append(name)	1	1
df.pivot_table(values = 'Survived', index = 'Parch').Survived.plot.bar()	1	1
"R[""percentage""]=R[""sum""]/R[""count""]"	1	1
dataset.iloc[:, 0:1].values	1	1
"DataFile['Last_Name'] = DataFile['Name'].apply(lambda x: str.split(x, "","")[0])"	1	1
titanic_train_data.drop(['Cabin'],axis =1 ,inplace =True)	1	1
titanic_train['Fare'] = titanic_train['FareBand']	1	1
"sns.boxplot(x=""target_name"", y=column, data=train_data, ax=plt.subplot(322));"	1	1
train_df[['Embarked', 'Sex', 'Name']].groupby(['Embarked', 'Sex']).count()	1	1
combine.loc[(combine['Age'] > 32) & (combine['Age'] <= 48), 'Age'] = 2	1	1
train_d[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
together['isalone'] = together.apply(set_is_alone, axis=1)	1	1
data.Embarked_Q.astype(np.uint8)	1	1
full.loc[full['Survived'].notna(),['FamilySize','Survived']].groupby('FamilySize').agg('mean')	1	1
raw_train['LogFare'].hist(bins=100, normed=True, alpha=0.5, color='yellow')	1	1
train.drop(cols,axis=1)	1	1
"comb_data[""PassengerId""] = comb_data[""PassengerId""].astype(str)"	1	1
data['Ticket'] = encoder.fit_transform(data['Ticket'])	1	1
test_df.Fare.isnull()	1	1
best['learning_rate'],	1	1
df['Age'] = df['Age'].interpolate()	1	1
pina_submission.to_csv('submission.csv', index=False)	1	1
test_data['Cabin'] = test_data[['Cabin','Pclass']].apply(cabin_approx, axis=1)	1	1
"RF_result[2][""best_score""]"	1	1
train_X['Age'].isnull().sum()	1	1
"train_kaggle[[""Pclass"", ""Sex"", ""Fare""]].describe(include=""all"")"	1	1
all['Sex'] = all.Sex.map({'male':1,'female':0})	1	1
train_df.loc[(train_df['Fare']>31)&(train_df['Fare']<=512),'Fare_new']=3	1	1
test['Embarked']=label_encoder.fit_transform(test['Embarked'].astype('str'))	1	1
full['CabinType'] = pred	1	1
new_train.loc[index[i]]['PassengerId']	1	1
"train[""Big""] = False"	1	1
"combination.to_csv(""titanic_predict_combine.csv"", index=False)"	1	1
full.loc[full['TicketFare'].isnull(),'TicketFare'] = full['TicketFare'].dropna().mean()	1	1
"test_data.loc[(test_data.Family_Size > 4),""FsizeD""] = ""large"""	1	1
X_test_reseted['pred_result'] = pred_test == y_test	1	1
combine_df.iterrows():	1	1
"test.loc[(test[""Age""] >= 15) & (test[""Age""] < 18),""Age""] = 1"	1	1
"df['total'].plot(kind=t,alpha=0.5,title=""Survivors per ""+str(column))"	1	1
x[0] < 10:	1	1
train.drop(['source','Survived'],axis=1)	1	1
full['_Embarked'] = pd.Categorical(full.Embarked).codes	1	1
entire.Cabin.fillna('Unknown')	1	1
"df[['Embarked']] = df[['Embarked']].fillna(value=""Unknown"")"	1	1
combined.loc[891:,'Data_set'] = 'Test'	1	1
class_agg['rate'] = class_agg.apply(lambda row: row['sum'] / row['count'], axis=1)	1	1
train_df['Title'] = train_df['Name']	1	1
"grouped[""count_of_class""] = pclass.groupby(""Pclass"")[""Survived""].aggregate({""count_of_class"":""count""})"	1	1
df.loc[(df['Age'] > 38) & (df['Age'] <= 80), 'Age'] = 3	1	1
train_data['Cabin'] = train_data['Cabin'].str[0]	1	1
"sub.to_csv(""submissiondnn.csv"", index=False)"	1	1
test_df.loc[mrs_mask, 'Age'] = test_df.loc[mrs_mask, 'Age'].fillna(test_df[test_df.Title == 'Mrs'].Age.mean())	1	1
"data['Ticket_String'] = data.apply(lambda row: re.sub(""\."", """", row['Ticket_String']) , axis = 1)"	1	1
dataset.loc[(dataset['Age'] > 49) & (dataset['Age'] <= 63), 'Age'] = 3	1	1
df['IsMale'] = df.Sex.map(lambda s : 1 if s=='male' else 0)	1	1
data['FareBand'] = pd.qcut(data['Fare'], 5)	1	1
"tmp_train[""Ticket_num""] = tmp_train[""Ticket""].apply(lambda x: len(x.split()[-1]))"	1	1
train.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace = True)	1	1
data.drop('Fare', axis=1, inplace=True)	1	1
titanic_train_test_merged['Fare_range_cat']=titanic_train_test_merged['Fare_range'].cat.codes	1	1
train_dataset.Embarked.dropna().mode()[0]	1	1
train.groupby('Survived').Fare.hist(alpha=0.6)	1	1
df_train['Sex'].value_counts().plot(kind='bar')	1	1
corpus[0:20]	1	1
"dataset[""AgeBin""] = pd.cut(dataset[""Age""],age_bin,labels=agegroup_name)"	1	1
test_data['Suffix_Indicator'] = test_data['Suffix'].map({'Master':1,'Miss':2,'Mr':3,'Mrs':4,'Outlier':5})	1	1
"test_df.loc[test_df[""Title""] == ""Col"", ""Title""] = 'Rare Title'"	1	1
"train[""Famille_1""] = train[""FamilleMember""] == '1'"	1	1
row['Title'] == 'Don':	1	1
data.loc[(data['Fare']>cat[3]) & (data['Fare']<=cat[4]),'Fare']=4	1	1
titanic.to_csv('dtree predictions.csv', index = False)	1	1
models['set4']['num_attrs'] = ['Fare', 'Age', 'Family_total']	1	1
agg_df_age['Survived', 'mean'].plot(kind='bar', yerr=agg_df_age['Survived', 'sem'], alpha = 0.5, error_kw=dict(ecolor='k'));	1	1
_df.loc[idx_2, :]	1	1
"new_data[""Name""] = new_data[""Name""].apply(extract_title)"	1	1
"train_dat[""Fmsize_c""].value_counts()"	1	1
test_df.drop(labels=['PassengerId'],inplace=True,axis=1)	1	1
"str[0].fillna(""No Cabin Assign"")"	1	1
df_train.iloc[:, 1:4].as_matrix()	1	1
"test_df[""fare""] = test_df[""fare""].fillna(test_df[""fare""].mean())"	1	1
"axes[0].set_title(""Ticket Length vs Frequency"")"	1	1
sb_data.append(tm_sb_data[i])	1	1
clean_data['Survived'].corr(df3['Pclass'])	1	1
"data.drop(""Ticket"",inplace=True,axis=1)"	1	1
train_Predict['Age'] = age_partition['Partition'].apply(lambda x: x.mid)	1	1
titanic_test_data.loc[titanic_test_data.Cabin.str[0] == 'F', 'Cabin'] = 6	1	1
test_df['Pclass'] = test_df.Pclass.astype('category')	1	1
data_copy['Pclass']=data_copy['Pclass'].fillna(data_copy['Pclass'].median())	1	1
data.iloc[:,1:9]	1	1
data_test.shape[0]	1	1
data.sons.loc[data.PassengerId==103] = 1	1	1
family[ 'Smallfamily' ]  = family[ 'FamilySize' ].map( lambda s : 1 if 2 <= s <= 4 else 0 )	1	1
"test_ori.loc[(test_ori[""Title""] == ""Mlle"") | (test_ori[""Title""] == ""Ms"") ,""Title""] = ""Miss"""	1	1
features.drop('Pclass',axis=1,inplace=True)	1	1
data_test_all['Title'] = data_test_all['Title'].replace(['Mlle','Ms'],'Miss')	1	1
dfTrain['Survived'].groupby(dfTrain['Embarked']).mean()	1	1
"roc_auc[""macro""] = auc(fpr[""macro""], tpr[""macro""])"	1	1
traind['Survived'].groupby(traind['SibSp']).mean()	1	1
df_svc.to_csv('SubmissionSVC.csv', header=True)	1	1
titanic['Pclass'].value_counts().plot.pie(explode=[0.02,0.02,0.02],autopct='%1.1f%%',figsize=(7,7))	1	1
test_df['AgeBin'] = pd.cut(test_df['Age'], bins, labels=group_names)	1	1
test['Family_size']=test['Parch']+test['SibSp']+1	1	1
train['Child'] = 0	1	1
dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss') # Also replace french titles with common english abr.	1	1
test_df['Name_length'] = test_df['Name'].apply(len)	1	1
test_set['IsMother'] = 0	1	1
np.where(predict > 0.5, 1, 0)	1	1
"df.loc[ df[""Age""] > 64, ""Age"" ] = 5"	1	1
combined.Age.fillna(data.Age.median(), inplace=True)	1	1
test_df['Age'].fillna(test_df['Age'].median(), inplace=True)	1	1
df_train.drop(feature, axis=1, inplace=True)	1	1
age.head(5)	1	1
"test.loc[test[""Age""] <= 16, ""age_c""] = ""1"""	1	1
test_data.ix[152, 'Fare'] = mean_fare[0]	1	1
df.loc[testdex, :].to_csv('clean_test_nick.csv',header=True,index=True)	1	1
df_train['TicketEncoded'] = ticket_parts[0]	1	1
"train.groupby([""Embarked""])[""Survived""].count().reset_index()"	1	1
test_ds.drop('Ticket', axis= 1, inplace= True)	1	1
train_data[['Sex', 'Survived']].groupby('Sex')	1	1
data.loc[(data.Fare > 14.454) & (data.Fare <= 31), 'FareBand'] = 3	1	1
X_full['Cabin_mapped'] = X_full['Cabin'].astype(str).str[0] # this captures the letter	1	1
"datacv.set_value(i, 'Name', ""Ms"")"	1	1
data_df['AgeBin_Code'] = tmp_data_df['AgeBin_Code']	1	1
"train_df[""Age""].hist(bins=70);"	1	1
"dataset[""FamilySize""] = dataset['SibSp'] + dataset['Parch']"	1	1
test_data['Embarked'] = test_data['Embarked'].apply(lambda x: x[0])	1	1
df['FareBand'] = pd.qcut(df['Fare'], 4)	1	1
"train[[""Embarked"", ""Survived""]].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False).head(20)"	1	1
train_data['Embarked'] = train_data['Embarked'].apply(lambda x: x[0])	1	1
"train.loc[train[""Embarked""]==""S"",""Embarked""] =0"	1	1
rawdata.head()	1	1
plt.hist([df[df['Survived']==1]['Age'],df[df['Survived']==0]['Age']],bins = 10,label=['Survived', 'Dead'])	1	1
"data_train.loc[data_train[""Survived""] == True]  # Survivors"	1	1
df_train.isnull().any()	1	1
train.head(5) #마찬가지로 text는 못읽으니 숫자로 매핑해준다	1	1
"df[""Age""]=df[""Age""].fillna(-0.5)"	1	1
test['Embarked_C'] = test['Embarked_C'].fillna(0)	1	1
"test[""Title_mrs""] = test[""Title""] == 'Mrs'"	1	1
df['Status'] = df['Status'].str.replace(r'Dr|Rev|Col|Mlle|Major|Lady|Sir|Don|Capt|Mme|Jonkheer|Countess|Ms', 'Rare')	1	1
df.ix[df[column] == 1e9, df.notnull().all()]	1	1
train_.values	1	1
acc.append(pd.DataFrame({'Model': 'XG Boost', 'Accuracy': [accuracy_score(y_true, y_pred)]}))	1	1
combined['Age'].apply(lambda x: 1 if x>=70 and x<=80 else 0)	1	1
"train_df.Embarked.fillna(""S"", inplace = True)"	1	1
"test[""Title""] = lb_make.fit_transform(test[""Title""])"	1	1
dftest['Title']=dftest.Title.map(context3)	1	1
train_df[['Parch', 'Survived']].groupby('Parch', as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
pd.merge(X_val_ch, train, on='PassengerId')	1	1
merged_df['family'] = merged_df['Parch'] + merged_df['SibSp']	1	1
"test.loc[test[""Age""].isnull() & test[""Fare""].isnull(), ""Fare""] = test[""Fare""].value_counts().idxmax()"	1	1
y_test.loc[temp_df.index, 'Survived'] = temp_df.apply(lambda x: 0 if x < 0.5 else 1).astype('int')	1	1
titanic.loc[titanic['Embarked'] == 'S', 'Embarked'] = 1	1	1
test['Survived']=log_predicted	1	1
df.drop('Survived', axis=1),	1	1
data['Sex'] = data['Sex'].map({'female':0, 'male': 1}).astype(int)	1	1
df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()	1	1
df['Fare_scaled'] = scaler.fit_transform(df[['Age', 'Fare']], scale_param)[:, 1]	1	1
en_en.head()	1	1
original_train_data['Fare'].hist(ax=axarr[1][0])	1	1
test2[['Age', 'Sex', 'Fare','Parch','Pclass','SibSp','Embarked']]	1	1
ax[1].set_title('IsAlone vs Survived')	1	1
data['Emb_C'] = (data['Embarked']=='C').astype(int)	1	1
no_survivors.head()	1	1
df_train[['Family', 'Survived']].groupby(['Family'], as_index=False).sum().sort_values(by='Survived', ascending=False)	1	1
df.drop(['Embarked'], axis=1, inplace=True)	1	1
df_output.head()	1	1
clfs.append(SVC(random_state=seed))	1	1
titanic_df['PassengerId'].groupby(titanic_df['Parch']).count().plot(kind='bar',ax=ax[1])	1	1
"full_data[""FareDivPclass""]= full_data[""Fare""] / full_data[""Pclass""]"	1	1
Xdf.loc[ Xdf['Age'] > 64, 'Age'] = 4	1	1
"test_df[""Title""] = pd.Series(test_df_title)"	1	1
submission.to_csv(path_or_buf = 'Submission.csv', index = False)	1	1
cv_score_rs.append(rs.best_score_)	1	1
train_df['Fare'] = train_df['Fare'].round(2)	1	1
params_init_l['num_trees '] = 500	1	1
trainPCA2['11'] = trainPCA[:,10]	1	1
new_test['Age'] = new_test[['Age','Pclass']].apply(impute_age,axis = 1)	1	1
df['Male']=pd.get_dummies(df['Sex'],drop_first=True)	1	1
"train[[""Pclass"", ""Sex"", ""Age"", ""Fare"", ""SibSp"", ""Parch"", ""family_size""]].values"	1	1
combined_df['fare_scaled'] = (combined_df.fare_scaled - combined_df.fare_scaled.min()) / combined_df.fare_scaled.max()	1	1
dftest.copy()	1	1
"X_test[[""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Embarked"",  ""Title"", ""IsAlone"", ""FareAdj"", ""Simple_S_C"", ""CabinInfo"" ] ] =  scaler.fit_transform(X_test[ [  ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Embarked"",  ""Title"", ""IsAlone"", ""FareAdj"", ""Simple_S_C"", ""CabinInfo"" ]] )"	1	1
answer.to_csv(output, index=False)	1	1
"train_data[""RelativesOnboard""] = train_data[""SibSp""] + train_data[""Parch""]"	1	1
df_te.reset_index(drop=True)	1	1
X_train_norm.T	1	1
"plt.hist(np.round(np.log10(df.query(""Fare > 0"").Fare), 2), bins=45)"	1	1
df_titanic_train_mod['Sex'].replace('female',0,inplace=True)	1	1
"comb.drop([""Title"", ""Name"", ""PassengerId"", ""Ticket"", ""Cabin"", ""SibSp"", ""Parch""], axis=1)"	1	1
train.info() #we are showing 2 rows where Embarked is null, lets drop these 2 columns	1	1
X_one_hot.copy()	1	1
df['Children'] = data['Fare'].loc[data.Child==1]	1	1
"titanic_test[""Family""].loc[titanic_test[""Family""] == 0] = 0"	1	1
combined_data.Embarked.fillna(most_embarked)	1	1
df['total']/train.shape[0]	1	1
ax[0][1].set_xticklabels(['Male','Female'])	1	1
train['Embarked'].replace('Q', 0, inplace = True)	1	1
test_df.loc[(test_df['Age']>24)&(test_df['Age']<=32),'Age_band']=2	1	1
titanic_data['Age'] = titanic_data[['Age','Sex','Pclass']].apply(sub_age,axis=1,args=(male_mean_age_class,female_mean_age_class))	1	1
ml_model.sort_values('acc_score',ascending = False,inplace=True)	1	1
combine_df.at[ind,'titles'] = 'Mrs'	1	1
le.transform(data_set[feature_name])	1	1
scores_rf.mean(),	1	1
tickets.append(ticket)	1	1
df_output[['PassengerId','Survived']].to_csv('gridsearch_rf10.csv', index=False)	1	1
hist.history['acc']	1	1
"df_train[""TitleCat""] = df_data[""TitleCat""][:891]"	1	1
X_train.shape[1] # number of features	1	1
train_df.groupby(['Sex']).mean()	1	1
df.groupby(['Sex','Pclass']).Age.mean().unstack()	1	1
"test[[""Pclass"", ""Gender"", ""Port"", ""Age_cat"", ""travel_company""]].values"	1	1
df.to_csv('svcresult.csv', index=False)	1	1
test['Age'].fillna(29.69911764705882, inplace=True)	1	1
train[['Age','Fare']]	1	1
train.Age.fillna(train.Age.median(),inplace=True)	1	1
"knn_submission1.to_csv(""knn_predictions_with_TGS.csv"", index=False)"	1	1
test_df['Survived'] = Y_pred3	1	1
train_df.loc[ train_df['Pclass']==2, ['Survived','Sex','Age']  ]	1	1
train_new.drop(['Survived'], axis = 1)	1	1
test_data.drop('PassengerId', axis=1, inplace=True)	1	1
df.drop(['Cabin', 'Cabin_number'], inplace = True, axis = 1)	1	1
df.loc[df.Age.isnull() & (df.Sex==sex) & (df.Pclass==pclass) & (df.Title==title),'Age'] = age_guess[sex,pclass-1,title]	1	1
Test_data['Fare'].fillna(Test_data['Fare'].mean(), inplace = True)	1	1
data.Age.fillna(value=data.Age.mean(), inplace=True)	1	1
df_train[['Pclass','Survived']].groupby(['Pclass'], as_index=False).mean()	1	1
merged.loc[(merged['Fare']>31)&(merged['Fare']<=513),'Fare_cat']=3	1	1
"a.loc[(a[""Title""] == ""Master"") & (a.Age.isnull()), [""Age""]] = master_age"	1	1
"res.describe().T.sort_values(by=""50%"", axis=0, ascending=False)"	1	1
"train.drop(""Fare_Band"",axis=1,inplace=True)"	1	1
"all_data.query(""CabinCount > 1"")"	1	1
Test_Master.drop(columns=['SibSp','Parch'], axis=1, inplace =True)	1	1
merged.loc[merged['Group'] == 'Miss, class 3, embarked Southampton', 'Predict'] = 0	1	1
trainDf.set_index('PassengerId')	1	1
test_data['Cabin'].apply(lambda x: 0 if isinstance(x,float) else 1)	1	1
train['Cabin_info'][train.Cabin=='N']=0	1	1
"train[""TicketGrp""] = train.loc[:,""TicketGrp""].apply(Tix_label)"	1	1
train_data.isnull().sum()/train_data.shape[0]	1	1
"traindat[""Cabin""].value_counts()"	1	1
uniq_fsize_2.append('Medium')	1	1
original_train_data['NoCabin']=original_train_data['Cabin'].isnull().apply(lambda x: 1 if x is True else 0)	1	1
test_df.reset_index(drop=True)	1	1
data.loc[data['FamilySize'] == 1, 'IsAlone']=1	1	1
data_test['Survived'] = Y_pred	1	1
train_df.loc[ train_df['Age'] > 64, 'Age']	1	1
dataset.loc[  dataset['Age'] > 64, 'Age'] = 4	1	1
train_df.groupby('Age').mean()	1	1
df['Survived'] = df['Survived'].replace(['no', 'yes'], range(2))	1	1
sml.train.describe()	1	1
"train_data[""Family""] = train_data[""SibSp""] + train_data[""Parch""]"	1	1
history_acc_test.append(temp_acc)	1	1
combined.drop('Title', inplace=True, axis=1)	1	1
df_test_ml['SurvivedNN'].rename('Survived')	1	1
test_df['Title'] = test_df['Name'].str.extract('([A-Za-z]+)\.')	1	1
tdata['Age'] = tdata.Age.fillna(method='ffill')	1	1
combined.drop('Cabin',axis=1, inplace=True)	1	1
"final_train.drop(""Survived"", axis = 1)"	1	1
submission.iloc[:, 1] = forest.predict(X_pred_scaled)	1	1
train['CabinL'] = train.loc[train['Cabin'].str.len() == 1.0, 'Cabin']	1	1
"titanic['Title']= titanic['Name'].str.extract(""\,\ (.+?)\."")"	1	1
axes[19].cla()	1	1
dataset.loc[(dataset['Age']>40) & (dataset['Age']<=64),'Age'] = 3	1	1
submit['PassengerId'] = X2.index	1	1
model_results['RandomForest'] = np.mean(scores)	1	1
gridscgdbt2.best_params_['min_samples_split'],	1	1
"dftest.loc[single_poor_wmn,""Survived""]=0"	1	1
test_data['Ticket_Len'] = test_data['Ticket'].apply(lambda x: len(x))	1	1
matplotlib.axes.bar kwargs	1	1
"titanic_train_dataset[""CabinFloorScore""].loc[titanic_train_dataset['CabinFloor'] == ""A""] = 6"	1	1
sns.boxplot(x='Embarked', y='Fare', data=train)	1	1
search_df.loc[idx]	1	1
train_df[['Embarked','Survived']].groupby('Embarked', as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
combine_df.at[ind,'titles'] = 'Mr'	1	1
total.replace({'Title': mapping}, inplace=True)	1	1
age_set.loc[:, 'Pclass':'Occupation']	1	1
submission['PassengerId'] = test.index.tolist()	1	1
Submission.to_csv(file_name, index=False)	1	1
missingage.append(train['Parch'][i])	1	1
df_ticket['Ticket_surviving_men'] = df_ticket['Ticket_surviving_men'].fillna(0)	1	1
data['Family_Size']=data['Family_Size']*0.02  # max 50	1	1
"testing[""Age""] = scaler.fit_transform(ages_test)"	1	1
train_data['Fare']>mu+5*sd	1	1
dt_test.drop('Age', axis=1, inplace=True)	1	1
testdata['Survived'] = 1	1	1
"test[""Embarked""].loc[test[""Embarked""] == ""S""] = 0"	1	1
"titanic_test.loc[titanic_test[""Embarked""] == ""Q"",""Embarked""] = 2"	1	1
models_result[0]	1	1
x_test.drop(drop_column, axis=1, inplace = True)	1	1
df['Cabin'] = pd.notnull(df.Cabin)	1	1
"titanic_test.loc[titanic_test[""Embarked""] == 'C',""Embarked""] = 1"	1	1
X.head(3)	1	1
data.loc[data['Fare']>307, 'Fare']=3	1	1
"full[""Fare""] = impute_and_to_dataframe(Imputer(), full, titanic.shape[0], [""Fare""])"	1	1
train_X.drop(columns=['PassengerId'], inplace=True)	1	1
data.drop(labels='Cabin', inplace=True, axis=1)	1	1
x['FP_Died']=0	1	1
titanic_test['Age_range']=Age_range_test	1	1
titanic_train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
trainmodel.info()	1	1
train_df.drop(['Pclass'],axis=1,inplace=True)	1	1
test.drop(['Fare'], 1, inplace=True)	1	1
full['Fare'].hist(bins=50, grid=False);	1	1
cabin['Cabin' ] = full.Cabin.fillna ('U')	1	1
titanic_train_dataset_for_training_step.iloc[:, 0]	1	1
train.Name[0:4]	1	1
dataset['Deck'] = dataset['Deck'].map(deckMapping)	1	1
"train_df[""Deck""].unique() # Z is for null values"	1	1
training_set['Title'] = training_set['Title'].map(title_dictionary)	1	1
combined['Cabin_num']	1	1
"data_test[""Title""] = data_test[""Name""].str.extract(""([A-Za-z]+)\."",expand=True)"	1	1
Repeatedticket.reset_index(drop=True, inplace=False)	1	1
train.pivot_table(index='Age_categories', values='Survived')	1	1
X_train2.loc[:,['Age','SibSp','Parch','Fare','FamSize']] = f.values	1	1
dataset['isAlone'].loc[dataset['FamilySize'] > 1] = 0	1	1
dataset['Southampton'] = dataset.Embarked.map(lambda x: 1 if x == 'S' else 0)	1	1
svc_cv.best_params_['C'],	1	1
test.loc[(test['Pclass'] == 2) & (test['hasAge'] == 0), 'class_hasage'] = 4	1	1
train['Sex'] = train['Sex'].replace(mapping).astype(np.float64)	1	1
train.dropna(axis = 0,inplace=True)	1	1
dataset.loc[(dataset['Age']>56)&(dataset['Age']<=64), 'Age'] = 7	1	1
titanic_fare_group.apply(get_survival_ratio)	1	1
train_df.drop(train_ex_df.index)	1	1
res['Survived'] = (res['ProbaMax']-0.5) > (0.5-res['ProbaMin'])	1	1
df_test.loc[df_test['Embarked'] == 'C', 'Embarked'] = 1	1	1
"test[""Cabin""] = le.fit_transform(test[""Cabin""].fillna('0'))"	1	1
"test[""isParch""] = test.Parch.apply(lambda x : 0 if x == 0 else 1)"	1	1
data.loc[(data['Survived']==1) & (data['Sex']=='female') & (data['Age'])]	1	1
"test_dataset.loc[ (test_dataset.Pclass == 1) & (test_dataset.Sex == ""female"") & (test_dataset.Age.isnull()), ""Age"" ] = test_dataset.loc[ (test_dataset.Pclass == 1) & (test_dataset.Sex == ""female"") & (test_dataset.Age.isnull()), ""Age"" ].fillna(test_dataset.loc[ (test_dataset.Pclass == 1) & (test_dataset.Sex == ""female"") ][""Age""].median())"	1	1
data_train['Age_Category'] = data_train['Age'].apply(age_categorize)	1	1
"X.drop(""Name"",inplace = True,axis = 1)"	1	1
data_combined['Title'] = data_combined['Title'].map(title_dict)	1	1
train['F2'] = np.array(train['CategoricalFare'] == 2).astype(np.int32)	1	1
test_df['Age'].isnull().any()	1	1
train_df.loc[(train_df['Age'] > 21) & (train_df['Age'] <= 28), 'Age'] = 1	1	1
dataset['Cabin_known'] = dataset['Cabin'].isnull()==False	1	1
train['Title'] = train['Name'].str.extract(' ([A-Za-z]+).', expand=False)	1	1
"test.drop([""PassengerId"", ""Name"", ""Ticket""], axis = 1)"	1	1
test_df.drop(columns=['Cabin', 'PassengerId', 'Name', 'Ticket'], inplace=True)	1	1
tit_df['Embarked'].unique()	1	1
"traindat[""gpsz""] = traindat[""SibSp""] + traindat[""Parch""] + 1"	1	1
train['Embarked'].fillna(train['Embarked'].mode()[0], inplace = True) #replace with the 1st Mode	1	1
titanic_whole['Survived']	1	1
data['lastName'] = (data.Name.str.split(',', expand = True))[:][0]	1	1
df_test_ml['SurvivedSVC'].rename('Survived')	1	1
train_dataset.groupby('Pclass')	1	1
"imp[""RandForest""] = rf.feature_importances_"	1	1
data_test['Age'].mean()	1	1
"train_df.groupby([""Sex"",""SibSp"",""Parch""])[""Age""].agg([""median""])"	1	1
params_init_l['max_depth'] = 10	1	1
full_models['set1']['clf_forest'], full_models['set1']['X_train'],	1	1
train_features.shape[1]         # number of features in the model	1	1
"dat.loc[dat[""Title""] == ""Mrs"",""isMrs""] = 1"	1	1
child1.fitness.values	1	1
age_age_2[0]	1	1
train['Sex'][train['Sex']=='male']=0	1	1
df_test.loc[(df_test['Fare'] > 7.91) & (df_test['Fare'] <= 14.454), 'Fare'] = 1	1	1
"x[""Cabin""]"	1	1
"train.loc[(train[""Name""]==""Mrs"")&(train[""Age""].isnull()), ""Age""] = train.loc[train[""Name""]==""Mrs"",""Age""].mean()"	1	1
best_adaboost.best_params_.get('learning_rate'),	1	1
train_data[['Survived']] = train_data[['Survived']].astype(int)	1	1
"data[""Embarked""].fillna(data['Embarked'].value_counts().idxmax(), inplace=True)"	1	1
test_df.loc[:, ['Gender', 'Sex']].head()	1	1
titanic_df['Age'].hist(bins=20, ax=axis2)	1	1
train_cl2.loc[:, Ycol]	1	1
one_hot_test['Fare'].fillna(one_hot_test['Fare'].mean(), inplace=True)	1	1
data_to_submit.to_csv('ada_opt_to_submit.csv', index = False)	1	1
full.groupby(['ticket_header', 'Embarked'])['Ticket'].count().head(12)	1	1
dataset['FamilySize']  =    dataset['SibSp'] + dataset['Parch'] + 1	1	1
validation_losses.append(validation_loss)	1	1
data_testTransformed['Fare'] = data_testTransformed['Fare'].fillna((array(data_testTransformed.loc[data_testTransformed['Fare'].isna() == False, 'Fare'])).mean())	1	1
original_train_data.groupby('IsAlone')['PassengerId'].count()	1	1
"dftrain[""Age""].mean()"	1	1
model.add(Dense(input_dim=7, output_dim=1)) # .add means add a layer into model; dense is the layer I added, dense layer is fully connected layer	1	1
"test[""Cabin""]"	1	1
datadict['Count']=train.count()	1	1
"train.drop(""isSenior"", axis=1, errors='ignore')"	1	1
comb.Ticket.head()	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Dona', 'Mme', 'Countess'], 'Mrs')	1	1
train_df['Survived'].astype(int).hist()	1	1
tt['TicketCount'] = tt['Ticket'].map(ticketMap)	1	1
output['Survived'] = predict	1	1
valid_scores.append(valid_auc)	1	1
titanic_train.drop(['Name'],axis=1,inplace=True)	1	1
test_df['Title'] = test_df['Title'].replace(['Mlle', 'Ms', 'Lady'], 'Miss')	1	1
train2['Sex'] = le.fit_transform(train2['Sex'])	1	1
df['Se_IA'] = 0	1	1
dset.loc[f.index, 'FamCode'] = next(c)	1	1
train_raw.shape	1	1
model.add(Dense(800, activation='relu'))	1	1
x_test_df.values	1	1
data['Survived'] = data.apply(get_survived,axis=1)	1	1
train_df.loc[:, ['Pclass', 'Age', 'FamilySize', 'IsAlone', 'G_female', 'G_male', 'Title_Master', 'Title_Mr', 'Title_Ms']].values	1	1
categoric_data.head()	1	1
test.drop('Fare', axis = 1, inplace = True)	1	1
"titanic_test_data.loc[titanic_test_data[""Embarked""]==""S"",""Embarked""] = 0"	1	1
df.loc[(df['Age'] >= 50.157) & (df['Age'] < 60.105), 'Age'] = 5	1	1
"New_Df.fillna(""U"", inplace=True)"	1	1
titanic.loc[titanic['Embarked']=='Q','Embarked']=2	1	1
data['Title'] = data['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
"test_data[""Title""].value_counts().index"	1	1
test_csv['Family'] = 0.0	1	1
test_pred.T	1	1
titanic_df.corr()	1	1
df['age_T'] = df.apply(lambda x: 4 if (x['Age'] >= 25 and x['age_T'] < 35) else x['age_T'], axis=1)	1	1
features['x']	1	1
train_data.dropna(axis=0,how='all')	1	1
data.iloc[:len(traindf)]	1	1
"testing[""Title""] = testing[""Name""].str.extract(""([A-Z a-z]+)\."", expand= True)"	1	1
df_sv['age'].plot.hist(ax=ax, bins=bins, yticks=y_ticks, color=colors[i_fin]) # yticks=y_ticks で左右のy軸が一致	1	1
sns.boxplot(x='Pclass', y='Fare', data=Titanic_Master)	1	1
testdf.head(10)	1	1
data_test_input.loc[data_test['Sex']=='child','Sex'] = 3  #child	1	1
numerical_columns.append('NameLength')	1	1
"dataset['Title'] = dataset['Name'].str.split("","", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
test_df['Title'] = test_df['Title'].apply(lambda x: 'other' if titles.loc[x] == True else x)	1	1
DataSetTrain['Sex'].value_counts()	1	1
results.append(pd.Series(serie))	1	1
df['Survived'][df['Sex'] == 'male'][df['Pclass'] == 3].value_counts()	1	1
logregsubmission.to_csv('logreg.titanic.csv', index=False)	1	1
df.iloc[0]	1	1
traindf.drop(columns=['PassengerId', 'Survived'], axis=1)	1	1
"test_data[""Cabin_T""] = pd.Series(np.zeros(length), index = test_data.index)"	1	1
combined_df.merge(map_table_age_df, on=['Pclass','title'], how='left')	1	1
df.to_csv('df.csv')	1	1
train_features.info()	1	1
train.info() #data cleaned	1	1
np.multiply(np.dot(dZ2, np.transpose(parameters2)), g1_dash) #713X4	1	1
"p_data[""FamilySize""] = p_data[""FamilySize""].factorize()[0]"	1	1
dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 36), 'Age'] = 4	1	1
train['Embarked']=train.Embarked.map({'S':1,'C':2,'Q':3})	1	1
X.Cabin.apply(self.__get_deck)	1	1
x_test['Sex_male'] = test_df['Sex'].apply(lambda x: 1 if x == 'male' else 0)	1	1
test['Title']=test['Title'].replace('Ms','Miss',regex=True)	1	1
"test_df[""Parch""]"	1	1
train_imputed['Survived']	1	1
testingset['AgeBin'] = pd.cut(testingset['Age'],agebins,labels=labels)	1	1
"df[""Age_cat""] = pd.cut(df[""Age""],cut_pts, labels=age_labels)"	1	1
DataFrame_Name.isnull().sum()	1	1
"X_validation.loc[X_validation.Age < 18,""Child_col""] = ""Child"""	1	1
train_df.columns.values.tolist()	1	1
data[['Fare']].where(data.Pclass==Pcl).median()    # get median over all data for that class	1	1
skewness.head(10)	1	1
data.Ticket_numerical.hist(bins=20)	1	1
visualization_df['Title_Code'] = label.fit_transform(visualization_df['Title'])	1	1
combine['Embarked'] = combine['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
"df.drop([""Embarked""], axis=1, inplace=True)"	1	1
modelTest.append(sgdclass)	1	1
null_mat[1][0]	1	1
df.drop(['Ticket','PassengerId','Name','SibSp','Parch','Lname','Family'],axis=1)	1	1
train_df.groupby(pd.qcut(train_df['Age'], 3))['Survived'].mean()	1	1
train.drop('AgeGroup',axis=1,inplace=True)	1	1
train.groupby(['Pclass'])[['Fare']].median()	1	1
test.reset_index()	1	1
train['Family_Size']=train['Parch']+train['SibSp']#family size	1	1
"testing.drop(""PassengerId"", axis=1) #define testing features set"	1	1
df.loc[(df['Fare']>7.91)&(df['Fare']<=14.454),'Fare_category']=1	1	1
a['CatTitle'] = a['CatTitle'].replace('Ms', 'Miss')	1	1
traindf['AgeBand'] = pd.cut(traindf['Age'], 5)	1	1
all_data['Fare'][all_data['Fare'].isnull()]=train['Fare'].mean()	1	1
DataFrame_Name.isnull().count()	1	1
wine_counts.head()	1	1
"x_test.drop([""Name"",""Ticket"",""Cabin"" ], inplace = True, axis = 1 )"	1	1
"full.drop([""Cabin"", ""Age""], inplace=True, axis=1) # Drop replaced column"	1	1
df_train['Survived'].unique()	1	1
test.loc[(test['Pclass'] == 1) & (test['hasAge'] == 0), 'class_hasage'] = 3	1	1
train['Title'] = train.Name.str.split(',', expand=True)[1].str.split('.', expand=True)[0]	1	1
train6['Embarked'] = train6['Embarked'].fillna('S')	1	1
self.logs.append(logs)	1	1
submission.to_csv('titanic-submission-ultimate-nn-1.csv', index=False)	1	1
model_results.append(en1_results)	1	1
dataset.loc[(dataset['Age'] > Age_labels[i]) & (dataset['Age'] <= Age_labels[i+1]), 'Age'] = i	1	1
df['gender'].unique():	1	1
train_df['age_group'] = pd.cut(age_not_null_series_train, bins=age_bins, include_lowest=True, right=False)	1	1
"train[""SibSp""]"	1	1
dataset['FareBand'] = dataset['FareBand'].astype(int)	1	1
"train[""title""] = [i.replace('Major', 'rare') for i in train.title]"	1	1
"test_passenger_df[""PassengerId""],"	1	1
gbc_rfecv.transform(gbc_rfecv_final_test)	1	1
titanic_df['Sex'] = titanic_df['Sex'].apply(sex_convert)	1	1
train_df.join(train_title_dummies)	1	1
"data.loc[data[""FamSize""] > 1, ""Fam_group""] = 1 # Family"	1	1
train_app.append(train_acc)	1	1
df['no_word'] = df['no_word'].astype('category')	1	1
Test.fillna(Test.mean())	1	1
data_full['FamilySize'] = data_full['SibSp'] + data_full['Parch'] + 1	1	1
"train[""embarked_""] = train.apply(lambda row:def_embarked(row[""embarked""]),axis=1)"	1	1
df['FamilySize'] = df['SibSp'] + df['Parch'] + 1 # plus 1 for passenger itself	1	1
transformed_df['Family_Large'] = family.Family_Large	1	1
train_X['Cabin'].fillna('X', inplace=True)	1	1
train_df.query('PassengerId>=892')	1	1
df_train.loc[:,('PassengerId','Title','Survived')].groupby(['Title','Survived']).agg(['count'])	1	1
data.relatives.astype('category')	1	1
test_y['survived'] = y_pred_final	1	1
df_full.drop(['Sex', 'Embarked'], axis = 1, inplace=True)	1	1
survived['Fare'].plot.hist(ax=axs7[1], fontsize=16)	1	1
test_data['WithFamily'].loc[test_data['WithFamily'] > 0] = 1	1	1
"submission.to_csv(""gender_submission.csv"",index=False)"	1	1
test['Title']=test['Title'].replace(['Mlle','Mme','Lady','Countess'],'Mrs')	1	1
glbl['n_iter'], # Number of models that are tried	1	1
test['FareBin'] = pd.qcut(test.Fare, 5)	1	1
train_ds['FreeTraveller'].fillna(0, inplace= True)	1	1
frame.loc[(frame.Fare <= 7.91) , 'Fare'] = 0	1	1
A['Survived']=s	1	1
test_data['Age'][np.isnan(test_data['Age'])] = rand_ts_age	1	1
test_df.drop(['Parch', 'SibSp' ], axis=1)	1	1
"train.loc[train['Cabin'].str.len() == 1.0, 'CabinN1'] = ""999"""	1	1
df['Age'].dropna().median()	1	1
training_set.drop('SibSp', axis=1, inplace=True)	1	1
"royalty.pivot_table(index=[""Sex"",""Age_cat""],values='Survived').copy()"	1	1
test_df['Fare'].dropna(axis = 0)	1	1
"input_data[""Sex""] = input_data[""Sex""].apply(lambda x: int(x == ""male""))"	1	1
"titanic_df[""Embarked""].fillna(""S"",inplace = True)"	1	1
tmp['FamilySurvival'], tmp['Survived'],	1	1
train.loc[train['Pclass'] == 3]['Deck'].describe()	1	1
test.Age.fillna(test.Age.value_counts().idxmax(),inplace=True)	1	1
testONSWAR.drop(drop_elementsONSWAR, axis = 1)	1	1
df['Cabin_numbers'] = cabins.transform(lambda x: len(x)).astype(int)	1	1
test_df.drop(['Embarked_C','Embarked_Q','Embarked_S'], axis=1)	1	1
titanic_traindf.drop('Cabin', axis=1)	1	1
data_train_all.Embarked.fillna('S', inplace=True)	1	1
x_train.values	1	1
y_Qtest.size	1	1
"test_id[""PassengerId""],"	1	1
test['fancy'] = test['Fare'].apply(lambda i: 1 if i >= 100 else 0)	1	1
"dataset.loc[dataset[""Age""] > 40.59, ""Age""] = 5"	1	1
all_data['FareBin'] = pd.qcut(all_data['Fare'],5)	1	1
"all_data.fillna({""Embarked"": ""S""})"	1	1
data_train['Age'] = data_train['Age'].fillna(data_train['Age'].mean())	1	1
train['title']=train.Name.apply(lambda x: x.split('.')[0].split(',')[1].strip())	1	1
df_test_ml['Age'].fillna(np.random.normal(df_test_ml['Age'].mean(), df_test_ml['Age'].std()), inplace = True)	1	1
test_df.drop(['Name', 'PassengerId'], axis=1)	1	1
dd.groupby(['A','C'],as_index=False).median().sort_values(by='A', ascending=True)	1	1
age0_t_df.values	1	1
test.join(et)	1	1
test_data['Fare'].fillna(test_data['Fare'].dropna().mode()[0], inplace=True)	1	1
x['Fare']	1	1
submission.to_csv(OUTPUT_RESULT,index=False)	1	1
train_set['fare_group'] = train_set.apply(lambda r: int(r.Fare/6.0), axis=1)	1	1
titanic_test_dataframe.drop(drop_cols, axis=1)	1	1
tit_df_test['SibSp']+tit_df_test['Parch']	1	1
titanic.corr() #(correlation of all variables in your data set)	1	1
train['CatAge'] = pd.cut(train['Age'], 5)	1	1
t.copy()	1	1
"df_train.drop([""PassengerId""], axis=1)"	1	1
MBR.iloc[:15, 1]	1	1
titanic_df.groupby([titanic_df['Embarked']]).mean()	1	1
titanic['Ticket'].apply(lambda t: t.split('.')[0].split()[0].replace('/','').replace('.',''))	1	1
titanic_df['ticket'].head()	1	1
"dftrain['Title'].replace([""Mlle"",""Ms"", ""Mme""], [""Miss"", ""Miss"", ""Mrs""], inplace=True)"	1	1
"dataset.loc[(dataset[""Fare""] <= 7.91), ""Fare_cat""] = 0"	1	1
data.Title.str.replace('Ms', 'Mrs')	1	1
df_test['Survived'] = Y_pred2	1	1
train_ds.drop(['SibSp', 'Parch'], axis= 1, inplace= True)	1	1
axes[0].set_ylabel('Number of people')	1	1
train.drop(['SibSp'], axis=1)	1	1
data_copy.loc[:, 'Sex']=data_copy['Sex'].fillna('female')	1	1
name_encoder.transform(test.Name)	1	1
"plot.hist(ax = ax[0], bins = 20, edgecolor = ""black"", color = ""blue"")"	1	1
data_test['Age_scaled'] = scaler.transform(data_test['Age'].values.reshape(-1, 1), age_scale_param)	1	1
"res.to_csv('submissionXgboost.csv', sep="","", index=False)"	1	1
"test[""Age""].fillna(median_age_train, inplace = True)"	1	1
train.isnull(),	1	1
plt.rcParams['axes.unicode_minus'] = False #设置负号的正常显示	1	1
data.loc[data['Age'].isnull() & data['NameTitle'].str.contains('Master.'), 'Age'] = 5	1	1
test_set['Fare'].fillna(test_set['Fare'].mean(), inplace=True)	1	1
df['Title'] = df['Title'].replace(['Mme', 'Countess','Dona'], 'Mrs')	1	1
results[['Survived']]	1	1
df_test['LargeF'] = df_test['Family'].map(lambda s: 1 if s >= 5 else 0)	1	1
train['Age'].values.reshape(-1,1)	1	1
died_data.loc[died_data['Sex']=='female',:]	1	1
"copy.loc[copy.Embarked == ""S"", ""Embarked""] = 2"	1	1
tr['Embarked'] =tr['Embarked'].replace('S',1)	1	1
df_train['name_length'] = df_train['name'].map(len)	1	1
"test.drop(labels = [""Name""], axis = 1, inplace = True)"	1	1
train.groupby(['Embarked', 'Sex']).count()	1	1
test_data.Fare.fillna(0 ,inplace = True)	1	1
dataset.loc[(dataset['Age']>32)&(dataset['Age']<=48), 'Age'] = 2	1	1
titanic_train['Embarked'] = titanic_train['Embarked'].map({'C': 3,'Q': 2, 'S':1}).astype(int)	1	1
X_train.iloc[val_idx], Y_train.iloc[val_idx]	1	1
"dataPrepare['Title']=dataPrepare['Title'].map({""Mr"":1,""Miss"":2,""Mrs"":3,""Master"":4})"	1	1
np.mean(data[label==m],axis=0)	1	1
enc.transform(Xt_le)	1	1
df['Embarked'] = -1	1	1
train['Embarked'].isnull().values.ravel().sum()	1	1
test_data_1.head(1)	1	1
test_.values	1	1
data['LastName'] = data['Name'].str.split(',').str.get(0)	1	1
test['Age'] = test['Age'].fillna(int(np.mean(test['Age'])))	1	1
features['Sex'] = features['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
age['Age'] = age['Age'].astype(int)	1	1
test_df1['Fare'] = test_df1['Fare'].fillna(-0.5)	1	1
temp.loc[youngmissmask, 'Age'] = 9	1	1
X['titles']	1	1
train_X['IsAlone'] = 1 #initialize to yes/1 is alone	1	1
train.loc[index,'title']=5	1	1
train.loc[index,'title']=3	1	1
train.loc[index,'title']=2	1	1
train.loc[index,'title']=1	1	1
df_FULL['Cabin'].isnull()	1	1
dataset['Title'] = dataset['Title'].replace(['Don', 'Dona', 'Rev', 'Capt', 'Jonkheer'],'DRCJ')	1	1
splitter['Survived']	1	1
"train.Title.replace(""Don."", ""Nobility"")"	1	1
df.loc[df.FamilySize==1,'Alone'] = 1	1	1
data.combine_first(missing_deck)	1	1
"test[[""FamilySize"", ""Single"", ""Nuclear"", ""Big""]].head(10)"	1	1
test_data['Sex'] = test_data['Sex'].apply(lambda x: gender.get(x))	1	1
df_train['Age'].fillna(mean_age)	1	1
df_comb.loc[df_comb.Age.isnull(), 'Age'] = df_comb.groupby(['Title', 'Pclass']).Age.transform('mean')	1	1
dummy2['Age'].hist(by=dummy2['Title'], bins=np.arange(0,81,1))	1	1
dataset.loc[(dataset['Fare'] > 39.688) & (dataset['Fare'] <= 5512.329), 'Fare'] = 4	1	1
X_data.shape[0]	1	1
df_data['AgeBin_Code'] = label.fit_transform(df_data['AgeBin'])	1	1
"data.boxplot(by=[""Pclass"",""Embarked""], grid=True)"	1	1
"combined.loc[p,""group_type""] = ""acquaintance"""	1	1
df_age['age_level']	1	1
titanic_train_data.loc[titanic_train_data.Sex != 'male', 'Sex'] = 0	1	1
y_Qtest.size - y_Qtest.sum()	1	1
combine.replace({'Title': mapping}, inplace=True)	1	1
final_train['Survived'].values	1	1
df['AgeState'] = np.where(df['Age'] >= 18, 'Adult','Child')	1	1
df_train.Age_bin.astype(int)	1	1
train['Fare'].plot.hist(bins=40, figsize=(10,4))	1	1
test_dataset['Sex'] = test_dataset['Sex'].map({'male':0, 'female':1})	1	1
train_data.dropna(inplace=True)	1	1
in ['Mr', 'Miss', 'Mrs']:	1	1
data_test_all['Title'] = data_test_all['Title'].replace(['Countess','Don','Dona','Jonkheer','Lady','Sir'],'Noble')	1	1
dataset.Age.fillna(dataset.Age.mean())	1	1
test_data['Child'] = test_data.apply(lambda row: 1 if row['Age'] < 15 else 0, axis=1)	1	1
titanic_sibsp_group.apply(get_survival_ratio)	1	1
X.loc[row,'Cabin'].startswith('D'):	1	1
"test_encoded[""PassengerId""],"	1	1
"test4.to_csv(""Prediction_scale2.csv"", index=False)"	1	1
train_dataset['Ageband'] = pd.cut(train_dataset['Age'], 5)	1	1
titanic_train_dataset['Age'].mean()	1	1
test['Embarked'] = test['Embarked'].map({'S': 0, 'C': 1,'Q': 2, 'N':3})	1	1
df_full.groupby('Ticket')	1	1
impute ['Age']= full.Age.fillna(full.Age.mean())	1	1
testData.Age.isnull().sum()	1	1
ss.transform(missing_age_X_train)	1	1
test_data.drop(['Name','SibSp','Parch','Ticket','Fare','Cabin','Embarked'], axis=1)	1	1
train['AgeBin']=pd.cut(train['Age'],bins)	1	1
full[['TicketFare']].astype(int), # Only for having less bars	1	1
data['Title'] = data['Title'].str.strip()	1	1
df['Cabin'] = df['Cabin'].map({'D':0, 'E':1, 'B':2, 'F': 3, 'C': 4, 'G': 5, 'A': 6, 'Z': 7, 'T':8})	1	1
test['Title'] = test['Name'].apply(func=get_title)	1	1
trainPCA2['7'] = trainPCA['Pclass2']	1	1
Xtrain_category.drop(cols_to_drop, axis=1)	1	1
"df[""Embarked""].fillna(df[""Embarked""].mode()[0], inplace=True)"	1	1
dataset.loc[dataset.Name.str.contains('Mr') & dataset.Age.isnull(), 'Age'] = mr_ave	1	1
test.drop(['PassengerId','Name','Ticket','Cabin', 'Embarked'], 1)	1	1
data['DeadFam']=data.apply(DeadFam,axis=1)	1	1
test_df.drop(['Name', 'Sex'], 1, inplace=True)	1	1
train_df['Name'].head()	1	1
t[0] == '4':	1	1
df['LastName'] = df['Name'].apply(lambda x: x.split(',')[0])	1	1
train1.head().T	1	1
survived_data.append([tm_survived_data[i]])	1	1
df_temp.loc[(df_temp['Sex']=='female'),'Count'] = df_temp[(df_temp['Sex']=='female')]['Count']/F_count	1	1
submission.to_csv('submission_final.csv', index=False)	1	1
train['Cabin'].isnull().values.ravel().sum()	1	1
test_df['Title']=test_df.apply(replace_titles, axis=1)	1	1
"test_data[""Sex""].replace([""male"",""female""], [1,0], inplace=True)"	1	1
score_index.append(max(score_max, max(sorted_scores)))	1	1
dataset.loc[(dataset['Fare'] > 8) & (dataset['Fare'] <= 15), 'Fare'] = 1	1	1
test.at[i, 'Age_group'] = int(j/10)	1	1
"data.drop([""Fare""],axis=1)"	1	1
merged_df['Embarked'].value_counts()	1	1
X_train['Sex'] = lb.fit_transform(X_train['Sex'])	1	1
raw_test['LowFare'] = np.where(raw_test['Fare']<=50, 1, 0)	1	1
"combined.loc[pid,""Age_cat""] = assign_Age_cat(child_age)"	1	1
row['Age'] < 25:	1	1
"axes[1].set_title(""Age vise Survival rate"")"	1	1
DataFile.drop('PassengerId',axis=1)	1	1
data_val[['PassengerId', 'Survived']]	1	1
in [ 'Sex', 'Pclass', 'XWho', 'Embarked', 'LTick', 'XCabin', 'TName' ]:	1	1
df_all['Cabin_Series'] = df_all['Cabin'].str[:1]	1	1
dicModels.items(): # loop over all modes	1	1
simple_data_df['P2_Male'] = np.where((simple_data_df['Sex']==0) & (simple_data_df['Pclass']==2), 1, 0)	1	1
pdModelos.loc[row, 'confM']= confusion_matrix(y_train, pdModelos.loc[row, 'pred'])	1	1
test['Fare'] = test['Fare'].apply(fare)	1	1
data.Pc2.mean(),	1	1
df['Embarked']=df['Embarked'].replace('S',np.int32(1))	1	1
"df_perc[""Age""] > 60, ""61+"","	1	1
score['DecisionTreeClassifier'] = decision_tree.score(X_train, Y_train)	1	1
numerical_columns.append('SurnameId')	1	1
"train_data.loc[train_data[""Embarked""] == ""C"", ""Cherbourg""] = 1"	1	1
train.pivot_table(index='Pclass', values = 'Survived')	1	1
df[['Title', 'Age']].groupby(['Title']).std()	1	1
axes[0].set_title('Embarked Survived')	1	1
df_train.groupby(['FamCat'])['Name'].count()	1	1
pred.iloc[:, 1:]	1	1
data_df['Fare'].fillna(data_df['Fare'].median(), inplace = True)	1	1
out.to_csv('Predictions.csv',index=False)	1	1
data_test_split_csv.as_matrix()[:, 1]	1	1
dataset['Title']=dataset['Name'].str.extract('([a-zA-Z]+)\.',expand=False)	1	1
"data_train[[""Family"", ""Survived""]].groupby(['Family'],as_index=False).mean()"	1	1
test3_X[['Sex', 'Age', 'Fare']]	1	1
tit_df_san['Embarked'].replace(['S','C','Q'],[1,2,3],inplace=True)	1	1
df['Title'] == 'Mr'	1	1
ax[1].set_title('Sex vs Age')	1	1
data_df['FamilySize'] = data_df['SibSp'] + data_df['Parch'] + 1	1	1
"titanic[[""age_range"", ""Survived""]].groupby(""age_range"", as_index=False).mean()"	1	1
y_train.values.reshape(-1)	1	1
comb_data.describe().transpose()	1	1
train_data['Cabin'].value_counts()	1	1
"a.loc[(a[""Title""] == ""Mrs"") & (a.Age.isnull()), [""Age""]] = mrs_age"	1	1
df['Title'] = df['Title'].replace(['Mlle','Ms','Mme','Countess','Sir', 'Lady'], 'Noble')	1	1
WholeDataSet.describe() # check the value in each column step 2	1	1
pd.merge(test_df_imputed, combined_df_imputed[['PassengerId', 'FamilyId']], on='PassengerId')	1	1
"train ['Title'] = train ['Name'].str.split ("", "", expand=True) [1].str.split (""."", expand=True) [0]"	1	1
train_df['Deck'].value_counts()	1	1
y_pred.astype('int')	1	1
evaluation.to_csv('result.csv', index=False)	1	1
dataset['hasAge'][rowIndex] == 1:	1	1
"test_data.loc[test_data.Sex == ""female"", 'Sex'] = 2"	1	1
numerical_columns.append('Ticket_perishing_women')	1	1
train_label.values	1	1
df.unstack()	1	1
sns.boxplot(y='Fare', x='Pclass', ax=ax2, data=test_df, linewidth=1, saturation=5, palette=palette3)	1	1
df_test_features.replace('male',1)	1	1
"data_set[""Familymem""] = data_set[""SibSp""] + data_set[""Parch""]"	1	1
"titanic_test_data[""NameLength""]=titanic_test_data[""Name""].apply(lambda x:len(x))"	1	1
test['Age'].fillna(round(test['Age'].mean()), inplace=True)	1	1
train.head() # Checking the data	1	1
"train[""Title""] = [x if x in [""Miss"", ""Mr"", ""Mrs"", ""Master"", ""Dr"", ""Rev""] else ""Vip"" for x in train[""Title""] ]"	1	1
"New_Df[""Cabin""] = New_Df[""Cabin""].str.replace(""F"", ""U"")"	1	1
df_raw_train['Survived']	1	1
survived_data['Survived'].loc[survived_data['Pclass']==2]	1	1
train.select_dtypes(include=['float64'])	1	1
df_ticket.groupby('Name', as_index=False)['Survived'].mean()	1	1
combined.loc[(combined['Pclass'])==3,'Age'] = combined.loc[(combined['Pclass'])==3,'Age'].fillna(combined.loc[(combined['Pclass'])==3,'Age'].median())	1	1
train['Age'].hist(bins=20, ax=axis2).set_title('After Imputing')	1	1
"dftrain.loc[idx,""TicketButLast""]"	1	1
df.drop(['ticket', 'name'], axis=1)	1	1
"dataframe[""Title""] = dataframe[""Title""].replace([""Mlle"", ""Ms""], ""Miss"")"	1	1
features['feature'] = train_df.columns	1	1
test2['Embarked'] = le.fit_transform(test2['Embarked'])	1	1
test_labels.to_csv('Titanic_solution.csv',index=False)	1	1
full_df['Embarked_Num'] = full_df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} )	1	1
test_data['Fare'][test_data.Pclass.values==3].mean()	1	1
data_train.info() #Output view,Check out general information	1	1
cleaned_list.append(cleaned)	1	1
"train_df.loc[train_df[""Pclass""]==3].loc[train_df[""Age""]>50].groupby([""Sex""])[""Fare""].agg([""mean""])"	1	1
test.join(test_embarked_dummies)	1	1
train[['Name', 'Survived']].groupby(['Name'], as_index=False).mean()	1	1
df_grp.drop(ind)['Survived'].min()	1	1
titanicAll['FamilySize'] = titanicAll['Family'].map(familySize)	1	1
data.loc[(data.Room > 20) & (data.Room <= 40), 'RoomBand'] = 2	1	1
test.apply(lambda x: 1 if x['Embarked'] == f_val else 0, axis=1)	1	1
X.head(10)	1	1
train_df['Age'].median()	1	1
p1.shape	1	1
X_test.dtypes	1	1
df_train['Age']=df_train['Age'].astype(int)	1	1
test_df.drop(['Sex'], axis=1)	1	1
t[0] == '5':	1	1
titanic_traindf['Sex'].replace(to_replace=['female','male'], value=[0,1],inplace=True)	1	1
"train.drop(labels = [""Survived""], axis = 1, inplace = True)"	1	1
df.drop(columns=['PassengerId','Name','Ticket'])	1	1
train2_df.drop(mycols, axis = 1)	1	1
"df[""PassengerId""] = data_test_df[""PassengerId""]"	1	1
"survived[""Fare""].plot.hist(alpha=0.5, color = ""red"", bins=range(150))"	1	1
"data[""FamilySize""],"	1	1
data['y_p'] = data['y_p'].apply(lambda x:0 if x<0.5 else 1)	1	1
titanic_train.hist(bins=100, figsize=(20,15))	1	1
train_df.groupby(['Fare_Range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')	1	1
inp['Cabin'] = inp.Cabin.isnull()	1	1
dfTrain['Name_Complexity'].value_counts()	1	1
scores_lr.mean(),	1	1
a['Values']=logistic.coef_[0]	1	1
"np.where(dataset[""Cabin""]==""F"",1,0)"	1	1
inputds['Survived'].tolist()	1	1
x_test[['Age']] = imr.fit_transform(x_test[['Age']])	1	1
dataset.loc[mask, ['FareBand', 'Pclass', 'Survived']].groupby(['FareBand', 'Pclass']).agg(['mean'])	1	1
titanic_df['PchM'] =     titanic_df[['ParchBinary','Male','MasterMiss']].apply( get_malepm, axis=1 )	1	1
plt.hist([data1[data1['Survived']==1]['Fare'],data1[data1['Survived']==0]['Fare']],bins=30,label=['Survived','Not_Survived'])	1	1
df.loc[ (df.CabinLetter.isnull()) & (df.FamilySize == f), 'CabinLetter'] = median_cabinLetter[f]	1	1
df_test.join(family_one_hot_test)	1	1
"train_df[""Ticket_cat""] = train_df[""Ticket_cat""].fillna(""N"")#numerical"	1	1
"test_df[[""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""family_size""]]"	1	1
train1.isnull().sum()	1	1
"dataset['Embarked'] = dataset['Embarked'].fillna(""S"")"	1	1
df_test.drop(['Cabin','Embarked','Title','Age','Sex','Name','Ticket','AgeGroup','Deck','Pclass','Fare','FareBand','SibSp','Parch','Parch_7','Parch_8','Parch_9'], axis=1)	1	1
"tt.groupby([""Survived"",f]).size()"	1	1
train_df.groupby('Title').size()	1	1
test_df['Cherbourg']=test_df[['Embarked']].apply(get_cherbourg, axis=1)	1	1
dataset['Family'] = dataset.SibSp + dataset.Parch	1	1
train_test.loc[(train_test.Fare.isnull()),'Fare']=8.05	1	1
dataset.merge(freq, how='left', left_on=col, right_index=True)[freq_col]	1	1
"test.loc[test[""Name""].str.contains(""Bowen,""),""Cabin""] = ""B68"""	1	1
"dftrain[""Embarked_bool""] = dftrain.Embarked.map(context2)"	1	1
curr_row[0][4]	1	1
X_train_age['Age']	1	1
combined['Small'] = combined['FamilySize'].map(lambda s : 1 if 2<=s<=4 else 0)	1	1
titanic_train_dataset['Cabin'] = cabin_floor_list	1	1
"_test_df[""age""] =  pred_ages"	1	1
sub['SEX'] = sub['SEX'].cat.rename_categories([0,1])	1	1
data[['DeckCode', 'Survived']].groupby(['DeckCode']).agg(['count','mean'])	1	1
df['Age'][np.isnan(df['Age'])] = rand_ages	1	1
df_test.loc[ (df_test.Sex == 'male') & (df_test.Pclass == 2) & (df_test.Age_bin == 1), 'Survived'] = 1	1	1
data['Title'] = data.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
df_all.isnull().sum()	1	1
encSex.transform(df.Sex.values.reshape(-1,1))	1	1
minS.append(g.Fare.min())	1	1
Test.drop('Sex',axis=1)	1	1
testData.Sex.astype('category')	1	1
train.loc[(train['FareScaled'].isnull()), 'FareScaled'] = train['Fare']	1	1
df['Embarked'] = df['Embarked'].apply(lambda e: -1 if pd.isnull(e) else (1 if e=='S' else (2 if e=='C' else 3)))	1	1
train_df[['FamilySize', 'Survived']].groupby('FamilySize', as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
titles_train.replace(rare_titles, 'rare', inplace = True)	1	1
TRAIN_DATA.shape[0]	1	1
sns.boxplot(x='Survived',y='Fare',data=data_train)	1	1
df.drop(['Ticket', 'Name','Embarked'], axis=1)	1	1
pipelines.append(('ScaledNB', Pipeline([('Scaler', StandardScaler()), ('NB', GaussianNB())])))	1	1
t_y.shape	1	1
titanic_train_data.drop('TitleDon.', axis=1, inplace=True)	1	1
df['Ticket_Len'] = df['Ticket'].apply(lambda x: len(x))	1	1
"df[""Name""] = df[""Name""].str.lower()"	1	1
"df['Status'] = df['Status'].replace(list_rare, ""Rare"")"	1	1
age['Age'] = combined_df.Age	1	1
x_test['Alone'] = x_test['Family'].map(lambda x: 1 if x==0 else 0)	1	1
dataset['Sex']=dataset['Sex'].map({'female':0,'male':1}).astype(int)	1	1
test.drop(['Cabin','Ticket','Fare','Name','PassengerId'],axis=1)	1	1
dataset['Fare'].fillna(value=dataset['Fare'].median(), inplace=True)	1	1
"df[""Fare_categories""] = pd.cut(df[""Fare""], cut_points, labels=label_names)"	1	1
tmp.shape[0]	1	1
model_num.add(Dense(4, activation='relu'))	1	1
data_titanic_mod.fillna(0, inplace=True)	1	1
df['Age'] = df[['Age','title_age','Pclass']].apply(input_age,axis=1)	1	1
X.drop(['Survived'], axis=1)	1	1
dc['Ageinv']=dc.apply(inverseAge,axis=1)	1	1
scores_sv.std(),	1	1
df['older_relative_age'] = df['Ticket'].apply(lambda ticket: older_age.loc[ticket])	1	1
seq.add(Dense(8,activation='sigmoid'))	1	1
train_df.drop(['Cabin','Ticket'], axis = 1, inplace = True)	1	1
train_df.loc[fil, 'Embarked'] = 'C' #I new it was C from a previous run	1	1
df_output5.to_excel(writerxls5,'Sheet1')	1	1
train.describe().Fare	1	1
"data.loc[data[""Cabin""] == ""Unknown"", 'Cabin'] = 0"	1	1
df_train['Embarked'].fillna(common_embarked, inplace=True)	1	1
"test[""Cabin""][test[""Cabin""] == ""E""] = 4"	1	1
test_isnull.style.background_gradient(cmap=cm)	1	1
"titanic_df[""Embarked""].loc[titanic_df[""Embarked""]==""Q""]=2"	1	1
X_test.drop('Ticket',inplace=True,axis=1)	1	1
sns.boxplot(x='Sex',y='Age',data=df_train)	1	1
df.drop_duplicates()	1	1
train.loc[(train['Pclass'] == 3) & (train['isAlone'] == 0), 'class_alone'] = 5 #together Pclass 3	1	1
df.loc[df['Age'].isnull(), 'WithAge'] = 0	1	1
test.loc[(test['Pclass'] == 3) & (test['hasCabin1'] == 1), 'class_hascabin'] = 3	1	1
train_df['Title']= train_df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],'Rare')	1	1
df.loc[df['FamilySize'] > 1, 'IsAlone'] = 0	1	1
test[['PassengerId', 'Survived_wtd_avg']].to_csv('submission_wtd_avg.csv', index = False, header = ['PassengerId', 'Survived'])	1	1
fit.append('rf')	1	1
trainingset['AgeBin'] = pd.cut(trainingset['Age'],agebins,labels=labels)	1	1
train.iloc[:, train.columns != 'Survived']	1	1
test_df.apply(count_missing, axis=0)	1	1
train.reindex(np.random.permutation(train.index))	1	1
train.loc[train['Survived'] == 1, 'Age'].dropna()	1	1
X.sort_values(by='Survived', inplace=True)	1	1
"row[""SibSp""] + row[""Parch""] + 1"	1	1
df_test['Survived'] = y_pred_tmp	1	1
"test_df.drop(labels=[""Survived""],axis = 1,inplace=True)"	1	1
df['Age'].dropna().hist(bins=20, range=(0, 80), alpha=.5)	1	1
testing.drop(labels = ['Cabin', 'Ticket'], axis = 1, inplace = True)	1	1
"df.Embarked.fillna(""S"")"	1	1
train['Has_Cabin'] = train['Cabin'].apply(lambda x: 0 if type(x) == float else 1)	1	1
"combined[""n_cabin_mates""] = 1"	1	1
ticket_numbers.append(0)	1	1
train['Cabin_first_letter'] = find_cabin(train.Cabin)	1	1
"axes[1].set_xlabel(""Age"")"	1	1
"_df[""fancy_name""] = names"	1	1
data_train_all.drop(columns='Ticket')  ## we could have also used (inplace= True) and then we need not do data_train _all= data_train_all.drop(xxxxxx)	1	1
res_df_solver_max_iter.head()	1	1
df.Title.replace(['Mlle','Mme'],'Mlle',inplace=True)	1	1
df.loc[ (df.Age <= 28.5) & (df.Age > 21),'AgeBand'] = 1	1	1
X[['Fare_log1p','Group_size']] = scaler.fit_transform(X[['Fare_log1p', 'Group_size']])	1	1
all_data.query('Embarked != Embarked')	1	1
val[1]	1	1
test_df.drop([_id], axis=1)	1	1
sib_count.values,	1	1
raw_test['IsChildren'] = np.where(raw_test['Age']<=5, 1, 0)	1	1
df_title.groupby('Name').Age.mean()	1	1
plt.hist(x=[data1[data1['Survived']==1]['FamilySize'], data1[data1['Survived']==0]['FamilySize']], stacked = True, color = ['r','g'], label = ['Survived', 'Dead'], bins = 10)	1	1
titanic_comb['log_fare'] = np.log(titanic_comb['Fare']+1)	1	1
testOrg['famSize'] = testOrg.SibSp + testOrg.Parch	1	1
submission['PassengerId']=test['PassengerId']	1	1
data.append(f_dict)	1	1
"train_data.loc[train_data[""FamilySize""] >= 8, ""FamilySizeAbove8""] = 1"	1	1
"titanic_train[""AgeGroup""] = titanic_train.apply(lambda row: group_age(row[""Age""]), axis=1)"	1	1
df['Fare'].fillna(df['fare_med'], inplace=True, )	1	1
test_df.loc[(test_df['Age'].isnull())&(test_df['Title']=='Rare'),'Age'] = 45	1	1
classifiers.append(SVC(random_state = 0))	1	1
"data_test['Age'].fillna(data_test.groupby('Sex')['Age'].transform(""mean""), inplace=True)"	1	1
"train_ex_df[[""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""family_size""]]"	1	1
"train['Sex_Class']= train['Sex']+""_""+train['Pclass']"	1	1
"train_data.loc[train_data[""Name""].str.contains(""Countess.""), ""TitleCountess""] = 1"	1	1
"final_test[""PassengerId""],"	1	1
"_res.drop(""acc"",axis=1).iloc[0,:].to_dict()"	1	1
dataset['Fare'].hist(normed = True)	1	1
y.append(pd.Series(-np.ones((20))), ignore_index=True)	1	1
missing.values,	1	1
df_test.drop('Parch', axis='columns')	1	1
"submission_df.to_csv(""Titanic Submission.csv"", index=False)"	1	1
original_train_data.describe()	1	1
ages_probabilities.reset_index()	1	1
test_y.append(1)	1	1
dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 21.679), 'Fare'] = 5	1	1
df_train['AgeEncoded'] = pd.cut(df_train['Age'], 5, labels=[1, 2, 3, 4, 5])	1	1
data['Family_size'] = data['SibSp'] + data['Parch'] + 1	1	1
df[['SibSp', 'Survived']].groupby('SibSp').count().merge(df[['SibSp', 'Survived']].groupby('SibSp').mean(), right_index = True, left_index = True)	1	1
score_list_accuracy.append(cross_val_score(clf, data_now, trainLabel, scoring='accuracy', cv = 5).mean())	1	1
"_df[""sex""]       == pers[""sex""]"	1	1
dataset['SibSp'][i]==1:	1	1
data.loc[(data.passenger_fare>=8.0) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Letter'] =  data[(data.passenger_fare>=8.0) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
conc.loc[conc['test_1'] == 1]	1	1
"X_test_2[""Age""] = imp.transform(X_test_2[""Age""].reshape(-1, 1))"	1	1
"X_train.drop(""Name"", axis=1, inplace=True)"	1	1
datacv.iloc[:,0:8]	1	1
test_stats.loc['count', :]	1	1
"df[""cabin_nb""]      = df[""cabin_nb""].fillna(-1)"	1	1
np.where(submission_preditions > 0.5, 1, 0)	1	1
"data[""train_scores""] = train_scores"	1	1
row['Age'] >= 65:	1	1
"data.loc[data[""Embarked""] == ""C"", ""Embarked""] = 2"	1	1
"data.loc[data[""Embarked""] == ""C"", ""Embarked""] = 1"	1	1
"test['Title']=test[""Title""].map(title_map)"	1	1
row['Ticket'] or 'PP' in row['Ticket'] or 'F.C.' in row['Ticket'] or 'FC' in row['Ticket']:	1	1
train_bfe.insert(0,'Bias',1) # adding bias for statsmodel	1	1
data.sons.loc[data.PassengerId==1231] = 1 # Case of 'A/5. 851' and last rule	1	1
dataset.loc[(dataset['Age'] > 12) & (dataset['Age'] <= 20), 'Age'] = 1,	1	1
X['Person'] = X[['Age','Sex']].apply(GetPerson, axis = 1)	1	1
test_data['Age'] = test_data['Age'].apply(map_age)	1	1
perf.append(getMetrics(y_test, y_pred, 'Decision Tree - Information Entropy'))	1	1
df_tr.head()	1	1
train.ix[:,:]	1	1
df_train['age_mid'] = df_train['Age'].apply(lambda x: 1 if (x > 10 and x < 50) else 0)	1	1
test_data.join(sex_dummies_test)	1	1
train_data['Embarked'] = train_data['Embarked'].map(emb).astype(int)	1	1
df['CabinGrp'] = df.loc[:,'Cabin'].str[:1]	1	1
dt.loc[(dt['Age']>64),'Age']=4	1	1
test_analysed[['PTitle','Predict']].groupby(['PTitle']).mean().plot.bar()	1	1
df_final['EmbkS'] = np.zeros(len(df_final))	1	1
merged.loc[merged.Family_Size==0,'Alone']=1#Alone	1	1
"related_people.loc[related_people[""PassengerId""]==207,""RGroup""]=""Gustafsson_M"""	1	1
"data_df.loc[(data_df[""Fare""] > 31.275),  'Fare_Grouped'] = 3"	1	1
titanic_test_data.Cabin.astype('int32')	1	1
testdata.ix[(testdata.Fare > 52.369), 'FareCategory'] = 5	1	1
submission_df.to_csv('submission.csv', index=False)	1	1
"combined.loc[f_member,""Age""],combined.loc[f_member,""Title""]"	1	1
test.to_csv( 'titanic_prediction2.csv' , index = False )	1	1
title_names_union.set_value(index, value)	1	1
ax[1].hist(df_deads, bins=10, range=(0,100))	1	1
test['Survived_svm'] = y_test_preds_svm.astype(int)	1	1
x_test['Fare'].fillna(x_test['Fare'].mode()[0], inplace=True)	1	1
concat_set['Title'] = concat_set.Title.map(Title_Dictionary)	1	1
"test[""Age""][np.isnan(test[""Age""])] = rand_2"	1	1
train_df['AgeBand'] = pd.cut(train_df['Age'],10)	1	1
"data.Cabin.fillna(""N"")"	1	1
df_test['Sex'] = df_test['Sex'].map({'male': 1, 'female': 0})	1	1
depth_test_error.append(results[1])	1	1
tmp_df.dropna(inplace=True)	1	1
df['Age_isna'] = (df['Age'].isna()) * 1	1	1
person_dummies_test.drop(['Male'], axis = 1, inplace = True)	1	1
"train_kaggle.groupby([""Fare_category""])[""Alive"", ""Not_alive""].sum().plot.bar(figsize=(15,5))"	1	1
dfTest['Title']=dfTest.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
train.loc[(train['farePP'] >= 26.0), 'fareCat'] = 3	1	1
test_df['Age']= train_df['Age'].fillna(-1)	1	1
"data[""Embarked""][i]!=""S"":"	1	1
df.to_csv('gender_submission.csv',header=True)	1	1
"df[""sex""]        = df.sex.map(sex_dict)"	1	1
"test[""Title""] = [x if x in [""Miss"", ""Mr"", ""Mrs"", ""Master"", ""Dr"", ""Rev""] else ""Vip"" for x in test[""Title""] ]"	1	1
dt_test['Family'] = dt_test['SibSp']+dt_test['Parch']+1	1	1
"test.loc[pd.isnull(test[""Cabin""]), ""Cabin""] = 0"	1	1
dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(float)	1	1
testData['Family_Size']=0	1	1
Z.drop(['Age'], axis=1, inplace=True)	1	1
frame.head()	1	1
df_raw['Age'].dropna()	1	1
df['Title'] = df['Title'].map(title_string_map)	1	1
titanic_df.Age.isnull().sum()	1	1
next_feat[1][0]	1	1
df_train['TitleEncoded'] = le_title.transform(df_train['Title'])	1	1
"X.pop(""Survived"")"	1	1
df1['Cabin_grp'].nunique()	1	1
"combined.loc[p, ""group_id""] = f_dict[dominant_ln]"	1	1
Train_Master.isnull().sum(axis=0)  # Re-validate Null value count	1	1
df_titanic.fillna(np.nan)	1	1
train_data.iloc[index, train_data.columns.get_loc('Age')] = 21	1	1
titanic_train['age_range'] = titanic_train['age_range'].map({'0-5':0, '5-16':1, '16-30':2,'30-45':3, '45-60':4, '60-75':5, '75-':6}).astype(int)	1	1
"df[""Cabin""].fillna('M', inplace=True)"	1	1
train.drop(['train', target, 'Pclass'], axis=1, inplace=True)	1	1
df.Cabin.fillna('T', inplace=True)	1	1
train_copy.loc[train_copy['Sex'] == 'female', 'Sex_Category'] = 0	1	1
df.Embarked.fillna(df.Embarked.mode()[0],inplace=True)	1	1
"_df.drop([""name_count"", ""name_first"", ""name_second"", ""name_last""], axis=1)"	1	1
"df[""WithCabin""] = 1"	1	1
Z['Embarked'].fillna('S',inplace=True)	1	1
df_train_features.iloc[rowin,ap]=ord(cn[0])	1	1
Titanic_Master.dropna()['Age'].describe()	1	1
np.where(ypred>=0.5,1,0)	1	1
"dataset[""PREMAX""]['2017':].plot(figsize=(16,4),legend=True)"	1	1
test_df.loc[(test_df['Age']>16)&(test_df['Age']<=24),'Age_band']=1	1	1
result.iloc[[col_a], [col_b]] = pearsonr(train.loc[:, columns[col_a]], train.loc[:,  columns[col_b]])[0]	1	1
"df_data['Title'] = df_data['Title'].map({""Mr"":0, ""Rare"" : 1, ""Master"" : 2,""Miss"" : 3, ""Mrs"" : 4 })"	1	1
train.groupby('Sex')['Survived'].agg({'Sex':['count'],'Survived':['sum']})	1	1
test.drop(labels=drop_columns, axis=1)	1	1
submission.to_csv( 'titanic_pred_SVMGA.csv' , index = False )	1	1
final_train.head(10)	1	1
model.add(Dense(250))	1	1
ax.hist([data[data['Survived']==1]['Pclass'],data[data['Survived']==0]['Pclass']],color = ['g','r'],)	1	1
known_age_data.Age.values	1	1
age_median.reset_index()	1	1
train['Surname'] = [train.iloc[i]['Name'].split(',')[0] for i in range(len(train))]	1	1
titanic.loc[:,i]=titanic.loc[:,i].astype('object')	1	1
"sco.sort_values(""Score"", ascending=False)"	1	1
titanic.apply(get_family_id, axis = 1)	1	1
train['Pclass'][train['Survived']==1].value_counts().sort_index()	1	1
df_all.drop(['Cabin', 'Ticket', 'Family_size', 'Ticket_info', 'Ticket_count', 'Cabin_info', 'Name', 'Sex', 'Embarked', 'Family_name', 'Family_name_count', 'withFamily'], 1)	1	1
train.drop(features_to_drop, axis=1)	1	1
result.to_csv('result.csv', index = False)	1	1
data_train.loc[:,['Survived','Embarked']].groupby(['Embarked']).sum()	1	1
data['non_relatives'] = data.qtd_same_ticket - data.family	1	1
X.loc[ X['Fare'] <= 7.91, 'Fare'] = 0	1	1
df['Survived'][df['Sex'] == 'male'][df['filled_ages'] < 18][df['Pclass'] == 2].value_counts()	1	1
train_dataset.PassengerId.nunique() == train_dataset.shape[0] else print('oops')	1	1
data_titanic_mod2.copy()	1	1
training_data.Age.dropna(axis=0)	1	1
trainData['Embarked'].value_counts().sort_index().plot.bar(ax=axs6[0], figsize=(12, 6),fontsize=16)	1	1
testdat.fillna(0)	1	1
in ['SVM','KNN','RandomForest','NeuralNet']:	1	1
age_xt.div(age_xt.sum(1).astype(float), axis=0)	1	1
test_df['Age_filled'] = test_df['Age_filled'].astype(int)	1	1
train_df['Embarked'] = train_df['Embarked'].map({'S': 0, 'Q': 1, 'C': 2}).astype(int)	1	1
df_test[['PassengerId','Survived']].to_csv('predict.csv', index=False)	1	1
train.dtypes.index	1	1
pylab.rcParams['figure.figsize'] = 14,10 # Big graphs unless specified	1	1
big['TName'] = big['Name'].apply(lambda x: str(x)[str(x).find(',')+2:str(x).find('. ')+1:] if str(x).find('. ') != -1 else x)	1	1
"sns.boxplot(x=""day"", y=""total_bill"", data=tips)"	1	1
estimators_list.append(grid.best_estimator_)	1	1
combined_features.iloc[891:].groupby(['Sex','Pclass','Title'])	1	1
train_data['Singleton'] = train_data['FamilySize'].map(lambda s: 1 if s == 1 else 0)	1	1
train.drop(Columns_to_drop, axis=1, inplace=True)	1	1
dataset.loc[(dataset['Age'] >= 30) & (dataset['Age'] < 40), 'Age'] = 3	1	1
df.ix[df[column].notnull()]	1	1
train.loc[train['Age']<15,'child']=1	1	1
"test[""Gender""] = 0"	1	1
without_nulls['Survived']	1	1
df_train['Cabin'] = df_train['Cabin'].fillna('Alpha')	1	1
train_with_ages.Sex.apply(encodeSex)	1	1
test_df.drop('Survived', axis=1)	1	1
full_dataset.Cabin.apply( lambda x : x[0])	1	1
train_df.drop('Ticket', axis = 1, inplace = True)	1	1
train.drop(labels=['PassengerId'], axis=1)	1	1
input_dataset.head(30)	1	1
column.isnull()	1	1
combined['Fare'] = combined['Fare'].groupby(combined['Pclass']).apply(lambda x: x.fillna(x.median()))	1	1
train_df['Survived'].value_counts().plot(kind = 'pie', explode = [0, 0.1], figsize = (4, 4), autopct = '%1.1f%%', shadow = True)	1	1
train_df['Age'][np.isnan(train_df['Age'])] = rand_ages	1	1
titanic_test['Sex']=titanic_test['Sex'].astype('category')	1	1
X.loc[(X['Age'] > 32) & (X['Age'] <= 48), 'Age'] = 2	1	1
titanic_train.groupby('Title').count().PassengerId	1	1
"test.replace([""male"", ""female""], [0,1])"	1	1
full['Cabin'] = full['Cabin'].map(lambda x:x[0])	1	1
"sns.boxplot(x='hasCabin', y=""Fare"", data=data)"	1	1
_df1.Name.values	1	1
data.loc[data['Fare'] < mean_fare[1], 'FareStage'] = 1	1	1
train['Survived'].values.reshape(-1, 1)[m:, :]	1	1
dfnum['AgeDec'] = df['AgeDec']	1	1
df.loc[((df.MisAge == 1) & (df.Cabin == 0)) , 'MA_Ca'] = 3 #No Age no Cabin	1	1
submission.to_csv('titanic_submission_1.csv', index=False)	1	1
all_data.set_value(533,'Deck',value=all_data.loc[128]['Deck'])	1	1
combine_df.loc[(combine_df['Fare'] > 7.91) & (combine_df['Fare'] <= 14.454), 'Fare'] = 1	1	1
df_test_ml['Title'] = df_test_ml['Title'].replace(woman_married, 2)	1	1
"data[""Name""] = data[""Name""].str.replace(""Major"",""Mr"")"	1	1
test['Title']=test['Title'].replace(['Dona', 'Lady', 'the Countess','Sir', 'Jonkheer'],'royalty')	1	1
combined.loc[combined['Number_of_relatives'] == 0, 'Size_Family'] = 'Alone'	1	1
titanic[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Embarked','Title','Survived']]	1	1
model.add(Dense(units = 64, kernel_initializer = 'uniform', activation = 'relu'))	1	1
data_train_dummy2['Family_scaled'] = std_scaler.fit_transform(reshape_Family, std_scaler_Family)	1	1
pred_survival.astype(int)	1	1
train_df.drop(['SibSp', 'Parch', 'Family'], 1, inplace=True)	1	1
"df_test[""FamilyId""] = family_ids_test"	1	1
data['Farebin']=pd.cut(data['Fare'],[0.,20.,50.,100.,600.],right=False)	1	1
dataset['Title']=pd.Series([i.split(',')[1].split('.')[0].strip() for i in dataset.Name])	1	1
X_train.append([passenger.Pclass, passenger.Age, sex, passenger.Fare])	1	1
row['Age_Unknown'] = 1	1	1
df['Sex_Class'] = df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
sub_logreg['PassengerId'] = df_test['PassengerId']	1	1
train_df.loc[(train_df['Fare'] > 79.0) & (train_df['Fare'] < 81.0) & (train_df['Pclass'] == 1), ['Fare','Embarked']]	1	1
TitanicTrain.head(10)	1	1
misclassified_df.groupby(['Title','Pclass','Family'])['Survived'].agg(['mean','count'])	1	1
titanic_ds.head()	1	1
results.loc['KNN', 'Validation'] = knn_preds	1	1
df_train_copy['Cabin'] = df_train_copy['Cabin'].fillna('X').apply(lambda v: v[0])	1	1
train.drop(['Cabin'], axis=1, inplace=True)	1	1
"dfTestTemp[""PassengerId""],"	1	1
pred[['PassengerId', 'Survived']].to_csv('submission.csv', index=False)	1	1
output.to_csv('titanic-predictions2.csv', index = False)	1	1
"df.loc[ (df[""Age""] > 48) & (df[""Age""] <= 64), ""Age"" ] = 4"	1	1
df_test2.sort_index()	1	1
dataset.loc[dataset['Fare'] > 100, 'Fare'] = 6	1	1
data_train.loc[data_train['Survived']==1,'Cabin'].value_counts()	1	1
"df_test[""len_name""].describe()"	1	1
train_data['Sex'].replace(['female','male'],[0,1],inplace=True)	1	1
dataset_train[['Pclass', 'Survived']].groupby(['Pclass']).sum()	1	1
"clean_data[""Survived""]"	1	1
"dftrain.loc[idx,""FareCorrect""]=dftrain.loc[idx,""Fare""]/(ticket_count_train[ticket])"	1	1
test_df.loc[(test_df.isAlone.isnull()), 'isAlone'] = 0	1	1
X_test['FamilyS'] = X_test['SibSp'] + X_test['Parch'] + 1	1	1
data['Title1'] = data['Title1'].astype('category').cat.codes	1	1
dataset.drop('Age', axis=1)	1	1
titanic_train_test_merged['Sex']=titanic_train_test_merged['Sex'].astype('category')	1	1
in ['Sex', 'Cabin', 'Embarked', 'Title']:	1	1
"pd.merge(family_sizes_survived, family_sizes_perished, on=""Family Size"")"	1	1
axes[0].hist(combined.dropna()['Age'], bins=8, label='hst')	1	1
X.loc[X[X.Age.isnull() & (X.titles == title)].index, 'Age'] = rdm_age	1	1
titanic.Age.fillna(value=train.Age.mean())	1	1
X_test.loc[X_test['Embarked'] == 'Q', 'Embarked'] = 3	1	1
X_test.loc[X_test['Embarked'] == 'Q', 'Embarked'] = 2	1	1
train_df['AgeBand']	1	1
combined.drop(['Name', 'Cabin', 'Fare', 'Parch', 'SibSp', 'Ticket', 'title'], axis=1)	1	1
all_data['Embarked'].dropna().mode()[0]	1	1
app_train.drop(columns=['Name','Ticket','PassengerId'])	1	1
"test.loc[ test['Age'] <= 16, 'Age'] 					       = 0"	1	1
score.append(knn.score(X_val, y_val))	1	1
data['Survived'].isnull().sum()	1	1
cv_means.append(np.mean(cv_result))	1	1
app_train['Survived'] = labels	1	1
"train_df[[""Pclass"", ""Embarked"", ""Sex"", ""Survived""]].groupby(['Pclass', 'Embarked', 'Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
ax[0].set_title('Variation in Training Data Accuracy w.r.t to Inverse Regularization parameter C for different Solvers')	1	1
data['harborA'] = data.apply(getembarkedA,axis=1)	1	1
test['T2'] = np.array(test['Title'] == 'Miss').astype(np.int32)	1	1
train_df['Alone'] = train_df['Alone'].astype(int)	1	1
"data[""TicketPrefix""],"	1	1
dataset['Age'][i]= 1	1	1
dataset_test.iloc[:, 4:11].values	1	1
np.where(dataset.Survived == 1, 'blue', 'red')	1	1
std_scaler_keep.transform(df_t[to_keep])	1	1
data_for_age.loc[(data.Age.notnull())]   # 年龄不缺失的数据	1	1
StackingSubmission.head()	1	1
titanic.drop('Name', axis=1, inplace=True)	1	1
df[['SibSp', 'Age']].groupby(['SibSp']).mean()	1	1
titanic_test['Cabin'].replace(['B', 'T', 'C'], ['A', 'A', 'A'], inplace = True);	1	1
dmodel.add(Dense(200, activation = 'relu', input_shape = (8,)))	1	1
dfTrain['Cabin'] = dfTrain['Cabin'].fillna('znan')	1	1
df['Fare_per_ticket_member'] = df['Fare'] / (df['TicketMembers'])	1	1
submission.head(100)	1	1
estimators['SVM'] = svm.SVC()	1	1
test7['Cabin'] = test7['Cabin'].fillna('U')	1	1
"X_all.drop(labels=[""Name"", ""Ticket"", ""Cabin""], axis=1)"	1	1
titanic_train['Age_Middle']=((titanic_train['Age']>35)&(titanic_train['Age']<=50)).astype(int)	1	1
combined['Name_len'] = combined['Name'].apply(lambda x: len(x)).astype(int)	1	1
submission[['PassengerId', 'Survived']].groupby('PassengerId').sum().reset_index()	1	1
clean_data['Survived'].corr(df3['SibSp'])	1	1
pred_table_lr_1_test.drop('Prob',axis=1)	1	1
test_df['is_train'] = False	1	1
df[['age_stage', 'Survived']].groupby(['age_stage'], as_index=False).mean()     .sort_values(by='age_stage', ascending=True)	1	1
data_pruned.drop(['Embarked','Title'],axis=1,inplace=True)	1	1
X_test['Fare'] = X_test['Fare'].fillna(X_test['Fare'].mean())	1	1
y.values	1	1
data_file['Age'] = np.around(data_file['Age'].fillna(data_file['Age'].median()))	1	1
tt['FamilySize'] = tt['FamilySize'].apply(lambda x: 'Single' if x == 1 else ('Normal' if 1<x<4 else 'Large')) # Category family size by 1, 1-3, over 3	1	1
data1.set_value(index, 'Random_Predict', 1)	1	1
data.loc[(data.Age.isnull())&(data.Title==3)&(data.Pclass==3), 'Age']=31	1	1
submission.to_csv('DR.csv', index=False)	1	1
"sex[""Age""] = np.nan"	1	1
df.drop(['Survived','PassengerId','Ticket','Name'],axis = 1)	1	1
df['Fare'] = scaler.fit_transform(np.array(df['Fare']).reshape(-1, 1))	1	1
"test[[""Pclass"", ""Sex"", ""Age"", ""Fare"", 'Embarked_C', 'Embarked_Q', 'Embarked_S']].values"	1	1
titanic_test.loc[titanic_test['Embarked']=='Q', 'Embarked']=2	1	1
testset.drop(['SibSp', 'Parch', 'Name', 'Ticket'], inplace=True, axis=1)	1	1
train['Embarked']=train['Embarked'].map(Embarked_mapping)	1	1
submit['Survived'] = submit.Survived.astype('uint8')	1	1
"data[""Deck""].value_counts().index"	1	1
"test.loc[i,""Commentaire""] = l[3].strip()"	1	1
"axs6[0].set_title(""People on the Titanic"", fontsize=20)"	1	1
"training.drop(""Name"", axis = 1, inplace = True)"	1	1
row['Age'] <= 10:	1	1
my_data['Age']=my_data[['Age','Pclass']].apply(age_replace,axis=1)	1	1
X_temp_test.shape	1	1
X_train.head(20)	1	1
test_data.Age.fillna(np.mean(train_data.Age))	1	1
gbc_feat_red.transform(gbc_final_test)	1	1
comb.drop(columns=['Pclass','Embarked','Age'])	1	1
train_engineered_df.iloc[:,0]	1	1
test_data['SEX'] = test_data['SEX'].astype('category')	1	1
df_train.loc[:,'Survived']	1	1
"train_df.query('Ticket==@_t')[[""PassengerId""]].values.tolist( )"	1	1
X_train.drop('SibSp', 1)     .drop('Parch', 1)	1	1
df_test.drop(['Name', 'Cabin', 'Ticket'], axis=1, inplace=True)	1	1
ans.to_csv('answer.csv',index=False)	1	1
"titanic_df[""Survived""] = titanic_df['Survived'].astype('int')"	1	1
train1['Dataset'] = 'Training Data'	1	1
data_train.select_dtypes(exclude = ['object'])	1	1
trainX.head(2)            # Header of trainX	1	1
dataset.Embarked.astype('category')	1	1
train_cleaned.drop('Survived', axis=1)	1	1
total.Sex.replace({'male':0, 'female':1}, inplace = True)	1	1
"clean_data[""Embarked""][i]!=""S"":"	1	1
test.loc[test.Age.isnull(), 'Age'] = predicted_ages_test	1	1
combined.drop(drop_col,axis=1)[:891]	1	1
data.Pc1.mean(),	1	1
df['M_C1'] = df['Sex_male'] * df['Pclass_1']	1	1
data_df['FareBin'] = pd.qcut(data_df['Fare'], 6)	1	1
"final_df.to_csv(""GBMSub.csv"", index=False)"	1	1
"df.loc[i,""Age""]=(title_mean[df.loc[i,""Title""]])"	1	1
passenger_data.describe()	1	1
train.rename(columns={i: 'Class_'+str(i)}, inplace=True)	1	1
data_full['Embarked'] = data_full['Embarked'].fillna(data_full['Embarked'].mode().values[0])	1	1
training_df.as_matrix(columns=['Survived']).reshape(-1)	1	1
dataset['Title'] = dataset['Title'].replace(['Rev', 'Dr', 'Countess', 'Jonkheer', 'Don', 'Capt', 'Sir', 'Lady', 'Major', 'Col'], 'Rare')	1	1
row[4] == 'female':	1	1
train['Cabin'] # it's unnecessary anymore	1	1
X_scaled.iloc[:2,]	1	1
sns.boxplot(joined['Age'], ax=ax3, width=0.3, color='gray');	1	1
df.groupby(['Pclass', 'Sex']).Fare.mean()	1	1
"dat.loc[dat[""Embarked""] == ""C"",""Embarked""] = 2"	1	1
train_x.head(train_num)	1	1
raw_train['Survived'].value_counts()	1	1
valid_X['FareBin_Code'] = label.fit_transform(valid_X['FareBin'])	1	1
train['Embarked'].replace('S', 2, inplace = True)	1	1
ds['Title'] = ds['Title'].replace(['Major', 'Rev', 'Sir'], 'Mr')	1	1
titanic_tobepredicted['Pclass'] = df_test_tobepredicted['Pclass']	1	1
test.drop(['Parch', 'SibSp'], inplace=True, axis=1)	1	1
train_df.loc[(train_df['Age'] >= 10.367) & (train_df['Age'] < 20.315), 'Age'] = 1	1	1
X_train['Age'].values.reshape(-1, 1)	1	1
"test_dataset.loc[ (test_dataset.Pclass == 2) & (test_dataset.Sex == ""male"") & (test_dataset.Age.isnull()), ""Age"" ] = test_dataset.loc[ (test_dataset.Pclass == 2) & (test_dataset.Sex == ""male"") & (test_dataset.Age.isnull()), ""Age"" ].fillna(test_dataset.loc[ (test_dataset.Pclass == 2) & (test_dataset.Sex == ""male"") ][""Age""].median())"	1	1
combined_df.loc[891:,'PassengerId'],	1	1
imputer.transform(X[:, 2:3])	1	1
model.add(Dense(output_dim = neurons_layer_1, input_dim=12, init='uniform', activation='relu'))	1	1
"dataset[""Sex""]=dataset[""Sex""].map(sex_map)"	1	1
"survived[""Age""].plot.hist(alpha=0.5, color='red', bins=50)"	1	1
train.Embarked.isnull().any()# Finally No NaN values	1	1
data_test.fillna(0.0,inplace = True)	1	1
train.drop(['PassengerId', 'Parch', 'Ticket', 'Cabin', 'Embarked'], axis = 1)	1	1
"train[""Survived""][train[""child""] == 1].value_counts(normalize = True)"	1	1
dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\.')	1	1
df1['Name']	1	1
train[['1Class','2Class','3Class']] = pd.get_dummies(train['Pclass'])	1	1
"train[""FamilyId""] = family_ids"	1	1
t[0] == '8':	1	1
df_train.loc[cond,'Embarked'] = 'S'	1	1
"test[""Pclass""][i]"	1	1
train['Age'].hist(bins=30)	1	1
"df_train[""Age""].plot(kind='density', color='teal')"	1	1
dataset['Fare']=dataset['Fare'].fillna(dataset['Fare'].interpolate(method='linear'))	1	1
titanic_embarked_group.apply(get_survival_ratio)	1	1
df_test_features.loc[:,'np'+str(i)]=-1	1	1
"df_test[""Fare""][x] = round(df_test[df_test[""Pclass""] == pclass][""Fare""].mean(), 8)"	1	1
total.loc[(total.Age.isnull()) & (total.Title == title),'Age'] = age	1	1
x_test['Cabin'] = new_cabin.values	1	1
"data['deck'] = data[""Cabin""].map(lambda row: row[0])"	1	1
train_df.loc[train_df['Name'] == NameListIndex[x], 'Name'] = NameListIndex[x]	1	1
ticket.replace('.', '').replace('/', '').split()	1	1
merged_df['title'] = merged_df['title'].replace(title_map)	1	1
train_data['Age'] = train_data['Age'].fillna(mean_age)	1	1
c_pre.isnull()	1	1
dataset['Cabin2'][i]=choice(third_class_sample)	1	1
df['male_perc'] = (df[df.columns[0]]/(df[df.columns[0]] + df[df.columns[1]]))	1	1
answer_df.to_csv('results_ensemble.csv', index=False)	1	1
train['Title']=train['Name'].map(lambda x: substrings_in_string(x, title_list))	1	1
train_data.Survived.values	1	1
titanic['Fare'].fillna(titanic['Fare'].dropna().median(), inplace=True)	1	1
train_csv['Cabin'] = train_csv['Cabin'].fillna('C0')	1	1
"pd.pivot_table(train, index=""Pclass"", values=""Survived"")"	1	1
hot.transform(test_df)	1	1
Parch_data['final_Parch_data'] = Parch_data.apply(Parch_vs_survival, axis=1)	1	1
df.loc[(df.Cabin.notnull()), 'Cabin'] = 'Yes'	1	1
axes[0].set_title('Survival rate for \n Class 3 Cabins')	1	1
train_reg.loc[:, Yrcol]	1	1
df.iloc[idxs].copy()	1	1
train.update(UpdateNullEmbarked(train))	1	1
test.groupby('Survived').mean()	1	1
ax1[1].set_title('Age Distribution for Not Survived')	1	1
np.multiply(X_prob1[:,4],y_pred1)	1	1
test_df.apply(female_family_pclass, axis = 1)	1	1
pd.pivot_table(Xy_train_df, values='Age', index=['Title'],columns=['Parch'], aggfunc=np.median)	1	1
test.Fare[152] = test['Fare'].median()	1	1
df['Title']=df.Name.str.extract(r'([A-Za-z]+)\.') #lets extract the Salutations	1	1
trainData['Fare'].plot.hist(ax=axs7[0], figsize=(12, 6), fontsize=16)	1	1
imp.transform(train.Age.values.reshape(-1,1))	1	1
train.fillna(fill_dict, inplace=True)	1	1
train_df.loc[:, ['Gender', 'Sex']].head()	1	1
dftr['Sex'] = le.fit_transform(dftr['Sex'])	1	1
df_features.fillna(df_features.median())	1	1
"testing.drop(""Name"", axis = 1, inplace = True)"	1	1
data_test.drop(col_delete,axis=1,inplace=True)	1	1
transformed_df['Pclass_2'] = pclass.Pclass_2	1	1
passengers_by_sex_sur['Survived'].tolist(),	1	1
parental_data['final_parental_data'] = parental_data.apply(parental_Survival, axis=1)	1	1
"test_df.loc[test_df[""Sex""] == ""male"", ""Sex""] = 0"	1	1
plt.rcParams['figure.figsize'] = (15,4)	1	1
train_df['AgeRange'] = pd.cut(train_df['Age'], 8)	1	1
"_df[""age""] = _df.age.apply( lambda x : converter(x))"	1	1
df['AgeGroup'] = df['Age'].apply(lambda x: age_groups(x))	1	1
results.std()	1	1
mcount.values	1	1
"_df[""cabin_nb""]  = _df[""_cabin""].apply(lambda i : int(i[1:]) if ((i != ""nan"") and (len(i)>1)) else np.nan)"	1	1
self.accs.append(logs.get('acc'))	1	1
trainCpy['Age']	1	1
outcomes.append(clf.score(X_test_std, y_test))	1	1
label_encoder_gender.transform(test_X[:, 1])	1	1
"test_df[""Cabin""].isnull()"	1	1
test_df['Age']= test_df.Age.fillna(test_df.Age.mean())	1	1
pipeline.append(('reduce_dim', reduce_dim))	1	1
features_to_model.append(index)	1	1
ax1.spines['top'].set_visible(False)	1	1
cabinNum.append(row[2])	1	1
scaler.transform(X_validation)	1	1
np.std(outer)	1	1
X.Embarked.apply(lambda x: get_port_nr(x))	1	1
submit_data.to_csv('./submit.keras-nn.csv', header=True)	1	1
classifier.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu', input_dim = 11))	1	1
test_df.join(personclass_dummies_test)	1	1
dataFrame['Title'] = dataFrame.Title.map(Title_Dictionary)	1	1
train_df['Age'].fillna(train_df['Age'].mean(), inplace=True)	1	1
traindf.groupby('Pclass').mean()['Age']	1	1
"df_train[""Embarked_code""] = label1.transform(df_train[""Embarked""])"	1	1
"data.loc[train[""Embarked""].notnull(), ""Embarked""] = LabelEncoder().fit_transform(train.loc[train[""Embarked""].notnull(), ""Embarked""])"	1	1
train['FamilySize']=train['FamilySize'].apply(replace3)	1	1
df_train['ticket'] = df_train['ticket'].apply(cleaner_lambda)	1	1
"solution.to_csv(""Random_Forest_Solution.csv"", index=False)"	1	1
df['Parch'] = df0['Parch'].apply(lambda e: -1 if pd.isnull(e) else e)	1	1
model.add(Dense(32, activation='relu', input_dim=14))	1	1
df_train.loc[:,('Age','Title')].groupby(['Title']).agg(['min','max','count','mean','median'])	1	1
testing_set['PassengerId'].copy()	1	1
_df.loc[_df.pclass == _pclass, :]	1	1
train['Fare_cut']=pd.cut(train.Fare, 31)	1	1
train_df_with_family.rename(columns={'FamilyId_y': 'FamilyId'}, inplace=True)	1	1
df.drop(['Name'], 1, inplace=True)	1	1
plt.hist(train.FamilySize)	1	1
train[['Pclass','Survived']].groupby(train['Pclass']).mean()	1	1
train_df['Sex'] = train_df['Sex'].map({'male': 0, 'female':1})	1	1
"test[""Cabin""].fillna(train.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	1	1
train_df.ix[(train_df.Fare < 70),'Fare2'] = 2	1	1
"dataset[""Age""].fillna(train.groupby(""Title"")[""Age""].transform(""median""), inplace=True)"	1	1
"dataset[""Fare""]=dataset[""Fare""].fillna(dataset[""Fare""].median())"	1	1
train_d.drop('FareBands',axis=1)	1	1
dataset.loc[(dataset['Fare'] <=2.67) & (dataset['Fare'] > 2.06)  ,'Fare']=1	1	1
df_train['Embarked'] = df_train['Embarked'].fillna(1)	1	1
plt.boxplot(data1['Age'], meanline=True, showmeans=True);	1	1
titanic['Age'].dropna().astype(int).hist(bins=70, ax=axis1)	1	1
X_age_dummied_test['SibSp_5'] = np.zeros(len(X_age_dummied_test))	1	1
test['AgeCategory'] = test['Age'].apply(get_age_categories)	1	1
data.loc[0,['Name', 'Sex', 'Ticket']]	1	1
test_data['FamilySize'] = test_data['Parch'] + test_data['SibSp'] + 1	1	1
test_hard_pred_matrix.set_index([testdex])	1	1
data.surname_Baclini.astype(np.uint8)	1	1
"df.loc[df[""Age_Band""].notna(), ""Age_Band""] = LabelEncoder().fit_transform(df.loc[df[""Age_Band""].notna(), ""Age_Band""].astype('category'))"	1	1
x.Embarked.isnull().sum()	1	1
familylist[0]	1	1
"df_data[""Title""] = df_data[""Title""].replace(['Capt','Rev','Major', 'Col','Dr'], 'Millitary')"	1	1
raw_train['Fare'].plot(kind='kde', style='k--')	1	1
df['Age'] = df['Age'].fillna(-1)	1	1
dset['Pclass'] = dset['Pclass'].map({1: 'First', 2: 'Second', 3: 'Third'})	1	1
df['age_fill'].isnull().sum(0) # all filled	1	1
"train_df.loc[train_df[""Title""] == ""Col"", ""Title""] = 'Rare Title'"	1	1
titanic_test_data[['Fare','Pclass','male','Parch','SibSp','Age']]	1	1
TitanicTrain.Age.median()	1	1
df.FamilySize.describe()	1	1
raw_train[['SibSp', 'Sex', 'Survived']].groupby(['Sex', 'SibSp'], as_index=True).mean()	1	1
"df[""Title""]=df[""Name""].str.split("","").str.get(1).str.split("" "").str.get(1).str.strip()"	1	1
x_test['FamilySize_3'] = x_test['FamilySize'].apply(lambda x: 1 if x == 3 else 0)	1	1
row['Sex'] == 0:	1	1
df['CabinLetter'] = df.Cabin.dropna().map(getLetter).astype(int)	1	1
axes[0].set_title('Distribution of age for females')	1	1
submission.append(cur, ignore_index=True)	1	1
rfc_params['min_samples_split'] = 0.7	1	1
Ticket.append(i[:2])	1	1
"test[""n""] = 1"	1	1
"df[""age""] = df[""age""].fillna(-0.5)"	1	1
train.groupby(['Title']).mean()	1	1
titanic_data['IsAlone'] = np.where(titanic_data.FamilySize == 1, 1, 0)	1	1
data_set['Fare'].hist()	1	1
model_data['Cabin_Letter_num'] = model_data['Cabin_Letter'].map({'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':4, 'G':5, 'T':6})	1	1
pd.isnull(train.loc[i,'Embarked']) == True:	1	1
data.loc[data['Sex'] == 'male', 'Sex'] = 0	1	1
train_df.drop(train_df.columns[3], axis = 1)	1	1
df.IsMale.astype('int64')	1	1
df1.isnull().sum()	1	1
raw_train.join(fsize_df)	1	1
full['_AgeImputer'] = ximp[:,0]	1	1
rcParams['lines.linewidth'] = 2	1	1
df_train.drop(['Survived'], axis=1, inplace=True)	1	1
"train_data[""FareBetween40And100""] = 0"	1	1
train_df.groupby(['title'])	1	1
df_test.isna().sum()	1	1
X.drop(['Embarked'],axis=1)	1	1
np.mod(epoch+1,100) == 0:	1	1
dataset.loc[index, 'Deck'] = Schoice	1	1
acc_valid_cv_summary.loc[clf_name, 'raw'] = np.mean(scores_clf['valid_' + clf_name])	1	1
result[['PassengerID','Survived']].to_csv('submission2.csv',index=False)	1	1
"df_train[""Fare_cat""] = pd.cut(df_train.Fare, quant, labels=label_quants)"	1	1
test_df['Family_Size']=test_df['SibSp']+train_df['Parch'] + 1	1	1
"dat.loc[dat[""Title""] == ""Master"",""isMaster""] = 1"	1	1
df['Name'] = df['Name'].replace(['Mrs','Mme'],'Mrs')	1	1
X_tot['Sex']=X_tot['Sex'].map({'female':0, 'male':1})	1	1
"data_df[""Age_Grouped""] = data_df.Age.astype(int)"	1	1
tmp_df.isnull().sum().sort_values(ascending=False)	1	1
row['Age'] < 2 :	1	1
df_reduced.head()	1	1
submission.to_csv('titanic_submission_cross_val_with_removal.csv', index=False)	1	1
train_df2[['Age', 'AgeGroup']].head()	1	1
temp.to_csv('submission.csv', index=False)	1	1
x_test.head(2)	1	1
sns.boxplot(x = correlation[column], y = merged.Age, ax = ax)	1	1
x_train[['Embarked']] =  imr.fit_transform(x_train[['Embarked']])	1	1
combined['FareBucket'] = (combined['Fare']/50).astype(int)*50	1	1
data_frame.Cabin.fillna('U', inplace=True)	1	1
df['Sex'].map({'female':0,'male':1}).astype(int)	1	1
Train_Master.sample(5)	1	1
test_data.tail()	1	1
"df_train[""len_name""].std()"	1	1
train.select_dtypes(include=['object']).copy()	1	1
Y_train.loc[X_train.index]	1	1
test_df.drop(drop_columns, axis=1)	1	1
Pclass_test['Pclass_Class1'], Class2=Pclass_test['Pclass_Class2'],	1	1
pd.isnull(cc[0]) and pd.notnull(cc[1]):	1	1
data_test['AgeGroup'] = data_test['AgeGroup'].map(age_mapping)	1	1
"axs3[0].set_title(""People on the Titanic"", fontsize=20)"	1	1
re.sub('[^a-zA-Z]', ' ', combine['Name'][i])	1	1
full_set.head(10)	1	1
all_data.drop(['Name'],axis=1)	1	1
"test_df.loc[ (test_df[""Sex""]==""female"") & (test_df[""Age""].isnull()), ""Age""] = female_mean_age"	1	1
accuracies.append({classifier: accuracy_score(y_test, pred)})	1	1
tit['Sex'] = le.transform(tit['Sex'].get_values())	1	1
survival_rate.loc['Children']=data[data.Child == 1]['Survived'].mean()	1	1
full.loc[full.Title=='the']	1	1
dset.loc[(dset['Sex'] == 1) & (dset['Age'] == 1), 'Title'] = 'Miss'	1	1
test.loc[(test['Pclass'] == 3) & (test['isAlone'] == 1), 'class_alone'] = 6	1	1
df.isnull().sum(0)	1	1
dfcopy.assign(HasParch = [k > HAS_PARCH_THRESHOLD for k in dfcopy.Parch])	1	1
pd.isnull(test.loc[i,'Embarked']) == True:	1	1
dtypes.iteritems():	1	1
grouped_age_train.median()	1	1
mean_imp_age.hist(bins=30)	1	1
titanic_df.groupby(['Pclass', 'Survived'])['Age'].mean()	1	1
survived.to_csv('submission.csv', index = False)	1	1
test['ticketlength'] = test['Ticket'].apply(lambda x: len(x))	1	1
"X[""Cabin""] = X[""Cabin""].apply(lambda x:0 if x ==0  else 1)"	1	1
train['Sex'][train['Survived'] == 1].value_counts()	1	1
train_data.groupby(['Pclass'])['Survived'].value_counts().div(train_data.groupby(['Pclass'])['Survived'].count()).unstack().plot.bar(stacked = True, ax = axes[1])	1	1
dataset.loc[dataset['Age'] >64, 'Age'] = 4;	1	1
raw_train_df['Age'].replace(np.nan, mean_age, inplace=True)	1	1
"sex_corr.groupby(""Sex"")[""Survived""].aggregate({""sum_of_survior"":""sum""})"	1	1
train_d.drop('AgeBand',axis=1)	1	1
train['CategoricalAge'] = pd.qcut(train['Age'], 5)	1	1
df['FareGroup'] = df['Fare'].apply(lambda x: fare_groups(x))	1	1
group_survival['adj_survived'] = group_survival['group_survived'] - group_survival['Survived'].apply(lambda x: 1 if x == 1 else 0)	1	1
dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36) , 'Age'] = 2,	1	1
"df_test[""Parch""]"	1	1
"submission[""PassengerId""] = test_X[""PassengerId""]"	1	1
model.add(Dense(units=40, input_dim=x_train.shape[1], kernel_initializer='uniform'))	1	1
new_train['Survived']	1	1
model.add(Dense(activation='sigmoid',units=1))	1	1
pd.isnull(pre_features2).sum()	1	1
train_data[['Survived','Pclass']]	1	1
"full[""FamilySize""] = families[""FamilySize""]"	1	1
trainData.shape	1	1
results.sort_values(by='Score with feature selection', ascending=False).reset_index(drop=True)	1	1
model.add(Dense(units = 18, kernel_initializer = 'random_uniform', activation = 'relu', input_dim = 17))	1	1
train_x_one_hot_encoded.align(test_one_hot_encoded, join = 'inner', axis = 1)	1	1
data.drop(['Embarked_S', 'Sex_male'], axis = 1)	1	1
df.loc[0:5, ['PassengerId', 'Name']]	1	1
"titanic[[""Embarked"", ""Survived""]].groupby(['Embarked'],as_index=False).mean()"	1	1
"pd.merge(df_age_test, df_age_test_X, how=""outer"", on=""PassengerId"")"	1	1
full_data.iloc[:891]	1	1
test['Embarked_factorized'] = test['Embarked'].factorize()[0]	1	1
test_df.drop(['Embarked'],axis=1)	1	1
dfTrain.Embarked.fillna('S',inplace=True)	1	1
train_df.groupby(['pclass', 'age', 'age*class']).size()	1	1
"dataset.describe(include=""all"")"	1	1
combined.drop(['Cabin', 'Ticket', 'Embarked'], 1)	1	1
data_out['Cabin_Lett'] = data_out['Cabin'].apply(lambda x: str(x)[0])	1	1
"data[""UselessColumn""] = 0"	1	1
pd.DataFrame.from_dict(data=roc_auc_score_dict, orient='index')	1	1
neural_record['Single_Out'][i]=np.mean(c.predict(X_test)==y_test) #Out-of-sample result with single layer	1	1
X.astype('category')	1	1
all_data.set_value(1308,'Deck',value=all_data.loc[128]['Deck'])	1	1
"titanic_df.groupby(""Sex"").mean()[""Survived""].plot.bar()"	1	1
output.to_csv('titanic-LogisticRegression.csv', index = False)	1	1
train_df.groupby('Cabin')['PassengerId'].count()	1	1
model.add(Dense(1, kernel_initializer=k_init))	1	1
X_test['age'] = X_test.age.apply(lambda x: (x - age_mean) / age_std if x > 0 else x)	1	1
train.at[i, 'Cabin'] != 0:	1	1
df['lucky'] = pd.Series(map(is_lucky, df.Ticket.values))	1	1
"forest_solution.to_csv(""predict_random_forest.csv"", index_label = [""PassengerId""])"	1	1
y_pred[0:10]	1	1
clean_data['Survived'].corr(df3['Sex'])	1	1
df.groupby([col, 'Survived']).size().unstack().plot(kind='bar', stacked=True, ax=ax)	1	1
combined['Title_aggr'] = combined.Title.map(Title_Dictionary)	1	1
train_data['Title'] = train_data['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)	1	1
"df_test[[""embC"",""embQ"",""embS""]]=pd.get_dummies(df_test[""Embarked""], dtype=""uint8"")"	1	1
train_df['Fare'][train_df['Survived'] == 0]	1	1
data['Title'] = data['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Mrs'})	1	1
titanic_train_final.corr()	1	1
test['PaxclassA'] = test['Pclass']	1	1
df[['Embarked','PassengerId']].groupby('Embarked').count()	1	1
df.loc[:, ignore_flds]	1	1
df['CabinInt'] = df.Cabin.dropna().map(getNumber).astype(int)	1	1
"data_test.drop(columns=[""Fare"", ""Age""])"	1	1
"test[""Embarked""].loc[test[""Embarked""] == ""C""] = 1"	1	1
"row[3] == ""female"":"	1	1
data_train_all.groupby(['Cabin'])['Survived'].sum()	1	1
big['XCabin'] = big['Cabin'].apply(lambda x: 'U' if (x is np.nan or x != x) else str(x)[0])	1	1
full.loc[full.Title == 'Mlle', 'Title'] = 'Miss'	1	1
train_basic.head()	1	1
test_df.drop(['Cabin','Age'], axis=1)	1	1
"clean_data[""Embarked""].value_counts()"	1	1
"data['Ticket_String'] = data.apply(lambda row: re.sub(""[0-9]"", """", row['Ticket']) , axis = 1)"	1	1
df_all['Cluster_label'] = kmeans.labels_	1	1
class_list.append(temp[1])	1	1
dataset_test.drop(['Survived'],axis=1)	1	1
"df[""Embarked""].fillna(fill_value, inplace=True)"	1	1
all_data[['Title', 'Survived']].groupby('Title', as_index = False).mean()	1	1
"test_data[""Survived""]"	1	1
df_all['_Fare_encoded'] = df_all['Fare_cut'].cat.codes	1	1
"t[""Sex""].value_counts().plot.pie(figsize=(8,8))"	1	1
ds['Title'] = ds['Name'].str.extract(pat= '([A-Za-z]+)\.', expand= False)	1	1
df.loc[(df['Pclass']==2) & (df['Fare'] > 50),'Fare'] = df[df['Pclass']==2].mean()	1	1
test_data.join(test_embarked)	1	1
df['Age'] = df['Age'].fillna(median_age)	1	1
"test[""has_cabin""] = [0 if i == 'N'else 1 for i in test.Cabin]"	1	1
"test.loc[(test[""Name""]==""Others"")&(test[""Age""].isnull()), ""Age""] = train[""Age""].mean()"	1	1
"df[""Age_cat""] = pd.cut(df[""Age""],cut_points,labels=label_names)"	1	1
dataset.reset_index()	1	1
df_train['ticketcount'] = df_train.groupby(['Ticket'])['Name'].transform(len)	1	1
model_desc['classifier']	1	1
"StackingSubmissionONSWAR.to_csv(""StackingSubmissionONSWAR.csv"", index=False)"	1	1
np.shape(X_train)	1	1
train['Cabin'] = train['Cabin'].apply(is_cab)	1	1
normal_people[['Fare','Survived']].groupby(['Survived'],as_index=False)	1	1
"result_test5[""Survived""] = y_pred_gb_rand"	1	1
train_df['source']= 'train'	1	1
test_data.Age.fillna(test_data.Age.mean(), inplace=True)	1	1
df_all['Sex']=df_all['Sex'].replace('female',1)	1	1
train_predictions['majority_voting_all_models'] = train_predictions[first_level_models].apply(lambda x: x.value_counts().index[0], axis = 1)	1	1
runningLoss.append(mean)	1	1
"train[""title""] = [i.replace('Don', 'rare') for i in train.title]"	1	1
titanicTrain.drop('Ticket',1)	1	1
df_train.drop(['Name'], axis=1, inplace=True)	1	1
data['Age'] = grouped_age.transform(lambda x: x.fillna(data['Age'].mean()) if pd.isnull(x.mean()) else x.fillna(x.mean()))	1	1
pd.isnull(cabin) and cabin[0] in ['A', 'B', 'C', 'D', 'E', 'F', 'G']:	1	1
"all_data[""Title""] = all_data[""Title""].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
"comb_data.drop(labels = [""Sex"", ""SibSp"", ""FareGroup"", ""AgeCat"", ""AgeData""],axis = 1)"	1	1
test.iloc[-10:]	1	1
model.transform(train_features)	1	1
dataset.set_value(rowIndex, 'Age19to22', 0)	1	1
data['Age'].fillna(data['Age'].mean(),inplace=True)	1	1
dataset.loc[(dataset['Age']>32)&(dataset['Age']<=40), 'Age'] = 4	1	1
"titanic[""Age""] = titanic.groupby(['Pclass','Sex','Parch','SibSp'])['Age'].transform(lambda x: x.fillna(x.mean()))"	1	1
wholeFitness.append((gen, res.iloc[0], res.iloc[1], res.iloc[2]))	1	1
df3_test.drop('Survived',axis=1)	1	1
"result_test3[""PassengerId""] = passenger_id_test"	1	1
"train.dropna()[[""Pclass"",""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Sex"", ""Embarked"", ""NameLength"", ""HasCabin"", ""FamilySize"", ""Title""]]"	1	1
"train_p['Age_new'][train_p[""Age""]>60] = 2"	1	1
master_df.loc[master_df['Age'].isna(),'Age'] = age_model.predict(X_test).reshape(-1,1)	1	1
data['Surname'] = data['Name'].map(lambda name:name.split(',')[0].strip())	1	1
scaler.transform(test_set1)	1	1
"df[""Age""] = pd.concat([Age_Sex_Title_Pclass[""Age""], Age_Sex_Title_Pclass_missing[""Age""]])"	1	1
"data[""Pclass""] == 1"	1	1
"data[""Fare""].median()"	1	1
submission_file.to_csv(filename, index=False)	1	1
"df_train[""Ticket""] = df_data[""Ticket""][:891]"	1	1
"train[""Fare_categories""] = pd.cut(train[""Fare""],fare_cuts,labels=fare_labels)"	1	1
dataset.set_value(rowIndex, 'Age14to18', 0)	1	1
X_numeric.shape	1	1
"X.loc[X[""Title""] == ""Mme"", ""Title""] = ""Mrs"""	1	1
"all[""Sex""] = le.fit_transform(all[""Sex""].fillna('3'))"	1	1
test['Embarked'].fillna('C', inplace=True)	1	1
age_plot.mean()	1	1
test_set.drop('Survived', axis=1, inplace=True)	1	1
combined_df[0:891]	1	1
d['Age']=lbl.fit_transform(d['Age'])	1	1
training_data[['Pclass', 'Survived', 'Fare', 'Sex']].groupby(['Pclass']).mean()	1	1
df.drop(['Ticket', 'Name', 'Cabin', 'SibSp', 'Parch', 'PassengerId', 'Survived'], axis=1)	1	1
train[['Embarked','Survived']].groupby(['Embarked']).mean().plot.bar(ax=ax[1,0])	1	1
df[['PassengerId', 'Survived']]	1	1
train_df.loc[train_df.Family_Size==0,'Alone']=1	1	1
X_total['Age'] = X_complete[:,1]	1	1
data['Title'] = data['Name'].str.split(',').str[1].str.split('.').str[0].str.strip()	1	1
data['Big_Family'] = data.apply( lambda row: int(row['Family_Size'] >=3), axis = 1)	1	1
data_pred.head()	1	1
df['Name']=df['Name'].astype('category')	1	1
df_test['FareCat']=pd.cut(df_test['Fare'],bins=[0, 25, 90, 1000], include_lowest=True, labels=[1,2,3])	1	1
test.loc[(test['Pclass'] == pclass) & (test['Deck'].isna()), 'Deck'] = deckmeans[pclass]	1	1
df_clean['Cabin_h'].value_counts()	1	1
df.loc[df[df['Name_title'] == 'Ms'].index, 'Name_title'] = 'Miss'	1	1
df2.divide(df2.sum(axis=1),axis=0)*100	1	1
female_ages_not_survived_age['Age'].mean()	1	1
train.drop('Fare', axis=1, inplace=True)	1	1
full['CabinCode'] = full[full['Cabin'].notnull()].Cabin.astype(str).str[0]	1	1
titanic_train.loc[titanic_train['Sex'] == 'male', 'Sex'] = 0	1	1
dat['isMr'].fillna( 0, inplace = True)	1	1
scoreR.mean()	1	1
testData.loc[(testData['Age']>32)&(testData['Age']<=48),'Age_band']=2	1	1
X.shape[1], units=128,	1	1
model.add(Dense(88, input_dim=11, activation='relu'))	1	1
pclass_dummies_test.drop(['C3'], axis=1, inplace=True)	1	1
all_data.set_value(856,'Deck',value=all_data.loc[318]['Deck'])	1	1
df_data['NameLen'] = df_data['Name'].apply(lambda x: len(x))	1	1
df['PassengerId']=df['PassengerId'].astype('category')	1	1
train_d['FareBands'].value_counts()	1	1
data.Cabin_Letter_B.astype('category')	1	1
df.set_index('Title')	1	1
ax[2].set_title('Variation in Model Build Time w.r.t to Max Iterations for different Solvers')	1	1
test[['Age','Pclass_1','Pclass_2','Pclass_3','Sex_female','Sex_male']]	1	1
"test_data['Name_pred'] = test_data['Name_pred'].replace(""Mlle"", ""Miss"")"	1	1
combined_df_imputed['FamilySizeCategory'] = combined_df_imputed['FamilySize'].map(size_categorize)	1	1
"train_df.pop(""Survived"")"	1	1
dataset['Categorical_Age'] = pd.qcut(dataset['Age'],4)	1	1
df.loc[x,'Ticket'].split(' ')	1	1
df_submission['log_fare'] = df_submission['fare'].map(lambda f: 0 if f == 0.0 else np.log(f))	1	1
pred_binary.append(1)	1	1
"titanic.query(""Survived == 1"")['Age'].dropna(), bins=int(titanic['Age'].max()),"	1	1
X_test['SibSp']	1	1
test.loc[(test['Pclass'] == 2) & (test['hasAge'] == 1), 'class_hasage'] = 2	1	1
train.drop(['Name'], axis = 1, inplace=True)	1	1
"train_ori.loc[(train_ori[""Age""] >= -0.001) & (train_ori[""Age""] < 15),""Age""] = 0"	1	1
test_df['Title'] = test_df['Title'].apply(lambda x:x if x in most_frequent_titles else 'Rare')	1	1
fake_test['Survived']	1	1
new_columns.append(df)	1	1
data_test.values.astype(float)	1	1
train.drop(['PassengerId'],axis=1)	1	1
train_df['Age'] = age_train['Age']	1	1
"titanic_train[""FamilySize""] = titanic_train[""SibSp""] + titanic_train[""Parch""]"	1	1
data.drop(['Name'], axis=1)	1	1
test.describe(include='O')	1	1
comb_data['FamSize'] = comb_data['SibSp'] + comb_data['Parch'] + 1	1	1
X_train['Embarked'] = X_train['Embarked'].fillna(freq_port)	1	1
df.replace({'GroupID':TicketList},  inplace=True)	1	1
"df[""AgeGroup""] = pd.cut(df['Age'], bins=[-2000,0,11,15,18,30,49,59,200], labels=[-1, 11,15,18,30,49,59,200])"	1	1
"train_df[""Embarked""].fillna(""S"", inplace=True)"	1	1
test.loc[(test.PassengerId==j),'Age'] = age.iloc[i,0]	1	1
"train_df.groupby(""family_size_category"")[""survived""].mean().plot()"	1	1
X_num.head()	1	1
train.groupby('Title')['Age'].mean()	1	1
train_df['Embarked'].fillna('C', inplace=True)	1	1
"df_train[""Parch""].plot(bw_method=1, kind='density', color='teal')"	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset['Title']==4), 'Age']=46	1	1
"df_cabin[""Cabin""]=df_cabin[""Cabin""].astype(str).str[0]"	1	1
ytest['Survived']	1	1
value[0]:	1	1
"sns.boxplot( x=train_set[""Pclass""], y=train_set[""Fare""], palette=PClass_palette, showfliers=False)"	1	1
val_features.T.values	1	1
data['Mrs'] = data['Title'].map(lambda x: 1 if str(x) in ['Mrs', 'Mme'] else 0)	1	1
sibsp_data['survived_pct'][np.isnan(sibsp_data['survived_pct'])]=0	1	1
submission.to_csv('titanic_output.csv', index=False)	1	1
res1[1]	1	1
raw_train.join(decks_df)	1	1
dset.groupby(['Ticket', 'Surname'])	1	1
train_dataset.describe(include=['O'])	1	1
df_corr.columns.values:	1	1
titanic_df['Fare'] = titanic_df['Fare'].apply(math.ceil)	1	1
plt.boxplot(preprocessedData)	1	1
train_df['IsAlone'] = 1	1	1
df['SibSp'].value_counts()	1	1
df['Embarked'].fillna(value='NA', inplace=True)	1	1
train['CategoricalFare'] = pd.cut(train['Fare'], 4)	1	1
train_df.ix[(train_df.Fare >= 70),'Fare2'] = 3	1	1
age['Age'][np.isnan(age['Age'])] = train_age_na_random	1	1
combined.drop('Embarked', axis = 1, inplace = True)	1	1
df[['Survived']].groupby(df['Pclass']).mean().plot.bar()	1	1
"df[""F_middle""] = df[""Fsize""].map(lambda s: 1 if 5 <= s <= 7 else 0)"	1	1
dataset['Title']      = dataset['Name'].astype(str).map(lambda x: re.findall('(\w+)\.', x)[0])	1	1
all.Cabin.describe()	1	1
all_data.iloc[:ntrain]	1	1
train_csv.describe()	1	1
test.loc[test['Age'].isnull() & test['NameTitle'].str.contains('Master.'), 'Age'] = 5	1	1
importances.sort_values(by='Average', ascending=False).reset_index(drop=True)	1	1
test_df.drop(['Name','Ticket'], axis = 1, inplace = True)	1	1
df['famwithmr'] = df.groupby(['lastname','famsize'])['Mister'].transform('sum')	1	1
df.drop(target,axis=1)	1	1
train.pivot_table(index='Age_cats',values='Survived').plot.bar()	1	1
df['FareCat'] = pd.qcut(df.FarePP, 4, labels=labels)	1	1
dataset.loc[dataset['Age']>64,'Age_band']=4	1	1
np.max(age)	1	1
train.isnull().sum()/train.isnull().count()*100	1	1
test['Sex'][test['Sex']=='male']=0	1	1
df['Title'] = df['Name'].str.extract(r' ([A-Za-z]+)\.',expand=True)	1	1
test.drop(['PassengerId','Name','Age','Cabin','Embarked','Ticket','Cabin','AgeCohort'], axis=1)	1	1
train_dataset['Sex'] = label_encoder.fit_transform(train_dataset['Sex'])	1	1
"df['total']=train.groupby(""Survived"").size()"	1	1
df_all['Ticket_info'].unique()	1	1
dataset.loc[dataset['Title'] == 'Mr', 'Age'] = dataset.loc[dataset['Title'] == 'Mr', 'Age'].fillna(medians.loc[medians['Title'] == 'Mr']['Age'][2])	1	1
models_df.loc[index, 'Name'] = model.__class__.__name__	1	1
df.loc[df['Cabin'].isnull(), 'WithCabin'] = 0	1	1
df_features['Cabin2'] = df_features['Cabin'].apply(lambda x: dict_cabin2[x] if x in dict_cabin2.keys() else 0)	1	1
df2.copy()	1	1
test_df['Salutation'] = test_df['Salutation'].replace(['Planke,','Don.','Rev.','Billiard,','der','Walle,','Dr.','Pelsmaeker,','Mulder,','Steen,','Carlo,','Mme.','Impe,','Ms.','Major','Gordon,','Messemaeker,','Mlle.','Col.','Capt.','Velde,','the','Shawah,','Jonkheer.','Melkebeke,','Cruyssen,', 'Khalil,', 'y'], 'Other')	1	1
tf['Ticket']	1	1
train_set[['Pclass', 'SibSp', 'Fare', 'Cabin', 'Title', 'FamliySize', 'Alone', 'Age']]	1	1
cvres['mean_test_score'],	1	1
df_test.fillna(df_test.mean())	1	1
train_df['Survived'].groupby(train_df['Cabin_Letter']).mean()	1	1
train_data.groupby(['Parch','Survived']).Parch.count().unstack()	1	1
train['Embarked'] = train['Embarked'].map({'S': 0, 'C': 1,'Q': 2, 'N':3})	1	1
"sex[""Parch""] = np.nan"	1	1
combined['Cabin_num'] = pd.qcut(combined['Cabin_num1'][:891],3)	1	1
titanic_3features.head()	1	1
data.loc[(data['Fare'] > 14.455 ) & (data['Fare'] <= 54), 'Fare']   = 3	1	1
ax[0].plot(df_loss)	1	1
dataset.set_value(rowIndex, 'Age0to4', 0)	1	1
traindf.isnull().head()	1	1
pipelines.append(('RF', RandomForestClassifier()))	1	1
acc_all.append(cv_result)	1	1
df_train_features.loc[:,'ap'+str(i)]=-1	1	1
"titanic[""Age""][np.isnan(titanic[""Age""])] = rand_1"	1	1
"train_data.loc[train_data[""Cabin""].notnull() & train_data[""Cabin""].str.contains(""G""), ""CabinLetterG""] = 1"	1	1
all_data.at[i,'Title'] = 'other'	1	1
x_train.shape,y_train.shape, x_test.shape#,  y_test.shape	1	1
test_df['PassengerId'].reset_index()	1	1
train.Age.fillna(train.Age.value_counts().idxmax(),inplace=True)	1	1
test['NameLength'] = [len(i) for i in test.Name]	1	1
item['PassengerId'] not in survived_passengers and item['FamilyId'] in survived_families:	1	1
train_x['Age'].describe()	1	1
full['CabinCode'].replace(np.NaN, 'U', inplace=True)	1	1
test.drop(['Name', 'Fare', 'Ticket', 'Cabin'], axis=1).head()	1	1
train.drop(['CatAge','CatFare'], axis = 1)	1	1
df.iloc[:, 1:].duplicated().sum()	1	1
"X.loc[X[""Title""].isin(rare_titles), ""Title""] = ""Rare"""	1	1
"submission_df.to_csv(""submission_best_voting.csv"", sep=',')"	1	1
"train_df.groupby(""Sex"")[""Survived""].mean()"	1	1
d['Title']=lbl.fit_transform(d['Title'])	1	1
"_df.loc[i, ""age""] = int(age)"	1	1
"df[""Female""] = df[""Sex""].apply(lambda sex: 0 if sex == ""male"" else 1)"	1	1
test.loc[test['Age'].isna(),'Age'] = 27	1	1
dataset.loc[(dataset['Age'] > 64) , 'Age' ] = 4	1	1
titanic_train_data.loc[titanic_train_data.Cabin.str[0] == 'D', 'Cabin'] = 4	1	1
holdout.head()	1	1
"combined.loc[p,""group_size""] = len(co_travelers)"	1	1
"test_data.drop(""Age"", axis=1)"	1	1
data['PreTkt'] = pd.Series(preTkt)	1	1
survived_df['AgeFill'].hist(bins=max_age / bin_size, range=(1, max_age))	1	1
titanic_df.drop(['Fare'],axis=1)	1	1
raw_test['Title'] = raw_test['Name'].apply(lambda x: extract_title_from_name(x))	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')	1	1
dataset.loc[(dataset['Age'] > 16.336) & (dataset['Age'] <= 24.294), 'Age'] = 2	1	1
train4.drop('Survived', axis=1)	1	1
test_csv.loc[:, 'Age_dummy'] = pd.cut(test_csv.Age, 40, labels=range(1, 41))	1	1
data1['Random_Score'] = 0	1	1
test_dataset['Ageband'] = pd.cut(test_dataset['Age'], 5)	1	1
train['Sex'] == 'female'	1	1
df_train['Age']	1	1
df.notnull().mean().sort_values()	1	1
tmp_regressor.rsquared_adj.astype(float)	1	1
sns.boxplot('Title', 'Age', data=train)	1	1
titanic_train['FamilySize'] = titanic_train['SibSp'] + titanic_train['Parch']	1	1
"solution.to_csv(""nn_sol.csv"", index = False)"	1	1
x.columns.values[dtree_rfe.get_support()]	1	1
train['Adult'] = (train['Age'] > 18).astype(int)	1	1
titanic_df.head(),titanic_df.columns.values	1	1
normalized_train.drop('Survived', axis=1)	1	1
test_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]	1	1
"test.Title.replace(""Dona."", ""Nobility"")"	1	1
temp['Title'] = titles	1	1
le.transform(df[col_name])	1	1
temp.iloc[:,j] = X.iloc[:,j]	1	1
trainOrg['Cabin'] = np.where(trainOrg['Cabin']=='0', 0, 1)	1	1
wholeFitness.append((0, res.iloc[0], res.iloc[1], res.iloc[2]))	1	1
final_output.to_csv('output.csv', index = False, header = ['PassengerId', 'Survived'])	1	1
"tot.replace({""Mlle"": ""Miss"", ""Ms"": ""Miss"", ""Mme"":""Mrs""},inplace=True)"	1	1
"predblend[""meanblend""] = predblend.mean(axis=1)"	1	1
"factors[""t_num_start""]=1"	1	1
"titanic_df[[""Age1"", ""Survived""]].groupby(['Age1'],as_index=False).mean()"	1	1
t_df['person'] = t_df[['Age','Sex']].apply(male_female_child,axis=1)	1	1
Passenger.head()	1	1
"X_train[""Child_col""] = ""NaN"""	1	1
"train.pivot_table(index=""SibSp"",values=""Survived"")"	1	1
d['Fare']=pd.qcut(d['Fare'].astype(int),4)	1	1
train_df[['Name_length', 'Survived']].groupby(['Name_length']).agg(['count', 'mean'])	1	1
"dataset[""Title""]=dataset.Name.str.extract(' ([A-Za-z]+)\.', expand=False)"	1	1
train_df['Age'] = train_df['Age'].replace(dict1)	1	1
"mix_results.loc[index, ""random_for""],"	1	1
dfTrain.drop(['Survived', 'PassengerId'], axis=1)	1	1
test_features['S'] = test_features.Sex.map({'male':1,'female':0})	1	1
submission_df.to_csv('Titanic Predictions 3.csv',index=False)	1	1
"combined.loc[p, ""group_size""] = len(co_travelers)"	1	1
df_train['Embarked'] = df_train['Embarked'].fillna('None')	1	1
k_accuracy_scores.append(accuracyScore)	1	1
data['Deck'] = data.Deck.fillna(0)	1	1
tr_df['Survived']	1	1
test.iloc[i, :]	1	1
train.join(pclass_dummies_train)	1	1
dataset['isCabinG'] = dataset['isCabinLetters'].apply(lambda x: 0 if x != 'G' else 1)	1	1
train['Title']=train['Title'].replace(['Mlle','Mme','Lady','Countess'],'Mrs')	1	1
train_data['SibSp'].isnull().sum()	1	1
df.drop(['Survived'], axis=1), df['Survived']	1	1
titanic['Title'] = titanic['Title'].replace(['Capt', 'Col', 'Major', 'Dr', 'Rev'], 'Officer')	1	1
train['AddPsng'] = train['SibSp'] + train['Parch']	1	1
test_df2.head()	1	1
output['PassengerId'] = test['PassengerId']	1	1
test_df_imputed['IsChild'] = [is_child(row) for row in test_df_imputed.iterrows()]	1	1
"dataset.drop(labels = [""PassengerId"",""Name""], axis = 1, inplace = True)"	1	1
missing_age_train.head()	1	1
df['Name'] = df['Name'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
data.loc[data.Survived<0, cols].copy()	1	1
train.pivot_table(index = 'GroupID', values = 'Survived', aggfunc=[len, np.mean])	1	1
train.keys()	1	1
"train_enc[[""Age"", ""Fare"", ""SibSp"",""Parch"", ""Family_Size""]] = scale.fit_transform(train_enc[[""Age"", ""Fare"", ""SibSp"",""Parch"", ""Family_Size""]].as_matrix())"	1	1
test.loc[((test['Sex'] == 0) & (test['Pclass'] == 3)), 'gender_class'] = 3	1	1
"full.drop([""Parch"", ""SibSp"", 'Name', 'Ticket'], inplace=True, axis=1) # Drop useless columns"	1	1
combine[0].head()	1	1
df_sex.iloc[0,0]/df_sex.iloc[:, 0].sum()*100	1	1
test['Sex'] = test.Sex.map({'male': 0, 'female': 1})	1	1
test['Pclass'].values.reshape(-1,1)	1	1
data['name_len']=data.Name.apply(lambda x:len(x))	1	1
temp.append(loglines[i][0])	1	1
test_d['Title'].value_counts()	1	1
df_test['Pclass']=df_test['Pclass'].astype(object)	1	1
deplicate_ticket.loc[(deplicate_ticket.Family_size > 1) & (deplicate_ticket.Survived.notnull())].head(7)	1	1
potential_Jacks.append(row)	1	1
"testTitanic[""Embarked""] = testTitanic[""Embarked""].fillna(""S"")"	1	1
master_df['Embarked'] = master_df['Embarked'].apply(lambda x: D[x])	1	1
df['Sex']=='female'	1	1
dfpredictions.rename(columns={0:'Survived'}).to_csv('submission.csv', header=True)	1	1
"df.drop([""Embarked"", ""Sex"", ""Ticket"", ""Cabin"", ""Name"", ""PassengerId""], inplace=True, axis=1)"	1	1
p_s.loc[ (p_s['Pclass']<3) & (p_s['Sex']=='female') ,'Survived']=1 # set 1st and 2nd class female survive to 1	1	1
dataset.loc[ dataset['FamilySize'] > 5, 'FamilySize'] = 3	1	1
etc_rfecv.transform(etc_rfecv_test)	1	1
data_copy.loc[data_copy.Sex == 'female', 'Sex'] = 0	1	1
"test['Survived'] = """""	1	1
full['Age'] = full['Age'].replace(1, '0-16')	1	1
test_df.loc[(train_df['Fare'] > 7.91) & (test_df['Fare'] <= 14.454), 'Fare'] = 1	1	1
X_test.as_matrix(), test_csv['PassengerId']	1	1
df.to_csv('prediction-svc.csv',header=True)	1	1
Z.head()	1	1
full['FamilySize'] = full['Parch'] + full['SibSp'] + 1	1	1
numerical_columns.append('TicketGroup_include_surviving_men')	1	1
"dataset['Name'].str.contains(""Miss"", na=False)"	1	1
submission.to_csv('voting_submission.csv', index=False)	1	1
train.drop('PassengerId',axis = 1,inplace = True)	1	1
"related_people.loc[related_people[""PassengerId""]==1041,""RGroup""]=""Lahtinen_M"""	1	1
test['Fare'].median()	1	1
train_X.drop(columns='Ticket')	1	1
ax[5][1].hist(nonsurvivors['Fare'].dropna().tolist(), bins=nbins)	1	1
test_df['Age'] = test_df['Age'].fillna(test_df['Age'].dropna().median()) # Median Age	1	1
x['Age'].map(map_age, na_action=None)	1	1
"df[""pclass_1""] = df[""Pclass""].apply(lambda x : 1 if x == 1 else 0)"	1	1
titanic[['Survived', 'total_members']].groupby('total_members').mean()	1	1
df[2] = data['Fare'].loc[data.Pclass ==2]	1	1
"train_df[""Embarked""].mode()[0]"	1	1
test['Embarked'].fillna(fill, inplace = True)	1	1
data['Embarked'] = data['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)	1	1
titanic_test['Age'] = titanic_test['AgeBand']	1	1
dataset['familysize'] = dataset['sibsp'] + dataset['parch'] + 1	1	1
"train_data[""TitleMajor""] = 0"	1	1
full_set['Age'] = full_set['Age'].interpolate()	1	1
"train[""Cabin""][train[""Cabin""] == ""B""] = 1"	1	1
x_train.iloc[offset:(offset + batch_size), :]	1	1
algo_df.reset_index()	1	1
"test[[""Pclass""]].loc[test[""Fare""].isnull()]"	1	1
dataset.loc[                     dataset['Age']<= 8 , 'Age'] = 0	1	1
"test[""Survived""] = xgb_model.predict(test_data_X)"	1	1
train['Embarked'] = train['Embarked'].map(embark_mapping)	1	1
"test_set[""Familysize""] = test_set[""Parch""] + test_set[""SibSp""]"	1	1
test.to_csv( 'svm_lin_all_feat.csv' , index = False )	1	1
train.drop(['Survived'], axis=1, inplace=False)	1	1
df['Parch'].hist()	1	1
df_train.drop(['PassengerId', 'Ticket'], axis = 1)	1	1
"holdout [""Embarked""] = holdout[""Embarked""].fillna(""S"");"	1	1
"train_data[[""Survived"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare""]]"	1	1
"tpr[""macro""] = mean_tpr"	1	1
data['TicketLength'] = data['Ticket'].apply(lambda x: len(str(x)))	1	1
titanic_data.loc[titanic_data['Fare'] >31,'Fare'] = 3	1	1
pclass_survived.loc[1, 2]	1	1
df.copy().append(df2)	1	1
train_df_numerical.drop('Survived', axis=1)	1	1
rawdata['FareCategory']=0	1	1
pipelines.append(('RFC', RandomForestClassifier(n_estimators = 100)))	1	1
train_df.sort_values(by='Age').describe(percentiles=[.1, .2, .3, .4, .5, .6, .7, .8, .9, .99])	1	1
test_get_dummies.head()	1	1
"df_train.groupby(['Pclass','Title'])[""Age""].mean()"	1	1
holdout.describe()	1	1
data.loc[:, 'Survived':].corr()	1	1
dftrain.drop(['Embarked','Sex'],axis=1)	1	1
"test_set[""Name""] = test_set[""Name""].map(lambda name:name.split(',')[1].split('.')[0].strip())"	1	1
y['Fare']=pd.cut(y['Fare'],bins=[-100,1,10,30,50,100,200,1000],labels=['invalid','least','less','average','abovAvg','High','veryHigh'])	1	1
fare_train.median()	1	1
ticket_table.rename(columns={'Ticket': 'People_on_ticket'}, inplace = True)	1	1
"X_train.loc[X_train.Age >= 18,""Child_col""] = ""Adult"""	1	1
data[['Pclass','Sex', 'Age', 'SibSp', 'Parch', 'Fare']]	1	1
combined_df.Pclass.mean()	1	1
trainnum_norm [3]	1	1
"df['Name'] = df[""Name""].replace(['Mlle','Ms','Miss'],'Miss')"	1	1
"train.drop(labels = [""Survived"", ""PassengerId"", ""DataType""],axis = 1)"	1	1
combined['Sex'] = combined['Sex'].map(sex_mapping)	1	1
"train_data[""Fare""][train_data[""Survived""] == 0]"	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Mlle"", ""Miss"")"	1	1
trainX.values	1	1
"titanic_train.drop([""Pclass""],axis=1,inplace=True)"	1	1
test['Fare']=test['Fare'].fillna(test['Fare'].mode()[0])	1	1
data_train_all['Age'].mean()  # 29.69911764705882	1	1
train_df.groupby(['embarked']).size()	1	1
item['SibSp']	1	1
result_df.Survived.astype('int')	1	1
MLA_compare.loc[row_index, 'MLA Test Accuracy 3*STD']=cv_results['test_score'].std()*3	1	1
pd.isnull(Cabin):	1	1
df_test.drop('Name', axis='columns')	1	1
train2.drop(['Name'], axis = 1)	1	1
"output[""PassengerId""] = test[""PassengerId""].copy()"	1	1
test_data['Singleton'] = test_data['FamilySize'].map(lambda s: 1 if s == 1 else 0)	1	1
"df_test['Embarked'] = pd.Categorical(df_test[""Embarked""])"	1	1
k_value.append(k)	1	1
"Adaboost_result[0][""best_model""],"	1	1
tit_df.copy()	1	1
full['Title'] = full['Title'].replace('Mme', 'Mrs')	1	1
original_data.astype(float).corr(),linewidths=0.1,vmax=1.0,	1	1
titanic_df['Age'].dropna().hist(bins=70, ax=axis1, ls='solid', lw=0.2, ec='black')	1	1
df_submission.to_csv('accountant_titanic_01.csv', index=False)	1	1
"np.round(condition[""Importance""]/sum(condition['Importance'])*100,2)"	1	1
ax[0].set_title('Pclass 1 Fare Distribution')	1	1
cabin['Cabin'] = combined_df.Cabin.fillna( 'U' )	1	1
"train.drop(columns=""survived"")"	1	1
test['Sex_factorized'] = test['Sex'].factorize()[0]	1	1
"in [""l2"", ""l1""]:"	1	1
train_copy.loc[train_copy['Parch'] == 3, 'Parch_Category'] = 3	1	1
"train_df.loc[train_df['Fare']<=102,""Fare""]=0"	1	1
data_frame['Singleton'] = data_frame['FamilySize'].map(lambda s: 1 if s == 1 else 0)	1	1
titanic_df.join(embarkDummy_titanic)	1	1
test_data['missing_values'] = numpy.zeros((len(test_data),1))	1	1
df.loc[df['AgeGroup']<=12, 'AgeGroup'] = 0	1	1
train_df['Sex']= train_df['Sex'].map(sex_mapping).astype(int)	1	1
"age1_df[""Survived""]          #特徴量に対する正解データ"	1	1
titanic_test['SibSp_Y']=(titanic_test['SibSp']>=1).astype(int)	1	1
data_train_csv.loc[data_train_csv['PassengerId'].isin(data_test_split_csv[prediction_split==y_test_split]['PassengerId'].values)]	1	1
df['AgeDec'] = pd.cut(df['Age'], range(0,90,10), labels=range(8))	1	1
df['Age']=df['Age'].fillna(df['Age'].mean())	1	1
train.loc[train['Survived']==0]	1	1
"titanic_training_data.loc[titanic_training_data[""Embarked""]== ""Q"",""Embarked""] = 2"	1	1
df.drop(['Fare'], axis=1, inplace=True)	1	1
train_df.ix[i, 'Familytype'] = 'Big family'	1	1
"y_pred.to_csv(""submission14.csv"")"	1	1
train_df['Fare'].hist()	1	1
axes[0].pie(train_data.groupby(['Pclass'])['PassengerId'].count(),labels = ['3rd Class','1st Class','2ed Class'])	1	1
"data[""FamilySize""].value_counts().index"	1	1
"train_df.groupby([""Cabin_prefix""])[""Cabin_prefix""].agg([""count""]).reset_index()"	1	1
df_test['Sex'] = pd.to_numeric(df_test['Sex'])	1	1
train['family_size'] = train.SibSp + train.Parch	1	1
"total.drop(labels=[""Survived""], axis=1)"	1	1
dataset.loc[dataset['Fare'] > 39.688, 'Fare'] = 4	1	1
test_df.Fare.fillna(test_df.Fare.median(), inplace=True)	1	1
data.loc[(data['Fare'] > 7.8) & (data['Fare'] <= 14.455 ), 'Fare'] = 2	1	1
train['LargeFamily'] = train['FamilySize'].map(lambda s: 1 if 5 <= s else 0)	1	1
Data.groupby(['Title1'])['Age'].mean()	1	1
"models.append((""DecisionTreeClassifier"", DecisionTreeClassifier))"	1	1
test_setup.copy()	1	1
MLA_compare.loc[row_index, 'MLA Time'] = run_time	1	1
"data_df.loc[(data_df[""Fare""] > 14.454) & (data_df[""Fare""] <= 31.275),  'Fare_Grouped'] = 2"	1	1
dataset.loc[fil, 'MisAge'] = 1	1	1
curr_row[0][1]	1	1
data_copy['Age']=data_copy['Age']*np.abs(corr_val['Age'])/total_val	1	1
dataset['title'] = dataset['title'].replace('Mlle', 'Miss')	1	1
i[1].split('. ')[1]	1	1
"all_data[""Fare""] = all_data[""Fare""].fillna(all_data['Fare'].median())"	1	1
test_df['ThirdClass']=test_df[['Pclass']].apply(get_thirdclass, axis=1)	1	1
data_df['Sex'].replace(['male', 'female'], [0,1], inplace=True)	1	1
full_dataset['Fare']=full_dataset['Fare'].astype(int)	1	1
traindf['Survived'].value_counts()	1	1
tit_df_san['Sex'].replace(['male','female'],[1,0],inplace=True)	1	1
df_Survived['Embarked'].value_counts().plot.bar(ax=axes[0]);	1	1
data.surname_Alone.astype('category')	1	1
titanic['Fare'] = titanic['Fare'].fillna(titanic['Fare'].median())	1	1
test[['Pclass','SexF','Age', 'Fare', 'family_is','cabin_is']]	1	1
df.loc[~df.TyTicket.isin(['S', 'P', 'C', 'N']), 'TyTicket'] = 'R'	1	1
dftrain.iloc[:,1:].values	1	1
df.loc[df['Sex'] == 'male','Sex'] = 0	1	1
pid.info()	1	1
train_data.drop(y_columns, axis=1), train_data[y_columns]	1	1
_df.loc[_df.fare == 0, :]	1	1
train_drop.Age.apply(encodeAge)	1	1
dataset.loc[(dataset['Fare'] > 7.854) & (dataset['Fare'] <= 8.05), 'Fare'] = 2	1	1
train_data.drop(['Cabin', 'Fare'], axis=1)	1	1
surv.head()	1	1
output.head(8)	1	1
df['Title'] = df['Name'].apply(lambda x: Title_Dictionary[x.split(',')[1].split('.')[0].strip()])	1	1
df.Alone.astype(int)	1	1
train_data['Parch']	1	1
titanic_df.drop(['Male'], axis=1, inplace=True)	1	1
sns.boxplot(x='Sex_male', y='Age', hue='Survived', data=df3)	1	1
test_data.head(3)	1	1
np.median(ada_score)	1	1
data['Survived'].copy()	1	1
known_age.iloc[:,0]	1	1
train.drop(['Cabin','Ticket','Fare','Name','PassengerId'],axis=1)	1	1
data_full['Titles'].value_counts().nlargest(6).keys()	1	1
train[['Male','Female']] = pd.get_dummies(train['Sex'])	1	1
submission.to_csv('xgboost_submission.csv', index=False)	1	1
"train.drop([""Pclass""], axis=1)"	1	1
"dataset[""Title""] = dataset[""Title""].map(title_mapping);"	1	1
train2['FareBand'] = pd.qcut(train2['Fare'], 4, labels = [1, 2, 3, 4])	1	1
testing_df['Sex_Index'] = testing_df['Sex'].replace(['female', 'male'], [0, 1])	1	1
"test.loc[test[""Sex""]==""female"",""Sex""]=1"	1	1
df['M_C2'] = df['Sex_male'] * df['Pclass_2']	1	1
"data.set_value(i, 'Name', ""Jonkheer"")"	1	1
df['age_T'] = df.apply(lambda x: 2 if (x['Age'] >= 12 and x['age_T'] < 18) else x['age_T'], axis=1)	1	1
"titanic_comb['title'] = titanic_comb['Name'].apply(lambda x: x.split("","")[1].split(""."")[0].strip())"	1	1
"df_data[""Ticket""].head()"	1	1
data['Age'] = data['Age'].map({'Child':1,'Teenager':2,'Adult':3,'Old':4})	1	1
np.mean(df_test['Age'])	1	1
test_df.drop(['Cabin','Ticket'],axis=1)	1	1
curr_row[5]	1	1
train.drop('Name', axis='columns')	1	1
data.loc[ (data.Age.isnull() == True) & (data.Title==titl) , 'Age'] = med[0] # med is a series. must be a scalar	1	1
survived.shape[0]	1	1
df.loc[:, self.column_names]	1	1
test7['Age'] = test7['Age'].fillna(test7['Age'].median())	1	1
df_test[['PassengerId', 'Survived']].to_csv('Decision_Tree_Classification_Fare.csv', index=False)	1	1
data.surname_Goldenberg.astype(np.uint8)	1	1
data_train.loc[data_train['Survived']==0,'Sex'].value_counts()	1	1
en1_test.to_csv('en1_test.csv')	1	1
params_init['objective'] = 'binary'	1	1
ax[0].set_title('Train & Validation Set Accuracy w.r.t to Tolerance tol')	1	1
data.columns.values:	1	1
submission.to_csv('titanic-test-results.csv', sep=',', index=False)	1	1
"train_df.groupby(""embarked"")[""survived""].mean()"	1	1
"test[""Fare""] = test[""Fare""].fillna(data[""Fare""].median())"	1	1
"sns.boxplot(x=""Pclass"", y = ""Age"", data = train)"	1	1
df.ix[df[column] == 1e9, column] = prediction	1	1
df_2['Sex'] = le.transform(df_2['Sex'])	1	1
train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False). mean().sort_values(by='Survived', ascending=False)	1	1
full.join(pd.get_dummies(full['Deck'], prefix = 'Deck'))	1	1
titanic_data.drop(['Sex','Embarked'],axis=1,inplace=True)	1	1
data['FamilySize'] = ''	1	1
test_p['Gender'] = 0	1	1
"Final_submission.to_csv(""out.csv"")"	1	1
np.mean(X_dev_raw,axis=0,keepdims=True)	1	1
data_train['Sex']=data_train['Sex'].cat.codes	1	1
dset['FamCode'] = 0	1	1
df_train['Family_Survival'] = df_full['Family_Survival'][:train_size]	1	1
tr['Title'] =tr['Title'].replace('Lady',2)	1	1
"train.drop(""Survived"", axis = 1)"	1	1
"titanic_df.groupby(['Pclass', 'Embarked'])['Fare'].mean().plot(kind = 'bar', figsize=(10,10) , title=""Mean fare of of each class from each station"").set_ylabel(""Mean Fare"")"	1	1
titanicTrain.iloc[i,3]=p[x]	1	1
merged['Family_Size']=0	1	1
titanic_train['Sex_M']=(titanic_train['Sex']=='male').astype(int)	1	1
"titanic_train[""Sex""].value_counts().plot(kind='bar', figsize=(6, 4), grid=True, color=""#f1b7b0"", title=""Sex"")"	1	1
test.drop('Cabin', 1)	1	1
test_X.values	1	1
"pclass[""Class3""] = (pclass[""Pclass""] == 3).astype(int)"	1	1
dataset_train['Ticket_Initials'] = dataset_train['Ticket_Initials'].apply(lambda x : re.sub('[0-9]','N',x))	1	1
age_count.values,	1	1
combined['Age'].apply(lambda x: 1 if x>=20 and x<=40 else 0)	1	1
"train_data[""FsizeD""] = ""NaN"""	1	1
csv_final_test['Sex'] = csv_final_test['Sex'].map({'female':0, 'male':1}).astype(int)	1	1
df_test['Age'] = df_test[['Age','Pclass']].apply(impute_age, axis=1)	1	1
"dataset[""Title""].replace('Mlle', 'Miss', inplace=True)"	1	1
train.shape # get the shape (columns and rows) of the training data	1	1
X_testTest.head()	1	1
data['AgeBand'] = pd.cut(data['Age'], 5)	1	1
"df[""FullName""]=df[""Name""].map(lambda x: x.split("","")[1].strip())"	1	1
df.loc[df['Survived'] == 1, :].copy()	1	1
test_x.select_dtypes(exclude = ['object'])	1	1
df['AgeDensity'] = df.Age.map(counts)	1	1
dataset.loc[(train['Age'] > 50) & (train['Age'] <= 60), 'AgeGroup'] = 2	1	1
train['Sex']*train['Parch']	1	1
data.groupby(['Survived'])['Embarked'].value_counts()	1	1
df.groupby('Sex')['Survived'].value_counts().unstack()	1	1
pd.merge(childgroup1, parent, how='left', on='Ticket')	1	1
"test[""Child""] = False"	1	1
df.pivot_table(values = 'Survived', index = 'Title').Survived.plot.bar()	1	1
my_submission['producto']=my_submission['PassengerId']*my_submission['Survived']	1	1
test_df['PassengerId'] = data_test['PassengerId']	1	1
test_df.drop(['Sex','Person'],axis=1,inplace=True)	1	1
"X_cat.drop(""Cabin"", 1)"	1	1
knn_test.append(pd.Series(metrics.accuracy_score(y_train,prediction_test)))	1	1
X.eval('FamilySize = SibSp + Parch', inplace=True)	1	1
test.loc[(test['AgeModified']>40) & (test['AgeModified']<=50),'AgeCategorical'] = 4	1	1
test.loc[(test['PaxclassA']==0),'Class1_Premium'] = 1	1	1
dataset['Title']= dataset.Name.str.extract(' ([A-Za-z]+)\.', expand = False)	1	1
df1['Survived'][i]:	1	1
df1['Fare'] = np.where((df1['Fare']>10*i) & (df1['Fare']<=(i+1)*10) ,((10*i) + ((i+1)*10))/2 , df1['Fare'])	1	1
train_data.shape, target.shape #survived를 때서 target값으로 준다	1	1
data.loc[ data['Fare'] > 250 , 'Fare'] = 5	1	1
input_data.loc[(input_data.Cabin.notnull()),'Cabin']=True	1	1
pandasDFname.drop(columns=featureName,inplace=True)	1	1
test['c_mean_s'] = np.log1p(pd.Series(c_mean_scaled, index=test.index))	1	1
titanic_train.set_index('PassengerId')	1	1
survived.to_csv('submission.csv')	1	1
new_train_df['Survived'],	1	1
age_model.add(Dropout(0.2))	1	1
train_df['Deck'] = train_df['Cabin'].dropna().apply(lambda x: str(x)[0])	1	1
data_df.groupby('Pclass').median()['Age'][pclass]	1	1
df_test['is_male'] = pd.get_dummies(df_test['Sex'])['male']	1	1
frame.loc[frame.Embarked=='S','Embarked']=1	1	1
"test[""Sex""][test[""Sex""] == ""female""] = 0"	1	1
df_test.drop(['Name','Cabin','Ticket', 'SibSp', 'Parch', 'IsAlone','Title','Embarked','Age'], axis=1, inplace=True)	1	1
df['sex']           = df['sex'].astype(sex_cat)	1	1
female_class1_class2[['Survived','Class']],index='Survived',columns=['Class'],	1	1
"data[""CabinCount""],"	1	1
df['famsurvcnt'] = df.groupby(['lastname','famsize'])['Survived'].transform('sum')	1	1
df3['Sex'].describe()	1	1
data['FamSize']=data['SibSp'] + data['Parch']+1	1	1
df_test['Title']=df_test.Name.str.extract('([A-Za-z]+)\.')	1	1
test['cabin']=test.Cabin.str[0]	1	1
df_train.iloc[:, 1:].values	1	1
grouped_median_age_train.reset_index()[['Sex', 'Pclass', 'Title', 'Age']]	1	1
"New_Df[""Cabin""] = New_Df[""Cabin""].str.replace(""G"", ""U"")"	1	1
"train5[""Survived""]"	1	1
test_dat.drop(['Cabin', 'Ticket'], axis=1, inplace=True)	1	1
testdata.loc[np.isnan(testdata.Age), 'Age'] = np.mean(data['Age'])	1	1
"family_in_trian.pivot_table(index=[""group_size""],values='Survived').copy()"	1	1
"train[""Embarked""]"	1	1
dataset.loc[(dataset['Age'] == -1) &(dataset['Title'] == 'Mr'), 'Age'] = 32.36	1	1
df.drop(columns, axis = 1)	1	1
data['not_alone'] = data['not_alone'].astype(int)	1	1
model.add(Dense(9, kernel_initializer = 'uniform', activation = 'relu', input_dim = 8))	1	1
df_test[['PassengerId', 'Survived']].to_csv('titanic.csv', index=False)	1	1
train.Survived.astype('int')	1	1
drop_elementsONSWAR.append('hasAge')	1	1
df_test_ml_sc.info()	1	1
y_test['Survived']	1	1
"X_test.drop(""Embarked"",axis=1)"	1	1
test.loc[(test['Family']>1)&(test['Family']<=5),'Family']=1	1	1
"df[""Title""] = titles"	1	1
test_data['Title'] = test_data['Title'].replace('Mme.','Mrs.')	1	1
t['Sex'].replace({'male':1,'female':0})	1	1
dict_param.keys():	1	1
params['svc_grid_search'] = grid_search	1	1
train.drop(['Sex','Embarked','Name','Ticket','Pclass'],axis=1,inplace=True)	1	1
"datacv.set_value(i, 'Name', ""Mme"")"	1	1
df2['Total'] = df2.Survived + df2.Dead	1	1
df.drop(labels=['Name','Title'], axis=1, inplace=True)	1	1
"df[['Survived']].groupby(df['Name'].apply(lambda x: x.split(sep = ',')[1].split(sep = ""."")[0].strip())).mean().sort_values(by=""Survived"").plot.bar()"	1	1
"data.set_value(i, 'Name', ""Capt"")"	1	1
df['Title'] = df.apply(replace_title, axis=1)	1	1
pd.merge(childgroup0, parent, how='left', on='Ticket')	1	1
dataset['FamilySize'] = dataset['FamilySize'].replace([1], 0)	1	1
"dataset.loc[dataset[""Title""] == ""Rare"", ""Title""] = 4"	1	1
"train[['PassengerId', 'Embarked']].groupby(""Embarked"").count()"	1	1
transformed_df['Age_Categorized_Student'] = age.Age_Categorized_Guess_Student	1	1
raw_train.loc[raw_train['Survived']==1, 'Age'].plot(kind='kde', color='blue', label='Survived', legend=True)	1	1
df_test['Family_Survival'] = df_full['Family_Survival'][train_size:]	1	1
df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()	1	1
train_df[['title', 'survived']].groupby(['title']).mean()	1	1
test['Sex'] = [1 if i == 'male' else 0 for i in test.Sex]	1	1
dataset.loc[ (dataset['Age'] > 26 ) & (dataset['Age'] <= 36), 'Age'] = 2	1	1
submission_test.iloc[:, 1:].values	1	1
x.set_value(row.Index,'CP_Surv',len(c[c.Survived==1]))	1	1
df_train.hist(figsize=(10,10))	1	1
"data_train.drop(""Ticket"", axis=1, inplace = True)"	1	1
test_df['Embarked'].fillna('S',inplace=True)	1	1
df.Age.isnull().sum(axis=0) # no more NAN now	1	1
"temp.to_csv(""gender_submission2.csv"",index=False)"	1	1
le.transform(train_c[column])	1	1
WholeDataSet['Age'] = WholeDataSet[['Age','Pclass']].apply(impute_age,axis=1)	1	1
test_X['Age'].isnull().sum()	1	1
Test[ 'Cabin' ] = Test.Cabin.fillna('U')	1	1
testData.loc[(testData.Age.isnull())&(testData.Initial=='Mr'),'Age']=33	1	1
df.loc[df['Age']>55, 'AgeGroup'] = 'Old'	1	1
data.Cabin_Letter_B.astype(np.uint8)	1	1
sns.boxplot(x='Pclass',y='Age',data=train,palette='prism')	1	1
d['Fare']=lbl.fit_transform(d['Fare'])	1	1
train.groupby(['Title'])['Survived'].count()	1	1
train.loc[train['Embarked']=='Q','Embarked'] =3	1	1
feature_importance.sort_values()	1	1
train['Embarked'].values.reshape(-1,1)	1	1
test_data['Sex'] = LabelEncoder().fit_transform(test_data['Sex'])	1	1
"df.drop(""Ticket"", axis = 1, inplace = True)"	1	1
"df.loc[pid,""NickName""] = m.group(5).strip()"	1	1
test_one['Survived'][test_one['Sex']=='female']=1	1	1
train_df['Age'].fillna(age_count.argmax(), inplace=True)	1	1
"StackingSubmission.to_csv(""../input/parameter_tune_vc.csv"", index=False)"	1	1
sns.boxplot(x='Pclass',y='Age',data=train,ax=ax[0,3])	1	1
submission['Survived'] = np.int32(np.round(submission['Survived']))	1	1
np.sum(trainData['Fare'])/trainData['Fare'].count()	1	1
data_copy.Pclass.fillna(data.Pclass.mean())	1	1
"age0_df[[""Pclass"",""SibSp"",""Parch"",""Gender"",""EmbarkedInt""]]         #特徴量のデータ"	1	1
data.iloc[:,cols-1:cols]	1	1
final_train[['Survived']].copy()	1	1
x_train['Family'] = x_train['SibSp'] + x_train['Parch']	1	1
"results.to_csv(""titanic_clf_results.csv"", index=False)"	1	1
df_train['Parch'].unique().tolist():	1	1
np.where(test['Age'].isnull())#same for test data	1	1
models['set4']['cat_encode'] = 'LabelEncoder'	1	1
titanic1.shape	1	1
"train[""CabinBool""]=(train[""Cabin""].notnull().astype('int'))"	1	1
"np.where(dataset[""Cabin""]==""E"",1,0)"	1	1
training_data[['Age', 'Survived']].groupby(['Age']).mean()	1	1
np.empty((batch_size, x_train.shape[1]), dtype='float32')	1	1
curated_data.loc[ train['Fare'] <= 30, 'Fare'] = 0	1	1
titanic_df['Fare'].plot(kind='hist', figsize=(9,3),bins=100, xlim=(0,50))	1	1
numerical_columns.append('TicketMembers')	1	1
data.copy(deep=True) # deep copy	1	1
sns.boxplot(y='Age',x='Survived',data=train,ax=ax2)	1	1
final_prediction_int.astype(int)	1	1
train['FamilySize'] = train['SibSp'] + train ['Parch']	1	1
df['Se_Cl'] = 0	1	1
test.loc[(test.Age.isnull())&(test.Initial=='Other'),'Age']=46	1	1
"o[""Survived""]"	1	1
df.drop(['Age'], axis=1)	1	1
df['Family_bins'] = pd.cut(df['Family_size'], bins=[0, 1, 3, df['Family_size'].max()])	1	1
df['no_cabin'] = no_cabin	1	1
df_age_test.shape	1	1
train_df[['Title','Age']].loc[train_df['Age'].notnull()].groupby('Title').mean()	1	1
cv_means.append(cv_results.mean())	1	1
cabinCode.append(row[1])	1	1
in ['PassengerId', 'Pclass', 'Age', 'SibSp','Parch', 'Fare']:	1	1
full['Cabin'].unique()	1	1
full['SibSp'] + full['Parch'] + 1	1	1
logistic_submission.to_csv('submission.csv', index=False)	1	1
"fpr[""micro""], tpr[""micro""],"	1	1
test_data['Age']=test_data[['Age','Pclass']].apply(impute_age,axis=1)	1	1
train.loc[train.Fare <= 67,'Fare'] = 1	1	1
train_data.loc[out2]	1	1
test.loc[test['Cabin'].str.len() == 7.0, 'CabinL'] = test['Cabin'].astype(str).str[0]	1	1
"t_data['Name_pred'] = t_data['Name_pred'].replace(""Ms"", ""Miss"")"	1	1
test_data.loc[test_data.Age.isnull(),'Age'] = test_data.Age.median()	1	1
Y_dev.T	1	1
df['Age'] = df['BinnedAge'].astype(int)	1	1
age_cate_test.append(ap)	1	1
X_temp.shape	1	1
data_y.append(y)	1	1
allset.loc[allset['Age']>60,'AgeBand']='Seniors'	1	1
titanic_df.drop('Cabin',axis=1,inplace=True)	1	1
"submission.to_csv(""titanic_predict_RF.csv"", index=False)"	1	1
df_train['hasAge'] = df_train['Age'].isnull().apply(lambda x: 0 if x == True else 1)	1	1
"data[""Age""] = data[""Age""].fillna(data[""Age""].median())"	1	1
"test.loc[test[""Sex""] == 'male', 'Sex'] = 0"	1	1
"titanic_test_dataframe[""Embarked""]"	1	1
enc.transform(y).toarray()	1	1
titanic_train_data.loc[titanic_train_data.Cabin.str[0] == 'F', 'Cabin'] = 6	1	1
data_test['Sex']=data_test.Sex.apply(f)	1	1
df['Minor'] = 0	1	1
df_train.loc[:, ['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
test['Title']=test['Name'].map(lambda x: substrings_in_string(x, title_list))	1	1
titanic.loc[(titanic['Age']>30.00)&(titanic['Age']<=40.00),'NAge']=3	1	1
"test_df[""Fare""] = test_df['Fare'].astype(int)"	1	1
train_df['Port'] = train_df.EmbarkedFill.map( lambda x: Ports_dict[x]).astype(int)	1	1
test_df['Title']=test_df['Name'].apply(get_title)	1	1
titanic_train['PTitle'] = Title	1	1
ax[0].set_title('Histogram of Fare (survived)')	1	1
dataset['Cabin'] = dataset['Cabin'].apply(lambda x: 'X' if pd.isnull(x) else x[0])	1	1
train_df.drop(columns = ['Survived'])	1	1
"train_df[""Survived""][801:]"	1	1
ms.append(m[m.Title == k].Survived.sum())	1	1
"test.drop(labels = [""Ticket""], axis = 1, inplace = True)"	1	1
submission.to_csv('my_submission.csv', index=False)	1	1
k.append('Miss.')	1	1
raw_train['LogFare'].plot(kind='kde', style='k--')	1	1
test.columns.get_values().tolist()	1	1
y[0]	1	1
df_all['Title'][df_all.Title=='Jonkheer'] = 'Master'	1	1
np.std(1 - val_scores, axis = 1)	1	1
"all_data[""CabinCount""].max()"	1	1
smoothed_points.append(previous * factor + point * (1 - factor))	1	1
"plt.rcParams[""font.weight""] = ""bold"""	1	1
model_cat.add(Dense(16, activation='relu'))	1	1
data['Sex']=data['Sex'].transform(lambda s: 0 if s=='female' else 1)	1	1
output.to_csv('titanic-DecisionTree.csv', index = False)	1	1
titanic_data['C'] = embarked_dummy.C	1	1
test.loc[(test.Age >= 35) & (test.Age < 50),'Age'] = 4	1	1
names.loc[(names.sum(1)>1),'mrs'] = 0	1	1
np.max(orig_fares)	1	1
titanic.loc[titanic['Embarked']=='S','Embarked']=0	1	1
df_full.loc[mask_valid].drop(columns=base_columns)	1	1
dataset_df['FamilySize'] = dataset_df['Parch'] + dataset_df['SibSp']	1	1
rawdata['Survived'][rawdata.Survived == 1].count()	1	1
df_train['Age'].isnull().sum()	1	1
data['FirstName'] = data['Name'].str.split('.').str.get(1)	1	1
test.drop(columns=['Name','Age','Fare'], axis=1, inplace = True)	1	1
train['GroupID'] = train.apply(lambda row : str(row[8][:-1]) + '-' + str(row[2]) + '-' + str(row[9]) + str(row[10]), axis = 1)	1	1
copy.copy(X_val)	1	1
"df.query(""{} == {} and {} == {}"".format(column2, k, column1, m))"	1	1
"train.loc[(train[""Age""] > 64), ""age_c""] = ""5"""	1	1
test_df[['Age','Sex','Pclass']].values	1	1
result_test8.to_csv('submission.csv', columns=['PassengerId', 'Survived'], index=False)	1	1
"df_train[""Sex""] = df_data[""Sex""][:891]"	1	1
X[['Age','Sex']].apply(mapAgeToCategory, axis=1)	1	1
train.loc[train['Family size']==1, 'isAlone'] = 1	1	1
"original_train[""Fare""].describe()"	1	1
combined_data.drop('SibSp',axis=1,inplace=True)	1	1
deplicate_ticket.loc[(deplicate_ticket.FamilySize > 0) & (deplicate_ticket.Survived.notnull())].head(7)	1	1
ax[5][0].hist(survivors['Fare'].dropna().tolist(), bins=nbins)	1	1
df['Name'].str.contains('Mr\.')	1	1
"train_df.pivot_table(index=""Sex"",values=""Survived"")"	1	1
titanic_test['Survived'] = None	1	1
train.groupby(['Title'])[['Survived']].count()	1	1
"titanic_train.loc[titanic_train[""Sex""]==""female"", ""Sex""] = 1"	1	1
ss2.transform(train_data_X)	1	1
df['Ticket'] = le.fit_transform(df['Ticket'])	1	1
train_data.join(train_data['FName'].str.split('.', 1, expand=True).rename(columns={0:'Title', 1:'FirstName'}))	1	1
dfTrain['Survived'].groupby(pd.qcut(dfTrain['Age'], 5)).mean()	1	1
classifiers.append(GradientBoostingClassifier(random_state=seed))	1	1
"data[""TicketClean""] = data[""TicketClean""].apply(pd.to_numeric)"	1	1
combine['LuckyMary'] = np.where((combine['FirstName']=='Mary'),1,0)	1	1
Xy[0]	1	1
data[['Name']]	1	1
test_x.copy()	1	1
df['CapFamSize'] = df['FamilySize'].clip_upper(LargeFamilySize)	1	1
train_df_numerical['Survived']	1	1
dataset.loc[(dataset['Age'] > 12) & (dataset['Age'] <= 16), 'Age'] = 2	1	1
"train_df.drop(""Ticket"", axis=1, inplace=True)"	1	1
"submission.to_csv(""titanic_predict_highwaynn.csv"", index=False)"	1	1
submit.to_csv('submit_titanic.csv')	1	1
df_train['FarePPBin'] = pd.qcut(df_train['FarePP'], 4)	1	1
X_train.iloc[train_idx]	1	1
data_train['Name_length_Band'] = pd.qcut(data_train['Name_length'], 6)	1	1
test_df.Age.fillna(median_age)	1	1
df_var2['cabin_is'].values[i-1] = '0'	1	1
train_GP.astype('float')	1	1
train_df[['Age', 'Pclass', 'HasCabin', 'FamilySize']].corr()	1	1
"title_dict[""MR""] = 0"	1	1
"df[""Fare""] = df[""Fare""].fillna(-0.5)"	1	1
dfTest['Cabin'] = dfTest['Cabin'].fillna('znan')	1	1
"processed_features.drop(""PassengerId"",axis=1)"	1	1
train['family']=train['SibSp']+train['Parch']	1	1
test_X.drop(columns='Cabin')	1	1
df_tmp['Age'].mode().values[0]	1	1
"train_data.drop(""Title"", axis=1, inplace=True)"	1	1
"train_data.loc[train_data[""Age""] < 4, ""Baby""] = 1"	1	1
X2test['Embarked'] = X2test['Embarked'].replace(to_replace=['S', 'C', 'Q'], value=[0, 1, 2])	1	1
df_all['Cabin']=df_all['Cabin'].notnull().astype('int')	1	1
test_x.drop('Cabin',1,inplace=True)	1	1
"df.loc[(df.ischild == 0)&(df.Age.isna()), ""Age""] = idx[np.searchsorted(cum, np.random.random(na))]"	1	1
tmp_scaled.copy().drop(['Survived','Age','Embarked'], axis=1).values	1	1
full_dataset.Title.replace(to_replace = ['Dr', 'Rev', 'Col', 'Major', 'Capt'], value = 'Officer', inplace = True)	1	1
X.drop(drop, axis=1, inplace=True)	1	1
final_test['Family'] = final_test['SibSp'] + final_test['Parch'] + 1	1	1
train_data['Cabin'].head(5)	1	1
rawdata.ix[rawdata.Age > 51, 'AgeCategory'] = 4	1	1
"output.sort_values(by=""Score"", ascending=False)[:5]"	1	1
test_data['Embarked'].unique()	1	1
combined['Ticket'].unique()	1	1
test.drop(['Embarked'], axis = 1, inplace = True)	1	1
df.dropna(subset=['Age', 'Parch'])	1	1
titanic_data['Embarked'].fillna(method = 'bfill', axis = 0)	1	1
df['CategoricalFare'] = pd.qcut(df_train['Fare'], 4)	1	1
test_df.loc[test_df['Title'] == 'Mlle', 'Title'] = 'Ms'	1	1
"validation_set[""Survived""]"	1	1
"data.loc[data['Survived']==0,""Age""].dropna()"	1	1
whole.set_value([70,1268],'Fid',68) #display(whole[whole.Name.str.contains('Kink')])	1	1
"df[""Name""].str.extract(' ([A-Za-z]+)\.',expand=False).map(titles)"	1	1
training.dtypes	1	1
t.head()	1	1
drop_elementsNMD.append('isCabinC')	1	1
sb.boxplot(dataset['Embarked'],dataset['Age'])	1	1
"t_df[""Survivor""] = t_df.Survived.map({0: ""no"", 1: ""yes""})"	1	1
data['RelationsOnBoard']=  data.apply(relations_onboard, axis=1)	1	1
le1.transform(xText.Embarked)	1	1
cnt_srs['Survived'].values[::-1],	1	1
curated_data.loc[ train['Age'] <= 16, 'Age'] = 0,	1	1
titanic_df['Age'].dropna().astype(int)	1	1
age_df.loc[age_df.Age<15,'AgeGroup'] = 'Children'	1	1
temp_data.append((threshold, count_tp, count_fp, count_tn, acc, my_tpr, my_fpr))	1	1
"plt.rcParams[""axes.labelweight""] = ""bold"""	1	1
df_pred.head()	1	1
trainX['Survived']	1	1
train_dummy.head()	1	1
data.Embarked_Q.astype('category')	1	1
test_data.loc[test_data.Age.isnull(), 'Age'] = test_age_rand	1	1
train['Embarked'] = embark.map({'S': 1, 'C': 2, 'Q': 3}).astype(int)	1	1
Z.drop(['PassengerId','Ticket','Cabin','Name'],axis = 1,inplace=True)	1	1
df_train['Age'].describe()	1	1
"survival_ratios[""Overall""] = overall_survival_ratio"	1	1
df['CabinCode'] = df['Cabin'].astype(str).str[0]	1	1
all_data.Fare.fillna(all_data.Fare.mean(), inplace=True)	1	1
data_train1.corr().sort_values(by='Survived', axis=0, ascending=False).Survived	1	1
titanic_df['Alone'].loc[titanic_df['Alone']==0]='Alone'	1	1
train_csv['Survived']	1	1
dataframe.join(gender_dummy)	1	1
layer_dims[2], activation='relu',	1	1
data_test.Fare.fillna(data_test.Fare.mean(),inplace=True)	1	1
df.loc[ df['Age'] <= 16, 'Age']                     = 0	1	1
train['CheapTickets'] = 0	1	1
result['probability'] = np.array([item['probabilities'][1] for item in validation_probabilities])	1	1
df['LogFare'] = df['Fare'].apply(np.log).round().clip_upper(5)	1	1
titanic['AgeCategory'] = titanic['Age'].apply(lambda x: 'Infant' if x < 1.0 else('Child' if x < 10.0 else('Adult' if x < 75 else 'OldAged')))	1	1
"plt.hist(np.log10(nosurv['Fare'].values + 1), histtype='step', color=""blue"", normed=True, bins=25)"	1	1
df['Alone']= (df.Family<=1).as_matrix().astype(int)	1	1
combined_df.groupby(by=['Pclass', 'title']).agg({'Age':['median','count'], 'Survived' : 'mean'})	1	1
"test[""Age""][np.isnan(test[""Age""])]=test_age"	1	1
train[['Parch', 'Survived']].groupby(['Parch'], as_index = False).mean().sort_values(by = 'Parch')	1	1
names.loc[(names['mr']>1),'mr'] = 1	1	1
train[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True);	1	1
df_train['Cabin'].unique(), df_test['Cabin'].unique()	1	1
a.head()	1	1
titanic_df['Age1'] = titanic_df[titanic_df['Age1'] < 60]	1	1
dataset['AgeBand']=dataset.AgeBand.astype(int)	1	1
test['Cabin'].unique()	1	1
df_test.iloc[0:10, :]	1	1
train['Embarked'][train['Embarked']=='S']=0	1	1
"output[""Survived""] = Y"	1	1
data['Title']=data.apply(standardize_title, axis=1)     # axis = 1 : apply function to each row	1	1
"submission.to_csv(""titanic_survival_prediction_CATBOOST_MODEL.csv"", index=False)"	1	1
df[['lang','Name']].groupby('lang').count().rename(columns={'Name':'count'})	1	1
"ALL_DATA[""Ticket""].head()"	1	1
full.set_value(1044,'Fare', 7.925); # we set average for this values	1	1
grouped.mean().unstack()	1	1
copy_df.head()	1	1
train.Embarked.fillna('S',inplace=True)	1	1
axs[1].legend()	1	1
test_df.drop(['Parch'],axis=1,inplace=True)	1	1
submission.drop(labels='Name', inplace=True, axis=1)	1	1
models.sort_values(by='Valid Acc', ascending=False)	1	1
train_data.values[:, :-1]	1	1
train_data.groupby(['Sex','Survived']).Sex.count().unstack()	1	1
"training_df.loc[:,[""Survived"", ""Pclass"", ""Sex"", ""SibSp"", ""Age"", ""Parch"", ""Embarked""]]"	1	1
train_dataset['Title'].replace(['Lady','Countess','Capt','Col','Don','Dr','Major','Rev','Sir','Jonkheer','Dona'],'Rare',inplace=True)	1	1
df_train['AgeBinCode'].unique()	1	1
train['Age'] = train.groupby(['Greeting', 'Sex'])['Age'].transform(lambda x: x.replace(np.nan, x.median()))	1	1
"data.set_value(i, 'Name', ""Mrs"")"	1	1
test_df.drop(drop, axis=1)	1	1
test_data_clean_features['ParentsChildren'] = test_data_clean_features['ParentsChildren'].apply(lambda x: 1 if x > 0 else 0)	1	1
df[['mean_test_score', 'std_test_score', 'mean_train_score', 'std_train_score', 'params']]	1	1
test['Age1'] = test.apply(f, axis=1).astype('category')	1	1
best_gradientboost.best_params_.get('min_samples_split'),	1	1
data.loc[(data['Age']>64)&(data['Age']<=80),'Age_band']=4	1	1
"dataset.loc[(dataset[""Age""]<=18), ""Age""] = 0"	1	1
df[['Pclass', 'Title', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Embarked']].values	1	1
X_features_test.drop(['PassengerId','Survived','Name','Sex','Ticket','Cabin','Embarked'],axis=1)	1	1
full_data.Fare.fillna(full_data.Fare.median(), inplace=True)	1	1
train.loc[train['Age'] >= 14.0, 'ageCat'] = 4	1	1
test_raw['train'] = 0	1	1
train.loc[train['Fare']<50,'Fare'].hist()	1	1
df['Age_Scaled'] = scaler.fit_transform(df.Age.reshape(-1,1), age_scale_param)	1	1
"test.drop(labels=""PassengerId"", axis=1).values"	1	1
merged.loc[merged['Fare']<=7.91,'Fare_cat']=0	1	1
trainONS.shape[0]	1	1
Age_ML_Summary.transpose()	1	1
df_age.loc[(df_age['Age'] > 36) & (df_age['Age'] <= 62), 'Age'] = 3,	1	1
df_test['SibSp'] + df_test['Parch'] + 1	1	1
X_train.iloc[train,:]	1	1
"data_dum.iloc[891:].drop(""Survived"", axis=1)"	1	1
titanic_df.head(3)	1	1
train_df[['Title', 'Survived']].groupby(['Title']).agg(['count', 'mean']).sort_values(by=[('Survived','mean')], ascending=False)	1	1
df_submission['cabin'].fillna(value='none', inplace=True)	1	1
"train[""Survived""].iloc[train_tmp]"	1	1
X_final_test['Name_len'] = X_final_test['Name_len'].apply(lambda x: len(x))	1	1
ax[1].set_title('Model Build Time w.r.t to Tolerance tol')	1	1
row['Age'] <= 16 and row['Pclass']<=2:	1	1
"sns.boxplot( x=""Title"", y=""Age"", data = train);"	1	1
dfte['Name']	1	1
"data[""Relatives""] = data[""Parch""] + data[""SibSp""]"	1	1
test_csv['Sex_Pclass'] = test_csv.Sex + '_' + test_csv.Pclass.map(str)	1	1
t_nShare.isnull()	1	1
df_num.median().values	1	1
test_df.loc[test_df['Age'] <= 21, 'Age'] = 0	1	1
data.drop(columns=DROP_COLUMNS, inplace=True)	1	1
df_copy.corr()	1	1
train_X['Embarked'].head()	1	1
X.loc[row,'Cabin'].startswith('G'):	1	1
test_isnull.style.format({'% of Missing Data': lambda x:'{:.1%}'.format(abs(x))})	1	1
models.append(('NB', GaussianNB()))	1	1
data_test.drop(['PassengerId', 'Age', 'Ticket', 'Fare', 'Cabin', 'FarePP'], axis = 1)	1	1
gender_survival['Survived'].plot.bar()	1	1
test_df.drop('Age', 1, inplace=True)	1	1
combine.ix[(combine['Age'].isnull())&(combine['Pclass']==2)&(combine['Sex']=='male'),'Age'] = 30	1	1
all_data['Age'].loc[~pd.isnull(all_data['Age'])]	1	1
train_set.append(test_set)	1	1
"df_train.loc[((df_train[""title""]==""miss."") & (df_train[""Age""].isnull()==True)).tolist(),'Age']=avg_miss"	1	1
entire['Age_category'] = categ_age[0]	1	1
data['FirstName'] = data['MaidenFirstName'].fillna(data['FirstName'])	1	1
temp_df.drop(i_col, axis = 1, inplace = True)	1	1
df['Fare_category']=0	1	1
"test_data[[""Pclass"",""Sex"",""Age"",""Family"",""Fare-bin"",""Embarked"",""Ticket_1"",""Ticket_2"",""Ticket_3"",""Ticket_4"",""Ticket_C"",""Ticket_P"",""Ticket_S"",""Master"",""Miss"",""Mr"",""Mrs"",""Others""]]"	1	1
scaler.transform(test_set0)	1	1
ypred.round().astype(int)	1	1
test.join(person_dummies_test)	1	1
"merged_df['Name'].str.split("", "", expand=True)[1]"	1	1
np.mean(train['Survived'][train['SibSp']!=0])	1	1
titanic.drop(titanic_train.columns[1], axis=1)	1	1
my_data.drop('Survived',axis=1)	1	1
"dataset[""Cabin""] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in dataset['Cabin']])"	1	1
dataframe['FamilySize'] = dataframe.FamilySize.fillna(-0.5)	1	1
df['Pc1'] = (df['Pclass']==1).astype(int)	1	1
n_cluster.append( data.Ticket_Code.unique().shape[0] )	1	1
"test[""Survived""].head()"	1	1
test_accuracy.append(adaboost2.score(x_dev2, y_dev2))	1	1
"total.loc[index, ""Age""] = p_age"	1	1
test_data.std(axis=0)	1	1
all_data.loc[i].at['Title'] in title_mapping:	1	1
comb_data['FamSize'] = comb_data['FamSize'].astype('category')	1	1
famsize.values.flatten()	1	1
"train_df.drop(""Survived"", axis = 1)"	1	1
csv.rename('sample', 'gender_submission')	1	1
passenger['Age']<16:	1	1
data['Title'] = list(map(extract_maritial, data['Name']))	1	1
x_test['FamilySize_7'] = x_test['FamilySize'].apply(lambda x: 1 if x == 7 else 0)	1	1
train.loc[ train['Age'] <= 5, 'Age'] = 0, #Baby	1	1
"all_data[""Cabin""] = all_data[""Cabin""].fillna(""None"")"	1	1
X2['Embarked'][i] = 0	1	1
join.iloc[891::]	1	1
train.reset_index(inplace=True)	1	1
"test[""Fare""] = test[""Fare""].map(lambda i: np.log(i) if i > 0 else 0)"	1	1
train2['Embarked_Number']=train2['Embarked_Number'].fillna(3)	1	1
"titanic_train_dataset[""CabinFloorScore""].loc[titanic_train_dataset['CabinFloor'] == ""T""] = 7"	1	1
"data_df[""Fare""] = data_df[""Fare""].map(lambda i: np.log(i) if i > 0 else 0)"	1	1
tdf['age_cat'] = pd.cut(tdf.age, np.arange(0, raw.age.max()+1, 5)).cat.codes	1	1
test4.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
"test.loc[test[""Sex""]==""female"", ""Sex""] = 0"	1	1
result.to_csv('Submission.csv',index=False)	1	1
"train.loc[train[""Name""].str.contains(""Miss""), ""Title""] = ""Miss"""	1	1
titanic_survival_data.reindex( np.random.permutation( titanic_survival_data.index ) )	1	1
re.sub('[^A-Z]', '', t)	1	1
"submission_df.to_csv(""submission_best_svc.csv"", sep=',')"	1	1
test.loc[test['Cabin'].str.len() == 15.0, 'CabinN1'] = test['Cabin'].astype(str).str[1:3]	1	1
ax2.spines['right'].set_visible(False)	1	1
test_df.drop(['Pclass'],axis=1)	1	1
row['Sex'] == 'male' and row['Pclass'] < 3 and row['Fare'] < 10:	1	1
"sns.boxplot(x = 'Embarked',y=""Fare"",hue='Pclass', data = df_train);"	1	1
embarked.corr()	1	1
submission.append('{0},{1}'.format(id, int(prediction)))	1	1
x_test['IsAlone'].loc[x_test['Family'] > 0] = 0	1	1
"sns.boxplot( x=""Embarked"", y=""Age"", data = train);"	1	1
dataset_test.drop(drop_elements, axis = 1)	1	1
np.round(knn.score(X_train_norm, Y_train), 4)	1	1
test[['Pclass','Age', 'Embarked', 'SibSp', 'Cabin', 'Sex']]	1	1
accuracy_ls.sort_values(by='accuracy', ascending=False, inplace=True)	1	1
t.shape	1	1
data.sons.loc[data.PassengerId==915] = 1	1	1
age_bands[0] = 0	1	1
dataset['Embarked'] = label.fit_transform(dataset['Embarked'])	1	1
"sns.boxplot(y = ""Age"", x = ""SibSp"", data = X_train, palette = ""muted"")"	1	1
test ['Embarked'] = test['Embarked'].fillna('S')	1	1
"test.loc[train[""Embarked""] == ""C"", ""Embarked""] = 1"	1	1
ds['FamilySize'] = ds['SibSp'] + ds['Parch'] + 1	1	1
"full[""Ticket""] = full.Ticket.apply(transform_tickets)"	1	1
raw.head()	1	1
np.mean(X_train_raw,axis=0,keepdims=True)	1	1
testset.drop(testset.columns[[0, 2, 7, 9, 10]], axis=1, inplace=True)	1	1
"np.where(dataset[""Cabin""]==""C"",1,0)"	1	1
X_test.drop('Survived',axis = 1)	1	1
"datacv.set_value(i, 'Name', ""Countess"")"	1	1
train_df[['Title', 'Sex', 'Age']].groupby(['Title', 'Sex'], as_index=False).min()	1	1
titanic_test.Fare.mean()	1	1
entire['Fare_category'] = categ_fare[0]	1	1
non_missing_data2.iloc[:,[2]].values	1	1
d_res_rf.sort_values(by=['val_score','std_test_score'],ascending=[False,True],inplace=True)	1	1
X_train['Cabin'] =X_train['Cabin'].fillna('0')	1	1
test['Fare'][x] = round(train[train['Pclass'] == pclass]['Fare'].mean(), 4)	1	1
df.loc[(df['Age']>61)&(df['Age']<=70),'Age_band']=6	1	1
train_df[['Pclass', 'Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
model_num.add(Dense(8, activation='relu'))	1	1
"train_df.pivot_table(index=""SibSp"",values=""Survived"")"	1	1
"sub.to_csv(""Submission_FAI.csv"", index=False)"	1	1
dataset['age_quantile'] = pd.qcut(dataset['Age'], 10, labels=False)	1	1
"sns.boxplot( x=test_set[""Pclass""], y=test_set[""Fare""], palette=PClass_palette, showfliers=False)"	1	1
age['Age'] = age_combine	1	1
featstats.sort_values('featimp', ascending=True)	1	1
dataset_train['Age'][dataset_train.Age.isnull()] = np.random.randint(high=age_mean+age_std,low=age_mean-age_std,size=len(dataset_train['Age'][dataset_train.Age.isnull()]))	1	1
test.loc[(test.Fare > 67) & (test.Fare <= 135),'Fare'] = 2	1	1
df['Title'] == 'Dr'	1	1
test_df['Age'].fillna(train_df['Age'].median(), inplace=True)	1	1
"test_df.loc[test_df[""Age""]<=16,'Age']=0"	1	1
output['Survived'] = regr.predict(x_test)	1	1
"data_copy.loc[:,""Embarked""] = data_copy[""Embarked""].fillna(""S"")"	1	1
train['Cabin'] = train['Cabin'].fillna(value=' ')	1	1
input_df['Age'].hist(axes=axes[1], bins=15, density=True)	1	1
df_test_features.iloc[:,7]:	1	1
test['Fare'].fillna(test.Fare.median(), inplace=True)	1	1
"dataset['Name'].str.contains(""Master"", na=False)"	1	1
T.style.background_gradient(cmap='rainbow')	1	1
valid_df.copy()	1	1
train['Class1'] = 0	1	1
data.shape[0] # number of entries	1	1
df['Title'] = title	1	1
"copy[""Age""].median()"	1	1
df_test.sample(4)	1	1
"df_train[""age_norm""].hist()"	1	1
test_set.drop('Fare', axis=1)	1	1
X_test['Embarked'].fillna(X_test['Embarked'].mode()[0], inplace=True)	1	1
"df_train.drop([""Survived""] , axis = 1)"	1	1
"X[""Survived""].values"	1	1
sub.to_csv('ticket_only_knn.csv', index = False, float_format='%1d')	1	1
df_test['Fare'] = df_test['Fare'].fillna(fare_median)	1	1
train['had_Parch'] = 0	1	1
rf_feat_red.transform(rf_final_test)	1	1
"dataframe2[""PassengerId""]= dataframe[""PassengerId""] / 200 #normalization"	1	1
titanic.fillna(-999)	1	1
output.to_csv('../working/submission.csv', index=False)	1	1
"X.select_dtypes(exclude=[""object""])"	1	1
accuracy['logistic_regression_second_level']	1	1
test_df['Age'][np.isnan(test_df['Age'])]=test_rand_ages	1	1
X_test.shape, y_test.shape	1	1
results_df['predictions'] = list(predictions)	1	1
df_test['Title'] = ''	1	1
df[['Age', 'SibSp']].notnull().all(axis=1)	1	1
df_output[['PassengerId','Survived']].to_csv('titanic_pred.csv',index=False)	1	1
"data.drop([""Ticket""],axis=1)"	1	1
data_train_csv.describe()  #Generates some descriptive statistics	1	1
"train_df[""Age""].dropna(),"	1	1
train_df.Age.fillna(train_df.Age.mean(), inplace=True)	1	1
train['Fare'].apply(map_fare)	1	1
train_data['Age'].iloc[i] = age_med	1	1
tf.add(tf.matmul(W5, A4), b5) # Z2 = np.dot(W2, a1) + b2	1	1
"test_df[""Age""].fillna(28, inplace=True)"	1	1
sns.boxplot('Title', 'Parch', data=df, ax=ax4)	1	1
pred_list.append(str(a)[1:][1:2])	1	1
cabin_only.head()	1	1
imp.transform(train_float)	1	1
"dftest[""Age""].copy()"	1	1
dataset['Fare'].hist(density=True)	1	1
X_all.hist(bins=10,figsize=(9,7))	1	1
data.drop(fDrop, axis=1)	1	1
result_params.Vdata['Class']# to inspect the network	1	1
df['isKid'] = 0	1	1
iris.head()	1	1
df_titanic['Embarked'] = labelEncoder.fit_transform(df_titanic['Embarked'])	1	1
"New_Df[""Has_Cabin""] = [0 if pd.isnull(x) else 1 for x in New_Df[""Cabin""]]"	1	1
dataset['FamilyClass'] = dataset['FamilyClass'].astype(int)	1	1
tmp_data_df['AgeBin'].replace(np.NaN, -1, inplace = True)	1	1
age_fare.head()	1	1
train.Age.fillna(-5, inplace=True)	1	1
a['Title'] = a.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
df.loc[mask_m, 'Man'] = 1	1	1
data.loc[(data.passenger_fare>=0) & (data.passenger_fare<8.59) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>=0) & (data.passenger_fare<8.59) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
"output_targets[""Survived""] = titanic_df[""Survived""]"	1	1
"result_test7[""Survived""] = y_pred_mlp_rand"	1	1
test.Fare.fillna(8.05)	1	1
train_df.drop('Ticket_' + extra, inplace=True, axis=1)	1	1
X_train_filled.info()	1	1
sub_gbdt['Survived'] = pred_all_gbdt	1	1
test_set.drop('PassengerId', axis=1).values	1	1
data['IsAlone'] = 1 #initialize to yes/1 is alone	1	1
full.info()   # info about dataframe	1	1
"test_dataset_copy[""PassengerId""],"	1	1
data.loc[(data.passenger_fare<7.65) & (data.passenger_fare>=7.225) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Letter'] =  data[(data.passenger_fare<7.65) & (data.passenger_fare>=7.225) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
cabin_numbers.append(0)	1	1
"submit[""Survived""] = predictions"	1	1
"dftest.loc[olsen_idx,""Survived""]=1"	1	1
"test[""Age""]=test[""Age""].fillna('0')"	1	1
train_df.groupby(['Pclass','Sex']).mean()	1	1
"submit.to_csv(""submit_bin_5.csv"",index=False)''';"	1	1
train.drop(['PassengerId','Survived','Family','SibSp','Parch'],axis=1)	1	1
df['Age'][df['Survived'] == 0].hist(bins=bins, color='r')	1	1
df_test.loc[df_test['Family'] == 0, 'HasFamily'] = 0	1	1
"df_test[""Embarked""] = lb.fit_transform(df_test[""Embarked""]) # Substitutes 'S', 'C' and 'Q' by float values to allow the decision tree to run"	1	1
titanic['AgeBins']=pd.qcut(titanic['Age'],5)  # Divides data into five equal bins	1	1
df['Sex']= df.Sex.astype('category')	1	1
df_test[['Pclass', 'Title', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'IsAlone']]	1	1
dataset.Cabin.apply(lambda x : 0 if pd.isna(x) else 1)	1	1
data_set['Title'] = data_set['Title'].replace('Mme', 'Mrs')	1	1
train_data['Embarked']=train_data['Embarked'].fillna('C')	1	1
titanic['Fare_log1p'] = np.log1p(titanic['Fare'])	1	1
titanic.reset_index(inplace=True)	1	1
df['Title_x'] = df['Title_x'].replace('Mlle', 'Miss')	1	1
train_df['Pclass'].value_counts().plot(kind='barh', ax=ax1)	1	1
X_validation['missing_values'] = numpy.zeros((len(X_validation),1))	1	1
trainData['Age']=trainData.groupby(['Pclass','Sex'])['Age'].transform(lambda x: x.fillna(x.median()))	1	1
titanic_df['ticket'] = titanic_df['ticket_prefix_v2'] + titanic_df['ticket_number']	1	1
res.to_csv('submission.csv', header = True)	1	1
model.add(Dense(units = 1, kernel_initializer = 'random_uniform', activation = 'sigmoid'))	1	1
"test.loc[test['Embarked'] == ""Q"", 'Embarked'] = 2"	1	1
df_test['Embarked']=df_test['Embarked'].cat.codes	1	1
"train_data[""Male""] = 0"	1	1
"train_data.drop(""Embarked"", axis=1, inplace=True)"	1	1
X_train.astype(float)	1	1
filtered_df['Survived'].mean()	1	1
train.loc[train['TicketNum'].isnull(),'TicketNum'] = -1	1	1
row['titles'] in MrsList:	1	1
dataset.Ticket.head(5)	1	1
df_result_hyperopt.loc[i, ['score'] + list(params.keys())] = [score] + list(params.values())	1	1
test6['Embarked'] = le.fit_transform(test6['Embarked'])	1	1
df_data['FareBin_Code_5'] = label.fit_transform(df_data['FareBin_5'])	1	1
train_df_backup_filledna_still_having_categorical_data.shape	1	1
test_X['Fare'].fillna(test_X['Fare'].median(),inplace=True)	1	1
df['tmpt_AgeBand'] = pd.qcut(df['Age'], 4)	1	1
titanic_df['person']= titanic_df[['Sex','Age']].apply(get_person , axis=1)	1	1
df_combined['Fam_Mem_Onboard'] = df_combined.Parch + df_combined.SibSp + 1	1	1
df['IsAlone'] = 1  # as 1 == yes, is alone	1	1
i[0] >= i[1]:	1	1
all_data.drop(['Cabin','Ticket','PassengerId'],axis=1,errors='ignore')	1	1
"df[""Fare_Band""] = np.nan"	1	1
"dataPrepare['Embarked']=dataPrepare['Embarked'].map({""S"":1,""C"":2,""Q"":3})"	1	1
"dataset[""Deck""] = dataset[""Cabin""].apply(Deck) #extracting the deck of the passenger by cabin"	1	1
test_df[['Age', 'Sex', 'Pclass']]	1	1
age_plot_survived.median()	1	1
traindf.loc[traindf['Ticket'].str.contains('113803')]	1	1
test['Survived'] = final_model.predict(X_test)	1	1
sns.boxplot('Title', 'Fare_ind', data=df, ax=ax2)	1	1
"train.loc[(train[""FamilySize""]>1)&(train[""FamilySize""]<5), ""Nuclear""] = True"	1	1
train.Name.replace('Sir','Mr')	1	1
df_data.groupby('FareBand')['Embarked'].median()[fare]	1	1
summary_df.loc['SibSp','level']='numerical' #discrete	1	1
"df_dums.drop(""Pclass"", axis=1)"	1	1
train_df['Embarked'].value_counts().plot(kind='barh', ax=ax1)	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Mme"", ""Miss"")"	1	1
tf.add(tf.matmul(W3,A2), b3, name='Z3')	1	1
test.Fare.fillna(missing_value, inplace=True)	1	1
titanic_test.loc[titanic_test.Age.isnull(), 'Age'] = titanic_test.groupby('Pclass')['Age'].transform('mean')	1	1
params_init_l['metric'] = 'binary_logloss'	1	1
"Submission.to_csv(""KNeighborsSubmissionPrediction.csv"", index=False)"	1	1
test['Parch'] = raw_test['Parch']	1	1
train_data.drop(['Person','Embarked'], axis=1, inplace=True)	1	1
data['Fare'] = pd.qcut(data['Fare'], 4)	1	1
test2['Embarked'] = test2['Embarked'].map(embark_map)	1	1
dt['Fare'].hist(bins=16)	1	1
sur_by_age['Age_Grp']=tmp[1].categories[sur_by_age.index]	1	1
df_test['TicketNo'] = pd.to_numeric(pd.Series(ticketnos))	1	1
fillage.append(int(np.random.choice(age_list.values, 1)))	1	1
titanic_sub.head()	1	1
titanicAll.shape	1	1
"traindf.drop(""Survived"",axis=1) #all of the independent variables are necessary for the cross_val function"	1	1
combined.loc[(combined['Embarked'] == 'S') & (combined['Pclass'] == 3) & (combined['Fare'].notnull()), 'Fare'].median()	1	1
submission.to_csv('./' + model_name + '_submission.csv', index=False)	1	1
ship.tail()	1	1
df['Sex_Age'] = df['Sex_Age'].fillna(df['Sex_Age'].median())	1	1
dset.groupby('Title').describe().loc['Master']['Age', 'max']	1	1
"train[""Gender""] = train[""Sex""].cat.codes"	1	1
score['SVC'] = svc.score(X_train, Y_train)	1	1
Title.iloc[1305]	1	1
test_data[['PassengerId','Survived']].to_csv('test_predictions.csv',sep=',',encoding='utf-8',index=False)	1	1
data_copy.loc[data_copy['Sex']=='female','Age']=data_copy.loc[data_copy['Sex']=='female','Age'].fillna(data_copy.loc[data_copy['Sex']=='female','Age'].median())	1	1
data_train_all['Cabin']=data_train_all['Cabin'].replace(['T'],'n')	1	1
ax[1].set_title('Survived ratio')	1	1
train_orig_df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Survived']]	1	1
"train_df.loc[train_df[""PassengerId""]==830,""Embarked""]='S'"	1	1
test.select_dtypes(include=[np.number]).columns	1	1
result.to_csv(path_or_buf='decision_tree_submittion.csv', index = False, header = True)	1	1
df1.iloc[:,1]	1	1
data['Embarked']=data['Embarked'].map({'S':1,'C':2,'Q':3})	1	1
df['Sex_Code'] = label.fit_transform(df['Sex'])	1	1
full_data['CategoricalFare'] = pd.qcut(full_data['Fare'], 4)	1	1
train.interpolate(inplace = True)	1	1
submission ['Survived']= predictions	1	1
"train_data.loc[(train_data[""FamilySize""] >= 4) & (train_data[""FamilySize""] < 8), ""FamilySizeBetween4And8""] = 1"	1	1
cols.insert(34, 'Plcass_X_p_fare')	1	1
means.append(array(ageDF[ageDF['Salutation'] == sal]['Age'].dropna()).mean())	1	1
data_replaced_ages.loc[(data_replaced_ages['Sex'] == 'male') & (data_replaced_ages['Survived'] == 0) & (data_replaced_ages['Age'].isnull()), 'Age'] = not_survived_males['Age'].median()	1	1
combine.drop(['Ticket', 'PassengerId'], axis=1, inplace=True)	1	1
train_df.describe(include=['O']) #Capital o	1	1
test_df_numerical.head()	1	1
encoding_list.append(training_set[column].unique())	1	1
"test['Elderly'] = test[""Age""].apply(lambda i: 1 if i >= 60 else 0)"	1	1
cabin['Header'] = cabin['Cabin'].map(lambda x: re.findall('[A-Z]', x)[0])	1	1
enc_cabin_cat.transform(cabin_cat_numerical.reshape(-1,1))	1	1
train_dataset[['Age_range','Sex','Pclass','SibSp','Parch','Embarked']]	1	1
td.hist(figsize=(12,8))	1	1
gs_metrics.append(gs_metric_dict)	1	1
test.loc[test['Age'].isnull() & test['NameTitle'].str.contains('Miss.'), 'Age'] = 22	1	1
final_file.to_csv('Titanic best working Classifier.csv',index=False)	1	1
"test_df.loc[ (test_df.Age.isnull()), ""Age""] = median_age"	1	1
df['Age'].fillna(mean_age, inplace=True)	1	1
train_data[['Age','Survived']].groupby('Age', as_index=False).mean()	1	1
cat_pipe.append(('minmax_scaler', MinMaxScaler()))	1	1
test['isAlone'].loc[test['Family_Size']>1]=0	1	1
data[['Cabin_categorical', 'Ticket_categorical']].isnull().mean()	1	1
glbl['n_splits']=10            # cross validation splits	1	1
youngmisstemp['Age'].median()	1	1
output_everybody_dead.to_csv('only_women_survive.csv', index=False) # score 0.76555 (5384/7071)	1	1
"train_data.loc[train_data[""Age""] >= 60, ""Senior""] = 1"	1	1
tr.sort_values(by='Survived').describe()	1	1
df_train.drop(axis=1, inplace=True, columns='cabin')	1	1
dataset['Title'] = dataset['Title'].replace('Mme.', 'Mrs.') # Mrs. is 4	1	1
df_test_features['Fare'].mean()	1	1
tr['Alone'].loc[tr['Family'] == 0] = 1	1	1
df['AgexPClass']=df.Age * df.Pclass	1	1
narrowed.head()	1	1
train.loc[(train['Survived']==0),'Age'];	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col',      'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
"titanic.loc[titanic[""Embarked""] == ""C"", ""Embarked""] = 2"	1	1
join_data['Title'] = join_data['Name'].apply(ExtractTitle)	1	1
final_test.head(10)	1	1
train_ch.groupby('CabinType4').sum()	1	1
test.to_csv('output.csv',index=True, columns=['Survived'], header=True)	1	1
submission.to_csv('titanic_sub.csv')	1	1
test_data[['Survived']] = test_data[['Survived']].astype(int)	1	1
dataset.loc[(dataset['Fare'] >31.0) & (dataset['Fare'] <= 512.329), 'Fare'] = 3	1	1
train['Sex'] = train['Sex'].map(lambda x : 1 if x=='male' else 2)	1	1
"train_df[""Embarked""] = train_df[""Embarked""].map(embarked_dict)"	1	1
dataTest['Fare'].fillna(dataTest['Fare'].mean(), inplace = True)	1	1
"submission_titanic.to_csv(""submission_titanic.csv"", index = False)"	1	1
data.loc[(data.passenger_fare>=10.501) & (data.passenger_fare<12.5) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>=10.501) & (data.passenger_fare<12.5) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
model.add(layers.Dense(8, activation='relu', input_shape=(9,)))	1	1
data_frame.drop('Cabin', axis=1, inplace=True)	1	1
"test[""Age""][((test['Pclass'] == test.iloc[i][""Pclass""]))].median()"	1	1
train_df_dummies['Survived']	1	1
Class_Results.head(10)	1	1
df_features['Embarked'] = df_features['Embarked'].apply(lambda x: dict_embarked[x] if x in dict_embarked.keys() else 0)	1	1
"submission.to_csv(""titanicprediction.csv"", index=False)"	1	1
model_performance.sort_values(by='Accuracy', ascending=False)	1	1
"df_test[""Age""].isnull().sum()"	1	1
df.as_matrix(columns=['Sex','Pclass'])	1	1
sc.transform(X_test) #apply scaler to test data	1	1
"train[""Embarked""].value_counts().index[0]"	1	1
frame.loc[~frame.Ticket.isin(tick_surv.index),'TicketSurv']=0	1	1
"train.loc[(train[""Survived""]==0)&(train[""Pclass""]==1), ""Age""]"	1	1
acc_df.sort_values(by='accuracy',ascending=False)	1	1
df['Fare_group'] = df['Fare'].apply(fare_class)	1	1
modelTest.append(randomforest)	1	1
features['feature'] = titanic_train.columns	1	1
testNMD.drop(drop_elementsNMD, axis = 1)	1	1
test['Cabin'].fillna(test.groupby('Pclass')['Cabin'].transform('median'),inplace = True)	1	1
estimators_list.append(('AdaBoost', ada))	1	1
df['Age_categorical'] = df['Age'].apply(age_treatment)	1	1
"dataset_train[""Embarked""].describe()"	1	1
raw_train.loc[(raw_train['Title']=='Dr') & (raw_train['Sex']=='female')]	1	1
holdout['Embarked']=holdout['Embarked'].fillna('S')	1	1
"train.groupby(by=[""Pclass"",""Embarked""]).Fare.mean()"	1	1
train.drop(['Ticket','Name','Cabin'],axis=1)	1	1
data.astype(float).corr(),linewidths=0.1,	1	1
incorrect.sum(axis = 1)	1	1
titanic['Name_len']=titanic['Name'].apply(lambda x:len(x))	1	1
"test_X[""Fare""].fillna(""10.0"", inplace=True)"	1	1
medianages.iloc[0,0]	1	1
"my_solution.to_csv(""C:\\Users\\Ayushi Asthana\\Documents\\Machine learning\\Titanic\\gender_submission.csv"", index_label = [""PassengerId""])"	1	1
test_data.values # Creats an array of the test data	1	1
data_train.loc[data_train['Age']<16,'Sex'] = 'child' #kid	1	1
data.drop(['Name', 'Parch', 'SibSp', 'Ticket', 'Last_Name', 'PassengerId'], axis = 1)	1	1
train_dataset.loc[(train_dataset['Age'].isnull()) & (train_dataset['Title']=='Royal'),'Age'] = 44	1	1
"df.groupby(""Survived"").get_group(0)"	1	1
rf2.to_csv('rf2.csv',index=False)	1	1
in ['Fare','Age','Name_length']:	1	1
train_copy.loc[train_copy['SibSp'] == 3, 'SibSp_Category'] = 3	1	1
df.drop('Sex', axis=1, inplace=True, errors='ignore')	1	1
"full_dataset[""IsAlone""]=0"	1	1
i['IsAlone'] = i.apply(getIsAlone, axis=1)	1	1
df_train.pivot_table(index='Sex', columns='Pclass', aggfunc={'Fare': 'mean', 'Survived': sum})	1	1
df_data['FareBin_Code_4'] = label.fit_transform(df_data['FareBin_4'])	1	1
train['Pclass'].dtype	1	1
error_rate.append((i, 1 - clf.oob_score_))	1	1
"t_data['Name_pred'] = t_data['Name_pred'].replace(""Mme"", ""Mrs"")"	1	1
one_hot_train.drop('Deck_T', axis = 1)	1	1
sns.boxplot(y='Fare', x='Sex', ax=ax2, data=test_df, linewidth=1, saturation=5, palette=palette2)	1	1
dataset['Southampton'] = np.where(dataset['Embarked']=='S',1,0)	1	1
dataset['Title'] = dataset['Title'].replace(['Dr', 'Rev', 'Capt', 'Col', 'Major'], 'Occ')	1	1
data.drop('Age', axis=1, inplace=True)	1	1
df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean()	1	1
df['Title'] = df['Title'].replace(['Don','Jonkheer'], 'Mr')	1	1
data.iloc[0:11]	1	1
data['SibSp'] + data['Parch']	1	1
X['Embarked'] = le2.fit_transform(X['Embarked'].astype(str))	1	1
dataset.loc[(dataset['Family_members'] == 4)|(dataset['Family_members'] == 5),'Family_members_Band'] = 3	1	1
"titanic_train_dataset[""CabinFloorScore""] = 0"	1	1
gs_metrics.to_csv('Titanic_GS_Result.csv')'''	1	1
titanic_data['Title'] = titanic_data['Title'].replace(['Mlle','Ms'],'Miss')	1	1
titanic['CabinLevel'] =   titanic['Cabin'].apply( lambda x : x[:1])	1	1
train_df.loc[row_null_age, :].head(10)	1	1
"combine_df.iloc[:891,:].drop([""PassengerId"",""Survived""], axis=1)"	1	1
data.loc[data['Fare']<102,'Fare']=0	1	1
data['Title'] = data['Title'].replace('Dr', 'Master')	1	1
X_tr.shape	1	1
"data[""Embarked""] = data[""Embarked""].map({""S"":1, ""C"":2, ""Q"":3})"	1	1
test.loc[test['Fare'].isnull(), 'Fare'] = test['Fare'].mean()	1	1
"train_df['Family'] =  train_df[""Parch""] + train_df[""SibSp""]"	1	1
df['lang'] = df['Name'].apply(lambda n: langid.classify(n)[0])	1	1
compare.iloc[:,1].values	1	1
Titanic[['Age', 'Fare']] = scale.transform(Titanic[['Age', 'Fare']])	1	1
features.apply(lambda item : ceil(gm['Embarked'][item['Sex'],item['Pclass'],item['Title']]) if np.isnan(item['Embarked']) else item['Embarked'], axis=1)	1	1
"dataset[""Pclass""] = dataset[""Pclass""].astype(""str"")"	1	1
plt.hist(train_data['Fare'])	1	1
test['Fare'].fillna(test['Fare'].median() , inplace=True)	1	1
sns.boxplot(x = 'Pclass',y = 'Age',hue = 'Survived',data = data_train)	1	1
ax[0].legend(loc=1)	1	1
train_df['Family'] = train_df['SibSp'] + train_df['Parch'] + 1	1	1
total.append(len(slice))	1	1
titles_test.replace(['Mlle', 'Ms'], 'Miss', inplace = True)	1	1
errors.append(100*(1 - knn.fit(xtrainO, ytrainO).score(xtestO,ytestO)))	1	1
data['Embarked'].fillna(data['Embarked'].mode()[0], inplace = True)	1	1
le_sex.transform(test_data['Sex'])	1	1
np.mean(acc_list)	1	1
train4['Sex'] = le.fit_transform(train4['Sex'])	1	1
X_test['Title'] = test_df['Title'].map({'Mr':0, 'Master':1, 'Ms':2, 'Mrs':3, 'special':4, 'noble':5}).astype(int)	1	1
"R.drop(columns={""count"",""sum""},inplace=True)"	1	1
"tmp_train.drop(""Age"", axis = 1)"	1	1
Final_output.to_csv('csv_to_submit.csv', index = False)	1	1
train['title']=train.apply(replace_titles, axis=1)	1	1
train_df_with_family['FamilyMemberSurvived'] = [has_family_member_survived(row) for row in train_df_with_family.iterrows()]	1	1
X_test.join(DataFrame(X_test[['Age', 'Sex']].apply(get_person, axis=1), columns=['person']))	1	1
"data[""Survived""].corr(data[""Sex""]),"	1	1
train['Salutation']	1	1
X_test.iterrows():	1	1
test.loc[(test['Family']<4)&(test['Family']>1),'Family']=1	1	1
predictions_xgb_test_df.to_csv('titanic_submission.csv', sep=',', index = False)	1	1
X_tot['Embarked']=X_tot['Embarked'].fillna(portmax)	1	1
"sns.boxplot(x=""Survived"", y=""Fare"", data=train_df[train_df.Fare < 150])"	1	1
raw_test['Deck'] = raw_test['Cabin'].apply(lambda x: x[0])	1	1
test[['Age','Pclass','Fare', 'Parch', 'SibSp', 'Sex',  'Embarked_C', 'Embarked_Q', 'Embarked_S']]	1	1
params_init['num_leaves'] = 255	1	1
plt.hist(data.Pclass, color = 'b', alpha = 0.4, label = 'before')	1	1
kaggle['Fare'] = kaggle['Fare'].map(lambda i: np.log(i) if i >0 else 0)	1	1
dataset['Fare_cat'] = dataset['Fare_cat'].astype(int)	1	1
"titanic_train[""Pclass""].value_counts(sort=False)"	1	1
"test[""Fare""].fillna(train[""Fare""].mean(), inplace=True)"	1	1
train.drop(columns = ['Name', 'Ticket', 'PassengerId'])	1	1
allset.drop(['SibSp'],axis=1)	1	1
df['Embarked'].fillna(method='backfill', inplace=True)	1	1
coeff_df['Feature'] = features	1	1
"tmp_train[""Ticket_sp""] = tmp_train[""Ticket""].apply(lambda x: len(x.split()))"	1	1
plt.hist(x = data_full['Fare'], color = ['g'], bins = 8)	1	1
train.groupby('Sex').agg('sum')[['Survived', 'Dead']].plot(kind='bar', stacked=True, color=['g', 'r'], title='Survival Based on by Sex');	1	1
"related_people.loc[related_people[""PassengerId""]==1057,""RGroup""]=""Kink_M"""	1	1
test['AgeCohort'] = test.groupby(level=0)['Age'].min().apply(lambda x: np.floor(x/10).astype(int))	1	1
"df[""CabinFloorScore""].loc[df['CabinFloor'] == ""T""] = 7"	1	1
"_df[""status""] == -1"	1	1
df_cp.loc[:, 'Age'] = df_cp['Age'].fillna(df_cp['Age'].median())	1	1
titanic_df['SexBool'] = titanic_df['Sex'].map({'male': 0, 'female': 1})	1	1
df.drop(['Sex', 'Embarked'], axis=1)	1	1
X['Family_size'] = (X['SibSp'] + X['Parch']).astype('object')	1	1
xte.iloc[:,:-2]	1	1
full['PassengerType'] = full.apply(lambda row: passenger_type(row),axis=1)	1	1
training_data.describe()	1	1
train_title_dummies.drop(['Mr'],inplace=True,axis=1)	1	1
data_test1[['PassengerId', 'Survived']]	1	1
"titanic_test[""Age""] = titanic_test[""Age""].fillna(titanic_train[""Age""].median())"	1	1
x.drop([variable],axis = 1, inplace = True)	1	1
"titanic[""Deck""] = titanic[""Deck""].fillna(""N"")"	1	1
train_df_concat['Sex_map'] = train_df_concat['Sex'].map({'male':0,'female':1})	1	1
train.Fare.isnull().sum() == 0 # True	1	1
df.loc[df['Fare'] <= 7.91, 'FareGroup'] = 0	1	1
pred_df.loc[:, i:].columns:	1	1
Lda.sort_values('LDA Coef',ascending=False,inplace=True)	1	1
df['Deck']= df['Cabin'].map(lambda x: get_deck(x))	1	1
train_x.drop(to_drop, axis=1, inplace = True)	1	1
titanic['SibSp']+titanic['Parch']+ 1	1	1
test.loc[(test['PaxclassA']==2),'Class2'] = 1	1	1
combine_df['Age'][combine_df['Age'].isnull()] = predictedAges	1	1
model.add(Dense(1,activation='sigmoid'))	1	1
importances.sort_values('importance',ascending=False)	1	1
df_results['Survived'] = y_test	1	1
combine['Name_length'] = combine['Name'].apply(len) - combine['Title'].apply(len)	1	1
train_df['FamilySize'] = train_df ['SibSp'] + train_df['Parch'] + 1	1	1
acc_voting.std()	1	1
raw_test['FamilySize'] = raw_test['FamilyMembers'].apply(lambda x: binning_family(x))	1	1
df_test['EmbarkedEncoded'] = le_embarked.transform(df_test['Embarked'])	1	1
df_data.sample(5)	1	1
train_df.iloc[:, -1].values	1	1
np.std(outcome)	1	1
"df_train.loc[df_train['Name'].str.contains(""Master"") & df_train.isnull().Age, 'Age'] = 10.0"	1	1
"train_data[""FamilySizeBetween4And8""] = 0"	1	1
data_train_dummy['Fare'].values.reshape(-1, 1)	1	1
train[['Person', 'Survived']].groupby(['Person'], as_index=False).mean()	1	1
all_data.query('Fare != Fare')	1	1
titanic.drop(['PassengerId','Name','SibSp','Parch','Fare','Ticket','Cabin'],axis=1)	1	1
train_df['is_alone'] = [1 if size == 0 else 0 for size in train_df['family_size']]	1	1
l.append(len(pd.value_counts(df[x])))	1	1
plt.hist(np.log10((df.Fare + 1 - df.Fare.min())/df.Fare.max()) +1.5, bins=45)	1	1
data.Embarked_S.astype(np.uint8)	1	1
"test[""Title""] = test[""Name""].str.extract(""\,\s(.*?)\."" , expand=True)"	1	1
ax[1].set_title('Fare Distribution, Survived=0')	1	1
dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 2,	1	1
"train_data.loc[(train_data[""Age""] >= 18) & (train_data[""Age""] < 30), ""YoungAdult""] = 1"	1	1
full_df.loc[ full_df['FamilySizeCategories'] > 4, 'FamilySizeCategories' ] = 2 #Large	1	1
data_test[['Age', 'Fare']] = scaler.transform(data_test[['Age', 'Fare']])	1	1
train_test['Age'].isnull()	1	1
dataset['Embarked_Code']=label.fit_transform(dataset['Embarked'])	1	1
scaled_X_train.Fare.hist(bins=40)	1	1
train_data['Age'] = train_data.groupby(['Pclass', 'Sex'])['Age'].transform(lambda x: x.replace(np.nan, x.median()))	1	1
dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 34), 'Age'] = 1,	1	1
df_train.groupby(['Sex','Pclass']).Survived.sum()/df_train.groupby(['Sex','Pclass']).Survived.count()	1	1
np.min(orig_fares)	1	1
dataset.loc[ (dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2	1	1
train_df.loc[[731],['Title']] = 'Master'	1	1
df['total']=train.groupby(column).size()	1	1
pd.isnull(row_copy.at[self.column_to_impute]):	1	1
test.drop(unused_col, axis=1)	1	1
"df['NamePrefix'] = df['NamePrefix'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
"re.sub(r'\""[^""]*\""', '', first_name).replace('()', '')"	1	1
ship.join(person_dummies_titanic)	1	1
res.to_csv('Submission.csv', index=False)	1	1
best_bagging.best_params_.get('n_estimators'),	1	1
test['Age'] = test['Age'].apply(lambda x : replaceAge(x))	1	1
correlation['Age'] = merged.Age	1	1
"titanic_train.loc[titanic_train[""Sex""]==""male"", ""Sex""] = 0"	1	1
test.drop(['Name','Ticket'],axis=1)	1	1
test_hot.shape	1	1
dataset.loc[(dataset['Fare'] > 43.833) & (dataset['Fare'] <= 87.667), 'FareBand'] = 1	1	1
df3.fillna(df3.mean())	1	1
combine['Fare'].iloc[1043] = combine['Fare'][combine['Pclass'] == 3].dropna().median()	1	1
plt.boxplot(x=data_full['Fare'], showmeans = True, meanline = True)	1	1
minmaxScaler.transform(X_valid)	1	1
final_test.insert(11, 'Survived', 1)	1	1
all_df.iloc[len(train):]	1	1
"processed_features[""SibSp""] + processed_features[""Parch""]"	1	1
female_survivors.is_copy = False	1	1
df.tail(6)	1	1
"test[""Age""].fillna(round(np.mean(test[""Age""])), inplace=True)        #filling missing value in Age"	1	1
title[ 'Title' ] = titanic[ 'Name' ].map( lambda name: name.split( ',' )[1].split( '.' )[0].strip() )	1	1
all_scores.append(history)	1	1
train_df.groupby('Ticket')['Survived'].sum()/ train_df.groupby('Ticket')['PassengerId'].count()	1	1
df_train.groupby(['Sex'])['Name'].count()[0]	1	1
np.append(randint(1, 10).rvs(10), None),	1	1
data1.describe(include='all')	1	1
"strat_test_set[""Survived""].copy()"	1	1
x.set_value(row.Index,'MP_Surv',len(m[m.Survived==1]))	1	1
"train[""Sex""] = le.fit_transform(train[""Sex""].fillna('0'))"	1	1
train.loc[train['Embarked']=='Q','Port']=2	1	1
dataset['title'] = dataset['name'].str.extract('([A-Za-z]+)\.', expand=False)	1	1
train['Fare_bin'] = pd.qcut(train['Fare'], 4)	1	1
"i[""Parch""]"	1	1
train_test['Fare'] = train_test['Fare'].fillna(train_test['Fare'].mean())	1	1
train2.dtypes	1	1
"titanic_train[[""Age"", ""Survived""]].groupby(['Age'],as_index=False).mean()"	1	1
dataset['Embarked'].isnull().sum()	1	1
axes[1].set_title('Number of Survived for \n Class 2 Cabins (Available Data)')	1	1
df['Age'] = df['Age'].fillna(value=1000)	1	1
join_data.pivot_table(values='Age',index='Pclass',columns='Sex')	1	1
data['Deck'] = data.Deck.replace('n', np.nan)	1	1
test_df_with_family.drop('FamilyId_x', axis=1, inplace=True)	1	1
tr['Title'] =tr['Title'].replace('Sir',4)	1	1
np.shape(train)	1	1
titanic_test['Age'] = titanic_test[['Age','Title']].apply(impute_age,axis=1)	1	1
ax[1].set_title('Embarked Distribution')	1	1
model.add(Dense(16, kernel_initializer=init_mode, activation='relu', kernel_regularizer=regularizers.l2(reglr)))	1	1
train_df.groupby('Title').size()[title] >= 40:	1	1
np.append(need_imp, np.array([[feat,pd.isnull(all_data[feat]).sum()]]), axis=0)	1	1
rawdata.ix[(rawdata.Fare > 8.662) & (rawdata.Fare <= 14.454), 'FareCategory'] = 2	1	1
"all_data[[""Age"", ""Survived""]].groupby(['Age'],as_index=False).mean()"	1	1
np.mean(clf_gs.cv_results_['mean_train_score'])	1	1
"Adaboost_result[2][""best_model""]"	1	1
allset['Salutation'] = allset['Salutation'].replace('Mlle', 'Miss')	1	1
sub.to_csv('Submission.csv',index=False)	1	1
df.replace( {'S': 0, 'C':1, 'Q':2}, inplace = True)	1	1
test.drop('Age', axis=1)	1	1
"df_test.drop(labels = [""Name""], axis = 1, inplace = True)"	1	1
test_data.drop(Feature_to_drop,axis=1,inplace=True)	1	1
data_test.copy(deep = True)	1	1
test_df.drop('Cabin', axis=1)	1	1
"test_df[""Family""]=test_df[""SibSp""]+test_df[""Parch""]+1"	1	1
pvt_bin.fillna(0).plot.bar(ax=axes, width=.8)	1	1
titanic_df['Title'] == 'Miss'	1	1
df.drop('Fare',axis=1,inplace=True)	1	1
one_hot_encoded_train_df.columns.values.tolist()	1	1
data.Cabin.apply(lambda x: x[0])	1	1
df.loc[(df.Cabin.notnull()),'Cabin']='No'	1	1
survival_per_feature.plot.hist(bins=20, alpha=0.6)	1	1
Age.hist(alpha=0.7)	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col',                                                  'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
submission.to_csv('prediction_submission.csv', index=False)	1	1
X_train_df.values	1	1
combined_wo_dummies.loc[misclassified_index]	1	1
df.groupby(['Age_Range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')	1	1
model.add(Dense(16, init='he_uniform', input_shape=(shape,)))	1	1
test['Title'] = test['Title'].fillna(0)	1	1
train_data['Age'].fillna(train_data['Age'].median(), inplace= True)	1	1
df_titanic['Large'] = df_titanic['Family'].map(lambda i: 1 if i >= 5 else 0)	1	1
titanicTest.iloc[i,2]=z[x]	1	1
train_data.groupby(['Embarked','Survived']).Embarked.count().unstack()	1	1
"test_df.loc[test_df[""Title""] == ""Dr"", ""Title""] = 'Rare Title'"	1	1
train[['Sex','Survived']].groupby(['Sex']).mean().plot.bar()       # 统计 女性 存活率 和 男性存活率	1	1
score_list.append(lr.score(x_test,y_test))	1	1
train_data['Pclass'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'],ax=ax[0])	1	1
titanic_df['Ticket'].isnull().sum()	1	1
"res.fillna(method=""ffill"")  # if last one is nan"	1	1
salutations.append(match.group().lstrip(', '))	1	1
"full[""Family_size""] = full[[""Parch"", ""SibSp""]].sum(axis=1) + 1"	1	1
X['Title'] = LabelEncoder().fit_transform(X['Title'])	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Don', 'Rare')	1	1
"results.to_csv(""titanic.csv"",index=False)"	1	1
df['Ticket'] = [str.isnumeric(e) for e in df.Ticket]	1	1
df.agg(mean(col('Age')).cast('int')).first()[0]	1	1
"mix_results.loc[index, ""knn""],"	1	1
dataset['Title'] = dataset['Title'].replace({'Mlle':'Miss','Ms':'Miss','Mme':'Mrs'})	1	1
"data[""Survived""] == 1"	1	1
df_data_x.iloc[891:, :]	1	1
train_copy.loc[(train_copy['Age'] > 20) & (train_copy['Age'] <= 30), 'Age_Category'] = 2	1	1
"data_train_p[""Age""]=data_train_p[""Age""].fillna(mean_Age)"	1	1
test_data_1.head()	1	1
test['Age'].fillna(test['Age'].mean())	1	1
data['Age'] = data[['Age','Pclass']].apply(impute_age,axis=1)	1	1
"data_train['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
tickets_int.append(int(tickets[i]))	1	1
"titanic_train[""Age""] = titanic_train[""Age""].astype(int)"	1	1
train_test['Initial']=train_test.Name.str.extract('([A-Za-z]+)\.')	1	1
test['Cabin_info']=1	1	1
embarked.loc[embarked['Survived'] == 1]	1	1
Submission.to_csv('gbdt_20180712_1412.csv', index=False)	1	1
df['Sex'] = df['Sex'].apply(lambda e : 1 if e=='male' else (2 if e=='female' else -1))	1	1
df['ticket_owners'] = df['Ticket'].apply(lambda x: ticket_count.loc[x])	1	1
grouped_fare_median_train.head()	1	1
dataset.loc[(dataset['Fare'] > 5) & (dataset['Fare'] <= 10), 'Fare'] = 1	1	1
train_copy.loc[train_copy['Embarked'] == 'C', 'Embarked_Category'] = 1	1	1
test_df['Family_Size_D'] = test_df['Family_Size'].apply(lambda size: conv_discrete(size))	1	1
data['Age'] = imputer.fit_transform(data[['Age']])	1	1
train_df.loc[(train_df['Age'] >= 60.105) & (train_df['Age'] < 70.0525), 'Age'] = 6	1	1
missing_fare_rows.iterrows():	1	1
Results.set_index('PassengerId')	1	1
"titanic.loc[titanic[""Deck""] == 'T',""Deck""] = ""Unknown"""	1	1
dataset.drop('Name', axis=1)	1	1
"titanic_training_data.loc[titanic_training_data[""Sex""]==""male"",""Sex""] = 0"	1	1
titanic_traindf.drop('Embarked', axis=1)	1	1
test_df['Title'] = pd.factorize(test_df['Title'])[0]	1	1
train[['Pclass','Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
submission.to_csv('Neighbors.csv', index=False)	1	1
data_train['Pclass'] = data_train['Pclass'].astype(str)	1	1
"test_data_PassengerId[""PassengerId""],"	1	1
axes[1].legend((p1_f[0], p2_f[0]), ('Dead', 'Alive'))	1	1
tr.tail()	1	1
"titanic[""Title""]=titles"	1	1
res['Survived'] = res['Survived'].astype(int)	1	1
le_embarked.transform(test_data['Embarked'])	1	1
features['Child'] = (full['Age'] <= 14).astype(int)	1	1
train_num.drop(columns='Survived')[idxs_mask]	1	1
Xy_train_df.drop('Survived',axis=1)[gnb_vars].values	1	1
df_test[['PassengerId', 'Survived']].to_csv('LogReg.csv', index=False)	1	1
data['Initials'].replace(['Mr', 'Mrs', 'Miss', 'Master', 'Other'],[0,1,2,3,4],inplace=True)	1	1
"titanic_train[""Age""].isnull().sum()"	1	1
"X_train.drop(""PassengerId"", axis=1).copy()"	1	1
df_full['Family_Survival'] = DEFAULT_SURVIVAL_VALUE	1	1
test_csv.loc[test_csv.Age<=13, 'Child'] = 1.0	1	1
missing_age_X_test.drop(['NamePrefix'],axis=1)	1	1
df_full['Cabin']:	1	1
train_df.drop(['Parch'], axis=1)	1	1
"test1_df.to_csv(""submission.csv"",index=False)"	1	1
train['Pclass'].unique():	1	1
trainNMD.values # Creates an array of the train data	1	1
df_raw.items():	1	1
final_test.drop('PassengerId', axis = 1)	1	1
"submission[""PassengerId""] = test.PassengerId"	1	1
"df.groupby('Age')['PassengerId'].count().reset_index(name=""Count"")"	1	1
df.loc[ df['Fare'] > 31, 'Fare']                             = 3	1	1
"ages_prob.reindex(columns=[""Age"", ""Count""])"	1	1
dataset.loc[ (dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1	1	1
dict_K['Decision'] = get_acc(x_train,y_train,classifier)	1	1
test.loc[((test['Age']/0.5)%2 == 1) & (test['Age'] >= 1.0), 'hasAge'] = 2	1	1
xtrain['Survived'].copy()	1	1
df_use.head(1)	1	1
train_df['Ticket'] = train_df['Ticket'].astype('category')	1	1
testSet.iloc[:,1:11]	1	1
train.loc[train['Survived'] == 0, 'Age'].dropna()	1	1
traindf.drop('Survived',1,inplace=True)	1	1
transformed_df['Pclass_1'] = pclass.Pclass_1	1	1
df_test.loc[df_test['Sex'] == 'female', 'Sex'] = 1	1	1
submission.to_csv('titanic_submit.csv', header=True, index=False)	1	1
cc[1]	1	1
title_report['Survived'],	1	1
df_temp.loc[(df_temp['Sex']=='male'),'Count'] = df_temp[(df_temp['Sex']=='male')]['Count']/M_count	1	1
confusion_matrix.shape	1	1
"df['Male'] = df['Sex'].apply(lambda x: 1 if x == ""male"" else 0)"	1	1
masters.fillna(masters.median())	1	1
combined_df['SibSp'].value_counts()	1	1
train_df.iloc[:,1:]	1	1
titanic_test[['Title', 'Name', 'Age', 'Sex', 'sex_female', 'sex_male', 'SibSp', 'Parch', 'Fare', 'Pclass', 'class_1', 'class_2', 'class_3', 'Cabin', 'Embarked', 'Ticket Prefix', 'Ticket Number', 'title_Col', 'title_Dr', 'title_Master', 'title_Miss', 'title_Mr', 'title_Mrs', 'title_Ms', 'title_Rev', 'embarked_C', 'embarked_Q', 'embarked_S']]	1	1
test5['Age'] = test5['Age'].fillna(test5['Age'].median())	1	1
X_val_ch.to_csv('validation_result.csv', index=False)	1	1
dataset.drop(['Name','Parch','PassengerId','SibSp','Fsize','FareBand','AgeBand'],axis=1)	1	1
inputds['Embarked']=le.fit_transform(inputds['Embarked'])	1	1
"subm.to_csv(""{}.csv"".format(name), index=False)"	1	1
tf.add(tf.matmul(L2, W3), B3)	1	1
Df['PREABE'] - Df['PREULT']	1	1
test.drop(labels= ['PassengerId', 'Name', 'Cabin','Ticket'], inplace= True, axis =1)	1	1
plt.hist(plotdata*100, bins=160)	1	1
"testdataframe2[""Sex""]= testdataframe[""Sex""].apply(lambda sex : sex == 'male') * 1"	1	1
test['Survived'] = rfclf.predict(test)	1	1
"df_dums.drop(""Age"", axis=1)"	1	1
row['Age_Unknown']=0	1	1
"test[""Sex""].cat.categories = [0,1]"	1	1
dataset['Age'] =dataset['Age'].astype(int)	1	1
train_clean.values	1	1
pdf['Embarked'] = pdf['Embarked'].map( {'S': 1, 'C': 2, 'Q': 3} ).astype(int)	1	1
"tmp[""CabinHead""] = tmp[""Cabin""].str[0]"	1	1
test['cabin_is']='1'	1	1
test_df.loc[ms_mask, 'Age'] = test_df.loc[ms_mask, 'Age'].fillna(test_df[test_df.Title == 'Miss'].Age.mean())	1	1
data.groupby(['Pclass', 'Survived'])['Survived'].count()	1	1
full_df[0:890]	1	1
"train[""Salutations""]=train[""Salutations""].astype(int)"	1	1
titanic_data.groupby('Sex').agg('sum')[['Survived', 'Died']].plot(kind='bar', stacked=True, colors=['green', 'red']);	1	1
df_train['fare'] = df_train.apply(fill_fare, axis=1, df=df_all)  # [1]	1	1
"df[""Fare""] = df[""Fare""].fillna(df[""Fare""].median())"	1	1
train_df.drop('Fare', 1, inplace=True)	1	1
titanic_data['FareBand'] = pd.qcut(titanic_data['Fare'], 4)	1	1
titanic_df['Age']= titanic_df['Age'].astype(int)	1	1
"test.drop(""Fare"",axis=1)"	1	1
X_tot['Embarked']=X_tot['Embarked'].map(ports_map)	1	1
"test['Dataset'] = ""test"""	1	1
cabin[ 'Cabin' ] = All.Cabin.fillna( 'U' )	1	1
test3_df.describe()	1	1
"train_file.pivot_table(index=""Pclass"", values=""Survived"")"	1	1
x['Sex'].replace(['female','male'],[0,1],inplace=True)	1	1
train_df.drop(['Embarked','Sex','Name','Ticket','Cabin'], axis=1)	1	1
test1['Fare'] = test1['Fare'].fillna(test1['Fare'].median())	1	1
test_df['Fare'] = test_df['Fare'].round(2)	1	1
train_df['AgeCategorical'] = pd.cut(train_df['Age'], bins=8)	1	1
train.groupby(['Title'])[['Survived']].mean()	1	1
"data_test.drop(""Ticket"", axis=1, inplace = True)"	1	1
"np.where(df[""Family""] == max(df[""Family""]))"	1	1
train_df.SibSp.hist(bins = 20, ax=axes[0])	1	1
"Accuracy[""kNN""] = accuracy"	1	1
submission.to_csv('titanic_rf.csv', index=False)	1	1
"sub.to_csv(""baseline_submission.csv"", index=False)"	1	1
train['Age'] = original_train_age	1	1
train['Embarked'] = train['Embarked'].map(embark_encode)	1	1
"casualties[""Sex""].value_counts()/len(train),"	1	1
df_titanic_train['Survived'] = df_titanic_train['Survived'].astype(int)	1	1
in ['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Cabin', 'Ticket']:	1	1
"_df.loc[ [39, 334], ""group_id""] = 163.0"	1	1
"test[""Fare""].fillna(test[""Fare""].mean(), inplace = True) # It would have been better of course to use the mean for his/her passenger class."	1	1
test_y.squeeze()	1	1
test_df['Age_band']=0	1	1
"pd.pivot_table(train, index=""Embarked"", values=""Survived"")"	1	1
"combined[""group_id""]= 0"	1	1
"female_survivors.to_csv(""female_survivors.csv"", index=False)"	1	1
train.drop(['Sex','Pclass','Embarked'], axis=1)	1	1
Title_Dict.update(dict.fromkeys(['Mr'], 'Mr'))	1	1
"total[""Title""] = total[""Title""].replace(['Dona', 'Lady', 'the Countess','Sir', 'Jonkheer'], 'Royalty')"	1	1
data.loc[(data['Fare'] > 0) & (data['Fare'] <= 50), 'Fare'] = 1	1	1
train['EmbarkedC'] = train['Embarked']	1	1
xgb_feat_red.transform(xgb_red_test)	1	1
test.iloc[:,1:].as_matrix()	1	1
df['Embarked']=df['Embarked'].replace('C',np.int32(3))	1	1
"dataset.loc[(dataset[""Fare""])>31, ""Fare""]=3"	1	1
df['Embarked'].mode()[0]	1	1
my_submission.to_csv('solution.csv',index=False)	1	1
submission['Survived'] = test_probability.astype(int)	1	1
"df[""Cabin""] = df[""Cabin""].apply(lambda f: f[0])"	1	1
ageAboveFifty.where(ageAboveFifty.values != ageBelowFifty.values)	1	1
titanic['Title'] = titanic['Title'].map(Title_Dictionary)	1	1
dataset['Title'] = dataset['Title'].replace('Miss', 'Miss')	1	1
X_train[['Sex', 'Pclass', 'Fare', 'Age', 'TraveledAlone']]	1	1
data_train[['Sex', 'Pclass', 'Age']].groupby(['Sex', 'Pclass']).median()	1	1
dataset.groupby(['Sex', 'AgeGroup']).size()	1	1
"test_df[""Sex""] = test_df[""Sex""].map({""male"": 0, ""female"": 1})"	1	1
df['Fare_cat']=0	1	1
grpsize.values.flatten()	1	1
row['Survived'] == 1 and row['Sex'] == 'female' and np.isnan(row['Age']):	1	1
Y_train.iloc[test_idx]	1	1
plt.hist(np.log(df.Age), bins=40)	1	1
scores_mlp.mean(),	1	1
"df_train[""Pclass""] = df_train[""Pclass""].astype('category')"	1	1
ship['Family'].loc[ship['Family'] > 0] = 1	1	1
model.add(Dense(units=64, activation='relu', input_dim=x.shape[1]))	1	1
df.loc[df['Embarked']=='C','Embarked'] = 1	1	1
"tp.loc[tp[""Title""]==""Mr"",""Title_c""] = 0"	1	1
"titanic[""Age""] = titanic.groupby(['Pclass','Sex','Parch'])['Age'].transform(lambda x: x.fillna(x.mean()))"	1	1
titanic_train_data.loc[titanic_train_data.Embarked == 'S', 'Embarked'] = 3	1	1
train['Age1'] = train['Age1'].apply(transform_age)	1	1
comb['old_age'] = comb['Age']	1	1
notr.append(i)	1	1
solution['Survived'] = solution['Survived'].apply(int)	1	1
train_use.iloc[:, 2:]	1	1
gs_metrics.iloc[6, 5]	1	1
df_test.drop(['Deck'], axis=1)	1	1
titanic_df['Age'].hist(bins=100,ax= axis2)	1	1
df['Embarked'] = df['Embarked'].fillna('S') # fills Embarked=NaN with the most common option (S)	1	1
Results.to_csv('new.csv',sep=',',index=False)	1	1
Output.shape	1	1
"df[""u_noise""] = np.random.rand(len(df))"	1	1
Data_test.info()	1	1
df.drop('Median_age', axis=1)	1	1
dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(float)	1	1
correlation.set_index('Age').reset_index() # Move Age at index 0.	1	1
"df_submit[""Survived""] = predictions"	1	1
train_data['Age'].fillna(train_data.Age.median(),inplace=True)	1	1
"sns.boxplot(x=""Survived"",y=""Fare"",data=train_df)"	1	1
scores.append( best_rfc.score(X_test, y_test) )	1	1
data_train_trans['Survived']	1	1
x_train[1]	1	1
data_train['FamilySize_scaled'] = scaler.fit_transform(data_train['FamilySize'].values.reshape(-1, 1), familysize_scale_param)	1	1
data['Fare'].fillna(data['Fare'].median(skipna=True), inplace=True)	1	1
"train['Age']=train['Age'].fillna(train[""Age""].median())"	1	1
data['Embarked'] = data['Embarked'].map({'S': 0, 'Q': 1, 'C': 2}).fillna(3).astype(int)	1	1
dataset['Age']        =    dataset['Age'].fillna(1)	1	1
"dataset[""family_size""] = dataset[""Parch""] + dataset[""SibSp""] + 1"	1	1
df.loc[df.Age.isnull(),Var].drop('Age',axis=1).values	1	1
train[['CatTitle', 'Survived']].groupby(['CatTitle']).mean()	1	1
"full['Title']= full.Name.str.extract(""(.*, )([^\.]+)"", expand=False)[1]"	1	1
transformed_df['Cabin_U'] = cabin.Cabin_U	1	1
tt.loc[tt['TicketCount'] == 1,'ShareTicket'] = 0	1	1
train_df.drop(['AgeBin'], axis=1)	1	1
sex.describe()	1	1
full_df[ 'Family_Small' ]  = full_df[ 'Family' ].map( lambda s : 1 if 2 <= s <= 4 else 0 )	1	1
my_solution.to_csv('all0.csv',index_label=['PassengerId'])	1	1
"train_dat[""Fmsize""] = train_dat[""SibSp""] + train_dat[""Parch""] + 1"	1	1
df.to_csv('lr_submission.csv', sep=',')	1	1
train_df.Embarked.apply(len).max()	1	1
test.Fare.fillna(value = avgFare)	1	1
"titanic_df[""Embarked""] = titanic_df[""Embarked""].fillna(na_string)"	1	1
trainData.isnull().any()	1	1
train_with_less_features.drop(['Survived'], axis=1).values	1	1
submission.to_csv('mysubmission.csv', index=False)	1	1
Y_pred[0]	1	1
data.drop(var_to_drop,axis=1,inplace=True)	1	1
X_train['Age'].dropna().median()	1	1
data.Survived.groupby(data.name_title).describe()	1	1
loss_train.append(ev_train[0])	1	1
test.loc[test['Age'] == -1.0, 'hasAge'] = 0	1	1
best_rf.best_params_.get('min_samples_split'),	1	1
"data.loc[index, ""Age""] = similars[""Age""].mean()"	1	1
comb.loc[:890].reset_index(drop=True)	1	1
test.Age.fillna(meanAge, inplace=True)	1	1
"train_df[""HasCabin""] = train_df.apply(hasCabin, axis = 1)"	1	1
"df_train['Pclass'] = pd.Categorical(df_train[""Pclass""])"	1	1
titanic_df['Fare'] = titanic_df['Fare'].fillna(value = medianFare)	1	1
idx.rename(columns={'idx':'PassengerId'},inplace = True)	1	1
data['CabinCode'] = data.Cabin.map(lambda x: x if type(x)!=str else x[0])	1	1
"dataset.drop([""Title"",""Name""], axis=1)"	1	1
df_combined.tail(data_test.shape[0])	1	1
data.drop('Sex_male', axis=1, inplace=True)	1	1
df.update(updated)	1	1
titanic_submission_classic2.to_csv('Titanic_Submission_classification_RF.csv', index = False)	1	1
parameters['layers_dim'] = [14]	1	1
pipelines.append(('GB', GradientBoostingClassifier()))	1	1
mod_data.head()	1	1
train_df_numerical_Y.as_matrix()	1	1
train_df.drop([ 'Ticket', 'PassengerId', 'Cabin'],axis=1)	1	1
new_combined_data.loc[891:].drop(['Age','Cabin','Ticket','index','PassengerId','Name'],axis=1)	1	1
features.append('fare_log')	1	1
"test.drop(columns=""Ticket"")"	1	1
"data.to_csv(""sumbission.csv"", index=False)"	1	1
data.iloc[0:891,:]	1	1
series.apply(lambda x:(1 if x > threshold else 0))	1	1
temp_train['Parch'] = data['Parch']	1	1
ax[1].plot(res_df_tol['tol'], res_df_tol['Build_time'] , 'r*')	1	1
data_full['AgeBin'] = data_full['AgeBin'].astype(int)	1	1
"dec_no_na[""Age""].plot(kind='hist',alpha=0.5,color='blue',bins=bins,title =""Death/Survival count by Age groups, w/O missing values"" )"	1	1
ax[1].set_title('Pclass: Survived vs Dead')	1	1
final_test['Age']	1	1
df[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
copyTest_df.head()	1	1
X_train_age.shape[1], units=128,	1	1
data_train['Ticket'].value_counts().head(20)	1	1
"raw_df.drop([""PassengerId"",""Name"",""SibSp"",""Parch"",""Ticket"",""Fare"",""Cabin"",""Title"",""Age""],axis=1)"	1	1
titanic_df['Survivor'] = titanic_df.Survived.map({0:'no', 1:'yes'})	1	1
pd.melt(perf_kaggle, value_vars=['Accuracy Kaggle', 'Accuracy Score'], id_vars=['Model'], var_name = 'Origin', value_name='Accuracy')	1	1
train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Embarked']].values	1	1
combined.Embarked.notnull()	1	1
x['Age'].fillna(x['Age'].median(), inplace=True)	1	1
title_counts.values.flatten()	1	1
"tab.div(tab.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True, ax=axes[0])"	1	1
"train.loc[(train[""Pclass""].values == 3) & (train[""Age""].isnull()), ""Age""] = meanAge3"	1	1
"testingset[""AgeBin""][x] = agemapping[testingset[""Title""][x]]"	1	1
train_df[['PassengerId','Age','SibSp', 'Parch','Sex','Pclass']]	1	1
df.drop(columns=['Age', 'age_stage'], axis=1)	1	1
Xtrf_df['logFare'] = Xtrf_df['Fare'].apply(lambda x: np.log(x + 1))	1	1
known_data.SibSp.max()	1	1
df_train['Survived'].value_counts(normalize=True) ## Normalize just makes the values into percentages for us	1	1
data['Initials'] = 0	1	1
test_df['Alone'] = test_df.Alone.astype('category')	1	1
trainData.drop(['Name', 'Ticket', 'Cabin','Survived'], axis=1, inplace=True)	1	1
"test[""Pclass""] = test[""Pclass""].astype('category')"	1	1
titanic_test_df['Family'] = le.fit_transform(titanic_test_df['Family'].map( {'Alone': 0, 'Small': 1, 'Large': 2}).astype(str))	1	1
"dataset.drop(""Ticket"", axis=1, inplace=True)"	1	1
"X_train.drop(""Family Size"", axis = 1)"	1	1
df_titanic['Sex']	1	1
"a.loc[a[""FamilySize""] != 1, ""isAlone""] = 0"	1	1
df.loc[df['Sex']=='male','Sex'],df.loc[df['Sex']=='female','Sex']=1,0	1	1
test.columns.shape	1	1
transformed_df['Family_Small'] = family.Family_Small	1	1
test_df[['Title', 'Sex', 'Age']].groupby(['Title', 'Sex'], as_index=False).mean()	1	1
df_all['AdjFare'] = df_all['Fare'] / df_all['TicketCount']	1	1
dataset['Title'] = dataset['Title'].map(title_mapping) # We use the map function to map the numbers	1	1
t_num.isnull().sum()==0:	1	1
train.drop(['Age_Group'], axis = 1)	1	1
"train[""Cabin""] = train[""Cabin""].apply(lambda x: x[0])"	1	1
"df_men.loc[idx,""Ticket""]"	1	1
df_test_ml.drop(['Cabin', 'Ticket', 'Name', 'Age'], axis = 1, inplace = True)	1	1
df_test['U18'] = df_test['Age'] < 18	1	1
pd.isna(row['Age']):	1	1
df_full['Group'] = ''	1	1
"titanic_test_dataframe.drop([""Name""], axis=1)"	1	1
titanic_df['Age']=titanic_df['Age'].astype(int)	1	1
df.info() # age and cabin both have missing values. also emabarked has some nan values.	1	1
data_train[['Age', 'Fare']] = scaler.fit_transform(data_train[['Age', 'Fare']])	1	1
titanic.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)	1	1
"sns.boxplot(data=train,y=""Age"",x=""Pclass"", hue=""Survived"")"	1	1
df['TicketPrefix'] = df['Ticket'].apply(lambda x: Ticket_Prefix(x))	1	1
dataset['child'] = 0	1	1
full.loc[full.Fare.isnull(), 'Fare'] = full.loc[(full.Embarked == 'S') & (full.Pclass == 3),'Fare'].median()	1	1
train_data.Age.fillna(train_data.Age.mean(), inplace=True)	1	1
df.Survived.sum() / len(df)	1	1
test_results.mean()'''	1	1
full_df['Title'] = full_df['Title'].replace('Ms', 'Miss')	1	1
importances.append(tree.feature_importances_)	1	1
combined.drop(['Embarked','Cabin','Pclass','Embarked','Title'],inplace=True,axis=1)	1	1
train_df_final.drop('Sex_female', axis = 1, inplace = True)	1	1
evaluation_temp.append(f1)	1	1
"titanic[[""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked""]]"	1	1
"sns.boxplot(train[""Fare""])"	1	1
"df.query(""ischild == 0"").Age.dropna().astype(np.uint8).value_counts().sort_index().index"	1	1
"test_data[""Age""]:"	1	1
comb_data['Title'] = comb_data['Title'].replace('Mlle', 'Miss')	1	1
FeatureDF['Deck'] = FeatureDF['Cabin'].apply(lambda x: str(x)[0])	1	1
"third_class_didnt_survive.plot.hist(fc=(1, 0, 0, 0.5), normed=1, label=""Did not Survive"")"	1	1
"df.drop(""PassengerId"",axis=1,inplace=True)"	1	1
"df.loc[df[""FamilySize""] == 1, ""Solo""] = 1"	1	1
"titanic.drop([""Survived"",'PassengerId'],axis=1)"	1	1
data['Embarked_S'] = data.Embarked_S.apply(lambda x: int(x))	1	1
"data[""FamilyMembers""]=data[""SibSp""]+data[""Parch""]"	1	1
df_train['LastNameEncoded'] = le_lastname.transform(df_train['LastName'])	1	1
res_df_solver_C['Build_time_'+solver_list[i]] ,	1	1
test_data['With_Family'] = [0 if(Parch == 0 & Sib ==0) else 1 for Parch,Sib in zip(test_data['Parch'],test_data['SibSp'])]	1	1
test0.drop(drop_elements, axis = 1)	1	1
train_c.drop(['PassengerId', 'Ticket', 'Survived'], inplace=True, axis=1)	1	1
train_df['Title_num'].map(Median_age)	1	1
simple_test_df['Survived'] = test_df['Survived'].astype(int)	1	1
all_data.loc[all_data['Fare'] > 31, 'Fare'] = 3	1	1
titanic_data[['SibSp', 'Survived']];	1	1
dataset['Cabin_G'] = dataset['Cabin'].map(lambda s: 1 if s == 3 else 0)	1	1
"test['Title'] = test['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
"comb[""Age""][comb.Age.notnull()]"	1	1
data.loc[(data['Age']>16)&(data['Age']<=32), 'Age_band'] = 1	1	1
"data_train.drop(columns=[""Name"", ""Ticket""])"	1	1
"train_data[""Survived""].value_counts()"	1	1
df.to_csv('submission.csv',index=False)	1	1
df_null['Null_Count'] = sum_null	1	1
raw_train['Fare'].hist(bins=100, color='red')	1	1
df_data['Gender'] = df_data['Sex'].map({'female': 0, 'male': 1}).astype(int)	1	1
ticket_values.head()	1	1
"titanic_df[""Title""] = pd.Series(titanic_df_title)"	1	1
x['Embarked'].fillna(x['Embarked'].mode()[0], inplace=True)	1	1
titanic.shape   # Our dataset now contains 23 features, most of which are not required for predictive modeling.	1	1
survival_predictors.select_dtypes(exclude=['object'])	1	1
test_input['Age'].apply(lambda x: np.log(x + 1))	1	1
df['Fare_Category'] = (df.Fare.apply(fare_categorize)).map({'Low':0, 'Middle':1, 'High':2})	1	1
train_df_concat['name_first_place'] = np.array(name_first_place)	1	1
test.dropna(axis = 0,inplace=True)	1	1
"test_df.loc[(test_df['Fare']>204)&(test_df['Fare']<=307),""Fare""]=2"	1	1
"columns.append(""acc"")"	1	1
df['Cabin'] = df['Cabin'].astype('int')	1	1
"train[""Sex""] = train[""Sex""].map(sex_flag)"	1	1
np.mean(series), np.std(series), threshold	1	1
all_data.groupby('Ticket'):	1	1
passengers_by_class_sur['Survived'].tolist(),	1	1
"train.dropna()[""Survived""]"	1	1
test['Sex'] = test['Sex'].replace({'male' : 0, 'female' : 1})	1	1
df2.iloc[:,[1,3]]	1	1
"data[""Fare""],"	1	1
data_copy['Fare']=(data_copy['Fare']-data_copy['Fare'].mean())/data_copy['Fare'].std()	1	1
passenger['Age'] < 15 and passenger['SibSp'] < 3:	1	1
submission.loc[submission['PassengerId'] == 1116]	1	1
"row[""Survived""] == preds[i]:"	1	1
"all_data.query(""CabinCount > 1"").head()"	1	1
train_data['AgeGroup'] = pd.cut(train_data['Age'].dropna(),[0,3,8,16,50,60,90],labels = [1,2,3,4,5,6])	1	1
test_df.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)	1	1
data_copy.Embarked.fillna('S')	1	1
titanic_train[['Age']]=imputer.transform(titanic_train[['Age']])	1	1
s.append(0)	1	1
test_df['aile'].loc[test_df['aile']==0]=0	1	1
df['Title'] = None	1	1
train_df.loc[train_df['Fare'] < 7.91, 'Fare'] = 0	1	1
"titanic_train.drop([""Sex""], axis=1,inplace=True)"	1	1
train.Embarked.replace(['C', 'S', 'Q'], [0, 1, 2])	1	1
train.loc[train.Fare > 300,'Fare'] = 270	1	1
test_df['Single'] = test_df['Family'].map(lambda s: 1 if s == 1 else 0)	1	1
df_test_features.iloc[:,2]:	1	1
"df_train.name.apply(lambda x: x.split(',')[1]) + "" "" + df_train.name.apply(lambda x: x.split(',')[0])"	1	1
df_full.groupby('Pclass').mean()['Age']	1	1
map_title.items():	1	1
titanic_test['PTitle'] = Title_test	1	1
comb.join(pd.get_dummies(comb.Title))	1	1
age_list.append(age_bin); fare_list.append(fare_bin); rf_acc_list.append(rf_acc); rf_f1_list.append(rf_f1)	1	1
df['Title'] == 'Miss':	1	1
submission.to_csv('submission1.csv', index = False)	1	1
res.count()	1	1
params['num_leaves'] = grid.best_params_['num_leaves']	1	1
model.add(Dense(5, activation= 'relu'))	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Dona'], 'Mrs')	1	1
test.loc[test['Embarked']=='S','Embarked'] =1	1	1
train.isnull().any().any()	1	1
"df_test[""Age""] = df_test[""Age""].fillna(df_train[""Age""].mean())"	1	1
class_data['final_class_data'] = class_data.apply(class_vs_survival, axis = 1)	1	1
data.Title.str.replace('Dona', 'Mrs')	1	1
"titanic_train[""Age""].hist(bins=70,ax=axis2)"	1	1
X_train.drop(feature, axis=1)	1	1
df.drop(str(bad_column.columns.values[0]), axis=1, inplace=True)	1	1
row_copy.at[self.column_to_impute] = self.value_per_group[row_copy.at[self.column_ref]]	1	1
titanic_df['ElitePerson'] = titanic_df[['Pclass','Sex']].apply(get_elitePerson,axis=1)	1	1
new_train.iloc[:,1:].values	1	1
"solution.to_csv(""best_fit.csv"", index = False)"	1	1
data.sons.loc[data.PassengerId==1078] = 1	1	1
X_age_dummied_test['SibSp_4'] = np.zeros(len(X_age_dummied_test))	1	1
processed_data.drop(['Pclass','Embarked','Sex','Name','Ticket','Title'], axis =1, inplace = True)	1	1
train_with_age['Age'].values	1	1
train_df.drop('Survived', axis=1) # independent variables only	1	1
titanic_df[['Family','Survived']].groupby('Family', as_index= False).mean()	1	1
"dftest_sorted.to_csv(""Titanic.csv"",index=False)"	1	1
oof_cv_skf.mean(axis=0)	1	1
data.Cabin_Letter_D.astype(np.uint8)	1	1
le.transform(catVal)	1	1
predictions.append(m['Model'].predict(x))	1	1
"train_df[[""SibSp"", ""Survived""]].groupby(['SibSp'], as_index=False).mean()"	1	1
titanic['Cabin'] = titanic['Cabin'].fillna('U')	1	1
dataset.loc[dataset['FamilySize'] == 1, 'isAlone'] = 1 #set isAlone to False if family	1	1
df['Parch'].values.copy()	1	1
svc_cv.best_params_['gamma'],	1	1
train_df['Name_len_Class'] = train_df['Name_len'].map(get_name_length_group)	1	1
test_data.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)	1	1
"df_train[""Age""].hist(bins=19, density=True, stacked=True, color='teal', alpha=0.6)"	1	1
test['Name'] # Remove the original name, which is no longer useful	1	1
df_train.loc[df_train.Age.isnull(), 'Age'] = df_train.groupby(['Sex','Pclass','Title']).Age.transform('median')	1	1
cutoff_df.loc[i] =[ i ,accuracy,sensitivity,specificity]	1	1
app_test['PassengerId']	1	1
train_data['Fare'].fillna(train_data['Fare'].mean(),inplace=True)	1	1
df['isSpecialTicket'] = df.Ticket.str.extract('([A-Z])', expand=False)	1	1
df['Family'] = df['SibSp'] + df['Parch']	1	1
df.groupby('Pclass').mean()['Fare'].plot(kind='bar',ax = ax)	1	1
scores_tuning.sort_values(ascending=False)	1	1
test_df.loc[test_df['FamilySize'] == 0, 'Alone'] = 1	1	1
importance_rf_df.sort_values(by='Importance', axis=0, inplace=True, ascending = False)	1	1
train.loc[train['Age'].isnull(),'hasAge'] = 0	1	1
test_orig_df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]	1	1
test_data.head()['Cabin']	1	1
train_set.iloc[mcs_index]	1	1
train[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)	1	1
"train[""title""] = train[""title""].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
"train_df.groupby(""family_size"")[""survived""].mean().plot()"	1	1
testcsv.loc[:,['Pclass','Sex']]	1	1
X_valid['age'] = X_valid.age.apply(lambda x: np.sqrt(x))	1	1
combine.drop('PassengerId',axis=1).corr()	1	1
test_X.fillna(12)	1	1
family.loc[idx, 'Surname_adj'] =  s + '-fam' + fam_code	1	1
"dataset_test[""PassengerId""]"	1	1
df['Cl_IA'] = 0	1	1
"full_data[""SingleMale""][((full_data[""Parch""] + full_data[""SibSp""]) == 0) & (full_data[""Sex""] == 'male')] = 2"	1	1
submission['PassengerId']=test_original['PassengerId']	1	1
Test_Master.loc[(Test_Master['Title'] == title) & (Test_Master['Age'].isnull()), 'Age'] = Titanic_Master[Titanic_Master['Title'] == title]['Age'].median()	1	1
"test[""Age""][np.isnan(test[""Age""])] = rand_age_test"	1	1
imp.transform(test_data)	1	1
train.loc[train['Cabin'].str.len() == 5.0, 'CabinN1'] = train['Cabin'].astype(str).str[3:]	1	1
x_train_categorical['Sex'].value_counts(True)	1	1
"train_data.loc[train_data[""Name""].str.contains(""Mlle.""), ""TitleMlle""] = 1"	1	1
X_train_scaled.head()	1	1
train_df.drop(['Cabin', 'Ticket'], axis=1, inplace=True)	1	1
df.drop(column, axis = 1, inplace = True)	1	1
"StackingSubmissionONS.to_csv(""StackingSubmissionONS.csv"", index=False)"	1	1
"titanic_df.drop([""Survived"", ""PassengerId"",""Parch""],axis=1)"	1	1
"train[""title""] = [i.replace('Ms', 'Miss') for i in train.title]"	1	1
raw_train.columns.values	1	1
sns.boxplot('Title', 'SibSp', data=df, ax=ax3)	1	1
"test_X[""Age_Fare""] = test_X.Age * test_X.Fare"	1	1
"train_data.loc[mask,""FsizeD""] = ""small"""	1	1
df_full[['NameFareSize', 'TicketSize', 'FamilySize']].corr()	1	1
"df_train[""Title""] = pd.Series(dataset_title)"	1	1
train2['Age'] = train2['Age'].map(age_map)	1	1
train6['IsAlone'].loc[train6['FamilySize'] > 1] = 0	1	1
"fare_null_df[""Fare""].median()"	1	1
sns.boxplot(joined['Fare'][joined['Survived'] == 1], ax=ax1, width=0.3, color='green')	1	1
trainPCA2['6'] = trainPCA['Pclass2']	1	1
X_test.sample(10)	1	1
"df_train[""TicketRef""] = df_data[""TicketRef""][:891]"	1	1
train.loc[((train['Sex'] == 0) & (train['Pclass'] == 3)), 'gender_class'] = 3 #female Pclass 3	1	1
df.loc[~(df['Survived'] == df['Pred_survived'])]	1	1
dataset.loc[(dataset['Fare'] > 31.0) & (dataset['Fare'] <= 512.329), 'Fare'] = 3	1	1
data2['FareBin'] = pd.qcut(data1['Fare'], 4)	1	1
TitanicTrain.describe()	1	1
X['Survived'] = full.Survived	1	1
axes[9].set(ylim=[0,0.0005])	1	1
"classifier.add(Dense(input_dim=len(features), units=15, activation=""relu"", kernel_initializer=""uniform""))"	1	1
"test_df[""Age""][np.isnan(test_df[""Age""])] = random_2"	1	1
test['Age_known'] = test['Age'].isnull() == False	1	1
"test_df.drop(""Survived"", axis=1)"	1	1
test['Sex'].replace(['male','female'],[0,1],inplace=True)	1	1
train_ds.loc[(train_ds['Fare']==0), 'FreeTraveller']= 1	1	1
params_init_l['boosting_type'] = 'gbdt'	1	1
X_train['Embarked'] = X_train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
"submission.to_csv(""titanic51_submission.csv"", index=False)"	1	1
titanic.hist(bins=15,figsize=(12,7),grid=False);	1	1
i[3] #First checks for rare titles (Thanks Anisotropic's wonderful Kernel for inspiration//help here!)	1	1
df_train['SmallF'] = df_train['Family'].map(lambda s: 1 if  s == 2  else 0)	1	1
train.loc[(train['Age']>35)&(train['Age']<=50),'Age_cat']=3	1	1
df_test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'IsAlone']]	1	1
submission.loc[submission.Ticket_numerical_temp.isnull(), 'Ticket_numerical_temp'] = X_train.Ticket_numerical.unique()[0]	1	1
titanic_test.head(10)	1	1
df1['Parch'] = df1['Parch'].apply(lambda x: 'less' if x <= 3 else 'many')	1	1
"_df.loc[  1025, ""group_id""] = 211.0"	1	1
data.apply(lambda x :                               1 if ((x.Ticket in (['CA. 2343'])) & (x.SibSp==1)) else 0, axis=1)	1	1
test_p['Family'].loc[test_p['Family'] == 0] = 0	1	1
"dftest.loc[idx,""Survived""]=1"	1	1
plt.hist(np.log2(df.Fare + 0.1), bins=45)	1	1
Survived.head()	1	1
data.Age.loc[(data.Age<0) & (data.companions==1) & (data.Personal_Titles=='Miss')] =    data.Age[(data.Age>=0) & (data.companions==1) & (data.Personal_Titles=='Miss')].median()	1	1
test.drop('PassengerId',axis = 1,inplace = True)# High cordinality , remove	1	1
full_data.loc[ full_data['Age'] > 64, 'Age']  = 4	1	1
data[['Age','Sex','Pclass','Fare','Survived','SibSp','Parch','Ticket','Embarked','Cabin','Name']]	1	1
medians_by_parch.append(df_train[df_train['Parch'] == i]['Age'].median())	1	1
"dt_solution.to_csv(""my_solution_three.csv"", index_label = [""PassengerId""])"	1	1
test.join(pclass_dummies_test)	1	1
df.loc[female & Class3,'Class'] = (2)	1	1
"test.drop([""SibSp"", ""Parch""], axis = 1)"	1	1
test2['FareBand'] = pd.qcut(test2['Fare'], 4, labels = [1, 2, 3, 4])	1	1
df.loc[index,'SIBSP_1']=1	1	1
Model.append('AdaBoost')	1	1
"train_df[[""PassengerId"",""Name"",""SibSp"",""Parch"",""Ticket"",""Embarked""]].copy()"	1	1
"np.where(df[""Age""].isnull() == True)"	1	1
np.shape(X_NumPy_Mat)	1	1
combined.assign(SibSpGroup2 = combined['SibSp'].between(2, 3, inclusive=True))	1	1
Test_Master.info()	1	1
"X_test[""FamilySize""] = 1 + X_test[""SibSp""] + X_test[""Parch""]"	1	1
test_dataset.drop('Cabin',axis=1,inplace=True)	1	1
train_df['Embarked'] = train_df['Embarked'].map( {'Q': 0, 'S': 1, 'C': 2} ).astype(int)	1	1
test.loc[test['Age'] >= 14.0, 'ageCat'] = 4	1	1
raw_train['Age'].plot(kind='kde', style='b--')	1	1
df['gender_num'].max() - df['gender_num'].min()	1	1
"x_test.drop(""index"", axis=1)"	1	1
X[ 'Cabin' ] = X[ 'Cabin' ].map( lambda c : c[0] )	1	1
test_dummies.iloc[:, [0,1,2,3,4,5,6,7,8,9]].values	1	1
classifiers['acc_mean'],	1	1
dset.drop('Cabin', axis=1, inplace=True)	1	1
bcols.add('Pclass^2')	1	1
np.mean((actual - pred) ** 2)	1	1
"GBT_result[2][""best_model""]"	1	1
train[['SibSp' , 'Survived']].groupby('SibSp').mean()	1	1
train_X.drop(columns='Name')	1	1
dataset['Alone'] = 0	1	1
df.sort_values(by='Pclass')	1	1
test_df['Fare'].isnull().sum() / len(test_df)	1	1
train.Cabin.dropna()[5:40]	1	1
train.loc[train.Age.notnull()]	1	1
dataset.iloc[:, 4:11].values #Name, PassengerId, Ticket and Cabin doesnot give any idea whether the passenger will survive or not	1	1
test['Fare'].fillna(0, inplace=True)	1	1
pid.head()	1	1
dataset.loc[(dataset['Fare'] > 8.1) & (dataset['Fare'] <= 14.454), 'Fare'] = 1	1	1
train_df.groupby(age_groups).mean()	1	1
x_test['Embarked'] = x_test['Embarked'].replace({'C','Q','S'},{0,1,2})	1	1
"data_test.drop([""Name"",""Ticket"",""PassengerId"",""Cabin"",""Embarked""],axis=1)"	1	1
dc.columns.get_values().tolist()	1	1
fare_data.append(tm_fare_data[i])	1	1
test.loc[:,'b']=1	1	1
"df_train.groupby('age_range')['fare'].mean().plot(kind='bar', figsize=(10,8), title = ""Average Ticket Value Age Range"");"	1	1
test_data.reset_index(drop=True)	1	1
age_age[0]	1	1
train.loc[train['Fare'] > 250, 'Fare'] = 5	1	1
data.loc[(data.passenger_fare<7.75) & (data.passenger_fare>=7.65) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Letter'] =  data[(data.passenger_fare<7.75) & (data.passenger_fare>=7.65) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
train_df.join(dummy['Female'])	1	1
df.loc[ (df['Age'].isnull()) & (df['Title'] == atitle), 'Age'] = df[ (df['Title'] == atitle) ]['Age'].median()	1	1
"data[""TicketClean""].median()+data[""TicketClean""].std()"	1	1
tt.describe()	1	1
dataset.drop(columns=['Name', 'Ticket'], axis=1, inplace=True)	1	1
df['Title'] = df['Title'].replace(['Capt','Don','Dona','Jonkheer','Rev'], 'Rare')	1	1
"data.loc[(data[""Age""] > 64), 'Age'] = 4"	1	1
"axs[1].set_title(""People who survived"", fontsize=20)"	1	1
df_test['FamilyCount'] = (df_test['SibSp'] + df_test['Parch'])	1	1
"df_train.loc[ df_train['Age'] <= 16, 'Age'] 					      = 0"	1	1
plt.rcParams['axes.unicode_minus'] = False # 用来正常显示负号	1	1
test_df['Embarked'] = test_df['Embarked'].map({'S': 1, 'C': 2, 'Q': 3})	1	1
"df_test[""Embarked""].fillna('S', inplace=True)"	1	1
df['TitleNumber'] = df['Title'].replace(to_replace=titlesRare, value=0).replace(di).replace('Dona',0)	1	1
loc[1]	1	1
submit['Survived'] = test_y	1	1
x.loc[valid_indices], y.loc[valid_indices]	1	1
all_df.groupby('Ticket')['PassengerId'].count()	1	1
test_dataset.loc[(test_dataset['Age'].isnull()) & (test_dataset['Sex'] == 'female'), 'Age'] = (female_ages_survived_age['Age'].mean() + female_ages_not_survived_age['Age'].mean())/2	1	1
train_df['Family'] = train_df['Parch'] + train_df['SibSp']	1	1
df.drop(['Name','Sex','Ticket','Fare','Cabin','Embarked'],axis=1)	1	1
full.loc[full.FamilySize > 1, 'IsAlone'] = 0	1	1
train_dataset.PassengerId.nunique() == train_dataset.shape[0] else print ('Oops')	1	1
Test_Master['FamilySize'] = Test_Master['SibSp'] + Test_Master['Parch']	1	1
result.to_csv('laaaast.csv', index=False)	1	1
full_dataset['FareBand'] = pd.qcut(full_dataset['Fare'], 4)	1	1
names.loc[(names['rev'])==1,'rev'] = 0	1	1
tfidf.transform(test_df[textcol].values)	1	1
testdata['AgeCategory']=0	1	1
train_df.loc[(train_df['Age'].isnull())&(train_df['Title']=='Miss'),'Age'] = 22	1	1
"comb_data[""PassengerId""] = comb_data[""PassengerId""].astype(int)"	1	1
"data['Sex'] = data['Sex'].map({""male"": 1, ""female"": 0}).astype(int)"	1	1
df_data.groupby(['Family_Name', 'Fare']):	1	1
"test_df.loc[(test_df['Fare']>307)&(test_df['Fare']<=409),""Fare""]=3"	1	1
test_df.drop(labels='Ticket', axis='columns', inplace=True)	1	1
"test_df[""Y_scores""]=Y_scores_pclass3"	1	1
model_type.append('k-NN')	1	1
"train_data[""FamilySize""] = train_data[""SibSp""] + train_data[""Parch""] + 1"	1	1
cabin_only.columns.values[1:]:	1	1
train_data.drop(['Survived'], 1, inplace=True)	1	1
df_pred.head(2)	1	1
model.add(Dense(1, activation='relu'))	1	1
"test_df[""Family""].loc[test_df[""Family""] > 0] = 1"	1	1
titanic['Fare_grouped']=titanic['Fare_grouped'].astype('int')	1	1
train['Sex'] = train['Sex'].map({'male': 1, 'female': 0})	1	1
famsz_survive_crosstbl.divide(famsz_survive_crosstbl.sum(axis = 1), axis = 0)	1	1
age_dead.hist(bins=70, ax= axis1).set(ylabel='Count')	1	1
dataset.groupby(['Pclass', 'FareCat']).size().unstack(0).fillna(0)	1	1
booster_submission['Survived'] = boost_preds	1	1
train.loc[(train.Age >= 25) & (train.Age < 35),'Age'] = 3	1	1
"data_copy.loc[data_copy[""Sex""] == ""male"", ""Sex""] = 1"	1	1
train.loc[:,['PassengerId','Age','Fare', 'Pclass','Title','PassengerType','FamilySize','Embarked','Gender']]	1	1
"logreg_solution.to_csv(""predict_logistic_regression.csv"", index_label = [""PassengerId""])"	1	1
dset.loc[dset['Fare'].isnull(), 'Fare'] = dset['Fare'].mean()	1	1
train.fillna(value=0.0)	1	1
a_score.mean()	1	1
data_test_csv.describe()	1	1
Train_Master.loc[(Train_Master['Age'] > 36) & (Train_Master['Age'] <= 47), 'Age'] = 2	1	1
df['Fare'] = (df['Fare']-df['Fare'].min()) /(df['Fare'].max()-df['Fare'].min())	1	1
data.loc[index,NstatusField] = PNetworkSum / PNetworkSize	1	1
submission.to_csv('titanic_jpark_v6_SVC.csv', index=False)	1	1
"df[""Embarked""].fillna(df_train.Embarked.mode()[0], inplace=True)"	1	1
train['Cabin_'] = train['Cabin'].notnull().astype('int')	1	1
new_data.drop('Embarked', inplace=True, axis=1)	1	1
dataset_df['Embarked'] = dataset_df['Embarked'].map({'S':0, 'C':1, 'Q':2})	1	1
df_train['family_size'] = df_train['parch'] + df_train['sibsp'] + 1	1	1
comb['Age'] =  comb['Age'].fillna(-1)	1	1
all_data.groupby(['Pclass', 'Sex', 'Married'], as_index=False)['Age'].median()	1	1
traindf.dropna(axis=1).describe()	1	1
df.loc[((df.Cabin == 1) & (df.Pclass == 3)) , 'Ca_Cl'] = 6 #poor with cabin	1	1
categorical_df[0].dropna().drop(['PassengerId'], axis=1)	1	1
"train[""title""] = [i.replace('Lady', 'rare') for i in train.title]"	1	1
data.loc[data.FamilySize > 4, 'FamilySizeBand'] = 3	1	1
full['_AgeLinearR'] = pd.cut(full['_AgeLinear'],[0,9,18,30,40,50,100]) # Add column with range of Age	1	1
"dataset.drop(labels = [""Parch"", ""SibSp""], axis = 1, inplace = True)"	1	1
dfcopy.Fare.values.reshape(-1,1)	1	1
train_df['Nclass'] = train_df['Nclass'].map({'Mr': 1, 'Mrs': 2, 'Miss': 3, 'Other': 4})	1	1
"died[""Age""].plot.hist(alpha = 0.5,color = 'black',bins = 50)"	1	1
train.replace({'Sex':{'male':0,'female':1}})	1	1
X_test.loc[X_test['Sex'] == 'female', 'Sex'] = 1	1	1
X_test.loc[X_test['Sex'] == 'female', 'Sex'] = 0	1	1
"my_solution.to_csv(""solution_1.csv"", index_label = [""PassengerId""])"	1	1
test.fillna(test.mean(),inplace=True)	1	1
train.pivot_table(index= ['Sex'],values = ['Survived'])	1	1
train_dataset.groupby('Title')['Age'].mean()	1	1
"df_test[""Sex""] = df_data[""Sex""][891:]"	1	1
train_data['Survived'] # y is the column we're trying to predict	1	1
"train_df[""Embarked""] = train_df[""Embarked""].apply(embarked_indexer)"	1	1
test_data['Title']=Titles=test_data['Name'].apply(lambda x: x.split(',')[1].split('.')[0] if ',' in x else x)	1	1
train_csv.copy()	1	1
"dataframe2[""Parch""]= dataframe[""Parch""]"	1	1
dict_K['Logistic'] = get_acc(x_train,y_train,classifier)	1	1
"dataset[""Embarked""].fillna(dataset[""Embarked""].dropna().mode()[0], inplace=True)"	1	1
"test[""Deck""]"	1	1
train['Cabin'] = StandardScaler().fit_transform(train['Cabin'].values.reshape(-1, 1))	1	1
test.drop(['Sex'],axis=1)	1	1
"train_data[""CabinLetterF""] = 0"	1	1
sns.boxplot(y='Fare', x='Sex', ax=ax1, data=train_df, linewidth=1, saturation=5, palette=palette2)	1	1
all_data.loc[np.isnan(all_data['Age']), 'Age'] = age_null_random_list	1	1
data.loc[data.FamilySize > 4, 'FamilySizeBand'] = 4	1	1
train['Age'].plot.hist(bins=35, ec='white')	1	1
one_hot_encoded_test_data.dtypes.sample(10)	1	1
model.add(Dense(L1, input_dim =L0, kernel_initializer='normal', activation='relu'))	1	1
titanic_df[['Fare','Survived']][titanic_df['Fare']<200]	1	1
train_scaled.transform(train_temp)	1	1
train_df1['Fare']	1	1
test['SibSp']	1	1
"train_df.append(test_df)[""Fare""].dropna().median()"	1	1
classifier_results['ada_best'] = (ada_accuracy, ada_best)	1	1
predict_GP.astype('int')	1	1
comb['Prefix'] = comb['Ticket'].apply(lambda x: get_prefix(x))	1	1
"full_data[""Fsize""] = full_data['SibSp'] + full_data['Parch'] + 1"	1	1
ada_rfecv.transform(ada_rfecv_final_test)	1	1
titanic[['Age', 'Survived']]	1	1
df_train['Sex'] = df_train['Sex'].apply(lambda x: 1 if x == 'female' else 0)	1	1
"test_df.loc[(test_df[""Age""]>32)&(test_df['Age']<48),'Age']=2"	1	1
train.Pclass.isnull().value_counts() # there are no null values	1	1
train_df.replace('Q',1)	1	1
combined_df['title'] = combined_df['title'].replace('mme', 'mrs')	1	1
score_list_recall.append(cross_val_score(clf, data_now, trainLabel, scoring='recall', cv = 5).mean())	1	1
df['Parch'].notnull().mean()	1	1
titanic_train['Age'] = titanic_train[['Age','Pclass']].apply(impute_age,axis=1)	1	1
df.loc[df.FamilySize == df.FamilySize.max(),['Name','Survived','FamilySize','Ticket']]	1	1
"train.loc[train[""Embarked""]=='S', ""Embarked_S""] = True"	1	1
x_train['Fare'] = (x_train['Fare']/20).astype('int64')	1	1
trainingdata.drop('Survived', axis=1)	1	1
"df[""Sex""] = df[""Sex""].map({""female"": 1, ""male"": 0}).astype(int)"	1	1
df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()	1	1
"train_df[""title""] = [""Rare"" if i in rare_title else i for i in train_df[""title""]]"	1	1
"ship[""Embarked""] = ship[""Embarked""].fillna(""S"")"	1	1
data['Embarked']=data['Embarked'].astype(int)	1	1
data.Cabin_Letter_F.astype(np.uint8)	1	1
os.path.join(titanic_path, filename)	1	1
train_set.Fare.hist()	1	1
"df.loc[(df[""Title""]==t) & np.isnan(df[""Age""]), ""Age"" ] = full[full[""Title""]==t].Age.median()"	1	1
"df_train.pivot_table(""Name"", ""Embarked"", ""Pclass"", ""count"").plot(kind=""bar"", stacked=True, ax=axes[1])"	1	1
test_df.drop(['Ticket','Name'], axis = 1)	1	1
dataset['Title'] = dataset['Name'].str.extract(' ([A-za-z]+)\.', expand=False)	1	1
test_df['aile'].loc[test_df['aile']>0]=1	1	1
data['MedF'] = data['f_size'].map(lambda x: 1 if 3 <= x <= 4 else 0)	1	1
dft.replace(['male','female'],[0,1])	1	1
df_train.iloc[:,0:1]	1	1
"X[""Sex""] = X[""Sex""].astype('category').cat.codes"	1	1
dataset['Cabin'],	1	1
"test[""embarked_""] = test.apply(lambda row:def_embarked(row[""Embarked""]),axis=1)"	1	1
train.Embarked.fillna(value = 'S', inplace=True)	1	1
"test.loc[test[""Family""]>0, ""Family""] = 1"	1	1
trainData['Label'] = trainData['Survived']	1	1
dataset['Cabin']:	1	1
is_alone['Samples'] = samples['Survived']	1	1
"train_df[['AgeBand', 'Survived']].groupby([""AgeBand""], as_index=False).mean().sort_values(by='AgeBand', ascending=True)"	1	1
"train.loc[train.Sex == ""female"", ""Hypothesis""] = 1"	1	1
dataset_df.loc[dataset_df['Age'].isnull()==True]['Title'].values	1	1
train_df['TitleBand'] = train_df.Title.map( lambda x: Titles_dict[x]).astype(int)	1	1
train_data_only_first_class_female_Cherbourg_age['Age']:	1	1
df['cabin_letter'] = df.Cabin.apply(lambda c: c[0] if not pd.isnull(c) else 'N') # N=none	1	1
dataset['Fare'][np.isnan(dataset['Fare'])] = dataset['Fare'].mean()	1	1
"x.drop(""Ticket"", axis=1)"	1	1
cabinNum.append('0')	1	1
"results[""Model""],"	1	1
df.applymap(lambda s: gender_map.get(s) if s in gender_map else s)	1	1
reserve.shape	1	1
train['Ticket_First']=train.Ticket.str[0]	1	1
train_df.loc[:,['Survived']].values	1	1
full.loc[full['Title'].isin(['Mille','Ms','Lady']),'Title'] = 'Miss'	1	1
k[0] not in intervals:	1	1
"train_data[""Sex""].value_counts(normalize=True)"	1	1
test_one['Cluster'] = cluster_map_test['cluster']	1	1
"data['Title1'] = data['Name'].str.split("", "", expand=True)[1]"	1	1
"data_test.drop([""Name"",""Cabin"",""Ticket"",""Embarked""],axis = 1,inplace = True)"	1	1
train_df['Survived'].groupby(train_df['Pclass']).count()	1	1
"df_data[""Embarked""] = df_data[""Embarked""].map(embarked_mapping)"	1	1
final['PassengerId'] = test.PassengerId	1	1
traindf.drop(['AgeBand'], axis=1)	1	1
data['Sex'] =data['Sex'].replace('male', 0)	1	1
Titanic_Kaggle_Submit.PassengerId.astype(int)	1	1
correlation.set_index('Age').reset_index()	1	1
glbl['show_figs'] = 1      # flag to enable printing figures	1	1
"data1.ix[order].plot(kind=""bar"",color = chart1_color)"	1	1
df['TicketPrefix'] = df['Ticket'].apply(get_ticket_prefix)	1	1
combined['Large'] = combined['FamilySize'].map(lambda s : 1 if 5<=s else 0)	1	1
sub.to_csv('prediction1_titanic.csv',index=False)	1	1
in ['Parch', 'PassengerId', 'Pclass', 'SibSp']:	1	1
train_data.loc[mrsmask, 'Age'] = 35	1	1
dataset.loc[ dataset['Age'] > 63, 'Age'] = 4	1	1
train_df.loc[train_df['Embarked'].isnull(), 'Embarked']=train_df.Embarked.dropna().mode()[0]	1	1
"dat[""Ticket""] = dat[""Ticket""].str.replace(""."","""").str.replace(""/"","""").str.upper().str.split("" "",expand=True)[0]"	1	1
frame['Female'] = (frame.Sex=='female').astype(int)	1	1
sns.boxplot(x='Pclass',y='Age',data=train_df)	1	1
df['Family'] = df['SibSp']+df['Parch']	1	1
test_dataset.groupby('Title')['Age'].mean()	1	1
"dftotal[""KSurvivalRate""]=0"	1	1
survivors.loc['Children']=data.loc[data.Child == 1].loc[data.Survived == 1]['Survived'].count()	1	1
ax[1][1].set_xticklabels(['1','2','3'])	1	1
arr.mean()	1	1
X['Embarked'].fillna(method = 'pad',inplace = True)	1	1
dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age4'] = 1	1	1
Test_data.loc[Test_data['Sex'] == 'female', 'Sex'] = 1	1	1
big.groupby('Ticket'):	1	1
"inDF[""Ticket""].apply(lambda x : df_fs[x])"	1	1
jcleme_submission.to_csv('new_jcleme_xgb_submission.csv', index = False)	1	1
dataset.loc[ (dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3	1	1
"df[""TyCabin""] = df.Cabin.str.extract('([A-Za-z])', expand=False)"	1	1
dataset['Embarked'] = dataset['Embarked'].map({'S':0 , 'C':1 , 'Q':2}).astype(int)	1	1
all_Data.isnull().sum().sum()	1	1
names_op.append(name)	1	1
"data_2[""Age""].fillna(value=29.69).head(10)"	1	1
full_dataset.Title.replace({'Mlle':'Miss', 'Ms':'Miss', 'Mme':'Mrs'}, inplace = True)	1	1
X_train['surname'] = X_train['Name'].apply(process_surname)	1	1
numerical_columns.append('SurnameGroup_include_surviving_men')	1	1
pd.isna(val):	1	1
train.drop(['Name', 'Fare', 'Ticket', 'Cabin'], axis=1).head()	1	1
titanic_train_dataset['TitleScore'] = titleScore_list	1	1
train['Embarked'] = train['Embarked'].apply(emark_num)	1	1
tf['PassengerId']	1	1
np.sum(men_onboard)/np.size(men_onboard)	1	1
data['Room'] = room	1	1
df.drop(columns=['PassengerId'])	1	1
embark_dummies_titanic.drop(['S','Q'], axis=1, inplace=True)	1	1
df_train['Embarked'].describe()	1	1
titanic_train_dataset[['TitleScore', 'Survived']].groupby(['TitleScore'], as_index=False).mean()	1	1
dataset['Title'] = dataset['Title'].replace(['Ms.', 'Mlle.'], 'Miss.')   #Miss. is 2	1	1
df_num_test.median().values	1	1
test.index.size	1	1
df[['Age','Age_bin']].head(20)	1	1
age_plot_survived.std()	1	1
cabin['Cabin'] = full.Cabin	1	1
train.drop(['Name','PassengerId'],axis=1)	1	1
df_test.sample(10)	1	1
dataset['Age'][i] = 0	1	1
dataset['Age'][i] = 1	1	1
dataset['Age'][i] = 3	1	1
dataset['Age'][i] = 4	1	1
dtest.values	1	1
dataset_train.loc[:,'Survived'].values	1	1
"train_data.loc[(train_data[""Age""] > 16) & (train_data[""Age""] <= 30), 'Age_Group'] = 2"	1	1
train_df.Age.hist(bins = 30, ax=axes[0])	1	1
train_data.set_value(index,'AgeRange','30-45')	1	1
df_train['cos_age'] = df_train['age'].map(np.cos)	1	1
combo['FamilySize'] = combo['FamilyCount'].apply(lambda val : 'Single' if val < 2 else 'Small' if val < 4 else 'large' if val < 5 else 'Big')	1	1
data.drop(data[data.Sex == 'male'].index)	1	1
"New_Df[""Cabin""] = New_Df.Cabin.apply(lambda x: x[0])"	1	1
result.to_csv('result.csv', header=('PassengerId','Survived'),index=False)	1	1
df_train['Embarked']	1	1
"_df.loc[idxs, ""fare""] =  _df.loc[idxs, ""fare""] / _df.loc[idxs, ""group_count""]"	1	1
"train_df[[""Sex"", ""Survived""]].groupby([""Sex""]).mean().plot.bar(ax = ax[1])"	1	1
dataset_train.loc[:,'Name'] = title	1	1
dataset['B'] = np.where(dataset['CabinChar']=='B',1,0)	1	1
"data2[""Name""].unique()"	1	1
"row[""Family""] == 0 :"	1	1
random.sample(list(female['Survived']),50)	1	1
"predictions.to_csv(""my_predictions.csv"", index = False)"	1	1
train[['family_size','Survived']].groupby('family_size',as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
"df[""Agebin""]=pd.cut(df[""Age""],4,labels=[1,2,3,4])"	1	1
train_df[['Pclass','Sex_Code','Age','SibSp','Parch','Fare','Agebin_Code','Farebin_Code','FamilySize','IsAlone','Title_Code','Embarked_Code']]	1	1
"test.drop(labels = [""Survived"", ""PassengerId"", ""DataType""],axis = 1)"	1	1
test.drop('Cabin',axis = 1,inplace = True)	1	1
df.loc[index, 'Title'] = 'Other'	1	1
"titanic_train.groupby(""Sex"")"	1	1
data_df['Fare']=data_df['Fare'].fillna(median_value_fare)	1	1
"df_data[""Ticket""] = Ticket"	1	1
data_test.head(5)	1	1
data.loc[ (data['Fare'] > 14.454) & (data['Fare'] <= 31.00) , 'Fare'] = 2	1	1
s_ans.set_index('PassengerId')	1	1
tmp.sort_values(by='cnt', ascending=0)	1	1
fpr.shape	1	1
"titanic.drop([""PassengerId""],axis=1)"	1	1
test.drop('Name' , axis = 1)	1	1
"testing.at[count, ""Title""] = "" Other"""	1	1
combine.ix[(combine['Age'].isnull())&(combine['Pclass']==1)&(combine['Sex']=='female'),'Age'] = 35	1	1
"df['Title'] = df.Name.str.split("", "", expand = True)[1].str.split(""."", expand = True)[0]"	1	1
data.loc[ (data['Age'] >18) & (data['Age']<=22),'Age'] = 2	1	1
df['Lname'] = df.Name.apply(lambda x: x.split()[0][:-1])	1	1
df_train[['Survived', 'Sex','Pclass']].groupby(['Sex', 'Pclass']).mean()	1	1
all_data.drop('Embarked', axis=1, inplace=True)	1	1
gird_result.named_steps['clf']	1	1
data.Survived.groupby(data.name_len_level).mean()	1	1
"train_dataset.loc[ (train_dataset.Sex == ""female"") & (train_dataset.Embarked == ""C"") & (train_dataset.Pclass == 1), :]"	1	1
test_orig_df['PassengerId'],	1	1
i['Title'] = i['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]	1	1
"sns.boxplot(y = ""Age"", x = ""Parch"", data = X_train, palette = ""muted"")"	1	1
data.loc[(data.passenger_fare>30.49) & (data.passenger_fare<=30.5) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>30.49) & (data.passenger_fare<=30.5) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
test.loc[:,['PassengerId']]	1	1
train[['Survived','Pclass']].groupby(['Pclass']).mean().sort_values('Survived',ascending=False).plot.bar()	1	1
test['SibSp']=test['SibSp'].apply(replace2)	1	1
str.get(1).str.split('\.').str.get(0)	1	1
"train_features.to_csv(""train_features.csv"",index=False,header=True)"	1	1
data['Fare'] = data['Fare'].fillna(13.30) # Pclass=3 mean	1	1
"test[""Embarked""] = test[""Embarked""].map( {'S': 1, 'C': 2, 'Q': 3} ).astype(int)"	1	1
"test.drop([""SibSp"",""Parch""], axis=1)"	1	1
df_train['SexEncoded'] = le_sex.transform(df_train['Sex'])	1	1
"df_train[""Embarked""].value_counts().plot(kind='bar', color='teal', alpha=0.6)"	1	1
etc_reduced_test.drop(drop, axis = 1, inplace = True)	1	1
X_train.align(X_test, join='outer', axis=1, fill_value=0)	1	1
feature_dataframe['mean'] = feature_dataframe.mean(axis = 1)	1	1
titanic['Name']:	1	1
test.loc[(test['Age'].isnull()) & (test['Sex'] == 'male'), 'Age'] = aveMaleAge	1	1
test['Fare'].values.reshape(-1, 1)	1	1
"test[""cabin_""] = test.apply(lambda row:def_cabin(row[""Position""]),axis=1)"	1	1
"copy_df[""EmbarkedQ""] = train_OneHotEncoded[:,2]"	1	1
Train_data.loc[Train_data['Sex'] == 'female', 'Sex'] = 1	1	1
data[2] # Travel class of passenger	1	1
target_columns.append('Sex')	1	1
train_num.as_matrix()	1	1
titanic_test['Title']=titanic_test.Name.map(lambda x: x.split(',')[1].split('.')[0].strip())	1	1
Data['Title1'] = Data['Title1'].astype('category').cat.codes	1	1
pca.transform(x_train_scaled)	1	1
node_count_df.mean(axis=1),	1	1
"test.loc[test[""Embarked""] == 'S', 'Embarked'] = 0"	1	1
train_df[['Name', 'Pclass', 'PClass_1', 'PClass_2']].head(2).T	1	1
axs[1].set_title('Survival Rate vs SibSp')	1	1
"full[""title""] = extract_titles(full)"	1	1
X_test['Fare'].fillna(X_test['Fare'].median(), inplace=True)	1	1
ax[1].set_title('Accuracy')	1	1
titanic['Age'] = titanic['Age'].fillna(np.median(titanic[titanic['Age'].notnull()]['Age']))	1	1
test_X.drop(columns=['PassengerId', 'Survived'])	1	1
all_data.loc[:, 'FamilyID_Code'] = le.transform(all_data['FamilyID'].values)	1	1
titanic_train_data['Survived'].value_counts()	1	1
dfTrain['Survived'].groupby(dfTrain['Pclass']).mean()	1	1
row['Age'] == 1 and row['Age'] < 40 :	1	1
"result.rename(columns={'median':""Age""})"	1	1
input_arr['Pclass']	1	1
trainingset.drop(['Ticket'],axis=1)	1	1
scaler.transform([[4.7, 3.1]])	1	1
"res_filtered.to_csv(""submission.csv"", index=False)"	1	1
test['Age'] = scaler.fit_transform(test['Age'].values.reshape(-1, 1))	1	1
train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
re.sub('[^0-9]+','',str(row['Cabin']).split(' ')[0])	1	1
test.Sex.apply(encodeSex)	1	1
pd.isnull(test_input).any()	1	1
all_data.drop('Sex', axis=1) # Typeと重複しそう	1	1
nn_predictions.round().astype(int)	1	1
X['Fare_cat'] = pd.qcut(X.Fare, q=4, labels=False)	1	1
test['Cabin'] = test['Cabin'].apply(lambda x: 'Z' if x is np.nan else x[0])	1	1
df_final['MrMale'] = np.zeros(len(df_final))	1	1
data['Title'] = data['Name'].str.split('.').str.get(0)	1	1
new_test[['class1','class2']] = pd.get_dummies(new_test['Pclass'],drop_first = True)	1	1
X2['Embarked'] = X2['Embarked'].replace(to_replace=['S', 'C', 'Q'], value=[0, 1, 2])	1	1
train['Cabin_first_ltr'] = np.where(train['Cabin'].isnull(), 'Null', 'Not Null')	1	1
Submission.to_csv('titanic.csv',index=False)	1	1
all_names['LastName'] = ''	1	1
"test['Cabin'] = test['Cabin'].fillna(""U0"")"	1	1
submission.to_csv(f'{PATH_WORKING}submission.csv', index=False)	1	1
data_train.loc[data_train['Embarked'].isnull(),:]	1	1
"test[""Cabin""] = test[""Cabin""].apply(cabintoint)"	1	1
test['MilitaryTitle'] = 0	1	1
"test_p['Family'] =  test_p[""Parch""] + test_p[""SibSp""]"	1	1
df.to_csv('submissionFastAI2.csv', encoding='utf-8', mode = 'w', index=False)	1	1
dataset.loc[(dataset['age'].isnull()) & (dataset['sex'] == i) & (dataset['pclass'] == j+1), 'age'] = guess_ages[i, j]	1	1
df_Cabin_NaN.loc[:,'Cabin']= y_train_Cabin_Nan	1	1
"test[""Sex""] = lb_make.fit_transform(test[""Sex""])"	1	1
dataset['AgeBin'] = label.fit_transform(dataset['AgeBin'])	1	1
df.ix[891:1308]	1	1
dataset_train.drop(labels=['SibSp','Parch','Ticket','Fare','Age','PassengerId','Cabin'],axis=1,inplace=True)	1	1
dfTrain['Fare'] = dfTrain['Fare'].fillna(dfCombined['Fare'].mean())	1	1
"df_test[""Age""].fillna(df_test[""Age""].median(),  inplace = True)"	1	1
"new_df[""Fare_qd""] = normalize( new_df[""Fare_qd""] )"	1	1
"df_test[[""PassengerId"", ""Survived""]]"	1	1
test_df['Age'] * test_df['Pclass']	1	1
best_grid_stats.append(grid_stats[grid_stats[metric_name] == grid_stats[metric_name].min()])	1	1
train4['Embarked'] = le.fit_transform(train4['Embarked'])	1	1
train_df.sample(frac=1).reset_index(drop=True)	1	1
data_set['Age'].hist()	1	1
combined.drop('Title', axis = 1, inplace = True)	1	1
df_train['Pclass'] = df_train['Pclass'].astype('category')	1	1
test1.dtypes	1	1
"LR_result[0][""best_model""],"	1	1
X_train['Age'].fillna(X_train['Age'].median(), inplace = True)	1	1
dataset['Male'] = dataset['Sex'].map(lambda s: 1 if s == 0 else 0)	1	1
dataset.groupby('Sex').Survived.agg(['count', 'sum', 'mean', 'std'])	1	1
by_Pclass['survival_rate'] = by_Pclass['sum'].divide(by_Pclass['count'])	1	1
pp.boxplot([fare_1, fare_2, fare_3])	1	1
data_train.drop('Age_imputed',axis=1)	1	1
pd.isnull(x['Age']):	1	1
"train_df[""CabinLetter""] = train_df[""Cabin""].astype(str).str[0]"	1	1
ax[1].set_title('Survived vs. Dead by Embarked')	1	1
incorrect_sum.sort_values(ascending=False)	1	1
data_test_all['Title'] = data_test_all.Name.apply(lambda a:re.search(' ([A-Z][a-z]+)\.',a).group(1))	1	1
titanic_data['SharedTicket'] = ticket['SharedTicket']	1	1
splittrain['Survived']	1	1
titanic_df[['Title','Age']].groupby('Title').mean()	1	1
"people[""per_survived""]=(people[""survived""]/people[""count""])*100"	1	1
"df_train.hist(""Survived"", by=""Sex"",figsize = [10,3])"	1	1
df1['Cabin']	1	1
"train['Title']=train[""Title""].map(title_map)"	1	1
LearnResults[0],	1	1
train.apply(lambda x: hasFamily(x), axis=1)	1	1
df['Sex'] = pd.factorize(df['Sex'])[0]	1	1
np.shape(test)	1	1
train_data.set_value(row_mask, 'Fare', mu+5*sd);	1	1
titanic.count()	1	1
model.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu', input_dim = 17))	1	1
test_data.ix[~(test_data['Pclass'] != 1)]	1	1
y_pred.to_csv('Titania_Kernel_SVM.csv', index=False)	1	1
input_df.isnull().sum().sort_values(ascending=False)	1	1
allset.drop(['Pclass'],axis=1)	1	1
test7['Fare'] = pd.cut(test7['Fare'], 5, labels=False)	1	1
df['Honoric'] = df['Honoric'].replace({'Mlle' :'Miss', 'Ms': 'Miss', 'Mme': 'Mrs'})	1	1
"result.to_csv(""titanic_lg.csv"", header=True, index=False,  )"	1	1
allfeat.drop(columns='Embarked') #column no longer needed	1	1
data_set['Pclass'].hist(bins = 3)	1	1
data.loc[(data.Fare<=60.3)&(data.Pclass==1), 'PassengerCat']=1	1	1
dataset.loc[ dataset['Fare'] <= 2.7, 'Fare']      = 0	1	1
"test.loc[test[""Fare""].notnull() & test[""Age""].isnull(), ""Age""] = clf.predict(X_Age_n)"	1	1
"df['Cabin_number'] = df['Cabin'].apply(lambda x: 0 if len(x) == 1 else int(x.split("" "")[-1][1:]) if x != ""No"" else 0)"	1	1
titanic_training_data.head(10)	1	1
train.drop(columns=['Ticket','Name','Cabin','PassengerId'],inplace=True)	1	1
train['TSNE2'] = new_features.iloc[0:(train_rows-1),1]	1	1
data.Title.str.replace('Mlle', 'Miss')	1	1
all_df['Pclass'].dtype	1	1
dataset.drop('Survived',axis = 1)	1	1
train.loc[(train['family_size']>1)&(train['family_size']<=4),'travel_company']=1	1	1
df_train2.sort_index()	1	1
df_noage.groupby(['Title', 'Pclass'], as_index=False)['Name'].count()	1	1
raw_train.shape	1	1
df_test.loc[:, l + '_feat'] = pd.Series(tr_test, index=df_test.index)	1	1
dataset['IsAlone'] = dataset['FamilySize'].apply(lambda x: 1 if x == 1 else 0)	1	1
df_train['Embarked']= df_train['Embarked'].fillna('S')	1	1
data.groupby(['Title2','Pclass'])['Age'].mean()	1	1
df_train_ml.drop('Survived', axis=1)	1	1
"ALL_DATA[""Embarked""].unique()"	1	1
df['SibSp'] = top_coding(df,'SibSp', 4)	1	1
titanic_final.drop('Sex', axis=1, inplace=True)	1	1
inputData['Name'].values.tolist()	1	1
all_data['age_unknown'] = all_data.Age.isnull()	1	1
"titanic_test_data[""Fare""] = titanic_test_data[""Fare""].fillna(titanic_training_data[""Fare""].median())"	1	1
Titanic_Master['Fare'][Titanic_Master['Fare']<=upper_quartile+1.5*iqr].max()	1	1
model.add(Dense(32, activation='softplus'))	1	1
df_combined.drop('Name',axis=1)	1	1
"le.transform(train[""Embarked""])"	1	1
"i.loc[i[""Title""] == ""Mme."",[""Title""]] = ""Other"""	1	1
data_test.drop(['Cabin'], axis=1, inplace=True)	1	1
combined_data.iloc[891:]	1	1
train_set.loc[:,['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
train_agg.columns.levels[0]:	1	1
all_data.loc[:, 'FamilyID'] = all_data.apply(lambda row: (str(row['FamilySize']) + row['LastName']), axis=1)	1	1
x.drop('Pclass',axis = 1)	1	1
train_set['Survived']#.where(pd.notnull(train_set['Survived']))	1	1
test['F2'] = np.array(test['CategoricalFare'] == 2).astype(np.int32)	1	1
allset.loc[(allset['TicketFirst']=='3') | (allset['TicketFirst']=='L') | (allset['TicketFirst']=='S')| (allset['TicketFirst']=='C'),'TicketBucket']='Medium'	1	1
"titanic_train[""Age_cat""].value_counts() / len(titanic_train)"	1	1
accuracy.eval(feed_dict={inputs: X_test, label: labels_test})	1	1
"df_train[""len_name""].describe()"	1	1
data_train.loc[:,['Survived','FamilyPresent']].groupby(['FamilyPresent']).sum()	1	1
combined.loc[(combined['Title']=='Dr') & (combined['Sex']=='female'),'Title'] = 'Mrs'	1	1
data['Woman'] = (data['Woman']).fillna(0)	1	1
training_data['hasCabin'] = training_data.Cabin.notnull().astype(int)	1	1
"titanic['Emb_Surivived_mean'] = titanic['Embarked'].apply(lambda x: 0.55 if x == ""C"" else( 0.39 if x == ""Q"" else 0.34))"	1	1
DataSetGender.fillna(0)	1	1
X_train['Cabin'].iloc[i] = cabinToValue(X_train['Cabin'].iloc[i])	1	1
train['Age'][(train['Survived'] == 1) & (train['Age'].notnull())],	1	1
full['Cabin'].apply(DR)	1	1
"t_pre.str.replace(""[/.]"","""")"	1	1
finalTest[['Age','Sex']].apply(mapAgeToCategory,  axis=1)	1	1
sns.boxplot(x='Pclass',y='Fare',data=test,palette='winter')	1	1
"train[""AgeGroup""] = train[""Age""].apply(group_age)"	1	1
df_analysis.groupby('title_grp').agg({'Survived':['mean','sem']})	1	1
titanic_data.loc[ titanic_data['Fare'] > 31, 'Fare'] = 3	1	1
"train.loc[(train[""Fare""] >= 7.896) & (train[""Fare""] < 14.454),""Fare""] = 1"	1	1
clfs.append(xgbc)	1	1
"related_people.set_index(""Ticket"",inplace=True)"	1	1
"train.drop(""Survived"", axis=1).append(test)"	1	1
titanic_test['Ticket'].map(getTicketPrefix)	1	1
"bestModel[""classifier""].fit(X_train, y_train)"	1	1
train.Survived.values,	1	1
"train_data[""Embarked""].fillna(2, inplace=True)"	1	1
df['Name'] # delete the origional column 'Name' since we don't need it anymore	1	1
submission.to_csv('titaniclogistic.csv', index=False)	1	1
input_df['Name_Title'] = input_df['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	1	1
pd.merge(submissions, t_y, on='index', how='left')	1	1
dataset['Cabin']= dataset['Cabin'].map(cabin_mapping)	1	1
test['Cabin'].count()/418	1	1
data['female'] = data.apply(getsex,axis=1)	1	1
df['ticket_owners'].describe()	1	1
data.Personal_Titles_Mr.astype('category')	1	1
titanic_dmy.drop(['Cabin'], axis=1, inplace=True)	1	1
dataset.fillna(-1, inplace=True)	1	1
combine_df['Low_Survival_Ticket'] = np.where(combine_df['Ticket_Lett'].isin(['A','W','3','7']),1,0)	1	1
test.drop(columns=['Ticket','Name','Cabin',],inplace=True)	1	1
titanic_age_group.apply(len)	1	1
avg_std_age.iterrows():	1	1
df_all['Fare'] = df_all['Fare'].fillna(df_all_fare_not_null['Fare'].median())	1	1
big['XCabin'].iloc[group] = CN[0]	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Dr', 'Rare')	1	1
x_test['Fare'] = (x_test['Fare']/20).astype('int64')	1	1
"test[""Age""] = test[""Age""].fillna(data[""Age""].median())"	1	1
"vol[""Gboost""]=grid_GB.best_score_"	1	1
trmpX['Died'] = 1-trmpX['Survived']	1	1
df.loc[  df.Age <= 21,                 'AgeBand'] = 0	1	1
model.add(Dense(8, init='he_normal'))	1	1
train_data.values # Creates an array of the train data	1	1
df['Age'] = test_df['Age'].copy() #Replace 'Age' in main DataFrame	1	1
dataset['SibSp'] = dataset['SibSp'] .fillna(0)	1	1
train_df['Fare_range'] = pd.qcut(train_df['Fare'], 4)	1	1
"row['Title'] == ""Ms"":"	1	1
df['Alone']=np.where(df['Family_size']==1,1,0)	1	1
"test_data[""FamilySize""] = test_data[""SibSp""] + test_data[""Parch""] + 1"	1	1
titanicTest.drop('PassengerId',1)	1	1
combined_df['family_size'] = combined_df.SibSp + combined_df.Parch	1	1
test_features['Age'] = test_d['Age'].fillna(test_d.Age.mean())	1	1
train.drop(columns='PassengerId', inplace=True)	1	1
titanic_test_labels.values	1	1
tr['Title'] =tr['Title'].replace('Major',5)	1	1
lastname_table['Dead_mom_w_lastname'] = lastname_table['Dead_mom_w_lastname'].astype(int)	1	1
combine['Cabin'].isnull().sum() == 0:	1	1
trainData['Age_Group']=trainData['Age'].map(ageGroup)	1	1
clf[0]	1	1
vectorizer.transform(train.to_dict(orient='records'))	1	1
data.drop('Family', axis=1, inplace=True)	1	1
train.loc[:, 'Cabin'] = train.loc[:, 'Cabin'].fillna('None')	1	1
train_dataset.drop('PassengerId',axis=1,inplace=True)	1	1
dataset['Sex'] = le.fit_transform(dataset['Sex'])	1	1
model_data.loc[model_data.Pclass == 3,('Cabin_Letter')].value_counts()	1	1
encodeVals.head(10)	1	1
"train_data.loc[train_data[""Name""].str.contains(""Rev.""), ""TitleRev""] = 1"	1	1
combined_df.loc[(combined_df['Age'] >= 48) & (combined_df['Age'] < 64), 'age_group'] = 0.75	1	1
joined_df['Sex'] = joined_df['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
"df.Age.fillna(df.groupby(""Title"").Age.transform(""median""))"	1	1
dataset.groupby(['Pclass', 'IsAlone']).size().unstack(0)	1	1
submission['PassengerId'] = X_test['PassengerId']	1	1
combine.ix[(combine['Age'].isnull())&(combine['Pclass']==3)&(combine['Sex']=='female'),'Age'] = 22	1	1
combine_df.loc[ combine_df['Fare'] > 31, 'Fare']   = 3	1	1
input_df.drop('Survived', axis=1)	1	1
test.iloc[:,:].values	1	1
train_data.shape[1]	1	1
x_test['Pclass_2'] = test_df['Pclass'].apply(lambda x: 1 if x == 2 else 0)	1	1
"train['Embarked'] = train['Embarked'].map({""S"" : 0,""C"": 1, ""Q"": 3})"	1	1
dataset.loc[(dataset['Family_members'] == 7)|(dataset['Family_members'] == 10),'Family_members_Band'] = 5	1	1
data['Title'] = data['Title'].replace('Sir', 'Mr')	1	1
ax[1].set_title('Fare vs Survived')	1	1
train_df.loc[ (train_df.Embarked.isnull()),'Embarked' ] = mode_embark	1	1
"full[[""Pclass"", ""Fare""]][full[""Embarked""].isnull()]"	1	1
full.isnull().sum()  # Check with alues are empty	1	1
df_train['FareAvg'] = pd.cut(df_train['FareAvg'], 5, labels=[1, 2, 3, 4, 5])	1	1
titanic_df['AgeClass'] = titanic_df['Age'].apply(age_class)	1	1
df_test['Embarked'].replace(['S', 'C', 'Q'], [0, 1, 2], inplace=True)	1	1
age_df[['Age'] + field_list].copy()	1	1
all_data.drop(columns=['Ticket'], axis=1, inplace=True)	1	1
"data.loc[(data[""Fare""] > 31), 'Fare'] = 3"	1	1
"df_train[[""cab_b"",""cab_c"",""cab_d"",""cab_e"",""cab_f"",""cab_g"",""cab_t"",""cab_z""]] =pd.get_dummies(df_train[""cab""],drop_first=True)"	1	1
combined_data['Fare'].fillna(combined_data.iloc[:891]['Fare'].mean(),inplace = True)	1	1
df['Age'] = top_coding(df,'Age', 73)	1	1
params['boosting_type'] = 'gbdt'	1	1
female_mean_age_class.append(np.round(fage))	1	1
"train[""Embarked""]=train['Embarked'].fillna(""S"")"	1	1
data_df['Title'] = pd.Series(titles, index=data_df.index)	1	1
titanic_df.groupby(['Pclass', 'Embarked'])['Fare'].mean()	1	1
train_df1.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'])	1	1
"train.drop(""Cabin"",axis=1)"	1	1
test_data['salutation'] = test_data['Name'].str.extract(' ([A-Za-z]+)\.')	1	1
"combine['Embarked'].iloc[829] = ""C"""	1	1
testing_data['Cabin_8']	1	1
df['Frugal_First_Class_Single_Man'] = 0	1	1
tuned_params['n_estimators'] = sml.xgb.cv_results.shape[0] - 1	1	1
"submission_df.to_csv(""submission_poly.csv"", sep=',')"	1	1
train['Cabin'].value_counts(dropna=False)	1	1
all_data.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)	1	1
age_partition_size['Size'] = age_partition.groupby('Partition').size()	1	1
titanic_data['Title'] = titanic_data['Title'].replace(['Lady','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],'Rare')	1	1
train.loc[:,cols]	1	1
test.loc[(test['Pclass'] == 3) & (test['isAlone'] == 0), 'class_alone'] = 5	1	1
train_df.drop(['Ticket', 'Cabin', 'Name'], axis=1)	1	1
fig.axes[0].set_ylabel(c.Survived)	1	1
"titanic_test_df.loc[titanic_test_df[""Embarked""] == ""C"", ""Embarked""] = 1"	1	1
dataset.loc[(dataset['Age'] >= 17) & (dataset['Age'] < 32), 'Age'] = 1	1	1
df_train.loc[:,['Age','Fare']]=scaler.fit_transform(df_train.loc[:,['Age','Fare']])	1	1
"test_set[""Fare""].fillna(test_set.groupby(""Pclass"")[""Fare""].transform(""median""), inplace=True)"	1	1
ndarrays.append(array)	1	1
correlation['Age'] = merged.Age # Inserting Age in variable correlation.	1	1
"train_df[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived') #Comprasion female and male about alive or dead."	1	1
combine_df['Age'] = pd.cut(combine_df['Age'],5)	1	1
"row[""Sex""] == ""female"":"	1	1
train_df.describe(include=[np.object])	1	1
df2['title']=find_title(df2.Name)	1	1
"testd.fillna({""Fare"": 35})"	1	1
train.loc[(train['Age'].isna()) & (train['Sex']=='female')]	1	1
"df_test[""Fare""][np.isnan(df_test[""Fare""])] = random_fare"	1	1
i['ExistCabin'] = i.apply(getCabinKind, axis=1)	1	1
X['Fare']	1	1
training_set.drop(['SibSp', 'Parch'], axis=1)	1	1
test.drop(data_to_drop,axis=1,inplace=True)	1	1
titanic_dmy.loc[titanic_dmy.Survived.notnull()]	1	1
tit_df_san.loc[[61,829]]	1	1
"data_train['Age'][pd.isnull(data_train[""Age""])] = tofillwith"	1	1
train_processed.drop(columns='Survived'), train_processed.loc[:, 'Survived']	1	1
train_df['family_size'] = [row['Parch'] + row['SibSp'] for _, row in train_df.iterrows()]	1	1
df.Ticket.str.replace('[0-9]','')	1	1
data.drop(['Embarked'],axis=1,inplace=True)	1	1
results.append((i, score_train, score_val))	1	1
df['small_family'] = df['family_size'].apply(lambda size: 1 if size<=4 else 0)	1	1
data.Ticket_numerical.quantile(0.75) + (IQR * 3)	1	1
"cabins_df[""Cabin""].value_counts().plot(kind='bar', color='teal', alpha=0.6)"	1	1
np.where(dataset.Ticket==0)[0]	1	1
df['embarked_T'] = df['Embarked']	1	1
pred_df.to_csv('predictions.csv', index=False)	1	1
dataset['Embarked'] = dataset['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype(int)	1	1
full.groupby(['Surname','Fare']):	1	1
test.drop(['PassengerId', 'Ticket', 'Cabin'], axis = 1)	1	1
df.to_csv('my_first.csv', index = False)	1	1
df['IsMother'] = np.where(((df.Sex == 'female') & (df.Parch > 0) & (df.Age > 18) & (df.Title != 'Miss')), 1, 0)	1	1
df_features.sort_values(by='Importance',ascending=False).reset_index(drop=True)	1	1
"df[[""Title"", ""MaleSurvived"", ""FemaleSurvived"", ""Total""]]"	1	1
join.shape	1	1
tit_df.drop(['PassengerId', 'Ticket', 'Fare', 'Cabin', 'Embarked'], axis = 1)	1	1
"train[""Survived""][train[""Age""]<50][train[""Sex""]=='male'].value_counts()"	1	1
df['age_fill'].hist()	1	1
"data[""Survived""].corr(data[""Embarked Num""]),"	1	1
submission['Ticket_categorical'] = submission.Ticket.apply(lambda s: s.split()[0])	1	1
mutant.fitness.values	1	1
titanic['AgeCategory'] = le.transform(titanic['AgeCategory'])	1	1
train1['Embarked'] = train1['Embarked'].fillna('S')	1	1
test_df[['PassengerId', 'Survived']].to_csv('output_model1.csv', index=False)	1	1
df['Fare']=86.147806	1	1
train.groupby([train.Cabin.str[:1],pd.cut(train.Fare,np.arange(0,max(train.Fare)+50,50))]).PassengerId.count().unstack()	1	1
train_df['age_cat'] = pd.cut(train_df['Age'], 30, labels = np.arange(1,31))	1	1
traindat.describe()#Quick look at numerical variables	1	1
df.loc[829,'Embarked'] = 'C'	1	1
pd.DataFrame.from_dict(cv_results)	1	1
"submission[""PassengerId""] = Xtest[""PassengerId""]"	1	1
"y_train[""Survived""].unique()"	1	1
ts.dropna(axis=0, how='any')	1	1
df2.assign(IsAlone=alone)	1	1
data_df['Title'] = data_df['Name']	1	1
"df_tmp.to_csv(""knn_predictions_specified_TGS.csv"", index=False, float_format='%.f')"	1	1
df_train['Person'] = df_train[['Age','Sex']].apply(get_person,axis=1)	1	1
voters.get('10-VM-Ensemble Hard Voting')	1	1
"train.Title.replace(""Capt."", ""Officer"")"	1	1
df['Ticket_First'] = df.Ticket.str[0]	1	1
"titanic_test_df.loc[titanic_test_df[""Embarked""] == ""Q"",""Embarked""] = 2"	1	1
"medianage.loc[row[""Sex""], row['Pclass'], row[""type""]]"	1	1
"v[""Sex""] = v[""Sex""].map(input_sex)"	1	1
all_data['Title'] = all_data['Title'].replace(['Mlle'], 'Miss')	1	1
family_type.head()	1	1
df['Family_size'] = top_coding(df, 'Family_size', 7)	1	1
train['title'] = 'default'	1	1
"df_train[[""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Pclass""]]"	1	1
dftrain.head(5)	1	1
test_data['Fare'] = imputer.transform(test_data.iloc[:,6].values.reshape(-1,1))	1	1
dataframe.loc[dataframe[column_name] >= threshold, column_name] = 1	1	1
embarkDummy_titanic.drop(['S'],axis=1,inplace=True)	1	1
allset.drop(['Salutation'],axis=1)	1	1
ss2.transform(test_data_X)	1	1
train_data['FamilySize'] = train_data.SibSp + train_data.Parch	1	1
train['Sex'] = train['Sex'].replace(SEX).astype('category')	1	1
allset.loc[(allset['Age']<=10),'LastName']	1	1
"titanic_train_dataframe[""NormalizedPclass""] = titanic_train_dataframe[""Pclass""].map({1: 0.62, 2: 0.47, 3:0.24})"	1	1
axes[0].set_title('Embarked Counts')	1	1
test_df[['PassengerId', 'Survived']].to_csv('submission.csv', index=False)	1	1
X_train['Embarked'] = le.fit_transform(X_train['Embarked'].values)	1	1
"data1[""Survived""]=y_predict_dectree"	1	1
features['feature'] = final_train_set_X.columns	1	1
data.loc[data.Fare.isnull(), ('Fare')] = 0	1	1
"df.groupby(""Sex"")"	1	1
test_input.apply(lambda item : gm['Fare'][item['Sex'],item['Pclass'],item['Title']] if np.isnan(item['Fare']) else item['Fare'], axis=1)	1	1
combined['Pclass'].unique()	1	1
tit_df_san.drop(['SibSp','Parch'],axis=1,inplace=True)	1	1
df_output[['PassengerId','Survived']].to_csv('titanic.csv',index=False)	1	1
last_name_series.head(5)	1	1
df['Title'] = df['Name'].apply(lambda s: s.split(', ')[1].split(' ')[0])	1	1
d['Title'] = d['Title'].replace('Ms', 'Miss')	1	1
selection.transform(strat_test_set_X)	1	1
df.loc[df['Deck']=='N/A', 'Deck'] = 0	1	1
temp.copy() # replace 0 to 1 and 1 to 0 for the plotting	1	1
dataset.groupby(['Sex', variable]).size()['female']	1	1
train.drop(columns=['Name', 'SibSp', 'Parch', 'Ticket'], inplace=True)	1	1
np.append(X_train, X_test, axis = 0),	1	1
experiments.append((experiment_name, experiment))	1	1
"train.drop(""Survived"", axis = 1, inplace=True)"	1	1
data.drop(['Ticket'], axis=1)	1	1
"combined[""Title""] = combined[""Title""].astype(int)"	1	1
d['Title'] = d['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
df['SibSp_bin'] = pd.cut(df['SibSp'], bins=[0,1,5,20], labels=['None','Small','Large'], right=False)	1	1
"related_people.loc[related_people[""PassengerId""]==944,""RGroup""]=""Hocking_M"""	1	1
test_data.drop(['Sex', 'Embarked'], axis = 1, inplace = True)	1	1
df['IsChild'] = df['IsChild'].apply(int)	1	1
"combined.loc[pid, ""group_type""] = ""alone"""	1	1
train.groupby(['Cabin', 'Sex']).count()	1	1
X['Fare'].fillna(X['Fare'].mean(), inplace=True)	1	1
train_with_ages['Age'][i] = predictions[inc]	1	1
test['title'] = test['title'].apply(lambda x: x if x in Title_List else 'Misc')	1	1
classifiers_summary.sort_values('Mean F1 Test',ascending=False)	1	1
all_data['Fare'] = all_data['Fare'].fillna(df_class_emb.median())	1	1
train_c.Embarked.fillna('S')	1	1
"titanic.loc[titanic[""TicketGroupSize""] == 1, [""Survived"", ""TicketGroupSurvivors""]] = 0"	1	1
LastNameResult.sort_values('counts')	1	1
target.head( 572 )	1	1
test_df[['Pclass', 'Fare']].groupby('Pclass', as_index=False).median()	1	1
np.abs(cdf-0.5).argmin()	1	1
dfTest.append(row)	1	1
data_train.drop((missing_data[missing_data['Total'] > 177]).index,1)	1	1
combined_features.drop('Cabin', axis=1, inplace=True)	1	1
"test.drop([""SibSp"", ""Parch""], axis=1, inplace=True)"	1	1
df_analysis['ticket_share'].value_counts()	1	1
df_comb['Deck'] = df_comb['Cabin'].astype(str).str[0].where(~crit, other='X')	1	1
combined_df.head(5)	1	1
test_df.drop(['SibSp', 'Parch', 'Family'], 1, inplace=True)	1	1
test.groupby(['Sex'])	1	1
test.loc[(test['Age']>26.00)&(test['Age']<=30.00),'NAge']=2	1	1
test_df.loc[(test_df['Fare'] > 7.91) & (test_df['Fare']<=14.454),'Farecat'] = 1	1	1
test['Fare']=test['Fare'].fillna(np.mean(test['Fare'])).astype(float)	1	1
"combined.loc[f_member,""family_role""] = ""Child"""	1	1
hist[0]	1	1
"copy_test_df.Fare.fillna(test_df[""Fare""].mode()[0], inplace=True)"	1	1
"train_df.loc[train_df[""Name_key""].isin(['Dr.','Master.','Miss.','Mr.','Mrs.'])].groupby([""Sex"",""Pclass"",""Name_key"",""Parch""])[""Age""].agg([""median""]).reset_index()"	1	1
test_df.tail(n=3)	1	1
titanic.copy() #for convenience, copy the dataset before dropping variables, so I can keep playing with the old dataframe	1	1
temp2['Age_Classification']=(temp2.loc[:,'Age']/40).astype(int)	1	1
data.loc[(data['Fare'] < payment[3]),'FareGroup'] = 1	1	1
"datacv.set_value(i, 'Name', ""Rev"")"	1	1
"merged_data[""age_category""] = le.fit_transform(merged_data[""age_category""])"	1	1
titanic['Age'][(female)&(Pclass1)&Family3] = titanic['Age'][(female)&(Pclass1)&Family3].fillna(27)	1	1
res['Accurate'] = (res['ProbaMin']< .20) | (res['ProbaMax']> .80)	1	1
train[['male', 'female','Higher', 'Middle', 'Lower']]	1	1
"submit.to_csv(""../working/submit_logistic_poly_3.csv"", index=False)"	1	1
test_dataset.drop('Ticket', axis=1,inplace=True)	1	1
"titanicDF[""Age""].hist()"	1	1
curr_row[7]	1	1
combined.assign(SibSpGroup3 = combined['SibSp'] > 2)	1	1
"full[""Cabin_type""] = cabin_type(train)"	1	1
map_table_age_df.iloc[0:5, 0] = 1	1	1
test_kaggle.describe()	1	1
"titanic_df.groupby('Pclass')['Survived'].sum().plot(kind=""pie"", autopct='%1.1f%%')"	1	1
raw_train['Age'] = raw_train['Age'].fillna(-1)	1	1
test_df['Nclass'] = test_df['Nclass'].map({' Col': 'Other', ' Rev': 'Other', ' Ms': 'Miss', ' Dr': 'Mr', ' Dona': 'Mrs', ' Master': 'Mr', ' Miss': 'Miss', ' Mrs': 'Mrs', ' Mr': 'Mr',})	1	1
"data_full['Lastname'] = data_full[""Name""].apply(lambda x: x.split(',')[0].lower())"	1	1
stdScaler.transform(X_valid)	1	1
test_df.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Embarked'], axis=1, inplace=True)	1	1
ax[1].set_title('Title vs Survived')	1	1
df['Age'] = df['Age'].fillna(df['Median_age'])	1	1
tr['SibSp'].unique()	1	1
data.iloc[891:1310,:]	1	1
result2.drop(['Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked'],axis=1)	1	1
feats.loc[feats.Age.isnull(), 'Age'] = predicted_age	1	1
data.loc[data['Age']].round()	1	1
sns.boxplot(x='Pclass', y='Age', data = train)	1	1
survived.Age.astype(int)	1	1
df['Sex_female'] * df['Age_60-100']	1	1
train_df['Fare'].plot(kind='hist', figsize=(15,3),bins=100, xlim=(0,50))	1	1
pd.isnull(titanic_sub).any()	1	1
"modeblend[""Mode""] = modeblend.mode(axis=1)"	1	1
data_test.Fare.fillna(data_test.Fare.mean(), inplace = True)	1	1
train_data.loc[train_data['Sex'] == 'female', 'Sex'] = 1	1	1
train[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean().sort_values(by='Ticket',ascending=False)	1	1
train.at[i, 'Age_group'] = int(j/10)	1	1
test_set.loc[test_set['FamilyCount'] == 0, 'IsAlone'] = 1	1	1
titanic_sex_group.apply(get_survival_ratio)	1	1
test_set.fillna(0, axis=1, inplace=True)	1	1
train_get_dummy.corr().unstack()['Survived'],	1	1
"train_data[[""Pclass"", ""Survived""]].groupby(['Pclass'],as_index=False).mean()"	1	1
data_train['Fare_scaled'] = scaler.fit_transform(data_train['Fare'].values.reshape(-1, 1), fare_scale_param)	1	1
test_df.Age.fillna(28, inplace=True)	1	1
data.parent_alone.loc[data.PassengerId==915] = 0	1	1
train_df[['Embarked','Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
train.Survived.count() * 100	1	1
merged['NameTitle']=merged.Name.str.extract('([A-Za-z]+)\.') #lets extract the Salutations	1	1
"bestModel[""param_grid""],"	1	1
df.assign(Sex=df.Sex.str.title())	1	1
raw_test['Age'] = raw_test['Age'].fillna(-1)	1	1
t.append(df[x].dtypes)	1	1
test_df.Deck.fillna('Z', inplace=True)	1	1
np.mean(combined_features['Age'])	1	1
results.to_csv('My_sub1.csv', index=False)	1	1
submission.to_csv('prediction_rf.csv', index=False)	1	1
train['IsMale'] = pd.get_dummies(train['Sex'], drop_first=True)	1	1
"sns.boxplot(x=""Overall"", y=""Aggression"", hue='Position', data=f)"	1	1
df['FarePP'] = df['Fare'] / df['NumFam']	1	1
data.drop(['Fare'], axis=1)	1	1
test1_df.Survived.astype(int)	1	1
titanic['Pclass'] = df_train['Pclass']	1	1
df.loc[index,'Age']=transformAge(row['Age'], title)	1	1
train_dataset['Embarked'] = train_dataset['Embarked'].fillna('C')	1	1
data.loc[(data.passenger_fare>27.4) & (data.passenger_fare<=27.5) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>27.4) & (data.passenger_fare<=27.5) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
df_test['CabinEncoded'] = le_cabin.transform(df_test['Cabin'])	1	1
"sns.boxplot(data = df_data, x = ""Embarked"", y = ""Fare"",ax=ax2);"	1	1
mask_nan.sum()	1	1
model.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu', input_dim = 11))	1	1
"sex_dataframe.loc[sex_dataframe[""Survived""] == 1, [x_col, y_col]]"	1	1
titanic_comb.groupby('title')['Age'].median().plot.bar()	1	1
combo['Title'] = combo['Name'].apply(lambda name : name.split(',')[1].split('.')[0])	1	1
test['Cabin']=test['Cabin'].astype(int)	1	1
df_features['Fare'] = df_features.groupby(['Sex','Pclass'])['Fare'].apply(lambda x: x.fillna(x.median()))	1	1
"data['Ticket_info'] = data['Ticket'].apply(lambda x : x.replace(""."","""").replace(""/"","""").strip().split(' ')[0] if not x.isdigit() else 'X')"	1	1
test_data.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)	1	1
combine['Embarked'] = combine['Embarked'].fillna(freq_port)	1	1
dataset.drop(['Name', 'Ticket', 'Cabin'], axis=1)	1	1
class_count.values,	1	1
data_num.dropna(axis=1, how='any').columns	1	1
train_df['Alone'].value_counts()	1	1
"train_data[""CabinDeck""] = train_data.Cabin.str[0]"	1	1
"traindat.drop(""Ticket"", axis=1, inplace=True)#Won't really tell much, probably correlated with class"	1	1
"test[""title""] = train[""title""].map(title_mapping)"	1	1
df['Name'].str.contains('Mrs\.')	1	1
combined['Fare'].apply(lambda x: 1 if x<80 else 0)	1	1
"titanic_train_df.corr()#[""Survived""]"	1	1
train.loc[train['Age']>64,'Age_band']=4	1	1
data.drop(['Cabin'],axis=1,inplace=True)	1	1
test.drop('Survived', axis=1)	1	1
"train_df.pivot_table(index=""Embarked"",values=""Survived"")"	1	1
df.head(1)	1	1
titanic_df.drop(['Male'],axis=1,inplace=True)	1	1
data_frame.drop('Embarked',axis=1,inplace=True)	1	1
train_df0['Fare']	1	1
X['caE'] = X['Cabin'].map({'A':0,'B':0,'C':0,'D':0,'E':1,'F':0,'G':0,'T':0,'U':0}).astype(int)	1	1
"train.loc[train[""Sex""] == ""female"", ""sex_c""] = ""1"""	1	1
test.drop(['Fsize', 'SibSp', 'Parch'], axis=1)	1	1
my_submission.to_csv('submission_2.csv', index=False)	1	1
df['Title_Code'] = label.fit_transform(df['Title'])	1	1
df_raw_train.shape,	1	1
"algo_accuracy.loc[len(algo_accuracy)] = [clf_name, ""{0:.2f}"".format(accuracy) + ' %']"	1	1
pd.pivot_table(df_train, values = 'Survived', index= ['FamilySize'])	1	1
one_hot_encoded_test_predictors.drop(['Sex_female','Embarked_C'],axis=1)	1	1
plt.hist(train_df['Age'],bins=80)	1	1
mat.fillna(0)	1	1
data_cleaned['Survived']	1	1
axes[1].set_xticks(ind)	1	1
"train_df[""Fare""].fillna(age_median, inplace=True)"	1	1
train_df.describe(include=['O']) # The include=['O'] parameter prints out only the object or string columns	1	1
dataset.loc[(dataset['Age'].isnull()) & (dataset['Sex'] == i) & (dataset['Pclass'] == j + 1), 'Age'] = guess_ages[i,j]	1	1
train['Greeting'] = train.Name.apply(greeting_search)	1	1
filt_df['name_length'] = filt_df['name_length'].apply(lambda name: len(name))	1	1
"sns.boxplot(x=""Survived"", y=""Age"", data=train,ax=axesbi[1,1])"	1	1
plt.hist([df[df['Survived']==1]['SibSp'],df[df['Survived']==0]['SibSp']],bins=10,range=[0,9],label=['Survived', 'Dead'])	1	1
train.drop(columns = ['Sex'])	1	1
full['SmallGroup'] = np.where((2<=full['GroupSize']) & (full['GroupSize']<=4),1,0)	1	1
train2_df.info()	1	1
Xt.copy()	1	1
data_copy.loc[data_copy['Embarked']=='S','Embarked']=0 #loc can access a group of rows and columns by labels	1	1
"titanic_train[""Fare""].plot(kind = ""hist"", figsize = (10,5),bins=100, xlim=(0,50))"	1	1
titanic_test['Parch_Y']=(titanic_test['Parch']>=1).astype(int)	1	1
training_set.drop(['Survived','PassengerId'], axis=1).values	1	1
df_train.drop(['Cabin','Ticket'],axis=1)	1	1
train_df.describe(include=['0'])	1	1
"full.iloc[759,-1] = ""Countess"""	1	1
"model_data.loc[:,""Family_count""] = model_data[""SibSp""] + model_data[""Parch""]"	1	1
df_train.loc[df_train['known_age'] == 0, 'age_mid'] = 1	1	1
test_data['EMBARKED'] = test_data['EMBARKED'].cat.rename_categories([0,1,2])	1	1
train_X.loc[train_X['Embarked'].isnull(), 'Embarked'] = 'S'	1	1
feature_numbers.append(len(train_copy[col].unique()))	1	1
NN_submission.head()	1	1
dataset['isCabinF'] = dataset['isCabinLetters'].apply(lambda x: 0 if x != 'F' else 1)	1	1
df_test.loc[df_test['Age'] > 50, 'AgeC'] = 2	1	1
dataset['SexBinary'] = dataset['Sex'].apply(lambda x: 1 if x == 'female' else 0)	1	1
"test[""title""]= [i.split(',')[1] for i in test.title]"	1	1
full.loc[ full['Age'] > 63.034, 'Age'] = 5	1	1
data_full.loc[data_full['Cabin'].isnull(), 'HasCabin'] = 0	1	1
train_1['Age'].fillna(train_1.Age.mean(), inplace = True)	1	1
dataset.loc[(dataset['Age']>16) & (dataset['Age']<=40),'Age'] = 2	1	1
"dataset['EmbarkedQ'] = dataset[""Embarked""].apply(lambda x: 0 if x != 'Q' else 1)"	1	1
df['Survived'].value_counts()[0]/(df['Survived'].value_counts()[0]+df['Survived'].value_counts()[1])	1	1
test.isnull().any() #passengerId, Name, Ticket, Cabin delete	1	1
train['Sex'] = train.Sex.map({'male': 0, 'female': 1})	1	1
data_train['FarePP'] = data_train['Fare'] / data_train['famsz']	1	1
train['AgeBin']	1	1
dataTrain.copy()	1	1
test_df.head(418).groupby(['Sex','Pclass','Title'])	1	1
test_df.iloc[:,[0,1,3,8]]	1	1
full.loc[full.Fare.isnull()]	1	1
data_train_all['Title'] = data_train_all['Title'].replace('Mme','Mrs')	1	1
"results[""AdaBoost""]=test_model(clf)"	1	1
df_test['Age']=df_test['Age'].fillna(int(mean_val))	1	1
data_out['Salutation'] = np.where((data_out['Salutation']).isin(['Mr', 'Miss', 'Mrs', 'Master', 'Rare']), data_out['Salutation'], 'None')	1	1
"df.rename(index = {1:""Life"", 0:""Death""}, inplace = False)"	1	1
test['CabinN1'] = train['CabinN1'].astype(int)	1	1
dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) &                         (dataset.Pclass == j+1), 'Age'] = guess_ages[i, j]	1	1
test_df['PassengerId'].astype(int)	1	1
train_data.describe(include = 'all')	1	1
test.Age.median()	1	1
Test_Master.loc[ Test_Master['Fare'] > 53, 'Fare'] = 5	1	1
merged.loc[(merged['Age']>16)&(merged['Age']<=32),'Age_band']=1	1	1
dataset['Cabin2'][i]=choice(second_class_sample)	1	1
grp_age_diff_df.append(sibsp_age_diff, ignore_index=True)	1	1
test_df.loc[(test_df['Fare'] > 14.454) & (test_df['Fare'] <= 31), 'Fare']   = 2	1	1
cols_to_drop.append(i)	1	1
titanic_train.groupby('LastName').count().PassengerId.describe()	1	1
"sns.boxplot(x=""target_name"", y=column, data=df_train, ax=plt.subplot(224))"	1	1
features_long.drop('Fare',axis=1)	1	1
df_test.join(title_one_hot_test)	1	1
m.sort_values(by='Score', ascending=False)	1	1
"train_df[[""PassengerId"", ""Pclass"", ""Name"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"", ""family_member_no"", ""ticket""]]"	1	1
"test_data[""SmallFamily""] = ((test_data[""Family""] > 0) & (test_data[""Family""] < 4)).astype(int)"	1	1
model_frame.sort_values(by=['Model_Mean'],ascending=False)	1	1
df['cabin_letter'].unique()	1	1
data_train.isnull().sum() #Count no of missing values	1	1
upper.head(50)	1	1
names.loc[(names.sum(1)>1),'miss'] = 1	1	1
train['Fare'].isnull().values.ravel().sum()	1	1
titanic_train.loc[titanic_train['Embarked'] == 'C', 'Embarked'] = 1	1	1
"train_data['Title'] = train_data['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
test_data.dtypes.value_counts()	1	1
"dt_test[""Fare_cat""] = pd.cut(dt_test.Fare, intervals, labels=cats)"	1	1
train_df['Survived'].astype('int')	1	1
train_df.groupby(['Pclass'])['Survived'].mean().sort_values(ascending=False)	1	1
Rfclf_fea.sort_values(by=0, ascending=False).head(10)	1	1
dataset['Age'].iloc[i] = dataset['Age'].mean()	1	1
"df_train[""FamilySize""] = df_train[""SibSp""] + df_train[""Parch""]"	1	1
df[['Survived']].groupby([df['Embarked']]).count()	1	1
data_test['Name_length'] = data_test['Name'].apply(len)	1	1
c.rename(columns={'PassengerId': 'FamilyMemberCount'})	1	1
male.head()	1	1
test['Embarked']=test['Embarked'].apply(lambda y: e[y])	1	1
"tmp[""Sex""] = tmp[""Sex""].replace(""male"", 0).replace(""female"", 1)"	1	1
train.groupby(['Pclass'])[['Survived']].count()	1	1
combined['Age'] = data.transform(lambda x: x.fillna(x.mean()))	1	1
test_df.ix[i, 'Sharedticket'] = ticketgrouptest.Count[ticketgrouptest.Ticket == test_df.Ticket[i]].item()	1	1
"df[""Title""] = df.Name.apply(extract_title)"	1	1
test_df[['PassengerId', 'Survived']].to_csv('dec_tree.csv', index=False)	1	1
row['Title'] in Title:	1	1
combined['Name']:	1	1
df.loc[df['CabinInt'].isnull(),'CabinInt'] = df['CabinInt'].dropna().median()	1	1
tdata.isnull().sum()	1	1
np.where(fulldata.Sex == 'female', 0, 1)	1	1
df.loc[ (df.Age.isnull()) & (df.Sex == i) & (df.Pclass == j+1),                    'Age'] = guess_ages[i,j]	1	1
model.best_score_['valid']['auc']	1	1
data[['Age_bin_custom_range', 'Survived']], aggfunc=np.count_nonzero,	1	1
family_df.loc[family_df.FamilySize>4,'FamilyLabel'] = 'Big'	1	1
"train[""Cabin""] = train[""Cabin""].str.extract(r""([A-Z])"")"	1	1
df_test['Embarked'] = df_test['Embarked'].map({'S':0, 'C':1, 'Q': 2}).astype(int)	1	1
submission.to_csv('../working/submit.csv',index=False)	1	1
master_df['title'] = master_df['Name'].apply(get_title)	1	1
"plt.hist(df_train[""Sex""],bins = [-0.5,0.5,1.5], log = False, alpha = 0.3, label = ""all_passenger"")"	1	1
test.loc[(test['Pclass'] == 1) & (test['isAlone'] == 1), 'class_alone'] = 3	1	1
data_test.Fare.fillna(value=35.6271884892086,inplace=True)	1	1
df_train.Fare.fillna(-0.5)	1	1
lossesLs.append(loss)	1	1
model.add(Dense(8, activation='softplus'))	1	1
test['Age']=test.apply(check_class,axis=1)	1	1
train['Survived'].values.astype(int)	1	1
"df_test[""Mother""] = df_data[""Mother""][891:]"	1	1
label_encoder_embarked.transform(test_X[:, 6])	1	1
total.groupby('Title')['Age'].median().loc[title]	1	1
dataset.loc[dataset['Age'] > 64, 'Age'] = 4;	1	1
train['Fare'].hist(bins=40,figsize=(12,6))	1	1
"train.loc[train.Title.isin([""Mlle"", ""Ms""]), ""Title""] = ""Miss"""	1	1
train['Young'] = (train['Age']<=30) | (train['Title'].isin(['Master','Miss','Mlle','Mme']))	1	1
final_cost.append(1-ssd(a_g,y_test))	1	1
test_data.drop(['Name', 'SibSp', 'Parch'], axis=1)	1	1
test.loc[test['Embarked']=='C','Embarked'] =2	1	1
df_final.info()	1	1
"titanic.query(""Sex == 'female'"")['Age'].dropna(), bins=int(titanic['Age'].max()),"	1	1
test_df['Sex']=test_df['Sex'].apply(m_f)	1	1
titanic_data.loc[ titanic_data['Age'] > 64, 'Age'] = 4	1	1
"combined[""n_ticket_holders""] = 1"	1	1
df_test.loc[df_test.Fare.isnull(),'Fare'] = df_test[df_test['Pclass']==3]['Fare'].median()	1	1
pd.DataFrame.from_dict(feature_imp_dir, orient='index',columns=['Importance'])	1	1
all_data.drop('Type_Mr', axis=1)	1	1
train_df.groupby('Sex',as_index=False)['Age'].median()	1	1
data['Age']=data['Age'].round(3)	1	1
df.loc[dr_title & unknow,'Age'] = df[dr_title]['Age'].mean()	1	1
final_test.drop('Name', axis = 1, inplace = True)	1	1
test_data['Family_Size'] = test_data['Parch']+test_data['SibSp']+1	1	1
df_full['Sex'] = df_full['Sex'].map({'male': 0, 'female': 1})	1	1
dummy.reindex(columns = dummy_column, fill_value = 0)	1	1
df_train.select_dtypes(['category']).columns	1	1
data.groupby('Initial')['Age'].mean().round()	1	1
test['AddPsng'] = test['SibSp'] + test['Parch']	1	1
"combine['Family'] = combine[""Parch""] + combine[""SibSp""]"	1	1
test_data['Embarked'].mode()[0]	1	1
submission.to_csv('titanic1.csv', index=False)	1	1
titanic_df.loc[mr_mask, 'Age'] = titanic_df.loc[mr_mask, 'Age'].fillna(titanic_df[titanic_df.Title == 'Mr'].Age.mean())	1	1
dmodel.add(Dense(50, activation = 'relu'))	1	1
np.round(preds).astype('int')	1	1
trainingset.fillna({'Embarked':'S'})	1	1
df_train['SibSp']	1	1
submission_file['Survived'] = result	1	1
df.drop(['Age','Name','Cabin','Ticket'], axis=1)	1	1
test.head(8)	1	1
strat_test_set.drop('Sex', axis=1, inplace=True)	1	1
data['HasCabin'] = data.apply(hascabin,axis=1)	1	1
df_train.loc[df_train.Survived==0, column].dropna(),	1	1
Refer.drop([ 'Ticket', 'Cabin'], axis = 1)	1	1
"test_df.drop([""Ticket"", ""Cabin"", ""Name"", ""Sex"", ""SibSp"", ""Parch"", ""Embarked"", ""Fare""], axis=1)"	1	1
"titanic_test_dataframe.loc[titanic_test_dataframe[""Age""].notnull(), [""Sex"", ""Pclass"", ""Age""]]"	1	1
X_sc.transform(X_test)	1	1
embarked_test_dummies.drop('Q',axis=1,inplace=True)	1	1
df.loc[:, 'Survived'] # Get the label from the original data frame df.	1	1
all_data['Title'] = all_data['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)	1	1
"data['TravelAlone']=np.where((data[""SibSp""]+data[""Parch""])>0, 0, 1)"	1	1
test_data.drop(['PassengerId','Name','Ticket','Cabin'], axis=1, inplace=True)	1	1
np.mean(training.history['val_acc'])	1	1
data_in.copy()	1	1
"dataset[""Title""]=dataset[""Title""].replace([8,9,11,12,13,16],6)"	1	1
df_train['Cabin']	1	1
data['TicketPrefix'] = ['None' if prefix.isnumeric() == True else prefix for prefix in data.TicketPrefix]	1	1
titanic.drop([each], axis = 1)	1	1
"train.loc[train[""Name""].str.contains(""Master""), ""Master""] = True"	1	1
"df.query(""ischild == 0"").Age.dropna().astype(np.uint8).value_counts().sort_index().values"	1	1
train.pivot_table(index=['Sex', 'Pclass'], columns='new_Parch', values='Survived', aggfunc='mean').plot(kind='bar')	1	1
importance_list.append(variable)	1	1
data.head( 572 )	1	1
cm[0][0]	1	1
test['Embarked']=test.Embarked.fillna('S')	1	1
"titanicDF[""Sex""].value_counts().plot.pie(autopct=""%.2f%%"")"	1	1
dataset.drop('Fare', axis=1)	1	1
transformed_df.head()	1	1
train_dataset['Name'].head()	1	1
df_test.drop(['Cabin','Ticket'], axis=1)	1	1
data.parent_alone.loc[data.PassengerId==918] = 0	1	1
pred_table_lr_1['Prob'] = prob_lr_1	1	1
train_ds.drop('Cabin', axis= 1, inplace= True)	1	1
titanic_train_dataframe.loc[:, numeric_columns] = std_sc.fit_transform(titanic_train_dataframe.loc[:, numeric_columns])	1	1
titanic_df.groupby('Pclass').mean()	1	1
"df.loc[df[""Embarked""].notna(), ""Embarked""] = LabelEncoder().fit_transform(df.loc[df[""Embarked""].notna(), ""Embarked""].astype('category'))"	1	1
test.Cabin.fillna(test.Cabin.value_counts().idxmax(),inplace=True)	1	1
train.select_dtypes(include=['object'])	1	1
test['Cabin'].fillna('U', inplace=True)	1	1
train_df.drop(['Sex'], axis=1)	1	1
test_second_model['Survived'] = predicted_survivors	1	1
"test[""family_size""] = test[""SibSp""] + test[""Parch""]"	1	1
"data[""Age_group""] = ""NaN"""	1	1
"combined[""Age""] = imp_df[""Age""]"	1	1
cabin_only.loc[testdex, :]	1	1
"test[""Age_1""] = test[""Age""]<4"	1	1
test.drop({'Pclass', 'Name', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Embarked', 'Age'}, axis=1)	1	1
otherData['Age'].fillna(medianOtherAge, inplace=True, axis=0)	1	1
df_train_features.replace('female',0)	1	1
results.append(r1)	1	1
"df.drop(labels=[""Name""], axis=1, inplace=True)"	1	1
df['MedF'] = df['Fsize'].map(lambda s: 1 if 3 <= s <= 4 else 0)	1	1
df_train['FamilySize'].value_counts(normalize=True, sort=False).to_frame().reset_index()	1	1
titanic_df.drop('PassengerId', axis=1, inplace=True)	1	1
df['Embarked']=df['Embarked'].fillna(df['Embarked'].mode()[0])	1	1
train['Fam']=train['SibSp']+train['Parch']	1	1
test.Sex.replace(['male', 'female'], [0, 1])	1	1
"train[""title""] = [i.split(',')[1] for i in train.title]"	1	1
df.pivot_table(index='Sex', columns='Pclass', values='Age', aggfunc='mean')	1	1
df.set_index(['PassengerId'])	1	1
dataframe.drop(columns=[column_name, 'Embarked_Q'])	1	1
training_set['Embarked'].fillna('S', inplace=True)	1	1
"test[""Title""] = pd.Series(title_2)"	1	1
df.Fare.fillna(df.Fare.dropna().median(), inplace=True)	1	1
"labels.append("""")"	1	1
test['Sex'].loc[test['Sex']=='female']=0	1	1
na_data.head(20)	1	1
"train.Title.replace(""Jonkheer."", ""Nobility"")"	1	1
dataframe.loc[(dataframe[column_name] >= 11) & (dataframe[column_name] < 21), column_name] = 1	1	1
test.loc[test['Sex'] == 'male', 'Sex'] = 0	1	1
test.loc[test['Sex'] == 'male', 'Sex'] = 1	1	1
data.iloc[0]	1	1
test_data['Age'][test_data['Age'].isnull()] = test_data['Age'].mean()	1	1
dataframe['Title'] = (dataframe['Name'][dataframe['Name'].notnull()]).apply(lambda x: list(list(x.split(','))[1].split(' '))[1])	1	1
rcParams['patch.edgecolor'] = 'none'	1	1
"embarked[""Embarked""] = embarked[""Embarked""].fillna("""")"	1	1
df.groupby('key2').transform(np.mean)	1	1
"test_df[""Age""]=test_df[""Age""].fillna(test_df[""Age""].median())"	1	1
ax[1].set_title('Count plot - Survived')	1	1
full['PassengerType'] = pd.factorize(full['PassengerType'])[0]	1	1
plt.hist(x = [data1[data1['Survived']==1]['FamilySize'], data1[data1['Survived']==0]['FamilySize']], stacked=True, color = ['g', 'r'], label = ['Survived', 'Dead'])	1	1
en_en['rf_clf'] =  pd.DataFrame(rf_clf.predict_proba(X_train))[1]	1	1
whole.set_value(176,'Fid',211) #display(whole[whole.Name.str.contains('Klasen')])	1	1
train_data['Age'].value_counts()	1	1
"dataset['Title'] = dataset['Title'].replace(['Capt', 'Lady', 'Countess', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Random')"	1	1
"training.drop(labels=[""Cabin"", ""Ticket""], axis = 1 , inplace = True)"	1	1
train['Survived']=train['Survived'].astype('int')	1	1
f1scores.append(f1score)	1	1
train.loc[(train['SibSp']==0) & (train['Parch']==0) , 'Alone'] = 1	1	1
train.drop(['PassengerId', 'Ticket'],axis = 1, inplace = True)	1	1
test.loc[(test['Age'] > 50),'Age'] = 3	1	1
emb_surv.groupby(['Embarked','Survived']).Embarked.count().unstack()	1	1
best_candidate['best_model']	1	1
classifier_score['LogisticRegression'] = scores.mean()	1	1
axs[0].set_title('Survival Rate vs Parch')	1	1
enc_df['Embarked'] = enc_df['Embarked'].astype('object')	1	1
dataFrmae['Age'].std()	1	1
dataset['Title'] = dataset['Title'].str.replace('(Mlle|Mme|Ms)', 'Miss')	1	1
df['Surname'] = name[0].str.strip()	1	1
"train[[""Family"",""Survived""]].groupby([""Family""], as_index=False).mean()   #Grouping by family"	1	1
"train.drop(""Name"", axis = 1, inplace = True)"	1	1
"test_df.drop([""PassengerId""], axis=1)"	1	1
"Rfclf_fea[""Feature""] = list(train_one_hot_encoded.columns)"	1	1
X_train['Embarked'] = X_train['Embarked'].astype('float')	1	1
data['Title_Code']=label.fit_transform(data['Title'])	1	1
test.set_index('PassengerId').drop(['Name','Ticket'],axis = 1)	1	1
train_data['is_cabin']=train_data['Cabin'].notna().astype(int)	1	1
age_sal.iloc[:,0]	1	1
data.loc[ ((data.Fare.isnull() == True) & (data.Pclass==Pcl)) , 'Fare'] = med[0] # med is series	1	1
tree_count_df.reset_index()['index'],	1	1
test_df['Sex'] = test_df['Sex'].map(lambda x: 0 if x == 'male' else 1)	1	1
data2[['Age','Sex','Pclass','Fare','SibSp','Parch','Ticket','Embarked','Cabin','Name']]	1	1
test_data.head()['Embarked']	1	1
data_train_input.loc[data_train['Embarked']=='C','Embarked'] = 2 #female	1	1
titanic_dirty.dropna(inplace=True) # we drop values for lines in which Age is missing for this first model (quicker)	1	1
"results[""Scaler""] = scaler_name"	1	1
"test.loc[(test[""Fare""] >= 7.896) & (test[""Fare""] < 14.454),""Fare""] = 1"	1	1
train_df_dummies.head()	1	1
data.loc[ data['Fare'] == 0, 'Fare'] = 0	1	1
result.to_csv('result-d7.csv', index=False)	1	1
grouped.index.labels[1]	1	1
"x[""Age""].fillna(x.Age.mean(), inplace = True)"	1	1
train['AgeGroup'] = np.where(train['Age']<=16, 'Child', 'Adult')	1	1
train_df.groupby('Parch').size()	1	1
"tot[""FamDeath""] = np.nan"	1	1
train_df['Gender'] = train_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
plt.rcParams['figure.figsize'] = 8, 10	1	1
df['Cabin'] = pd.Categorical(df['Cabin'])	1	1
"titanic_train_df[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
train['Embarked'].fillna('S', inplace = True)	1	1
"train_data.groupby([""Survived"", ""Sex""]).size().reset_index()"	1	1
testData['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)	1	1
df_train[['Family_members','Survived']].groupby(['Family_members'],as_index=False).mean()	1	1
df.fare.fillna(-0.5)	1	1
"tr['Family'] =  tr[""Parch""] + tr[""SibSp""]"	1	1
grp_by_sex['Survived'].mean()	1	1
combined_df.loc[combined_df['deck'].notnull(), :]	1	1
df.drop(['Sex'],axis=1)	1	1
merged_df.astype(float).corr(), cmap = 'BrBG',	1	1
xgb_rfecv.transform(xgb_rfecv_train)	1	1
"test_data[""Age""]=test_data.Age.fillna(test_data.Age.mean())"	1	1
df_submit_data.info()	1	1
"df.query(""istrain == 1"")"	1	1
test_df.drop(['PassengerId','Name','Ticket'],axis=1)	1	1
data.loc[data['Age'].isnull() & data['NameTitle'].str.contains('Mr.'), 'Age'] = 32	1	1
model.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu'))	1	1
all_data['AgeRange'] = pd.cut(all_data['Age'], 5)	1	1
score['LogisticRegression'] = logreg.score(X_train, Y_train)	1	1
dataset['Embarked'] = dataset['Embarked'].map(embarked_marking)	1	1
test.Embarked.fillna('S', inplace=True)	1	1
test_df.drop('Fare', 1, inplace=True)	1	1
df['Cabin']=df['Cabin'].fillna('U')	1	1
df['Lname'] = df.Name.apply(lambda x: x.split(',')[0])	1	1
gender_submissionData.to_string(index=False)	1	1
params_init_l['objective'] = 'binary'	1	1
data['IsAlone'].loc[data['FamilySize']>1]=0	1	1
tdf.set_index('passengerid', verify_integrity=True)	1	1
data['Survived']>0	1	1
data.drop(columns = ['Cabin','Ticket','Embarked','Name'] , axis = 1)	1	1
family_df['FamilySize'] = family_df_grpby['FamilySize'].mean().astype(int)	1	1
full_train_set.loc[full_train_set['Age'] < 18]	1	1
z.append(1)	1	1
dataset.loc[ (dataset['Age'] > 38) & (dataset['Age'] <= 64), 'Age' ] = 3	1	1
train['Sex'] = train['Sex'].replace(['male','female'],[0,1])	1	1
full_bins.head()	1	1
train['is_train'] = 1	1	1
data['Sex']      = data['Sex'].map({'male': 1,'female':0})	1	1
label_encoder.transform(sex)	1	1
models_summary.loc[:, 'Accuracy'] = pd.Series(test_list, index=models_summary.index)	1	1
min_max_scaler.transform(train.as_matrix(columns=['Fare']))	1	1
df['Pc2'] = (df['Pclass']==2).astype(int)	1	1
data['Title'] = data['Title'].replace(['Ms', 'Miss'], 'Miss')	1	1
X_cat.fillna('C')	1	1
feature_extractor.transform(data_train.drop(['Survived'], axis=1), return_df=True)	1	1
np.median(data.loc[data.Title_Class == title, ('Age')].dropna())	1	1
svcsubmission.to_csv('svc.titanic.csv', index=False)	1	1
"RF_result[1][""best_model""],"	1	1
full['IsAlone'] = np.where(full['GroupSize']==1,1,0)	1	1
df.loc[1:10, 'Age': 'Name']	1	1
dataset.Title.fillna(0, inplace=True)	1	1
df['Age_Group'] = df['Age'].map(get_age_group)	1	1
trainOrg['famSize'] = trainOrg.SibSp + trainOrg.Parch	1	1
test.drop(drop_cols, 1, inplace=True)	1	1
df['fare_T'] = df.apply(lambda x: 1 if (x['Fare'] >= 8 and x['fare_T'] < 15) else x['fare_T'], axis=1)	1	1
data.isnull().sum().values	1	1
"test[""FamilySize""] = test[""FamilySize""].map({""Small"" : 0, ""Medium"" : 1, ""Large"" : 2})"	1	1
full['CabinType'] = full['Cabin'].astype(str).str[0]	1	1
ax.hist( x, bins = 20 )	1	1
test.drop(['SibSp','Parch'],1)	1	1
dataset.groupby(['MisAge', 'Sex']).size().unstack(0)	1	1
test_input.drop('Pclass',axis=1,inplace=True)	1	1
combine_df.loc[ combine_df['Fare'] <= 7.91, 'Fare'] = 0	1	1
"train7[""Master""] = train7[""Name""].apply(lambda x: x.count(""Master.""))"	1	1
row['Pclass'] == 3 else 0	1	1
titanic['Embarked_Sex'] = titanic['Embarked'] * titanic['Sex']	1	1
model.add(Dense(50, input_dim=6, activation='relu', name='layer_1'))	1	1
train.drop(['Name','SibSp','Parch','Ticket','Cabin','CategoricalFare','CategoricalAge'],axis = 1)	1	1
"data[[""Title"", ""FamilySize"", ""Alone"", ""Survived"", ""Cabin""]].corr().abs()[[""Survived""]]"	1	1
data_combined['Cabin'] = data_combined.Cabin.apply(lambda c:c[0])	1	1
titanic.drop(columns=['Title', 'Name', 'Sex', 'Cabin', 'Embarked', 'Ticket Prefix', 'Ticket Number'])	1	1
combo['AgeType'] = combo['Age'].apply(lambda val : 'Child' if val < 12 else 'Teen' if val <= 21 else 'Young' if val < 30 else 'Middle' if val < 45 else 'Senior citizen' if val < 60 else 'Old')	1	1
age_df.loc[age_df.Age>=15,'AgeGroup'] = 'Adult'	1	1
data.isnull().sum() # checking for total null values	1	1
submit['Survived'] = np.clip(PTest, 0, 1).astype(int)	1	1
df.groupby('Sex').Survived.count()	1	1
dataset.loc[(dataset['Familysize'] > 0.1) & (dataset['Familysize'] <= 2.5), 'Familysize_cat']  = 0	1	1
"tp.loc[tp[""Embarked""]==""S"",""Embarked_c""] = 1.0"	1	1
test_sub.to_csv('Submission.csv', index = False)	1	1
"results[""Bagging""]=test_model(clf)"	1	1
"test[""Cabin_type""] = test[""Cabin""].str[0]"	1	1
"train_df[""Cabin_prefix""]=train_df[""Cabin""].str[0:1]"	1	1
dataset['IsAlone'].loc[dataset['FamilySize'] > 1] = 0 #如果家庭人数大于1，更新为0	1	1
dftest['Sex_bool']=dftest.Sex.map(context1)	1	1
training_data[['Embarked', 'Survived']].groupby('Embarked').mean()	1	1
result.to_csv(fname,index=False)	1	1
np.std([clf.feature_importances_ for tree in clf.estimators_], axis=0)	1	1
df_train['Sex_male'] = df_train['Sex'].map({'female':0, 'male':1})	1	1
df_test_raw.isnull().sum().sort_values(ascending=False)/len(df_raw)	1	1
"df_train.groupby([""Sex"",""Pclass"",""Title""])[""Age""]"	1	1
drop_train.loc[drop_train.Pclass == 1,'Age'].mean()	1	1
data.iloc[:,0:3]	1	1
test.loc[:,'Survived']	1	1
titanic_test.drop(titanic_test.columns[[2,7]], axis=1)# The name column is not really going to help in predicting, so droping it from the dataframe.	1	1
data.Personal_Titles_Kid.astype('category')	1	1
inputds.drop('Name',axis=1)	1	1
train_for_correlation.head(10)	1	1
test_df['Age'].apply(lambda x: 1 if (x > 48 and x <= 64) else 0)	1	1
filling_data.boxplot(subplots=False)	1	1
dataset['Fare'] = dataset['Fare'].fillna(Fare_freq)	1	1
np.mean(clf_gs.cv_results_['std_test_score'])	1	1
train['Age_Groups'] = pd.cut(train['Age'],bins)	1	1
Tr_x.shape	1	1
dt['Age'].hist()	1	1
network.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu'))	1	1
t_df['Alone'].loc[t_df['Alone'] == 0] = 'Alone'	1	1
"df[""PassengerId""] = titanic_test_df[""PassengerId""]"	1	1
train_data['Family_Size'] = train_data['Parch']+train_data['SibSp']+1	1	1
"train.Title.replace(""Sir."", ""Nobility"")"	1	1
"all_data_del[""Age""].mean()"	1	1
gs.best_params_['criterion'],	1	1
fare0.std()	1	1
all_data['Embarked'][all_data['Embarked'].isnull()]=train['Embarked'].mode()[0]	1	1
df.loc[df['FamilySize'] == 4, 'FamilySize'] = 2	1	1
train['T4'] = np.array(train['Title'] == 'Mrs').astype(np.int32)	1	1
testingset['AgeBin'] = testingset['AgeBin'].map(agemappings)	1	1
test.Age.fillna(m, inplace=True)	1	1
test_df.drop(drop_list,axis=1)	1	1
train.dropna(axis=0, inplace=True)	1	1
dataset.loc[(dataset['Fare'] > 15) & (dataset['Fare'] <= 32), 'Fare']   = 2	1	1
sex_group.agg(['sum', 'count'])['Survived']	1	1
x_test['FamilySize_5'] = x_test['FamilySize'].apply(lambda x: 1 if x == 5 else 0)	1	1
train.loc[(train.Fare == 0), ['Survived', 'Fare']]	1	1
os.path.join(raw_data_path, 'test.csv')	1	1
Z['has_Cabin'] = ~Z_orig.Cabin.isnull()	1	1
"title_dict[""MISS""] = 3"	1	1
Xdf.loc[Xdf['Age'] <= 16, 'Age'] = 0	1	1
train_df['AgeBin'] = pd.cut(train_df['Age'], 5)	1	1
lookup_age[0].astype(int)	1	1
train_df['AgeBand'] = pd.cut(train_df['Age'], 5) #5단위로 자르기	1	1
dataset.loc[:, column_list]	1	1
tit_df.join(sex_dummy_tit)	1	1
trainNMD.drop(drop_elementsNMD, axis = 1)	1	1
"dfp[""labels""] = labels"	1	1
train_dummies.iloc[:, [0]].values	1	1
x_train_not_age_nan['Age']	1	1
objNm[1]	1	1
df[['Name', 'Age']]	1	1
full_dataset.loc[(full_dataset['Age']>48.168)&(full_dataset['Age']<=64.084),'Age']=1	1	1
"data.set_value(i, 'Name', ""Master"")"	1	1
xtr.iloc[test_index]	1	1
dataset['Initial'] = dataset['Initial'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Dr. ', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')	1	1
train.Embarked.fillna(4).unique()	1	1
data_train_dummy['Fare_scaled'] = std_scaler.fit_transform(reshape_Fare, std_scaler_Fare)	1	1
data['SharedTicketCount'] = data.groupby('Ticket')[['Fare']].transform('count').astype(int)	1	1
"dat[""tick_STON""]  =  dat['Ticket'].map(lambda s: 1 if re.search(""STON"",s)!=None else 0)"	1	1
full_models['set1']['cat_encode'] = 'OneHot'	1	1
word[0].isupper() and word.endswith('.'):	1	1
train_df[['Travel_Alone', 'Survived']].groupby(['Travel_Alone'], as_index=False).mean()	1	1
"data_train_h2o.names[0], training_frame=data_train_h2o, model_id=""GBM_Titanic"","	1	1
train.drop(['Family'],inplace=True,axis=1)	1	1
df.Embarked_bool.fillna(df.Embarked_bool.mean() , inplace=True)	1	1
np.mean(X_train, axis=0,dtype=np.int64)	1	1
"train[""TicketGrp""] = train.tkno.apply(Tix_ct)"	1	1
train_data[['Sex','Survived']].groupby('Sex', as_index=False).mean()	1	1
dataset['noAge'] = np.where(dataset['Age'].isnull(),1,0)	1	1
train_model_red.loc[:,'Survived'] = train_model['Survived']	1	1
test.cabin.fillna('U')	1	1
test_data['Embarked'] = test_data['Embarked'].apply(lambda x: replacement.get(x))	1	1
cm.astype('float') / cm.sum(axis = 1)[:, np.newaxis]	1	1
"test_base[""PassengerId""],"	1	1
all_data.Embarked.describe()	1	1
dataset['Fare'] = dataset['Fare'].fillna(titanic_df['Fare'].median())	1	1
AccPca.set_index('Components', inplace=True)	1	1
Pclass_dummies_test.drop(['class3'],axis=1,inplace=True)	1	1
train.groupby(by = 'Pclass')['Fare'].describe()	1	1
np.mean(answer == y_test)	1	1
dt_train.drop('Fare', axis=1, inplace=True)	1	1
"RF_result[2][""best_model""]"	1	1
full['Age'].iloc[i] = age_med # otherwise, fill with median of entire dataset	1	1
data.Deck.head(10)	1	1
"train_data.loc[(train_data[""Age""] > 50) & (train_data[""Age""] <= 80), 'Age_Group'] = 4"	1	1
data.Pc3.mean(),	1	1
age_by_sex1['Age'].mean()	1	1
data.loc[(data.passenger_fare>0) & (data.passenger_fare<=19.69) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>0) & (data.passenger_fare<=19.69) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
train_df.groupby('Age').size().head(25)	1	1
test['AgeBin']= pd.cut(test.Age.astype(int), 5)	1	1
full['Cabin_short'] = full['Cabin'].map(parse_Cabin)	1	1
"test.drop([""PassengerId"",""Name"",""Ticket"",""Cabin"",'Age'], axis=1)"	1	1
all_data.drop('Name', axis=1, inplace=True)	1	1
X_test['surviving_father_husband'] = X_test[['surname', 'Pclass', 'person']].apply(surviving_father_husband, axis=1)	1	1
ax[1].set_title('Age and Sex vs Survival')	1	1
df.loc[df['Title']=='the']	1	1
"combined_df['Pclass'] = combined_df['Pclass'].astype(""int"")"	1	1
dataset_df['Sex'] = dataset_df['Sex'].map({'male':0,'female':1})	1	1
train_df['family_status'].dtype	1	1
ages.keys():	1	1
"train.loc[train[""Embarked""]==""C"",""Embarked""] =1"	1	1
df['AgeF'] = np.nan	1	1
"df[""Sex""] = lb.fit_transform(df[""Sex""]) # Substitutes 'male' and 'female' by float values to allow the decision tree to run"	1	1
test.filter(regex=regex_test)	1	1
features.apply(lambda item : gm['Age'][item['Sex'],item['Pclass'],item['Title']] if np.isnan(item['Age']) else item['Age'], axis=1)	1	1
df.loc[(df['Fare']<=7.91),'Fare_cat']=1	1	1
"_df[""_cabin""]    = _df[""_cabin""].apply(lambda i : i[0])"	1	1
te.drop(['Name','Ticket','Cabin'], axis=1)	1	1
"train['HasCabin'] = train[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
test['TSNE3'] = new_features.iloc[train_rows:(train_rows+test_rows-1),2]	1	1
comb_data[['Age', 'Parch', 'SibSp', 'TicketTrim', 'Title','Pclass','FamSize', 'Cabin']]	1	1
train_df[['FareCategorical','Survived']].groupby('FareCategorical', as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Mlle"",""Miss"")"	1	1
train_set.drop('PassengerId', axis = 1, inplace = True)	1	1
"train_dat[""Embarked""].value_counts()"	1	1
res['PassengerId']=out_targets	1	1
People_Survived[['Sex','Survived']].groupby('Sex').count()	1	1
df_titanic_train.head()	1	1
"combined[""immediate_family""] = combined[""Parch""] + combined[""SibSp""]"	1	1
train['SexM'] = train['Sex']	1	1
tf.add(tf.matmul(W2,Aa1), b2, name='Za2')	1	1
train_data.iloc[:,0].values	1	1
test_input.apply(lambda item : gm['Age'][item['Sex'],item['Pclass'],item['Title']] if np.isnan(item['Age']) else item['Age'], axis=1)	1	1
df_train['Cabin'].fillna('Unknown', inplace=True)	1	1
"solution.to_csv(""Solution_one.csv"",index_label=[""PassengerId""])"	1	1
train_data[['Pclass', 'Sex', 'Age', 'SibSp','Parch', 'Fare','Embarked']]	1	1
df_test_ml['SurvivedECLF'] = rfc.predict(X_predict_eclf).astype(int)	1	1
train.drop('Age', axis=1)	1	1
training_set['Survived']	1	1
age['Age_Categorized_Mean'] = pd.cut(age.Age.fillna( age.Age.mean() ), logical_age_bins, labels=logical_age_group_names)	1	1
dataset.loc[(dataset['Fare'] >14.454) & (dataset['Fare'] <= 31.0), 'Fare'] = 2	1	1
prediction.to_csv('predictions_xboost.csv', sep=',', index=False)	1	1
df.drop(cols_drop, axis=1, inplace = True)	1	1
test_df.join(pd.get_dummies(test_df.Sex, prefix='Sex'))	1	1
train.isnull().any().any() == test.isnull().any().any() == False	1	1
train_data.groupby(['Child', 'Survived']).size()	1	1
ax[0].set_title('Feature Importance in Random Forests')	1	1
dataset['CabinNum'] = dataset['Cabin'].apply(get_cabin_num)	1	1
title.append(x)	1	1
X_train.drop('Survived', axis=1)	1	1
"dataset.loc[(dataset[""Age""] > 32) & (dataset[""Age""] <= 35), ""Age""] = 3"	1	1
df['Alone'].loc[df['Alone'] == -1] = 1'''	1	1
df_test['Sex'] = df_test['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
plot.hist(alpha=0.5,color='red',bins=25)#Survived[column we chose].plot.hist(alpha=Visibilty value, color=color of graphic,bins=width of boxes)	1	1
best_bagging.best_params_.get('base_estimator__max_depth'),	1	1
ax1[1].hist(df_2c[df_2c.Survived == 1].Age, bins=10, range=(0,100))	1	1
dfTest.drop(['PassengerId','Ticket','Cabin'],axis=1,inplace=True)	1	1
dataset.set_value(rowIndex, 'Age30to42', 0)	1	1
df.loc[x,'Ticket']=unique_tickets	1	1
pd.notnull(G.node[Passenger]['MaidenName2']):	1	1
"test_data.drop([""PassengerId"", ""Name"", ""Age"", ""Ticket"", ""Cabin""], axis=1)"	1	1
data.loc[(data.passenger_fare>=13.) & (data.passenger_fare<13.1) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>=13.) & (data.passenger_fare<13.1) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
train_data['Age'].hist()	1	1
"train[""Pclass""] = train[""Pclass""].astype('category')"	1	1
train_df.drop(train_df[['Name','Ticket']],axis=1,inplace=True)	1	1
titanic[['Family','SibSp','Parch']].head()	1	1
data.loc[(data['Age'] > 27) & (data['Age'] <= 40), 'SortAge_1'] = 2	1	1
family[ 'isAlone' ] = family[ 'FamilySize' ].map( lambda s : 1 if s == 1 else 0 )	1	1
validation[1]	1	1
all_data.at[i,'Embarked']= embarked_mapping[all_data.loc[i].at['Embarked']]	1	1
"df_age_test_X[""PassengerId""].reset_index(drop=True)"	1	1
all_data['Embarked']	1	1
titanic_train.groupby('Fare').count().PassengerId.describe()	1	1
data_test['Age']=data_test['Age_imputed']	1	1
test.drop('AgeGroup',axis=1,inplace=True)	1	1
"df[""Family""] = df.Name.map(getLastName)"	1	1
train[['Title','Survived']].groupby('Title',as_index=False).mean()	1	1
dataframe['Fare'] = dataframe.Fare.fillna(-0.5)	1	1
test.sort_index(axis=1,inplace=True)	1	1
df['rep_ticket']= df['Ticket'].map(tmp1)	1	1
"df_train[""Fare""]"	1	1
data['Title']=pd.Series(data.Name.str.extract(' ([A-Za-z]+)\.', expand=False))	1	1
data_train[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)	1	1
train_cleared.columns.values[dtree_rfe.get_support()]	1	1
Priority.head(15)	1	1
_test.head()	1	1
dataset.drop('Age', axis=1, inplace=True)	1	1
df_test['Title'].append(df_train['Title'])	1	1
combined_features['Cabin'] = combined_features['Cabin'].map(lambda c: c[0])	1	1
"total.drop(labels = [""Cabin""], axis = 1, inplace = True)"	1	1
combine['Cabin_known'] = combine.Cabin.isnull() == False	1	1
x.dtypes	1	1
Titanic_dataframe.loc[a, 'Cabin Count'] = Titanic_dataframe.loc[a, 'Cabin'].count(' ') + 1	1	1
df_surname['SurnameGroup_include_surviving_men'] = df_surname['SurnameGroup_include_surviving_men'].astype(int)	1	1
df.drop(['Title'], axis=1)	1	1
"df['Status'] = df['Status'].replace([""Mlle""], ""Miss"")"	1	1
df[['Ticket', 'Pclass']].groupby(['Ticket'], as_index=False).mean()	1	1
raw_train['Male'] = bin_sex.fit_transform(raw_train['Sex'])	1	1
"test_df.sort_values(""Y_scores"",ascending=True)[:5]"	1	1
titanic_data.groupby('FamilySize').agg('sum')[['Survived', 'Died']].plot(kind='bar', stacked=True, colors=['green', 'red']);	1	1
scores.keys()	1	1
"_train_df.drop(""age"", axis=1), _train_df.age"	1	1
df['Elder'] = df['Age'].map(lambda s: 1 if s > 40 else 0)	1	1
df[['Embarked', 'Fare']].groupby(['Embarked']).std() /  df[['Embarked', 'Fare']].groupby(['Embarked']).mean()	1	1
"df[""Deck""] = df.Cabin.map(getCabinDeck)"	1	1
df['CabType']=df['Cabin'].apply(lambda s: str(s)[0])	1	1
data.drop('Survived',axis = 1)	1	1
X_features_test.iloc[0:418]	1	1
outcomes.as_matrix()	1	1
test_data.isnull().sum()/test_data.shape[0]	1	1
df_test_tobepredicted['Age'].mean()	1	1
test['Embarked_Q'] = test['Embarked_Q'].fillna(0)	1	1
df['Title'] = get_title_last_name(df['Name'])	1	1
allfeat['Title'] = allfeat['Title'].replace('Ms', 'Miss')	1	1
data.Deck.fillna('missing')	1	1
first_names[1].str.rsplit('.', expand=True, n=1)	1	1
"dataset.loc[dataset[""Age""] > 39, ""Age""] = 4"	1	1
"test_enc[[""Age"", ""Fare"", ""SibSp"",""Parch"", ""Family_Size""]] = scale.fit_transform(test_enc[[""Age"", ""Fare"", ""SibSp"",""Parch"", ""Family_Size""]].as_matrix())"	1	1
"test[""Embarked""].cat.categories = [0,1,2]"	1	1
test_df.loc[test_df['Age'].isnull(),'Age'] = test_df[['Sex','Title']].loc[test_df['Age'].isnull()].apply(fillAge, axis = 1)	1	1
combined_data.iloc[:891].Age.isnull().sum()	1	1
test[['PassengerId', 'Survived_nn']].to_csv('submission_nn.csv', index = False, header = ['PassengerId', 'Survived'])	1	1
df_train.groupby(['Embarked']).size()	1	1
train_x.loc[train_x.Age.isnull(),'Age'] = melb_preds	1	1
train_df['Cabin_Letter'].unique()	1	1
tmp['Survived']	1	1
train_df.drop(['PassengerId','Ticket'], axis=1)	1	1
"title_dict[""COL""] = 2"	1	1
"train.loc[(train['SexAge']==""children""),'Children'] = 1"	1	1
Y.assign(**{self.new_column_name: transformed_column})	1	1
df.Fare.replace(0, np.NaN)	1	1
data['Name']	1	1
train['Ticket_Num'] = np.where(train.Ticket_Num.str.isdigit(), train.Ticket_Num, np.nan)	1	1
titanicTrain['Child']='child'	1	1
train_cl.set_value(i, 'Age', age_lm.predict(train_cl.loc[i, Xrcol].values.reshape(1, -1)))	1	1
"train[""eval_tuned_forest""] = model.predict(train[features_names].values)"	1	1
submission_test.Fare.fillna(submission_test.Fare.mean(), inplace=True)	1	1
drop_attri.transform(train_attri.values)	1	1
df['Age']=df[['Age','Pclass']].apply(inpute_age, axis=1)	1	1
data['Parch'].astype('int64')	1	1
test.Cabin.fillna('N')	1	1
data['Infant_No_Parents'] = data['Infant'] & data['No_Parents']	1	1
df['Ticket'] = pd.Series(ticket_numbers, index=df.index)	1	1
test['age_group'] = test['Age'].map(age_group_fun)	1	1
axes[1].set_xticks(np.arange(0, 550, 20))	1	1
row['DisAge']	1	1
predictions_df.head()	1	1
test_df.iloc[:, [3, 13, 4]]	1	1
plt.hist(ageOfMiss)	1	1
titanic_train.groupby('Title').count().PassengerId.plot.bar()	1	1
train_df[['AgeBand', 'Survived']].groupby('AgeBand').mean().sort_values(by='AgeBand', ascending=True)	1	1
train['Honorific']=train['Honorific'].fillna('unknown')	1	1
test.PassengerId.shape	1	1
titanic_train['Age_cat'].hist()	1	1
df_test.loc[ (df_test.Sex == 'female') & (df_test.Pclass == 3) & (df_test.Embarked == 'S') , 'Survived'] = 0	1	1
titles.rename('Title')	1	1
data['Title']=data.apply(replace_titles, axis=1)	1	1
df['Cabin'] = df['Cabin'].fillna('U')	1	1
train_x['Pclass'].describe()	1	1
df.loc[df.Age.isnull(),feature_list]	1	1
data.loc[index, PtypeField]==1:	1	1
test.loc[test['Family size']==1, 'isAlone'] = 1	1	1
train_df['NameLen'] = train_df['Name'].apply(len)	1	1
"axes[11].set_xticklabels(axes[11].get_xticklabels(), rotation = 45, size='x-small', ha=""center"")"	1	1
survived_parch['Rate'] = survived_parch[1]/survived_parch.sum(axis=1)	1	1
dataset.loc[(dataset['Age'] > 20) & (dataset['Age'] <= 35), 'Age'] = 2,	1	1
grouped['Age'].mean()	1	1
train['Embarked'] = train['Embarked'].map(embarked_map)	1	1
"df.Embarked.astype(""category"")"	1	1
dc.drop(['SibSp','RelationsOnBoard'], axis=1, inplace=True) #if you want you can drop more columns here, droping Age is no problem !	1	1
df['HasCabin'] = df['Cabin'].apply(lambda x: 0 if type(x) == float else 1)	1	1
"train[""Famsize""] = train[""Parch""]+ train[""SibSp""]+1"	1	1
error_rate.append(np.mean(y_test != knn_predict_k))	1	1
dataset.loc[:,'FamilyCount'].value_counts()	1	1
data.drop(['Embarked'], axis=1, inplace=True)	1	1
model.add(Dense(1, activation='sigmoid')) # Use sigmoid for classification answers (ea 1 or 0 )	1	1
te_df.drop(['Name','Embarked','Pclass','Ticket'],axis=1,inplace=True)	1	1
train_set['Died'] = 1 - train_set['Survived']	1	1
test.Age.dropna(axis='index',how='any',inplace=True)	1	1
data.drop(['Title', 'Embarked'], axis=1, inplace=True)	1	1
train['Fare'] = round(train['Fare'], 1)	1	1
acc_valid_summary.loc[clf_name, transform_name] = accuracy_score(y_test, clf.predict(X_test))	1	1
np.sum(-(Y_train * np.log(A) + (1 - Y_train) * np.log(1 - A))) / m	1	1
"model[""classifier""].predict(X_test) # Predicting the Test set results"	1	1
"sns.boxplot(x=""Survived"", y=""Age"", data=TitanicTrain)"	1	1
"test_vote.to_csv(""{}_{}.csv"".format(base[0],nsecond))"	1	1
proc_data.drop(['Survived', 'is_test'], axis=1).dropna(axis=0)	1	1
train_set['Score'] = train_set['Survived'] == train_set['Predict']	1	1
"newDF.groupby(""isChild"")[""Sex""].value_counts()[1].plot.pie(autopct=""%.2f%%"")"	1	1
titanic_train.drop(['Cabin'],1)	1	1
train[['Age', 'is_female', 'Survived']]	1	1
X_tot['Age']=X_tot['Age'].fillna(-1)	1	1
fill_age_df['AgeBand'].loc[fill_age_df['AgeBand'] != -1]	1	1
dataset['Age'][np.isnan(dataset['Age'])] = random	1	1
test_dmy.ix[:,(1,2,3,4,5,6,7,8,9)].values	1	1
cols.pop(cols.index('Survived')) #Remove b from list	1	1
"output_targets[""Survived""] = data[""Survived""]"	1	1
dataset.loc[dataset['Fare'] <= 17, 'Fare'] = 0	1	1
movie_hot.shape	1	1
df[['Pclass', 'Fare']].groupby('Pclass').mean()	1	1
df[['Survived']].groupby([df['Embarked']]).mean().plot.bar()	1	1
submission.to_csv('DeepLearning03.csv', index=False)	1	1
dataset.iloc[:,[2,4]].values	1	1
train_df.drop('Survived',axis=1).append(test_df,ignore_index=True)	1	1
parameters['save_cost'] and (epoch % parameters['save_cost_freq'] == 0):	1	1
xgb_rfecv.transform(xgb_rfecv_test)	1	1
allfeat.drop(columns=['Pclass']) #column no longer needed	1	1
df_features.drop(['Cabin'], axis=1)	1	1
submission.to_csv( 'titanic_pred_SVM.csv' , index = False )	1	1
test['E3'] = np.array(test['Embarked'] == 'Q').astype(np.int32)	1	1
dataset.loc[ dataset['Age'] > 66, 'Age'] = 7	1	1
"train.set_index(""PassengerId"",inplace=True)"	1	1
dataset.loc[dataset['Fare']<= 7.91, 'Fare'] = 0	1	1
dataset['Age'].fillna(dataset.Age.median(), inplace=True)	1	1
df_full['Fare'] == 0	1	1
ax[0].set_title('Survived vs SibSp')	1	1
sb.boxplot(dataset['Pclass'],dataset['Age'])	1	1
data_pruned.loc[(data_pruned['Age'] > 20) & (data_pruned['Age'] <= 40), 'Age'] = 2	1	1
data_test['FamilySize'] = data_test.Parch + data_test.SibSp	1	1
"test[""isSibsp""] = test.SibSp.apply(lambda x : 0 if x == 0 else 1)"	1	1
data_train.drop('Name', axis = 1)	1	1
dataset.loc[(dataset['Fare'] > 3.2) & (dataset['Fare'] <= 3.6), 'Fare']   = 2	1	1
data['Title_Remap_Code'] = title_remap_label.fit_transform(data.Title_Remap)	1	1
train_soft_pred_matrix.loc[:,topmodels(df=train_soft_pred_matrix)]	1	1
ax[4][1].hist(nonsurvivors['Parch'].dropna().tolist(), bins=nbins)	1	1
score.append(knn.score(X_train, y_train))	1	1
"train[""Age""] = train['Age'].astype(int)"	1	1
raw_test['FamilySize'] = raw_test.apply (lambda row: row['SibSp']+row['Parch'], axis=1)	1	1
"tp.loc[tp[""Ticket_g""]==""PC"",""Ticket_c""] = 1"	1	1
"ax[1].set_title(""ROC AUC Score Matrix"")"	1	1
"df.to_csv(""dandan_titanic_submission.csv"",header=True)"	1	1
test.drop(['Cabin'], axis = 1, inplace=True)	1	1
df_train_ml['Title'] = df_train_ml['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
"full[""Cabin""] = impute_and_to_dataframe(imputer, full, titanic.shape[0], [""Cabin""])"	1	1
dataset['Ttype'] = dataset['Ticket'].str[0]	1	1
train.loc[train['Family']>5,'Family']=2	1	1
df.Cabin.fillna(value='Dorm')	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Mme', 'Mrs')	1	1
"data['Pclass'].value_counts().plot.bar(color=[""#CD7F32"",""#FFDF00"",""#D3D3D3""], ax=ax[0])"	1	1
df_full['Title'] = df_full['Title'].replace(dict_replace)	1	1
train_with_less_features['Survived']	1	1
df_features.isnull().sum()	1	1
"i.loc[i[""Title""] == ""Ms."",[""Title""]] = ""Miss."""	1	1
submission.to_csv('rfc_submission_titanic.csv', index=False)	1	1
"df_test[[""SibSp"", ""Parch"",""Pclass"", ""Sex"", ""Age""]].replace(""male"", 1).replace(""female"", 0)"	1	1
titanic_data.shape[1]	1	1
raw_data.describe(include='all')	1	1
"train_df[""Age""].fillna(train_df.Age.median(),inplace=True)"	1	1
"train_df.groupby([""Age""])[""Age""].agg([""count""]).reset_index()"	1	1
train.loc[:,'b']=1	1	1
comb['FS_single'] = comb['Family_Size'].map(lambda x: 1 if x==1 else 0)	1	1
vec.transform(tags) > 0  #ignore double counts	1	1
test.loc[ test['Family'] > 3, 'Family'] = 2	1	1
predicted.astype(int)	1	1
copy_train_df.info()	1	1
Submission['Survived']=RandomForest.predict(test)	1	1
ax[0].set(xlabel='max_iter', ylabel='Accuracy')	1	1
train['Fare'][train['Survived']==0].value_counts().sort_index()	1	1
kaggle.head(1)	1	1
le.transform(test[column])	1	1
df_combined['Title'] = df_combined['Title'].replace('Mlle.', 'Miss.')	1	1
combined['BigFamily'] = combined['FamilySize'].map(lambda s : 1 if s > 4 else 0)	1	1
data_copy['Pclass']=data_copy['Pclass']*np.abs(corr_val['Pclass'])/total_val	1	1
train[['Sex', 'AgeGroup', 'Survived']].groupby(['Sex','AgeGroup'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
data.loc[(data.Age.isnull()) & (data.Title == 'High.'), 'Age'] = data.loc[data.Title == 'High.', 'Age'].median()	1	1
"result.to_csv(""out.csv"", header=True, index=False,  )"	1	1
"train_data.drop(""Cabin"", axis=1)"	1	1
"train.loc[(train[""Pclass""]==2)&(train[""Survived""]==0), ""Age""]"	1	1
dataset['Title'] = dataset['Title'].replace(['Countess','Lady','Sir'],'Royal')	1	1
raw_train['Cabin'] = raw_train['Cabin'].fillna('U') #Unknown	1	1
Survived_test.head()	1	1
dataset['Name']	1	1
MLA_compare.loc[index, 'MLA Test Accuracy'] = round(alg.score(val_X, val_y), 4)	1	1
"train[""Port""] = 0"	1	1
"Bagging_result[1][""best_score""],"	1	1
dataset.loc[i, 'Age'] = age_median	1	1
frame['TicketSurv'] = frame.Ticket.replace(ticket_surv)	1	1
np.mean(S_test_temp_p2, axis = 1)	1	1
test_dataset['PassengerId'],	1	1
"df[""Family""].unique()"	1	1
"train[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False)['Survived'].agg({'Survived': ['mean','count']})"	1	1
df.Name.str.replace('\,.*','').str.strip()	1	1
"test_data_1[""Child_col""] = ""NaN"""	1	1
pred_table_lr_2_test['Pred'] = pred_table_lr_2_test['Prob'].map(lambda x: 1 if x > 0.35 else 0)	1	1
Cabin[0] == 'G':	1	1
models.append(svc)	1	1
"plt.style.use(""fivethirtyeight"")"	1	1
df_train.loc[~df_train['Embarked'].isnull(),'Embarked'].mode()[0]	1	1
features_short['Sex_d'] = (features_short.Sex=='male').astype(int)	1	1
data_train.dropna(how='any',subset=['Embarked'],inplace=True)	1	1
titanic_train['Title']=titanic_train.Title.replace(to_replace=['the Countess','Lady','Mlle'],value='Mrs')	1	1
data.loc[(data.passenger_fare>=0) & (data.passenger_fare<8.59) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>=0) & (data.passenger_fare<8.59) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
"df_train[""NameBand""] = pd.cut(df_train[""NameLen""], bins=5, labels = [1,2,3,4,5])"	1	1
train.drop('title',1)	1	1
df[['Ticket', 'Age']].groupby('Ticket').max()	1	1
train_df[['PassengerId','Pclass', 'Sex', 'SibSp','Parch','Fare','Embarked']]	1	1
"train[""Test""] = 0"	1	1
train_data.drop(['PassengerId','SibSp','Parch','Fare','Name','Cabin','Ticket'],axis=1)	1	1
"train_df.fillna({""Fare"":0.0})"	1	1
"test.loc[(test[""Age""]>32) & (test[""Age""]<=48),""Age""]=2"	1	1
"dataset[""Title""] = dataset[""Title""].replace(['Lady', 'the Countess', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
"df[""Embarked""].value_counts()/df.shape[0]"	1	1
train_df['Sex_Class'] = labels	1	1
"titanic_test.drop(""Ticket"", axis=1, inplace = True)"	1	1
minmaxScaler.transform(oneHot_test)	1	1
all_data.loc[(all_data['Age'].isnull()) & (all_data['Sex'] == 'female'), 'Age'] = mean_age_female	1	1
"models[0][""best_params""]"	1	1
csv_final_test.isnull().sum()	1	1
df['company']       = df['company'].astype(company_cat)	1	1
dataset['Sex'] = dataset['Sex'].map(sex_mapping).astype(int)	1	1
"df[""Age""].plot(kind=""hist"", bins=np.arange(0, 80, 5))"	1	1
"related_people[""RGroup""]="""""	1	1
df_tmp['AgeAdj'].fillna(AgeTitleMedian)[df_tmp['Age'].isnull()] #ทดลอง fill na ด้วย median ที่เราหามา	1	1
df['AgeBand'] = pd.cut(df.Age, bins, labels = labels)	1	1
X['norm_fare'] = np.log(X.Fare.values+1)	1	1
"sol.to_csv(""lr.csv"", index=None)"	1	1
train['Title'].replace(['Countess','Dona','Lady'], 'Mrs', inplace = True)	1	1
"test_data[[""PassengerId""]].assign(Survived=y_pred)"	1	1
"df[""Family""] = df[""SibSp""] + df[""Parch""]"	1	1
X_test.append([passenger.Pclass, passenger.Age, sex, passenger.Fare])	1	1
plt.rcParams['patch.facecolor'] = 'b'	1	1
"train_data[[""Embarked"", ""Survived""]].groupby(""Embarked"", as_index = False).mean().sort_values(by = ""Survived"", ascending = False)"	1	1
dataset.loc[(dataset.Age.isnull())&(dataset.Sex==i)&(dataset.Pclass==j+1), 'Age']=guess_age[i,j]	1	1
"titanic_df[[""Pclass"", ""Survived""]].groupby(['Pclass'],as_index=False).mean()"	1	1
train.drop(['Sex','Embarked','Name','Ticket','Cabin'],axis= 1, inplace = True)	1	1
train['SingleMale'][train['Survived']==0].value_counts().sort_index()	1	1
"X[""Personal_fare""] = personal_fare"	1	1
test['Sex'].head()	1	1
Age.plot.hist(ax=ax[0],bins=20,edgecolor='black')	1	1
data_train['Cabin'].value_counts()	1	1
ml_model.loc[11] = ['xgboost',acc_score_1]	1	1
"titanic_train[""FamilyId""] = family_ids"	1	1
train_data[['Title','Survived']].groupby('Title', as_index=False).mean()	1	1
bcols.add('p_fare^2')	1	1
df_train[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
comb_data['FamSize'] = np.where(comb_data['FamSize']<2, 'Single', np.where(comb_data['FamSize']<5, 'Small', 'Large'))	1	1
agg_df_deck['Survived', 'sem'],	1	1
metric_dict.append(dict(zip(metric_cols, metric_values)))	1	1
"df[""AgeGroup_pred""] = pd.cut(df['Age_pred'], bins=[-2000,11,15,18,30,49,59,200], labels=[11,15,18,30,49,59,200])"	1	1
Merged_data['Age'] = Merged_data.Age.fillna(Merged_data.Age.median())	1	1
df_train['Sex'].isnull().sum()	1	1
df_train['Embarked'] = df_train['Embarked'].replace(numembark)	1	1
"data.drop(columns=[""Name"", ""Ticket"", ""Cabin""])"	1	1
test_new.to_csv( 'titanic_pred.csv' , index = False )	1	1
"train[""Title""].value_counts(ascending = False)"	1	1
all.fillna('U0')	1	1
"df_train.drop([""Sex"" , ""Cabin"" , ""Embarked""] , axis =1)"	1	1
"axs[0].set_title(""Age Distribution before imputing missing values"")"	1	1
model_data['Ticket_clf'] = model_data['Ticket_clf'].map({'A':0, 'PC':10, 'S':11, 'P':12, 'C':13, 'W':14, 'F':15, 'L':16, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9})	1	1
df_full.loc[mask_group, 'Survived'].max()	1	1
df['famsurrate'] = df.famsurvcnt/df.famsizbutemr	1	1
test_data['Title'].value_counts()	1	1
df_FULL.drop(['Sex','Embarked'], axis=1, inplace=True)	1	1
data_split[0]	1	1
dummy_df.head()	1	1
"test[""Name""].replace(to_replace='(.*, )|(\\..*)', value='', inplace=True, regex=True)"	1	1
test_dataset['Fareband'] = pd.qcut(test_dataset['Fare'],4)	1	1
"test[""Embarked""] = test.Embarked.astype('int')"	1	1
dataset.loc[ pd.isnull(dataset['Fare']), 'Fare'] = 0	1	1
sns.boxplot(train_data['Parch'])	1	1
survived_cabin_h.fillna(0, inplace=True)	1	1
train_df[['Family_S_C', 'Simple_S_C']]	1	1
df_age.loc[(df_age['Age'] > 26) & (df_age['Age'] <= 36), 'Age'] = 2,	1	1
testset['Age'] = testset[['Age', 'Pclass']].apply(fill_na, axis=1)	1	1
train.loc[ train['Name_len'] > 32, 'Name_len'] = 4	1	1
test['Sex'] = test['Sex'].map({'male': 1, 'female': 0})	1	1
train_df['Embarked'].isnull()	1	1
df1.drop('Cabin',axis=1)	1	1
df_train['Embarked'].mode()[0]	1	1
fulldata.set_value(fulldata.family_num < 3, 'Family_size', 'S')	1	1
test.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)	1	1
Test['Survived'] = pred	1	1
df['dr']=df['Name'].str.contains('DR.', case=False).astype(int) #get some info from name titles	1	1
X.drop(['Age'], axis=1, inplace=True)	1	1
df_train['SibSp_0_1_2over'] = [i if i <= 1 else 2 for i in df_train['SibSp']]	1	1
test.loc[test['Embarked'] == 'Q', 'Embarked'] = 0	1	1
"df_tr[""Survived""]"	1	1
test_data.drop(['PassengerId', 'Ticket'], axis=1)	1	1
grouped_df['Age'].transform(f)	1	1
test_df.filter(key_features)	1	1
data.loc[(data.Fare.isnull())&(data.Pclass==3), 'Fare']=8.05	1	1
data.drop(['Name','Ticket','Cabin'],inplace=True,axis=1)	1	1
"_df.loc[_df[""pclass""] == i, ""fare""].mean()"	1	1
Cabin[0] == 'D':	1	1
"train[""Title_master""] = train[""Title""] == 'Master'"	1	1
"df_all['Title'] = df_all['_Title'].map(lambda x: x if x in popular_titles else ""other"")"	1	1
"df_out.to_csv(""submission.csv"", index=False)"	1	1
df['Fare'] = df.Fare.fillna(train_df.Fare.median())	1	1
test.drop(columns='PassengerId').as_matrix(columns=None)	1	1
test_clean['Sex'] = test_clean['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
titanic_data.corr()	1	1
"train[[""Pclass"", ""Survived""]].groupby(""Pclass"", as_index=False).mean()"	1	1
X_train.axes	1	1
test_get_dummies[['Sex_male', 'SibSp', 'Pclass_3', 'Age', 'Embarked_S']]	1	1
"test[""Title""] = test[""Title""].map({""Master"":0, ""Miss"":1, ""Ms"" : 1 , ""Mme"":1, ""Mlle"":1, ""Mrs"":1, ""Mr"":2, ""Rare"":3})"	1	1
titanic_data.groupby('IsAlone').agg('sum')[['Survived', 'Died']].plot(kind='bar', stacked=True, colors=['green', 'red']);	1	1
featureRanks['importance'] = 0     # initialize	1	1
pca.transform(test_feats)	1	1
"df[""Fare""] = df[""Fare""].fillna(8.05)"	1	1
train.drop(['Sex','Embarked','Name','Ticket', 'Pclass'],axis=1,inplace=True)	1	1
imputer_age.transform(test_X)	1	1
fullfinal.dtypes	1	1
"titanic_train_dataframe.loc[titanic_train_dataframe[""Age""].notnull(), [""Sex"", ""Pclass"", ""Age""]],"	1	1
"train[""Embarked_3""] = train[""Embarked""] == 'S'"	1	1
df['Age'].apply(lambda x: True if x - np.floor(x) == 0.5 and x >1 else False)	1	1
title_sur['Survived'].tolist(),	1	1
sub['Survived'] = y_predict	1	1
Test_data.head(2)	1	1
df2.head(3)	1	1
data.loc[0]	1	1
best_iteration[0] = validation_epoch_cost	1	1
dataset['Title_Mrs'] = dataset['Title'].map(lambda s: 1 if  s == 3  else 0)	1	1
"df[""FareBin""] = pd.cut(df['Fare'], fare_bins)"	1	1
X_Test.drop(['Name'], axis=1)	1	1
"Xt_cat.drop(""Ticket"", 1)"	1	1
pca.transform(X_train)	1	1
"data.loc[data['Survived']==1,""Age""].dropna()"	1	1
row['Sex'] == 'female' and row['Pclass'] == 2 and row['Parch'] > 1:	1	1
data.iloc[[0]]	1	1
train.drop(data_to_drop,axis=1,inplace=True)	1	1
test['Embarked'] = test.Embarked.map({'S':0,'C':1,'Q':2})	1	1
"train[""Embarked""] = train[""Embarked""].fillna(random.choice('SSSCQ'))"	1	1
pd.pivot_table(tit_df, values = 'Survived',                     index = ['Parch', 'female', 'MMM'],                     columns=['Pclass'],                     aggfunc='count')	1	1
df['cabin_group'] = df.cabin.apply(lambda x: 'u' if x is np.nan else x[0].lower())	1	1
model.add(Dropout(0.8))	1	1
"data_df[""Room""] = data_df[""Cabin""].str.slice(1,5).str.extract(""([0-9]+)"", expand=False).astype(""float"")"	1	1
combined_data.drop('Embarked',axis=1,inplace=True)	1	1
processed_df.drop(['Survived'], axis = 1).values	1	1
X_test.drop(drop1, axis=1, inplace=True)	1	1
"dataset.loc[dataset[""Title""] == ""Mrs"", ""Title""] = 2"	1	1
self._preprocessor.fillna(self.data, fill_strategy)	1	1
train_df['Sex'] = train_df['Sex'].astype(int)	1	1
data_train.drop(['SibSp','Parch'], axis=1)	1	1
df['Fare'].skew()	1	1
train_df.Age.fillna(median_age)	1	1
axis2.spines['right'].set_linewidth(0)	1	1
train[['Survived','FamilySize']].groupby('FamilySize').mean().sort_values('Survived',ascending=False)	1	1
classifiers.append(rf)	1	1
test.loc[:,['PassengerId','Age','Fare', 'Pclass','Title','PassengerType','FamilySize','Embarked','Gender']].values	1	1
ax[1].set_title('Fare in Pclass 2')	1	1
train_df.loc[(train_df['Age'] >= 50.157) & (train_df['Age'] < 60.105), 'Age'] = 5	1	1
ax[0].set_title('Accuracy on VALIDATION sample ' + suff + '(mean from CV)')	1	1
X_test1.loc[:,('Age', 'SibSp','Parch','Fare','Sex1', 'Pclass1')]	1	1
orig_training_set.drop(['Name', 'PassengerId', 'Ticket'], axis = 1)	1	1
data['name']	1	1
train_df.drop('AgeBand', axis = 1)	1	1
test_data['Sex'].replace(['female','male'],[0,1],inplace=True)	1	1
family['FamilySize'] = full_data['Parch'] + full_data['SibSp'] + 1	1	1
df.apply(lambda x: x.unique().shape[0])	1	1
train['EmbarkedQ'] = train['Embarked']	1	1
data_train.drop(['Survived'],axis=1)	1	1
test.head(80)	1	1
ax.hist(train['Age'].dropna(), bins=n_bins, color='r')	1	1
combine_df['Parch'].ix[combine_df['Parch']>2] = 3	1	1
df[['SibSp', 'Survived']].boxplot(by = 'Survived')	1	1
dataset.groupby(['embarked']).size().index.isin(['C', 'Q', 'S']).any():	1	1
train_df.iloc[:,1].values	1	1
"test_df[""Age""] = test_df[""Age""].fillna(test_df[""Age""].mean())"	1	1
df_test.drop(['Sex','Embarked'],axis=1,inplace=True)	1	1
fulldata.drop(['source', 'Survived'],  axis=1)	1	1
test_dummy['Cabin_T'] = 0	1	1
df_data['Mother'] = df_data['Mother'].astype(int)	1	1
dataset.loc[(dataset['Age'] > 20) & (dataset['Age'] <= 30), 'Age'] = 2	1	1
test.drop(['PassengerId','Name','Ticket','Cabin', 'Embarked', 'Parch', 'SibSp'],axis=1)	1	1
train3['Embarked'] = le.fit_transform(train3['Embarked'])	1	1
"df.groupby(""Sex"").get_group(""female"")"	1	1
df.dropna(subset=['Embarked'])	1	1
"df_train.drop(columns=[""Survived""])"	1	1
df_full.drop(['Name', 'PassengerId'], axis=1, inplace=True)	1	1
classifier.add(Dense(units=1, kernel_initializer='uniform'))	1	1
data['Title']=data.Title.replace({'Mlle':'Miss','Mme':'Mrs','Ms':'Miss','Master':'Mr'})	1	1
"row[""Name""].split("","")[0] in families_zeros.columns.unique():"	1	1
"titanic_test_df.loc[titanic_test_df[""Sex""] == 'female',""Sex""] = 1"	1	1
train['Age_Group']=train['Age'].apply(age_group)	1	1
w.append(np.sum(single))	1	1
"df_train[""Cabin""].fillna(df_train.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	1	1
np.mean(clf_scores)	1	1
test['Fare'].isnull().sum():	1	1
dataset['AgeBand']='0'	1	1
train['Family_Size'][0:15]	1	1
"full.set_value(full[""Family""] == ""large"", ""Family"", 2)"	1	1
combined['Age'].fillna(combined['Age'].median(), inplace=True)	1	1
numerical_columns.append(category_column)	1	1
df.to_csv(path, index=False)	1	1
data.query('train == 0')	1	1
train_data['Title'] = train_data['Title'].replace('Mlle.','Miss.')	1	1
dataset.groupby('title_level').Age.agg(['mean', 'median', 'std'])	1	1
df_test['AgeBinCode'] = label.transform(df_test['AgeBin'])	1	1
test['Title']=test['Title'].replace(['Mlle','Ms'],'Miss')	1	1
df['filled_ages']=df['filled_ages'].astype(int)	1	1
titanic_df['Name'].head()	1	1
test.drop(['Person'],axis=1,inplace=True)	1	1
accuracies.append(svm_score)	1	1
data['Age'] = data['Age'].fillna(data['Age'].mean())	1	1
plt.boxplot(x = data1['Age'], showmeans = True, meanline = True)	1	1
"train[""Embarked""] = train[""Embarked""].map( {'S': 1, 'C': 2, 'Q': 3} ).astype(int)"	1	1
whole.set_value(913,'Fid',72) #display(whole[whole.Surname=='Olsen'])	1	1
df_train.drop(['Name', 'PassengerId'], axis=1)	1	1
df['Fare'].mean()	1	1
titanicAll.groupby(['Survived','Sex']).size()	1	1
"test.loc[(test[""Age""] <= 32)&(test[""Age""] > 16), ""age_c""] = ""2"""	1	1
df_gs.to_csv('output{}.csv'.format(curr_time),index=False)	1	1
df_comb['Title'] = df_comb['Title'].replace(['Mlle','Ms', 'Countess', 'Lady', 'Dona'], 'Miss')	1	1
train_df.loc[train_df['Age']>64,'Age_band']=5	1	1
dataset.loc[(dataset['Age']<=16), 'Age'] = 0	1	1
td['Age'].fillna(td.Age.mean(),inplace=True)	1	1
submission.to_csv('logreg_submission.csv', index=False)	1	1
"data.drop(""Survived"", axis=1)"	1	1
data['Age'] = pd.qcut(data['Age'], 4)	1	1
X_train2.loc[:,['Age', 'SibSp', 'Parch', 'Fare', 'FamSize']]	1	1
predictions['Target'] = Y_train	1	1
train_df.groupby('Initial')['Age'].mean()	1	1
train.drop(drop_features, axis = 1)	1	1
"train_data[[""Pclass"", ""Survived""]].groupby(['Pclass'],as_index=False).sum()"	1	1
"train_df['Embarked']=train_df['Embarked'].fillna(value = ""S"")"	1	1
"total[""Title""] = total[""Title""].replace(['Mme'], 'Mrs')"	1	1
train_d['Title']=train_d['Title'].replace([' Col',' Major',' Sir',' Don',' the Countess',' Jonkheer',' Capt'],' Rare')	1	1
test.loc[test['Age'] > 64, 'Age'] = 4	1	1
"models.append((""GradientBoostingClassifier"",  GradientBoostingClassifier))"	1	1
test_df['Gender'] = test_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
test_raw.copy(deep=True)	1	1
df['Age'] = df[['Age','Title']].apply(compute_age,axis=1)	1	1
train_df[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
known_age.iloc[:,1:]	1	1
train_df.info() # check all nulls have been filled	1	1
svc_model['Model']	1	1
titanic_df['Title'] = titanic_df.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\.', x).group(1))	1	1
training_data['Age'].value_counts()	1	1
np.dot(dZ2, A1.T)	1	1
train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).count()	1	1
"titanic_data[""Age""] = titanic_data[""Age""].fillna(age_mean);"	1	1
clfs.append(MLPClassifier(random_state=seed))	1	1
combined_df['Age'][combined_df['Title'] == 4].mean()	1	1
trainingset['FareBin'] = pd.qcut(trainingset['Fare'], 4, labels = [1, 2, 3, 4])	1	1
test['Sex']=label_encoder.fit_transform(test['Sex'].astype('str'))	1	1
train['Title'] = train.Name.str.extract(', (\w{1,})\.')	1	1
test.drop(['PassengerId'],axis=1).copy()	1	1
"submission.to_csv(""lr_submission.csv"", index=False)"	1	1
t[0] == '9':	1	1
test.loc[(test['PaxclassA'] == 1) & (test['Fare']>100),'PaxclassA'] = 0	1	1
train_df.ix[train_df['Fare']>100]	1	1
"all[""Age""] = age_slice"	1	1
trainfinal.head()	1	1
train['Age'].fillna(29.69911764705882, inplace=True)	1	1
df.dtypes[df.dtypes.map(lambda x: x == 'object')]	1	1
full.drop(['PassengerId', 'Ticket'], axis = 1, inplace = True)	1	1
train_dat[['Embarked', 'Survived']].groupby('Embarked').mean()	1	1
dataset['Family'].loc[dataset['Family']==0]=0	1	1
df['Fare'].fillna(df[df.Pclass == 3].Fare.median(), inplace = True)   #Fare is dependent on Pclass	1	1
test_one.info()	1	1
combined_df.loc[combined_df['title_extracted'] == 'Master', 'title'] = 'master'	1	1
train_df.ix[:,:-1].hist(figsize=(6,8))	1	1
data.loc[data.Title.str.contains('123'),'Title']='Mrs'	1	1
test.drop('Embarked', axis=1, inplace=True)	1	1
full['Adult'] = full['Age']>18	1	1
num_ids.append(dtypes.index.get_loc(index))	1	1
combine['Cabin_Lv'] = combine.Cabin.str.extract('(^.{0,1})', expand=False)	1	1
"train[""Survived""][train[""Sex""]=='male'][train[""Age""]<18][train[""Pclass""]==3].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
df_train['Surv']	1	1
"lastname_table.loc[lastname_table[""People_w_lastname""] < 3, 'Lastname_id' ] = -1"	1	1
merged.loc[(merged.Age.isnull())&(merged.NameTitle=='Miss'),'Age']=22	1	1
df['embarked_fill'] = df['Embarked']	1	1
data.drop(['surname_Exclude'], axis=1, inplace=True)	1	1
data['Embarked'] = data.Embarked.fillna('S')	1	1
"titanicDF[""Age""].dropna()"	1	1
full_X.head().shape	1	1
train.groupby('Ticket')['Survived'].sum()	1	1
data.groupby('Pclass').mean()['Fare'].plot(kind='bar',figsize=(6, 3), ax = ax)	1	1
"TRAIN_DATA[""AgeRange""] = pd.cut(TRAIN_DATA[""Age""], range(0, 90, 10))"	1	1
dt_rfecv.transform(dt_rfecv_train)	1	1
new_train['Fare'] = np.log(new_train['Fare'])	1	1
"test_data[""Fare""]=test_data[""Fare""].fillna(value=test_data['Fare'].mean())"	1	1
test.drop(drop_cols, 1, inplace = True)	1	1
df['Embarked'].fillna('S', inplace = True)	1	1
"processed_features[""Male""] = (dataframe[""Sex""] == 'male').astype(int)"	1	1
full['Title'] = full['Title'].replace(replacement, ''.join(title))	1	1
figure['data'][0]['hoverinfo'] = 'none'	1	1
"df_train.hist(""Survived"", by=""Embarked"", layout=[1,3],figsize = [10,3])"	1	1
df['Age']=df['Age'].astype('category')	1	1
train_df[['isalone', 'survived']].groupby(['isalone']).mean()	1	1
"rayyan_submission.to_csv(""titanic.csv"", index=False)"	1	1
df_titanic_train_mod.loc[:,['Pclass','Sex','Embarked','Age','Title','SibSp','Parch']]	1	1
data_df.groupby(['Parch'])['Survived'].mean()	1	1
combined_df['title_encoded'] = combined_df['title'].map(title_mapping)	1	1
train.groupby(['Title', 'Sex']).Survived.mean().plot(kind = 'bar')	1	1
"df_train.loc[((df_train[""title""]==""mr."") & (df_train[""Age""].isnull()==True)).tolist(),'Age']=avg_mr"	1	1
train['Cabin'] = train['Cabin'].fillna('0')	1	1
new_feats['survived']	1	1
train.drop(['PassengerId', 'Name', 'Cabin', 'Embarked', 'Ticket', 'Fare'], axis=1, inplace=True)	1	1
sds.transform(sd_test)	1	1
score.append(svc.score(X_val, y_val))	1	1
df_train_full['Survived'].values	1	1
unknown_set['Age'] = age_pred_xgb	1	1
test_df['Farebin'].value_counts()	1	1
tab.iloc[:,:]'''	1	1
x_train_df.values	1	1
train_df['Title'] = train_df['Title'].apply(classify_title)	1	1
data1[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean(),	1	1
test_data['Title'] = test_data['Title'].replace(['Mme','Lady','Ms'], 'Mrs')	1	1
train_set[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()	1	1
"train.loc[i,""Commentaire""] = float(""nan"")"	1	1
combined_df.loc[(combined_df['Embarked'] == 'S') & (combined_df['Pclass'] == 3) , 'Fare'].median()	1	1
train_df.loc[(train_df['Age'] >= 30.263) & (train_df['Age'] < 40.21), 'Age'] = 3	1	1
train['Fare1'] = train['Fare1'].apply(transform_fare)	1	1
res_df_solver_tol['Val_acc_'+solver_list[i]] ,	1	1
df_output[['PassengerId','Survived']].to_csv('titanic_submit.csv',index=False)	1	1
merged_df.drop(['Pclass'], axis=1)	1	1
np.dot(layer_1,w1) + b2 # mxH X Hx1 ~ mx1 (preds)	1	1
test.drop(['Sex'], axis = 1, inplace = True)	1	1
Y.copy()	1	1
test_df.loc[(test_df.Age.isnull()) & (test_df.Gender==i+1) & (test_df.Pclass==j+1), 'AgeFill'] = median_ages[i,j]	1	1
df.loc[61,'Embarked'] = 'C'	1	1
data_no_nan.head()	1	1
train_file['Sex']=train_file['Sex'].map({'female':1,'male':0})	1	1
"titanic_test[""Survived""]"	1	1
train['Embarked'] = train['Embarked'].map({'S': 0, 'Q': 1, 'C': 2}).fillna(3).astype(int)	1	1
df_submission['age'] = df_submission.apply(fill_age, axis=1, df=df_all)  # [1]	1	1
df_age_test[['Pclass', 'Sex', 'Parch', 'SibSp', 'title_age_level', 'Fare']]	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset['Title']==3), 'Age']=33	1	1
ns_df.sort_values(['F_Scores', 'Feat_names'], ascending = [False, True])	1	1
df.drop(labels='Name', axis='columns', inplace=True)	1	1
plt.hist(x=train.Age[train.Pclass==3].dropna())	1	1
data_test.iloc[:,1:]	1	1
df['Deck'] = pd.Series([re.split('(\d.*)',s)[0][0] for s in df['Cabin']])	1	1
titanic[['Fare','Age_bin']].groupby('Age_bin').mean()	1	1
X[4] = X[0] + X[1] == 1	1	1
trainData['Pclass'].value_counts().sort_index().plot.bar(ax=axs[0],figsize=(12, 6), fontsize=16)	1	1
gs.best_params_['min_samples_leaf'],	1	1
featureList[0]	1	1
"strat_train_set[""Survived""].copy()"	1	1
"train[""Survived""], (-0.1, 1.1), cv=3,"	1	1
df_test_ml['Title'] = df_test_ml['Title'].replace(man_upper, 3)	1	1
df_test['FamilyBool'] = (df_test['SibSp'] > 0) | (df_test['Parch'] > 0)	1	1
titanic1.drop(['PassengerId','Name','Age','Ticket','Cabin','Survived','SibSp','Parch'], axis=1, inplace=False)	1	1
titanic_train_test_merged['Age_range_cat']=titanic_train_test_merged['Age_range'].cat.codes	1	1
A2_bool.astype(int)	1	1
df_features['Name'].apply(lambda x: x.split(',')[1].split(' ')[1])	1	1
combine.loc[(combine['Age'] > 16) & (combine['Age'] <= 32), 'Age'] = 1	1	1
test['family_is']='0'	1	1
x.corr()	1	1
results['test_score']	1	1
"train[[""Pclass"",""Age"",""Sex"",""Fare"", ""SibSp"", ""Parch"",""Embarked""]].values"	1	1
"test[""Sex""][test[""Sex""] == ""male""] = 1"	1	1
"test[""Age""].head()"	1	1
train_p['Survived']	1	1
df['parch_2'] = (df.parch == 2).apply(int)	1	1
df_test['Sex'].apply(lambda x: '1' if x=='female' else '0')	1	1
male_class2_class3[['Survived','Class']],index='Survived',columns=['Class'],	1	1
dataframe['Name'] = titles	1	1
df['Fare'] = np.where((df['Fare']>10*i) & (df['Fare']<=(i+1)*10) ,((10*i) + ((i+1)*10))/2 , df['Fare'])	1	1
"test.drop(""Parch"", axis = 1, inplace = True)"	1	1
"df_test[""title""]=df_test[""Name""].str.lower().str.extract('([a-z]*\.)', expand=True)"	1	1
train[['Pclass', 'Age']].boxplot(by='Pclass')	1	1
df['Sex_Val'] = df['Sex'].map(genders_mapping).astype(int)	1	1
dftest.iloc[women_died_ids,:]	1	1
df['Ticket'] = df['Ticket'].replace(['A','W','F','L','5','6','7','8','9'], '4')	1	1
df.iloc[5:10, 3:8]	1	1
"tree_prediction.to_csv(""tree_prediction.csv"", index = False)"	1	1
"Y[""Embarked""] = Y[""Embarked""].fillna(""S"")"	1	1
test['tkno'] = test['Ticket'].str.extract('(\d\d+)', expand=True)	1	1
train.set_index('PassengerId',drop=True,inplace=True)	1	1
train['Title'] = title_arr	1	1
clf_svm_tune_.cv_results_['std_test_score']	1	1
"test_df['Age']= test_df['Age'].fillna(test_df[""Age""].median())"	1	1
train_df.describe(include = ['O'])	1	1
df_test.loc[df_test['Cabin'].notnull(),'Cabin']=1	1	1
train['Embarked']=train.Embarked.map({'S':0,'C':1,'Q':2})	1	1
df['Cabin'].fillna('Z', inplace=True)	1	1
train.dropna(axis=0,subset=['Embarked'])	1	1
combined['Cabin_num1'] = combined['Cabin_num1'].apply(lambda x: int(x) if not pd.isnull(x) and x != '' else np.NaN)	1	1
test.replace({'male':0, 'female':1}, inplace=True)	1	1
"titanic_df[""Sex""] = le.transform(titanic_df.Sex.values)"	1	1
WholeDataSet.head()	1	1
"train[""Partition""]=""train"""	1	1
"train[""Child""] = False"	1	1
ax[0].set_title('count of passenger Based on  '+ t1)	1	1
df_out_1.Fare.replace(to_replace=[0, np.nan], value=math.floor(mean_fare_by_pclass.iloc[int(index)-1]), inplace=True);	1	1
np.where(data[var] > upper_bound, upper_bound, data[var])	1	1
train.Cabin.fillna(train.Cabin.value_counts().idxmax(),inplace=True)	1	1
test['TSNE1'] = new_features.iloc[train_rows:(train_rows+test_rows-1),0]	1	1
train['Pclass2'][i] = 1	1	1
train['Pclass2'][i] = 0	1	1
dates.size	1	1
train_setup.copy()	1	1
poly2.transform(test_x_actual)	1	1
train_clean.corr()['Survived']	1	1
df.sort_index(axis=0, ascending=False)	1	1
test_baseline_model[['PassengerId', 'Survived']]	1	1
"models.append((""RandomForest2"",rf2))"	1	1
titanic_data['Age'].mean()	1	1
"train_dat.loc[~train_dat[""Title""].isin([""Mr"",""Mrs"",""Miss"",""Master"",""Dr""]),""Title""] = ""Others"""	1	1
training_data.Age.hist();	1	1
"sns.boxplot(y=df[""Age""])"	1	1
combined['Ticket_Len'] = combined['Ticket'].apply(lambda x: len(x))	1	1
dfgendersub.shape	1	1
test_df[['PassengerId','Survived']].to_csv('submission.csv', index=False)	1	1
train_df.update(related_people)	1	1
test.drop(['Pclass', 'Age', 'SibSp', 'Parch','Cabin'], axis=1)	1	1
titanic_train.describe(include=['object'])	1	1
train_data.loc[(train_data['Fare']>8.662) & (train_data['Fare']<= 26), 'Fare'] = 1	1	1
data['fm_name']=data['Name'].map(lambda x:parse_name(x)[0])	1	1
base_predictions_test.corr()	1	1
"i[""CabinCount""] = i.groupby([""Cabin""])[""Title""].transform(""count"")"	1	1
full_data.loc[full_data['FamilySize'] == 1, 'IsAlone'] = 1	1	1
"test_hard_pred_matrix.to_csv(""test_hard_pred_matrix.csv"")"	1	1
X_transformed.corr()	1	1
model_data.loc[model_data.Pclass == 1,('Cabin_Letter')].value_counts()	1	1
"knnsubmission.to_csv(""knnsubmission.csv"",index=False)"	1	1
"axes[19].set(xlabel='CabinLoc', ylabel="""")"	1	1
valid_df['Survived']	1	1
ship['Cabin'].loc[ship['Cabin'].notnull() & (ship['Survived'] == 1)].count()	1	1
df_X.max()	1	1
df_submit_raw.sample(5)	1	1
y_train.sample(4)	1	1
dataset['AgeBand'] = dataset['AgeBand'].cat.codes	1	1
X_train[['TraveledAlone', 'FaresRange']].groupby(['TraveledAlone'], as_index=False).mean()	1	1
X['Sex']=labelencoder.fit_transform(X['Sex'])	1	1
data['MaidenFirstName'] = data['MaidenName'].str.split(' ').str.get(0)	1	1
titanic_train['Title']=titanic_train.Title.replace(to_replace=['Don','Rev','Dr','Major','Sir','Col','Capt','Jonkheer'],value='Mr')	1	1
pd.merge(df_svc_train_c,df_svc_test_c,on='cvalue',copy=False)	1	1
df_data['Age']=df_use_reg.apply(lambda x: svr.predict(x[3:].reshape(1, -1)) if pd.isnull(x['Age']) else x['Age'], axis=1)	1	1
data['Survived'].corr(data[col])	1	1
df['Title'] = df['Title'].replace(['Col','Dr','Major'],                   'Profession')	1	1
df_test['isalone'] = df_test.apply(setisalone, axis=1)	1	1
dataset.groupby(['Pclass', variable]).size()[3]	1	1
"train_sex_numerified.query(""Sex == 'Male'"").query(""Female == 0"").Female.count() == 577"	1	1
rfc_params['random_state'] = 0	1	1
Data['Title2'].unique()	1	1
out.to_csv('out.csv')	1	1
all_data.loc[flag_P1_NA, 'Cabin_type'] = np.random.randint(0, 5, P1_NA_Size)	1	1
data.loc[(data.passenger_fare>49.5) & (data.passenger_fare<=49.51) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>49.5) & (data.passenger_fare<=49.51) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
test['Title']=test['Title'].replace(['Capt','Col','Don','Dr','Jonkheer','Major','Rev','Sir','Dona'],'Rare')	1	1
df['Age_bin_custom_range'] = pd.cut(np.array(df.Age), bins=bin_ranges)	1	1
train.drop('Sex', axis=1, inplace=True)	1	1
lda.coef_.transpose()	1	1
df_temp.loc[(df_temp['Pclass']==i),'Count'] = df_temp[(df_temp['Pclass']==i)]['Count']/gender_count[i]	1	1
"df_train.corr()[""Survived""].sort_values()"	1	1
titanic_df['Pclass'].isnull().sum()	1	1
Each_Passenger.loc[(Each_Passenger['Age'] > 0) & (Each_Passenger['Age'] <= 6 ) | (Each_Passenger['Fare'] > 0) & (Each_Passenger['Fare'] <= 52) , 'Age'] = 1	1	1
train['Fare_cat']=0	1	1
"train_data.drop(""Name"", axis=1)"	1	1
dataset.isnull().sum()/dataset.isnull().count()*100	1	1
test.loc[test['Embarked']=='C','Port']=1	1	1
dataset.loc[(dataset['Sex'] == gender) & (dataset['Embarked'] == embarked) & (dataset['Pclass'] == pclass) & (dataset['Age'] == age),'Fare'].dropna()	1	1
whole.set_value([105,393],'Fid',36) # Gustafsson, Backstrom	1	1
train['ticketlength'] = train['Ticket'].apply(lambda x: len(x))	1	1
train_data.drop(['PassengerId','Name','Cabin','Ticket','Survived','Embarked','SibSp','Parch','Pclass','Age'], axis=1)	1	1
pd.isnull(all_data.iloc[i, 0]):	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Major', 'Rare')	1	1
"full['ticket_header'] = full.Ticket.str.extract(""([a-zA-Z0-9]{3})"", expand=False)"	1	1
train_with_title.dropna(subset = ['Age'])	1	1
test_dataset['Fare'] = test_dataset['Fare'].astype(int)	1	1
df_test_raw[['PassengerId']]	1	1
"train_df[""Fare""][train_df[""Survived""] == 1]"	1	1
all_soft_preds.loc[testdex, :]	1	1
dataset['Cabin'].fillna('U', inplace=True)	1	1
df['Fare'].values.copy()	1	1
test_df['Title'] = test_df['Title'].replace('Mme.','Mrs.')	1	1
fit_models.append(models[i].fit(X_train,y))	1	1
df_1.head()	1	1
np.dot(temp,y)	1	1
test_df.FarePP.hist(ax=axes[1], bins=20)	1	1
paramters['layers_dim']	1	1
df_features['Ticket'].value_counts()[df_features['Ticket'].value_counts() > 1]	1	1
df['SIBSP_6_7']=0	1	1
"train[""Survived""][train[""Sex""]=='female'].value_counts()"	1	1
"titanic_df[""Embarked""].loc[titanic_df[""Embarked""]==""C""]=0"	1	1
test_features2['Sex'].replace({'male' : 1, 'female': 0}, inplace=True)	1	1
df_train[['isInfant','Survived']].groupby('isInfant').mean()	1	1
x.iloc[:,0].values	1	1
full['FamilySize'] = full['SibSp'] + full['Parch'] + 1 #1 to include the passenger himself	1	1
rawdata['AgeCategory']=0	1	1
"dftest[""TicketButLast""]=dftest.Ticket.map(lambda x: x[:-1])"	1	1
cross_val.mean()	1	1
train['SexAge'] = train['Sex']	1	1
data.With_Family.apply(lambda x: 1 if x > 0 else 0)	1	1
individual[2]	1	1
train['Alone'] = 1	1	1
test_x.values	1	1
Y_train.dropna(axis=0)	1	1
df['Fare'] = df['Fare'].astype('int')	1	1
data[['Embarked', 'Survived']].groupby(['Embarked']).agg(['count','mean'])	1	1
Cols[0]	1	1
full_df.loc[ (full_df['FamilySizeCategories'] > 1) & (full_df['FamilySizeCategories'] < 5) , 'FamilySizeCategories' ] = 1 #Small	1	1
pd.pivot_table(tit_df, values = 'Survived',                     index = ['SibSp', 'female'],                     columns=['Pclass'],                     aggfunc=np.mean)	1	1
numerical_columns.append('TicketId')	1	1
"age[""Age""] = age[""Age""].fillna(age[""Age""].mean())"	1	1
MLA_compare.loc[row_index, 'MLA Train Accuracy'] = alg.score(train1_dummy_x,train1_dummy_y)*100	1	1
dataset['Age'].hist()  ## == dataset.Age.hist()	1	1
train_df.ix[-np.isnan(train_df.Age), 'Ageknown'] = 'Yes'	1	1
"data[""Title""] = data[""Name""].apply(lambda n : get_title(n))"	1	1
"X[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
train_df_concat['Embarked_map'] = train_df_concat['Embarked'].map({'S':0,'C':1,'Q':2})	1	1
"_df.loc[_df.pclass == _pclass, ""fare""].median()"	1	1
"StackingSubmission4.to_csv(""StackingSubmission.csv"", index=False)"	1	1
test['Has_Cabin'] = test['Cabin'].apply(lambda x: 0 if type(x) == float else 1)	1	1
df['Age'].plot.hist(bins=20)	1	1
AA_test.drop(['Age'],axis=1)	1	1
df_test_features['Embarked'].median()	1	1
traindf['Male'] = male	1	1
ans.to_csv('answer.csv',index=False) # saving to a csv file for predictions on kaggle.	1	1
dataset.loc[(dataset['Age'] > 35) & (dataset['Age'] <= 50), 'Age'] = 3,	1	1
"test.replace(rare_titles, ""Rare title"", inplace=True)"	1	1
titanic_df['Age1'] = titanic_df.Age	1	1
test_data['title'].value_counts()	1	1
X_train['Embarked'] = train_df['Embarked'].map({'S' : 0, 'Q' : 1, 'C' : 2}).astype(int)	1	1
dataframe.loc[dataframe[column_name] < threshold, column_name] = 0	1	1
df_test.loc[df_test['Sex'] == 'male', 'Sex'] = 0	1	1
test['Embarked'][test['Embarked'] == 'S'] = 0	1	1
df.Cabin.isnull().sum(axis=0)	1	1
train_data['Parch'][np.isnan(train_data['Parch'])] = int(mean_Parch) + 1	1	1
test['Title'].replace(['Dr','Col','Rev','Dona'],['Mr','Mr','Mr','Mrs'],inplace=True)	1	1
"train[""spaces_in_name""] = train[""Name""].map(count_spaces)"	1	1
train['family']= train['SibSp'] + train['Parch'] + 1	1	1
dataset_df['Fare'] = dataset_df['Fare'].fillna(dataset_df['Fare'].median())	1	1
"test.loc[test.Title.isin([""Mlle"", ""Ms""]), ""Title""] = ""Miss"""	1	1
train_cp['Title'] = train_cp['Title'].replace('Mlle', 'Miss')	1	1
data.loc[data['Age']<=cat[0],'Age']=0	1	1
"submission.to_csv(""submission_FEAT.csv"",index=False)"	1	1
"tickets.append(""X"")"	1	1
test_df['Initial']=0	1	1
train_dataset.loc[(train_dataset['Age'].isnull()) & (train_dataset['Title']=='Master'),'Age'] = 5	1	1
"train.loc[train.Title.isin(rare_title), ""Title""] = ""Rare"""	1	1
tr['Title'] =tr['Title'].replace('Jonkheer',4)	1	1
accuracy['majority_voting_selected_cols'] = sum([1 if train_predictions['majority_voting_selected_cols'].loc[i] == survived.loc[i] else 0 for i in survived.index])/791	1	1
data_pruned.loc[(data.Age.isnull()) & (data_pruned.Pclass == i) & (data_pruned.Title==j), 'Age'] = guess_age[i,j]	1	1
filt_df['is_female'] = filt_df['is_female'].apply(lambda sex: 1 if sex == 'female' else 0)	1	1
train_dataset.loc[ (train_dataset.Pclass == 3) & (train_dataset.Sex_male == 1) & (train_dataset.Age > 60), ['Fare']].median()	1	1
train_p.drop(['SibSp','Parch'], axis=1)	1	1
data2.drop(['PassengerId','Name','Ticket'],axis=1)	1	1
train.pivot_table(columns='Sex', index='Parch',                  values='Survived', aggfunc='mean').plot(kind='bar')	1	1
"test.loc[test[""Embarked""] == ""C"", ""emk_c""] = ""2"""	1	1
Xtrain.describe()	1	1
data_pruned.loc[data.Fare.isnull() & data_pruned.Pclass == i, 'Fare'] = guess_Fare[i]	1	1
test_dataset['Title'] = test_dataset['Title'].apply(lambda x: 'Misc' if title_namest.loc[x] == True else x)	1	1
dataset.Embarked.head(20)	1	1
"data.loc[data[""Age""] <= 18, ""Child""] = 0 # Child"	1	1
pred_table_lr_1.is_copy = False	1	1
classifier_score['SVC'] = scores.mean()	1	1
dataset.loc[dataset['Fare']<=7.91,'Fare']=0	1	1
row['Age'] <= 7:	1	1
df_data['Embarked'].fillna(df_data['Embarked'].mode()[0], inplace=True)	1	1
combined.drop('Name',axis=1, inplace=True)	1	1
data.loc[data['Age'].isnull(), ['Age']] = data['Age'].max()	1	1
"third_class_survived.plot.hist(fc=(0, 0, 1, 0.5), normed=1, label=""Survived"")"	1	1
submission.to_csv('titanic_mvp_3_19_04_2018.csv', index=False)	1	1
full_set['Fare'].quantile(np.linspace(0,1,5))	1	1
"titanic.drop(""Cabin"",axis=1,inplace=True)"	1	1
"train[""Cabin""][train[""Cabin""] == ""G""] = 6"	1	1
titanic_data['Embarked'] = titanic_data[['Embarked', 'Pclass']].apply(embarked_approx, axis=1)	1	1
train.groupby(['Sex'])['PassengerId'].count()	1	1
"test_set[""Name""] = StandardScaler().fit_transform(test_set[""Name""].values.reshape(-1,1))"	1	1
val_labels.T.values.reshape(1, val_labels.shape[0])	1	1
np.where(self.lgr.coef_!=0)[1]	1	1
train.describe() # train_df.info() also can be used	1	1
"submission.to_csv(""Submissive.csv"", index=False)"	1	1
data['SibSp'].hist()	1	1
"test[""Sex""].replace([""male"", ""female""], [0, 1], inplace = True)"	1	1
df['Cabin_type']=df['Cabin'].str[0]	1	1
train.drop(['Cabin', 'PassengerId'], axis=1)	1	1
index.values.astype(int)[0]	1	1
dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\.',expand = False)	1	1
datasets_clean[0]	1	1
testdata.ix[(np.isnan(testdata.Age)) , 'Age']=ageMean	1	1
df_test.loc[(df_train['Age'] > 32) & (df_test['Age'] <= 48), 'Age'] = 2	1	1
dataset.groupby(['Pclass', variable]).size()[3].index.values	1	1
X_numeric_submit.shape	1	1
dataset['AgeBand']=pd.cut(dataset['Age'],5,labels=[0,1,2,3,4])	1	1
dt_feat_red.transform(dt_red_test)	1	1
"combined[""t_num_log10""]=t_num_log10"	1	1
data_train.copy()	1	1
df_train.reindex(np.random.permutation(df_train.index))	1	1
df['Pclass'].max() - df['Pclass'].min()	1	1
data.drop(columnsToBeDropped,axis=1)	1	1
dataset.iloc[:, 1:2].values	1	1
test['AgeBand']=pd.cut(test['Age'], (0, 7, 60, 80), labels=['0','1','2'])	1	1
decks_by_class[1],size=1,	1	1
train['Parch'].values.reshape(-1,1)	1	1
Merged_data.iloc[891:]	1	1
train['has_cabin_T'] = dataset['has_cabin_T']	1	1
"data[""Fare""] = data[""Fare""].fillna(data[""Fare""].median())"	1	1
df.drop('Age',axis=1)	1	1
indexes_with_men_nan_age.append(index)	1	1
"test_df[""PassengerId""]=ids"	1	1
"train[""Famille_0""] = train[""FamilleMember""] == '0'"	1	1
valid['Survived']	1	1
plt.hist(train.SibSp,bins=8)	1	1
list.append(titanic.columns[i])	1	1
train_dataset['Sex']	1	1
data_test['passengerid'],	1	1
full_data['Fare'] = pd.to_numeric(full_data['Fare'], errors='coerce')	1	1
df['Embarked']=df['Embarked'].apply(convertEmbarked)	1	1
sns.boxplot(x = correlation[column], y =  merged.Age, ax = ax)	1	1
age_age[2]	1	1
"ans.to_csv(""submit_dt.csv"", index = False)"	1	1
all_data['Fare'].mode() # extract the mode	1	1
train[['Age','Sex','Pclass']].values	1	1
train.dropna(subset = ['Embarked', 'Fare'], inplace = True)	1	1
df['Senior'] = df['Age'].map(lambda s: 1 if 30 < s <= 40 else 0)	1	1
"titanic_train[""Fare""][titanic_train[""Survived""]==1]"	1	1
test_df['Family_Size']=0	1	1
train[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
df['Title'] = df.Name.str.split(' ').apply(lambda x:x[1])	1	1
train.loc[((train['Colonel']==1) | (train['Captain']==1) | (train['Major']==1)),'MilitaryTitle'] = 1	1	1
finalIsSurvived.Survived.round(0)	1	1
train.loc[(train.Age.isnull()), 'Age' ] = y_pred_Age	1	1
df.groupby(group_by_age).mean()	1	1
dc['Fare_Per_Person'] = dc.groupby(['ClassUp','ClassMid','ClassLow','Family_Size'])['Fare_Per_Person'].transform(lambda x: x.fillna(x.median()))	1	1
data['Cabin'].unique():	1	1
train.drop(['Embarked', 'Cabin'], axis=1)	1	1
train_dataset.loc[ train_dataset.SibSp == 0, :]	1	1
train_df['Family_size'] = train_df['SibSp'] + train_df['Parch']	1	1
new_train.iloc[:,0].values	1	1
input_dataset.shape	1	1
data.loc[(data['Fare']>204) & (data['Fare']<307),'Fare']=2	1	1
dataset['Fare'] = dataset['Fare'].map(lambda x: np.log(x) if x > 0 else 0)	1	1
"vol[""RandomForest""]=grid_RF.best_score_"	1	1
"df[""Fsize""] = df[""Parch""] + df[""SibSp""] + 1"	1	1
df_test['sex_female'] = df_test['Sex'].apply(lambda x: 1 if x=='female' else 0)	1	1
"pd.merge(missing_values, present_values, how = ""outer"")"	1	1
"test['HasCabin'] = test[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
title_counts.values	1	1
"df[""FamilySize""] = df.Parch + df.SibSp +1"	1	1
train_d[['FareBands','Survived']].groupby(['FareBands'],as_index=False).mean().sort_values(by='FareBands')	1	1
raw_train_df.dropna(axis=0,subset=['Embarked'])	1	1
df.loc[df['Age'].isna(), 'Age'] = df.loc[df['Age'].isna(), 'Age_age']	1	1
survivors['SibSp'].value_counts()	1	1
combined_df['Age'].mean() #maop = mean age of passengers	1	1
encoded.iloc[:train_rows, :]	1	1
Xtrain.select_dtypes(include=['object']).copy()	1	1
titanic_train['Age'].fillna(titanic_train['Age'].median(),inplace=True)	1	1
df_test.loc[df_test['Family'] >= 1, 'HasFamily'] = 1	1	1
X.iloc[:, self.indices_]	1	1
fare_peoples[1][index] = curr_fares.loc[curr_fares['Survived'] == 1].shape[0]	1	1
"train_dataset[[""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch""]].values"	1	1
train_copy.loc[train_copy['Embarked'] == 'S', 'Embarked_Category'] = 0	1	1
df.loc[((df.Sex == 1) & (df.Pclass == 1)) , 'Se_Cl'] = 1 #rich male	1	1
data['Family_members'] = family_members	1	1
dc.at[index,'Fare_Per_Person']	1	1
"Test[""Title""]=Test[""Title""].map(title_map_2)"	1	1
df_use.as_matrix()[:,1].astype(int)	1	1
titanic_submission_classic2.sample(10)	1	1
test.loc[test['AvFare']<=200,'AvFare']=0	1	1
"test.drop([""Ticket"",""Cabin""], axis=1)"	1	1
df_test.loc[:,['Age','Embarked']]=scaler.transform(df_test.loc[:,['Age','Embarked']])	1	1
train['AgeModified'] = train['Age']	1	1
data.loc[(data['Fare']>cat[4]) ,'Fare']=5	1	1
pipelines.append(('ScaledKNC', Pipeline([('Scaler', StandardScaler()),('KNC', KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2))])))	1	1
data_train['Embarked']=data_train['Embarked'].cat.codes	1	1
"train.loc[(train[""Survived""]==1)&(train[""Pclass""]==1), ""Age""]"	1	1
df['AgeBin'] = pd.cut(df.Age, 5, labels=False)	1	1
predictions.append( 0 if passenger['Sex'] == 'male' else 1)	1	1
train['has_cabin'] = train['Cabin'].apply(lambda x:0 if type(x) == float else 1)	1	1
train.drop(['Sex'], axis=1)	1	1
age_builder['Fare']:	1	1
train_X.drop(columns=['PassengerId', 'Survived'])	1	1
test.Fare.fillna(test.Fare.median())	1	1
train.iloc[0:10]	1	1
sns.boxplot(x = 'Pclass', y='Age', data = train)	1	1
df_titanic['LotsOfFamily'] = (df_titanic['Family'] > 3).astype(int)	1	1
titanic_train_data['Name'].apply(titleMaster)	1	1
df_train.copy() #สร้าง DF อันใหม่ขึ้นมาอีกอัน กันพัง 555	1	1
classifiers.append(XGBClassifier(random_state = 0))	1	1
plt.hist([df_survived.Fare.dropna(), df_died.Fare.dropna()], rwidth = 0.95, stacked = True, color = ['xkcd:blue', 'xkcd:red'], label = ['Survived', 'Died'])	1	1
data.loc[(data.passenger_fare>19.69) & (data.passenger_fare<=23.374) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>19.69) & (data.passenger_fare<=23.374) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
dfTrain.drop('Survived',axis=1)	1	1
df_train['Initial'] = df_train['Initial'].replace(['Mr', 'Miss', 'Mrs', 'Master', 'Other'],[1, 2, 3, 4, 5]).astype(int)	1	1
ax2[0].hist(df_surv.Parch, bins=10, range=(0,6))	1	1
"train_set[""Fare""].fillna(train_set.groupby(""Pclass"")[""Fare""].transform(""median""), inplace=True)"	1	1
final_pipe.named_steps['est']	1	1
df_train['sex_female'] = df_train['Sex'].apply(lambda x: 1 if x=='female' else 0)	1	1
merged.Family_size.replace(to_replace = [6,7,8,11], value = 'large', inplace = True)	1	1
data['Fare_range']=pd.qcut(data['Fare'],5)	1	1
test_data['Ticket'].apply(lambda x: len(x))	1	1
titanic['FamilySize']=titanic['SibSp']+titanic['Parch']	1	1
"data[""CatFare""] = pd.qcut(data.Fare, q=4, labels=False)"	1	1
sns.boxplot(x='Survived', y='Fare', data=train, palette='hls')	1	1
Xtest['Sex'] = Xtest['Sex'].replace(to_replace=['male', 'female'], value=[0, 1])	1	1
data['NobleTitle'] = [1 if title in nobleTitles else 0 for title in data['Title']]	1	1
train_data['Title'] = train_data['Name'].str.extract('([A-Za-z]+)\.',expand = False)	1	1
train['CatFare'] = pd.qcut(train['Fare'], 4)	1	1
row['Parch'] == 0 or row['SibSp'] == 0	1	1
"datacv.set_value(i, 'Name', ""Mrs"")"	1	1
raw_train[['Sex', 'PassengerId']].groupby(['Sex'], as_index=True).count()	1	1
df.append(df_test)	1	1
"gradients[""dW2""]"	1	1
dataset.loc[dataset['Age']<=20,'Age_range']=0	1	1
"train[""TicketNum""] = train[""Ticket""].str.extract('(\d{2,})', expand=True)"	1	1
"df_survived.groupby(""Sex"").get_group(""female"")"	1	1
my_solution.to_csv('submission.csv', index = False)	1	1
S['Grade_by_lab'] = lab.fit_transform(S['Grade'])	1	1
titanic_train_data.Cabin.fillna(0, inplace=True)	1	1
df_train.drop(['AgeBinCode'], axis=1)	1	1
data['Emb_S'] = (data['Embarked']=='S').astype(int)	1	1
train_cleared.info()	1	1
train_df.drop('Alone', 1, inplace=True)	1	1
"train_df[[""Pclass"", ""SibSp"", ""Parch"", ""Fare""]]"	1	1
train['SexF'][i] = 0	1	1
train['SexF'][i] = 1	1	1
accuracy_svc_kfolds.append(accuracy_svc_kfold)	1	1
"combined.loc[pid,""family_has_couple""] != 0:"	1	1
submission.head(5)	1	1
model_type.append('Decision Tree')	1	1
train_with_age_df.shape	1	1
data.loc[(data['Age'].isna()) & (data['Fare'].values==i) & (data['Family'].values==j),'Age']=age_builder.loc[(age_builder['Fare'].values==i) & (age_builder['Family'].values==j),'Age'].values	1	1
sns.boxplot(y='Age', x='Parch', ax=ax2, data=test_df, linewidth=1, saturation=5, palette=palette8)	1	1
imputer_train.loc[(imputer_train['Pclass'] == 2) & (imputer_train['Age'].isnull()), 'Age'] = meanAgePclass2	1	1
"related_people.loc[related_people[""PassengerId""]==274,""RGroup""]=""PC 17596"""	1	1
test_encoded['Fare'] = dataset['Fare'].map(lambda x: 50 if (pd.isnull(x)) else x)	1	1
"X[""FamilySize""] = 1 + X[""SibSp""] + X[""Parch""]"	1	1
dataset.loc[dataset['Embarked'].isnull(), 'Embarked'] = dataset.loc[dataset['Embarked'].notnull(), 'Embarked'].mode().values	1	1
dataset['Shared_ticket'].iloc[i]==3:	1	1
titanic_test[['Fare']]=imputer.transform(titanic_test[['Fare']])	1	1
train[['Pclass', 'Sex', 'Cabin']][0:3]	1	1
"train_data.loc[train_data.Sex == ""male"", 'Sex'] = 1"	1	1
train.groupby('Pclass')	1	1
"_df.loc[df[""age""].isna(), :]"	1	1
titanic.groupby(['Pclass', 'Sex'])['Survived'].mean()	1	1
le.transform(test.Embarked)	1	1
data['Embark_C'] = data['Embarked'].map(lambda x: 1 if str(x) == 'C' else 0)	1	1
x_train.shape,y_train.shape,x_test.shape	1	1
temp.loc[oldmissmask2, 'Age'] = 26	1	1
df.iloc[:,0].values	1	1
test_df['Sex'] = test_df['Sex'].map({'male': 1, 'female': 2 })	1	1
dataset['FamilySize'] = dataset.SibSp + dataset.Parch	1	1
train['Sex_Bin'] = train['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
one_hot_data.copy()	1	1
df.combine_first(pred_age)	1	1
train_mod_df['age_mod'],	1	1
"train[[""Cabin"", ""Survived"",'Sex']].groupby(['Cabin','Sex'],as_index=False).mean()"	1	1
"test_df.drop([""Name"", ""SibSp"", ""Parch"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked""], axis=1)"	1	1
MLA_compare.loc[row_index, 'F1 Score'] = metrics.f1_score(train_y, alg.predict(df_train_X))	1	1
row['Title'] == 'Col':	1	1
trainPCA2['8'] = trainPCA['Pclass2']	1	1
Train_Master['Fare'] = Train_Master['Fare'].astype(int)	1	1
titanic_test.join(embark_dummies_test)	1	1
combined.drop(['Pclass'], axis=1)	1	1
df_data['Child'] = (df_data['Age'] < 10).astype(int)	1	1
kind_type[3]	1	1
"dataset.loc[(dataset[""Age""] > 19) & (dataset[""Age""] <= 25), ""Age""] = 1"	1	1
pd.DataFrame.from_dict(errs, orient='index')	1	1
train.loc[:, 'Pclass_1':'Cabin_Z']	1	1
model.add(Dense(lyrs[0], input_dim=X_train.shape[1], activation=act))	1	1
combined.assign(ParChGT2 = combined['Parch'] > 2)	1	1
df.as_matrix(columns=['Pclass','Sex','Fare','Age_index'])	1	1
test.loc[test['Fare']<=50,'FareCategorical'] = 0	1	1
train_ds.drop(columns='Survived')	1	1
full['fRatio'] = (full['Parch']+1) / (full['SibSp']+ 1)	1	1
data.loc[(data['Age']>32)&(data['Age']<=48), 'Age_band'] = 2	1	1
"row[""Child""] == ""Adult"" and row[""Sex""] == ""female"" and row[""Title""] == ""Mrs"" and row[""Parch""] > 0:"	1	1
test['Survived'] = Survived_test	1	1
train.Age.fillna(29.5, inplace=True)	1	1
train.loc[index,'title']=4	1	1
df.Name.replace(['Ms', 'Mlle'], 'Miss', regex = True, inplace = True)	1	1
combined['Age']=combined[['Age','Pclass']].apply(sub_age,axis=1)	1	1
big['Age'] = big['Age'].fillna(big['Age'].mean())	1	1
test_dummy.join(cat_list)	1	1
test_df.drop(['Embarked','Sex','Name','Ticket','Cabin'], axis=1)	1	1
test['Fare_bin']= pd.cut(test['Fare'],[-0.001,7.91,14.454,31.0,512.3292],right=True)	1	1
dataset['Embarked']=dataset['Embarked'].map(ports)	1	1
train['Cabin_num'].head()	1	1
train.drop(['Embarked_S','title_rare'], inplace = True, axis = 1)	1	1
train_X.drop('Cabin', axis=1, inplace=True)	1	1
df_combined['Total_Passengers'] = df_combined.apply(lambda x: (df_combined['Ticket'] == x['Ticket']).sum() , axis=1)	1	1
test_df.loc[test_df.Title == 'Ms', 'Title'] = 'Miss'	1	1
known_family_data['FamilySize'] = known_family_data.SibSp + known_family_data.Parch + 1	1	1
test6['HasCabin'].loc[test6['Cabin'].isnull()] = 0	1	1
df_Survived['Fare'].value_counts().plot.hist(ax=axes[0]);	1	1
test_df.filter(regex='Fare|SibSp|Parch|Sex_.*|Pclass_.*')	1	1
df_test_ml['Title'] = df_test_ml['Title'].replace(other, 5)	1	1
df['Embarked'] = df['Embarked'].map({'C':0,'Q':1,'S':2}).astype(int)	1	1
"df['Foreign'] = df['LastName'].str.endswith((""ic"", ""sson"", ""ff"", ""i"", ""o"", ""u"", ""ski"", ""a""))"	1	1
test['Ticket_len'] = test['Ticket'].apply(lambda x: len(x))	1	1
net_pred.shape	1	1
dt['Sex']=dt['Sex'].fillna(0)	1	1
tit_df_san[['Pclass', 'Sex', 'Age','Fare', 'Embarked', 'num of relatives']]	1	1
"df.drop(columns=['Name', 'Title',""Sex""])"	1	1
Submission['Survived'] = votingC.predict(X_test)	1	1
train_df['Pclass'] == 3	1	1
axes[1].set_title('Distribution of Fare', fontsize=15)	1	1
train_df['Pclass'] == 1	1	1
df_test['Fare'].fillna(0,inplace=True)	1	1
df_train['AgeEncoded'].max(), df_train['AgeEncoded'].min(), df_test['AgeEncoded'].max(), df_test['AgeEncoded'].min()	1	1
"axes[0].set_title(""Pclass vs Frequency"")"	1	1
"df2.loc[:,[""Pclass"",""Sex"",""Age"",""SibSp"",""Parch""]]"	1	1
data_test.filter(regex='Age_.*|Fare_.*|Name_.*|FamilySize_.*|Embarked_.*|Sex_.*|Pclass_.*')	1	1
data.loc[(data.passenger_fare>=10.5) & (data.passenger_fare<10.501) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>=10.5) & (data.passenger_fare<10.501) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
dt_train['Family'] = dt_train['SibSp']+dt_train['Parch']+1	1	1
df[['Survived']].groupby(df['Sex']).mean().plot.bar()	1	1
"np.where(dataset[""Cabin""]==""G"",1,0)"	1	1
dataset[['PassengerId', 'Age']] = imputer.transform(dataset[['PassengerId', 'Age']])	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Sir', 'Rare')	1	1
test.iloc[:,[1,3,4,5,6,8,10]]	1	1
df_age_train.shape, df_age_test.shape	1	1
df['cabin']=df['Cabin'].apply(con)	1	1
passengers.drop('Survived', axis=1)	1	1
train_dataset['Sex'] = train_dataset['Sex'].map({'male':0, 'female':1})	1	1
valid_X['AgeBin'] = pd.cut(valid_X['Age'].astype(int), 5)	1	1
"df.loc[(df.Survived == 1) & (df.Sex == ""male"") & (df.Pclass == 1)].count()"	1	1
my_feature_columns.append(embarked_feature_columns())	1	1
plot.hist(100)	1	1
"titanic_df.groupby(['Pclass'])['Fare'].mean().plot(kind = 'bar', figsize=(10,10) , title=""Mean fare of of each class"").set_ylabel(""Mean Fare"")"	1	1
test7.drop(['PassengerId', 'Name'], axis=1)	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset['Sex'] == i) & (dataset['Pclass'] == j+1), 'Age'] = guess_ages[i, j]	1	1
train_x.select_dtypes(['object'])	1	1
"df[""Embarked""]=df[""Embarked""].fillna(""S"")"	1	1
submission.to_csv('titanic_predictions.csv', index=False)	1	1
train_df.drop(columns=['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'])	1	1
train.loc[train['Embarked'] == 'S', 'Embarked'] = 0	1	1
"data.set_value(i, 'Name', ""Lady"")"	1	1
data.Man.mean(),	1	1
dataset['Embarked'] = dataset['Embarked'].map({0:0, 'S':1, 'Q':2, 'C':3}).astype(int)	1	1
l0.sum()	1	1
dataset['Age_range']=0	1	1
df_train['MedF']   = df_train['Family'].map(lambda s: 1 if 3 <= s <= 4 else 0)	1	1
"df_test[""Age""].mean() + df_test[""Age""].std(),"	1	1
test_set.drop('Parch', axis = 1, inplace = True)	1	1
whole.isnull().sum()	1	1
df_train['Pclass'].value_counts(normalize=True)	1	1
o.to_csv('result.csv')	1	1
test_data['Ticket'] = test_data['Ticket'].map(lambda x: x[0])	1	1
best_classifiers.append(overall_res[overall_res['Classifier']==clf]['Best_clf_retrained'].values[0])	1	1
scaler.transform(X_tr_real)	1	1
df_output['Survived'] = test_predictions	1	1
join_data.pivot_table(values='Fare',index='Pclass',columns='FamilySize',margins=True,margins_name='Average')	1	1
"plt.rcParams[""figure.figsize""] = (28, 5)"	1	1
df_te.copy()	1	1
"bp[""bootstrap""],"	1	1
df.loc[male & Class3,'Class'] = (5)	1	1
output['PassengerId'] = dt_test['PassengerId']	1	1
"training_metrics[""loss""]"	1	1
df.loc[:, features_to_keep]	1	1
ax1[2].set_title('3rd Class (survived)')	1	1
"train[""Pclass""].isnull().sum()"	1	1
test_df.drop(['ticket', 'cabin'], axis=1)	1	1
"df[""logFare""] = np.log(df[""Fare""]) # We are ignoring 0 value fares since they are outliers."	1	1
df_Not_Survived['Fare'].value_counts().plot.box(ax=axes[1]);	1	1
test_copy['Age_Category'] = 8	1	1
_.corr()	1	1
all_data.set_value(708,'Deck',value=all_data.loc[297]['Deck'])	1	1
full_df['Family'] = full_df['Parch'] + full_df['SibSp'] + 1	1	1
combined_data['FamilySize'] = combined_data.Parch + combined_data.SibSp + 1	1	1
merged[['Sex','PTitle','Pclass','Survived']].groupby(['Sex','PTitle','Pclass']).mean()	1	1
parch_set.T	1	1
ax[1].set_title('Histogram of Age (not survived)')	1	1
title_list.append(5)	1	1
test.drop(['Name', 'Ticket'], axis=1, inplace=True)	1	1
data.groupby(['Parch'])['Survived'].mean()	1	1
title_mean_age_test.append(X_Test.groupby('Name').Age.mean())	1	1
"df_train.drop([""Survived"",""PassengerId""], axis=1)"	1	1
df['survived'].plot(kind=t)	1	1
test['Age'] = test[['Age','Pclass']].apply(age_bander,axis=1)	1	1
test.at[i, 'Cabin_section'] = CABIN_SECTION.index(test.at[i, 'Cabin_section'])	1	1
dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 50), 'AgeGroup'] = 4	1	1
df_test['Age'] = test_df['Age'].copy()	1	1
data['Sex'].value_counts().plot(kind='bar', ax=ax1, rot=0)	1	1
df.drop(['Survived'], 1, inplace=True) # Drop the Survived column	1	1
"test_dataset.loc[ (test_dataset.Pclass == 3) & (test_dataset.Sex == ""male"") & (test_dataset.Age.isnull()), ""Age"" ] = test_dataset.loc[ (test_dataset.Pclass == 3) & (test_dataset.Sex == ""male"") & (test_dataset.Age.isnull()), ""Age"" ].fillna(test_dataset.loc[ (test_dataset.Pclass == 3) & (test_dataset.Sex == ""male"") ][""Age""].median())"	1	1
df_train.groupby(['Sex']).count()	1	1
model.add(layers.Dense(32, activation='relu'))	1	1
ax[2].set_title('Pclass 3 Fare Distribution')	1	1
df.dtypes[df.dtypes == 'object'].index.tolist()	1	1
test.loc[((test['Sex'] == 0) & (test['Pclass'] == 1)), 'gender_class'] = 1	1	1
df.iloc[perm[:train_end]]	1	1
by_age['Survived'].count()	1	1
data_copy.loc[data_copy.Embarked=='C', 'Embarked'] = 1	1	1
"person_dummies_titanic.drop([""Male""],axis=1,inplace=True)"	1	1
t_data['Sex'] = t_data['Sex'].apply(lambda x: int(x == 'male'))	1	1
"lgb_results.iloc[lgb_results[""Score""].idxmin(),:][""Rounds""]"	1	1
X.dtypes[i]=='object':	1	1
array.astype(int)	1	1
titanic_df.drop(['Cabin'], axis = 1)	1	1
test_data.columns.values.tolist():	1	1
data_groupBy_Class['Survived'].mean().plot(kind='bar',color = 'g')	1	1
masterdf_age['title'].apply(lambda x: title_dict[x]) # make titles integers in range(5)	1	1
ax.hist(train.loc[train['Survived']==1, 'Fare'], bins=n_bins, color='g')	1	1
training_set['HasFamily'] = np.where(training_set['SibSp'] + training_set['Parch'] > 0, 1, 0)	1	1
test_data.assign(Cabin_cat=cabin_cats)	1	1
trainONSWAR.drop(['Survived'], axis=1)	1	1
plt.hist(df.Age)	1	1
miss.drop([x for x in miss.index if x in no_parch.index])	1	1
test.Age.fillna(round(test.Age.mean()),inplace=True)	1	1
"train[""Child""][train[""Age""] >= 18]=0"	1	1
featuresDummies.head(5)	1	1
data.sons.loc[data.PassengerId==357] = 1	1	1
"full.set_value(full[""Embarked""] == ""C"", ""Embarked"", 1)"	1	1
x_test['Embarked_Q'] = test_df['Embarked'].apply(lambda x: 1 if x == 'Q' else 0)	1	1
df['NameTitle'] = df['Name'].apply(getTitle)	1	1
df_full['IsChild'] * mask_class12.astype(int)	1	1
sns.boxplot(x='Pclass',y='Age',data=titanic,palette='rainbow')	1	1
missing_age[['PassengerId']]	1	1
"title_dict[""MME""] = 3"	1	1
data.parent_alone.loc[data.PassengerId==541] = 0	1	1
data_pruned.groupby(['Pclass','Title']).Age.median()	1	1
df['Age'] = df.groupby(['Title', 'Pclass'])['Age'].transform(lambda x: x.fillna(x.mean()))	1	1
df.groupby(['Pclass', 'Embarked']).Fare.median().plot(kind='bar', rot=0)	1	1
test_data.drop('Name', axis = 1)	1	1
"train_df[""Q""] = train_df.Embarked.apply(lambda l: np.where(l==2, 1, 0))"	1	1
df['Name'].sample(5)	1	1
train['Fare'].plot(kind='hist', figsize=(8,3),bins=100, xlim=(0,50))	1	1
"dftest[""Title""].replace(to_replace='(.*, )|(\\..*)', value='', inplace=True, regex=True)"	1	1
titanic['Survived']                             # Target variable	1	1
train.groupby('Sex')['Survived'].mean()	1	1
lastname_table['Dead_kid_w_lastname'] = data_full.Lastname[(data_full.AgeBin == 1) & (data_full.Survived < 1) & (data_full.FamilySize > 1)].value_counts()	1	1
"df_test[""Survived""]"	1	1
combined['Sex'] = combined['Sex'].map({'male': 1, 'female': 0})	1	1
all_data['Title'] = all_data['Title'].fillna(-1)	1	1
test.drop('Cabin',inplace=True, axis = 1)	1	1
"title_dict[""MLLE""] = 3"	1	1
train.Fare.values.reshape(-1, 1)	1	1
"test7[""Mr""] = test7[""Name""].apply(lambda x: x.count(""Mr.""))"	1	1
data_train.drop('Survived',axis=1)	1	1
"df.loc[df[""Sex""] == ""female"", ""Sex""] = 1"	1	1
"train_data.loc[train_data[""Cabin""].notnull() & train_data[""Cabin""].str.contains(""A""), ""CabinLetterA""] = 1"	1	1
valid_X.drop([ 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Title', 'FareBin', 'AgeBin'],axis=1)	1	1
data.loc[(data.passenger_fare>39.599) & (data.passenger_fare<=39.6) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>39.599) & (data.passenger_fare<=39.6) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
df['FSize'] = (df['SibSp'] + df['Parch'] + 1).astype(int)	1	1
"category_group.unstack().plot(kind='bar',stacked=True,title=""Survival As per Embarked Region"")"	1	1
train['Sex'] = train['Sex'].apply(lambda x: 1 if x == 'female' else 0)	1	1
sub_vot2.to_csv('vot2.csv',index=False)	1	1
lut.items():	1	1
train_df.loc[train_df['Age']>64,'Age']=4	1	1
train_ori.info()	1	1
test_data['Survived'] = 1 #也可以写成test_data.Survived = 1	1	1
dataset['Title'] = dataset['Title'].replace(['Capt','Col','Don','Dr','Jonkheer','Major','Rev','Dona'],'Rare')	1	1
df['Poor_Old_Miss'] = 0	1	1
"train_data.loc[train_data[""Name""].str.contains(""Jonkheer.""), ""TitleJonkheer""] = 1"	1	1
drop_elementsONS.append('Ticket')	1	1
"fold_importance_df[""importance""] = lgb_clf.feature_importance()"	1	1
"solution3.to_csv('solution3.csv', index_label= [""PassengerId""])"	1	1
my_prediction.to_csv('my_prediction.csv', index = False)	1	1
total['Fare'].fillna(total['Fare'].mean(), inplace=True)	1	1
df_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)	1	1
train['Age'].apply(age_class)	1	1
"train[""Embarked""] = le.fit_transform(train[""Embarked""].fillna('0'))"	1	1
df['Title'] = df['Title'].replace(['Lady', 'Countess', 'Dona'],'HighF')	1	1
features_raw['Cabin'].fillna('U', inplace=True)	1	1
X_test.fillna(30, inplace=True)	1	1
testdata['Age'].mean()	1	1
output.to_csv('result.csv', index=False)	1	1
train_df.drop(['Pclass'], axis = 1, inplace=True)	1	1
train_df.iloc[[0]]	1	1
df2['Fare']=13.787867	1	1
df_submit_data.loc[:, df_submit_data.dtypes != 'category'] = stdscaler.transform(df_submit_data.loc[:, df_submit_data.dtypes != 'category'])	1	1
"data[""Fare""] = data[""Fare""].fillna(median_fare)"	1	1
"train_df[""Family""].loc[train_df[""Family""] > 0] = 1"	1	1
result.set_index('PassengerId',inplace=True)	1	1
trainOrg.head()	1	1
data['Fare'] = imputer.fit_transform(data[['Fare']])	1	1
"related_people.loc[related_people[""PassengerId""]==893,""RGroup""]=""Hocking_M"""	1	1
dataset.loc[ dataset['FamilySize'] == 1 , 'IsAlone' ] = 1	1	1
titanic_train_test_merged['Embarked']=titanic_train_test_merged['Embarked'].astype('category')	1	1
test['Age']=test.groupby(['Sex', 'Pclass'])['Age'].transform(lambda x: x.fillna(x.mean())).astype(int)	1	1
sns.boxplot(data=results)	1	1
"family_in_trian.pivot_table(index=[""Pclass""],values='Survived').copy()"	1	1
each['Title'] = each['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
classifiers_df.sort_values('Accuracy', ascending=False)	1	1
size.loc[size['FamilySize'] == 1,'IsAlone'] = 1	1	1
titanicTest['Child']='adult'	1	1
ax[0].set_title('Pclass Distribution')	1	1
pdModelos.sort_values('Accuracy', ascending=False, inplace=True)	1	1
np.append(test_data_passengers, num, axis=1)	1	1
train.Cabin.isnull().sum()/(train.shape[0])	1	1
dataset.set_value(rowIndex, 'Age5to10', 0)	1	1
dataset.loc[ dataset['Fare'] <= 8.05, 'FareGroup'] = 0	1	1
data['Embark_S'] = data['Embarked'].map(lambda x: 1 if str(x) == 'S' else 0)	1	1
train_x.drop('Cabin',1,inplace=True)	1	1
training_indices.size, validation_indices.size	1	1
cat_encoded_train_data.head()	1	1
submission.drop(labels=['Ticket_numerical_temp'], inplace=True, axis=1)	1	1
"df_test[""Free""] = df_data[""Free""][891:]"	1	1
train_df['Gender'] = train_df['Sex'].map( {'male':1, 'female':2} ).astype(int)	1	1
dataset['Deck'] = dataset['Deck'].fillna(value='U')	1	1
age_builder['Family']:	1	1
train_df[['Parch', 'Survived']].groupby(['Parch']).agg(['count', 'mean'])	1	1
test_df_read.head()	1	1
"plt.hist(df_train[""FamMem""], log = False, alpha = 0.3, label = ""all_passenger"")"	1	1
data.drop((['Survived','Name']), axis=1)	1	1
df_test_ml['SurvivedRFC'] = rfc.predict(X_predict_rfc).astype(int)	1	1
model.transform(val_set)	1	1
test_d['Title']=le_title.transform(test_d['Title'])	1	1
data_frame.groupby(by=class_group);	1	1
df_predictions.to_csv('logistic_regression_submission.csv', index=False)	1	1
np.sum(ans==np.round(RF_pred).astype(int))/len(dtest)	1	1
splitted[0]	1	1
"sub.to_csv(""titanic_submission_logregres.csv"", index=False)"	1	1
data.Cabin_Letter_G.astype(np.uint8)	1	1
test['Person'] = test[['Age', 'Sex']].apply(person, axis=1)	1	1
test_set['HasFamily'] = np.where(test_set['SibSp'] + test_set['Parch'] > 0, 1, 0)	1	1
titanic_data['SharedTicket'] = 0	1	1
df_train['Age'] = df_train.Age.fillna(df_train.Age.median())	1	1
"train[""Sex""].value_counts()"	1	1
df_train.select_dtypes('number')	1	1
data['FamilyBin'] = data['FamilySize'].map({0:0,1:1,2:1,3:1,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2}).astype(int)	1	1
test_df.drop(['SibSp'],axis=1,inplace=True)	1	1
train.append(test, ignore_index= True)	1	1
T.sort_values(by = 'Accuracy', ascending = False)	1	1
dataset['Family'] = dataset['Parch']+dataset['SibSp']	1	1
test_df_final[['Age', 'Fare', 'TraveledAlone', 'Pclass_1', 'Pclass_2', 'Sex_male', 'Embarked_C']]	1	1
train_data[['PassengerId','Name','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
test['Title'] = test.Name.apply(lambda x: x[x.find(',')+2:x.find('.')])	1	1
titanic.drop(['SibSp'], axis = 1)	1	1
"data.drop(""Name"",inplace=True, axis=1)"	1	1
X_data.iloc[:, 1:6]	1	1
submission['Ticket_numerical'] = np.where(submission.Ticket_numerical.str.isdigit(),submission.Ticket_numerical, np.nan )	1	1
kaggle['Family']=kaggle['SibSp'] + kaggle['Parch'] +1	1	1
test['title'] = [i.replace('Dr', 'rare') for i in test.title]	1	1
data_pred['PassengerId']=data_test['PassengerId']	1	1
titanic_test['Age'] = titanic_test['Age'].fillna(titanic['Age'].median())	1	1
data.surname_Goldenberg.astype('category')	1	1
"df_train.drop([""PassengerId"",""Cabin"",""Ticket"",""Survived"",""SibSp"",""Parch""],axis=1)"	1	1
train.groupby('Title')['Title'].count()	1	1
"plt.rcParams[""figure.figsize""] = (35, 3)"	1	1
x_test[['Cabin']]=imr.fit_transform(x_test[['Cabin']])	1	1
"all_data_del[""Sex""]=all_data[""Sex""].apply(lambda s: people.get(s))"	1	1
ax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)	1	1
test.drop(test[drop_features], axis=1, inplace=True)	1	1
"Pclass_dummy.rename(columns={ Pclass_dummy.columns[0]: ""first_class"",Pclass_dummy.columns[1]:'second_class' })"	1	1
data_test['Family'].loc[data_test['Family'] == 0] = 0	1	1
"train_dataset.loc[ train_dataset.Fare > train_dataset.Fare.median(), ""Fare_Bound"" ] = 1 # High Fare type"	1	1
df_train['age'] = df_train.apply(fill_age, axis=1, df=df_all)  # [1]	1	1
test.drop(['Age'],axis = 1, inplace = True)	1	1
df2.drop(['Pclass', 'SibSp', 'Parch', 'Cabin', 'Ticket', 'Name', 'title'], 1)	1	1
data.loc[(data['Age'] > 15) & (data['Age'] <= 30), 'Age'] = 1	1	1
df['Title'] = df['Name'].apply(label_titles)	1	1
test['FareBin_Code'] = data['FareBin_Code'][891:]	1	1
data.loc[(data['Age'] > 28 ) & (data['Age'] <= 45), 'Age']   = 3	1	1
train_set.hist(bins=20, figsize=(16,8))	1	1
"train.drop(columns=""Survived"").values"	1	1
"titanic_data[""Age""].isnull().values.any()"	1	1
updated_test_data['Title'] = test_df['Name']	1	1
"test_df.drop([""FamilySize""], axis=1, inplace=True)"	1	1
train_df['Age']= train_df.Age.fillna(train_df.Age.mean())	1	1
df_Not_Survived['Fare'].value_counts().plot.hist(ax=axes[1]);	1	1
"train[""AgeCategory""] = train[""AgeCategory""].map({""Adult"": 0,""Child"" : 1,""Old"": 2,""MissingData"": 3})"	1	1
train.drop(list(set(outlier_ind)), axis=0).reset_index(drop=True)  # Drop outliers via indices	1	1
data['relatives'] = data['SibSp']+data['Parch']	1	1
df_combined.head(20)	1	1
data.surname_Taylor.astype(np.uint8)	1	1
df['Parch'] = df['Parch'].apply(lambda e: 1 if e>0 else 0)	1	1
models_op.append(('xgb_optimized', optimized_xgb))	1	1
data.loc[data['Age'] < 15, 'Age'] = 1	1	1
combine.loc[(combine['Age'] <= 16), 'Age'] = 0	1	1
df_FULL.loc[df_FULL.Cabin.notnull() & df_FULL.Cabin.str.contains('F'), 'Cabin']	1	1
"X_train.drop([""Survived""], axis = 1, inplace=True)"	1	1
plt.hist(data.Age[(np.isnan(data.Age) == False) & (data.Survived == 1)], bins= 15, alpha = 0.4, color = 'b', label = 'After')	1	1
train_data.Age.plot.hist(bins=50, title='Age', ax=axs[0, 0])	1	1
test_survived.copy()	1	1
"Embarked.div(Embarked.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True, figsize=(4,4))"	1	1
test['Cabin_Ord'] = test.apply(lambda x: getCabinOrd(x), axis=1)	1	1
"all_dataset[""Ticket""] = Ticket"	1	1
train_df[['Fare', 'Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Fare', ascending=False)	1	1
x['Age'] = 27	1	1
Submission.to_csv('Votingclassifier02.csv',sep=',')	1	1
"data_train.drop([""Survived""], axis=1)"	1	1
"temp.to_csv(""submission_add_family_size.csv"", index = False)"	1	1
featured_set.drop(['Survived'], axis=1).values	1	1
"test[""Sex""] = test[""Sex""].astype(""int"")"	1	1
train['Title']=train['Title'].replace([ 'Lady', 'Countess','Sir', 'Jonkheer'],'royalty')	1	1
train_test_dummies.shape	1	1
"data[""Age_cohort""][(data[""Age""]>10)&(data[""Age""]<=16)]=3"	1	1
"train[[""Survived"",""SibSp"",""Parch"",""Age"",""Fare""]].corr(),annot=True,"	1	1
combined['Sex'] = le.fit_transform(combined['Sex'])	1	1
test_dataset.loc[(test_dataset['Fare']>7.91) & (test_dataset['Fare']<=14.454),'Fare']=1	1	1
dataset.loc[ (dataset['Fare'] > 14.454) & (dataset['Fare'] <=31), 'Fare' ] = 2	1	1
"train['Title'] = train['Name'].map(lambda x : x[x.find("","")+1:x.find(""."")])"	1	1
tickets['ticket_nr'] = split.apply(lambda s: s.pop())	1	1
training_data[['Pclass', 'Survived', 'Sex']].groupby('Survived').mean()	1	1
full_set.describe()	1	1
"t[""personal_fare""] = t[""Fare""] / (t[""Family""] + 1)"	1	1
train_data[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)	1	1
"families[""FamilySize""] = full[""Parch""] + full[""SibSp""] + 1"	1	1
np.mean(accuracy),	1	1
droped_dataset.iloc[891:,:]	1	1
all_data[['Survived','Pclass','Sex','Age','Fare','Embarked','Title','Deck','SibSp','Parch']]	1	1
test['PassengerId'].values,	1	1
train.loc[train['Cabin'].isnull(), 'hasCabin1'] = 0	1	1
test.loc[(test['Pclass'] == 3) & (test['hasAge'] == 0), 'class_hasage'] = 5	1	1
r.append(0)	1	1
scores.loc['std'] = list_std	1	1
train_data.drop(['PassengerId','Name','Ticket','Cabin'], axis=1, inplace=True)	1	1
solution.to_csv('./submission.csv', index=False)	1	1
"titanic_train_dataset[""CabinFloorScore""].loc[titanic_train_dataset['CabinFloor'] == ""E""] = 2"	1	1
train['EmbarkedQ'][i] = 0	1	1
models['set4']['cat_attrs'] = ['Pclass', 'Sex', 'Deck', 'Cabin_bool']	1	1
bias_auc.append(score)	1	1
submit['Survived'] = output	1	1
models['set4']['num_scaling'] = 'minmax_scaler'	1	1
"test.join(pd.get_dummies(test[""Embarked""]))"	1	1
train_survived.values	1	1
train['Name_Title'].head()	1	1
test.loc[(test['farePP'] < 8.6), 'fareCat'] = 1	1	1
"data_train.groupby([ ""Pclass"",'Sex']);"	1	1
test_df.head(2)	1	1
df['Sex_female'] * df['Age_10-60']	1	1
X.std()	1	1
np.where(data_train.Sex=='male', 1, 0)	1	1
train['Age'] = train[['Age','Pclass']].apply(age_bander,axis=1)	1	1
traindf['Age']=traindf[['Age','Pclass']].apply(get_age,axis='columns')	1	1
data.columns.size	1	1
train[['Survived','Sex']].groupby(['Sex'],as_index=False).mean()	1	1
dataset['SmallF'] = dataset['Fsize'].map(lambda s: 1 if s == 2 else 0)	1	1
"t_df.pivot_table('Survived', index='Alone', columns='Embarked', margins= True, margins_name=""%survival"")"	1	1
Xdf.loc[(Xdf['Fare'] > 7.91) & (Xdf['Fare'] <= 14.454), 'Fare'] = 1	1	1
df.loc[5:10, 'Age' : 'Pclass']	1	1
model.add(Dense(64))	1	1
X_train.astype('float32'), y_train.values, X_valid.astype('float32'), y_valid.values	1	1
passenger['SibSp'] + passenger['Parch']	1	1
test.loc[(test['Sex'] == 1) & (test['isAlone'] == 1), 'gender_alone'] = 4	1	1
df_test['Title'] = name_row.copy()	1	1
train_dataset.loc[(train_dataset['Age']>16) & (train_dataset['Age']<=32),'Age']=1	1	1
test7['IsAlone'].loc[test7['FamilySize'] > 1] = 0	1	1
titanic_df.drop(['Cabin'],axis=1,inplace=True)	1	1
"titanic_data[""Age""] = titanic_data_imputed"	1	1
df_test.head(n=4)	1	1
df_train['FirstName'].str.strip().str.split(' ', n=1, expand=True)	1	1
titanicTrain.drop('PassengerId',1)	1	1
test_data_clean_features['Name'] = test_data_clean_features['Name'].apply(lambda x: 0 if ('Mr.' in x or 'Master' in x                                                                                           or 'Mrs.' in x or 'Miss' in x                                                                                           or 'Ms.' in x) else 1)	1	1
titanic_df.loc[np.isnan(titanic_df['Age']), 'Age'] = rand_age	1	1
combined.groupby(['Sex', 'Pclass', 'Title'])	1	1
train.loc[train['Age'] > 64, 'Age'] = 4	1	1
"train_df.set_index(""passengerid"")"	1	1
sns.boxplot(joined['Fare'], ax=ax3, width=0.3, color='gray');	1	1
data.loc[(data['Age']>32.5) & (data['Age']<48.5),'Age']=2	1	1
df_test['FareBinCode'] = farelabel.transform(df_test['FarePPBin'])	1	1
data['Title']=data['Title'].str.replace('Mlle.','125')	1	1
df.loc[df['FamilySize'] > 4, 'FamilySize'] = 3	1	1
train['Cabin'] = train['Cabin'].apply(extract_cabin_letter)	1	1
train_df_actual['Survived']	1	1
combined.drop(drop_col,axis=1)[891:]	1	1
df_test['Name']	1	1
dataset.drop(['Cabin', 'Ticket'], axis =1)	1	1
np.max(cv_data['test-Accuracy-mean']),	1	1
test_df['New_Age'] = test_df['Age']	1	1
test_csv['Deck'] = test_csv['Cabin'].str[0]	1	1
data.loc[(data.passenger_fare>31.67) & (data.passenger_fare<=31.684) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>31.67) & (data.passenger_fare<=31.684) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
"df[""Cabin""] = df.loc[df[""Cabin""].notnull(),""Cabin""].str[0]"	1	1
test_data['Fare'] = test_data[['Fare','Pclass']].apply(fare_approx, axis=1)	1	1
"test.loc[(test[""Age""]>48) & (test[""Age""]<=64),""Age""]=3"	1	1
"train[""Deck""]"	1	1
scaler.transform(test_df[features])	1	1
dft['SibSp']	1	1
submission.to_csv('submission.csv', sep=',', encoding='utf-8', index=False)	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset['Title']==0), 'Age']=6	1	1
"related_people.loc[related_people[""PassengerId""]==901,""RGroup""]=""Davies_M"""	1	1
test_df['Survived'] = Y_pred	1	1
titanicDF.head(10)	1	1
df.loc[df['Title'] == 'Mr.', 'Age'] = df.loc[df['Title'] == 'Mr.', 'Age'].fillna(mean)	1	1
df_train['Fare'].isnull().sum()	1	1
"full_data[""FamilyCat""][((full_data[""Parch""] + full_data[""SibSp""]) > 0) & ((full_data[""Parch""] + full_data[""SibSp""]) <= 3)] = 1"	1	1
"data_df[""Embarked""]=data_df[""Embarked""].replace(""C"", 0).replace(""S"", 1).replace(""Q"",2)"	1	1
train_df[['Pclass', 'Sex', 'Embarked','Survived']].groupby(['Pclass','Sex','Embarked'], as_index=False).mean().sort_values(by=['Embarked','Sex'], ascending=False)	1	1
"submission.to_csv(""Titanic_Baseline_Model_Submission.csv"")"	1	1
torch.max(test_result, 1)	1	1
"df.set_value(index,row[""Name""].split("","")[0],1)"	1	1
"df[""F_small""] = df[""Fsize""].map(lambda s: 1 if 2 <= s <= 4 else 0)"	1	1
train_df.join(family)	1	1
dataset['Cabin_D'] = dataset['Cabin'].map(lambda s: 1 if s == 4 else 0)	1	1
valid_split.to_csv('./data/valid_split_final.csv', index=False)	1	1
combined_df.iloc[0:890, :]	1	1
title.append(p)	1	1
dataset['Sex'] = dataset['Sex'].map({'male': 1, 'female': 0}).astype(int)	1	1
test['AvFare']=test['Fare']/(test['Family']+1)	1	1
test_data['Suffix'] = test_data['Name'].str.extract(' ([A-Za-z.]+)\.')	1	1
model.add(Dense(1, activation='linear'))	1	1
data.loc[(data.SibSp + data.Parch) > 1, 'IsAlone'] = 0	1	1
df.tail(15)	1	1
cat_pipe.append(('cabin_bool', Cabin_bool))	1	1
dt_test['Embarked'].fillna('S', inplace=True)	1	1
train_set.head(20)	1	1
df_to_imp['Title'].unique():	1	1
"test.loc[train[""Embarked""] == ""Q"", ""Embarked""] = 2"	1	1
df['Survived'].values.reshape(-1,1)	1	1
model_dict.keys()	1	1
full_imputer.transform(test_X)	1	1
data.drop(drop_elements, axis = 1)	1	1
n[1] = 5 5	1	1
"df1.replace([""S"", ""C"", ""Q""], [0,1,2])"	1	1
data['Title_count'] = data.groupby('Title')['Title'].transform('count')	1	1
tit_df_san.drop(['Name','Ticket'],axis=1,inplace=True)	1	1
simple_data_df['Young'] = np.where((simple_data_df['AgeBin_Code']<2), 1, 0)	1	1
train.info() #총 891개가 있어야 결측값(NaN) 없는 것, 그러나 Age, Cabin같은경우 NaN이 많다	1	1
"test[""Family_flag""] = 0"	1	1
combined_df['is_alone'] = combined_df['family_size'] == 0	1	1
train_df['Name'].index.tolist()	1	1
"test.drop(""Survived"",axis=1).copy()"	1	1
df['Fare_log'] = df.Fare.map(lambda i: np.log(i) if i > 0 else 0)	1	1
full['Age'] = full['Age'].interpolate()	1	1
test['cabin_known']= test['Cabin'].apply(lambda x: 0 if pd.isnull(x) else 1)	1	1
"df_train[""Embarked""].fillna(value = ""C"", inplace = True)"	1	1
np.std(val_scores, axis = 1)	1	1
dt.loc[(dt['Fare']>=14.45) & (dt['Fare']<31),'Fare']=2	1	1
data_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()	1	1
full_data.drop(drop_features,axis = 1)	1	1
"datacv.set_value(i, 'Name', ""Master"")"	1	1
X_train['Fare'] = scaler.fit_transform(X_train['Fare'].values.reshape(-1, 1))	1	1
survived['Age'].plot.hist(alpha = 0.6, color = 'red',bins = 50)	1	1
age['Age'].isnull().sum()	1	1
"testdf[""PassengerId""].copy()"	1	1
data.apply(lambda x :                         1 if ((x.Ticket in (['W./C. 6607'])) & (x.Personal_Titles not in (['Mr', 'Mrs']))) else 0, axis=1)	1	1
test_x.join(pd.get_dummies(test_x[name],prefix=name).iloc[:,:-1]).drop(name,1)	1	1
df['Family_Size']=0	1	1
model.layers[0].get_weights()	1	1
data_val['PassengerId'],	1	1
train[['C','Q','S']] = pd.get_dummies(train['Embarked'])	1	1
test_dataset['Sex']	1	1
data_frame.groupby(by='Pclass');	1	1
train_df['Person']= train_df[['Age','Sex']].apply(get_person,axis=1)	1	1
test_data.loc[test_data['Embarked'].isnull()] = 'S'	1	1
df_train['EmbarkedEncoded'] = le_embarked.transform(df_train['Embarked'])	1	1
dataset.loc[(dataset['Age']>=64),'AgeBand']=4	1	1
"dataset[""Fare""] = scaler.fit_transform(fares_train)"	1	1
df_test['Person_Class'] = df_test.apply(person_class,axis=1)	1	1
all_data['Title'] = all_data['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
results.to_csv('titanic-predictions.csv', index = False)	1	1
df_train['Sex'].replace(['male', 'female'], [1,0], inplace=True)	1	1
model.add(Dense(units=27, activation='selu'))	1	1
df.rename(index=str,columns={0:'Survived',1:'Died'})	1	1
dataset.drop(drop_element, axis=1)	1	1
"train_df.drop([""PassengerId"", ""Ticket"", ""Cabin"", ""Name"", ""Sex"", ""SibSp"", ""Parch"", ""Embarked"", ""Fare""], axis=1)"	1	1
test_df['fare_category'] = pd.cut(test_df['fare'], [-1, 6, 7.5, 8, 14, 20, 30, 60, 90, 600])	1	1
features['feature'] = training_x.columns	1	1
train_df.iloc[:, 0]	1	1
"x_test_df.rename({0:""Survived""},axis=1)"	1	1
t_df.pivot_table('Survived', index= 'Embarked', columns= 'Pclass')	1	1
train['Embarked'].value_counts().plot.pie(autopct='%1.f%%', shadow=True, explode=(.1,0.1,0), startangle=90, ax=ax[0]).axis('equal')	1	1
X_test.drop('Name',1)	1	1
deplicate_ticket.loc[(deplicate_ticket.FamilySize == 0) & (deplicate_ticket.Survived.notnull())].head(7)	1	1
predict_test['Survived'] # just store a list not data frame	1	1
dataset.drop('Name', axis=1, inplace=True)	1	1
test_df['Survived'] = -888	1	1
titanic_test.fillna(0)	1	1
df_temp.pivot(index='FareCat', columns='Survived', values='Count')	1	1
train.apply(get_family_id, axis=1)	1	1
"combined.loc[co_travelers,""LastName""].value_counts().index[0]"	1	1
lastname_table['Dead_kid_w_lastname'] = lastname_table['Dead_kid_w_lastname'].astype(int)	1	1
"df_titanic[[""Survived"", ""SibSp"", ""Age"", ""Parch"", ""Fare""]].corr(),"	1	1
full['Sex'] = full['Sex'].map({'male':1,'female':0})	1	1
data['Cabin_numerical'] = data.Cabin.str.extract('(\d+)')	1	1
dataset.Fare.isnull().sum()	1	1
titanic_data.loc[(titanic_data['Age'] > 48) & (titanic_data['Age'] <= 64), 'Age'] = 3	1	1
X_test.iloc[:,[2,-1]] = X_age_imputer.fit_transform(X_test.iloc[:,[2,-1]])	1	1
sns.boxplot(train_raw.Fare)	1	1
df.dropna().groupby(['Sex', 'Pclass']).median()[i] # group medians	1	1
"dataset_train[""Pclass""].value_counts(normalize = True)"	1	1
train['Sex'].value_counts().index	1	1
data.loc[(data.passenger_fare>0) & (data.passenger_fare<=19.69) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>0) & (data.passenger_fare<=19.69) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
train_data_only_first_class.ix[~(train_data_only_first_class['Sex'] != 'female')]	1	1
gender_sub['Survived']	1	1
titanicDF[['Survived']]	1	1
train.drop(['Parch', 'SibSp'], axis = 1)	1	1
model_ann.add(Dense(units=1,kernel_initializer='uniform',activation='sigmoid'))	1	1
data.Cabin.head(10)	1	1
"X[""isChild""] = 1"	1	1
data_train.loc[data_train['Cabin'].notnull(),'Cabin']=1	1	1
tuned_params.append(df_temp)	1	1
submission.Fare.fillna(X_train.Fare.median(), inplace=True)	1	1
df['famtestdat'] = np.where(df.Survived.isnull() & df.famsize> 1, 1, 0)	1	1
"df_real_test[""Age""] = df_real_test[""Age""].fillna(med)"	1	1
df.drop('Name', axis = 1, inplace=True)	1	1
axarr[0].set_title('Sharing X axis')	1	1
train['Age']=train['Age'].fillna('5')	1	1
scores_v2.append(acc.mean())	1	1
"X[""isChild""] = 0"	1	1
np.std(acc_list)	1	1
v_targets['target'],	1	1
pd.isnull(x):	1	1
axis1.spines['top'].set_linewidth(0)	1	1
data['Title'].replace(['Ms.','Mlle.', 'Miss.'], 3, inplace=True)	1	1
dataset['Sex']=dataset['Sex'].map({'female':1,'male':0}).astype(int)	1	1
data.Deck.replace('missing', np.nan)	1	1
"titanic_train[""Ticket""].value_counts()"	1	1
test_df.drop(['Name','Title'],axis=1,inplace=True)	1	1
all_data.Embarked.count()	1	1
ax[2].set_title('Training time ' + suff)	1	1
data_train[['Age','Fare', 'FamilySize', 'Pclass', 'Name_length']]	1	1
"my_solution.to_csv(""titanic_own_soln_family_size.csv"", index_label = [""PassengerId""])"	1	1
plt.hist(plotdata*100)	1	1
df_all['_Embarked_encoded']=pd.Categorical(df_all['Embarked']).codes	1	1
train_df['Title'] = titles	1	1
train_data.drop(['Embarked'], axis=1)	1	1
"train[""Cabin""].isnull().sum() # count_nan_cabin_train = 687"	1	1
test.loc[female_index,'Sex'] = 0	1	1
Train.drop(['Survived','Name','Ticket'],1)	1	1
df['_NumRelatives'] = df['Parch'] + df['SibSp']	1	1
"data_out['Salutation'] = data_out['Salutation'].fillna(""None"")"	1	1
data.loc[(data.passenger_fare>29.69) & (data.passenger_fare<=29.7) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>29.69) & (data.passenger_fare<=29.7) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
dead_df.SibSp.fillna(dead_df.SibSp.mean()).values	1	1
levels.append(deck[0])	1	1
data['Title']=data.Name.apply(lambda x:re.search('([A-Z][a-z]+)\.',x).group(1))	1	1
df_Pclass.astype(int)	1	1
np.mean(feats)	1	1
titanic_train.join(pd.get_dummies(titanic_train.Sex,prefix='Sex'))	1	1
titanic_train_dataset[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()	1	1
gender_submission['Survived'],	1	1
Test['caA'] = Test['Cabin'].map({'A':1,'B':0,'C':0,'D':0,'E':0,'F':0,'G':0,'T':0,'U':0}).astype(int)	1	1
tr.loc[(tr['Age']>72), 'Age'] = 9	1	1
df.drop(['TicketLetter', 'Ticket'], axis=1)	1	1
"train_data[""PclassTwo""] = 0"	1	1
X_submission.as_matrix()	1	1
df.drop_duplicates()  #removing duplicated	1	1
"result.to_csv(""submission.csv"", sep="","", index=False)"	1	1
plt.rcParams.update({'font.size': 10})	1	1
titanic[['Survived']].copy()	1	1
share_df[['ticket_share', 'cabin_share']],	1	1
"submission_lr.to_csv(""Submission_lr.csv"", index = False)"	1	1
"train[""Embarked""] = train[""Embarked""].map({""S"" : 0, ""C"" : 1, ""Q"" : 2})"	1	1
data.surname_Mellinger.astype(np.uint8)	1	1
res['Age'].mean()	1	1
ax1[0].hist(df_1c[df_1c.Survived == 1].Age, bins=10, range=(0,100))	1	1
"train_df[""Name""] = train_df[""Name""].dropna().map({""Mr"":0, ""Mrs"":1, ""Miss"":2, ""Master"":3})"	1	1
one_hot_train['Survived']	1	1
"train_orj.copy().drop([""PassengerId""],axis=1)"	1	1
encoded_test_data.reindex(sorted(encoded_test_data.columns), axis=1)	1	1
combined_features.drop('SibSp', axis=1, inplace=True)	1	1
train['Sector'] = train['Cabin'].str.replace('[0-9]+', '').fillna('Z').astype(str)	1	1
test_d['FamilySize']=test_d['Parch']+test_d['SibSp']+1	1	1
df_temp.pivot(index='Pclass', columns='Survived', values='Count')	1	1
titanic.loc[titanic['Title']=='Ms', 'Title']='Miss'.strip()	1	1
dataset['Fare'] = np.where(dataset['Fare'] < 1, 1, dataset['Fare'])	1	1
test_df['Survived'] = Y_pred5	1	1
dataset.loc[(dataset['Fare'] > 15) & (dataset['Fare'] <= 30), 'Fare'] = 1,	1	1
ax2[1].set_title('2nd Class (not survived)')	1	1
medianages.iloc[2,0]	1	1
dataset['FareBand'] = 0	1	1
jsim_df.loc[j, i] = jsim_df.loc[i, j]	1	1
"sns.boxplot(y = ""Age"", x = ""Sex"", hue = ""Pclass"", data = X_train)"	1	1
features_imp['importance'] = my_tree.feature_importances_	1	1
train.drop(['PassengerId','Ticket','Cabin'],axis = 1,inplace = True)	1	1
df_test['Survived']=df_test.Survived.apply(lambda x:int(x))	1	1
test_df['Age'][np.isnan(test_df['Age'])]= rand2	1	1
test['Title']=test['Title'].fillna(1)	1	1
"train_data[[""AgeBucket"", ""Survived""]].groupby(['AgeBucket']).mean()"	1	1
test.loc[test['Name'] == name, 'title'] = 'rare'	1	1
N_g[0].forward(X2)	1	1
dftrain.drop(['PassengerId','Cabin','Ticket'],axis=1)	1	1
df['Age_scaled']=scaled_age_fare[:,0]	1	1
test.join(test_fsize.rename('Fsize'))	1	1
data['SortAge_1'] = 0	1	1
data_file['Fare'] = data_file['Fare'].fillna(data_file['Fare'].median())	1	1
dset['FamSize'] = np.where(dset['FamSize'] == 1, 'None', np.where(dset['FamSize'] <= 4, 'Small', 'Big'))	1	1
"titanic_training_df.loc[titanic_training_df[""Sex""] == 'female',""Sex""] = 1"	1	1
df['NamePrefix'] = df['NamePrefix'].replace('Mme', 'Mrs')	1	1
train['Age'] = train['Age'].fillna(age_mean)	1	1
data.drop(['Survived'], axis = 1)	1	1
titanic_train.groupby('FreqTicket').count().PassengerId.plot.bar()	1	1
combined['Sex'] = combined['Sex'].map({'male':0,'female':1})	1	1
data1.drop(['PassengerId','Survived','Name','Ticket'],axis=1)	1	1
"df3_train[""Survived""]"	1	1
_df1['Age'] = _df1['Age'].astype(int)	1	1
test_df['Age'].fillna(test_df['Age'].mean(),inplace=True)	1	1
final_test_data.drop('Age', axis=1)	1	1
data.loc[(data['Age'] > 25) & (data['Age'] <= 31), 'SortAge_2'] = 2	1	1
data['Title']=data.apply(extract_title, axis=1)     # axis = 1 : apply function to each row	1	1
df_train_copy['Embarked'] = df_train_copy['Embarked'].fillna('S').apply(lambda v: ord(v))	1	1
error.append(model.score(data[predictors].iloc[test,:], data[outcome].iloc[test]))	1	1
tot.Fare.fillna(0, inplace=True)	1	1
dev_acc.append(temp_dev_acc)	1	1
xtick.append(trmpX[column][x])	1	1
train_df[['Parch','Survived']].groupby('Parch').mean()	1	1
all_data[['Age', 'Embarked', 'Fare', 'Name', 'Parch', 'Pclass', 'Sex', 'SibSp']].corr()	1	1
trainPCA2['10'] = trainPCA['Pclass2']	1	1
train.loc[train['Embarked']=='S','Embarked']=3	1	1
train.loc[train['Embarked']=='S','Embarked']=0	1	1
train_test['Sex'] = le.fit_transform(train_test['Sex'].values)	1	1
df_test.drop(['Cabin','Ticket'],axis=1)	1	1
submission.isnull().mean()	1	1
dataset['has_cabin_T'] = dataset.apply(lambda x: 1 if x['has_cabin_T'] == True else 0, axis=1)	1	1
"dataset[""Title""] = pd.Series(title)"	1	1
final_stack2.to_csv('final_stack2.csv', index=False)	1	1
df.drop(col_list, axis=1)	1	1
df_test.drop(['Person'],axis=1,inplace=True)	1	1
df_test_ml[['Fare']] = scaler.transform(df_test_ml[['Fare']])	1	1
"train.groupby(""family"").mean()"	1	1
df.Embarked.fillna('N')	1	1
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data=test, ax = ax[1]);"	1	1
all_data.drop(columns=['SibSp', 'Parch'], axis=1, inplace=True)	1	1
df_raw.select_dtypes(include='object')	1	1
train['Fare'].hist( bins = 40, figsize = (10,4))	1	1
df.FamilySize.astype('int64')	1	1
data.loc[(data['Age'] > 30) & (data['Age'] <= 36), 'SortAge_3'] = 3	1	1
embarked_encoder.transform(X_test[:, 7].astype(str))	1	1
pd.isnull(col).sum() or (name in na_dict):	1	1
test['Fare'].fillna(test['Fare'].mean(), inplace= True)	1	1
titanicTrain.drop('Fare',1)	1	1
train_set.iloc[:,1:13].values	1	1
data.loc[data['Embarked'].isna(),'Embarked']=data['Embarked'].mode()	1	1
test_data.drop('Ticket', axis=1)	1	1
axarr[1].scatter(train['Age'][sel_age_fin][sel_age_fin_infant], train['Fare'][sel_age_fin][sel_age_fin_infant])	1	1
ax[0].set_title('Siblings vs Survived')	1	1
data_train_tf.iloc[:,2:],	1	1
train.groupby('Embarked').PassengerId.count()	1	1
dataset_df.loc[dataset_df['Age'].isnull()==True]['Title'].index.values	1	1
train.loc[train['AvFare']>200,'AvFare']=1	1	1
votingC_submission.head()	1	1
train[['Age','Survived']].groupby('Age',as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
train.drop(['Fare_Range'],axis=1,inplace=True)	1	1
dataset['Embarked'] = dataset['Embarked'].fillna(choice(['S','C','Q']))	1	1
raw_train['Age'].plot(kind='kde', style='r--')	1	1
"df_data[""Embarked""]=df_data[""Embarked""].fillna('S') #NAN Values set to S class"	1	1
test.Family.loc[test.Family > 0] = 1	1	1
df_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)	1	1
train.drop(['Ticket','Cabin','Embarked'], axis=1)	1	1
hist['val_loss'][a:b]	1	1
curr_row[2]	1	1
"full[""FamilySizeBand""]=np.nan"	1	1
data_raw['Survived']	1	1
data.loc[(data['Fare'] > payment[3]) & (data['Fare'] <  payment[2]),'FareGroup'] = 2	1	1
ax[1].set_title('Sex:Survived or dead')	1	1
data1.append(data2, sort=False)  # Append rows of data2 to data1	1	1
test_df['Embarked'] = test_df['Embarked'].astype('object')	1	1
"test.loc[(test.Fare.isnull())&(test.Pclass==2),'Fare'] = test[""Fare""][test[""Pclass""] == 2].median()"	1	1
column['Title'] = column.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
df_test['AgeGroup'] = pd.cut(df_test['Age'], bins)	1	1
data.loc[(data.Fare > 0) & (data.Fare <= 7.91), 'FareBand'] = 1	1	1
dataset.drop(['Name_Rare','Name_Mr.','Embarked_S','Sex_female','Pclass_1'],axis =1)	1	1
train.drop(['Ticket'], axis = 1, inplace=True)	1	1
"train_data.loc[train_data[""Fare""] >= 300, ""FareAbove300""] = 1"	1	1
lastname_table['Alive_dad_w_lastname'].fillna(0, inplace=True)	1	1
data['Title']=data.Title.replace(['Don','Dona','Rev','Dr','Major','Lady','Sir','Col','Capt','Countess','Jonkheer'],'Special')	1	1
"related_people.loc[related_people[""PassengerId""]==601,""RGroup""]=""Jacobsohn_M"""	1	1
answer.to_csv('answer.csv', index=False, encoding='utf-8')	1	1
data.loc[(data.passenger_fare==0) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare==0) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
titanic_train.Title.head(10)	1	1
"dataset_med.loc[1,0][""Age""]"	1	1
"coeff_df[""Logistic""] = logreg.coef_[0]"	1	1
predict['Survived'] = pd.Series (0, index=predict.index)	1	1
features.append('male')	1	1
df.drop(['Name', 'PassengerId'], axis = 1, inplace = True)	1	1
"train.groupby([""Survived"",""nFamily""]).count()"	1	1
"inDF[""Deck""] = inDF[""Cabin""].apply(lambda x : x[:1])"	1	1
"train.Title.replace(""Mme."", ""Mrs."")"	1	1
data['Sex_Code'] = sex_label.fit_transform(data.Sex)	1	1
temp.loc[:,['Age','Fare']]	1	1
scaler.transform(final_test)	1	1
data_train.drop(drop_column, axis=1, inplace = True)	1	1
"train_data[""Adult""] = 0"	1	1
P_Ti_vs_Discard.mean()	1	1
data['Fare_per']=data['Fare']/(data['Family_size']+1)	1	1
"train_df[""family_size""] = train_df[""sibsp""] + train_df[""parch""]"	1	1
X_test['Cabin'] = X_test['Cabin'].fillna(avg)	1	1
train_data_1.head()	1	1
train_X.drop(columns='PassengerId')	1	1
X_data.shape[1]	1	1
hists.append(hist)	1	1
dataset.loc[dataset['Fare'] <= dataset['Fare'].quantile(0.2), 'Fare'] = 0	1	1
X_train['ages'] = pd.cut(X_train.Age, bins,labels=group_names )	1	1
"traindat.drop(""Cabin"", axis=1, inplace=True)#Same as above"	1	1
model.copy()	1	1
data_df.select_dtypes(['object']).columns	1	1
full.loc[(full.Age.isnull() == False) & (full.Titles_mapped==title) & (full.Pclass == pclass)].Age.mean()	1	1
train['Name'].isnull().sum()	1	1
train_test.loc[(train_test.Age.isnull())&(train_test.Initial=='Mr'),'Age']=30	1	1
df_all.groupby(by=['Family_name']).size().sort_values(ascending=False)	1	1
data_test.PassengerId.copy()	1	1
train_dataset.loc[(train_dataset['Survived'] == sur) & (train_dataset['Sex'] == sex) & (train_dataset['Pclass'] == pclass) & (train_dataset['Age'].isnull()), 'Age'] = median_age	1	1
df[['FamilySizeGroup','Survived']].groupby(['FamilySizeGroup'],as_index=False).mean()	1	1
Submission.to_csv('baselinemodel01.csv',sep=',')	1	1
dataset.groupby(['Pclass', variable]).size()[1].index.values	1	1
"training[""Title""] = training[""Name""].str.extract(""([A-Z a-z]+)\."", expand= True)"	1	1
combine.groupby(combine['Pclass']).mean()	1	1
trainingset['Sex'] = trainingset['Sex'].map(sexmapping)	1	1
"combined[""t_titles""] = combined.Name.str.extract(""([A-Za-z]+)\."",expand = False)"	1	1
"train.drop(columns=""ticket"") #drop ma c'è da rivedere, perchè non capisco come funziona"	1	1
data_train['Cabin'].unique()	1	1
X['Fare'].fillna(df_train['Fare'].median(),inplace=True)	1	1
genderData['Survived'] = testData['isSurvived']	1	1
"test.loc[(test[""Age""] > 64), ""age_c""] = ""5"""	1	1
classifier.add(Dense(units=output_dim, kernel_initializer='uniform', input_dim=input_dim))	1	1
rows_list.append([name]+evaluation[name])	1	1
Titanic_dataframe.loc[:, 'Fare'] = Titanic_dataframe.loc[:, 'Fare'].fillna(value=0)	1	1
dataset.loc[(dataset['Fare'] > 8.05) & (dataset['Fare'] <= 10.5), 'Fare'] = 3	1	1
train['new_Parch'] = train.Parch	1	1
accuracy.eval(feed_dict={inputs: X_train, label: labels_train})	1	1
X.loc[(X['Age'] > 48) & (X['Age'] <= 64), 'Age'] = 3	1	1
dataset['Age'][i]= 0	1	1
dataset['Age'][i]= 4	1	1
cleanedtrain.as_matrix(columns=['Survived'])	1	1
"clean_data[""Embarked""][i]!=""Q"":"	1	1
df_test['Survived']=survived	1	1
training_set.drop('Ticket', 1, inplace=True)	1	1
"i[""CabinCount""]"	1	1
titanic['title'] = titanic['Name'].apply(get_title)	1	1
train_df_concat.drop(columns=['Name','Embarked','Sex'])	1	1
data_parch.loc['female'].plot(kind='bar', color='magenta', ylim=[0, 1])	1	1
"full_data.loc[ full_data['Age'] <= 16, 'Age'] 					         = 0"	1	1
final_selection.transform(strat_test_set_X)	1	1
fold_importance_df['fold'] = n_fold + 1	1	1
df.pivot_table(values = 'Survived', index = ['Sex','Embarked']).Survived.plot.bar()	1	1
d['Age'] = d['Age'].astype(int)	1	1
plcassSurvivers.pivot(index='Pclass', columns='Survived', values='count').plot(kind='bar')	1	1
df['AgeState']=np.where(df['Age']>=18,'Adult','Child')	1	1
acc_gradiantBoosting.std()	1	1
train_df.as_matrix() # 将数据转化成矩阵	1	1
dataset['Cabin'].head()	1	1
ohe.transform(X.Embarked.astype(str))	1	1
"input_data[""Embarked_S""] = input_data[""Embarked""].apply(lambda x: int(x == ""S""))"	1	1
embarked_dummies.drop('Q',axis=1,inplace=True)	1	1
dftest.drop(['Fare_bin','Cabin'],axis=1)	1	1
training_data.PassengerId.nunique()	1	1
trainOrg['Embarked'] = np.where(trainOrg['Embarked']=='C', 1, 0)	1	1
Xknn_test.apply(standardize, axis=0)	1	1
subset.Pclass.iloc[0]	1	1
test['sex_code'] = test['Sex'].astype('category').cat.codes	1	1
data.drop(['Cabin','Name','PassengerId','Ticket','fam_size'],axis=1,inplace=True)	1	1
dataset.loc[dataset['IsMother'] == 1, 'Survived'].value_counts().values	1	1
test.drop(['Name', 'PassengerId', 'Ticket', 'Cabin'], axis=1)	1	1
"test_df[""Fare""] = test_df[""Fare""].fillna(mean_fare)"	1	1
df.groupby('Sex').agg('sum')[['Survived','Died']].plot(kind='bar',stacked=True,colors=['red','grey'],figsize=(13,5))	1	1
train_df.loc[train_df['Embarked'].isnull(), 'Embarked'] = 'C'	1	1
df_data[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean()	1	1
train_data[['Family','Survived']].groupby(['Family'],as_index = False).mean().sort_values(by = 'Survived',ascending = False)	1	1
np.empty((NFOLDS, o_x_cv.shape[0]))	1	1
"fd2.to_csv(""NBSub.csv"", index=False)"	1	1
test_df.loc[test_df.Fare.isnull(),'Fare'] = predict_fare	1	1
np.cov(x[indices,:], rowvar=0, bias=1)	1	1
train.drop('Survived', axis=1),	1	1
Titanic_dataframe.loc[:, 'Age'] = Titanic_dataframe.loc[:, 'Age'].fillna(value=0)	1	1
"dftest.loc[idx,""CountTicketButLast""]=ticketButLast_count_test[ticketButLast]"	1	1
train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
Titanic_train_dataframe_p.head()	1	1
titanic_df['Age'] = titanic_df['Age'].apply(int)	1	1
"train_hard_pred_matrix.to_csv(""train_hard_pred_matrix.csv"")"	1	1
test['Title'].replace(['Dona','Master','Rev','Col','Dr','Ms'],['Miss','Child','Other','Other','Other','Miss'],inplace=True)	1	1
data.drop(['Ticket', 'Cabin', 'PassengerId', 'Name'], axis = 1)	1	1
X_train_features.loc[:, 'Sex'] = labelencoder.fit_transform(X_train_features.loc[:, 'Sex'])	1	1
D.keys()	1	1
df_comb.drop(['Sex','Embarked','Title', 'Deck'], axis=1, inplace=True)	1	1
df_test.loc[(df_test['Fare'] > 14.454) & (df_test['Fare'] <= 31), 'Fare']   = 2	1	1
data.loc[mask_miss_NaN, 'Woman'] = 1	1	1
fill_df['age_mod'] = fill_df['Age']	1	1
"titanicDF[""Survived""].value_counts().plot.pie(autopct=""%.2f%%"")"	1	1
girlData['Age'].median(axis=0)	1	1
train_df_final.head()	1	1
df['Fare']=df['Fare'].astype('category')	1	1
titanic_df['PassengerId'].count()	1	1
data_train.filter(regex='Survived|Age_.*|Fare_.*|Name_.*|FamilySize_.*|Embarked_.*|Sex_.*|Pclass_.*')	1	1
titanic_test_data['Age'] = titanic_test_data[['Age','Sex','Pclass']].apply(sub_age,axis=1,args=(male_mean_age_class,female_mean_age_class))	1	1
"train[""Cabin_group""] = train[feat].str[0]"	1	1
x_train_preprocessed.info()	1	1
titanic_train[['Sex','Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
model.add(Dense(9, kernel_initializer='uniform', activation='relu'))	1	1
train.drop(columns = ['PassengerId', 'Name', 'Ticket', 'Cabin'])	1	1
test['Tag']= 'test'	1	1
df_age_fare.describe()	1	1
"combined.loc[f_group.index, ""group_id""] = f_dict[ln]"	1	1
data['Sex']=data['Sex'].map({'male':0,'female':1})	1	1
A2.shape	1	1
df_train.copy(deep = True)	1	1
test.loc[(test['Fare']>50) & (test['Fare']<=100),'FareCategorical'] = 1	1	1
combined_df.describe(include=['O'])	1	1
X_test['perishing_mother_wife'] = X_test[['surname', 'Pclass', 'person']].apply(perishing_mother_wife, axis=1)	1	1
le.transform(df_combined[feature])	1	1
test_data.drop('Fare_stage', axis=1)	1	1
df['Age_cats']=pd.cut(df['Age'],cut_limits,labels=label_names)	1	1
"plt.rcParams[""figure.figsize""] = [8,8]"	1	1
"test_df['FamilySize'] =  test_df[""Parch""] + test_df[""SibSp""]"	1	1
"train_df.drop([""Name"", ""Ticket"", ""Sex"", ""SibSp"", ""Parch"", ""Fare"", ""Cabin"", ""Embarked"",""PassengerId""], axis=1)"	1	1
prediction.Survived.astype(int)	1	1
df.drop(categorical_cols, axis=1, inplace=True, errors=False)	1	1
age_range_dummy.head()	1	1
train.loc[train['Cabin'].notnull()].Survived.mean() #People with a cabin show a 67% Survival Rate	1	1
"data.loc[(data[""Age""] > 48) & (data['Age'] <= 64), 'Age'] = 3"	1	1
model.add(Dense(32, input_dim=nb_features, activation='relu'))	1	1
tit_df_test.loc[i, 'Age'] = age_mapper.loc[tit_df_test.loc[i,'Sex']].loc[tit_df_test.loc[i,'Pclass']]	1	1
"df_train[""FamilyId""] = family_ids_train"	1	1
train['CabinN1'] = pd.to_numeric(train['CabinN1'], downcast='integer')	1	1
df_data.loc[(df_data.Age.isnull()) & (df_data.Pclass == j) & (df_data.Title == i),'P_Ti_Age'] = Pclass_title_pred[j-1, i]	1	1
Age_set['Age_Grp']=tmp[0]	1	1
"in [""Rev""]: # Sacrifice"	1	1
df_X.apply(lambda x: x/x.max(), axis=0)	1	1
all_data['Title'] = all_data['Title'].map(Title_Dict)	1	1
survival_class['Survived'].tolist()	1	1
"test_df[""Fare""] = test_df.groupby(""Pclass"")[""Fare""].transform(lambda x: x.fillna(x.mean()))"	1	1
titanic_train.drop(['Sex','Sex_male'],1)	1	1
test['Sex'] = test['Sex'].astype(int)	1	1
ax[1].set_title('Survival per Sex in %')	1	1
"train.loc[train[""Age""] < 13, ""Child""] = 1"	1	1
X_test.drop(feature, axis=1)	1	1
"df.loc[ df['Family'] == 1, 'Family'] = ""Individual"""	1	1
titanic_df.loc[lowest['age'],['age','Survived']]	1	1
titanic_test.join(person_dummies_titanic_test)	1	1
train_df.loc[ (train_df.Fare.isnull()) & (train_df.Pclass == f+1 ), 'Fare'] = median_fare[f]	1	1
dataset['Cabin'] = dataset['CabinLetter'].map(title_mapping)	1	1
data.loc[(data.TktNum == 'LINE'),'TktNum'] = '111111'	1	1
"full_dataset[""Age""][((full_dataset['SibSp'] == full_dataset.iloc[i][""SibSp""]) & (full_dataset['FamilySize'] == full_dataset.iloc[i][""FamilySize""]) & (full_dataset['Pclass'] == full_dataset.iloc[i][""Pclass""]))].median()"	1	1
test_df['Fare'] = test_df['Fare'].fillna(value=median_Fare)	1	1
df_test_features.values	1	1
X_test.drop(cols_to_remove,axis=1)	1	1
df_train_full.drop(['Name', 'Ticket', 'Cabin', 'Embarked', 'Survived'], axis=1)	1	1
pred.head()	1	1
target_columns.append('Embarked')	1	1
testdf.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)	1	1
df_test['ticketcount'] = df_test.groupby(['Ticket'])['Name'].transform(len)	1	1
lastname_table.rename(columns={'Lastname': 'People_w_lastname'}, inplace = True)	1	1
data.drop('FareBand', axis=1, inplace=True)	1	1
df_titanic_train_mod.loc[:,['Survived']]	1	1
data_train.drop('Age',axis=1)	1	1
train_newages.append(random.randint(20,35))	1	1
train['FareBin'] = pd.qcut(train.Fare,  5)	1	1
train_df.update(R)	1	1
df_titanic_train_mod.iterrows():	1	1
train_data['Sex'] = Sex_dummy['male']	1	1
"t_df.pivot_table('Survived', index='person', columns='Pclass', margins= True, margins_name=""%survival"")"	1	1
"df[""call""] = df[""Name""].apply(find_call)"	1	1
train[['Survived','Class_1','Class_2','Class_3','SibSp','Parch','Fare','male','Age']].corr()	1	1
p_s[['Survived']]	1	1
fare_test.insert(0,'Fare',fare_temp)	1	1
total_data.describe()['Fare']['mean']	1	1
"sns.boxplot(data=train,y=""Fare"",x=""Pclass"", hue=""Sex"")"	1	1
tit_df.drop(['Sex'], axis = 1)	1	1
OHE_training_data.head(6)	1	1
"train_data[[""SibSp"",""Parch"", ""Pclass"", ""Sex"", ""Age""]]"	1	1
df['F_Med'] = df['Fare'].map(lambda s: 1 if  50 < s <= 100   else 0)	1	1
classifiers['acc_std'].append(score.std())	1	1
traindf.drop('Cabin',axis=1)	1	1
"X_train[[""AgeRange"", ""Survived""]].groupby(['AgeRange'], as_index=False).mean()"	1	1
data.iloc[0:3,[1,3,6]]	1	1
train.loc[(train['Age']>=64),'Age']  =5	1	1
"imp[""DecTree""] = model.feature_importances_"	1	1
train_df.describe(include='all') #Statical values from train_df	1	1
test_df.drop('SibSp', axis = 1, inplace = True)	1	1
Data['Cabin'].unique()	1	1
"test2_df[""TitleEnc""] = title_lab_enc.transform(test2_df[""Title""])"	1	1
ax[1].set_title('Family size vs Survived')	1	1
df.Pclass.hist()	1	1
data.drop(column, 1)	1	1
data.loc[(data.passenger_fare>49.5) & (data.passenger_fare<=49.51) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>49.5) & (data.passenger_fare<=49.51) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
ax[3][0].set_ylabel('SibSp', rotation=0, labelpad=80)	1	1
titanic_test1.shape	1	1
df.loc[not_master & not_miss & is_younger, 'New_Age'] = None	1	1
model.add(Activation(sigmoid))	1	1
train_df['Deck']=train_df['Cabin'].apply(lambda cabin: get_deck(cabin))	1	1
"Filler_Ages.male.loc[row[""Title""], row[""Pclass""]]"	1	1
test.join(df_pclass_2)	1	1
submit.to_csv('TPOT_submission.csv', index = False)	1	1
test.loc[test['Cabin'].isnull(), 'Cabin'] = 'U0'	1	1
data.drop(columns=['PassengerId'], axis=1, inplace=True)	1	1
X_train.shape,  y_train.shape, X_test.shape	1	1
data.surname_Bishop.astype(np.uint8)	1	1
rcParams['figure.figsize'] = (4, 2.7)	1	1
"train[""Cabin""][train[""Cabin""] == ""A""] = 0"	1	1
train_cleaned['Survived'] #Target	1	1
data.loc[ data['Age'] > 36, 'SortAge_3'] = 4	1	1
re_test.shape	1	1
df_data['Cabin'].value_counts()	1	1
test.drop('Pclass', axis=1)	1	1
"dat.loc[dat[""Embarked""] == ""S"",""Embarked""] = 1"	1	1
df_test.Age_bin.fillna(df_test.Age_bin.mean() , inplace=True)	1	1
my_feature_columns.append(pclass_feature_columns())	1	1
"row[""Embarked""] == ""C"":"	1	1
child_class1_class2[['Survived','Class']],index='Survived',columns=['Class'],	1	1
raw_train.loc[index, 'Age'] = ages[row['Title']][row['Pclass']]	1	1
scores.append(s)	1	1
test.fillna(value={'Fare':FareMedian}, inplace=True)	1	1
data.surname_Yarred.astype(np.uint8)	1	1
df_test['PassengerID']=Passenger_ID	1	1
Titanic_dataframe.loc[:, 'Sex'] = pd.to_numeric(Titanic_dataframe.loc[:, 'Sex'])	1	1
features['feature'] = dataTrain.iloc[:, 1:].columns	1	1
test_dat.groupby(by=['Pclass'], as_index=False)['Fare'].mean()	1	1
train_df[['Age', 'Survived']].groupby(['Age'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
df.ix[df[column] == category, name] = 1	1	1
model.add(Dense(64, kernel_initializer=k_init))	1	1
combined['Ticket_Lett'] = combined['Ticket_Lett'].apply(lambda x: str(x))	1	1
m.add(Dense(20, activation='relu'))	1	1
X_train.iloc[:, [0, 1]]	1	1
train.Embarked.fillna('NO_VALUE', inplace=True)	1	1
test_set['Survived'] = predicted.astype(int)	1	1
df[['Pclass', 'Survived']].groupby('Pclass').mean()	1	1
train_c2.head()	1	1
finalOutput.to_csv('outputs.csv')	1	1
"points_for_GP_CV.insert(0, ""Survived"", Y_test)"	1	1
"train.loc[(train[""Pclass""]==3)&(train[""Survived""]==1), ""Age""]"	1	1
normalized_data['Survived']	1	1
train_data['Fare'].loc[train_data['Pclass']==2]	1	1
"test_set['Age'].fillna(test_set.groupby(""Title"")['Age'].transform(""median""), inplace = True)"	1	1
test4.head(5)	1	1
x['tic_h'] = x['Ticket'].apply(lambda x: str(x)[0])	1	1
df_test_features.iloc[rowin,np]=-1	1	1
"train_df[[""Pclass"", ""Survived""]].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
train_df.drop(columns = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Deck', 'Embarked'])	1	1
"train_data[[""Pclass"", ""Survived""]]"	1	1
df_train.loc[df_train['Embarked'] == 'S', 'Embarked'] = 0	1	1
"ax[1].set_title(""Pclass : Survived vs Dead"")"	1	1
"sub.to_csv(""first_submission_xgb.csv"", index=False)"	1	1
data.loc[(data['Age']>cat[3]) & (data['Age']<=cat[4]),'Age']=4	1	1
output.to_csv('titanic-predictions-SP-double-hidden-layer.csv', index = False)	1	1
"testing[""Fare""] = scaler.fit_transform(fares_test)"	1	1
df_train.drop(['Ticket'],axis=1)	1	1
"test[""Age""] = test[""Age""].fillna(av_age)"	1	1
submission.to_csv('BESTXGBOOST.csv',index=False)	1	1
data_train['Age'].fillna(data_train['Age'].median(), inplace=True)	1	1
df['sex_T'] = df.apply(lambda x: 1 if str(x['Sex']) == 'female' else 0, axis=1)	1	1
test_data.set_value(index,'AgeRange','45-60')	1	1
train[1]	1	1
"new_df[""Age_Fare""] = normalize( new_df[""Age_Fare""] )"	1	1
train_dataset['Embarked'].unique().tolist()	1	1
"test_df.drop(labels=[""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Fare"", ""FareRange"", ""Age""], axis=1)"	1	1
dsubmit.drop('PassengerId',inplace=True,axis=1)	1	1
"df_test[""norm_fare""]= (df_test[""Fare""]-fare_mean)/fare_std"	1	1
df['min'] = data.min(axis=1)	1	1
data_train.loc[:,['Survived','SibSp']].groupby('SibSp').mean().plot(kind='bar')   ## pay attention to the groupby() method	1	1
test_df[['Age', 'Fare']] = std_scale.transform(test_df[['Age', 'Fare']])	1	1
"train_data[""Survived""][(train_data[""Pclass""] == pclass) & (train_data[""Child""] == 1 )]"	1	1
"df_train.hist(""norm_len_name"", by = ""Survived"") #Honestly I cannot infer much from this. But will let the model figure out if its worthwhile."	1	1
inputds['Ticket']=le.fit_transform(inputds['Ticket'])	1	1
"train_data.loc[train_data[""Name""].str.contains(""Major.""), ""TitleMajor""] = 1"	1	1
titanic_data.loc[titanic_data['Embarked'] == 'Unknown']	1	1
dataset.loc[(dataset['Age'] > 50.158) & (dataset['Age'] <= 60.105), 'AgeBand'] = 5	1	1
df['DisAge'] = df.apply(lambda row: predictAge(row), axis=1)	1	1
training_data['Pclass'].value_counts()	1	1
train_copy['High_Fare_Female'] = Fare_high_female	1	1
test_data['child'][test_data['Age'] < 18] = 1	1	1
trainPCA2['5'] = trainPCA['Pclass2']	1	1
"train_data[""Survived_str""].value_counts(normalize=True)"	1	1
titanic_train.join(pd.get_dummies(titanic_train.Title,prefix='Title'))	1	1
"train_data.iloc[idxYes].groupby([""FamilySize""]).size().reset_index()"	1	1
"df_test.boxplot(""Fare"", by=[""Embarked"",""Pclass""], figsize = [8,8])"	1	1
train['SibSp'][train['Survived'] == 1].value_counts()	1	1
df_comb['IsAlone'] = 0	1	1
training_config.keys()	1	1
train_df.groupby(['Embarked'])['Survived'].mean()	1	1
titanic_test['Age_Middle']=((titanic_test['Age']>35)&(titanic_test['Age']<=50)).astype(int)	1	1
data_pruned['FamilySize'] = FamilySize	1	1
train.loc[(train.Sex == sex) & (train.Survived == surv)]	1	1
train.sample(1)['Name'].values[0]	1	1
submission['Survived'] = y_pred_sub	1	1
train['FareBand'] = pd.qcut(train['Fare'], 3)	1	1
df_gender_submission['Survived']	1	1
in [ 'XFam' ]:	1	1
df_all.loc[:,numerical_col] = (df_all.loc[:,numerical_col]-numerical_col_means)/numerical_col_stds	1	1
full.describe(include=['O'])	1	1
vec.transform(arr2) #bug fixed	1	1
X_tot['PrimaryCabin']=X_tot['Cabin'].fillna('N').str.split().apply(sorted).astype(str).str[2]       # both training and test set	1	1
X_train.drop(cols_to_remove,axis=1)	1	1
"train[""title""] = [i.replace('Dr', 'rare') for i in train.title]"	1	1
features['Title'] = df_title['Name']	1	1
"test_df[""Fare""].fillna(test_df[""Fare""].dropna().median(), inplace = True)"	1	1
dataset['SPTE'].value_counts(sort=False)	1	1
"train[""title""] = train[""title""].replace('Mlle', 'Miss')"	1	1
"train_data.drop(""Sex"", axis=1)"	1	1
test_data_X.drop(['NamePrefix'],axis=1)	1	1
"df_titanic[""family""]=df_titanic[""Parch""]+df_titanic[""SibSp""]"	1	1
"sex[""Embarked""] = np.nan"	1	1
df['Title'].replace(title_categories, inplace=True)	1	1
joined_data['Ticket_Code_Remap'] = joined_data.Ticket_Code.replace(dict(zip(count.index[count.Number <= 10], itertools.cycle([0]))))	1	1
in ['Pclass',  'SibSp', 'Parch', 'Embarked', 'FamilySize', 'IsAlone', 'Title', 'FareBin', 'AgeBin']:	1	1
df2.assign(C=embarked_['Embarked_C'], Q=embarked_['Embarked_Q'], S=embarked_['Embarked_S'])	1	1
"sns.boxplot(x=""Survived"",y=""Embarked"",data=titanic)"	1	1
df['Name'] = df['Name'].map({'Mr':0, 'Low Appearence': 1, 'Master': 2, 'Miss': 3, 'Mrs': 4})	1	1
"df.fillna({""Embarked"":mode})"	1	1
train.loc[train['EmbarkedModified'] == 'S', 'EmbarkedCategorical'] = 0	1	1
"coefficient_dataframe[""Coefficients""] = logistic_regression.coef_[0]"	1	1
test_df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'PassengerId'], axis=1)	1	1
"test_df.drop(""Ticket"",axis=1,inplace=True)"	1	1
df_predict['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)	1	1
inputds.drop('Cabin',axis=1)	1	1
"test[""Title""] = [i.replace('Ms', 'Miss') for i in test.Title]"	1	1
train_data.drop(['PassengerId', 'Survived', 'Ticket'], axis=1)	1	1
train.pivot_table('PassengerId','SibSp', aggfunc='count').plot(kind='bar')	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Capt"", ""Mr"")"	1	1
df_titanic['Small'] = df_titanic['Family'].map(lambda i: 1 if i == 2 else 0)	1	1
Survived.corr(train_df['Deck'], 'spearman')	1	1
child12_alive.PassengerId.count()	1	1
"temp.to_csv(""../working/submission6.csv"", index = False)"	1	1
test['Fare'] = test['Fare'].fillna(value = 13)	1	1
full.iloc[0:891,:]	1	1
titanic_df.drop(['PassengerId','Ticket','Cabin','Fare','SibSp'], axis=1)	1	1
data['Embarked'].replace({'S':0,'C':1,'Q':2})	1	1
comb_data['Title'] = comb_data['Title'].replace('Mme', 'Mrs')	1	1
models['set1']['svc_grid_search'].cv_results_	1	1
train_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index = False).mean()	1	1
test.Fare.astype(float).fillna(test['Fare'].median())	1	1
res_acc.append(cross_val_score(adaClass,X,y,scoring='accuracy',cv=10).mean()*100)	1	1
"tmp_test.loc[tmp_test[""Fare""].isnull(), ""Fare""] = tmp_test[""Fare""].median()"	1	1
encoder.transform(train_df[col])	1	1
test['CategoricalAge'].cat.categories = [1, 2, 3, 4, 5]	1	1
"train[""Age_categories""] = pd.cut(train[""Age""],cuts,labels=labels)"	1	1
df_test['Age'] = df_test.apply(lambda x: age_imputation(x,age_lookup), axis=1)	1	1
titanic_train['Age'].fillna(median_age_train,inplace=True)	1	1
df.drop(delete_train,axis=1)	1	1
dataset.loc[dataset['Pclass'] == 3, 'Pclass3'] = 1	1	1
trainTitanic.drop(['PassengerId','Name','Ticket'], axis=1)	1	1
"test_df[""FamilySize""] = test_df.SibSp + train_df.Parch + 1"	1	1
cnf_matrix.sum()	1	1
titanic_df['relatives'].value_counts()	1	1
dataset['Title'] = dataset['Title'].replace('Mr', 3)	1	1
"test[""title""] = train[""title""].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
df['Child'] = df['Age'].map(lambda s: 1 if s<=10 else 0)	1	1
numerical_columns.append('FamilySize')	1	1
"train.loc[train[""Age""] <= 16, ""age_c""] = ""1"""	1	1
df_data['Sex'] = df_data['Sex'].map( {'female' : 1, 'male' : 0}).astype('int')	1	1
dataframe2.iloc[:,0:6].values	1	1
data['Deck'] = data['Cabin'].str.slice(0,1).fillna('Unknown')	1	1
data.loc[(data.Age.isnull())&(data.Title==1)&(data.Pclass==1), 'Age']=42	1	1
"titanic['Cabin'] = titanic['Cabin'].fillna(value=""U"")"	1	1
df['Age_Category'] = (df['Age'].apply(age_categorize)).map({'Young':0, 'Adult':1, 'Senior':2})	1	1
all_df.shape	1	1
"x[""Age""]"	1	1
np.where(test_set['Age'] <= 20, 1, 0)	1	1
dataset['Fare_cat']=0	1	1
feature_columns.append((col, tf.feature_column.numeric_column(key=col)))	1	1
"age_survived[""Age""] = age_survived[""Age""].astype(int)"	1	1
test_df[['PassengerId'] + features].sort_values('PassengerId')	1	1
X_test.drop(['SibSp', 'Parch'], axis=1, inplace=True)	1	1
dataset['title'] = dataset['title'].replace('Mme', 'Mrs')	1	1
Age.plot.hist(alpha=0.5,color='red',bins=50)	1	1
"data[[""UselessColumn""]]"	1	1
family['Family_code'] = family['Surname_adj'].map(dict_fcode)	1	1
combined.shape[0]	1	1
data.drop(['PassengerId', 'Survived', 'Pclass'], axis=1).hist(figsize=(10, 7), grid=False)	1	1
tt.iloc[0:891, -1]	1	1
train.drop(['PassengerId','Survived','Name','Ticket','Cabin','SibSp','Parch'], axis=1)	1	1
"train[""Sex_adults""]"	1	1
df_test.loc[(df_train['Age'] > 48) & (df_test['Age'] <= 64), 'Age'] = 3	1	1
plt.hist(Xy_train_df['Fare'],bins=50);	1	1
predictions_df['PassengerId'] = aux['PassengerId']	1	1
data['Cabin'] = data.Cabin.notnull().astype(int)	1	1
"axes[0].set_ylabel(""Number of passengers"")"	1	1
all_data.loc[(all_data['Age'] > 16) & (all_data['Age'] <= 24), 'Age'] = 1	1	1
pred['Survived'] = fields.mode(axis=1)	1	1
training_set.head(20)	1	1
drop_elementsONS.append('Name')	1	1
model.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu'))	1	1
medianAge.to_dict()	1	1
training_set['Title'] = training_set['Name'].apply(get_title)	1	1
enc.transform(train_cats).toarray() # encoded as one-hot.  saving the unencoded versions for kNN	1	1
"test[""Name""] = le.fit_transform(test[""Name""].fillna('0'))"	1	1
train_data['Embarked'].fillna('S', inplace=True)	1	1
"df[""isChild""] = 0"	1	1
row['Ticket_Prefix']:	1	1
val.boxplot(column='Fare',by='Embarked');	1	1
ax[2].set_xlabel('Fare')	1	1
test.drop(cols_to_drop, axis=1)	1	1
"train_df.replace({""Sex"": { ""female"" : 2, ""male"" : 1} })"	1	1
data['AgeClass'] = data['Age']* data['Pclass']	1	1
testdf.values	1	1
df['EmbarkedNumber'] = 0;	1	1
"traindata.groupby(""Ticket"").Survived.mean().plot(kind=""bar"",figsize=(25,25))"	1	1
combined.drop(['encodedTitle'], axis=1)	1	1
TitanicTrain.Age.mean()	1	1
titanic_train_data['Name'].apply(titleMr)	1	1
coeff['Correlation']=pd.Series(lregr.coef_[0])	1	1
test.replace({'female':1,'male':0, 'S':1, 'C':2, 'Q':3}, inplace=True)	1	1
"valid_dataset.drop(""Survived"",axis=1).as_matrix()"	1	1
score.append(mlp.score(X_val,y_val))	1	1
train_data.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)	1	1
"sns.boxplot(train[train[""Pclass""] == 1][""Fare""], ax = ax[0])"	1	1
submission_random_forest.head()	1	1
traind.tail()	1	1
test['c_std'] = pd.Series(test.std(axis=1), index=test.index)	1	1
train.loc[(train['Fare']>350) & (train['Fare']<=400),'FareCategorical'] = 7	1	1
testData.drop(labels=['Name','Ticket'],axis=1)	1	1
df_train.drop(['Name', 'Ticket', 'Cabin'], axis=1)	1	1
"New_Df[""Title""] = New_Df.Title.map(Title_Dictionary)"	1	1
train_data['Ticket'] = train_data['Ticket'].map(lambda x: x[0])	1	1
var_f1.append(var)	1	1
df_test['SexEncoded'] = le_sex.transform(df_test['Sex'])	1	1
data['Parch'].hist()	1	1
df1[['Age','Fare','Survived']]	1	1
"ALL_DATA.drop([""Name"", ""Sex"", ""Ticket"", ""Cabin"", ""Embarked""], axis = 1)"	1	1
"titanicDF[""Fare""].hist()"	1	1
gridscgdbt3.best_params_['subsample'],	1	1
full.drop('Survived',axis=1)	1	1
"df[""TwoLetters""]=df[""FamilyName""].map(lambda x: x[-2:])"	1	1
full.loc[(full['Age'] > 48.068) & (full['Age'] <= 64.034), 'Age']   = 4	1	1
train_data.drop(['PassengerId', 'Ticket', 'Cabin'], axis=1)	1	1
test_df.loc[ test_df['Age'] > 60, 'AgeGroup'] = 5	1	1
"test[""Fare""] = test[""Fare""].fillna(""N"")"	1	1
fig1['layout'].update(layout)	1	1
"train_data[""TitleMme""] = 0"	1	1
pd.merge(train, test, how='outer')	1	1
"X[""Sex""] = sex_encoded"	1	1
"X_test.fillna(""345"")"	1	1
test_set_predictors.shape	1	1
survived_1.hist()	1	1
Train_Master.drop(columns=['SibSp','Parch'], axis=1, inplace =True)	1	1
test.drop(['Name','PassengerId','Ticket'],axis=1)	1	1
axes[0].set_title('Survival rate for \n Class 2 Cabins')	1	1
df.loc[ (df.Fare<=31.0) & (df.Fare>14.454),'FareBand'] = 2	1	1
test['Age_Cat'] = pd.cut(test['Age_fill'],bins,labels = label)	1	1
data_after_transform_Sex.dtypes	1	1
data.Age.fillna(train.Age.median())	1	1
ax[4].hist2d(x=training_data['Survived'],y=training_data['Pclass']);ax[4].set_title('Survival and death desity due to Pclass')	1	1
combined_df['Parch'].value_counts()	1	1
data.drop(['Cabin'], axis=1)	1	1
"combined[""t_titles""].value_counts()"	1	1
data['Miss'] = data['Title'].map(lambda x: 1 if str(x) in ['Miss', 'Mlle', 'Ms'] else 0)	1	1
"test_cp1[""Survived""] = tree_prediction"	1	1
train_df['Title'] = [x.split(', ')[1].split('. ')[0] for x in train_df['Name']]	1	1
"titanic_train[""S""] = pd.to_numeric(titanic_train['Sex'].apply(convert_s_2_num))"	1	1
df_train_pp.loc[:, columns]	1	1
train['Sex']=train['Sex'].apply(lambda y: x[y])	1	1
dataset.iloc[0:890,[2,4,5]]	1	1
"train_data[""Title""] = train_data.Name.str.split("","").str.get(1).str.split(""."").str.get(0).str.strip()"	1	1
final_test.loc[final_test.groupby('Title').Title.transform('count').lt(45), 'Title'] = 'Rare'	1	1
data_df['Family_Size'] = data_df['Parch'] + data_df['SibSp']	1	1
data.loc[(data.passenger_fare>39.599) & (data.passenger_fare<=39.6) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>39.599) & (data.passenger_fare<=39.6) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
"train_kaggle[""Fare_category""] = pd.cut(train_kaggle.Fare, bins=bins).apply(lambda x : x.right)"	1	1
X.Age.fillna(X.Age.mean(),inplace=True)	1	1
test.reset_index(inplace=True)	1	1
X_train['Sex'] = X_train['Sex'].astype(object)	1	1
df['Title']=df['Name'].apply(lambda s: s.split()[1])	1	1
test_data.drop(['Name', 'FName'], axis=1, inplace=True)	1	1
gender.isnull().values.any()	1	1
"first_class_survived.plot.hist(fc=(0, 0, 1, 0.5), normed=1, label=""Survived"")"	1	1
df.loc[(df.Sex == 'male') & (df.Title == 'Dr') , 'Title'] = 'Mr'	1	1
trainPCA2['7'] = trainPCA[:,6]	1	1
"test[""Age""][test_na] = impute_age_test"	1	1
OHE_test_data.head(6)	1	1
dataPrepare['Title'].value_counts()	1	1
target_columns.append('FamilySize')	1	1
grouped_median.loc[row['Sex'], row['Pclass'], row['Title']]['Age']	1	1
full_set['FamSize'] = full_set['Parch'] + full_set['SibSp'] + 1	1	1
nn_model.add(Dense(90,input_dim=X_train.shape[1],activation='relu'))	1	1
X_validation.drop([col + '_missing_data'], axis=1)	1	1
"test.loc[test[""Embarked""] == embarked[i], ""Embarked""] = i"	1	1
val_df.Embarked.values.reshape(-1,1)	1	1
age_mapper.loc[0].loc[3]	1	1
dfte['Age'] = dfte['Age'].fillna(median2)	1	1
strat_test_set.drop(['Survived'], axis=1)	1	1
test_features['Fare'] = test_features['Fare'].fillna(np.mean(test_features['Fare']),axis=0)	1	1
train_df['Honorific'] = train_df['Name'].map(lambda x: x.split(',')[1].split('.')[0].strip())	1	1
train['Sex']=train.Sex.map({'male':0,'female':1})	1	1
acc_logistic.std()	1	1
df_train['AgeRange'] = pd.cut(df_train['Age'], 5, precision=0)	1	1
titanic[['Fare','Pclass']].groupby('Pclass').mean()	1	1
data.sons.loc[data.PassengerId==1252] = 1 # Case of 'CA. 2343' and last rule	1	1
raw_train['LogFare'] = raw_train['Fare'].apply(lambda x: np.log(x) if x > 0 else 0)	1	1
test.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)	1	1
train['A1'] = np.array(train['CategoricalAge'] == 1).astype(np.int32)	1	1
df['age_group'] = 'less than ' + str(cut_offs[i])	1	1
sub_knn['PassengerId'] = df_test['PassengerId']	1	1
dataset['Embarked']=dataset['Embarked'].fillna('Q')	1	1
"train[[""Age"", ""Child""]].head(10)"	1	1
test1_df['Survived'] = pd.Series(new_predictions)	1	1
titanic['Age'][(male)&(Pclass1)&Family2] = titanic['Age'][(male)&(Pclass1)&Family2].fillna(32)	1	1
Test['emS'] = Test['Embarked'].map({'S':1,'Q':0,'C':0,np.nan:0}).astype(int)	1	1
pipelines.append(('ScaledGPC', Pipeline([('Scaler', StandardScaler()),('GPC', GaussianProcessClassifier(1.0 * RBF(1.0)))])))	1	1
accuracy['majority_voting_all_models']	1	1
"dftest.loc[:,[""Parch"", ""SibSp"", ""Survived""]]"	1	1
train.loc[(np.isnan(train['Age'])) & (train['Title'] == row['Title']), 'Age'] = np.random.randint(row['Low'], row['High'], size = count_nan_train)	1	1
"tot.Embarked.fillna(""S"",inplace  =True)"	1	1
df_submission['ticket_length'] = df_submission['ticket'].map(len)	1	1
row['Sex'] == 'male' and row['Pclass'] == 2:	1	1
pid.to_csv('submission.csv',index=False)	1	1
"df[""Child""] = df[""Age""] < 12"	1	1
df.iloc[:10 :1]	1	1
ship.drop(['Pclass'],axis=1,inplace=True)	1	1
df['Female'] = (df['Sex']=='female').astype(int)	1	1
alg[1].fit(df_train_x,df_train_y)	1	1
df_train['CabinEncoded'] = le_cabin.transform(df_train['Cabin'])	1	1
X['Embarked'].fillna('S')	1	1
Xval.shape[0]	1	1
X_test['Age'] = imr.fit_transform(X_test[['Age']].values)	1	1
"train[[""Survived"", ""Embarked""]].groupby([""Embarked""]).mean()"	1	1
df_titanic['Age'].isnull()	1	1
res_df_solver_C['Val_acc_'+solver_list[i]] ,	1	1
titanic_df['Survived'].mean()	1	1
data['Initial'] =  0	1	1
"train[""Title""]=train.Title.map(title_map)"	1	1
combined_df['deck'] = combined_df['Cabin'].str.extract('([a-zA-Z])', expand=False)	1	1
titanic_df.drop(['Sex'],axis=1)	1	1
kaggle['Age'].isnull()	1	1
df.drop(['Fare'],axis=1)	1	1
test.drop(drop_column, axis = 1, inplace = True)	1	1
survivors['Pclass'].value_counts().sort_index()	1	1
features.loc[features.Age.notnull()]	1	1
"test[""Age""][i]=age_title_map[test[""Title""][i]]"	1	1
"train_df[['Parch', 'Survived']].groupby([""Parch""], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
df_submission['family_size'] = df_submission['parch'] + df_submission['sibsp'] + 1	1	1
test_data[['PassengerId','Name','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
ax4.hist(train_data['Parch'], bins = 20, alpha = .50,edgecolor= 'black',color ='teal')	1	1
"X_test[""FamilySize""] = X_test[""RelativesCount""].add(1).map(map_family_size)"	1	1
test_y.iloc[:,1].values	1	1
test['Age'] = test['Age'].fillna(np.median(test[test['Age'].notnull()]['Age']))	1	1
"data.Age.astype(int)"""""""	1	1
bin_labels.append(bins_string)	1	1
test.loc[((test['Colonel']==1)),'MilitaryTitle'] = 1	1	1
test['Pclass'] = test['Pclass'].fillna(most_occuring_Pclass)	1	1
df['IsAlone'].loc[df['FSize'] > 1] = 0	1	1
train_raw.head(20)	1	1
hist.sum()	1	1
test['Prefix']=test.Name.str.replace('(.*, )|(\\..*)', '')	1	1
"test[""Age""][(test[""Age""] > 32) & (test[""Age""] <= 48) ] = 2"	1	1
df.drop(['Embarked','Pclass','Sex'], axis=1, inplace=True)	1	1
col_ind.append(data.columns.get_loc(i))	1	1
"test[""Age""] = test[""Age""].fillna(test[""Age""].median()) #Fillna fills columns with N/A numbers. Here we use the median values"	1	1
X_prob0.astype(float)	1	1
each_fold_test_records.mean(axis=0)	1	1
k_scores.append(cross_val_score(clf,X_train, y_train,cv=5).mean())	1	1
dataset['Age'] = dataset[['Age', 'Pclass']].apply(fill_na, axis=1)	1	1
"train6[""Survived""]"	1	1
"data[""Age""].notnull()"	1	1
y_pred.to_csv('titanic_pred_logistic.csv',index=False)	1	1
test['Ticket_Cat'] = np.where(test['Ticket_Cat'] == 'NAN', np.nan, test['Ticket_Cat'])	1	1
"test[""Embarked_S""] = False"	1	1
X.drop(['SibSp', 'Parch'], axis=1, inplace=True)	1	1
test_df['Age'].hist(bins = 18, color = 'salmon')	1	1
evtest['accuracy'],	1	1
train.loc[(train['Pclass'] == 2) & (train['isAlone'] == 0), 'class_alone'] = 2 #together Pclass 2	1	1
df.select_dtypes(['object']).columns	1	1
test.drop(['Embarked_S','title_rare'], inplace = True, axis = 1)	1	1
X.rename(self.name)	1	1
dataset.loc[(dataset['Fsize'] >=3) & (dataset['Fsize'] <=4), 'Fsize'] = 2	1	1
tit_df_test.describe()	1	1
data['Fare'].plot.hist()	1	1
test['Sex']=test['Sex'].apply(lambda y: x[y])	1	1
df['Pclass'] = df['Pclass'].astype(str)	1	1
"test.dropna()[[""Pclass"",""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Sex"", ""Embarked"", ""NameLength"", ""HasCabin"", ""FamilySize"", ""Title""]]"	1	1
train_df.sample(frac=0.70)	1	1
imp.transform(testset.iloc[:, 7:8])	1	1
test.loc[test['Cabin'].isnull(), 'hasCabin1'] = 0	1	1
df_predict.head(20)	1	1
dataset['Age'].hist()   # histogram	1	1
test_df2.drop(['Age','Fare'],axis=1,inplace=True)	1	1
X.loc[name.index] = value_imp(name)	1	1
dset['Category'] = np.where(dset['Age'] == 1, 'Child', np.where(dset['Sex'] == 1, 'Woman', 'Man'))	1	1
"df.join(pd.get_dummies(df[""Embarked""]))"	1	1
train['SortAge'] = pd.qcut(train['Age'], n)	1	1
df['Name'].str.contains('Miss\.')	1	1
pd.isnull(embarked):	1	1
titanic.boxplot('Fare',by='Pclass',figsize=(10,5))	1	1
data1.set_value(index, 'Random_Predict',1)	1	1
full_bins.drop(columns=['Titles_mapped', 'Cabin_Letter','Fare_adjusted', 'Age', 'Embarked', 'AgeBin', 'FareBin'] )	1	1
data['Cabin'] = data['Cabin'].fillna('Undefined')	1	1
dataset.iloc[:, [2,4,5,6,7,11]].values	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Sir"", ""Mr"")"	1	1
"models.append((""RidgeClassifierCV"",  RidgeClassifierCV))"	1	1
model.add(Dense(88, activation='relu'))	1	1
"titanic_df[""Fare""] = titanic_df['Fare'].astype(int)"	1	1
train_df['Embarked'] = train_df['Embarked'].fillna(train_df.mode(axis=0)['Embarked'].iloc[0])	1	1
train_X['Fare'].fillna(train_X['Fare'].median(), inplace=True)	1	1
train_dataset['Title'] = train_dataset['Title'].replace('Mlle','Miss')	1	1
train1['Survived'].astype('category')	1	1
train_df0['Age']	1	1
full_data.iloc[891:]	1	1
fulldata.loc[fulldata['source']=='train']	1	1
"te.drop(""PassengerId"", axis=1).copy()"	1	1
titanicTest_X.info()	1	1
train['Embarked'] = train['Embarked'].apply(lambda x: replacement.get(x))	1	1
Parch.plot.hist(alpha=0.5,color='red',bins=50)	1	1
test_num.as_matrix()	1	1
submit.loc[:, 'Survived'] = rf_results	1	1
data.Ticket_numerical.quantile(0.25) - (IQR * 3)	1	1
data_copy['Pclass']=(data_copy['Pclass']-data_copy['Pclass'].mean())/data_copy['Pclass'].std()	1	1
models.append('SVC')	1	1
full_set['Name'] = full_set.apply(lambda row: get_title(row['Name']), axis=1)	1	1
train[['Survived','Fare']].groupby('Fare').mean().sort_values('Survived',ascending=False).plot.bar()	1	1
train_title_vw.head()	1	1
"knn_submission3.to_csv(""knn_predictions_or_TGS.csv"", index=False)"	1	1
test['Age'] = test['Age'].apply(lambda x: 1 if x <= 15 else 2 if x <= 30 else 3)	1	1
df['Survived'].hist()	1	1
data.parents.loc[data.PassengerId==154] = 0	1	1
one_hot_encoded_training_predictors.isnull().sum()	1	1
test_df['Age'].dropna().astype(int)	1	1
data.drop('Name' , axis = 1)	1	1
imr.transform(df.values[:, 1:])	1	1
test_df['Honorific'] = test_df['Name'].map(lambda x: x.split(',')[1].split('.')[0].strip())	1	1
dataset.drop(drop_column, axis=1, inplace=True)	1	1
train.Survived.values[0]	1	1
"train[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).agg(['mean', 'count'])"	1	1
dataset.loc[(dataset['Age'] > 60) & (dataset['Age'] <= 70), 'Age'] = 6	1	1
acc.append(pd.DataFrame({'Model': 'Decision Tree - Information Entropy', 'Accuracy': [accuracy_score(y_true, y_pred)]}))	1	1
"result.to_csv('survival_submission_v1.csv',header=[""PassengerId"",""Survived""],index=False)"	1	1
x_train_stacked.shape	1	1
df_train.groupby('Sex').count()	1	1
axs[0].hist(age_non_na.tolist())	1	1
np.where(pred_probs >= (threshold/100))	1	1
test_csv.loc[test_csv.Fare.isnull(), 'Fare'] = Pclass3_average_fare	1	1
df.join(dum).drop([col], axis=1)	1	1
"train[""Age""] = [ages[x] for x in train.Pclass]"	1	1
df['CLASS'][0:200].plot(title='CLASS',style='.')	1	1
err_df.reset_index(inplace=True)	1	1
plt.hist(ageHasParch)	1	1
"train[[""Survived"", ""Age"", ""Parch""]].groupby(by=feat).mean().reset_index()"	1	1
df_train.drop(['Pclass'], axis=1)	1	1
train_Predict.tail()	1	1
data_df['Surname'] = data_df['Name'].str.extract(r'([A-Za-z]+),', expand=False)	1	1
test_df.loc[test_df['Fare']<=7,'Fare_new']=0	1	1
raw_test.iterrows():	1	1
data['Pclass'].value_counts().plot(kind='bar', ax=ax[0]);	1	1
dataset.drop('Cabin', inplace=True, axis=1)	1	1
df2['SibSp'][p] == 0 and df2['Parch'][p] == 0:	1	1
testSet.iloc[:,11:12]	1	1
"row[""Pclass""] == 3:"	1	1
dataset.loc[ dataset['Fare'] <= 10.5, 'Fare'] = 0	1	1
"model_data.loc[model_data.Ticket.notnull(),'Ticket_clf'] = model_data.loc[model_data.Ticket.notnull(),'Ticket'].map(lambda ticket: ticket[0:2] if re.match(""PC"",ticket) else ticket[0])"	1	1
test['Parch'] = test.apply(lambda row: row['Parch'] > 0, axis=1)	1	1
"df_test[""Fare_cat""] = pd.cut(df_test.Fare, quant, labels=label_quants)"	1	1
test_Age.values[:, 1::]	1	1
"i.loc[i[""Title""] == ""the"",[""Title""]] = ""Other"""	1	1
"titanic_test[""Family""].loc[titanic_test[""Family""] > 0] = 1"	1	1
in ['Don', 'Dona', 'Lady', 'the Countess', 'Sir', 'Jonkheer']:	1	1
data.loc[data['Fare'] <= 7.91, 'Fare'] = 0	1	1
data['Pclass'].value_counts().plot.bar(color=['#884EA0','#16A085','#717D7E'],ax=ax[0])	1	1
"model.add(Dense(2, activation=""sigmoid""))"	1	1
dataset.loc[(dataset['Fare'] > 7.84)   & (dataset['Fare'] <= 10.5), 'Fare'] = 1	1	1
test['Fare']=test['Fare'].fillna(Fare_med)	1	1
transformed_df['Title_Mrs'] = title.Title_Mrs	1	1
ship.drop(['Age'],axis=1,inplace=True)	1	1
"titanic_df[""Cabin""].isnull().sum()"	1	1
df_test[['PassengerId', 'Survived']].to_csv('dec_tree_feat_eng.csv', index=False)	1	1
"ticket_table[""Ticket_id""]= pd.Categorical(ticket_table.index).codes"	1	1
"_df.loc[_df.fare >260, ""fare""] = 260"	1	1
submission.to_csv('submission_super.csv', index = False)	1	1
"plt.hist(df_train[""Pclass""],bins = [0.5,1.5,2.5,3.5], log = False, alpha = 0.3, label = ""all_passenger"")"	1	1
valid_X['Age'].fillna(valid_X['Age'].median(), inplace = True)	1	1
df_all['Embarked']=df_all['Embarked'].fillna(emb_mode)	1	1
train2[['Age', 'Sex', 'Fare','Parch','Pclass','SibSp','Embarked']]	1	1
test.drop(['Name','Ticket','Cabin'], axis=1)	1	1
"train[[""FamilySize"", ""FamilyType""]].head()"	1	1
sc_X.transform(test_X)	1	1
predict_combine.astype('int')	1	1
DataSetTrain.groupby(['Survived'])['Fare'].sum().nlargest(15)	1	1
tmp_scaled.copy().drop('Age', axis = 1).values	1	1
training_data.drop(labels='Name', axis=1, inplace=True)	1	1
train['Embarked']=train.Embarked.fillna('S')	1	1
submission.to_csv('fisrt_submission.csv', index=False)	1	1
df.drop(column, axis=1)	1	1
"train_ori.loc[train_ori[""Title""] == ""Mr"",""Age""] = train_ori.loc[train_ori[""Title""] == ""Mr"",""Age""].fillna(mrage)"	1	1
"X[[""Survived"", ""Embarked""]]"	1	1
regressor.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))	1	1
titanic_tobepredicted.describe()	1	1
"titanic_test[""Fare""] = titanic_test[""Fare""].astype(int)"	1	1
"train_df['Embarked'] = pd.Categorical(train_df['Embarked'],categories=[""C"",""Q"",""S""])"	1	1
estimators.append(('LDA', model2))	1	1
titanic_df['Age_filled'] = titanic_df['Age']	1	1
"test[""Embarked""].unique()"	1	1
data_all['Embarked_C'] = (data_all['Embarked']==2)+0	1	1
train_df.head() #First 5 value from to train_df	1	1
dataset['AgeBin']=pd.cut(dataset['Age'],5,labels=[1,2,3,4,5])	1	1
gm['Age'][0]	1	1
ax2[1].set_title('Feature Importance in XGBoost')	1	1
"dataset['isMrsTitle'] = dataset[""Title""].apply(lambda x: 0 if x != 'Mrs' else 1)"	1	1
test_data.drop(['PassengerId','Ticket'], axis=1)	1	1
row['Age'] <= 8 and row['Pclass'] == 2:	1	1
lgb_params['feature_fraction'] = 0.7	1	1
test.loc[test['Cabin'] != 'None', 'HasCabin'] = 1	1	1
test.loc[(test['Parch'] > 0) | (test['SibSp'] > 0), 'HasFamily'] = 1	1	1
train_clean['Age'] =  train_clean['Age'].fillna(train_clean['Age'].mean())	1	1
"train['Young_f'] = (train['Age']>=18) & (train['Age']<=40) & (train['Sex']==""female"")"	1	1
x['CP_Surv']=0	1	1
gs_metrics.iloc[1, 5]	1	1
train.Fare.plot.hist(bins=20,color='green',ax=ax[0,0])	1	1
ori_arr.set_value(nan_v, feature, imp_val)	1	1
dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 60), 'Age'] = 3	1	1
"data_test[""PassengerId""]"	1	1
temp['Sex'] = np.where(temp['Age'] <= 14.5, 'Child', np.where(temp['Sex'] == 'female', 'Woman', 'Man'))	1	1
"df.Name.apply(lambda name: re.findall(""\s\S+[.]\s"", name)[0].strip())"	1	1
train.loc[[69, 184]]	1	1
train.sample(10)#pick 10 random samples	1	1
ranks['Ridge'] = ranking(np.abs(ridge.coef_), colnames)	1	1
cost_g.append(np.sum(np.abs(a_g-y))/y.shape[0])	1	1
df.loc[(df['Fare'] > 14.454) & (df['Fare'] <= 31), 'Fare'] = 2	1	1
train_df.drop(['ticket', 'cabin'], axis=1)	1	1
in ['Capt', 'Col', 'Don', 'Jonkheer', 'Major', 'Rev', 'Sir']:	1	1
X_sub.drop(['Survived'], inplace =  True, axis = 1)	1	1
titanic_df.head(40)	1	1
df_test.drop('PassengerId',axis=1)	1	1
embarked['Embarked'] = full.Embarked.fillna('S')	1	1
combined_data.append(titanic_test_org)	1	1
ax[2].hist(train_data[train_data.Embarked == 'S'].Fare, bins=10)	1	1
test['c_mean'].max()	1	1
train.drop('Fare', axis=1)	1	1
test_df['Cabin'].isnull().sum() / len(test_df)	1	1
data.loc[(data.Age > 12) & (data.Age <= 26), 'AgeBand'] = 1	1	1
Z['Fare'].fillna(Z['Fare'].median(), inplace=True)	1	1
data['Age'].fillna(data.Age.mean(),inplace=True)	1	1
test_org.copy()	1	1
data['Ticket_Number'] = data.apply(lambda row: max(list(map(int, re.findall(r'\d+', row['Ticket'])))) , axis = 1)	1	1
"Pclass_t.append(Titanic_Master.Ticket.str.split("" "", n = 1)[i][1][0])"	1	1
data.parent_alone.loc[data.PassengerId==141] = 1	1	1
train_df.sort_values(by='Parch').describe(percentiles=[.75, .80])	1	1
dataset.loc[mask, 'InWcg'] = 1	1	1
dataset.loc[dataset['Sex'] == 'male', 'Sex'] = 0	1	1
train_df.drop(['Name_len_Class2','Name_len_Class'] , axis=1, inplace=True, errors='ignore')	1	1
frame.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin'],axis=1,inplace=True)	1	1
df['Title'] = df.Title.map(Title_Dictionary) # use the Title_Dictionary to map the titles	1	1
"X[[""Age"", ""Fare""]] = std_scale"	1	1
"data[""Age""] = pd.qcut(train[""Age""], q=5, labels=False)"	1	1
"df_train[""norm_len_name""].hist()"	1	1
res_acc.append(cross_val_score(xgbClass,X,y,scoring='accuracy',cv=10).mean()*100)	1	1
"X['Embarked']=X['Embarked'].fillna(""S"")"	1	1
all_data.Age.fillna(all_data.Age.median())	1	1
test_df.drop(['Name','Cabin','Ticket','Fare'],axis=1,inplace=True)	1	1
titanic_df.pivot_table(index=group, columns='Survived', values = 'Age', aggfunc='count')	1	1
raw_test['Male'] = bin_sex.transform(raw_test['Sex'])	1	1
data.loc[(data.Fare>8.1)&(data.Pclass==3), 'PassengerCat']=4	1	1
"train[""Embarked""] = train[""Embarked""].fillna(train[""Embarked""].mode()[0])"	1	1
reindex_titanic_train_dataframe.tail(num_validation)	1	1
"df.loc[df[""Sex""].notna(), ""Sex""] = LabelEncoder().fit_transform(df.loc[df[""Sex""].notna(), ""Sex""].astype('category'))"	1	1
dtest.drop(['Survived'],1),np.array(dtest['Survived'])	1	1
test[['Pclass','Sex','Age','Fare','SibSp','Parch','Embarked']].values	1	1
pdtest.to_csv('gptest.csv', index=False)	1	1
pdf.dropna().groupby(['Sex', 'Pclass'])[i].agg(lambda x:x.value_counts().index[0]) # group modes	1	1
kpca.transform(X_submission)	1	1
train['c_mean'] = pd.Series(train.mean(axis=1), index=train.index)	1	1
df['Status'] = df_raw['Name'].str.extract('(\w+)\.', expand=False)	1	1
"dataset[""title""] = dataset[""title""].astype(int)"	1	1
dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 4,	1	1
test.loc[(test['Age']<=12),'SexAge'] = 'children'	1	1
test_df.ix[:,0:8]	1	1
df.groupby(['Pclass']).Fare.median()	1	1
df_features.head()	1	1
train.head()['Name']	1	1
test_2.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'title', 'title_age'], axis=1, inplace=True)	1	1
train.drop('Age', inplace=True, axis=1)	1	1
data_train_input.loc[data_train['Sex']=='child','Sex'] = 3  #child	1	1
"test.drop([""Others""], axis=1, inplace=True)"	1	1
param_df.sort_values(by=['abs_corr'], ascending=False)	1	1
data_train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean().sort_values(by='Title', ascending=True)	1	1
train['Sex'][train.Sex == 'male'] = 0	1	1
test.select_dtypes(include = [np.float, np.int])	1	1
"all[""Age""] = all[""Age""].astype(int)"	1	1
in ['C', 'P', 'S', '1']:	1	1
data['CabinLuxeryClass']=data.apply(cabinluxclass,axis=1)	1	1
train_df_bins.iloc[:, [0]]	1	1
df_dums['Parch_2p']=[1 if ele >= 2 else 0 for ele in df_dums['Parch']]	1	1
titanic.loc[titanic.Sex== 'female',:]	1	1
all_df['age_cat'] = (pd.cut(all_df['Age'], 30, labels = np.arange(1,31))).astype(int)	1	1
train_test.loc[(train_test.FamilySize==0),'Alone']=1	1	1
X['Survived'].min() - h, X['Survived'].max() + h	1	1
test_df.fillna(test_df.Fare.median(), inplace=True)	1	1
"os.path.join(INPUT_DIR, ""test.csv"")"	1	1
train_df['Age'].hist(bins=50)	1	1
pylab.rcParams['figure.figsize'] = 18,4	1	1
df_full['Ticket'] = df_full['Ticket'].apply(pd.to_numeric)	1	1
params['reg_alpha'] = grid.best_params_['reg_alpha']	1	1
test_csv.to_csv('submission_all_keras_nn_0.5.csv', index=False)	1	1
"train_df_dec.drop(columns={""RGroup"",""Survived""},inplace=True)"	1	1
Age.plot.hist(alpha=0.5,color='blue',bins=50)	1	1
"df[""Sex""][df[""Sex""]== ""female""] = 1"	1	1
dftrain.convert_objects(convert_numeric=True)	1	1
df_full.groupby(['LastName', 'FareOrig'])['Name'].count()	1	1
train_df['AgeCategorical'].value_counts()	1	1
df_test_features.replace(s,surname)	1	1
testdf.drop(['Name'], axis=1)	1	1
imputer_test.loc[(imputer_test['Pclass'] == 3) & (imputer_test['Age'].isnull()), 'Age'] = meanAgePclass3	1	1
"submission.to_csv(""sub5.csv"", index = None)"	1	1
train['Survived'].value_counts().reset_index().replace([0,1],['Dead','Survived'])	1	1
"df['Title'] = df['Name'].apply(lambda x: x.split("","")[1].split("" "")[1])"	1	1
train5['FamilySize'] = train5['SibSp'] + train5['Parch'] + 1	1	1
comb_data['Cabin'].value_counts().sort_values(ascending=False)	1	1
train_data_features['ParentsChildren'] = train_data_features['ParentsChildren'].apply(lambda x: 1 if x > 0 else 0)	1	1
dfcopy.Embarked.fillna(dfcopy.Embarked.mode()[0], inplace=True)	1	1
submission.to_csv('submissions_bag_last.csv', index=False)	1	1
df.duplicated(colName).sum()	1	1
df['Cabin'] = df['Cabin'].fillna('No')	1	1
df2['is_child'] = [1 if i <= 10 else 0 for i in df2.Age]	1	1
testdf.drop(['Ticket' , 'Cabin'] , axis = 1)	1	1
FinalResult.to_csv('gender_submission.csv', index=False)	1	1
NameVect.head()	1	1
dataset.drop('Ticket', axis=1)	1	1
test_data['Embarked'].fillna(test_data['Embarked'].value_counts().index[0], inplace=True)	1	1
"coeff_df.sort_values(""Correlation"", ascending=False)"	1	1
titanic_train.groupby('Age').count().PassengerId.plot()	1	1
dataset.loc[dataset['FamilySize']==1, 'isAlone'] = 1	1	1
data_df.groupby(['Name_Len'])['Survived'].mean()	1	1
df.Age.notnull()	1	1
pp.hist(fare_3, bins, normed=1, facecolor='green', alpha=0.5)	1	1
testEmbarkedPercentage['embarkedPercentage'] = (testEmbarkedPercentage['isSurvived'] / totalTestData)*100	1	1
dataset['Embarked'] = dataset['Embarked'].map({'S': 0, 'C': 1, 'Q':2})	1	1
df_is.plot.hist(ax=ax, alpha=.3, legend=False, sharex=True, color=colors[i_s], bins=20)	1	1
"sol.to_csv(""forest.csv"", index=None)"	1	1
full_data['FareCat'][train['Survived']==1].value_counts().sort_index()	1	1
dataset.loc[ dataset['Fare'] <= 9.5, 'Fare'] = 0	1	1
train.groupby(age_range).mean()	1	1
data.boxplot(column='Age', vert=False)	1	1
submission.to_csv('out.csv', index = False)	1	1
test_dataset.count()	1	1
train_data['Parch'].isnull().sum()	1	1
"df_train.groupby([""title""])[""Survived""].sum()/df_train.groupby([""title""])[""PassengerId""].count()"	1	1
df.loc[~df['Cabin'].isnull(), 'Cabin'] = 1	1	1
data.pop('Survived')	1	1
model.add(Dense(60, input_dim=number_of_features, activation='relu'))	1	1
dt_test['Fare'].fillna(dt['Fare'].mean(skipna=True), inplace=True)	1	1
row[8] >= j*fare_bracket_size and row [8] < (j+1)*fare_bracket_size:	1	1
all_data['Fare'] = all_data['Fare'].fillna(5).astype(int)	1	1
"resultDf.drop(""total"")"	1	1
"train[""Age""][train[""Age""] <= 16 ] = 0"	1	1
"test[""Single""] = False"	1	1
"ax[1].set_title(""True Survival"")"	1	1
"embarked['Cherbourg'] = embarked[""Embarked""].str.contains(""C"").astype(int)"	1	1
"newDF.groupby(""isChild"")[""Pclass""].value_counts()[1].plot.pie(autopct=""%.2f%%"")"	1	1
test_df['Fare'] = test_df['Fare'].dropna()	1	1
data.drop(['SibSp', 'Parch', 'FamilySize'], axis=1, inplace=True)	1	1
df_dums['Class_3']=[1 if ele == 3 else 0 for ele in df_dums['Pclass']]	1	1
df.apply(lambda x: x.count())	1	1
base_predictions.corr()	1	1
df_train['GenderId'], gender_desc = pd.factorize(df_train['Sex'])	1	1
df_data['FareBin_Code'] = label.fit_transform(df_data['FareBin'])	1	1
curated_data.drop(['Cabin'], axis=1)	1	1
df['Age'][idx] = -0.5	1	1
df_test.insert(1, 'Survived', np.nan) #  Add a 'Survived' column with all values set to NaN	1	1
test_data[['PassengerId','Survived']]	1	1
data[['FamilySizeBand', 'Survived']].groupby(['FamilySizeBand']).agg(['count','mean'])	1	1
curated_data.head(15)	1	1
np.mean(out)	1	1
"test[""Cabin""][test[""Cabin""] == ""G""] = 6"	1	1
titanic_df['Pclass'] = titanic_df.Pclass.astype('category')	1	1
dataset['Title_Royal'] = dataset['Title'].map(lambda s: 1 if  s == 5  else 0)	1	1
fig['layout']['yaxis2'].update(range=[0, 1], title='% Survived')	1	1
valid_soft_pred_matrix.head()	1	1
features.groupby(['Sex','Pclass','Title'])	1	1
lstScore.append([strAlg,accuracy_score(y_test, y_pred)])	1	1
"df_test.groupby([""title""])[""PassengerId""].count()"	1	1
"data_train[""Desk""] = data_train[""Cabin""].str.extract(""([A-Za-z]+)"",expand=True)"	1	1
ax[0].set_title('Number of Passengers by Pclass')	1	1
"related_people.loc[related_people[""PassengerId""]==1130,""RGroup""]=""Hamalainen_M"""	1	1
"df.T[""DecisionTreeClassifier""]+df.T[""RandomForestClassifier""]+df.T[""GradientBoostingClassifier""]"	1	1
"train[""Embarked""].head()"	1	1
Train_data.head()	1	1
"dataset['EmbarkedS'] = dataset[""Embarked""].apply(lambda x: 0 if x != 'S' else 1)"	1	1
corrmat.nlargest(12,'Survived')['Survived'].index	1	1
age1[ '26to40' ]  = age1[ 'AgeGroup' ].map( lambda r : 1 if 26 <= r <= 40 else 0 )	1	1
submission_data['predict'] = submission_data.apply(lambda row: classifyPassenger(row,['Sex','Age_band'],probDict,p0,p1),axis=1)	1	1
train_data.groupby('Sex').agg('count')['Age'].plot.pie(title='Gender', ax=axs[1, 0])	1	1
titanicAll.groupby(['FamilySize','Survived']).size()	1	1
df_test.drop(labels, 1)     .drop('Cabin', 1)     .drop('Ticket', 1)     .drop('NameLen', 1)     .drop('Name', 1)     .drop('PassengerId', 1)	1	1
"train[""Ticket""] = le.fit_transform(train[""Ticket""].fillna('0'))"	1	1
combine_df.head(2)	1	1
plt.hist(normalize_age(df), bins=4)	1	1
testset.Sex.astype('category')	1	1
"plt.hist(df_train[""Age""],log = True, alpha = 0.3, label = ""all_passenger"")"	1	1
data.loc[data.Embarked=='NA', 'Embarked'] = data[(data.Cabin.str.match('B2')>0) & (data.Pclass==1)].Embarked.mode()[0]	1	1
data.Embarked.dropna()	1	1
"tt[""AgeGroup""]=pd.cut(tt[""Age""],range(0,90,15)) # Category Age by groups, especially for child group with age lower than 12"	1	1
df_full.drop(['Cabin', 'Ticket'], axis=1, inplace=True)	1	1
data_train_all['Title']= data_train_all.Name.apply(lambda a:re.search(' ([A-Z][a-z]+)\.',a).group(1))	1	1
sns.boxplot(data=train,y='no_char',x='Survived',ax=ax2)	1	1
nullData.drop('Survived',1)	1	1
sb.boxplot(x='Pclass',y='Age',data=titanic_data)	1	1
data['Man'] = (data['Man']).fillna(0)	1	1
df.loc[:,'Ticket Number'] = df['Ticket Number'].apply(tick_num_class)	1	1
"df.drop(labels=[""Parch"",""SibSp"",""Fsize""], axis=1, inplace=True)"	1	1
axes[0].set_yticks(range(0, 500, 50))	1	1
"data[""Age_cohort""][(data[""Age""]>=0)&(data[""Age""]<=2)]=0"	1	1
train_data['Cabin'].isnull().sum()	1	1
data['Title'] = data['Title'].replace(['Mlle', 'Mme','Lady', 'Countess', 'Dona'], 'Mrs')	1	1
family_regroup.loc[idx, 'Family_size'] == 1: #for passengers traveling alone	1	1
combined['Title'] = combined['Title'].replace('Mme', 'Mrs')	1	1
train['c_mean'].max()	1	1
drop_elementsONS.append('Embarked')	1	1
submission.to_csv('submission_{}.csv'.format(mname), index=False)	1	1
"dat.loc[(dat[""SibSp""]==0) & (dat[""Parch""] ==0), ""isAlone""] = 1"	1	1
dataset_df['FamilySizeBins_3'] = pd.cut(dataset_df['FamilySize'], bins=bins, labels=False)	1	1
best_model.named_steps['reduce_dim']	1	1
X_train_filled[['Age', 'Sex_female', 'Pclass', 'Fare']]	1	1
train_ds.loc[22:29, ['PassengerId', 'Name', 'Age']]	1	1
"data_test[""PassengerId""].values,"	1	1
all_data['Deck']=all_data['Cabin'].str.get(0)	1	1
"test[""Age""].fillna(test.groupby(""Title"")[""Age""].transform(""median""),inplace = True)"	1	1
Train_Master.info()	1	1
df.drop(['Name','Ticket'], axis=1, inplace=True)	1	1
"train[[""Pclass"", ""Sex"",""Survived""]].groupby([""Pclass"", ""Sex""]).mean()"	1	1
titanicTest['PassengerId'].values	1	1
train.loc[train['Cabin'].str.len() == 11.0, 'CabinN3'] = train['Cabin'].astype(str).str[-2:]	1	1
all_data.at[i,'Title']= 'Miss'	1	1
df_train.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'])	1	1
subset['Age'], hist = False, kde = True,	1	1
titanic_df.groupby(['Pclass', 'Sex']).mean()	1	1
test_ToPred['Fare'].fillna(titanic_df['Fare'].mean(), inplace=True)	1	1
titanic_train.drop('Cabin', axis=1)	1	1
sub[['PCLASS', 'AGE', 'SIBSP', 'PARCH', 'EMBARKED', 'SEX']].values	1	1
test['standard_fare'] = test['Fare'].apply(lambda i: 1 if i <= 10.0 else 0)	1	1
"t[""Embarked""].hist(by=t[""Survived""], sharey=True, figsize=(16,8))"	1	1
"data_train['Has_Cabin'] = data_train[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
"train_data.drop([""Survived""], axis= 1)"	1	1
df['Accompanied_female_age_band'] = -1	1	1
who_am_i[0] != 'root':	1	1
traindf.fillna(traindf['Age'].mean())	1	1
stdScaler.transform(oneHot_test)	1	1
all['Title'] = all['Name'].map(lambda x: x.split(',')[1].split('.')[0].strip())	1	1
train[['Sex','Survived']].groupby('Sex',as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
data.loc[(data['Fare']>cat[1]) & (data['Fare']<=cat[2]),'Fare']=2	1	1
train.pivot_table(index='Pclass', columns='Embarked', values='Survived', aggfunc='mean').plot(kind='bar')	1	1
v.append(p['class_ids'][0])	1	1
titanic_test.drop(['Ticket'],1)	1	1
data_one.drop(['Survived'], axis=1)	1	1
df.Fare_log.skew()	1	1
data.combine_first(missuses)	1	1
dataset['Pclass'] = dataset['Pclass'].astype('category')	1	1
"data.loc[data[""Ticket""] == ticket, ""TicketCategory""] = 0"	1	1
titanic['Title'] = titanic['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())	1	1
df.loc[df['AgeGroup']>63, 'AgeGroup'] = 4	1	1
"test[""Title""], uniques = pd.factorize(test[""Title""])"	1	1
test['gender_class'] = 4	1	1
sns.boxplot(y='Age', x='Sex', ax=ax1, data=train_df, linewidth=1, saturation=5, palette=palette2)	1	1
df.loc[df['Age'] <=16, 'Age'] = 0	1	1
data.groupby('Parch')['Survived'].mean().plot(kind='bar')	1	1
X_train_dummies.drop('Sex_male', axis=1)	1	1
"train.loc[ind,""Title""] = ""rare"""	1	1
train_temp.drop(Outliers_to_drop,axis=0).reset_index(drop=True)	1	1
NotSurvivedFareData['Fare'].max()	1	1
"Test[""FamilySize""]=Test[""SibSp""]+Test[""Parch""]+1"	1	1
data['Fare'] = data['Fare'].fillna(data['Fare'].median()) # the test dataset has 1 null value.	1	1
train_df.drop('FareCategorical', 1, inplace=True)	1	1
dataset['Embarked'] = dataset['Embarked'].fillna(most_frequent)	1	1
"data.loc[data[""Ticket""] == ticket, ""TicketCategory""] = i"	1	1
test_df.Fare.fillna(7.925, inplace = True)	1	1
train.drop(493, axis=0)	1	1
titanic_test_data.Fare.fillna(0, inplace=True)	1	1
x_train_preprocessed['Person'] = x_train_preprocessed.apply(male_female_child, axis=1)	1	1
train.Embarked.isnull().value_counts()	1	1
data['Ticket_Code'] = clusters	1	1
df_all['_Fare'] = preprocessing.scale(df_all[['Fare']])[:,0]	1	1
df_full['Deck'] = df_full['Cabin'].apply(lambda x: 'N' if pd.isnull(x) else x[0])	1	1
"train[""Embarked""] = train.Embarked.astype('int')"	1	1
x['Fare'] = x['Fare'].fillna (x['Fare'].mean())	1	1
combined['Cabin_num1'] = combined['Cabin'].apply(lambda x: str(x).split(' ')[-1][1:])	1	1
data.loc[ (data['Fare'] > 31.00) & (data['Fare'] <= 100) , 'Fare'] = 3	1	1
input_data.loc[(input_data.Cabin.isnull()),'Cabin']=False	1	1
test.loc[test['Age'] < 14.0, 'ageCat'] = 1	1	1
data.pop('Ticket')	1	1
xText['dependent'] = np.add(xText.SibSp, xText.Parch)	1	1
test_df.drop(['PassengerId','Age','SibSp','Parch','Fare'], axis=1).copy()	1	1
df.loc[((df.IsAlone == 0) & (df.Pclass == 1)) , 'Cl_IA'] = 4 #rich with family	1	1
cabin_vectorizer.transform(raw_input.Cabin.values.astype('U'))	1	1
"train_df.groupby(""sibsp"")[""survived""].mean().plot()"	1	1
"train[""Age_Group""] = train.Age.apply(lambda x : 0 if x >= 0  and x < 10 else (1 if x >= 10 and x < 20 else (2 if x >= 20 and x < 30 else (3 if x >= 30 and x < 40 else (4 if x >= 40 and x < 50 else (5 if x >= 50 and x < 60 else 6))))))"	1	1
train_data.drop(['Name', 'SibSp', 'Parch'], axis=1)	1	1
test_df['Title'] = train_df['Title'].map(assign_title)	1	1
part_data.head()	1	1
Results.to_csv('submission.csv',sep=',',index=False)	1	1
df_train.groupby(['NameLenBin'])['Survived'].mean().to_frame()	1	1
ud.update({'mlle':'miss', 'ms':'miss', 'mme':'mrs'})# merge titles	1	1
title[0]	1	1
in ['Mrs', 'Miss']:	1	1
dataset['IsAlone'] = np.where(dataset['Familysize'] ==0 ,1,0)	1	1
final_csv['Fare'].quantile(.5),	1	1
"combined[""Title""].head()"	1	1
test_csv['Cabin'] = test_csv['Cabin'].fillna('C0')	1	1
data.loc[(data.Age.isnull()) & (data.Initial=='Mr'), 'Age'] = 33	1	1
raw_train['LogFare'].skew()	1	1
train.dropna().drop('Age', 1)	1	1
dftest.isnull().sum()	1	1
dataset.loc[ dataset['Age'] > 58, 'Age']	1	1
train_df.fillna(0)	1	1
df_test.drop(['Sex', 'Embarked'], axis=1)	1	1
train_df[['Name','Age']].isnull().any()	1	1
data_copy.loc[:,'Age']=data_copy['Age'].fillna(data_copy['Age'].median())	1	1
data_combined['Title'] = data_combined['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	1	1
not_recorded_cabin_letters.append(cabin)	1	1
train.groupby(['Survived','SibSp']).count()['PassengerId']	1	1
pclass['Samples'] = samples['Survived']	1	1
df['TicketNo'] = df['TicketNo'].fillna(df['TicketNo'].median())	1	1
raw_test['Fare'] = fare_imputer.transform(raw_test['Fare'].values.reshape(-1, 1))	1	1
full[['Survived', 'Name', 'Last_Name', 'Fare', 'Ticket', 'PassengerId', 'Age',]].groupby(['Last_Name', 'Fare']):	1	1
X.product(axis=1)	1	1
df['age_fill'] = df['Age']	1	1
"train_df.sort_values(""PassengerId"")"	1	1
"combined[""family_has_children""] = 0"	1	1
train['PaxclassA'] = train['Pclass']	1	1
df_train.drop('Sex', axis=1)	1	1
"train[""Cabin""] = train[""Cabin""].apply(cabintoint)"	1	1
data.loc[(data.Age.isnull())&(data.Title==2)&(data.Pclass==3), 'Age']=18	1	1
train.as_matrix(columns=target).flatten()	1	1
frame.drop(['Age','Fare'],axis=1,inplace=True)	1	1
data_sibsp.loc['female'].plot(kind='bar', color='orange', title='Female SibSp', ylim=[0, 1])	1	1
trainPCA2['4'] = trainPCA[:,3]	1	1
df.join(pd.get_dummies(df[column], prefix=column, sparse=True))	1	1
X_T[1] = list(map(lambda el: (el-mean_x)/max_x,X_T[1]))	1	1
df.loc[df['PassengerId'] == passID, 'FamilySurvival'] = 1	1	1
df.loc[df['PassengerId'] == passID, 'FamilySurvival'] = 0	1	1
model_results['XGBoost'] = np.mean(scores)	1	1
data.parent_alone.loc[data.PassengerId==1078] = 0	1	1
df['age_T'] = df.apply(lambda x: 5 if (x['Age'] >= 35 and x['age_T'] < 60) else x['age_T'], axis=1)	1	1
train['FemaleTitle'] = 0	1	1
"test[""Embarked_2""] = test[""Embarked""] == 'Q'"	1	1
train['Title'] = train['Name'].apply(lambda x: title_re.search(x).group(1))	1	1
"i[""SibSp""]"	1	1
df['lang_group'] = df['lang'].apply(lambda l: language_map[l] if l in language_map else 'other')	1	1
submission['Ticket_numerical'] = submission['Ticket_numerical'].astype('float')	1	1
df_comb['Title'] = df_comb['Title'].replace(['Capt','Col', 'Don', 'Major', 'Rev', 'Sir', 'Jonkheer'], 'Mr')	1	1
"dataset[""Sex""].replace([""male"", ""female""], [0, 1], inplace = True)"	1	1
rndfor_submission.to_csv('rnd-forest.csv', index=False)	1	1
data_scaler.transform(data.values)	1	1
data.select_dtypes(include=[np.number])	1	1
data.sons.loc[data.PassengerId==541] = 1	1	1
full.loc[(full.Age.isnull()) & (full.Titles_mapped == 'Mrs'), 'Age'] = get_Age_mean('Mrs', pclass)	1	1
combine.ix[(combine['Age'].isnull())&(combine['Pclass']==1)&(combine['Sex']=='male'),'Age'] = 42	1	1
data2.set_value(index, 'Random_Predict', 0) #predict died/0	1	1
"dataframe.loc[(dataframe[""Sex""] == ""female"") & (dataframe[""Age""] > age_threshold) & (dataframe[""Fare""] <= fare_threshold), crossed_feature] = 3"	1	1
full_data[['Age','Survived', 'Sex']].copy()	1	1
Cabin[0] == 'A':	1	1
"submit[""Survived""] = pred"	1	1
features_raw.dropna(axis=0, how='any')	1	1
models_accuracy_score.append((name, round(accuracy_score(y_train, predictions)* 100, 2)))	1	1
"train_data[""Fare""].hist(bins=50, figsize=(10,5))"	1	1
df_train['Embarked']=df_train['Embarked'].astype('category')	1	1
train_data['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)	1	1
data.drop(['Name'],axis=1)	1	1
"test_df[""Cabin""][missing_cabins] = ""Z0"""	1	1
ax[0].set_title('Embarkment Location Survival')	1	1
"pclass_dummies_titanic_test.drop([""Class_3""],axis=1,inplace=True)"	1	1
train.groupby('Embarked')['Survived'].mean()	1	1
test_first_model[['PassengerId', 'Survived']]	1	1
"df_scaled.rename(columns={""Pclass"": ""pclass_scl"", ""SibSp"": ""sibsp_scl"",                                       ""Parch"": ""parch_scl"", ""Fare"": ""fare_scl"",                                       ""age"": ""age_scl""})"	1	1
data.loc[(data['Fare']>cat[0]) & (data['Fare']<=cat[1]) ,'Fare']=1	1	1
data_train.loc[data_train['FamilyPresent']>0,'FamilyPresent'] = 1	1	1
"train_data[""Ticket""]"	1	1
df.drop([column_name],axis=1)	1	1
"df.drop([""Survived""], axis=1, inplace=True)"	1	1
dataset['Title'] = dataset['Name'].str.extract('([A-za-z]+)\.', expand=False)	1	1
test_df['Age'] = test_df[['Age', 'Pclass']].apply(impute_age, axis=1)	1	1
train_copy['Parch_Category'] = 4	1	1
features_long.set_value(idx2[ii], 'Age', mr.iloc[np.random.randint(len(mr))])	1	1
"test[[""Age"", ""Child""]].head(10)"	1	1
data.loc[ data['Age'] > 66, 'SortAge_1'] = 5	1	1
transformed.shape	1	1
X_valid['log_fare'] = X_valid.log_fare.apply(lambda x: (x - log_fare_mean) / log_fare_std)	1	1
dataframe.copy(deep = True)	1	1
x_test['Sex'] = x_test['Sex'].replace(['male','female'],[1,0])	1	1
data_combined['SmallFamily'] = data_combined['FamilySize'].map(lambda s: 1 if 2<=s<=4 else 0)	1	1
dataset.loc[(dataset['Age'] > 20) & (dataset['Age'] <= 40), 'Age'] = 2	1	1
input_data['Age'].fillna((input_data['Age'].mean()),inplace=True)	1	1
train[['Sex','Pclass', 'Cabin']][0:3]	1	1
all_df.drop(['Cabin'],axis=1,inplace=True)	1	1
"test.drop([""Cabin"", ""Name"", ""Ticket""], axis=1, inplace=True)"	1	1
data.sons.loc[data.PassengerId==378] = 1	1	1
df_test['Title'] = df_test.Title.map(Title_Dictionary)	1	1
y_pred_submission.to_csv('forest_submission.csv', index=False)	1	1
"data.loc[data[""Age""] <= 16, 'Age'] = 0"	1	1
col_null_ct.sum() > 0:	1	1
age0.std()	1	1
dataset['age_level'] = pd.cut(dataset.Age, bins=[0, 18, 60, 100], labels=[3, 2, 1])	1	1
conf_matrix_[0][1]+conf_matrix_[1][0]	1	1
"test.drop(""PassengerId"", axis=1).copy().values"	1	1
"submission.to_csv(""titanic.csv"",index = False)"	1	1
combine.select_dtypes(include=['object']).columns	1	1
submission.to_csv('titanicsvm.csv', index=False)	1	1
"axes[1].set_title(""Age: Feature Distribution"")"	1	1
df_all.iloc[891:,:]	1	1
df_ticket['TicketGroup_include_surviving_men'] = df_ticket['TicketGroup_include_surviving_men'].astype(int)	1	1
df['F_High'] = df['Fare'].map(lambda s: 1 if 100 < s <= 200 else 0)	1	1
df[['Survived']].groupby([df['SibSp']]).mean().plot.bar()	1	1
data_df.groupby(['Age'])['Survived'].mean()	1	1
train.loc[(train['Jonkheer']==1) | (train['Don']==1),'RareTitle'] = 1	1	1
train.loc[train['Age'] > 60.0, 'ageCat'] = 6	1	1
submission.to_csv('submission2.csv', index=False)	1	1
y_pred_submission.info()	1	1
"train[""Sex""].replace([""male"", ""female""], [0, 1], inplace = True)"	1	1
df['IsAlone'] = df['IsAlone'].apply(int)	1	1
train_df.loc[test_index]	1	1
np.where(df[var].isnull(), 1, 0)	1	1
df_full['Group'] = df_full['Group'].map(set)	1	1
conf_mat[1][0]	1	1
X3['Sex'] = X3['Sex'].replace(to_replace=['male', 'female'], value=[0, 1])	1	1
train['hasAge'] = train['hasAge'].fillna(1)	1	1
validation_data.values	1	1
titanic_df.drop('Ticket', axis=1, inplace=True) # Reason is: its a direct correlation factor for survival	1	1
"test_file[[""Pclass"",""Age"",""Sex""]].values"	1	1
df['F_C3'] = df['Sex_female'] * df['Pclass_3']	1	1
ship['Title'].loc[ship['Title'] == 'Dona'] = 'Mrs'	1	1
cabins_for_classes.append([a.loc[a['Pclass']==2]['Cabin2'].value_counts()])	1	1
dft.iloc[:-1,:].iplot(kind='bar',title='Sex: Survived Vs Dead')	1	1
"train.loc[train[""Sex""] == ""male"", ""Sex_encode""] = 0"	1	1
fdf.drop(['Survived'],axis=1)	1	1
combined_df_imputed['FamilyMemberSurvived'] = [has_family_member_survived(row) for row in combined_df_imputed.iterrows()]	1	1
data_train_dummy2['Age_scaled'] = std_scaler.fit_transform(reshape_Age2, std_scaler_Age2)	1	1
Fare_range.append(fare_range)	1	1
data['Title'].replace(['Mme.', 'Mrs.'], 4, inplace=True)	1	1
data_train['Sex'].loc[data_train['Survived']==1].value_counts()	1	1
dataset['FamilyS'] = dataset['SibSp'] + dataset['Parch'] + 1	1	1
data['No_Parents'] = data['Parch'].map(lambda parch: int(parch == 0))	1	1
"x.drop(""Name"", axis=1)"	1	1
X_Train.shape,Y_Train.shape,X_Test.shape	1	1
titanic['Cabin_group'] = titanic['Cabin'].apply(lambda x: x[0])	1	1
data['Cabin_Code'] = cabin_label.fit_transform(data.Cabin.str.get(0).fillna('Z'))	1	1
train_df['Age_code'] = enc.fit_transform(train_df['Age_bins'])	1	1
stc.transform(test_data[i].values.reshape(-1,1))	1	1
test_ToPred.loc[test_ToPred.Salutation == 'Miss', 'Sex'] = 'miss'	1	1
"test_X.eval('IsFemale = (Sex == ""female"")', inplace=True)"	1	1
data_copy['Embarked'] = data_copy['Embarked'].fillna('S')# 从S上船的多	1	1
submission.to_csv('random_forest_submission.csv', index=False)	1	1
titanic_test_df['Title'] = le.fit_transform(titanic_test_df['Title'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Rare': 4}).astype(str))	1	1
"grouped[""count_of_sex""] = sex_corr.groupby(""Sex"")[""Survived""].aggregate({""count_of_sex"":""count""})"	1	1
combined_df.drop('embarked_Q', axis=1, inplace=True)	1	1
"dataset[""Age""] = titanic_df[""Age""].astype(int)   #convert from float to integer"	1	1
xx.assign(Shared_ticket = temp_series)	1	1
train_df_dummies.drop('Survived', axis=1)	1	1
full['_Sex'] = pd.Categorical(full.Sex).codes	1	1
log.sort_values('F1-Score')	1	1
dataset.loc[ dataset['Fare']<=17, 'Fare']=0,	1	1
title_cats.items():	1	1
df['famsurrate'] = np.where(df['title'].str.lower() == ' mr', 0, df['famsurrate'])	1	1
full.drop(['Parch', 'SibSp'], axis=1, inplace=True)	1	1
df_cabin.iloc[row]	1	1
"train_df[""Fareband""] = pd.qcut(train_df[""Fare""], 4)"	1	1
"x_train[""Age""] = x_train[""Age""].fillna(x_train[""Age""].mean())"	1	1
test['Age_Cat']=test['Age'].apply(young_kid)	1	1
train_test.Fare.mode()	1	1
all_data.drop(columns = ['Name'], inplace = True, axis = 1)	1	1
data.Parch.hist(bins=50)	1	1
dataset['HasCabin'] = dataset['Cabin'].apply(lambda x: 1 if x == 'X' else 0)	1	1
row['FamilySize'] == 1:	1	1
test_set['Title'] = test_set['Name'].str.extract('(\w+(?=\.))', expand=False)	1	1
titanic_train['Age_Youth']=((titanic_train['Age']>18)&(titanic_train['Age']<=35)).astype(int)	1	1
test['Fare'].fillna(test.groupby('Pclass')['Fare'].transform('median'))	1	1
SibSp.plot.hist(alpha=0.5,color='blue',bins=50)	1	1
test.at[i, 'Sex'] = 1	1	1
tr['Title'] =tr['Title'].replace('Dr',4)	1	1
pred.astype(np.int)	1	1
combined_df['Fare'].describe()	1	1
comb['Sex'] = comb.Sex.map(lambda x: 1 if x =='male' else 0)	1	1
train.groupby('Embarked').count()	1	1
models['set1']	1	1
"knn_submit.to_csv(""knn.csv"", index=False)  # Kaggle: 0.75120"	1	1
data.loc[(data.passenger_fare<7.225) & (data.passenger_fare>=6.237) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Letter'] =  data[(data.passenger_fare<7.225) & (data.passenger_fare>=6.237) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
"df['Embarked'] = df[""Embarked""].fillna(""S"")"	1	1
combined['Cabin_num1'].replace('an', np.NaN, inplace = True)	1	1
full_models['set3']['num_attrs'] = ['Fare', 'Age', 'Family_total']	1	1
data.Age.loc[(data.Age<0) & (data.sons==1) & (data.Personal_Titles=='Kid')] =    data.Age[(data.Age>=0) & (data.Personal_Titles=='Kid')].median()	1	1
df[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
res.sum()	1	1
dataset.Deck.fillna(-1, inplace=True)	1	1
ages_probabilities['Probability'].values.tolist()	1	1
dataset['IsAlone'].loc[dataset['FamilySize'] > 1] = 0 #the rest are 0	1	1
test_p['Age_new']=test_p['Age_new'].astype(int)	1	1
"df.loc[(df[""Age""] > 64.084) & (df[""Age""] <=80.0), ""Age""] = 4"	1	1
test_data.drop('Ticket', axis = 1)	1	1
"a.loc[(a[""Fare""] > 31.0), ""Fare""] = 3"	1	1
df['Adult'] = np.where(df['Age']>=15, 1, 0)	1	1
testData.loc[testData['Age']<=16,'Age_band']=0	1	1
tt.drop(['Survived'], axis = 1)	1	1
"test_data['TravelBuds']=test_data[""SibSp""]+test_data[""Parch""]"	1	1
"tot.Embarked.replace({""S"": 0, ""Q"":1, ""C"":2})"	1	1
train['Sex']=train['Sex'].map({'female':0,'male':1}).astype(int)	1	1
np.shape(Y_NumPy_Mat)	1	1
data_full['IsFemale'] = 1	1	1
data['Cabin_Prefix'] = data.Cabin.str.get(0).fillna('Z')	1	1
pd.DataFrame.from_dict(as_dict)	1	1
titanic[['Age', 'Fare']] = stdScaler.fit_transform(titanic[['Age', 'Fare']])	1	1
train_X.info()	1	1
"train[""eval_richwoman""] = [richwoman(passenger, train) for passenger in train.index]"	1	1
tr.loc[(tr['Age']>24)&(tr['Age']<=32), 'Age'] = 3	1	1
"titanic_train_dataframe[""IsAlone""] = np.where((titanic_train_dataframe[""SibSp""] + titanic_train_dataframe[""Parch""]) == 0,""yes"", ""no"")"	1	1
df['CabinFloor'] = cabin_floor_list	1	1
test_sub['Survived'] = pred	1	1
train['EmbarkedS'] = train['Embarked']	1	1
data['Age'] = age_slice	1	1
dft.Age.mean()	1	1
titanic_df['Sex'].replace(['female','male','master','miss'], [0,1,2,3],inplace=True)	1	1
df_test.drop('Pclass', axis=1)	1	1
test.drop(['Ticket','Cabin'],axis = 1,inplace = True)	1	1
master_df.shape	1	1
data_train.loc[data_train['Embarked'].isnull()].index	1	1
plt.boxplot(data1['Age'], showmeans=True, meanline=True)	1	1
dataset.loc[(dataset['Age'] > 64) & (dataset['Age'] <= 76), 'Age'] = 8	1	1
"df_train_X[[""Age"", ""Fare""]] = pd.DataFrame(scaler.transform(df_train[[""Age"", ""Fare""]]), columns = [""Age"", ""Fare""])"	1	1
survived_age_number.tail(4)#put values into a.	1	1
train.iloc[:,1] = sex_t	1	1
titanic_df['Ticket'].apply(get_number)	1	1
names.loc[(names['major'])==1,'major'] = 0	1	1
train_df.loc[train_df.Title == 'Mme', 'Title'] = 'Mrs'	1	1
output.to_csv('prediction-ann_0150.csv', index=False)	1	1
test.drop(['PassengerId', 'Name','Ticket'], axis=1, inplace=True)	1	1
pipeline.append(('scaler', scaler))	1	1
Test.drop('Ticket',axis=1)	1	1
comb['TNumeric'] = comb['Ticket'].apply(lambda x: int(x.split(' ')[-1])//1)	1	1
combine['Deck'] = combine.Cabin.str[0];	1	1
"data[""Embarked""] = data[""Embarked""].apply(embarked)"	1	1
train.head(25)	1	1
survived.to_csv('passengers_survived.csv', index=False)	1	1
data_test_all.Age.hist()	1	1
data_cpy['Title']=data_cpy.Title.map(Title_Dictionary)	1	1
train_new.head()	1	1
data['Title'] = data['Title'].replace(['Countless', 'Lady', 'Sir'], 'Royal')	1	1
df['Survived'].groupby(df['Parch']).value_counts().unstack()	1	1
"df_train.drop([""Survived""], axis=1)"	1	1
data['SexP']=data['Sex'].map({'male':1,'female':2})	1	1
"test.loc[test[""Embarked""] == 'Q', 'Embarked'] = 2"	1	1
train.loc[ train['Family'] > 3, 'Family'] = 2	1	1
preds_csv.assign(Survived=preds_final)	1	1
all_data['Cabin'] = all_data['Cabin'].fillna('Unknown')	1	1
df['PassengerId'].nunique()	1	1
data['Cabin'].isnull().value_counts()	1	1
train_data['Cabin'] = train_data['Cabin'].apply(lambda x: x[0])	1	1
"X_train.loc[(X_train['Age'].isnull()), ""Age""] = Age_predictions_train"	1	1
"X_test.drop(""Cabin"", axis=1, inplace=True)"	1	1
"submit[""PassengerId""] = imageid"	1	1
train.drop(columns=['PassengerId','Cabin','Name','Ticket'],inplace=True)	1	1
"train[""Survived""].iloc[k_train]"	1	1
orig_training_set.head(n=10)	1	1
train['Age'].replace({np.nan:0},inplace=True)	1	1
titanic_df.drop('Sex', axis=1, inplace= True)	1	1
X_train['Age'] = X_train['Age'].apply(str)	1	1
np.mean(data_1) - np.mean(data_2)	1	1
train_df['Cabin_Letter'].value_counts()	1	1
test_df_clean['Title'] = test_df_clean['Title'].map(group_title)	1	1
train['Age'] = trainAge	1	1
"dataset_med.loc[2,1][""Age""]"	1	1
"test.loc[(test[""Pclass""].values == 2) & (test[""Age""].isnull()), ""Age""] = meanAge2"	1	1
train[['Age', 'Survived']].groupby(['Age'],as_index=False).mean()	1	1
df_test.iloc[:, 1:4].as_matrix()	1	1
dataset['A'] = np.where(dataset['CabinChar']=='A',1,0)	1	1
combined['MedF'] = combined['family_size'].map(lambda s: 1 if 3 <= s <= 4 else 0)	1	1
in ['accuracy', 'roc_auc', 'average_precision']:	1	1
"copyTest_df[""EmbarkedS""] = test_OneHotEncoded[:,0]"	1	1
data['Embarked'].replace('Q', 3, inplace=True)	1	1
titanic_full_train.head(10)	1	1
test_results.mean()	1	1
titanic_test.drop('Cabin', axis=1)	1	1
test_df.drop(['PassengerId','Ticket', 'Name', 'Cabin', 'SibSp','Parch' ], axis=1, inplace=True)	1	1
"test_data[""Fare""]:"	1	1
train['Title']=train['Name'].copy()	1	1
var_acc.append(var)	1	1
"factors[""t_titles""]=1"	1	1
"X_test[""Age""] = X_test[""Age""].astype(int)"	1	1
df.drop(['Pclass_2','Sex_male','Embarked_Q','Embarked_C','Age_bin_Children','Age_bin_Teenage','SibSp_bin_None','SibSp_bin_Small','SibSp_bin_Large','Parch_bin_Large','Title_Mr','Title_Rare','FamilySize_bin_Single'], axis=1,inplace=True)	1	1
titanic_submission_form_dataset.info()	1	1
train_df.drop(['Cabin','Ticket'],axis = 1)	1	1
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data=X_all);"	1	1
missing_val.reset_index()	1	1
test_df['Title'] = test_df['Title'].apply(generalizingTitle)	1	1
test.loc[test['Fare']<=7.91,'NFare']=0	1	1
train_plus_testna.loc[:, Xcol + ['Age']]	1	1
"X_test[""FamilySize""].apply(lambda row: ""Single"" if row == 1 else (""Large"" if row < 5 else ""Extreme""))"	1	1
df['Ticket'] = df.Ticket.map(lambda x: re.sub(r'\W+', '', x))   #Remove special characters	1	1
df['ticket_type'] = df['Ticket'].apply(ticket_type)	1	1
df['is_alone'] = df['family'].apply(lambda x: 1 if x == 0 else 0)	1	1
df_full['Age'].median()	1	1
test_df['Survived'] = predict_result.astype(int)	1	1
dataset.loc[ dataset['Age'] <= 8, 'Age'] = 0	1	1
df['SmallFamily'] = df['Family_size'].map(lambda s: 1 if 2 <= s <= 4 else 0)	1	1
train.loc[train['Sex']=='male']	1	1
df_train['title'] = titulos	1	1
combine['Young'] = (np.logical_or(combine.Age <=30, combine.Title.isin(['Master','Miss','Mlle'])))	1	1
titanic.loc[titanic['Embarked'].isnull(), 'Embarked'] = 'S'	1	1
tit_df_san['Embarked'].fillna(value=2.0,axis=0,inplace=True)	1	1
gbc_predictions['Survived'] = gbc_predictions['Survived'].apply(int)	1	1
test.isnull().sum().sort_values(ascending=False).head(10)	1	1
deck.head(5)	1	1
data_train.drop(['Ticket'], axis=1)	1	1
"train_data[""CabinLetterA""] = 0"	1	1
"in [""Pclass"", ""Sex"", ""Age_categories""]:"	1	1
df['Poor_Shouthampton_Old_Miss'] = 0	1	1
Each_Passenger.loc[(Each_Passenger['Age'] > 6) & (Each_Passenger['Age'] <= 13 ) | (Each_Passenger['Fare'] > 52) & (Each_Passenger['Fare'] <= 126) , 'Age'] = 2	1	1
data_test.drop(['Fare'], axis = 1)	1	1
train_data['WithFamily'] =train_data['SibSp'] + train_data['Parch']	1	1
test['fare_cat']=pd.qcut(test.Fare,3,labels=['f_a','f_b','f_c'])	1	1
raw_train['Parch'].value_counts()	1	1
data.loc[(data.Title == title) & data['Age'].isnull(), 'Age'] = median	1	1
WholeDataSet.isnull().sum(axis=0) # check the value in each column step 1	1	1
all_data['Sex'] = all_data['Sex'].map( {'female':0, 'male':1} ).astype(int)	1	1
all_df['Pclass'].value_counts()	1	1
train2_df['IsAlone'] = np.where(train2_df['FamilySize']==1, 1, 0)	1	1
fullfinal['Pclass'] = full.Pclass	1	1
result.to_csv(path_or_buf='naive_bayes_submittion.csv', index = False, header = True)	1	1
dataset.Embarked.fillna(0, inplace=True)	1	1
sns.boxplot(data=temp_data,x='features',y='value',hue='Survived')	1	1
"dataset[""Title""] = dataset.Name.str.extract(' ([A-Za-z]+)\.', expand=False)"	1	1
"train.drop([""SibSp"", ""Parch""], axis = 1)"	1	1
train_means[2]	1	1
train_data.drop(['Name', 'PassengerId'], axis=1)	1	1
train_df.drop(['passengerid', 'name'], axis=1)	1	1
"train_df[""NumberCabins""] = train_df[""Cabin""].apply(count_cabins)"	1	1
comb_data['DataType'] = np.where(comb_data[['Survived']].isnull().all(1), 'test', 'train')	1	1
in ['Miss','Mr', 'Mrs', 'Master', 'Dr', 'Ms']:	1	1
"tot[""FamSize""], tot[""Name""]"	1	1
dataset['Sex'] = dataset['Sex'].map({'male':0,'female':1})	1	1
train.loc[((train['Sex'] == 0) & (train['Pclass'] == 2)), 'gender_class'] = 2 #female Pclass 2	1	1
scores.append((round(np.mean(score), 3), cols[i]))	1	1
LearnResults[3],	1	1
train_data.groupby(['Sex', 'Survived'])['Survived'].count()	1	1
second_submission.to_csv('Second_Submission.csv', index = False)	1	1
df['Survived'].value_counts(dropna = False)	1	1
np.where((rounded_preds==1) & (rounded_preds==Y_valid))[0]	1	1
test['T4'] = np.array(test['Title'] == 'Mrs').astype(np.int32)	1	1
PClass.head()	1	1
"test.loc[test['Cabin'].isnull(),'IsCabin'] = 0  # Populate ""IsCabin"" with value '0' where ""Cabin"" is Null/NaN"	1	1
detc_cv.best_params_['max_depth'],	1	1
data.loc[(data.Age.isnull()) & (data.Title == 'Mr.'), 'Age'] = data.loc[data.Title == 'Mr.', 'Age'].median()	1	1
Xtrf_df['Deck'] = Xtrf_df['Deck']                          .replace(['A','B','C','D','E','F','G','T'],[1,2,3,4,5,6,7,8])	1	1
data['Alone'] = [1 if familysize == 1 else 0 for familysize in data['FamilySize']]	1	1
output.astype(int)	1	1
"df4.style.set_caption(""Male without immediate family"")"	1	1
dataset.loc[(dataset['Age'] > 52) & (dataset['Age'] <= 64), 'Age'] = 7	1	1
"train[""CabinN""] = train.apply(lambda row: cabin_id_mapping[row['Cabin']], axis=1)"	1	1
test['fare_std'] = fare_scaler.transform(test['Fare'].values.reshape(-1, 1))	1	1
trainData['Fare']=trainData.groupby(['Pclass','Sex'])['Fare'].transform(lambda x: x.fillna(x.median()))	1	1
test_df[['Title', 'Sex', 'Age']].groupby(['Title', 'Sex'], as_index=False).min()	1	1
X_scaled.tail(nsub)	1	1
i['Title'] = i['Title'].fillna(0)	1	1
X_train.iloc[train_index], X_train.iloc[test_index]	1	1
"data.loc[data[""Fare""].notnull() & data[""Age""].isnull(), ""Age""] = clf.predict(X_Age_n)"	1	1
df.groupby('Pclass')['Fare'].plot(kind='hist',alpha=0.5,legend=True,title='Pclass vs Fare')	1	1
train.loc[train['Cabin'].str.len() == 11.0, 'CabinL'] = train['Cabin'].astype(str).str[0]	1	1
data_train.drop(['PassengerId','Pclass','Name','Sex','Ticket','Cabin','Embarked'],axis=1, inplace=True)	1	1
"df[['Fare', 'Survived']].boxplot(by = ""Survived"")"	1	1
titanic_df['SharedCabin'].loc[ titanic_df['Cabin'].notnull() ] = 0	1	1
test['title']=pd.Categorical(test['title'], categories=title_lev)	1	1
DataSetTrain['Fare'].mean()	1	1
train_df['family_size'] = train_df['SibSp'] + train_df['Parch'] + 1	1	1
"train_df[[""S"", ""C"", ""Q""]].values"	1	1
imputed['Fare'] = full.Fare.fillna( full.Fare.median() )	1	1
test.loc[test['Embarked']=='S', 'Embarked'] = 0	1	1
arr['E'].append(row)	1	1
X_test_features[['Fare', 'Age']] = scaler.fit_transform(X_test_features[['Fare', 'Age']])	1	1
df_test['Group_Size'] = df_test.apply(lambda x: modify_group_size(x,ticket_numbers), axis=1)	1	1
ax[1].set_title('Percentage of survival per Embark')	1	1
test_dataset.drop(labels=['Cabin', 'PassengerId', 'Name', 'Ticket'], axis = 1)	1	1
test_df['Name'].value_counts().index.tolist()	1	1
test['Alone'] = 1	1	1
titanic.drop('Survived',inplace=False,axis=1)   # Predictors	1	1
"axs2[1].set_title(""People who survived"", fontsize=20)"	1	1
sib.mean()	1	1
"pd.pivot_table(train,index=[""Survived"", ""Pclass""], values=[ ""Unit""],aggfunc=np.sum)"	1	1
df.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'gender', 'embarked_fill', 'Age', 'age*class'], axis=1, inplace=False)	1	1
"test_df[""FamilySize""] = df[""SibSp""] + df[""Parch""] + 1"	1	1
"df_test[""Age""]"	1	1
full_dataset.loc[(full_dataset['Fare']>7.91)&(full_dataset['Fare']<=14.454),'Fare']=1	1	1
X_T[1].mean()	1	1
data['Ticket_categorical'] = np.where(data.Ticket_categorical.str.isdigit(), np.nan, data.Ticket_categorical )	1	1
titanic_train['SibSp_Y']=(titanic_train['SibSp']>=1).astype(int)	1	1
non_null_cabin_col.sample(n=1).values[0]	1	1
train_data['Sex'] = train_data['Sex'].map(gender).astype(int)	1	1
"train_df[[""Fare""]].groupby(lambda ind: 'NaN' if (pd.isnull (train_df['Cabin'].loc[ind])) else train_df['Cabin'].loc[ind][0]).mean()"	1	1
df2.drop(['Ticket','Fare','Embarked','Cabin','Name'] , axis=1)	1	1
train_df.drop(columns=('Tag'), inplace= True)	1	1
df_train['Cabin'].fillna('U',inplace=True)	1	1
"train7.drop([""Survived""], axis=1)"	1	1
sns.boxplot(y='Fare', x='Survived', data=data[data.Survived>=0], notch = True)	1	1
train_df['FareBin'] = pd.qcut(train_df['Fare'], 4)	1	1
correct_classified_df['Survived'] = labels_df[correct_X.index.isin(whole_index)]	1	1
plt.hist(data['Age'].loc[data['Survived'] == 0], color='r', label='Died')	1	1
x_train['Cabin'] = le.fit_transform(x_train['Cabin'])	1	1
data.surname_Beane.astype('category')	1	1
train['Age_group'] = 0	1	1
port.reset_index(drop=True,inplace=True)	1	1
"pclass[""Class1""] = (pclass[""Pclass""] == 1).astype(int)"	1	1
titanic.groupby('Sex').Survived.value_counts()	1	1
final_train['Fare']	1	1
dataset['Sex']=dataset['Sex'].map({'male':0,'female':1})	1	1
test_df1['SibSpBool'] = (test_df1['SibSp'].apply(lambda x: 1 if x>0 else 0))	1	1
submission.to_csv('submissions_xt.csv', index=False)	1	1
"train[""Age_5""] = (45 <= train[""Age""])&(train[""Age""]<60)"	1	1
grouped.loc[grouped.groupby('SX')['count'].idxmax()][['SX','Title_num']]	1	1
df.Fare.quantile(.25)	1	1
"df[""Cabin""].replace([""N"",""A"",""B"",""C"",""D"", ""E"", ""F"",""G"",""T""],[0,1,2,3,4,5,6,7,7], inplace=True)"	1	1
"dat.loc[dat[""Cabin""].str.count(""B"") > 0,""Cabin""] = 1"	1	1
"Accuracy[""votingClasssifier""] = accuracy"	1	1
df_train[['PassengerId', 'Name', 'Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Embarked']]	1	1
"related_people.loc[related_people[""PassengerId""]==252,""RGroup""]=""Strom_M"""	1	1
"sns.boxplot(y = ""Age"", x = ""Embarked"", hue = ""Pclass"", data = X_train)"	1	1
titanic['Age'] = titanic[['Age','Pclass']].apply(impute_age,axis=1)	1	1
np.where((training_set['Age'] > 20) & (training_set['Age'] <= 40), 1, 0)	1	1
data1['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)	1	1
data.Cabin.notna().astype('int')	1	1
robcon[['Model','Bias_acc','Variance_acc', 'Bias_f1','Variance_f1','Bias_auc','Variance_auc' ]]	1	1
tdf['relatives_survived'] = tdf.groupby('lastname', as_index=False)    .survived.transform('sum').subtract(full_df.survived.fillna(0), axis=0)	1	1
allset.drop(['Ticket'],axis=1)	1	1
df_train[['Embarked', 'Survived']].groupby(['Embarked']).mean()	1	1
combined.loc[0:890,'Data_set'] = 'Train'	1	1
train.shape[0],	1	1
train.groupby(['FamilyBin'])[['Survived']].mean()	1	1
sns.boxplot(x='Survived',y='Fare', data=train)	1	1
data.drop(columns=['Survived', 'PassengerId'])	1	1
le.transform(list(test_df[col].values))	1	1
train_df.NumFam.hist(ax=axes[0])	1	1
df.loc[(df['Fare'] >= 7.91) & (df['Fare'] < 14.454), 'Fare'] = 1	1	1
train.loc[index]	1	1
chart['Accuracy']= chart['Accuracy']*1000	1	1
first_class.loc[first_class['Survived'] == 0].shape[0], first_class.loc[first_class['Survived'] == 1].shape[0]	1	1
test_df.loc[ (test_df.Embarked.isnull()),'Embarked' ] = mode_embark	1	1
"df[""Age_categories""] = pd.cut(df[""Age""],cut_points,labels=label_names) # pd.cut function cut from the points we want"	1	1
train_df.groupby(['Ticket', 'Fare']).size().groupby('Ticket').size().sort_values(ascending=False).head()	1	1
"embarked_survive_transformed.groupby(""Survived"").apply(lambda column: column.sum()).transpose().drop([""Survived""])"	1	1
df_train.shape[0] * 100      #compute percentage of missing values	1	1
acc_val.append(ev_val[1])	1	1
tit_df_san.loc[i, 'Age'] = age_mapper.loc[tit_df_san.loc[i,'Sex']].loc[tit_df_san.loc[i,'Pclass']]	1	1
df.loc[df.FamilySize == df.FamilySize.max() , ['Age', 'Ticket', 'FamilySize', 'Survived']]	1	1
train.Parch.astype(str)	1	1
predictions_df['out'] = predictions_df['out'].map(lambda s: 1 if s >= 0.5 else 0)	1	1
test.get(['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked'])	1	1
train_data[['Pclass', 'Sex', 'Age_cat', 'SibSp', 'Parch', 'Fare','Embarked']]	1	1
combined_df['title_extracted'] = combined_df['Name'].str.extract('(\w+)\.', expand=False)	1	1
np.dot(layer_1,syn1) + b2 # BxH X Hx1 ~ Bx1	1	1
"pd.isnull(test[""Age""][i]):"	1	1
train_1.head()	1	1
A_train['Age']	1	1
data.Personal_Titles_Technical.astype('category')	1	1
X_train['Fare'] = imr1.fit_transform(X_train[['Fare']].values)	1	1
test['Has_Cabin']=test['Cabin'].apply(lambda x : 0 if type(x)==float else 1)	1	1
row['ticket']:	1	1
df[['Age','Survived','Embarked']][0:15]	1	1
submission['Fare'] = pd.cut(x = submission['Fare'], bins=bins, include_lowest=True)	1	1
sns.boxplot(x='Pclass',y='Age',data = train )	1	1
train_df.groupby(['Pclass'])['Survived'].mean()	1	1
"test_data[[""PassengerId"", ""Survived""]].to_csv(""data.csv"", index=False)"	1	1
data['Survived'].value_counts(normalize = True)	1	1
new_data.drop('Survived',axis=1)	1	1
i['Name_Title'] = i['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split('.')[0])	1	1
combine['FareEffBins'] = pd.cut(combine['Fare_eff'],[-1,0,5,8,10,15,20,30,40,50,60,70,80,90,100,110,130],labels=       ['0','0_5','5_8','8_10','10_15','15_20','20_30','30_40','40_50',        '50_60','60_70','70_80','80_90','90_100','100_110','110_130'])	1	1
a.round()	1	1
train_data.drop(['Name'], axis=1, inplace=True)	1	1
train.drop(drop_cols,inplace=True,axis=1)	1	1
dfcabin['Cabin'] = dfcabin['Cabin'].str[:1]	1	1
df_output3.to_excel(writerxls3,'Sheet1')	1	1
"copy[""Embarked""] = copy[""Embarked""].fillna(embarked_median)"	1	1
"dataframe[""Title""] = dataframe[""Title""].replace(""Mme"", ""Mrs"")"	1	1
df_train['AgeRange'] = pd.cut(df_train['Age'], 5)	1	1
d_res_lr.loc[index_selection_lr,['estimator','params','val_score','mean_test_score','mean_train_score','val_F_score']]	1	1
model.add(Dense(output_dim=1, input_dim=X_train.shape[1]))	1	1
"x.pop(""Survived"")"	1	1
neural_result.to_csv('Titanic_Neural.csv', index=False)	1	1
"data[""Pclass""],"	1	1
X.loc[(X['Fare Group'] > 7.91) & (X['Fare Group'] <= 14.454), 'Fare Group'] = 1	1	1
train['Unit'] = 1	1	1
all_data.Cabin.isnull()	1	1
test.drop('Embarked',1,inplace=True)	1	1
titanic_df['Age'].hist(bins=80) #bins=80 as ages range from 0 to 80 years old	1	1
full_set['Sex'] = full_set['Sex'].map({'male':0, 'female':1})	1	1
ax[0].set_title('Passengers by Pclass')	1	1
np.round(mlp_model.predict(test_features_array)).astype(int)	1	1
features_train['Survived']	1	1
"titanic[""Age""] = titanic[[""Age"", ""Pclass"", ""Sex""]].apply(impute_age, axis = 1)"	1	1
data_train.head() # Check to see if the replacement worked...	1	1
feature_importance.set_index('feature', inplace=True)	1	1
testset.drop(['Name','Cabin','Ticket','PassengerId'],axis=1)	1	1
"test[""FareCategory""] = np.floor(test[""Fare""] / 20.0).astype(int)"	1	1
dataset['Shared_ticket'] = np.where(dataset.groupby('Ticket')['Name'].transform('count') > 1, 1, 0)	1	1
"test_data.loc[(test_data[""Age""] > 30) & (test_data[""Age""] <= 50), 'Age_Group'] = 3"	1	1
df_train['FareCat']=pd.cut(df_train['Fare'],bins=[0, 25, 90, 1000], include_lowest=True, labels=[1,2,3])	1	1
grouped_test.to_csv('submit.csv',index=False)	1	1
train[['FamilySize','Survived']].groupby(['FamilySize'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
traind['Agegroup']= pd.qcut(traind['Age'], 5, labels = [1, 2, 3, 4, 5])	1	1
Submission['Survived'] = tree.predict(X_test_second)	1	1
df['is_estimated_Age'] = is_estimated	1	1
np.round((tf.nn.sigmoid(y_prediction)).eval())	1	1
dt_test['Age'].fillna(dt['Age'].median(skipna=True), inplace=True)	1	1
submission_df.to_csv('Titanic Predictions 1.csv',index=False)	1	1
"test_df[""ticket""] = test_df[""Ticket""].apply(numeric_extract)"	1	1
test_df.loc[test_df['Ticket']==tick,'n_on_ticket'] = test_counter[tick]	1	1
df['_AgeBin'] = pd.cut(df['Age'], 8)	1	1
summary_df.loc['Survived','level']='categorical' #nominal	1	1
test.loc[:,['PassengerId','Survived']]	1	1
train['Age'].fillna(train.Age.median() , inplace=True)	1	1
test_agg.columns.levels[0]:	1	1
test_ds.drop(['Name'], axis= 1, inplace= True)	1	1
data2_for_analysis.iloc[:,0].values	1	1
test['FareBucket'] = (test['Fare']/50).astype(int)	1	1
df['GrpSize2'] = df['GrpSize2'].replace(['single', 'small', 'large'], range(3))	1	1
"test[""Fare""][i]=round(train[train[""Pclass""]==pclass][""Fare""].mean(),4)"	1	1
x_train.shape[:]	1	1
dataset['Family'] = dataset['Family'].map(family_mapping)	1	1
titanic.drop(['Cabin'],1)	1	1
Xrandreg_test.set_value(i, 'Age', randreg)	1	1
dataset.assign(title=pd.Series(titles).values)	1	1
"ALL_DATA[""Deck""].unique()"	1	1
plt.hist(df['Pclass'], bins=3)	1	1
"dataset['Name'].str.contains(""Mr"", na=False)"	1	1
data.loc[(data.Fare>60.3)&(data.Pclass==1), 'PassengerCat']=0	1	1
train.drop(['Cabin','Ticket'],axis=1)	1	1
full.groupby(['Sex', 'Pclass', 'Embarked'])['Embarked'].count().head(3)	1	1
"testingset.describe(include=""all"")"	1	1
data.groupby(['Sex'])['Survived'].mean()	1	1
df_ticket.rename(columns={'Ticket':'TicketMembers'}, inplace=True)	1	1
raw_df['Title']= raw_df['Name'].map(lambda x: substrings_in_string(x, title_list))	1	1
combined.loc[combined['Number_of_relatives'] > 3, 'Size_Family'] = 'Big'	1	1
test_set['Age'] = test_set.Age.fillna(test_stats.loc['mean', 'Age'])	1	1
train.groupby(['FamilySize'])[['Survived']].count()	1	1
train_df[['Name', 'Parch']]	1	1
test['c_std']	1	1
test3.to_csv( 'titanic_pred3.csv' , index = False )	1	1
test['Young'] = (test['Age']<=30) | (test['Title'].isin(['Master','Miss','Mlle','Mme']))	1	1
"train[""Title""] = [i.replace('Ms', 'Miss') for i in train.Title]"	1	1
data['AgeBin'] = pd.cut(data.Age, bins=(0,15,25,60,90))	1	1
mpl.style.use('ggplot') # if error, use plt.style.use('ggplot') instead	1	1
df_submit.to_csv('./test_prediction_logistic_regression.csv', index = False)	1	1
Titanic_Master['Cabin_t'] = Cabin_t	1	1
test['Age_bin']=pd.cut(test['Age'],[0,14,31,45,60,90],right=False)	1	1
train.pivot_table(index='Sex',values='Survived')	1	1
scaler.transform(x_train_data)	1	1
comb.Title.loc[(comb.Title.isin(['Capt', 'Col', 'Don', 'Jonkheer', 'Major', 'Rev', 'Sir', 'Dr'])) & (comb.Sex=='male')]  = 'Sir'	1	1
fare['Fare'] = fare['Fare'].fillna(fare['Fare'].median())	1	1
copy_df.drop(copy_df.columns[[0,5]],axis=1)	1	1
"comb.drop(""Age"",axis=1)[comb.Age.isnull()]"	1	1
np.round(boost_x_val_score.mean()*100, 2)	1	1
data['Length']=data['dot_list']+data['dash_list']+data['string_list']+data['num_list']	1	1
train.drop(['SibSp','Parch','Family'],axis = 1, inplace = True)	1	1
train.pivot_table(index='Sex', values='Survived')	1	1
best_iteration[0]:	1	1
X_train['Fare'].fillna(X_train['Fare'].median(), inplace = True)	1	1
"train_kaggle[""Sex_encoded""] = sexLabelEncoder.transform(train_kaggle[""Sex""])"	1	1
nn_submission_df.to_csv('Titanic Predictions 5.csv',index=False)	1	1
"dftest.loc[idx,""CountTicket_InTest""]=ticket_count_test[ticket]"	1	1
"dataset_train[""Survived""].groupby(dataset_train[""Cabin""].isnull()).mean()"	1	1
"test_set.drop([""SibSp"",""Parch""],axis=1,inplace=True)"	1	1
x_train.drop(['SibSp', 'Parch', 'Name', 'Cabin', 'Survived'], axis=1)	1	1
titanic_3.head(1)	1	1
train.rename(columns={i: 'Embarked_'+i}, inplace=True)	1	1
trainingdata['Age'].isnull().sum()	1	1
param.keys():	1	1
train3.values	1	1
train.loc[(train['AgeModified']>10) & (train['AgeModified']<=20),'AgeCategorical'] = 1	1	1
submission2.to_csv('submission2.csv', index = False)	1	1
test.drop('Training_set', axis=1, inplace=True)	1	1
df_train_copy['Sex'] = df_train['Sex'].apply(lambda v: int(v == 'male'))	1	1
lbl_enc.transform(test_df[col])	1	1
test['Fare']=test['Fare'].fillna(test['Fare'].median())	1	1
"train['Cabin_Lett']=train['Cabin_Lett'].replace(""A"",1).replace(""B"",2).replace(""C"",1).replace(""0"",0).replace(""D"",2).replace(""E"",2).replace(""F"",1).replace(""G"",1)"	1	1
df1['Pclass'].value_counts()	1	1
"data.groupby(""TitleClean"").mean()['Age']"	1	1
"dfWF[""train""]"	1	1
df_test.drop(drop_cols, axis=1)	1	1
dataset.iloc[:, 11].values	1	1
test.loc[(test['Age']>35)&(test['Age']<=50),'Age_cat']=3	1	1
df_test['Pclass']	1	1
train['Embarked'] = train['Embarked'].apply(transform_embarked)	1	1
test.interpolate()	1	1
train7['Cabin'] = le.transform(list(train7['Cabin'].values))	1	1
df_grp.drop(ind)['Survived'].max()	1	1
test.join(pd.get_dummies(test.Sex))	1	1
titanic_final.values	1	1
train['Pclass3'] = train['Pclass']	1	1
dftest.loc[single_poor_wmn,:]	1	1
train_set['Survived'][train_set['Age'].isnull()]	1	1
dataset_train.Name.values	1	1
df['train_Age_rep_scale'] = train_Age_rep_scale	1	1
score.append(accuracy_score(label_test, label_predict))	1	1
neural_record['Double_Net'][6].predict(test.drop('PassengerId', axis=1))	1	1
X.columns.values[:number_of_features]	1	1
train.set_index('Ticket')	1	1
full.loc[full.Title.isin(['Rev','Col','Major','Capt','Sir','Don','Jonkheer']) & (full.Sex == 'male'), 'Title'] = 'Mr'	1	1
tdf['age_f'] = tdf.age.fillna(tdf.age.mean())	1	1
average_accuracy.transpose()	1	1
dataset['Title'] = dataset['Title'].replace(['Dona', 'Lady', 'the Countess'], 'Otherf')	1	1
levels.sort_values(by = 'Levels', inplace = True)	1	1
all_data.loc[(all_data['Age'] > 24) & (all_data['Age'] <= 28), 'Age'] = 2	1	1
x['Age'] = x['Age'].fillna (x['Age'].median())	1	1
"train_df[[""IsAlone"", ""Survived""]].groupby([""IsAlone""], as_index=False).mean()"	1	1
data['Fare'].fillna(value=median_fare, inplace=True)	1	1
dataset['Categorical_Fare'] = pd.qcut(dataset['Fare'],4)	1	1
Xtrf_df.values	1	1
np.where(embarked=='S', 2, embarked)	1	1
test_pred.astype(np.int64)	1	1
"train[""Fare""].median()"	1	1
train['Female'] = np.where(train['Sex'] == 'female', 1, 0)	1	1
validation[['Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_C', 'Embarked_S', 'HasCabin', 'IsAlone', 'Title_Master', 'Title_Miss', 'Title_Mr', 'Title_Mrs']]	1	1
train.Age.fillna(train.Age.median()) ##mean()?	1	1
titanic_df['Family'] = titanic_df['Parch'] + titanic_df['SibSp']	1	1
dataset['Mr'] = np.where(dataset['Title']=='Mr',1,0)	1	1
test_df.drop(['SibSp','Parch'],axis=1,inplace=True)	1	1
"train[""Title""] = [i.replace('Sir', 'Nobility') for i in train.Title]"	1	1
test_dataset.describe(include=['O'])	1	1
train_df['Pclass']	1	1
train_x['Age'].fillna(age_mean, inplace=True)	1	1
df['GrpSize2'] = pd.cut(df['GrpSize'], [0, 1, 4, 11], labels=['single', 'small', 'large'])	1	1
"data[""Fare""].astype('float')"	1	1
result.to_csv('xgboost-5-titles.csv', index=False)	1	1
df_modelo['survived']              # Target variable	1	1
"ts[""Bias""] = 1"	1	1
x_train[['Sex_female','Sex_male']]	1	1
test_passenger_df.head()	1	1
train.drop(['PassengerId'], axis=1,inplace=True)	1	1
df_train['Embarked'] = df_train['Embarked'].fillna(df_train['Embarked'].mode().iloc[0])	1	1
train.drop(['Ticket','PassengerId'], axis=1)	1	1
titanic_test['age_range'] = titanic_test['age_range'].map({'0-5':0, '5-16':1, '16-30':2,'30-45':3, '45-60':4, '60-75':5, '75-':6}).astype(int)	1	1
test.Age.fillna(train.Age.mean(), inplace=True)	1	1
df_submission.describe()	1	1
data.groupby(['Surname'])['Survived'].count()	1	1
"test[[""Pclass"", ""Sex"", ""Age"", ""Fare"", ""SibSp"", ""Parch"", ""family_size""]].values"	1	1
ageDF.ix[ageDF.Salutation == sal, 'Age'] = ageDF[ageDF['Salutation'] == sal]['Age'].fillna(dict_sal[sal])	1	1
processed.loc[df[col_name].isnull(), col_name] = ''	1	1
train[['Pclass','Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]	1	1
ship['Title'].unique()	1	1
app_train.corr()['Survived']	1	1
train.replace('male', 0)	1	1
loss.data[0] * inputs.size(0)	1	1
titanic_data.Embarked.fillna(most_embarked)	1	1
data_train.loc[data_train['Survived']==0,'Pclass'].value_counts()	1	1
df_train_ml['Title'] = df_train_ml['Title'].replace(woman_unmarried, 4)	1	1
inDF['family_size'] = inDF.apply(getFaimlyCount2, axis=1)	1	1
df.drop('Fare', axis=1) #this is covered by class	1	1
test['Fare'].fillna(test['Fare'].mode()[0],inplace=True)	1	1
"combine[""hasParents""] = combine[""Parch""].apply(lambda x : (x>0)*1)"	1	1
test_c.drop(['PassengerId', 'Ticket'], inplace=True, axis=1)	1	1
"parameters[""b2""] -= learning_rate * db2"	1	1
train['Fare_cut']	1	1
submission['survived']=submission['survived'].astype(int)	1	1
data_test.loc[data_test.Fare_scaled.isnull(), 'Fare_scaled'] = data_train.Fare_scaled.mean()	1	1
combined_df['Fare'].fillna(fare_fill, inplace=True)	1	1
final_test['Title'] = final_test['Name'].apply(split_name)	1	1
df['Cabin_numbers'] = df['Cabin_numbers'].fillna(value=1) # at least one cabin?	1	1
my_solution.to_csv('my_first_submission.csv',index_label=['PassengerId'])	1	1
"train[""SibSp""],"	1	1
X_test.fillna(method='ffill')	1	1
"df[""Embarked""] = df[""Embarked""].fillna( df[""Embarked""].mode().iloc[0])"	1	1
"full.set_value(full[""Title""] == ""Mr"", ""Title"", 0)"	1	1
oneHot_train.drop(['Survived'], axis=1)	1	1
"X[""Name""].update(names)"	1	1
models.sort_values(by='Score',ascending = False)	1	1
titanic_data.loc[(titanic_data['Fare'] > 14.454) & (titanic_data['Fare'] <= 31), 'Fare']   = 2	1	1
df.iloc[:,[1]]	1	1
titanic_train.loc[titanic_train['Embarked'] == 'S', 'Embarked'] = 0	1	1
df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Age', 'Fare', 'SibSp', 'Parch', 'Embarked'], axis =1)	1	1
test_results_tree.append(roc_auc_score(y_test, test_pred))	1	1
"train_data[""Age""].fillna(random_age, inplace=True)"	1	1
X_Test.astype(np.float32).values	1	1
data.parents.astype('category')	1	1
submission.to_csv('titanic_v3_DT.csv', index=False)	1	1
df_all['FamilySize'] = df_all['SibSp'] + df_all['Parch'] + 1	1	1
train_data['Age'].loc[train_data['Age'].isnull()] = p	1	1
train.loc[0:train_n, 'Survived'].astype(int)	1	1
xtest_annoted['Real']=xtest_annoted['Survived']	1	1
input_data['Embarked'].fillna('S',inplace=True)	1	1
df_names['UniqueName'] = df_names['FamilyName'] == 'Unique'	1	1
training_set.drop(['Age'], axis=1)	1	1
data_Y['predict'] = data.apply(lambda row: classifyPassenger(row,['Sex','Age_band'],probDict,p0,p1),axis=1)	1	1
df_train['Sex'] = df_train['Sex'].replace(numsex)	1	1
data.drop(['PassengerId', 'Ticket', 'Name', 'Age', 'SibSp', 'Parch', 'Fare'], axis=1, inplace=True)	1	1
"testdata[""Age""][np.isnan(testdata[""Age""])] = rand_age_test"	1	1
train_data.join(survived_dummies_titanic)	1	1
Test.head()	1	1
train_df[['CategoricalAge','Survived']].groupby(['CategoricalAge'],as_index=False).mean()	1	1
test_df['Name']= testTitle_Replace	1	1
test['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)	1	1
all_data.Fare.describe()	1	1
df[['CategoricalFare', 'Survived']].groupby(['CategoricalFare'], as_index=False).mean()	1	1
"df_test_features.replace({""S"":1,""C"":2,""Q"":3})"	1	1
train_df['AgeIsNull'] = pd.isnull(train_df.Age).astype(int)	1	1
app_train['PassengerId']	1	1
train_df['Survived'] #Targer data	1	1
trainData['Embarked']=trainData['Embarked'].fillna(trainData['Embarked'].value_counts().idxmax())	1	1
train.loc[:,['Pclass','Age','Sex','SibSp','Parch','Fare','Embarked']]	1	1
train.append(test, ignore_index=True,sort=False)	1	1
titanic_df['Cherbourg']=titanic_df[['Embarked']].apply(get_cherbourg, axis=1)	1	1
df3_train.head()	1	1
params['clf_forest'].fit(params['X_train'], y_tot)	1	1
"df[""child""][df[""Age""] >=18] = 0"	1	1
Pclass_dummy.drop(columns = [3])	1	1
new_features.shape	1	1
train_df['Age'] = train_df['New_Age'].astype(int)	1	1
"train_data[""Embarked""].replace([""S"",""C"",""Q""], [1,0,-1], inplace = True)"	1	1
train_df.drop(['Survived'],axis = 1 )	1	1
"Final.to_csv(""Submission.csv"",index=False)"	1	1
train_df.sample(frac=0.8, replace=False, random_state=777)	1	1
test['Age'].fillna((test['Age'].median()), inplace=True)	1	1
"clean_df[""Survived""]"	1	1
normalizer.transform(X[test])	1	1
data['Parch']=data['Parch']*0.02	1	1
feature_importances.reset_index(inplace = True)	1	1
data_train['Alone'] = (data_train['Fsize'] == 0).astype(int)	1	1
train_df['familySize'] =train_df.Parch+train_df.SibSp +1	1	1
gs_metric_dict.append(dict(zip(gs_metric_cols, gs_metric_values)))	1	1
matplotlib.rcParams['figure.figsize'] = (14.0, 7.0)	1	1
df.loc[((df.IsKid == 0) & (df.Pclass == 2)) , 'IK_Cl'] = 2 #avg adult	1	1
df['Singleton'] = df['Family_size'].map(lambda s: 1 if s == 1 else 0)	1	1
final_output.append(output_df[['PassengerId', 'Survived']])	1	1
df['Fam_Size'] = np.where((df['SibSp']+df['Parch']) == 0 , 'Solo', np.where((df['SibSp']+df['Parch']) <= 3,'Nuclear', 'Big'))	1	1
test_df.fillna(-999, inplace=True)	1	1
ax[0].set_title('Passenger Count by Pclass')	1	1
df_train.groupby('Pclass').Survived.agg(['count', 'sum', 'mean', 'std'])	1	1
training_df1.dropna(axis=0, how='any', subset = ['Embarked'])	1	1
"df[""Survived""]==pred"	1	1
df.drop(col, 1)	1	1
train_data['SIBSP'] = pandas.to_numeric(train_data['SIBSP'], errors='coerce')	1	1
"test_df[""Survived""] = test_df[ [""YourCoin""] ].apply(myFlip3 , axis=1)"	1	1
entire.Cabin.replace('U', np.nan)	1	1
score_list.append(svm.score(x_test,y_test))	1	1
trim_data['Age'].isnull().sum()	1	1
row['Ticket'].str.contains('PC')	1	1
training_set.loc[training_set['Survived'] == 0, 'Age'].dropna(),	1	1
predict.loc[predict['Sex']=='male','Survived'] = 0	1	1
xText.Embarked.fillna('S', inplace=True)	1	1
"df.select_dtypes([""int64"", ""float64""]).fillna(df.median()).drop([""PassengerId"", ""Survived""], axis=1).values"	1	1
test_d['Fare'][152]=(test_d[test_d['Pclass']==3]['Fare'].mean())	1	1
"dataset.loc[ dataset['Age'] <= 16, 'Age0'] 					       = 1"	1	1
parental_dat.sum()	1	1
tfidf.transform(train_df[textcol].values)	1	1
train[['Embarked', 'Survived', 'Pclass', 'IsAlone', 'SexBinary', 'AgeGroup', 'FareBinned', 'DiscreteTitle']].corr()	1	1
train.drop(['CategoricalAge','CategoricalFare'],axis=1)	1	1
data.loc[(data.passenger_fare>25.99) & (data.passenger_fare<=26.) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>25.99) & (data.passenger_fare<=26.) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
"sur_no_na[""Age"" ].plot(kind='hist',alpha=0.5,color='red',bins=bins)"	1	1
df_train['name'] = df_train['name'].apply(cleaner_lambda)	1	1
x_train['title'] = x_train['salutation'].apply(lambda x: 'Misc' if salutation_mask_train.loc[x] == True else x)	1	1
train_data.drop('Name', axis=1)	1	1
train_df.drop(columns= ('Survived'), inplace= True)	1	1
"train_test[""Survived""] # generate the results list"	1	1
"tmp[""CabinHead""] = tmp[""CabinHead""].replace(""A"", 1).replace(""B"", 2).replace(""C"", 3).replace(""D"", 4).replace(""E"", 5).replace(""F"", 6).replace(""G"", 7).replace(""T"", 8).replace(""U"", 9)"	1	1
titanic_test_final.head()	1	1
df['Name'] = df['Name'].replace(['Capt', 'Dr','Rev','Mile','Col','Major','Countess','Jonkheer','Mme',                                            'Don', 'Ms','Sir','Capt','Lady', 'Mlle'], 'Low Appearence')	1	1
X['caF'] = X['Cabin'].map({'A':0,'B':0,'C':0,'D':0,'E':0,'F':1,'G':0,'T':0,'U':0}).astype(int)	1	1
"sns.boxplot( y = ""Age"", x = ""Survived"",data = X_train, palette = ""muted"")"	1	1
fill_age_df['IsMale'] = fill_age_df['Sex'].astype('category').cat.codes	1	1
"output.sort_values(by=""Score"", ascending=False).loc[:,[""Base_rank"",""Add_num""]].values[:5]:"	1	1
X_train_sample_train.head()	1	1
raw_train['Cabin'].unique()	1	1
test_df.ix[np.isnan(test_df.Age), 'Ageknown'] = 'No'	1	1
dataset['AgeBand'] = pd.qcut(dataset['Age'], 4)	1	1
traindf[['SibSp','Survived']].groupby(['SibSp'] , as_index = False).mean()	1	1
model.add(Dense(L2, input_dim = L1, kernel_initializer='normal', activation='relu'))	1	1
test.loc[test['EmbarkedModified'] == 'C', 'EmbarkedCategorical'] = 1	1	1
titanic.groupby(['Ticket_lett']).Survived.mean()	1	1
final['Survived'] = y_test	1	1
data.loc[~data.Cabin.isnull(), ['Ticket', 'Cabin']].groupby(by='Ticket').agg(min)	1	1
plt.hist(ages_all, bins=range(0, 90, 3))	1	1
"df[""Title""][Rare_Title] = ""Rare_Title"""	1	1
test['new_SibSp'] = test.SibSp.astype(int)	1	1
"titanic_test.drop([""Person""],axis=1,inplace=True)"	1	1
train['isAlone'] = train['isAlone'].astype(int)	1	1
clf_best_params.append(grid_searchs[i].best_params_)	1	1
z[1]	1	1
"df_data[""Sex""]=df_data[""Sex""].astype('int')"	1	1
x_train_categorical.isnull().sum()	1	1
df.loc[index, 'Title'] = 'Mr'	1	1
test.loc[(test['AgeModified']>10) & (test['AgeModified']<=20),'AgeCategorical'] = 1	1	1
submission.to_csv('titanic_mvp_5_26_04_2018.csv', index=False)	1	1
scipy.stats.describe(kpca_X[0])	1	1
"dataset['EditedAge'] = dataset[""Age""].apply(lambda x: 0 if x != x else x)"	1	1
"data_combined[[""Embarked"", ""Survived""]].groupby(['Embarked'],as_index=False).mean()"	1	1
titanic_train_df['Family'] = le.fit_transform(titanic_train_df['Family'].map( {'Alone': 0, 'Small': 1, 'Large': 2}).astype(str))	1	1
merged.loc[(merged.Age.isnull())&(merged.NameTitle=='Dona'),'Age']=39	1	1
full['Title'] = full['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	1	1
"train_df[""AgeImputed""] = train_df.Age.fillna(train_df.Age.mean())"	1	1
x['FP_Surv']=0	1	1
X_train['PrimaryCabin'].tolist()  # extract list	1	1
df_data['Fare_scaled'] = scaler.fit_transform(df_data['Fare'].reshape(-1,1), fare_scale_param)	1	1
result.to_csv('Result.csv', index=False)	1	1
"train[""title""] = ["""" if re.search(' ([A-Za-z]+)\.', x)==False else re.search(' ([A-Za-z]+)\.', x).group(1) for x in train[""Name""]]"	1	1
"df[""Cabin""] = df[""Cabin""].fillna(""X"")"	1	1
test_copy['Cabin_Category'] = test_org['Cabin'].apply(lambda x: 0                                                       if type(x) == float else 1).astype(int)	1	1
"Accuracy[""gradientBoosting""] = accuracy"	1	1
frame.loc[frame.Embarked=='C','Embarked']=0	1	1
"train_data[""Survived""][(train_data[""FareCat""] == fare_cat) & (train_data[""Child""] == 1 )]"	1	1
train['Age'].dropna().median()	1	1
Train_Master['Cabin'] = Train_Master['Cabin'].str[0]	1	1
data['IdealFamSize'] = data.apply(fam_ideal_team_work ,axis=1)	1	1
df.drop(['Cabin', 'Name', 'Parch', 'SibSp', 'Ticket', 'Sex'], axis=1, inplace=True)	1	1
"train[""Age""].fillna(train.groupby(""Title"")[""Age""].transform(""median""),inplace = True)"	1	1
train_csv['Child'] = 0.0	1	1
"X_logistic.drop(""Survived"", axis=1, inplace=True)"	1	1
dataset['Sex'] = dataset['Sex'].replace(['male', 'female'], [0, 1])	1	1
train_data.groupby(['Embarked']).agg(['size', 'sum'])	1	1
df_train_ml.drop(['PassengerId','Name','Ticket', 'Cabin', 'Age_bin', 'Fare_bin'],axis=1,inplace=True)	1	1
test_data.drop(['Name','Ticket','Cabin'],axis=1,inplace=True)	1	1
"train_data[""Ticket""]= train_data['Ticket'].replace(['A','W','F','L','5','6','7','8','9'], '4')"	1	1
Train_Master['Age'] = Train_Master['Age'].fillna(np.mean(Train_Master['Age']))	1	1
x_train['Cabin'].fillna('0', inplace=True)	1	1
concat_set.keys():	1	1
data['Farebin_Code']=label.fit_transform(data['Farebin'])	1	1
df.Cabin.fillna('U',inplace=True)	1	1
"test_data.loc[test_data.Sex == ""male"", 'Sex'] = 1"	1	1
titanic[['PassengerId', 'Group_size']].set_index('PassengerId')	1	1
tr['Child']=0	1	1
network.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu', input_shape=(NUMBER_OF_FEATURES,)))	1	1
"train_ori.loc[train_ori[""Title""] == ""Miss"",""Age""] = train_ori.loc[train_ori[""Title""] == ""Miss"",""Age""].fillna(missage)"	1	1
age[0]	1	1
"dataset['Title']=dataset['Name'].str.split("", "",expand=True)[1].str.split('.',expand=True)[0]"	1	1
"GBT_result[1][""best_score""],"	1	1
titanic.loc[train.index].info() #Training set Info	1	1
X_train[['Embarked', 'Pclass']].groupby(['Embarked'], as_index=False).mean()	1	1
df.drop(['FamilySize'], axis=1, inplace=True)	1	1
"g.axes.set_title('Randrom Forest feature importance', fontsize=20,color=""r"")"	1	1
train['T5'] = np.array(train['Title'] == 'Rare').astype(np.int32)	1	1
train_df.Cabin.isnull()	1	1
train.loc[train['Age'] <= 10, 'IsChild'] = 1	1	1
"train_df[""Cabin""]"	1	1
dataset.drop(labels = ['Name','PassengerId'], axis = 1, inplace = True)	1	1
df.loc[df['New_Age'].isnull(), 'New_Age'] = random_ages  # assign the ages to the null value entries	1	1
"embarked['Queenstown'] = embarked[""Embarked""].str.contains(""Q"").astype(int)"	1	1
dataset.loc[ (dataset['Age'] > 16 ) & (dataset['Age'] <= 26), 'Age'] = 1	1	1
df.loc[df.Cabin == 'T', 'Cabin'] = np.NaN	1	1
Train_data.loc[Train_data['Sex'] == 'male', 'Sex'] = 0	1	1
train['Age'] = imputer.transform(train_X)	1	1
df['family_size'] = pd.cut(df['family_size'],family_size_num,labels=family_size_label)	1	1
testNMD.values # Creats an array of the test data	1	1
df_grp.iterrows(): #相同tickets的逐列枚舉	1	1
"train.loc[ train['Age'] <= 16, 'Age'] 					       = 0"	1	1
train_data['Embarked'].value_counts(normalize = True)	1	1
test_df_clean['SibSp'] + test_df_clean['Parch']	1	1
submissions.to_csv('./submissions.csv', index=False)	1	1
titanic.dropna()  # drop rows with missing values	1	1
"train_ori.loc[(train_ori[""Age""] >= 18) ,""Age""] = 2"	1	1
result[['PassengerId','Survived']]	1	1
"X[""Cabin""].isnull().astype(int) #  LabelEncoder expects 1d array"	1	1
"dftest[""Ticket""].value_counts()"	1	1
frame.to_csv('forest_out.csv', index=False, header=True, sep=',')	1	1
df.drop('SibSp', axis='columns')	1	1
X_test['Sex']=labelencoder.fit_transform(X_test['Sex'])	1	1
results_op.append(accuracy)	1	1
family_data.hist('FamScore')	1	1
train['Fare'].iplot(kind='hist')	1	1
test['FamSize'] = test['Parch'] + test['SibSp'] + 1	1	1
titanic_df.head(6)	1	1
df.pivot_table(['Survived'], ['Sex', 'Pclass']).sort_values(by = ['Survived'], ascending = False)	1	1
titanic_train.Age.describe()	1	1
Z_title['Title'] = Z_orig.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\.', x).group(1))	1	1
df['Cabin_available'].replace([True,False],[0,1],inplace=True)	1	1
X['is_child'] = pd.cut(X.Age, bins, labels=categories)	1	1
y_pred.to_csv('titanic_pred_xgb.csv',index=False)	1	1
raw_train.loc[raw_train['Embarked'].isnull()]	1	1
"df_perc[""Age""] < 30, ""21-30"","	1	1
train_raw['train'] = 1	1	1
"input_data[""pclass_3""] = input_data[""Pclass""].apply(lambda x: int(x == 3))"	1	1
train['Embarked'] = train['Embarked'].apply(lambda e: 'SCQ'.find(e))	1	1
X_train.drop(['Survived'], inplace =  True, axis = 1)	1	1
np.dot(layer_0.T,layer_1_delta) # NxB X BxH ~ NxH	1	1
"df_train[""SibSp""]"	1	1
model_data.loc[(model_data.Pclass == 2)&(model_data.Title == 1)&model_data.Age.isnull(),('Age')] = 21	1	1
cleaned_df['Age'] = cleaned_df['Age'].fillna(cleaned_df.Age.median())	1	1
X['caD'] = X['Cabin'].map({'A':0,'B':0,'C':0,'D':1,'E':0,'F':0,'G':0,'T':0,'U':0}).astype(int)	1	1
split_view.str[1].str.strip()	1	1
"train_data[""PclassThree""] = 0"	1	1
X['Parch'][X['Parch']>0]=1	1	1
res.describe()	1	1
history[['Name','Survived']].head()	1	1
data.loc[data['Fare']>31.0, 'Fare_cat'] = 3	1	1
data_test.replace(to_replace='female',value=0,inplace=True)	1	1
stdScaler.transform(test[columns])	1	1
"dataset.loc[(dataset[""Age""] > 64), ""Age_group""] = 4"	1	1
"title_dict[""LADY""] = 4"	1	1
test['SmallFamily']=np.where((test['FamilySize']>=2) & (test['FamilySize']<=4),1,0)	1	1
test[['PassengerId']].as_matrix()	1	1
df3.dtypes	1	1
df_train.groupby(['Embarked','Sex'], as_index=False).agg({'Survived':'mean'})	1	1
dat['Cabin'].fillna(-1, inplace = True)	1	1
title.append(str)	1	1
df2['Title'] = df2['Name'].map(lambda x: get_title(x))	1	1
data.Personal_Titles_Mrs.astype('category')	1	1
dataset.drop(['CabinNumber'],  axis=1, inplace=True)	1	1
X_train.age.apply(lambda x: np.sqrt(x)).plot(kind='hist');	1	1
df_medians.iteritems():	1	1
axs[0].scatter(X_train_reduced[np.where(y_train == 1), 0], X_train_reduced[np.where(y_train == 1), 1], marker='x', c='green')	1	1
"train[[""Survived"",'Sex']][train['Age']>cut_offs[i-1]][train['Age']<=cut_offs[i]].groupby(['Sex'],as_index=False).mean()"	1	1
train.loc[train['Sex']=='female','Sex']=0	1	1
train.loc[train['Sex']=='female','Sex']=1	1	1
models.sort_values(by='score', ascending=False)	1	1
dataset.loc[dataset['Fare']>100,'Fare'] = 3	1	1
gs.cv_results_['mean_train_score']	1	1
df.Age.skew()	1	1
"train.loc[train.Survived == train[""Hypothesis""], ""Result""] = 1"	1	1
"dataset.loc[index, ""sexifiedClasses""] = sexifyClass(dataset.loc[index, ""Sex""] , dataset.loc[index, ""Pclass""] )"	1	1
"X[""Title""] = X[""Name""].apply(getTitle)"	1	1
df.isnull().sum() / train_X.shape[0]	1	1
"data[""ticketgroupsize""] = data.groupby(""Ticket"")[""Ticket""].transform(""count"") - 1"	1	1
train[['Age','Sex']].apply(male_female_child, axis=1).head()	1	1
X.loc[X.Sex == 'male', 'Sex'] = 0	1	1
"titanic_train.drop([""Person""],axis=1,inplace=True)"	1	1
features['A5'] = (full['Ticket_short'] == 'A5').astype(int)	1	1
"testdataframe2[""Pclass""]= testdataframe[""Pclass""]"	1	1
age_train.append(test_age_train, sort=False)	1	1
df['Minor']=y	1	1
data['Cabin_nr_odd'].fillna(value=-9999, inplace=True)	1	1
"Ts[[""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare""]]"	1	1
cv_param['silent'] = 1	1	1
df_train.loc[(df_train['Fare'] > 7.91) & (df_train['Fare'] <= 14.454), 'Fare']   = 1	1	1
test.index.values,	1	1
"test.Fare.fillna(test[""Fare""].median())"	1	1
"data_train.drop([""PassengerId"",""Name"",""Ticket""], axis=1)"	1	1
df_clone.iloc[fold[0]]	1	1
df_full['Age'].isnull()	1	1
test.drop('Embarked',axis=1,inplace=True)	1	1
data['HyphenName'] = data.Name.str.extract('([A-Za-z]+)-', expand=False)	1	1
submission3['Survived'] = predictions	1	1
test['InWcg'] = dataset.iloc[train_len:, -1].reset_index(drop=True)	1	1
train_x.select_dtypes(exclude = ['object'])	1	1
"test[""PassengerId""].values,"	1	1
"test.drop([""Survived""], axis = 1)"	1	1
train_df_concat['Ticket_Prefix'] = np.array(Ticket_Prefix)	1	1
"X.drop(""Cabin"", axis=1)"	1	1
test[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
data_combined['LargeFamily'] = data_combined['FamilySize'].map(lambda s: 1 if 5<=s else 0)	1	1
test_df['Name']=test_df['Name'].map(lambda x: x.split(' ')[1])	1	1
et.drop(['S'],axis=1)	1	1
data.surname_Harper.astype(np.uint8)	1	1
X.shape[0] #no of examples	1	1
combined_df.loc[title_mask,'Age'] = median_value	1	1
axs[1].scatter(X_val_reduced[np.where(y_val == 0), 0], X_val_reduced[np.where(y_val == 0), 1], marker='o', c='red')	1	1
data['Title'] = data.Name.apply(lambda x: x.split()[1])	1	1
data_df['Title'] = data_df['Name'].str.extract('([A-Za-z]+)\.')	1	1
"related_people.loc[related_people[""PassengerId""]==1200,""RGroup""]=""Hays_M"""	1	1
train_df.drop(['IsAlone'], axis=1)	1	1
"train.drop([""Survived""], axis = 1);"	1	1
features.loc[features.Age.isnull()]	1	1
data.items():	1	1
rest.append('Title')	1	1
raw_train['FamilyMembers'].value_counts().sort_index().plot(kind='bar',  legend=False, color='c')	1	1
"test_df.pop(""Ticket"")"	1	1
df2['Age'] = np.round(df2['Age'])	1	1
data.loc[data.Cabin=='T', 'Cabin'] = None # 1 item	1	1
test_data.drop(UNUSED_COLUMNS, axis=1)	1	1
ax[0].set_title('Pclass count for known Deck')	1	1
train_copy['Pclass_Category'] = 2	1	1
train_df1['Age']	1	1
test['Age'].median()	1	1
"plt.hist(temp, histtype=""barstacked"", bins=16)"	1	1
test_ToPred.head()	1	1
train[['AgeBin', 'Survived']].groupby(['AgeBin'], as_index=False).mean().sort_values(by='Survived', ascending=True)	1	1
df_titanic_test_mod.iterrows():	1	1
valid_set['Survived']	1	1
submission.to_csv('DecisionTree.csv', index=False)	1	1
combined.drop('Pclass', axis = 1, inplace = True)	1	1
df_train_features['Embarked']=df_train_features['Embarked'].fillna(median)	1	1
test_ID['PassengerId']	1	1
test_df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1) # Drop unused features	1	1
raw_train.copy()	1	1
data_test1.loc[:, 'Survived-SVM'] = clf_svm.best_estimator_.predict(np_test_features)	1	1
tt['Surname'] = tt['Surname'].map(countMap)	1	1
full['Sex'] = full['Sex'].map( {'male':0, 'female': 1} ).astype(int)	1	1
t_df['Alone'].loc[t_df['Alone'] >0] = 'With Family'	1	1
data.distinction_in_tikect_Others.astype(np.uint8)	1	1
final_selection.transform(strat_train_set_X)	1	1
train_data['Suffix'] = train_data['Name'].str.extract(' ([A-Za-z]+)\.')	1	1
sns.boxplot(x='Pclass', y='Age', hue='Survived', data=df3)	1	1
test.loc[test['Family']>5,'Family']=2	1	1
test2['Age'] = test2['Age'].fillna(test2['Age'].median())	1	1
"df_train[""Fare""].describe()"	1	1
testset['Family'] = testset.SibSp + testset.Parch	1	1
train[['male', 'female', 'Pclass', 'new_Parch', 'new_SibSp']]	1	1
"data_train[""Embarked""].apply(lambda x: 4 if type(x) == float else Embarked_dict[x])"	1	1
df.boxplot(column='Fare', by = 'Pclass')	1	1
X['Embarked'].dropna(axis=0, inplace=True)	1	1
train.loc[(train['Sex'] == 0) & (train['isAlone'] == 1), 'gender_alone'] = 1 #female alone	1	1
"df.hist(""Age"",by=""Sex"",ax=ax1,color='orange',bins=(0,10,20,30,40,50,60,70,80,90))"	1	1
"test_df[""Embarked""].fillna(""S"", inplace=True)"	1	1
age1.head(50)	1	1
predictions['DecisionTree']=acurracy_DT*100	1	1
titanic_df.loc[titanic_df['Age'].idxmax()]	1	1
train_null['Age'].index.tolist()	1	1
train.groupby(['Embarked','Pclass']).Name.count()	1	1
train.drop(['PassengerId','Survived', 'Name', 'Ticket', 'Cabin', 'SibSp', 'Parch'], axis=1)	1	1
df['LogFare'] = df['LogFare'].astype(int)	1	1
df_analysis.groupby('deck_mod').agg({'Fare':['mean','sem']})	1	1
syn[1] += l1.T.dot(l2_delta)	1	1
k_precision.append(precision)	1	1
"sns.boxplot( x=""Survived"", y=""Age"", data = train);"	1	1
"df_train[""NameLength""] = df_train[""Name""].apply(lambda x: len(x))"	1	1
"test_set[""Name""] = test_set[""Name""].apply(lambda x: replacement.get(x))"	1	1
train_df.isnull().values.any()	1	1
"traindat[""Age""].fillna(traindat[""Age""].median(),inplace=True)"	1	1
test_data.Fare.fillna(guess_Fare , inplace=True)	1	1
df_combined['Title'] = df_combined['Title'].replace('Ms.', 'Miss.')	1	1
"data.replace({""Pclass"": {1: 'A', 2: 'B', 3: 'C'}})"	1	1
train_new.rename(columns={'male':'sex'}, inplace = True)	1	1
titanic_train_final.drop('Survived',axis=1)	1	1
data1['Title']=data1['Title'].apply(lambda x: 'Misc' if title_names.loc[x]==True else x )	1	1
train.loc[(train['Pclass'] == 2) & (train['hasCabin1'] == 1), 'class_hascabin'] = 1 #has cabin Pclass 2	1	1
raw_data.assign(Group_Age = new_col)	1	1
train_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace = True)	1	1
np.sum(corr)	1	1
combined_data.iloc[:891]['Age']	1	1
train['Age'].fillna(train['Age'].median(),inplace=True)	1	1
survived_count.append(train[train['Ticket'].str.isdigit()]['Survived'].sum()/train[train['Ticket'].str.isdigit()]['PassengerId'].count())	1	1
result.drop(c, axis=1, inplace=True)	1	1
dataset['title'] = dataset['title'].replace('Ms', 'Miss')	1	1
titanicTrain_X.info()	1	1
results.boxplot(ax=ax)	1	1
test['Fare'] = test['Fare'].replace(np.NaN, median_fare)	1	1
titanic.reindex(columns=column)	1	1
Y.values.reshape(-1)	1	1
data['Embarked'].fillna(most_common, inplace=True)	1	1
train_df[['Is_Alone', 'Survived']].groupby(['Is_Alone'], as_index=False).mean()	1	1
family_data['FamScore'] = family_data['SibSp'] + family_data['Parch']	1	1
train_data.groupby('Sex').Sex.describe()	1	1
train['HasCabin'] = pd.Series(len(train['Cabin']), index=train.index)	1	1
train.drop(['Cabin'], axis=1), test.drop(['Cabin'], axis=1)	1	1
df.loc[(df['Fare']>7.91)&(df['Fare']<=14.454),'Fare_cat']=2	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Jonkheer', 'Rare')	1	1
dataset['FamilySize'] = dataset['FamilySize'].map( {1:0,2:1,2:1,3:1,4:1,5:2,6:2,7:2,8:3,9:3,10:3,11:3} ).astype(int)	1	1
"data[""Survived""].corr(data[""SibSp""]),"	1	1
"legs[0].set_text(""No"")"	1	1
train_data['Age'].iloc[i] = age_pred	1	1
data_train.groupby('Pclass').mean()['Fare'].plot(kind='bar',figsize=(13,8), ax = ax)	1	1
df['Pclass'] = df['Pclass'].astype('int')	1	1
data.loc[data['Cabin'].isnull(), ['Cabin']] = 0	1	1
"train[""Child""] = [""Child"" if int(x) < 18 else ""Adult"" for x in train[""Age""]]"	1	1
testData['PassengerId'].count()	1	1
train.loc[(train['Survived'] == 0),'Fare']	1	1
submissions['Survived']=predictions[:,0]	1	1
train['Age'] = train[['Age','Pclass']].apply(setAge,axis=1)	1	1
df['Pclass'].value_counts()	1	1
test_df.loc[(test_df['Age'] > 21) & (test_df['Age'] <= 28), 'Age'] = 1	1	1
x['Count']	1	1
dataset['Sex'] = dataset['Sex'].map( {'female':1, 'male':0} ).astype(int)	1	1
data['alone'] = data.apply(lambda x: 1 if ((x.SibSp==0) & (x.Parch==0) & (x.same_tckt==0)) else 0, axis=1)	1	1
full.drop(columns='Cabin', inplace=True)	1	1
train_data.drop(['PassengerId','Ticket','Survived'], axis=1)	1	1
df['Survived'] = titanic_train_data['Survived']	1	1
train.Survived.groupby(train.parent_or_children_onboard)	1	1
full.drop(['Name','Surname'],axis=1,inplace=True)	1	1
df['Sex_male'][df['Sex_male'] == 1][df['Survived'] == 1].count()	1	1
visualization_df['FareBin_Code'] = label.fit_transform(visualization_df['FareBin'])	1	1
test['Embarked'] = pd.DataFrame(emb_scaled)	1	1
"t[""Sex""]"	1	1
final_train.drop(['Survived'], axis=1)	1	1
"train['Embarked'] = train[""Embarked""].fillna(""S"")"	1	1
"train.drop(""Age"", axis=1, inplace=True)"	1	1
data.tail(5)	1	1
df2[['Sex']].copy()	1	1
test['Title'] = test['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	1	1
combined_data['Cabin'].fillna(combined_data['Cabin'].value_counts().index[0],inplace = True)	1	1
temp_df['Ticket_number'] = 0	1	1
train_dataset.loc[(train_dataset['Fare']>14.454) & (train_dataset['Fare']<=31),'Fare']=2	1	1
data.loc[(data.passenger_fare>27.7207) & (data.passenger_fare<=27.7208) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>27.7207) & (data.passenger_fare<=27.7208) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
data.loc[ data['Fare'] <= 7.91 , 'Fare'] = 0	1	1
all_data['Embarked'] = all_data['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)	1	1
tr['Title'] =tr['Title'].replace('Rev',1)	1	1
Train_Master.loc[ Train_Master['Age'] <= 24, 'Age'] = 0	1	1
test_df['Age'].isnull().sum() / len(test_df)	1	1
testdf['Male'] = male	1	1
"sns.boxplot(x= ""Pclass"", y= ""Age"", data= titanic, hue =""Sex"", ax = ax)"	1	1
titanic_train.Name.head(10)	1	1
df_titanic.loc[891:1308,]	1	1
df_pred.to_csv('Predictions_' + date_str + '.csv')	1	1
train['Title']=train['Title'].replace(['Capt','Col','Don','Dr','Jonkheer','Major','Rev','Sir','Dona'],'Rare')	1	1
np.round(mutual_info_classif(X_one_hot.drop('Age', axis=1), y, discrete_features=True),2)	1	1
merged_df['Age'] = merged_df['Age'].fillna(median_age)	1	1
"titanic_df.groupby(['Pclass', 'Survived'])['Age'].mean().plot(kind = 'bar', figsize=(10,10) , legend=""True"", title=""Mean age of passengers survived or perished from each class"").set_ylabel(""Mean"")"	1	1
df_data['Family'] = df_data['SibSp'] + df_data['Parch'] + 1	1	1
full.loc[(full.Title == 'Dr') & (full.Sex == 'male'), 'Title'] = 'Mr'	1	1
titanic_df.isna().sum()	1	1
"train[""IsAlone""] = train.FamSize.apply(lambda x: 1 if x == 1 else 0)"	1	1
train_df['aile'].loc[train_df['aile']>0]=1	1	1
train.loc[train['Age'] < 1.0, 'hasAge'] = 1	1	1
train_df.loc[ train_df['Age'] <= 7, 'AgeGroup'] = 0	1	1
df['isSpecialTicket'] = df['isSpecialTicket'].fillna('RE')	1	1
train.fillna(train.groupby(groupbyfeature)[meanfeature].transform('mean'), inplace=True)	1	1
df['Female'] = (df['Sex'] == 'female')	1	1
test['Fam'] #count of family	1	1
test_second_model[['PassengerId', 'Survived']]	1	1
predict.loc[predict['1'] == 1, 'Survived'] = 1	1	1
"test_X.Fare.astype(""float"")"	1	1
data.dropna(how ='any', inplace = True)	1	1
Results[55]	1	1
train['Age'].fillna(round(train['Age'].mean()), inplace=True)	1	1
"X_test[""Age""].median()"	1	1
test_copy.values # Creats an array of the test data	1	1
dataset.loc[dataset['Title'] == 'Otherf', 'Age'] = dataset.loc[dataset['Title'] == 'Otherf', 'Age'].fillna(medians.loc[medians['Title'] == 'Otherf']['Age'][4])	1	1
"titanic_test.loc[titanic_test[""Sex""]==""female"", ""Sex""] = 1"	1	1
"test.loc[(test[""Age""] > 48)&(test[""Age""] <= 64), ""age_c""] = ""4"""	1	1
df.loc[(df['AgeGroup']>45) & (df['AgeGroup']<=63), 'AgeGroup'] = 3	1	1
"embarked['Southampton'] = embarked[""Embarked""].str.contains(""S"").astype(int)"	1	1
df.groupby(['Pclass']).Age.mean()	1	1
"data[""Name""] = data[""Name""].str.replace(""the Countess"",""Mme"")"	1	1
df_test['Fare'] = df_test['Fare'].fillna(8.05)	1	1
survived_parch.sort_values(by='Rate', ascending=False, inplace=True)	1	1
"titanic[""age_range""] = titanic[[""Age""]].apply(age_range, axis= 1)"	1	1
"train_data[""TitleMiss""] = 0"	1	1
"test_mod.set_index([""Pclass""],inplace = True)"	1	1
df_test['AgeRange'] = le.fit_transform(df_test['AgeRange'].astype(str))	1	1
train_x.join(pd.get_dummies(train_x[name],prefix=name).iloc[:,:-1]).drop(name,1)	1	1
train_df['Pclass'].value_counts(normalize=True).plot.bar(title= 'Passenger_Class')	1	1
Embark_dummy['S']	1	1
"x[""SibSp""] + x[""Parch""] + 1"	1	1
data['Family']=0	1	1
results.to_csv('Final_Output.csv',index=False)	1	1
"df_test.drop([""PassengerId"",""Cabin"",""Ticket"",""Survived"",""SibSp"",""Parch""],axis=1)"	1	1
"data.loc[(data[""Fare""] >= 10) & (data[""Fare""] < 65), ""Fare_group""] = 2 # class one and class two"	1	1
Test_data.loc[Test_data['Sex'] == 'male', 'Sex'] = 0	1	1
train_df[['CabinLetter', 'Survived']].groupby(['CabinLetter']).agg(['count', 'mean']).sort_values(by=[('Survived','mean')], ascending=False)	1	1
X_train['TraveledAlone'] = (X_train['FamilySize'] == 1).astype(int)	1	1
X_test.T	1	1
df.loc[((df.IsKid == 0) & (df.Pclass == 3)) , 'IK_Cl'] = 3 #poor adult	1	1
"dftest[""Embarked_bool""] = dftest.Embarked.map(context2)"	1	1
train_data['AgeBand'] = pd.cut(train_data['Age'], 5)	1	1
train_nonNullAge.groupby('Age')['Survived'].mean().plot(kind='line')	1	1
"test_df[""Survived""] = np.array([int(item['classes']) for item in test_predictions])"	1	1
results['PassengerId'] = test['PassengerId']	1	1
test_df.loc[test_df['Title'] == 'Miss', 'Title'] = 'Ms'	1	1
dataset.groupby(dataset['Fare_R'])['Survived'].describe()	1	1
df.groupby('Embarked').Survived.count() # most of the people were embarked with 'S'	1	1
non_missing_data2.iloc[:,[0,1,3,4,5]].values	1	1
"df['Title'] = df[""Title""].fillna(0)"	1	1
train_df.drop(columns=['Survived'])	1	1
full.loc[(full.Age.isnull()) & (full.Titles_mapped == 'Rare'), 'Age'] = get_Age_mean('Rare', 1)	1	1
attr.Age.fillna(attr.Age.median(skipna=True))	1	1
dataset['GroupSize'] = dataset.groupby('GroupId')['GroupId'].transform('count')	1	1
test.Fare.fillna(median_fare_all, inplace=True )	1	1
titanic_train_data['Embarked']	1	1
MLA_compare.loc[row_index, 'MLA Name']=MLA_name	1	1
np.std(X_train['log_fare'])	1	1
"test_data[""Embarked_Missing""] = pd.Series(np.zeros(length), index = test_data.index)"	1	1
"df_titanic_test[""PassengerId""]"	1	1
test_data.drop('PassengerId', axis = 1)	1	1
test.at[i, 'Sex'] == 'male':	1	1
X_cat.head()	1	1
"full_data[""FareCat""]=0"	1	1
final_cost.append(cost_g[-1])	1	1
"titanic_train_dataset[""CabinFloorScore""].loc[titanic_train_dataset['CabinFloor'] == ""G""] = 0"	1	1
tf.add(tf.matmul(W3, A2), b3)                     # Z2 = np.dot(W2, a1) + b2	1	1
"forestsubmission.to_csv(""forestsubmission.csv"",index=False)"	1	1
"x.count("" "") + 1"	1	1
normalizer.transform(X)	1	1
titanic_df.loc[titanic_df['Family'] == 0, 'Family'] = 0	1	1
df['IsAlone'] = df['FamilySize'].apply(IsTravelAlone)	1	1
test_df.rename(columns={i: 'Embarked_'+i}, inplace=True)	1	1
"train_df.groupby(""Pclass"")[""Survived""].mean()"	1	1
"tmp[""Embarked""].fillna(tmp[""Embarked""].median(), inplace=True)"	1	1
training_df.head() # Name, ticket, and cabin do not seem to be very useful fields	1	1
df_train['FamilySize']	1	1
df_train.loc[:, ['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
"train.drop([""Cabin"",""PassengerId"",""Ticket"",""Name"",""Embarked"",""Fare""],axis=1)"	1	1
"df_copy.loc[:,""Sex""] = df_copy.Sex.apply(lambda x: 0 if x ==""male"" else 1)"	1	1
train_cl.Age.fillna(train_cl.Age.mean(skipna=True))	1	1
"total[""Survived""].copy()"	1	1
train.describe()    #891个人中，存活率是38.38%，平均年龄是29.7	1	1
"df_survived.groupby(""Sex"").get_group(""male"")"	1	1
df_submission['name_length'] = df_submission['name_length'].astype('float')	1	1
"titanic_test.drop(""Cabin"",axis = 1,inplace=True)"	1	1
"train.pivot_table(index=""Embarked"", values=""Survived"")"	1	1
dataset.Cabin.astype(bool).astype(int)	1	1
train.drop(['Ticket'], axis = 1, inplace = True)	1	1
full.describe(include = 'all')	1	1
"dat.loc[dat[""Sex""]==""male"",""Sex""]= 0"	1	1
dataset.loc[ dataset['Fare'] <= 43.833, 'FareBand'] = 0	1	1
data_train['Age'] = imp_age.transform(data_train[['Age']])	1	1
yy_hat.to_csv('accountant_titanic_06.csv', index=False)	1	1
test6['IsAlone'].loc[test6['FamilySize'] > 1] = 0	1	1
"final.set_index(""PassengerId"", inplace=True)"	1	1
data['Cabin'] = data['Cabin'].map(lambda x: x[0])	1	1
"dftrain[""TicketButLast""].value_counts()"	1	1
test.drop('Cabin', axis = 1)	1	1
df.loc[index,'middleFamily']=1	1	1
data.groupby('Embarked').count()['PassengerId'] # число пассажиров с определенного порта	1	1
"test[""Age""] = test[""Age""].fillna(29)"	1	1
data_df.groupby(['Ticket_Lett'])['Survived'].mean()	1	1
validation[0]	1	1
tmp_df[['Title', 'Sex', 'Age']].groupby(['Title', 'Sex'], as_index=False).mean()	1	1
train_df.ix[:,1:9]	1	1
data[0] # age of passenger	1	1
train_copy['Sex_Category'] = 1	1	1
pd.merge(_, dummy_sex, left_index=True, right_index=True)	1	1
sub['Survived'] = Y	1	1
test_data.fillna(np.nan)	1	1
"datacv[""Fare""] = datacv[""Fare""].fillna(datacv[""Fare""].mean())"	1	1
"data.query('Pclass == 3 and Sex == ""female""');     data3['Age'] = data3['Age'].fillna(22)"	1	1
train_data['Embarked'] = train_data['Embarked'].apply(lambda x: replacement.get(x))	1	1
trainSet.loc[:, 'Survived']	1	1
family_survived.sum(axis = 1)	1	1
data.Fare.hist()	1	1
"X_test_dataset.drop(""PassengerId"", axis=1)"	1	1
df.drop('Sex',axis=1)	1	1
test_df['Survived'] = grid_soft.predict(X_test)	1	1
df.loc[df.Age.notnull(),feature_list]	1	1
sur_count.values,	1	1
train_data[['Age', 'Survived']].sort_values('Survived')	1	1
fam['per_capita'] = fam['Fare']/fam['Family_size']	1	1
df['famgp'] = df['famsize']/10	1	1
df_train['df_type'] = 'Train'	1	1
df_data['P_Ti_Code'] = label.fit_transform(df_data['P_Ti_AgeBin'])	1	1
OHE_training_data.drop('Survived',axis=1)	1	1
data.drop(['AgeBin'], axis=1, inplace=True)	1	1
train['famSize'] = train.SibSp + train.Parch	1	1
df.drop(['Ticket', 'Fare'], axis=1)	1	1
sub.to_csv('subm.csv', index = False)	1	1
"testdataframe2[""Parch""]= testdataframe[""Parch""]"	1	1
"test[""Big""] = False"	1	1
test['Age'] = test['Age'].apply(lambda x: 1 if x < 15 else 0)	1	1
train['Family'].loc[train['Family'] == 1] = 'Alone'	1	1
train_df['Survived'] = train_df['Survived'].astype(int)	1	1
test['Fare'] = test['Fare'].fillna(fare_mode[0])	1	1
test_df['MedF'] = test_df['Family'].map(lambda s: 1 if 3 <= s <= 4 else 0)	1	1
plt.rcParams['figure.figsize'] = (50, 50) ### Setting the size of the Plots	1	1
"x_train[""Parch""].plot.hist(alpha=0.5)"	1	1
df.drop(['PassengerId', 'Name', 'Ticket'], axis=1)	1	1
df_test.to_csv('SurvivedList.csv')	1	1
df_output[['PassengerId','Survived']].to_csv(index=False)	1	1
"total['Last_Name'] = total['Name'].apply(lambda x: str.split(x, "","")[0])"	1	1
dataset.drop('Cabin',inplace = True,axis = 1)	1	1
train['Embarked'] = train['Embarked'].replace(['S','Q','C'],[0,1,2])	1	1
data_test.drop(['PassengerId'], axis=1).copy()	1	1
dataset_train.Embarked.fillna('n',inplace=True)	1	1
train['Fare'] = pd.DataFrame(fare_scaled)	1	1
dataset.loc[ dataset['Age'] <= 10.368, 'AgeBand'] = 0	1	1
"df_train[""title_mrs""] = df_train[""title""].isin([""mrs."",""mme."",""mlle.""]).astype('uint8')"	1	1
dataset['Sex'] = dataset['Sex'].map( {'male': 0, 'female': 1} ).astype(int)	1	1
"test.loc[test[""Fare""].isnull(), ""Fare""] = clf.predict(X_Fare_n)"	1	1
"test_df.replace(""female"", 0).replace(""male"", 1)"	1	1
X_test_features.loc[:, 'Sex'] = labelencoder.transform(X_test_features.loc[:, 'Sex'])	1	1
acc.append(pd.DataFrame({'Model': 'Multinomial Naive Bayes', 'Accuracy': [accuracy_score(y_true, y_pred)]}))	1	1
test['P3'] = np.array(test['Pclass'] == 3).astype(np.int32)	1	1
X['Family'] = X['SibSp'] + X['Parch'] + 1	1	1
"sns.boxplot(x=""Survived"", y=""Age"", data=train_data)"	1	1
traindataset.head()	1	1
df_dums['Parch_0']=[1 if ele == 0 else 0 for ele in df_dums['Parch']]	1	1
test_analysed['PassengerId'],	1	1
combined_num_cat['Pclass'] = combined['Pclass']	1	1
full.drop(['ticket_header', 'Ticket'], 1);	1	1
df['Embarked'].mode()[0],	1	1
test_data['Cabin'].apply(lambda x: str(x)[0])	1	1
data['FirstName'] = data['FirstName'].str.strip()	1	1
np.mean(data)	1	1
submission.to_csv('Result_update.csv', index=False)	1	1
df[['Group_Category','Person_Class','Age_Missing']].values	1	1
raw_data['LowFare'] = np.where(raw_data['Fare']<=50, 1, 0)	1	1
ens_pred.head(10)	1	1
data_train['Embarked']=data_train['Embarked'].astype('category')	1	1
person['Person'] = full[['Age','Sex']].apply(get_person, axis=1)	1	1
test['Sex'] = test['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
frame.loc[(frame.Age >64) & (frame.Age<=80) , 'Age'] = 4	1	1
"dataframe.loc[dataframe.Cabin=='T',""Cabin""]='C'"	1	1
nosurvived_age.hist()	1	1
train.drop(columns=['Survived'])	1	1
family['Survived'] = full.Survived	1	1
"related_people.loc[related_people[""PassengerId""]==480,""RGroup""]=""Hirvonen_M"""	1	1
np.round(svc_rbf.score(X_valid_norm, Y_valid), 4)	1	1
cat_pipe.append(('extractor', DataFrameExtractor()))	1	1
test_copy.loc[test_copy['Sex'] == 'female', 'Sex_Category'] = 0	1	1
df.drop('Sex', axis=1)	1	1
test_df2['FareBand'] = pd.qcut(test_df2.Fare,7,labels=False)	1	1
raw_test['LogFare'] = raw_test['Fare'].apply(lambda x: np.log(x) if x > 0 else 0)	1	1
model.add(Dropout(.6))	1	1
df['NamePrefix'] = df['NamePrefix'].replace('Mlle', 'Miss')	1	1
"titanic_df.groupby([""Pclass"",""Embarked""]).mean()[""Survived""][2].plot.bar(ax=axes[1] )"	1	1
testOrg['family'] = np.where(testOrg['family']=='Y', 1, 0)	1	1
train_data[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
test_copy.loc[test_copy['Embarked'] == 'C', 'Embarked_Category'] = 1	1	1
sns.boxplot(train_data['Pclass'])	1	1
df['Group_Category'] = df.apply(categorize_group,axis=1)	1	1
test.set_index(index)	1	1
df['bigFamily']=0	1	1
data.columns.values	1	1
test['Sex'] = test['Sex'].map({'male': 0, 'female': 1}).astype(int)	1	1
test['Title']=test['Title'].replace('Mme','Mrs',regex=True)	1	1
data.drop(['PassengerId','Name','Ticket','Cabin','SibSp','Parch'],axis=1,inplace=True)	1	1
submission.head(n=10)	1	1
test['Child'] = [1 if i<10 else 0 for i in test.Age]	1	1
test.copy() # test data for Kaggle submission	1	1
X_train_dummies.head(5)	1	1
dataset.loc[(dataset['Familysize'] > 5.0) & (dataset['Familysize'] <= 7.5), 'Familysize_cat']   = 2	1	1
"data[""TicketPrefix""] = data[""Ticket""].str.extract(""(.*)\s+\d*$"")"	1	1
"df[""Fare""].fillna(df[""Fare""].mean(), inplace=True)"	1	1
"test[""Cabin""].fillna(test.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace = True)"	1	1
data.Cabin.notnull().rename('HasCabin').astype(float)	1	1
ax[1].set_title('IsAlone Survived')	1	1
data.append(row)	1	1
"df_train['Embarked'] = pd.Categorical(df_train[""Embarked""])"	1	1
"train_data.loc[train_data[""Cabin""].notnull() & train_data[""Cabin""].str.contains(""C""), ""CabinLetterC""] = 1"	1	1
train_data.loc[youngmissmask, 'Age'] = 9	1	1
predictions.drop('index',axis=1,inplace = True)	1	1
df.to_csv('nn_submission.csv', sep=',')	1	1
train.loc[(train['Age']<1)].Survived.mean() #Babies survived at higher rates - 100%	1	1
pd.isnull(train_data['Embarked'])	1	1
accuracies_rf.std()	1	1
"model[""best_score""] = grid.best_score_"	1	1
df_submission.to_csv('accountant_titanic_03.csv', index=False)	1	1
"test_data[""Title""][test_data[""Title""].str.contains(""Ms"")] = ""Miss"""	1	1
data_train.drop(['Name_length_Band'], axis=1)	1	1
output_lr.to_csv('logreg2.csv', index= False)	1	1
correl_train.corr()	1	1
trainingdata['Related'].loc[trainingdata['Related'] == 0] = 0	1	1
"all_df['child'] = ['child' if all_df[""Age""][i] < 18 else 'adult' for i in range(len(all_df))]"	1	1
dataset['Age'] = dataset['Age'].fillna(randint(1, 5))	1	1
df.Ticket_numerical.astype('O')	1	1
dataset_test.describe()	1	1
dataset.loc[(dataset.Age.isnull()) & (dataset.Sex ==i) & (dataset.Pclass == j+1),                       'Age'] = guess_ages[i,j]	1	1
df_data['Ti_Minor'] = ((df_data['Ti_Age']) < 14.0) * 1	1	1
"train_data.dtypes[train_data.dtypes != ""object""].index"	1	1
"combined[""Name_Length""] = combined[""Name""].apply(lambda x: len(x))"	1	1
df.loc[df[df['Fare'].isnull()].index, 'Fare'] = fare_prediction_linear_regressor.predict(df[features_for_fare_prediction][df['Fare'].isnull()])	1	1
dataset.groupby(['Embarked', variable]).size()['Q']	1	1
df.drop(['Ticket','Name', 'Embarked'], axis = 1)	1	1
titanic_predictors.select_dtypes(exclude=['object'])	1	1
merged_df['Embarked'] = merged_df['Embarked'].fillna(idxmax)	1	1
res_df_tol.head()	1	1
data_train.groupby(['Parch','Survived'])	1	1
Y.drop(self.column_name, axis=1)	1	1
train[['Ticket_Cat', 'Survived']].groupby(['Ticket_Cat'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
titanic['Age'].fillna(titanic['Age'].median(), inplace=True)	1	1
all_data.loc[i].at['Embarked'] in embarked_mapping:	1	1
a.append(self.activation(np.dot(a[l], self.weights[l])))  #Computer the node value for each layer (O_i) using activation function	1	1
groupsizes.unstack(c1)	1	1
train['Title'] = train['Name'].str.replace('(.*, )|(\\..*)', '')	1	1
testingset['Embarked'] = testingset['Embarked'].map(embarkedmapping)	1	1
grouped.index.labels[0] ; sex=grouped.index.labels[1] ; social_name=grouped.index.labels[2]	1	1
data['InNetwork'] = np.where(data.NetworkNum==0, 0, 1)	1	1
"gradients[""dW1""]"	1	1
Each_Passenger.loc[(Each_Passenger['Parch'] > 2) & (Each_Passenger['Parch'] <= 3 ) | (Each_Passenger['SibSp'] > 2) & (Each_Passenger['SibSp'] <= 3) , 'Parch'] = 3	1	1
prefix_data['HasTicketPrefix'] = prefix_data.Ticket.map(lambda ticket: (ticket.strip().find(' ') != -1))	1	1
"combined_df[""Fare""].mean()"	1	1
train['Title'].replace(['Mme'], 'Mrs', inplace=True)	1	1
"train[""Survived""],  # Make a crosstab"	1	1
train['CabinN3'] = pd.to_numeric(train['CabinN3'], downcast='integer')	1	1
X_train['Age'] = Norm(X_train['Age'])	1	1
train_df.loc[train_df['family_size'] > 0,'Alone'] = 0 #has family	1	1
data['SortFare_4'] = 0	1	1
train.drop(['Fare'], axis=1, inplace=True)	1	1
features['importance'] = rf.feature_importances_	1	1
age_train['Age']	1	1
data.to_csv('submission_svm.csv', index=False)	1	1
"test.drop(['Ticket','Name','family_size',""Fare"",'name_length'], axis=1, inplace=True)"	1	1
Ticket['Count'] = Ticket.groupby('Ticket')['Ticket'].transform('count')	1	1
"train_set.drop([""PassengerId"",""Survived"",""Ticket""],axis=1,inplace=True)"	1	1
train.Name.str.replace('(.*, )|(\\..*)', '').rename('Title')	1	1
train_df[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending= False)	1	1
test['Gender']	1	1
train.loc[train['Sex'] == 'male', 'Sex'] = 1	1	1
train.groupby([variable])[variable].count()/np.float(len(train))	1	1
df_train_ml.drop('Survived',axis=1)	1	1
testdata.ix[(testdata.Fare > 8.662) & (testdata.Fare <= 14.454), 'FareCategory'] = 2	1	1
data['Embarked']= data['Embarked'].fillna('S')	1	1
df_titanic['Medium'] = df_titanic['Family'].map(lambda i: 1 if 3 <= i <= 4 else 0)	1	1
train_dataset.loc[train_dataset.Family == 1,'IsAlone']=1	1	1
train['Survived'].value_counts(sort = False)	1	1
"titanic_train_dataframe[""NormalizedEmbarked""] = titanic_train_dataframe[""Embarked""].map({""C"": 55.36, ""Q"": 38.96, ""S"": 33.90})"	1	1
X_train1['Sex1'] = a1.transform(X_train1.loc[:,'Sex'])	1	1
test['Fare'].fillna(test.groupby('Pclass')['Fare'].transform('median'),inplace = True)	1	1
features['Importance'] = RFC.feature_importances_	1	1
"data[""Name""] = data[""Name""].str.replace(""Rev"",""Mr"")"	1	1
"data_test.drop(""PassengerId"", axis = 1, inplace = True)"	1	1
df['Pclass'] = df['Pclass'].apply(lambda x: p_class(x))	1	1
"combined_test[""PassengerId""],"	1	1
train_d['AgeBand']=pd.cut(train_d['Age'],5)	1	1
data['Age'] = mm.fit_transform(data[['Age']])	1	1
data_whole.tail()	1	1
"survived[""Fare""].plot.hist(alpha=0.5,color='green',bins=50)"	1	1
train.groupby('Survived').Age.hist(alpha=0.6)	1	1
x['Model'].predict(x_validation_normalized)	1	1
X_full.drop(['Age', 'Cabin'], inplace = True, axis = 1)	1	1
x_test['FamilySize'] = test_df ['SibSp'] + test_df['Parch'] + 1	1	1
dataset.drop(labels=['Name'], axis=1, inplace=True)	1	1
"dataset.loc[dataset[""Title""] == ""Mr"", ""Title""] = 1"	1	1
df_all.loc[df_all['Age'].isnull(),'Age']=df_all['Age'].mean()	1	1
"df_train[""AgeBand""] = pd.cut(df_train[""Age""], bins, labels = labels)"	1	1
train_df.columns.values[11]	1	1
trainPCA2['3'] = trainPCA['Pclass2']	1	1
train_df.drop(['CategoricalFare'],axis=1,inplace=True)	1	1
"data[""Sex""] = data[""Sex""].apply(lambda s: genders.get(s))"	1	1
titanic_train_data.drop(['Ticket', 'Name'], inplace=True, axis=1)	1	1
"test_df['Title'] = test_df['Title'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
titanic.loc[:, idx]	1	1
"full.groupby(full[""Family""]).mean()[""Survived""]"	1	1
df_train['Sex'] = df_train['Sex'].map(di)	1	1
X_train.mean()	1	1
X_comparison['Predicted'] = pred	1	1
tf.add(tf.matmul(layer_1, weights_2),bias_2)	1	1
dataset.loc[(dataset['Fare']>31)&(dataset['Fare']<=513),'Fare_cat']=3	1	1
"test_df[""Sex""] = train_df[""Sex""].map(lambda x: 1 if x == ""male"" else 0)"	1	1
x_test['FamilySize_11'] = x_test['FamilySize'].apply(lambda x: 1 if x > 8 else 0)	1	1
"x.replace(',',' ').replace('.',' ').replace('(',' ').replace(')',' ').replace('""',' ').replace('-',' ')"	1	1
trainPCA2['3'] = trainPCA[:,2]	1	1
titanic['Fare_range'] = pd.qcut(titanic['Fare'],3, labels=False)	1	1
"comb.drop(""Age"",axis=1)[comb.Age.notnull()]"	1	1
ax[1].set_title('Survivied vs Dead')	1	1
data.loc[0,'Name']	1	1
train['Embark']=train['Embarked'].apply(lambda x:0 if x=='S' else (1 if x=='C' else 2)) ## making value as number to help apply regression and stuff easier	1	1
titanic.drop(['PassengerId','Name','Ticket'],1)	1	1
output.head(5)	1	1
train['Title'] = [i.split('.')[0] for i in train.Name]	1	1
sns.boxplot(data=train,x='Pclass',y='Age',hue='Survived')	1	1
df['isAlone'] = np.where((df['SibSp'] == 0) & (df['Parch'] == 0) , 1, 0)	1	1
all_data[['Sex', 'Survived']].groupby(['Sex'], as_index = False).mean().sort_values(by = ['Survived'], ascending = False)	1	1
tr[['Embarked', 'Age',  'Parch', 'Pclass', 'Name',  'Survived']].fillna(0)	1	1
svc_cv.best_params_['degree'],	1	1
test['Alone']  = (test['SibSp'] + test['Parch']) == 0	1	1
data.Title.replace(['Dr', 'Rev', 'Col', 'Major', 'Sir', 'Capt', 'Lady', 'Jonkheer',                                    'Dona', 'Don', 'the Countess'], 'Other', regex=True)	1	1
"test[[""Title""]] = test[[""Title""]].replace('Mme', 'Mrs')"	1	1
"cvs[""Score_high2z""]=score.mean()+score.std()*3"	1	1
df_train['Pclass'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'], ax=ax[0])	1	1
"data[""Sex""] = data[""Sex""].apply(sex)"	1	1
data.loc[data.Age.notnull(),] #to check normal distribution	1	1
train_df.loc[train_df['Survived'] == 1, 'Age'].dropna(axis = 0)	1	1
combine_df['Embarked'][(combine_df['Cabin']=='B28')] = 'S'	1	1
combined['Name']	1	1
final_test.drop(['Survived'], axis=1)	1	1
xtrain.drop('Survived', axis=1, inplace=True)	1	1
clf.add(Dense(output_dim = 8, init = 'uniform', activation = 'tanh'))	1	1
"train[""Cabin_type""] = cabin_type(train)"	1	1
combined_df[['Age', 'Prefix']].groupby('Prefix').median()	1	1
"titanic_test[""Fare""].fillna(titanic_test[""Fare""].median(),inplace=True)"	1	1
train.shape[0] #set for prediction model	1	1
titanic_dmy.loc[titanic_dmy.Survived.isnull()]	1	1
data.Age.fillna(data.Age.mean())	1	1
train_df['Ticket_XXX'] = train_df['Ticket_' + extra]	1	1
tr.isnull().sum()	1	1
"combined.loc[cp,""Age_cat""] = ""Middle Age"""	1	1
with_age.drop('Age', axis=1)	1	1
train['MedF'] = train['Fsize'].map(lambda s: 1 if 3 <= s <= 4 else 0)	1	1
"df2.style.set_caption(""Male travels alone"")"	1	1
dataset['middleClass'] = np.where(dataset['Pclass']==2,1,0)	1	1
Corr.loc[var[1],'Chi 2 Pval']= Cramer_Chi2(confusion_mat)[2]	1	1
titanic_final['PassengerId']	1	1
test['P1'] = np.array(test['Pclass'] == 1).astype(np.int32)	1	1
titanic_test['Fare'][titanic_test['Fare'].isnull()] = titanic_test['Fare'].median()	1	1
data_train.drop(['Survived'], axis=1)	1	1
dataset.loc[(dataset['Age']>40)&(dataset['Age']<=60),'Age_range']=2	1	1
titanic['Embarked']=titanic['Embarked'].fillna('S') # The most common value!	1	1
iset['Name_Title'] = iset['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	1	1
titanic.Age.head(20)	1	1
data.drop(['SibSp','Parch'],axis=1)	1	1
sc.transform(titanic_3features)	1	1
scores.append(accuracy)	1	1
y[2] == np.nan:	1	1
clfs.append(clf)	1	1
ax[1].set_title('Pclass-Survived vs Dead')	1	1
df['relations']=df['SibSp']+df['Parch']	1	1
train_data.drop(['Name'],axis=1)	1	1
data_out['Salutation'] = data_out['Salutation'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
acc.append(pd.DataFrame({'Model': 'Bernoulli Naive Bayes', 'Accuracy': [accuracy_score(y_true, y_pred)]}))	1	1
Test_data.drop(['source', 'Survived'],axis=1,inplace=True)	1	1
ax[5][0].set_ylabel('Fare', rotation=0, labelpad=80)	1	1
train_df.describe() # Describing numerical data	1	1
training_set.pivot_table('Survived', sibsp_intervals, 'Sex').plot(kind='bar')	1	1
test_data.drop(labels='Cabin', axis=1, inplace=True)	1	1
data_train['Survived'].loc[data_train['Embarked']=='C'].value_counts()	1	1
gender['Survived'].values	1	1
data['Title']=data['Name'].map(lambda x: substrings_in_string(str(x), title_list))	1	1
dataset.loc[ dataset['Fare'] > 79.2, 'Fare'] = 3	1	1
Y['Embarked'] = labelencoder_Y2.fit_transform(Y['Embarked'])	1	1
dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} )	1	1
testdata['Age']	1	1
"df[""AgeGroup""] = 'Child'"	1	1
"cleaned_train[""Age""].std()"	1	1
data_test['FamilySize_scaled'] = scaler.transform(data_test['FamilySize'].values.reshape(-1, 1), familysize_scale_param)	1	1
"X[""Age""]=X[""Age""].fillna(np.mean(X[""Age""]))"	1	1
X_train_dataset.head()	1	1
output.to_csv('titanic-predictions13.csv', index = False)	1	1
test.groupby(['Pclass'])	1	1
data.sons.loc[data.PassengerId==918] = 1	1	1
test.join(st)	1	1
np.std(X_train_raw,axis=0,keepdims=True)	1	1
featstats['featimp'] = clf.feature_importances_	1	1
df_all.isnull().sum()/len(df_all)	1	1
submission.to_csv('submission_soft_vct.csv', index = False)	1	1
"data_df[""Deck""] = data_df[""Cabin""].str.slice(0,1)"	1	1
"data[""Name""] = data[""Name""].str.replace(""Jonkheer"",""Mr"")"	1	1
csv_final_test.describe()	1	1
trainData['Parch'].plot(kind='box')	1	1
"df3_test[[""Pclass"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked_C"", ""Embarked_Q"", ""Embarked_S"", ""Sex_male""]]"	1	1
sns.boxplot(x='Age',y='Title',data=combined).set(title='TITLE vs AGE')	1	1
params_init['metric'] = 'binary_logloss'	1	1
"result.to_csv(""DecisionTree_base.csv"", index = False)"	1	1
df_train.drop(['Name', 'Ticket'], axis=1, inplace=True)	1	1
test.groupby('Survived').PassengerId.count()	1	1
"dataset[""Title""] = dataset[""Title""].replace(['Ms', 'Mlle'], 'Miss')"	1	1
X.astype(float)	1	1
X_all.iloc[:,7] = le.fit_transform(X_all.iloc[:,7])	1	1
data.select_dtypes(exclude = ['number'])	1	1
"combined.loc[f_group.index,""family_has_children""] = n_children"	1	1
"axs4[1].set_title(""People who survived"", fontsize=20)"	1	1
trainCpy.drop('Survived', axis=1, inplace=True)	1	1
WC_count.append(new_WC_count)	1	1
test['Fare'] = test['Fare'].fillna(value=avg_test_fare)	1	1
cleaned_df.drop(['Name','Sex','Ticket','Cabin','Embarked'],axis=1)	1	1
combine['LuckyElizabeth'] = np.where((combine['FirstName']=='Elizabeth'),1,0)	1	1
df['Fare'] = df['Fare'].fillna(a.median())	1	1
train_df.copy() # train_df_bins という作業用コピー上でビニングを試す	1	1
train_df_with_family.drop('FamilyId_x', axis=1, inplace=True)	1	1
df['Embarked'].fillna( df['Embarked'].median(), inplace = True)	1	1
acc_train.append(ev_train[1])	1	1
df_final['Fare'].fillna(df_final[(df_final['Pclass'] == 3) &                                  (df_final['Embarked'] == 'S')]['Fare'].dropna().median(), inplace=True)	1	1
"processed_features[""Pclass""] = (processed_features[""Pclass""] - processed_features[""Pclass""].min()) / (processed_features[""Pclass""].max() - processed_features[""Pclass""].min())"	1	1
train.Name.replace('Mme','Mrs')	1	1
data['Title1'].unique()	1	1
titanic.Embarked.mode()	1	1
"ALL_DATA[""FamilySize""].unique()"	1	1
df_analysis.dropna().copy()	1	1
train.Embarked.isnull().nonzero()	1	1
train_data.drop(['Name', 'FName'], axis=1, inplace=True)	1	1
train['Familysize'].max()	1	1
df_full['Ticket']:	1	1
plt.rcParams['patch.force_edgecolor']= True	1	1
etc_feat_red.transform(etc_red_train)	1	1
combined['title'] = combined['encodedTitle'].astype(int, copy=False)	1	1
df.Cabin.fillna('O', inplace = True)	1	1
"train_df[""Sex""] = train_df[""Sex""].map(lambda x: 1 if x == ""male"" else 0)"	1	1
data.groupby('Age').Survived.value_counts(dropna=False)	1	1
"data.loc[data[""Cabin""].notnull(), ""Cabin""] = ""Known"""	1	1
PssID_df.head()	1	1
deck['deck']=levels	1	1
test_df1['AgeGroup'] = pd.cut(test_df1['Age'],bins,labels = labels)	1	1
test.Name.replace('Dr','Master')	1	1
row['Sex'] == 0 and row['Family'] == 0 and row['Age'] >= 18:	1	1
titanic_train['Age'].median()	1	1
T[0].astype(int)	1	1
scaler.transform(original_test)	1	1
"test.drop(""Cabin"", axis = 1)"	1	1
"model_data.loc[:,""Sex""] = label.transform(model_data.loc[:,""Sex""])"	1	1
combined_df.loc[combined_df['Age'] >= 64, 'age_group'] = 1	1	1
Titanic.head(4)	1	1
"df_train[""norm_fare""]= (df_train[""Fare""]-fare_mean)/fare_std"	1	1
"df[""Has_Cabin""] = 0"	1	1
df.loc[((df.MisAge == 0) & (df.Pclass == 3)) , 'MA_Cl'] = 3 #poor with age	1	1
test.loc[test['Sex']=='female','SexCategorical'] = 1	1	1
"X_valid_bin.drop([""Pclass"", ""SibSp"", ""Parch"", ""Age"", ""Fare""], axis=1, inplace=True)"	1	1
data.drop(labels='Ticket', inplace=True, axis=1)	1	1
dataset['Family_Size'] = dataset['Parch'] + dataset['SibSp']	1	1
"train_data['AgeGroup'] = pd.cut(train_data[""Age""], bins, labels=labels)"	1	1
dat.shape[0] == 1 or not any(dat.Age <= 6):	1	1
df_features['Name'].head(5)	1	1
full['Title'] = full['Title'].replace('Ms', 'Miss')	1	1
one_hot_train.drop('Title_Noble_male', axis = 1)	1	1
titanic['Age']=titanic[['Age','Pclass']].apply(calc_age,axis=1)	1	1
titanic_test.drop(columns=['Embarked','Cabin','Name','Ticket','PassengerId'],axis=1)	1	1
all_df.drop([i], axis = 1)	1	1
secondtime_train_data.dropna()	1	1
merged_df.isnull().any()	1	1
df['name_length_long'] = df['name_length'].apply(lambda s: 1 if s > 58 else 0)	1	1
i['Title'] = i['Title'].map(mapping)	1	1
training_data.loc[(training_data['Age'] >30)].loc[(training_data['Age']<=60 )]	1	1
raw_train.isnull().sum()	1	1
"tp.loc[tp[""Title""]==""Others"",""Title_c""] = 5"	1	1
train.loc[train['Sex']=='female','SexCategorical'] = 1	1	1
train_df['Age']=train_df[['Age','Pclass']].apply(age_mean,axis=1)	1	1
df_train.loc[:,('PassengerId','CabinGrp','Pclass')].groupby(['Pclass','CabinGrp']).agg('count')	1	1
concat_set['Age'].std()	1	1
df_submission['cabin'] = df_submission['cabin'].apply(cleaner_lambda)	1	1
df['Name'].apply(lambda x: x.split(',')[0])	1	1
df['Sex'] = df['Sex'].astype(int)	1	1
Test.drop('Name',axis=1)	1	1
testOrg.drop(['PassengerId','Name','Ticket'], axis=1)	1	1
"all_data[""Embarked""].fillna(freq_port, inplace = True)"	1	1
"data.drop(""Cabin"",axis=1,inplace=True)"	1	1
self.missing_values.index.values,	1	1
qaxis[2].set_title('Sex vs IsAlone Survival Comparison')	1	1
"X_data[""Age""].dropna(inplace=False)"	1	1
all['Fsize'] = all['SibSp']+all['Parch'] +1 # Including self	1	1
test['Fare']=test.Fare.fillna(test.Fare.mean())	1	1
"train_data[[""Sex"", ""Survived""]].groupby(""Sex"", as_index = False).mean().sort_values(by = ""Survived"", ascending = False)"	1	1
"train_df[""Title""] = train_df.Name.map(get_title)"	1	1
test_dataset.loc[(test_dataset['Age'].isnull()) & (test_dataset['Title']=='Rare'),'Age'] = 44	1	1
dataset_train['Fare_Group'] = (dataset_train['Fare']/25).values.astype(np.int64)	1	1
"train_data.loc[train_data[""Cabin""].notnull() & train_data[""Cabin""].str.contains(""B""), ""CabinLetterB""] = 1"	1	1
family_data.drop(['SibSp','Parch'], axis=1)	1	1
temp['ParentsChildren'] = temp['ParentsChildren'].apply(lambda x: 1 if x > 0 else 0)	1	1
training_data['Ticket_Len'] = training_data['Ticket'].apply(lambda x: len(x))	1	1
train.groupby(['Cabin_Cat'])['Cabin_Cat'].count()/np.float(len(train))	1	1
"df_train[""Title""] =  df_train[""Name""].apply(get_title, args=(title_Regex,))"	1	1
df.loc[((df.Sex == 1) & (df.Pclass == 3)) , 'Se_Cl'] = 3 #poor male	1	1
np.median(et_score)	1	1
df_test['Survived'] = model.predict(X_test)	1	1
dataset.loc[ dataset['Fare'] <= 10, 'Fare'] = 1	1	1
"train[""Embarked""]=train[""Embarked""].astype(str)"	1	1
df_test.loc[ (df_test.Sex == 'female') & (df_test.SibSp > 7) , 'Survived'] = 0	1	1
le_title.transform(test_data['Title'])	1	1
Y.head(2)	1	1
data.loc[(data.Fare>14.3)&(data.Pclass==2), 'PassengerCat']=2	1	1
outputCSV.head()	1	1
"X_validation[""Mother_col""] = ""Not Mother"""	1	1
dfte['PassengerId']	1	1
dataset['CabinBand'] = 0	1	1
trainingset['Embarked'] = trainingset['Embarked'].map(embarkedmapping)	1	1
data.loc[(data.FamilySize == 2), 'FamilySizeBand'] = 2	1	1
grouped.index.labels[2]	1	1
_df.loc[df.ticket == t, :].index	1	1
train_data.Embarked.replace(embarked_val)	1	1
plt.hist(train['Survived'], bins = 3)	1	1
train_df.columns.values # This shows the column titles for the training set	1	1
test.loc[(test['Pclass'] == 2) & (test['hasCabin1'] == 0), 'class_hascabin'] = 5	1	1
all_data['Title'] = all_data['Title'].replace(['Ms','Mlle'],'Miss')	1	1
dataset.Fare.hist()	1	1
train.drop('Cabin', axis=1)	1	1
trainingset['Age'] = trainingset['Age'].fillna(-0.5)	1	1
train_data.loc[train_data['Sex'] == 'male', 'Sex'] = 0	1	1
train['Mark']='train'	1	1
"vol[""Catboost""]=np.max(cv_data['Accuracy_test_avg'])"	1	1
full['FamilySurvivalRate'] = full.groupby(['FamilyName'])['Survived'].transform(lambda x: x.mean())	1	1
df.reindex(np.random.permutation(df.index))	1	1
titanic_df['PassengerId'].unique()	1	1
df[['Age', 'Fare']].hist()	1	1
df['useful_ticket_type'].unique()	1	1
df_train['Ticket'].describe()	1	1
df['Embarked'] = df['Embarked'].replace(['S', 'C', 'Q'], range(3))	1	1
train_x['Age'].mean()	1	1
combined_df['Title'].value_counts()	1	1
combine['FareBins'] = pd.cut(combine['Fare'],[-1,0,5,8,10,20,30,40,50,100,150,200,250,300,400,550],labels=       ['0','0_5','5_8','8_10','10_20','20_30','30_40','40_50',        '50_100','100_150','150_200','200_250','250_300','300_400','400_550'])	1	1
"test_dataset[""Age""].std()"	1	1
temp.loc[mrsmask, 'Age'] = 35	1	1
test_df.drop(['Ticket', 'Cabin','Name','SibSp', 'FamilySize','Parch','n_on_ticket'], axis=1)	1	1
dataFrame['Title'] = dataFrame['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	1	1
test_data.astype('float')	1	1
title_ages.describe()	1	1
test_set.drop('Survived',axis=1)	1	1
testset[['Fare', 'Age']].apply(is_neginf, axis=1)	1	1
fresh_df.head()	1	1
"X_logistic[""Cabin""].unique():"	1	1
X_train.iloc[:,[1]] = X_labelencoder_1.fit_transform(X_train.iloc[:,[1]])	1	1
num_features.insert(0,'Survived')	1	1
"axes[1].bar(idx, 1 - survival_ratios, width, bottom=survival_ratios, color='#f0f0f0', label=""Not survived"")"	1	1
combined_data.groupby('Title')	1	1
dataset['Sex'] = dataset['Sex'].astype(int)	1	1
test_df.loc[test_df['Fare'].idxmax()]	1	1
data.drop(drop_col,axis=1)	1	1
train_df['Fare'].min()	1	1
"data[""has_cabin""] = ~data.Cabin.isnull()"	1	1
df_train['AgeBin'].unique()	1	1
axis1.spines['right'].set_linewidth(0)	1	1
test_df['aile_boyut']=test_df['SibSp']+test_df['Parch']	1	1
titanic_df['AgeExists'] = titanic_df['Age']	1	1
traindf.dropna().describe()	1	1
dataset['Age'][dataset['Age'].isnull()] = age_null_count	1	1
train_df_concat['name_second_place'] = np.array(name_second_place)	1	1
test1['Dataset'] = 'Test Data'	1	1
le.transform(df_train[f])	1	1
"dataset[""Title""] = dataset[""Title""].replace(['Mme'], 'Mrs')"	1	1
data['Ticket_info'].unique()	1	1
W2_tr.shape	1	1
df.reset_index().melt(id_vars=['index','model'])	1	1
test['cabin'].fillna('U', inplace=True)	1	1
df['Family_size'] = df['Parch'] + df['SibSp']+1	1	1
model.add(Dense(train_X.shape[1]+10, activation='relu',input_shape=train_X.shape[1:]))	1	1
dataset.loc[index, 'Deck'] = Cchoice	1	1
test['Title']=test['Title'].replace(['Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev'],'officer')	1	1
"train[[""Survived"", ""Fare""]].groupby(by=feat).mean().reset_index()"	1	1
df['Title'] = df['Name'].apply(lambda n: str(set([w for w in n.split()]) & set(titles)) )	1	1
"X_train[""Age""].fillna(X_train[""Age""].median(), inplace=True)"	1	1
dataset.groupby(['title']).Age.agg(['mean', 'median', 'std', 'max'])	1	1
imputed_frame.loc[combined_df.Age.isnull(), ['Age']] = predictions	1	1
"train[""istrain""] = 1"	1	1
train.append(test, sort=True).groupby('Title')['Age'].mean()	1	1
dataset['EditedAge'][rowIndex] <= 55:	1	1
df['Age_bin'] = pd.cut(df['Age'], bins=[-1,0,5,12,20,40,120], labels=['Unkown','Baby','Children','Teenage','Adult','Elder'])	1	1
x_train['Cabin_num'] = x_train['Cabin'].map(lambda x: 0 if pd.isnull(x)  else len(x.split()))	1	1
train_df.loc[[0]]	1	1
model.add(Dense(units = 128, kernel_initializer = 'uniform', activation = 'relu', input_dim = X_train.shape[1]))	1	1
train_df.groupby(['survived']).size().plot.pie(autopct='%.2f%%')	1	1
titanic_train.join(embark_dummies_titanic)	1	1
died_data.loc[died_data['Sex']=='male',:]	1	1
sub['EMBARKED'] = sub['EMBARKED'].fillna('S')	1	1
"train.drop([""Survived"", ""Name"", ""Ticket""],axis=1)"	1	1
train.drop(['PassengerId','Name','Ticket','Cabin','SibSp'],1)	1	1
test_df['Lastname'], test_df['Name'] = test_df['Name'].str.split(',', 1).str	1	1
pd.notnull(G.node[Passenger]['MaidenName1']):	1	1
train.drop(to_drop, axis=1)	1	1
"solution.to_csv(""xgb_sol.csv"", index = False)"	1	1
df['FamilySize'] = df.SibSp+df.Parch+1	1	1
"New_Df[""Cabin""] = New_Df[""Cabin""].str.replace(""T"", ""U"")"	1	1
dataset['Title'] = dataset['Name'].apply(lambda x: x[x.find(', ') + 2:x.find('.')])	1	1
data.name_title.replace(rare_titles,' Rare Titles', inplace = True)	1	1
submission.to_csv('voi_titanic_submission1.csv', index=False)	1	1
parameters['minibatch_size']	1	1
"titanic_test_df[""Fare""] = titanic_test_df[""Fare""].fillna(titanic_test_df[""Fare""].median())"	1	1
test.loc[((test['Age']/0.5)%2 == 0) & (test['Age'] >= 1.0), 'hasAge'] = 1	1	1
"train_data[""BigFamily""] = (train_data[""Family""] > 3).astype(int)"	1	1
train_dataset_raw.describe(include = 'all')	1	1
sns.boxplot(x='Embarked_S', y='Age', hue='Survived', data=df3)	1	1
"titanic_train.drop([""PassengerId"", ""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Age"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked"", ""cabin_na"", ""age_range""], axis= 1)"	1	1
"test_age1.loc[:, [""PassengerId"", ""AgeBin_Code""]]"	1	1
X_df.head()	1	1
"train_data[""Age_Group""]=train_data[""Age_Group""].astype(int)"	1	1
model_results.append(lr1_results)	1	1
enc.transform(encodedData[['Pclass','SibSp']])	1	1
test.loc[(test.Age.isnull()), 'Age' ] = y2_pred	1	1
df_tr_test.iloc[:,:].values.tolist()	1	1
train['Sex'] = train['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
scikit_result[55]	1	1
"train.groupby([""Sex"",""Pclass""],as_index=False).count().loc[:, [""Sex"",""Pclass"",""Survived""]].rename(columns={""Survived"":""count""})"	1	1
"ax[1].set_title(""Sex and Age vs Survived"")"	1	1
"res_c[""param_max_depth""]"	1	1
train_data.groupby(['SibSp'])['Survived'].count().plot.bar(stacked = True, ax = axes[0])	1	1
test_data['Age'].fillna(value = np.mean(test_data['Age']), inplace = True)	1	1
train.loc[(train['Age']>1) & (train['Age']<16)].Survived.mean() #Kids between 1-16 survived at ~54% rates	1	1
dataset.loc[(dataset['Age']>48)&(dataset['Age']<=64),'Age']=3	1	1
"titanic_training_data[""NameLength""] = titanic_training_data[""Name""].apply(lambda x: len(x))"	1	1
data_test.loc[data_test['PassengerId'] == 1116]	1	1
"factors[""f_Single""]=1"	1	1
df.head() #which feature are still categorical	1	1
le1.transform(test.as_matrix(columns=['Sex']))	1	1
test1.drop(unwanted,axis=1)	1	1
df.drop('Sex', 1).drop('Embarked',1).drop('Cabin',1).drop('Name',1).drop('Age',1).drop('Ticket',1)	1	1
test_dataset.drop(['Name', 'Ticket', 'Cabin'], 1)	1	1
"train_data.loc[train_data[""Embarked""] == ""Q"", ""Southampton""] = 1"	1	1
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data=train, ax = ax[0]);"	1	1
data['Title']=data['Title'].str.replace('Miss.','125')	1	1
row['Boy'] and (row['Surname'] in boysSurvived):	1	1
dataset_train['Fare'].fillna(dataset_train['Fare'].mean(), inplace = True)	1	1
"data[""Survived""].values"	1	1
dataset['Cherbourg'] = dataset.Embarked.map(lambda x: 1 if x == 'C' else 0)	1	1
Each_Passenger.loc[(Each_Passenger['Age'] > 80) & (Each_Passenger['Fare'] > 513), 'Age'];	1	1
tit['Survived']	1	1
train_df.drop('AgeCategorical', 1, inplace=True)	1	1
"train[""Pclass""] = train[""Pclass""].map({1: 'Class1', 2: 'Class2', 3: 'Class3'})"	1	1
imp.sort_values('importance',ascending=False).set_index('feature')	1	1
"family_df_tr[""Fsize""] = family_df_tr.SibSp + family_df_tr.Parch + 1"	1	1
test['Survived'] = sub_preds	1	1
lbl.transform(list(big[col].values))	1	1
AverageFamilies.loc[((train['Age']>20) & (train['Sex']=='female') | (train['Age']<19))]	1	1
train[['Title', 'Age']].groupby('Title')['Age'].mean()	1	1
"v_data[""Fare""] = pandas.cut(v_data[""Fare""], bins=[0,10,50,100,600], labels=fare_labels, include_lowest=True).factorize()[0]"	1	1
test_df['Sex_d'] = (test_df.Sex=='male').astype(int)	1	1
test_data.drop(labels=['SibSp', 'Parch'], axis=1, inplace=True)	1	1
train.isnull().sum() # 이렇게 NaN(null) 값을 표시할 수도 있다	1	1
pd.isnull(age)==1:	1	1
df.embarked.fillna(-1)	1	1
titanic_train.Age.fillna(age_mean,inplace=True)	1	1
data['Title'] = data['Title'].replace(['Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer'], 'Mr')	1	1
train.loc[(train['Title'] == title) & (train['Age'].isna()), 'Age'] = titleagemeans[title]	1	1
df.drop(['Name','Ticket','PassengerId'], axis=1, inplace=True, errors=False)	1	1
titanic_df['Survived'].groupby(titanic_df['Sex']).value_counts().unstack()	1	1
sur_by_age.sort_index()	1	1
test.drop(['PassengerId','Name','Ticket','Cabin','SibSp'],1)	1	1
"Titanic[""Cabin""] = Titanic.apply(lambda obs: ""No"" if pd.isnull(obs['Cabin']) else ""Yes"", axis=1)"	1	1
gs_metrics.iloc[3, 5]	1	1
vd[['PassengerId','Survived']].to_csv('output.csv', index=False)	1	1
"_df[""_cabin""]    = _df._cabin.apply(lambda i : i[0].split("" ""))"	1	1
df.loc[(df.Pclass == 3) & (df.Embarked == 'C'), 'Fare'].median()	1	1
data_test['Fare_scaled'] = scaler.transform(data_test['Fare'].values.reshape(-1, 1), fare_scale_param)	1	1
df_real_test['Cabin'] = df_real_test['Cabin'].fillna('None')	1	1
"KNN_result[2][""best_model""]"	1	1
data_test.Fare.fillna(0, inplace = True)	1	1
titanic_df['person'] = titanic_df[['Age','Sex']].apply(titanic_children,axis=1)	1	1
train_copy.loc[train_copy['Fare'] > 31.0, 'Fare_Category'] = 3	1	1
test_data.drop('PassengerId',inplace=True,axis=1)	1	1
"X[""Sex""] = X[""Sex""].apply(lambda x:1 if x == ""male"" else 0)"	1	1
df['Alone'] = np.where(df.Family_size == 1, 1, 0)	1	1
pre_process_pipeline.transform(test_data)	1	1
X_test.fillna(X_test.mean())	1	1
evaluation_stat['type'] = model	1	1
tmp_scaled[['Embarked_C', 'Embarked_Q', 'Embarked_S']].copy()	1	1
full.set_value(829, 'Embarked', 'S');	1	1
data.loc[data['Age'] <= 16, 'AgeGroup'] = 1	1	1
df['CategoryFamilySize'] = pd.cut(df['FamilySize'], bins=5)	1	1
tr['Deck'] =tr['Deck'].replace('G',8)	1	1
train.groupby(['Parch'])[['Survived']].count()	1	1
X.loc[:,'Age'].mean()	1	1
train_df['Age'][np.isnan(train_df['Age'])] = age_null_random_list_train	1	1
titanic_data.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)	1	1
train_data.loc[pd.isnull(train_data['Embarked'])]	1	1
dataset.loc[(dataset.Age.isnull())&(train.Initial=='Master'),'Age']=5	1	1
train.drop('Survived', 1, inplace = True)	1	1
titanic_test_data.loc[titanic_test_data.Cabin.str[0] == 'G', 'Cabin'] = 7	1	1
tit_df.head(5)	1	1
titanic_df['Person'] = titanic_df[['Age', 'Sex', 'Pclass']].apply(get_person,axis=1)	1	1
train_df['Embarked'].value_counts(dropna=False)	1	1
data_test['Deck'] = data_test.Cabin.str.slice(0,1)	1	1
fam_df['PassengerId'][(fam_df['Survived'] == 0)&(fam_df['Age'] >14)&(fam_df['Sex']=='male')].count()	1	1
clean_means.append(train[train['Ticket'].str.isdigit()]['Fare'].mean())	1	1
NN_submission['Survived'] = survived	1	1
gbc_rfecv.transform(gbc_rfecv_test)	1	1
titanic.loc[titanic.Cabin.str.len() == 5,:]	1	1
test.drop(Columns_to_drop, axis=1, inplace=True)	1	1
dat['Age'] = categories	1	1
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data=test)"	1	1
data_one.drop(['Survived'],axis=1)	1	1
group['Ticket_code'] = full.Ticket.map(dict_tcode)	1	1
dataset.drop(['Cabin'], axis=1, inplace=True)	1	1
Titanic_Master['Pclass_t'] = Pclass_t	1	1
join_data['FamilySize'] = join_data['Parch'] + join_data['SibSp'] + 1	1	1
df_j['age'].median()	1	1
"titanic[""Embarked""].value_counts(normalize = True)"	1	1
df.fillna({'Age':mean_age})	1	1
submission.to_csv('titanic-svm.csv', index=False)	1	1
test_copy['High_Fare_Female'] = Fare_high_female	1	1
"test_data[""Age""].fillna(random_age_test, inplace=True)"	1	1
test['Shared_ticket'] = 0	1	1
test_Pclass.astype(int)	1	1
test_set.isnull().values.any()	1	1
People_Survived[['Embarked','PassengerId']].groupby('Embarked').count()	1	1
tf.round(tf.nn.sigmoid(output_layer), name = 'prediction')	1	1
model_results['KNN'] = np.mean(scores)	1	1
"titanicDF[""SibSp""].value_counts().plot.pie()"	1	1
"data[""Fare""] = data.groupby(""Pclass"")[""Fare""].transform(lambda x: x.fillna(x.mean()))"	1	1
"data[""Age""] = data.apply(lambda row : fillna_age(row, medianage) if np.isnan(row['Age']) else row['Age'], axis=1)"	1	1
models.append(('LGBM', LGBMClassifier()))	1	1
dataset.groupby(['MisAge', 'Pclass']).size().unstack(0)	1	1
dataset.loc[dataset['Age']<=16,'Age_band']=0	1	1
test_df_imputed.drop('Age_x', axis=1, inplace=True)	1	1
dataframe['SibSp'] + dataframe['Parch']	1	1
inputData['Embarked'].values.tolist()	1	1
dataset['Cherbourg'] = np.where(dataset['Embarked']=='C',1,0)	1	1
submission['Survived'] = test_result	1	1
df.dropna().info()	1	1
train['Fammems'] = train['Parch'] + train['SibSp']	1	1
data.loc[(data.Fare<=60.00)&(data.Pclass==1), 'PassengerCat']=1	1	1
"df_train.hist(""Survived"", by = ""cab"",figsize = [10,10])"	1	1
"dataset_t2[""PassengerId""]"	1	1
"train_data['Fare'][train_data[""Survived""] == 1]"	1	1
dfTrain.drop(['Title'],axis=1,inplace=True)	1	1
"dataset[""Title""] = dataset[""Title""].map({""Master"": 0, ""Miss"": 1, ""Ms"": 1, ""Mme"": 1, ""Mlle"": 1, ""Mrs"": 1, ""Mr"": 2, ""Rare"": 3})"	1	1
data['Alone'] = data.Families.map(lambda x: 0 if x > 1 else 1)	1	1
df_titanic['IsFemale'] = (df_titanic['Sex'] == 'female').astype(int)	1	1
data.groupby(['Pclass','Sex']).Age.median().unstack()	1	1
df.loc[idx_ok, ['Age', 'SibSp']].values	1	1
train.pivot(columns='age_cuts',values='Survived').mean()*100	1	1
train_data['Embarked'].fillna('S',inplace=True)	1	1
test6['FamilySize'] = test6['SibSp'] + test6['Parch'] + 1	1	1
"axes[0].set_title(""Gender vs Frequency"")"	1	1
df1.fillna(0, inplace = True)	1	1
training_data['Name_Len'] = training_data['Name'].apply(lambda x: len(x))	1	1
dataset.loc[(dataset['Age'] > 64) & (dataset['Age'] <= 80), 'Age5'] = 1	1	1
all_data['Embarked'] = all_data['Embarked'].fillna('C')	1	1
clf.estimators_[0], out_file=None, feature_names=feats, filled=True,	1	1
"full_df.loc[np.isnan(full_df[""Age""]), ""AgeFill""] = rand_1"	1	1
"titanic_test_df[""Familysize""] = titanic_test_df[""SibSp""] + titanic_test_df[""Parch""]"	1	1
transformed_df['Sex'] = sex.Sex	1	1
"df[""Title""] = df[""Title""].replace('Ms', 'Miss')"	1	1
my_imputer.transform(final_test)	1	1
comb_data.drop(labels = ['Name', 'Ticket', 'PassCountTicket'],axis = 1)	1	1
data_test.fillna(-999, inplace=True)	1	1
data['Fare'] = np.log1p(data.Fare)	1	1
train_copy.loc[(train_copy['Age'] > 50) & (train_copy['Age'] <= 60), 'Age_Category'] = 5	1	1
"titanic_df.groupby(by=[""Pclass"",""Sex"",pd.cut(titanic_df[""Age""],years_range)]).mean()[""Survived""][1,1].plot.bar(ax=axes[0,1], title = (""Men Class 1"") )"	1	1
data.Cabin_Letter_E.astype(np.uint8)	1	1
"X[""Sex""]==""female"""	1	1
df_train[['FareRange', 'Survived']].groupby(['FareRange'], as_index=False).count().sort_values(by='FareRange', ascending=True)	1	1
"datacv.drop(""Ticket"", axis=1)"	1	1
df['Sex']=df['Sex'].map({'female':0, 'male':1})	1	1
"all_data_del[""Fare""].mean()"	1	1
X_train['Ticket_numerical'], bins = pd.qcut(x=X_train['Ticket_numerical'], q=8, retbins=True, precision=3, duplicates='raise')	1	1
row['SibSp'] == 0 and row['Parch'] == 0:	1	1
df['title_age'] = df['title_age'].replace(['Don', 'Rev', 'Mme', 'Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'the Countess', 'Jonkheer', 'Dona'], 'irrelevant_here')	1	1
"titanic_train.drop(""Survived"",axis=1)"	1	1
TitleTest.append(NameTitle)	1	1
"full[""Embarked""] = impute_and_to_dataframe(CustomImputer(strategy=""mode""), full, titanic.shape[0],[""Embarked""])"	1	1
train_ds[['FamilySize', 'Survived']].groupby('FamilySize').mean().sort_values(by= 'Survived', ascending= False)	1	1
df_test['Age'] = round(df_test['Age'])	1	1
categorical_age['Samples'] = samples['Survived']	1	1
"df_train[[""Age"", ""Fare""]]"	1	1
this.count()	1	1
pd.isnull(all_data[feat]).sum() > 0:	1	1
test['Embarked']=test.Embarked.map({'S':1,'C':2,'Q':3})	1	1
data_test['Embarked'] = data_test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
"df[""Age""].fillna(df.Age.median(),inplace=True)"	1	1
df['Age'].dropna().map( lambda x: round(x)).astype(int).max()	1	1
data.Fare.isnull().iloc[idx]:	1	1
"Data_full[""Embarked""] = Data_full[""Embarked""].fillna(""S"")"	1	1
submission.to_csv('titanic_high_learn_rate.csv', index=False)	1	1
test_y['passenger_Id'] = test['PassengerId']	1	1
dftr['Age'].median()	1	1
data_train['Age_scaled'] = stdd.fit_transform(data_train['Age'].values.reshape(-1,1),age_scale_param)	1	1
test.drop(['Sex','Embarked','Name','Ticket','Fare'],axis=1)	1	1
data['Title'] = data['Title'].replace(['Mlle', 'Ms'],'Miss')	1	1
age_complete[['Title','Pclass', 'Sex']].values[:650]	1	1
trainPCA2['10'] = trainPCA[:,9]	1	1
train_df[['Sex','Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])	1	1
"ans.to_csv(""submit_mnb.csv"", index = False)"	1	1
X.fillna(self.val)	1	1
res_df_solver_max_iter['Build_time_'+solver_list[i]] ,	1	1
"large_families.groupby(""Ticket"").sum()['Survived']"	1	1
train['Survived'].value_counts().values,	1	1
isSurvived.Survived.round(0)	1	1
"combined[""Fare""].fillna(Fare_median, inplace=True)"	1	1
"titanic_test_data[""Embarked""] = titanic_test_data[""Embarked""].fillna(""S"")"	1	1
df['Gender'] = df['Sex'].map({'female': 0, 'male':1}).astype(int)	1	1
titanic_train_df.describe()	1	1
"ship.drop(""Cabin"", axis=1, inplace=True)"	1	1
"titanic_test_data[""FamilyId""] = family_ids"	1	1
train['Fare']=train['Fare'].astype(int)	1	1
train_df['Name'].value_counts().tolist()	1	1
train_accuracy.append(adaboost2.score(x_train2, y_train2))	1	1
test_csv.drop(['Ticket', 'Cabin'], axis = 1)	1	1
df_rfc.to_csv('submission.csv',index=False)	1	1
votingC_scores.mean()	1	1
dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 58), 'Age'] = 3	1	1
data.loc[data['Age'] > 64, 'Age'] = 4	1	1
deck_list.append(deck)	1	1
dfte['Fare'].mean()	1	1
combin.head(10)	1	1
train.loc[train['CabinN4'] == 999, 'hasCabin4'] = 0	1	1
titanic_embarked.head()	1	1
"test.loc[ test['Fare'] > 31, 'Fare'] 							        = 3"	1	1
original_test.join(original_data_embarked)	1	1
age['Age_Guess'] = combined_df.Age	1	1
data_test[['Age','Fare', 'FamilySize', 'Pclass', 'Name_length']]	1	1
"test[""SibSp_scaled""] = minmax_scale(test[[""SibSp""]])"	1	1
test['Sex']=test['Sex'].map(Sex_mapping)	1	1
train_data['Title'].unique()	1	1
df['Fare'].copy()	1	1
dataset.loc[(dataset['Fare']>30) & (dataset['Fare']<=100),'Fare'] = 2,	1	1
visualization_df['Embarked_Code'] = label.fit_transform(visualization_df['Embarked'])	1	1
ax[0].set_ylabel(' ')	1	1
df['Sex'].head()	1	1
"train_df_new.drop([""Survived""], axis = 1)"	1	1
feats.loc[feats.Age.isnull(), predictors]	1	1
train_data['Suffix'] = train_data['Suffix'].replace('Mme', 'Mrs')	1	1
test_df.drop(['PassengerId'], 1, inplace=True)	1	1
train2['Survived']	1	1
test.drop(['SibSp','Parch','title','FamilySize'],axis=1,inplace=True)	1	1
train['Embarked'] = StandardScaler().fit_transform(train['Embarked'].values.reshape(-1, 1))	1	1
all_data.loc[(all_data['Fare'] > 14.454) & (all_data['Fare'] <= 31), 'Fare'] = 2	1	1
train['Cabin'] = train['Cabin'].apply(lambda x: replacement.get(x))	1	1
"in [""Major"", ""Col"", ""Capt""]: # Army"	1	1
df.loc[no_age_index, 'Age'] = df['Status'].loc[no_age_index].map(status_age_dict)	1	1
data_categorical.drop(drop_data,axis=1)	1	1
"cabin_only[""Deck""] = cabin_only[""Deck""].fillna(""N"")"	1	1
X_test.Fare.fillna(X_test.Fare.median(),inplace=True)	1	1
data.Sex.replace(['male', 'female'], [0, 1])	1	1
train['NumFamily'] = train['SibSp']+train['Parch']+1	1	1
titanic_test_data_X['Survived'] = voting_est.predict(titanic_test_data_X)	1	1
df_test['Age'] = (df_test['Age'] - age_mean) / age_std	1	1
final_training_df.fillna(final_training_df.mean())	1	1
row[8] = float(row[8])	1	1
df_train.describe(include='number')	1	1
df_train['Fare'] = (df_train['Fare'] - df_train['Fare'].mean())/df_train['Fare'].std()	1	1
train_df['Age']= train_df['Age'].fillna(train_Replace)	1	1
df_pred['Gender'] = df_pred['Sex'].map({'female': 0, 'male': 1}).astype(int)	1	1
titanic['Age'][(Pclass3)&Family3] = titanic['Age'][(Pclass3)&Family3].fillna(24)	1	1
tst_sageFamily.merge(submission,how='left',on='PassengerId')	1	1
X.isna().astype(np.uint8).rename('na_' + X.name)	1	1
perceptron_submission.to_csv('Titanic_perceptron_submission.csv',index=False)	1	1
df_temp.loc[(df_temp['FamCat']==i),'Count'] = df_temp[(df_temp['FamCat']==i)]['Count']/gender_count[i]	1	1
X_T[1].max()	1	1
df_train_features['Embarked'].median()	1	1
combined['Fare'].fillna(combined['Fare'].mean(), inplace = True)	1	1
full['Title'] = full['Title'].replace('Mlle', 'Miss')	1	1
train_df.loc[(train_df['Fare'] >= 14.454) & (train_df['Fare'] < 31), 'Fare'] = 2	1	1
data.loc[(data.Age.isnull())&(data.Title==1)&(data.Pclass==3), 'Age']=26	1	1
dataset['Embarked'] = dataset['Embarked'].replace('S', 2)	1	1
test_df.drop(['Pclass','Sex','SibSp','Parch','Title'],axis=1)	1	1
test.loc[(test['Age']>12)&(test['Age']<=20),'Age_cat']=1	1	1
test_data.drop(['Cabin'],axis = 1)	1	1
dataset.set_value(rowIndex, 'Age56to65', 0)	1	1
train_df.drop(['FareRange','AgeRange','Name','Parch', 'SibSp', 'FamilySize'], axis=1)	1	1
test_data['Survived'] = -1	1	1
whole.set_value([530,775,893,944],'Fid',120) #display(whole[(whole.Surname=='Richards')|(whole.Surname=='Hocking')|(whole.Maiden=='Needs')])	1	1
train['Family_Size'] = train['Parch'] + train['SibSp']	1	1
test_df.loc[test_df.Family_Size==0,'Alone']=1	1	1
"combined_df[""Embarked""] = combined_df[""Embarked""].fillna('S')"	1	1
"data[""Name""] = data[""Name""].str.replace(""Mlle"",""Miss"")"	1	1
df_final['Alone'] = np.zeros(len(df_final))	1	1
train_data.loc[train_data['Age'] <16 ,'Age'] = 0	1	1
plt.hist([train[train['Survived']==1]['Age'], train[train['Survived']==0]['Age']], stacked=True, color = ['b','g'],bins = 30,label = ['Survived','Dead'])	1	1
nullCabins_Survived.info()	1	1
kwargs.get('hue',None)	1	1
train['AgeBins'] = pd.cut(train['Age'], 8)	1	1
"_df.loc[~df[""age""].isna(), :]"	1	1
"train[""Title_mr""] = train[""Title""] == 'Mr'"	1	1
"df[""Age""]"	1	1
params['objective'] = 'binary'	1	1
"data.set_value(i, 'Name', ""Countess"")"	1	1
data.parent_alone.loc[data.PassengerId==167] = 1	1	1
deck.reset_index(drop=True,inplace=True)	1	1
tr.info()	1	1
"submission[""PassengerId""] += 892"	1	1
test_data['Fare'][np.isnan(test_data['Fare'])] = test_data.Fare.mean()	1	1
test.pivot_table(index='Pclass', values='PassengerId', aggfunc='count').plot(kind='bar', ax=ax[1])	1	1
df_FULL.join(pd.get_dummies(df_FULL[['Sex', 'Embarked']]))	1	1
dataset['Embarked'] = dataset['Embarked'].fillna(most_freq_port)	1	1
df.to_csv('best_of_2tanh_1sig.csv', sep=',')	1	1
test_df['Age'] = test_df['Age'].fillna(test_df['Age'].mean())	1	1
classifier.add(keras.layers.Dense(units = 8, kernel_initializer = 'lecun_uniform', activation = 'relu', input_dim = 14))	1	1
train_df.groupby(['title']).size().index.isin(['Master', 'Miss', 'Mr', 'Mrs', 'Rare']).any()	1	1
"new_df[""PassengerId""] = df2[""PassengerId""]"	1	1
train['Gender']	1	1
train_df.drop(['Name'], axis=1, inplace=True)	1	1
train_data['Family'] = train_data['SibSp'] + train_data['Parch'] + 1	1	1
titanic_df.dropna(subset=['Age'])	1	1
title_mean_age_test[1][j]	1	1
dataset.loc[ (dataset['Age'] > 16)&(dataset['Age'] <= 26), 'Age'] = 1,	1	1
"dataframe.loc[(dataframe[""Sex""] == sex) & (dataframe[""Pclass""] == p_class) & (dataframe[""Age""].isnull()), ""Age""] = median_ages[sex][p_class]"	1	1
train7['FamilySize'] = train7['SibSp'] + train7['Parch'] + 1	1	1
dataset['CategoricalAge'] = pd.cut(dataset['Age'], 5)	1	1
df_train['isalone'] = df_train.apply(setisalone, axis=1)	1	1
train.pivot_table('PassengerId','Sex', 'Survived', 'count').plot(kind='bar')	1	1
full['Age'] = full['Age'].replace(4, '48-64')	1	1
np.sum(val)	1	1
"df_train[""Title""]=0"	1	1
test['Survived'] = grid_hard.predict(test[features])	1	1
"i.loc[i[""Title""] == ""Col."",[""Title""]] = ""Other"""	1	1
test['Fare'].fillna(test['Fare'].mean(),inplace=True)	1	1
X_test_reseted['Prediction'] = pred_test	1	1
dataset['Sex'] = dataset['Sex'].replace('female', 1)	1	1
train_p['Age_new'] = 1	1	1
ageImp.transform(df_test.Age.reshape(-1, 1))	1	1
test['FamilySize']=test['SibSp'] + test['Parch'] + 1	1	1
train['Title'].replace(['Master','Major', 'Capt', 'Col','Don', 'Sir', 'Jonkheer', 'Dr'], 'titled', inplace = True)	1	1
tr.loc[tr['Cabin'].notnull(), 'Deck'] = tr['Cabin'].str[0]	1	1
train['Embarked'] = train['Embarked'].replace(Embarked).astype('category')	1	1
"test.loc[test[""Age""].isnull(), ""Age""] = None"	1	1
"train_age1.loc[:, [""PassengerId"", ""AgeBin_Code""]]"	1	1
ret[1]:	1	1
pd.merge(combined_df, imputed_frame[['PassengerId', 'Age']], on='PassengerId')	1	1
features['has_SibSp'] = (features['SibSp'] > 0).astype(int)	1	1
"test[""AgeCategory""] = age_cate_test"	1	1
data.loc[data['FamilySize'] >= 5, 'BigFamily'] = 1	1	1
traindf['age_f'] = traindf['Age'].apply(lambda x: x if not math.isnan(x) else 0)	1	1
dataset['FareBand'] = pd.qcut(dataset['Fare'], 3)	1	1
together['ischild'] = together.apply(set_is_child, axis=1)	1	1
"o.drop([""Sex"",""Name"",""Pclass"",""Embarked"",""Ticket""],axis=1,inplace=True)"	1	1
test_df['Age'] = age_test['Age']	1	1
data.groupby('Survived').isMother.value_counts() # more not mothers died than mothers - though not significantly much	1	1
"all_data['Last_Name'] = all_data['Name'].apply(lambda x: str.split(x, "","")[0])"	1	1
enc_sex.transform(sex_numerical.reshape(-1,1))	1	1
dftest['Fsize']=family_df_t['Fsize']	1	1
full_dataset.loc[(full_dataset['Age']>32.252)&(full_dataset['Age']<=48.168),'Age']=2	1	1
passenger['Age'] <= 10:	1	1
df[['Sex','Survived']].groupby('Sex').mean().Survived.plot('bar')	1	1
train[['Female','Children','Parch','SibSp','Class1_Premium','Class1','Class2']]	1	1
titanic['Title'] = titanic['Title'].replace(['Don', 'Sir', 'Jonkheer'], 'Royalty - Men')	1	1
train_p['Age'].dropna().hist(bins=70)	1	1
accuracies.append(k_svm_score)	1	1
"test_data.loc[(test_data[""Age""] > 16) & (test_data[""Age""] <= 30), 'Age_Group'] = 2"	1	1
acc_knndf.sort_values(by='accuracy',ascending=False)	1	1
LastNameSurvivedSum.sort_values('_Name').reset_index().set_index('_Name')	1	1
feat.sort_values('ImpVal',inplace=True,ascending=False)	1	1
"_df.loc[df.ticket == ""LINE"", ""ticket""] = 'LINE -1'"	1	1
data.iloc[891:] #Remaining data rows to the testing set.	1	1
rawdata.ix[(rawdata.Fare > 26) & (rawdata.Fare <= 52.369), 'FareCategory'] = 4	1	1
test_encode['Cluster'] = cluster_map_test['cluster']	1	1
train.join(suffixes, lsuffix='left', rsuffix='right')	1	1
df_comb['IsAlone'] = np.where(dataset_filter, 1, 0)	1	1
data.loc[data.Fare.isnull(), ('Fare')] = data.loc[data.Fare.isnull()].apply( lambda x: median_fare_dict.get(x.Embarked, x.Pclass), axis = 1)	1	1
df.drop(['Ticket','Name'], inplace = True, axis = 1)	1	1
train_data.loc[train_data['Embarked'].isnull()] = 'S'	1	1
X['emQ'] = X['Embarked'].map({'S':0,'Q':1,'C':0,np.nan:0}).astype(int)	1	1
train_Predict.drop(['PassengerId','Survived','Name','Ticket','Cabin'], axis = 1)	1	1
perf.append(getMetrics(y_test, y_pred, 'Bernoulli Naive Bayes'))	1	1
"df.drop(""Cabin"", axis=1).dropna()"	1	1
train_df['Age'].fillna(train_df['Age'].median(), inplace=True)	1	1
train_set['Survived'][train_set['Embarked'].isnull()]	1	1
accuracyList.append(accuracy)	1	1
ax1[1].set_title('2nd Class (survived)')	1	1
"train[""Cabin""][train[""Cabin""] == ""E""] = 4"	1	1
"data['Title'] = data['Name'].str.split("", "", expand=True)[1].str.split('.', expand=True)[0]"	1	1
test['HaveFamily'] = 0	1	1
OHE_X.describe(include='all')	1	1
Modified_data.iloc[:891]	1	1
"df_train[""Parch""]"	1	1
data.drop(['PassengerId'],axis=1, inplace= True)	1	1
SurvivedFareData['Fare'].min()	1	1
raw_data.assign(is_child = is_child_col)	1	1
"test.drop([""Pclass""], axis=1)"	1	1
ticket_table.loc[ticket_table['Dead_female_on_ticket'] > 0, 'Dead_female_on_ticket'] = 1	1	1
submit.to_csv('predicted_survival_rate_new.csv', index = False)	1	1
"ax[0].set_xlabel(""SibSp"")"	1	1
df.drop(cols, axis=1)	1	1
test_df.drop(['sibsp', 'parch', 'familysize'], axis=1)	1	1
titanic_df_test['Alone'] = titanic_df_test.SibSp + titanic_df_test.Parch	1	1
x_test['Sex'].replace(['female','male'],[0,1],inplace=True)	1	1
family[ 'FamilySize' ] = combined_df[ 'Parch' ] + combined_df[ 'SibSp' ] + 1	1	1
titanic.iloc[:,13:14]	1	1
df_all['Family_name'].value_counts()	1	1
"data_train['Family'] =  data_train[""Parch""] + data_train[""SibSp""]"	1	1
known_age.values[:, 1::]	1	1
train_data['Embarked'].fillna(train_data['Embarked'].value_counts().index[0], inplace=True)	1	1
error.append(model.score(test_X,test_y))	1	1
"submission.to_csv(""post.csv"", index=False)"	1	1
"train[""Fare""].fillna(train.groupby(""Pclass"")[""Fare""].transform(""median""), inplace = True)"	1	1
train_ds.iloc[[4, 2, 90], [2, 4, 5]]	1	1
"test[""Age""] = [ages[x] for x in test.Pclass]"	1	1
train_data.fillna(train_data.mean(),inplace=True)	1	1
df['num_cabins'] = df.cabin.apply(lambda x: 0 if x is np.nan else len(x.split(' ')))	1	1
resultado.append(key)	1	1
titanic_df.groupby(titanic_df['Survived']).count()['PassengerId']	1	1
final_training_df.drop('Survived', axis=1).values.reshape(-1, 16)	1	1
dataset['Title'] = dataset['Title'].replace(['Mlle','Ms','Countess','Miss','Mme'], 'Mrs')	1	1
df_test.drop(['FareBinCode'], axis=1)	1	1
axs[1].scatter(X_val_reduced[np.where(y_val == 1), 0], X_val_reduced[np.where(y_val == 1), 1], marker='x', c='green')	1	1
"train_data.loc[train_data[""Name""].str.contains(""Sir.""), ""TitleSir""] = 1"	1	1
test_raw['Embarked'] = test_raw.Embarked.fillna(test_raw.Embarked.mode()[0])	1	1
test3['Embarked'] = le.fit_transform(test3['Embarked'])	1	1
"dataset[""Ticket""].describe()"	1	1
train_data.set_value(index,'AgeRange','45-60')	1	1
ax[1].set_title('Survival per Pclass in %')	1	1
res_df_solver_tol['Sl'] = res_df_solver_tol['Sl'].astype(np.uint16)	1	1
df_train.loc[:, 'Survived'].as_matrix()	1	1
_.abs()	1	1
train_df['Name_Len'] = train_df['Name'].apply(lambda x: len(x))	1	1
full.describe()  # give statistics about data	1	1
features.set_index('feature', inplace = True)	1	1
data['Age_band'].value_counts().to_frame().style.background_gradient(cmap='summer_r')	1	1
merged['Predict'] = 1	1	1
titanic_data.drop(['AgeBand'], axis=1)	1	1
scores_rf.std(),	1	1
titanic['FamilyCount'] = titanic['SibSp'] + titanic['Parch'] + 1	1	1
all_data['Title'] = all_data['Title'].replace(['Ms'], 'Miss')	1	1
df.drop('Name', axis=1, inplace=True, errors='ignore')	1	1
"dataframe.loc[dataframe[""Age""] <= age_threshold, crossed_feature] = 1"	1	1
enc.transform(class_ints.reshape(-1,1))	1	1
np.sum(ans==np.round(tree_pred).astype(int))/len(dtest)	1	1
test2['Fare'][x] = round(train[train['Pclass'] == pclass]['Fare'].mean(),4)	1	1
dataset['Title'] = dataset['Title'].str.replace('(Don|Countess|Lady|Jonkheer)', 'Noble')	1	1
model.add(Dense(32, kernel_initializer=init_mode, activation='relu', kernel_regularizer=regularizers.l2(reglr)))	1	1
test_data.drop([col + '_missing_data'], axis=1)	1	1
ship.select_dtypes(exclude=['object'])	1	1
"train_data[""Person""] = train_data[['Age','Sex']].apply(what_person, axis=1)"	1	1
result.T	1	1
features_log_transformed['Family'] = features_log_transformed['SibSp'] +  features_log_transformed['Parch']	1	1
df.boxplot(by = 'Survived', figsize = (10, 20))	1	1
titanic_final['Age'].median()	1	1
np.transpose(x_train_data)	1	1
df_complete.sort_values(['PassengerId'],inplace=True)	1	1
"pd.pivot_table(combined[combined.t_nShare==1],columns=""Pclass"",values=""Fare"",index=[""t_nShare"",""Parch""],aggfunc=""median"")"	1	1
test_data['SibSp'].isnull().sum()	1	1
"output.to_csv(""gender_submission.csv"")"	1	1
categorical_columns.append('Embarked')	1	1
"train_df[""Ticket_cat""] = train_df[""Ticket_cat""].astype('category')"	1	1
"dftest.loc[idx,""Ticket""]"	1	1
train_data.drop(['Cabin','Ticket'], axis=1, inplace=True)	1	1
df['Title'] = df['Title'].replace(['Mme','Lady','Ms'], 'Mrs')	1	1
trainData['SibSp'].value_counts().sort_index().plot.bar(ax=axs4[0], figsize=(12, 6), fontsize=16)	1	1
missing_values_count.sum()	1	1
df1.loc[152, 'Fare'] = 7.0	1	1
dataset.loc[mask, ['FareBand', 'Pclass', 'AgeBand']].groupby(['FareBand', 'Pclass']).agg(['value_counts']).sort_index()	1	1
full.iloc[891:]	1	1
submission.to_csv('titanicsubmission1.csv')	1	1
train['Pclass'].tail(20)	1	1
"dftest.loc[peacock_idx,""Survived""]=0"	1	1
"data_train.drop(labels=[""Survived""], axis=1)"	1	1
data.loc[data.Embarked.isnull(), ('Embarked')] = train_data.Embarked.mode()[0]	1	1
df_test_features.drop(columns=['Cabin'])	1	1
train['Fare'] = pd.qcut(train['Fare'],4,labels=[0,1,2,3]).astype(int)	1	1
titanic_2.copy()	1	1
train['Title'] = train.Title.map(Title_Dictionary)	1	1
titanic_train_dataset[['CabinFloorScore', 'Survived']].groupby(['CabinFloorScore'], as_index=False).mean()	1	1
"dftrain.loc[[61,829],""Embarked""] = 'C'"	1	1
train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Pclass', ascending=True)	1	1
df_train['FamCat']=pd.cut(df_train['FamilySize'],bins=[0,1, 4, 20], include_lowest=True, labels=[1,2,3])	1	1
"models.append(( ""KNN"" , KNeighborsClassifier()))"	1	1
df_all['Sex']=df_all['Sex'].replace('male',0)	1	1
test_df['noTicketRef'] = np.where(test_df['Ticket'].map(ticketInTrain)>0,0,1)	1	1
df_train_ml_sc.head()	1	1
dataf_to_impute['Age'][dataf_to_impute['PassengerId'] == Id] = title_age.loc[tle].sum()	1	1
frame.drop(['Name','SibSp','Parch','Ticket','Cabin'],axis=1,inplace=True)	1	1
titanic_df['Survived'] = titanic_df.Survived.astype('category')	1	1
"test[""Mother""] = test.apply(mother, axis=1)"	1	1
test.loc[test['Age'] <= 10, 'IsChild'] = 1	1	1
classifiers.append(SVC(random_state=seed))	1	1
"df_test[""Alone""] = df_test.apply(is_alone, axis=1)"	1	1
group[['Ticket_code','Ticket_count','Group_code','Group_count']],	1	1
X.loc[:, col].factorize() # Assigns unique integers for all categories	1	1
data.boxplot(column='Pclass', vert=False)	1	1
"train[""Sex""].value_counts().plot.bar(color = ""skyblue"", ax = ax[0])"	1	1
test_X['Age'].fillna(train_X['Age'].median(),inplace=True)	1	1
train[['Title', 'Survived']].groupby(['Title'], as_index=False).sum().sort_values(by='Survived', ascending=False)	1	1
train_df[['Embarked']] = train_df[['Embarked']].fillna('N')	1	1
allfeat['Age'].std()	1	1
test_df_with_family.copy()	1	1
res_df_solver_tol.head()	1	1
titanicTrain['Child']='adult'	1	1
titanic_train_dataset['FamilySize'] = titanic_train_dataset['SibSp'] + titanic_train_dataset['Parch'] + 1	1	1
np.sum(assement)	1	1
train_data.drop('Embarked',axis=1)	1	1
"tp.loc[tp[""Ticket_g""]==""SOTON"",""Ticket_c""] = 5"	1	1
testData.loc[(testData['Age']>16)&(testData['Age']<=32),'Age_band']=1	1	1
"a[""Fare""] = a[""Fare""].astype(int)"	1	1
titanic_df.groupby(titanic_df['ticket_prefix']).count()['PassengerId']	1	1
titanic_train.groupby(['Embarked','Pclass'])['Name'].count()	1	1
data.reset_index(drop=True)	1	1
submission.to_csv('titanic_xgboost.csv', index=False)	1	1
pred_table_lr_2_test.rename(columns={'Pred':'Survived'})	1	1
df3.drop('Ticket', axis=1, inplace=True)	1	1
target_vectors.head()	1	1
"data[""Age""].hist()"	1	1
axes[3].cla()	1	1
model_cat.add(Dense(32, activation='relu'))	1	1
train_data['Age'] = train_data[['Age', 'Pclass']].apply(age_approx, axis=1)	1	1
"all_data[""Age""] = all_data[""Age""].astype(int)"	1	1
test['Fare'] = pd.qcut(test['Fare'],4,labels=[0,1,2,3]).astype(int)	1	1
data_test.Fare.hist()	1	1
row['titles'] in MsList:	1	1
"val_df[""C""] = val_df.Embarked.apply(lambda l: np.where(l==1, 1, 0))"	1	1
dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26) , 'Age'] = 1,	1	1
titanic_test.loc[titanic_test['Embarked'].isnull(), 'Embarked'] = 'S'	1	1
test['family'] = test.Parch + test.SibSp	1	1
X_train[['female_adult', 'male_adult', 'SibSp', 'Parch']].corr()	1	1
test_df.loc[(test_df['Fare']>14)&(test_df['Fare']<=31),'Fare_new']=2	1	1
submission['PassengerId'] = df_test_mice['PassengerId']	1	1
data_val['Survived']=submit_xgb.predict(data_val[data1_x_bin])	1	1
"dft[""Age""]=np.where(dft.Age.isna()  , meanSt,dft[""Age""])"	1	1
"df[""Fare""] = df[""Fare""].fillna(0)"	1	1
ship_orig.copy()	1	1
ages_prob['real_age'] = ages_prob.index	1	1
categorical_data.append('isalone')	1	1
test_rf_model['Survived'] = fit_models[2].predict(X_test)	1	1
titanic_df['Age'][titanic_df['Title']==4].mean()	1	1
x_test['Sex'] = le.fit_transform(x_test['Sex'])	1	1
df_train.drop(['Family'], axis=1)	1	1
"df[""Sex""].replace(['male','female'],[0,1], inplace=True)"	1	1
df_use_reg.dropna().as_matrix()[:,2].astype(float)	1	1
tr[['Age', 'Parch', 'Pclass']] = tr[['Age', 'Parch', 'Pclass']]	1	1
df_full['IsAloneF'] = (df_full['FamilySizeBin'] == 0).astype(int)	1	1
processed_df.count()	1	1
Train_Master.loc[ Train_Master['Age'] > 47 , 'Age'] = 3	1	1
"full_data[""AdultMale""] = 0"	1	1
test_df['FamilySize'] = test_df['SibSp'] + test_df['Parch']	1	1
"full_dataset[""Age""].median()"	1	1
data[['FamilyName', 'PassengerId']].groupby('FamilyName').count()	1	1
test_c.Fare.median()	1	1
"X_logistic.drop(""PassengerId"", axis=1, inplace=True)"	1	1
df_train['Ticket_info'].unique()	1	1
train['Cabin_isnan'] = 1	1	1
test_ToPred['Age'].fillna(titanic_df['Age'].mean(), inplace=True)	1	1
train['Name']=train['Name'].str.split(',',expand=True)[1].str.split('.',expand=True)[0]	1	1
train['Age'] = train['Age'].apply(lambda x : replaceAge(x))	1	1
"train_data[""CabinAvail""] = train_data[""Cabin""].notnull().astype('int')"	1	1
df_all['Sex'] = [1 if i == 'female' else 0 for i in df_all['Sex']]	1	1
test_ds['Sex']= test_ds['Sex'].map({'male': 0, 'female': 1}).astype(int)	1	1
df_train_copy['Age'] = df_train_copy['Age'].fillna(df_train_copy['Age'].mean())	1	1
train_csv['Fare'].quantile(.5),	1	1
tr.loc[(tr['Age']>56)&(tr['Age']<=64), 'Age'] = 7	1	1
"data.loc[(data[""Age""] > 16) & (data['Age'] <= 32), 'Age'] = 1"	1	1
full_set['Survived']	1	1
random.sample(range(len(train_x)), 500)	1	1
train_copy['first_class_female'] = first_class_female	1	1
missing_data.T	1	1
"full['Title'] = full.Name.str.split(""[\,\.]"").apply(lambda x: x[1]).str.strip()"	1	1
"data_test.drop(""Survived"", axis=1)"	1	1
"train_data.loc[train_data[""Name""].str.contains(""Capt.""), ""TitleCapt""] = 1"	1	1
"df_train[""Name""].head()"	1	1
df.drop(['Sex','Embarked','Pclass','Title','Name','TicketPrefix'], axis=1)	1	1
leg.legendHandles[0].set_alpha(1)	1	1
sns.boxplot(x=feature,data=train_temp)	1	1
df1.groupby('Cabin').count()	1	1
age_df.loc[ (df.Age.isnull()) ]	1	1
data.loc[data.Fare.isnull(),'Fare']=data['Fare'].mean()	1	1
data_test_dummy['Fare'].values.reshape(-1, 1)	1	1
dataset.loc[dataset['Fsize'] >= 5, 'Fsize'] = 3	1	1
survived['Survived'] = survived['Survived'].astype(int)	1	1
data_test.drop(['Name'], axis=1)	1	1
target.iloc[train_idx], target.iloc[test_idx]	1	1
dataset.loc[dataset['Survived'] == 1, 'Embarked'].value_counts().sort_index()	1	1
test_data['IsAlone'] = 0	1	1
df.drop(['Name'], axis = 1, inplace = True)	1	1
"dataset_med.loc[2,0][""Age""]"	1	1
"train_data.drop(""Survived"", axis=1, inplace=True)"	1	1
submission_score.set_index('Ensembles or Base Models').sort_values(by = 'Scored_on_submission(%)', ascending = False)	1	1
dataset.loc[(dataset['Deck'] > 1) & (dataset['Deck'] <= 6), 'Deck']  = 2	1	1
"submission.to_csv(""survival_submission_v9.csv"", index=False)"	1	1
train.groupby('Fare1').Survived.mean().plot(kind = 'bar')	1	1
train_df.loc[(train_df.Cabin.isnull())&(train_df.Initial=='Master'),'Cabin']='F2'	1	1
data['TitleCode'] = lb.fit_transform(data['Title'])	1	1
test['SibSp'] = raw_test['SibSp']	1	1
np.round(np.mean(test[['Survived_nn_wtd', 'Survived_svm_wtd','Survived_rf_wtd']],axis = 1))	1	1
df['gender'] = df['Sex'].map({'female': 0, 'male': 1}).astype(int)	1	1
df.values[800:]	1	1
"train[[""Pclass"", ""Survived""]].groupby(['Pclass'], as_index=False).agg(['mean', 'count'])"	1	1
df_train.join(person_dummies_train)	1	1
shape[0]/(1.0*Test_prob.shape[0])	1	1
titanic_df['Name'].isnull().sum()	1	1
train_id.head()	1	1
test['Ticket_Num'] = np.where(test.Ticket_Num.str.isdigit(), test.Ticket_Num, np.nan)	1	1
"df[['Age', 'Survived']].boxplot(by = ""Survived"")"	1	1
temp2['Survived']=temp2['Survived'].replace(0,np.int32(2))	1	1
data.drop(['PassengerId','Ticket'], axis=1)	1	1
temp_df.drop('Ticket_char', axis = 1, inplace = True)	1	1
plt.rcParams['figure.figsize'] = (10, 8)	1	1
"t2[""Sex""] = sex_encoded"	1	1
scores[1]	1	1
"data[""Name""] = test_data[""Name""].str.replace(""."","";"")"	1	1
train7['IsAlone'] =  1	1	1
dset['Sex'] = np.where(dset['Sex'] == 'female', 1, 0)	1	1
data_train_df.drop(['Survived','Name','PassengerId'], axis=1).values	1	1
missing_deck['Deck'] = treeDeckBest.predict(X_missing_deck)	1	1
test_data.dtypes	1	1
pd.isnull(row['fare']):  # [2]	1	1
"titanic_test_data[""PassengerId""],"	1	1
data['Fare'].fillna(data['Fare'].mean(skipna=True), inplace=True)	1	1
full_x.head()	1	1
title[ 'Title' ] = All[ 'Name' ].map( lambda name: name.split( ',' )[1].split( '.' )[0].strip() )	1	1
df.drop('Ticket', 1)	1	1
test_ToPred['Embarked'].fillna('B' , inplace=True)	1	1
frame['NTicket'] = frame.Ticket.replace(n_ticket)	1	1
"train.loc[(train[""Age""] <= 32)&(train[""Age""] > 16), ""age_c""] = ""2"""	1	1
data.SibSp.astype(float)	1	1
axes[1].set_ylabel('Age')	1	1
concat_set['Age'] = concat_set['Age'].astype(int)	1	1
"test[""Embarked""], uniques = pd.factorize(test[""Embarked""])"	1	1
train_mini['Survived']	1	1
dataset['Embarked_C'] = dataset['Embarked'].map(lambda s: 1 if  s == 1  else 0)	1	1
"submission.to_csv(""submission10.csv"", index=False)"	1	1
"test[[""Title""]] = test[[""Title""]].replace('Mlle', 'Miss')"	1	1
"combined[""Embarked""]=Embarked"	1	1
df.drop(['SibSp','Parch'], 1, inplace=True)	1	1
"df.Pclass.astype(""category"", categories=[1, 2, 3], ordered=True)"	1	1
"train[""Title_miss""] = train[""Title""] == 'Miss'"	1	1
train_df.corr(method='pearson')	1	1
dataset['AgeRange'], AgeBins = pd.cut(dataset['Age'], 10, retbins=True)	1	1
df['Survived'] = train_df['Survived']	1	1
dataset['Sex'] = dataset['Sex'].map({'female': 0, 'male': 1}) #.astype(int)	1	1
titanic['Ticket_len']=titanic['Ticket'].apply(lambda x:len(x))	1	1
X_train['Name_title']= X_train['Name_title'].apply(lambda x: x.split()[0])	1	1
titanic_df['Cabin'].replace(['Z','A', 'B', 'C', 'D', 'E', 'F', 'G', 'T'], [0,1,2,3,4,5,6,7,8],inplace=True)	1	1
dataset.loc[:,'Age'] = dataset.loc[:,'Age'].fillna(dataset.loc[:,'Age'].mean())	1	1
ds_test.copy(deep=True)	1	1
"X_train[[""FaresRange"", ""Survived""]].groupby(['FaresRange'], as_index=False).mean()"	1	1
df.drop(fldname, axis=1, inplace=True)	1	1
sex.append(1)	1	1
ax[2][1].hist(nonsurvivors['Age'].dropna().tolist(), bins=nbins)	1	1
cnf_matrix1.astype('float') / cnf_matrix1.sum(axis = 1)[:, np.newaxis] *100	1	1
neural_record['Double_In'][i]=c2.score(X_train,y_train) #In-sample result with double layer	1	1
test_X[['Fare_log1p', 'Group_size']] = scaler.transform(test_X[['Fare_log1p','Group_size']])	1	1
"submission.to_csv(""/home/vic/Desktop/Kaggle/Titanic/final2.csv"",index=False)"	1	1
dataset.loc[(dataset['Sex']==0)&(dataset['Pclass']==1),'WealthFactor'] = 1	1	1
list_metric_names.append('train-%s-mean' % (em))	1	1
x_test.shape[0]	1	1
df['Name'] = df['Name'].apply(get_title)	1	1
"combined[""Title""] = combined[""Title""].replace(['Miss','Mlle'], 'Miss')"	1	1
comb_data.info()	1	1
df_train.pivot_table(values='Name', index='Pclass', columns='Cabin', aggfunc='count')	1	1
df['FamilySize'].hist(bins=20) #most of passenger travel alone	1	1
train_df['SibSp'] > 0	1	1
test_dataset.drop(drop_column_,axis=1, inplace=True)	1	1
test_df.drop(['Sex'], axis = 1)	1	1
train_csv['Fare'].quantile(.25),	1	1
ship['Title_Code'].loc[(ship['Title_Code'] == 2) & (ship['Survived'] == 0)].count()	1	1
ax[0][0].set_xticklabels(['Male','Female'])	1	1
dataset['Mrs'] = np.where(dataset['Title']=='Mrs',1,0)	1	1
submit_data.to_csv('./submit.xgboost.csv', header=True)	1	1
train_df.Age.fillna(28, inplace=True)	1	1
trainONS.drop(['Survived'], axis=1)	1	1
df_titanic_test_mod.loc[index,'Title'] = title.strip()	1	1
train_data.loc[mrmask, 'Age'] = 30	1	1
test_df['Family'].loc[test_df['Family']>0] = 1	1	1
"models.append(( ""SVM"" , SVC()))"	1	1
train_table.reset_index(inplace=True)	1	1
"df.loc[pid,""MainName""] = m.group(3).strip()"	1	1
df_familygroup.sort_values(by='Survived')	1	1
data.insert(0, 'Ones', 1)	1	1
"train[""Age""][np.isnan(train[""Age""])] = random_1"	1	1
data_train['Age_imputed']=data_train_imputed.iloc[:,0]	1	1
data.loc[(data.FamilySize > 0) & (data.FamilySize <= 2), 'FamilySizeBand'] = 1	1	1
"train.loc[i,""Title""] = l[1].strip()"	1	1
res_df_solver_C['Train_acc_'+solver_list[i]],	1	1
train.describe().T	1	1
dataset['Title_Miss'] = dataset['Title'].map(lambda s: 1 if  s == 2  else 0)	1	1
plt.hist(ageOfMrsWithParch)	1	1
test_rf_model.to_csv('test_rf_model.csv', index=False)	1	1
column['Title'] = column['Title'].fillna(0)	1	1
"title_dict[""MRS""] = 1"	1	1
"train_df[""Sex""] = train_df[""Sex""].apply(lambda x: 1 if x == ""male"" else 0)"	1	1
train_x_samp.append(train_x[j])	1	1
train_df_concat['Cabin']:	1	1
trainData.isnull().sum()	1	1
"titanic_train.loc[titanic_train[""Embarked""] =='C',""Embarked""] = 1"	1	1
X_test_df['Sex'] = X_test_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
"row[1][""Ticket""]"	1	1
"factors[""Fare""]=1"	1	1
for_fittin.corr()	1	1
dt_test.drop('Fare', axis=1, inplace=True)	1	1
X['Age'].iloc[i] = age_pred	1	1
whole.set_value(540,'Fid',155) # Frolicher with Frolicher-Stehli	1	1
train_df.loc[(train_df['Age'].isnull())&(train_df['Title']=='Master'),'Age'] = 5	1	1
gender_submission['Survived']	1	1
raw_train['SibSp'].hist(bins=20, color='orange')	1	1
titanic['Age'].dropna(), bins=int(titanic['Age'].max()),	1	1
titanic['Age'][titanic['Age'].isnull()] = titanic['Age'].median()	1	1
ee_list.append((best_model_wts[w_col].numpy()[combine_index[col],:]))	1	1
df_train.isna().sum()	1	1
df_ticket['TicketGroup_include_surviving_men'] = df_ticket['Ticket_surviving_men'] > 0	1	1
dataset['Name'] = dataset['Name'].map(name_mapping)	1	1
data.drop(columns=['Name'], inplace=True)	1	1
titanicAll['Age1'] = titanicAll['Age'].map(ageRange)	1	1
sns.boxplot(y='Fare', x='SibSp', ax=ax2, data=test_df, linewidth=1, saturation=5, palette=palette8)	1	1
titanic.Age.mode()	1	1
"df[""Solo""] = 0"	1	1
"dftest[""Age""].isnull().sum()"	1	1
x_test.iloc[:, :].values	1	1
test_data['Embarked'] = test_data['Embarked'].fillna('S')	1	1
model_type.append('XGBoost')	1	1
train[['Sex','Survived']].groupby('Sex').mean()	1	1
df['Title'] = df['Title'].map(titlemap)	1	1
"submission.to_csv(""Logreg_sub1.csv"", index = False)"	1	1
fulldata.shape	1	1
full_set['Title'] = full_set['Title'].replace('Mme','Mrs')	1	1
"df_train[""norm_len_name""]=(df_train[""len_name""]-len_name_avg)/len_name_std"	1	1
valid.drop(['Survived'],axis=1)	1	1
train['title']=pd.Categorical(train['title'], categories=title_lev)	1	1
train_df.loc[(train_df.Cabin.isnull())&(train_df.Initial=='Mrs'),'Cabin']='D'	1	1
"sns.boxplot( x=""Pclass"", y=""Age"", data = train);"	1	1
tr['Title'] =tr['Title'].replace('Ms',4)	1	1
"dataframe.loc[(dataframe[""Sex""] == sex) & (dataframe[""Pclass""] == p_class), ""Age""].median()"	1	1
df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
"test.loc[(test[""Pclass""].values == 1) & (test[""Age""].isnull()), ""Age""] = meanAge1"	1	1
dataset.loc[dataset['Age'] > AgeBins[AgeGroup], 'Age'] = AgeGroup	1	1
fare['Pclass'] = combined_df.Pclass	1	1
df['Male'] = pd.get_dummies(df['Sex'], drop_first=True)	1	1
test['hasAge'] = test['hasAge'].fillna(1)	1	1
df_test.drop(['Survived'], axis=1)	1	1
"submission.to_csv(""titanic_NN_tensorflow.csv"", index=False)"	1	1
classifier.add(Dense(output_dim=4,init='uniform',activation='relu',input_dim=8))	1	1
submission.head(8)	1	1
"df[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean()"	1	1
df_test['Age']=df_test['Age'].astype(int)	1	1
final_data.head()	1	1
"data_test[""Alone""] = [1 if x == 1 else 0 for x in data_test[""Family Size""].values]"	1	1
accuracy_knn_kfolds.append(accuracy_knn_kfold)	1	1
"train[""Fare_4""] = (100 <= train[""Fare""])"	1	1
"embarked.drop(""Embarked"", axis=1)"	1	1
P.iloc[:,i]=model.predict(Xtest)	1	1
data.Cabin.fillna('NA', inplace = True)	1	1
toolbox.select(population + offspring, mu)	1	1
pd.DataFrame.from_items(for_df)	1	1
allfeat.drop(columns=['Sex']) #column no longer needed	1	1
deplicate_ticket.head(20)	1	1
mean_age['train'][sex][pcl-1]= train_ds[(train_ds['Pclass']==pcl) &                                      (train_ds['Sex']==sex)]['Age'].mean()	1	1
dataset.loc[(dataset['FamilySize'] > 4) & (dataset['FamilySize'] <= 5), 'FamilySize']   = 2	1	1
data.loc[(data['Fare'] > payment[2]) & (data['Fare'] <  payment[1]), 'FareGroup'] = 3	1	1
test_features.shape[0]     # number of examples in the test set	1	1
titanic_df['Ticket'].unique()	1	1
train['Cabin'].fillna(train.groupby('Pclass')['Cabin'].transform('median'),inplace = True)	1	1
"df_test[""age_group""]=pd.cut(df_test[""Age""],bins)"	1	1
row['SibSp'] > 0 or row['Parch'] > 0:	1	1
"test[""FamilySize""] = test[""SibSp""] + test[""Parch""] + 1 #즉 형제자매 수 + 부모자식수 + 나 = 우리가족수"	1	1
df.Age.isnull().sum(axis=0)	1	1
intervals.items():	1	1
test_df.drop('PassengerId', axis = 1, inplace = True)	1	1
submission.to_csv('./output/submission.csv', index=False)	1	1
test_data.loc[:,['Pclass','Sex','Age','Fare','Embarked']]	1	1
pd.pivot_table(combine_data, index=combine_data.index,margins=True )	1	1
Freq.append( df2[df2[freqvar]==freqvalues[i]][freqvar].groupby(df2[var]).count() )	1	1
gb_score.mean()	1	1
submission.to_csv('Submission_decTree.csv', index=False)	1	1
full['Cabin'].fillna( 'U' )	1	1
"_df[""ticket_let""] = _df.ticket.apply(lambda i : ""Nan"" if "" "" not in i else i[ : i.rfind("" "")])"	1	1
data_df['HasFare'] = data_df['Fare'].apply(lambda x: 0 if x == 0 else 1)	1	1
"titanic_train[""FareGroup""] = titanic_train.apply(lambda row: group_fare(row[""Fare""]), axis=1)"	1	1
"results.to_csv(""results.csv"",index=False)"	1	1
test_df.loc[test_df['Name'] == 'Mrs', 'Name'] = 'Miss'	1	1
x['Age']=x['Age'].fillna(x['Age']).median()	1	1
test.drop(drop_list, axis=1, inplace=True)	1	1
child12.shape[0]	1	1
"train_df[""family_member_no""] = train_df[""SibSp""] + train_df[""Parch""]"	1	1
dataset['FareBinned'] = label.fit_transform(pd.qcut(dataset['FareAdjusted'], 4))	1	1
test_df['Title']= test_df.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
"train[""Age""][np.isnan(train[""Age""])]=train_age"	1	1
"train_data.loc[train_data[""Name""].str.contains(""Master.""), ""TitleMaster""] = 1"	1	1
traindf.head(10)	1	1
dataset.loc[dataset['Age']>38.0,'Age'] = 4	1	1
frame.drop(['Name','Ticket','PassengerId'],axis=1)	1	1
train_kaggle.head(5)	1	1
data_all['Pclass_3'] = (data_all['Pclass']==3)+0	1	1
titanic_test_data.isnull().sum()	1	1
df['GOOD'].replace([True,False],[1,0],inplace = True)	1	1
"axes[2].set_title(""Third Class"")"	1	1
new_train_df.drop(['Survived'], axis=1),	1	1
train_df['Age'] = train_age_groups.Age.apply(lambda y: y.fillna(y.median()))	1	1
"train_soft_pred_matrix.to_csv(""train_soft_pred_matrix.csv"")"	1	1
sns.boxplot(x=feature, y='Age', data=df_train)	1	1
titanic.loc[train.index].Survived.hist(by=titanic.Embarked,layout=(3,1),sharex=True)	1	1
df['Fare_Bin'] = pd.qcut(df.Fare, 4, labels = ['very_low', 'low', 'high', 'very_high'])	1	1
X_train2.loc[:,['Age','SibSp','Parch','Fare','FamSize']]	1	1
"titanic_df.groupby(by=[""Pclass"",""Sex"",pd.cut(titanic_df[""Age""],years_range)]).mean()[""Survived""][1,0].plot.bar(ax=axes[0,0], title = (""Women Class 1"") )"	1	1
dataset.drop(['SibSp', 'Parch', 'Name', 'Ticket'], inplace=True, axis=1)	1	1
df['Age'] = df['Age'].fillna(age_mean)	1	1
Class_Results.set_index('Accuracy')	1	1
data_copy['Age']=(data_copy['Age']-data_copy['Age'].mean())/data_copy['Age'].std()	1	1
knn_score.append(score)	1	1
df_tr_test.head(11)	1	1
df[['Sex','Survived']].groupby(['Sex']).count().plot.bar(ax=ax[0])	1	1
train_data['Ticket'].value_counts()	1	1
test.loc[(test.PassengerId==1044),'Fare'] = test.loc[(test.Pclass==3)&                                                     (test.Embarked=='S')&                                                     (test.Parch==0)&                                                     (test.SibSp==0)&                                                     (test.Age>40)&                                                     -(pd.isnull(test.Fare)),'Fare'].median()	1	1
train_df['PassengerId'].duplicated().any()	1	1
train['Survived'].groupby(pd.qcut(train['Ticket_len'], 4)).mean()	1	1
df_test['Ticket']:	1	1
"titanic_train.loc[titanic_train[""Embarked""] == 'Q',""Embarked""] = 2"	1	1
axes[1].set_title('Fare vise Survival')	1	1
"X_test.drop(""Alone"", axis = 1)"	1	1
np.round(svc_linear.score(X_train_norm, Y_train), 4)	1	1
X.fillna(median(hlp['Age'].tolist()), inplace=True)	1	1
df_train.drop(['PassengerId'],axis=1,inplace=True)	1	1
x_train['salutation'] = x_train['Name'].str.extract(' ([A-Za-z]+)\.')	1	1
test_data['Parch'][np.isnan(test_data['Parch'])] = int(mean_Parch) + 1	1	1
dataFrmae['Age'] = dataFrmae['Age'].astype(int)	1	1
rawdata.drop('Fare', axis=1)	1	1
known_set.drop('Age', axis=1).values.reshape((1046, 7))	1	1
"train[""Embarked""]=train[""Embarked""].astype(int)"	1	1
"test[""TicketGrp""] = test.tkno.apply(Tix_ct)"	1	1
os.environ['OMP_NUM_THREADS'] = '4'	1	1
testing_df['PassengerId'],	1	1
data_train.loc[:,['Survived','Sex']].groupby(['Sex']).sum()	1	1
data_copy.loc[data_copy.Embarked == 'S', 'Embarked'] = 0	1	1
list_metric_names.append('test-%s-mean' % (em))	1	1
ohe.transform(xText.Embarked.astype(str))	1	1
trainData['Name'].count()	1	1
train_csv['Sex_Pclass'] = train_csv.Sex + '_' + train_csv.Pclass.map(str)	1	1
data.set_value(772, 'TicketClean', int(med2))	1	1
"train_dat.at[i,""isAlone""] = 0"	1	1
"titanic_train.loc[titanic_train[""Sex""] == ""female"",""Sex""] = 1"	1	1
test.isna().sum()[test.isna().sum() != 0]/test.shape[0] * 100	1	1
all['alone'] = all['Fsize'].map(lambda x: 1 if x == 1 else 0)	1	1
"data_copy[""Sex""] = data_copy[""Sex""].fillna(""male"")"	1	1
df['Parch'] + df['SibSp'] +1	1	1
"train_df.drop(""Age*Class"", axis=1)"	1	1
temp.append(val[0])	1	1
row['Name'].split(' ')[1].split(' ')[0]	1	1
df_test['LotsOfFamily'] = (df_test['Family'] > 3).astype(int)	1	1
line[0]	1	1
train.loc[train['Age'] == -1.0, 'hasAge'] = 0	1	1
df['cabin_let']     = df['cabin_let'].astype(cabin_let_cat)	1	1
dataset.loc[nullvalues, target] = np.nan	1	1
dftest.shape	1	1
data_copy.Sex.fillna('female')	1	1
df.loc[(df['FamilySize'] == 2) | (df['FamilySize'] == 3), 'FamilySize'] = 1	1	1
"dataset[""Fsize""].replace(to_replace = [1], value = 'Single', inplace = True)"	1	1
df.Embarked.replace(dic,inplace=False)	1	1
dt_test.drop(['SibSp', 'Parch'], axis=1, inplace=True)	1	1
df.loc[index,'SIBSP_2_3']=1	1	1
dataPrepare['Title'] = dataPrepare.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
pd.isnull(train2).sum()	1	1
train_df.loc[(train_df['Fare'] > 31) & (train_df['Fare']<=513),'Farecat'] = 3	1	1
data_df.describe(include='all')	1	1
dataset['Family']=dataset['SibSp'] + dataset['Parch'] +1	1	1
"dataset[""Age""].iloc[i] = age_pred"	1	1
axis2.spines['top'].set_linewidth(0)	1	1
df['Deck'] = df.Cabin.str.extract('([A-Z]){1}', expand=False)	1	1
parameters['learning_rate']	1	1
df_train.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'Age'], axis=1)	1	1
df.iloc[i]['GroupID']	1	1
test[['PassengerId', 'Survived']].to_csv('First_Naive_Bayes_Classifier.csv', index=False)	1	1
df.loc[(df.Fare >= 200) & (df.Pclass == 1), 'Fare'] = 60	1	1
train_dummy.join(cat_list)	1	1
dataset.groupby(['Embarked', variable]).size()['S'].index.values	1	1
dataset.loc[dataset['Sex'] == 'male', 'Male'] = 1	1	1
dataset['Cabin'][dataset['Cabin'].notnull()].head()	1	1
train[['CategoricalAge', 'Survived']].groupby(['CategoricalAge'], as_index=False).count()	1	1
data.loc[ data['Fare'] > 14.45, 'SortFare_2'] = 1	1	1
new_ages.append(df[df.Title==title]['Age'].mean())	1	1
"test[""Fare""].fillna(round(np.mean(test[""Fare""])), inplace=True)      #filling missing value in Fare"	1	1
np.select(conditions, values),	1	1
dataset['Title'] = dataset['Title'].replace('Lady', 'Royalty')	1	1
"dataframe[""Age""].std()"	1	1
data.drop(columns=drop_columns)	1	1
train.loc[mrs.index]['Age'].fillna(value=mrs['Age'].mean()),	1	1
titanic_df.loc[titanic_df['Age'] <= 16, 'Sex'] = 'child'	1	1
df_test['Survived'] = y_pred	1	1
split_count_df.reset_index()['index'],	1	1
"bl_submit.to_csv(""baseline.csv"", index=False) # Kaggle: 0.75120"	1	1
raw_train['Title'] = raw_train['Title'].map(title_mapping)	1	1
"test[""Fare""].std()"	1	1
new_train['Age'].fillna(new_train['Age'].mean(), inplace=True)	1	1
data_copy.loc[data_copy[column_name] == value, column_name] = key	1	1
X['Sex'] = X['Sex'].replace(to_replace=['male', 'female'], value=[0, 1])	1	1
data.dropna(axis=0, subset=['Survived'], inplace=True)	1	1
test_df['Title'] = test_df['Title'].apply(filter_title_test).apply(classify_title)	1	1
all_sample[['Age', 'Title']].dropna(subset=['Age']).groupby(['Title'], as_index=False).median()	1	1
test.drop(['S', 'Embarked'], axis=1)	1	1
pars.append(family)	1	1
test.loc[test['Fare'] ==0]	1	1
dataset['Fare'] = np.log(dataset['Fare'])	1	1
input_arr.as_matrix(columns=('Survived', 'Male', 'train_Age_rep_scale', 'SibSp', 'Parch', 'fare_scale', 'Emb_nr'))	1	1
"test[""Sex""] = LabelEncoder().fit_transform(test[""Sex""])"	1	1
test.loc[test['Embarked']=='S','Embarked']=3	1	1
test.loc[test['Embarked']=='S','Embarked']=0	1	1
"test.loc[test['FamSize']== 0,'Alone'] = 1  # Populate ""Alone"" with value '1' where family size is '0'"	1	1
train.drop(droppings,1, inplace = True)	1	1
test_data.join(title_dummies_test)	1	1
dft.drop(['PassengerId','Name','Ticket','Cabin','Embarked'], axis=1, inplace=True)	1	1
data1.sample(5)	1	1
dataset.dropna()	1	1
"submit.to_csv(""submit.csv"")"	1	1
data_full.loc[data_full['FamilySize'] == 1, 'IsAlone'] = 1	1	1
train_data.drop(['FareBand'], axis=1)	1	1
titanic_test_data.info()	1	1
titanic_df['Fare'].value_counts()	1	1
data.loc[ data['Age'] > 64, 'Age'] = 4	1	1
y_pred.apply(lambda i : 1 if i>=x else 0)	1	1
df['FamilySize'] = (df['Parch'] + df['SibSp'])	1	1
X_train.iloc[train_idx],  y_train.iloc[train_idx]	1	1
test.drop(['PassengerId', 'Sex','Name','Ticket','Cabin','Embarked'], axis=1)	1	1
titanic_df.groupby(titanic_df['ticket_prefix'] != 'None').mean()['Survived']	1	1
df_results_global.sort_values('val_score',ascending=False,inplace=True)	1	1
titanic_df[['Survived','Child']],index='Survived',columns=['Child'],	1	1
processed_test_df.loc[processed_test_df.Fare.isnull(), 'Fare'] = processed_test_df['Fare'].median()	1	1
train_csv['Cabin'].str[0]	1	1
dataset.set_value(rowIndex, 'Age0to4', 1)	1	1
df2['Ticket'] = [i.split()[-1][0] for i in df2.Ticket]	1	1
"datacv.set_value(i, 'Name', ""Mr"")"	1	1
Test_Master['Fare'] = Test_Master['Fare'].fillna(Test_Master['Fare'].median())	1	1
train['Age'].fillna(age_median)	1	1
titanic_final['Age'].fillna(median_age_final, inplace=True)	1	1
"combine_df.iloc[:891,:][""Survived""]"	1	1
train.Embarked.groupby(train.Embarked).count() # the max is 1 so we fill the nans with it	1	1
"train.loc[train[""Title""] == ""Mrs""].mean()[""Age""]"	1	1
scaler.transform(clf_test_input)	1	1
d['Survived'].values	1	1
ensembles.append(('XGB', XGBClassifier()))	1	1
prep.transform(X_test)	1	1
data['CatFare']= pd.qcut(data.Fare, q=6, labels=False)	1	1
test_df.ix[(test_df.Cabin == 'Z'), 'Cabinknown'] = 'No'	1	1
df['Embarked'].mode().iloc[0]	1	1
"train_dat[""Title""]"	1	1
"ages_prob[""Prob""] = ages_prob[""Count""] / big_X[""Age""].value_counts().sum()"	1	1
model_data.loc[(model_data.Pclass == 1)&(model_data.Title == 5)&model_data.Age.isnull(),('Age')] = 40	1	1
data.Title.apply(lambda x: x if title_cnt[x]==False else 'Misc')	1	1
pd.merge(data_train, data_test,how='outer') # 合并无Survived数据的训练集与测验集，how = ‘outer’ 意为并集	1	1
data.loc[(data['Age']>48) & (data['Age']<=64), 'Age_band'] = 3	1	1
"X_test[[""FamilySize"",""Family_S_C""]] =  scaler_for_family.transform(X_test[[""FamilySize"",""Family_S_C"" ]])"	1	1
combined['Cabin'] = combined['Cabin'].map(lambda c:c[0])	1	1
train['Sex'].map({'female':0,'male':1}).astype(int)	1	1
df.loc[fil, 'IsKid'] = 1	1	1
lgb_params['bagging_freq'] = 10	1	1
fill_age_df['Title'] = fill_age_df['Name'].apply(lambda x: x[x.find(', ') + 2:x.find('.')])	1	1
train['Male'] = pd.get_dummies(train['Sex'])['male']	1	1
df_train.groupby(['Age'])	1	1
submission_random_forest.to_csv('submission_random_forest.csv', index=False)	1	1
le.transform(df_test[f])	1	1
"X_test[""Fare""].fillna(X_test[""Fare""].median(),inplace = True)"	1	1
whole.Age.round(0)	1	1
train_dataset.Fare.astype(int)	1	1
csv_train_OneHot.corr()['Survived']	1	1
df_train['Cabin'] = df_train['Cabin'].fillna('None')	1	1
train.loc[:, :],	1	1
titanic_train['Cabin'] = titanic_train['Cabin'].fillna('Unknown')	1	1
survived_count.append(survived)	1	1
train['Age'] = pd.DataFrame(age_scaled)	1	1
random.sample(list(male['Survived']),50)	1	1
Train_Master['Name'].sample(3)	1	1
model.add(Dense(36, activation = 'relu', input_shape = (11,)))	1	1
"cvs[""Score_std""]=score.std()"	1	1
"dfTest['Family'] =  dfTest[""Parch""] + dfTest[""SibSp""]"	1	1
all_data['CategoricalFare'] = (pd.qcut(all_data['Fare'], 5, labels = [0, 1, 2, 3, 4])).astype(int)	1	1
np.sum(term) / len(X)	1	1
test_copy.loc[test_copy['Age'] <= 10, 'Age_Category'] = 0	1	1
died_data['Survived'].loc[died_data['Pclass']==1]	1	1
combine.drop('Cabin', axis=1, inplace=True)	1	1
X_dev_norm.T	1	1
"title.append(train[""Name""][ind].split(',')[1].split('.')[0])"	1	1
train['Cabin'] = train['Cabin'].fillna(train['Cabin'].mode()[0])	1	1
train['Child'] = (train['Age'] <= 18).astype(int)	1	1
df['IsChild'] = df['Age'] < 16	1	1
tempdf['max'] = np.max(np.array([tempdf[col] for col in pred_cols]),axis=0)	1	1
"related_people.set_index(""Last_Name"",inplace=True)"	1	1
dft.iloc[:-1,:].iplot(kind='bar',title='Embarked: Survived Vs Dead')	1	1
masterdf_noage['title'].apply(lambda x: title_dict[x]) # make titles integers in range(5)	1	1
sns.boxplot(y='Fare',data=Titanic_Master[Titanic_Master.Fare<upper_whisker], ax=ax, color='green')	1	1
y_df['Survived'] = y_pred	1	1
train_dataset.drop('Survived',axis=1,inplace=True)	1	1
tit_df.join(pc_dummy_tit)	1	1
xgb_rfecv.transform(xgb_rfecv_final_test)	1	1
df_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].mean())	1	1
df['Age'] * train_df['Pclass']	1	1
titanic['Same_Ticket'] = titanic.groupby('Ticket')['PassengerId'].transform('count')	1	1
ticket_table.loc[ticket_table['Alive_male_on_ticket'] > 0, 'Alive_male_on_ticket'] = 1	1	1
"test[""Gender""] = test[""Sex""].cat.codes"	1	1
np.max(X_train[feature]) - np.min(X_train[feature])	1	1
splitter.loc[:, splitter.columns != 'Survived']	1	1
train_df['Sex'] = train_df['Sex'].astype('category')	1	1
test_dataset['Sex'] = label_encoder.fit_transform(test_dataset['Sex'])	1	1
predictionsTrain.append(pred)	1	1
test_set.shape[0]	1	1
trainDF.append(testDF, ignore_index=True)	1	1
dataset['FamilySize'] = dataset['SibSp']+dataset['Parch']+1	1	1
"df[""Cabin""].to_dict()"	1	1
train_origin.loc[(train_origin['pclass'] ==pclass) & (train_origin['embarked'].isin(['S'])), ['fare']]	1	1
df['Gender']  = df.Sex.map({'female':0, 'male':1}).astype(int)	1	1
test['SexAge'] = test['Sex']	1	1
scores_list.append(grid.best_score_)	1	1
ax[1].set(xlabel='tol', ylabel='Model Build Time')	1	1
"train.loc[train[""Title""] == ""Master""].mean()[""Age""]"	1	1
"combined.loc[f_member,""family_role""] = ""Father"""	1	1
models.append('Decision Tree')	1	1
"train[""Embarked""] = train[""Embarked""].fillna(""S"");"	1	1
data['Age']=data['Age'].astype(int)	1	1
train['Ticket_Cat'] = np.where(train['Ticket_Cat'] == 'NAN', np.nan, train['Ticket_Cat'])	1	1
train.Cabin.str[0].unique()	1	1
df['FareRange'],bins = pd.qcut(df.Fare,4,labels=[0,1,2,3],retbins=True)	1	1
combined.drop('PassengerId', axis = 1, inplace = True)	1	1
"df.drop([""FamilyName""], axis=1, inplace=True)"	1	1
"train_set.drop([""Cabin""],axis=1,inplace=True)"	1	1
"SupportVector.to_csv(""SupportVector.csv"", index=False)"	1	1
train_hard_pred_matrix.sample(5)	1	1
train_df['FareGroup'] = pd.cut(train_df['Fare'],bins,labels = labels)	1	1
titanic_data['Q'] = embarked_dummy.Q	1	1
proc_data.head()	1	1
X['SibSp'] + X['Parch'] + 1	1	1
test_df['Age_bins'] = pd.cut(train_df['Age'],bins = age_bins, labels = age_labels, include_lowest = True)	1	1
"train.loc[(train[""Pclass""].values == 1) & (train[""Age""].isnull()), ""Age""] = meanAge1"	1	1
train['Ticket_Lett']	1	1
row['Age'] <= 16:	1	1
df1.fillna(0)	1	1
"train.drop(columns=""passengerid"")"	1	1
"dataset['Embarked'].fillna(""S"", inplace = True)"	1	1
data_train.drop(['Parch'], axis=1)	1	1
data.loc[data.Fare > 31, 'FareBand'] = 4	1	1
"logistic_submit_dataframe.to_csv(""logistic_submission.csv"", index=False, header=[""PassengerId"", ""Survived""])"	1	1
train_df[['Family','Survived']].groupby('Family', as_index=False).mean()	1	1
all_data.drop('Ticket', axis = 1)	1	1
dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1 # Check for no companions	1	1
train['Fare'].hist(density = True)	1	1
one_hot_encoded_test_df['CabinLetter_T'] = 0	1	1
combined_df.drop('Name', axis=1)	1	1
"titanic[""Embarked""] = titanic[""Embarked""].fillna(""S"")#fill the two missing values with the most occurred value, which is ""S""."	1	1
"df[""FinalSurvived""] = df.Survived # Moving Survived to the last column"	1	1
titanic_train_data.pivot_table(index = 'Sex',values ='Survived')	1	1
train_df_dummies.align(test_df_dummies,join='left',axis=1)	1	1
final_test['Survived'] = model.predict_classes(final_test[cols])	1	1
dataset['Family_members_Band'] = dataset['Family_members_Band'].astype(int)	1	1
results.append(benchmark(MultinomialNB(alpha=.01)))	1	1
train['title'] = train['Name'].str.extract(patern)	1	1
test_data.drop(['Name'],axis = 1)	1	1
submission['Survived'] = y_pred_tmp.astype('int')	1	1
train_dataset['Title'] = train_dataset['Title'].replace('Ms','Miss')	1	1
"full_data.loc[ full_data['Age'] <= 16, 'Age'] 					       = 0"	1	1
data['NameTitle'].value_counts(sort=True).plot(kind='bar', ax=ax[0], rot=0, colormap='vlag')	1	1
sub_df['Survived'] = sub_pred	1	1
train_copy['Cabin_Category'] = train_org['Cabin'].apply(lambda x: 0                                                         if type(x) == float else 1).astype(int)	1	1
data['Has_cabin'] = ~data.Cabin.isnull()	1	1
titanic_df[['Sex','Survived']].groupby(['Sex'],as_index=True)	1	1
df_test['Survived']=y_pred	1	1
dataset['Fare'].fillna(0, inplace=True)	1	1
df['title_group'].unique()	1	1
secondtime_train_data.describe()	1	1
test.to_csv( 'titanic_ds_prediction.csv' , index = False )	1	1
raw_data['Age'] = raw_data['Age'].dropna().astype(int)	1	1
entire.groupby(['Status', 'Pclass'])['Age'].agg(['median', 'count'])	1	1
test_df['Embarked'] = test_df.Embarked.astype('category')	1	1
test2['Fare_Pclass'] = test2['Fare'] * test2['Pclass']	1	1
input_df.head()	1	1
accuracy_logreg_kfolds.append(accuracy_logreg_kfold)	1	1
df_test.loc[ (df_test.Sex == 'male') & (df_test.Fare_bin == 11), 'Survived'] = 1	1	1
test_data.drop(['Cabin','PassengerId','Name','Ticket','Sex_female','Parch','SibSp'],axis=1,inplace=True)	1	1
test_raw.drop(['Cabin'], axis = 1)	1	1
train['Title']=train['Title'].replace('Ms', 'Miss')	1	1
x_train['Embarked'].isnull().value_counts()	1	1
"df.loc[i, ""nor_Fare""] = np.log10(np.abs((df.Fare[i]+0.1-np.mean(df.Fare)))/np.std(df.Fare))"	1	1
train_dat.sample(10)	1	1
np.sum(dZ, axis=1, keepdims=True) # Gradient of cost w.r.t. b	1	1
"txt.replace(""  "", "" "").replace('""', """").replace(""'"", """")"	1	1
estimators.append(('cart', model2))	1	1
data.groupby('Survived').isChild.value_counts() # more adults died than children	1	1
test_df_X['Age']=test_df['Age'].interpolate()	1	1
full_w_dum.head()	1	1
df.loc[(df['Pclass']==1) & (df['Fare'] > 100),'Fare'] = df[df['Pclass']==1].mean()	1	1
train.loc[(train['Age'] > 5) & (train['Age'] <= 12), 'Age'] = 1, #Child	1	1
data.loc[data['Age']<16.5,'Age']=0	1	1
"train[[""Pclass"",""Age"",""Sex"",""Fare"", 'SibSp', 'Parch', 'Embarked']].values"	1	1
data_test['Ticket']	1	1
ax[4].set_xlabel('The Pclass');ax[4].set_ylabel('Cabins');ax[4].set_title('Pclass regression  in cabins')	1	1
"combined.loc[cp,""Age_cat""] = non_NA_cat"	1	1
data_test_dummy2['Age'].values.reshape(-1, 1)	1	1
tf['Cabin']	1	1
df['Pclass'].notnull().mean()	1	1
Test.values[:,0]	1	1
tr['Sex'] =tr['Sex'].replace('female',2)	1	1
test.loc[(test.Age >= 10) & (test.Age < 25),'Age'] = 2	1	1
embarked_corr.columns.droplevel(0)	1	1
train4.drop(['SibSp', 'Parch'], axis=1)	1	1
train_dataset.loc[train_dataset['Fare']<=7.91,'Fare']=0	1	1
"df_surname[""SurnameMembers_Simple""] = pd.cut(df_surname['SurnameMembers'], bins=[0,1,4,20], labels=[0,1,2])"	1	1
train_file['Age']=train_file['Age'].fillna(train_file['Age'].median())	1	1
combine.drop(labels=['Ticket_group'],inplace=True,axis=1)	1	1
train['Has_cabin'] = train['Cabin'].apply(lambda x: 0 if type(x)==float else 1)	1	1
Y['PassengerId']	1	1
testDataFeatures['Survived'].to_csv('gender_submission.csv')	1	1
"df_test[""Age""] = df_test[""Age""].fillna(df_test[""Age""].mean())"	1	1
test_df['Sex'] = test_df.Sex.astype('category')	1	1
"testd.fillna({""Age"": 30})"	1	1
group_final.Survived.apply(lambda x: 1 if x == 1 else 0)	1	1
df_train.loc[ df_train['Fare'] <= 7.91, 'Fare'] = 0	1	1
traind['Embarked'] = traind['Embarked'].map(embarked_mapping)	1	1
x_test['IsAlone']= 1	1	1
"titanic_test.drop(""Embarked"", axis=1, inplace = True)"	1	1
test_df.loc[ train_df['Fare'] > 31, 'Fare'] = 3	1	1
train_df['Age'] = train_df['Age'].fillna(train_df['Age'].dropna().median()) # Median Age	1	1
test_data['Title'] = test_data['Title'].replace('Mlle.','Miss.')	1	1
lowest['age']:	1	1
mu_sigma_list.append(('{}_NN__p_{}__leafsize_{}'.format(i,j,k), mu, sigma))	1	1
X['norm_fare'] = minmax.fit_transform(X.Fare.values.reshape(-1,1))	1	1
full['Fare'] = full['Fare'].replace(2, 'Low')	1	1
"train[""Fare""]=train[""Fare""].fillna(train[""Fare""].mean())"	1	1
test['title'] = titles_test	1	1
NameList.append(G.node[Passenger]['MaidenName2'])	1	1
X_test['Sex'] = labelencoder_y.fit_transform(X_test['Sex'])	1	1
X['SibSp'].dropna(axis=0, inplace=True)	1	1
fare_df.drop(['Fare'],axis=1,inplace=True)	1	1
df.apply(lambda x: [x.unique()])	1	1
"combined.Cabin.fillna(""NA"")"	1	1
traindf.values #convert into array the train set	1	1
age_mean.append(age_unknown).append(age_guess)	1	1
dataset['Fare_cat'] = 0	1	1
"related_people.loc[related_people[""PassengerId""]==248,""RGroup""]=""Hamalainen_M"""	1	1
"data_test[""Cabin""] = data_test[""Cabin""].str[0]"	1	1
data.corr(method='spearman')	1	1
df['AgeState'] = np.where(df['Age'] >= 18, 'Adult', 'Child')	1	1
train_data['ticket_num']=list(map(extract_int, train_data['Ticket']))	1	1
"xgb_submit.to_csv(""submission_xgb.csv"",index=False)"	1	1
dataset.loc[dataset['Age']> 64, 'Age'] = 4	1	1
dataset['family_size'] = dataset.SibSp + dataset.Parch	1	1
"df.join(pd.get_dummies(df[""Sex""]))"	1	1
X.Age.mean()	1	1
raw_train['Embarked'].value_counts().plot(kind='bar', title='Amount of passenger per port', color='g')	1	1
test_df['People'] = test_df['People'].map({'male': 1, 'female': 2, 'child': 3})	1	1
dftr['Embarked'] = le.fit_transform(dftr['Embarked'])	1	1
np.where(embarked=='C', 0, embarked)	1	1
"total[""Sex""] = total[""Sex""].map({""male"": 0, ""female"":1})"	1	1
df_result.to_csv('submission.csv', index=False, header=True)	1	1
df_train['Survived'].ravel()	1	1
important_features.sort_values('Importance',ascending=False)	1	1
dfTrain['Ticket_Characters'] = dfTrain['Ticket'].apply(lambda x: x.isdigit())	1	1
"df_train[""PassengerId""]"	1	1
data.Age.loc[(data.Age<0) & (data.alone==1) & (data.Personal_Titles=='Mrs')] =    data.Age[(data.Age>=0) & (data.alone==1) & (data.Personal_Titles=='Mrs')].median()	1	1
test6['HasCabin'] = 1	1	1
age_present.SibSp.astype('category', categories=list(range(9)), ordered=True)	1	1
dataset.loc[(dataset['Age'] == 0),'child'] = 1	1	1
"df[""Age""] = pd.cut(df[""Age""],cut_points,labels=label_names)"	1	1
new_train.iloc[:,3].values	1	1
dataset.loc[(dataset['Fare'] > 8.05) & (dataset['Fare'] <= 14.25), 'FareGroup'] = 1	1	1
"train[""Fare""].std()"	1	1
test_df.drop(['person'],axis=1,inplace=True)	1	1
"Ticket.append(""1"")"	1	1
df_test['age_mid'] = df_test['Age'].apply(lambda x: 1 if (x > 10 and x < 50) else 0)	1	1
stacked.max()+1, range=	1	1
x['Age'] = 11	1	1
df['age']           = pd.cut(df.age,12, labels=range(12))	1	1
data.apply(lambda x: 1 if ((x.Parch>0) & (x.Age>=0) & (x.Age<20)) else 0, axis=1)	1	1
dataset['Title'] = dataset['Title'].apply(lambda x: 'Misc' if title_names_union.loc[x] == True else x)	1	1
names.loc[(names.sum(1)>1),'mlle'] = 0	1	1
titanicTrain.drop('Embarked',1)	1	1
axes[1].set_xlabel('Survived')	1	1
num_pipe.append(('Family_total', Family_total))	1	1
test_df.loc[:,colsSVM]	1	1
train_df.groupby(['Sex']).Survived.sum()	1	1
dataset.tail(5)	1	1
X_full.dtypes.	1	1
train_ds_0fare[['PassengerId', 'Sex']].groupby(['Sex']).count()	1	1
"_df[""name_len""] = _df.name.apply(lambda i : len(i))"	1	1
df.ix[df[column].isnull(), column] = 1e9	1	1
"combined[""FamilySize""]=FamilySize"	1	1
"titanic_df.drop([""Survived""],axis=1)"	1	1
train[['Title', 'Survived']].groupby(['Title']).mean()	1	1
np.std(X_dev_raw,axis=0,keepdims=True)	1	1
train_model.drop(['Survived'], axis = 1)	1	1
test_num.describe(include='all')	1	1
train['FamilySize']=1+train['SibSp']+train['Parch']	1	1
final_test_data_set.head()	1	1
age_vs_survived['AgeGroup'] = ['Child to Youth', 'Youth to Middle Aged', 'Middle Aged' ,'Middle Aged to Old']	1	1
encode.transform(train.Sex)	1	1
sns.boxplot(y='Parch', x='SibSp', ax=ax2, data=test_df, linewidth=1, saturation=5, palette=palette8)	1	1
data['Cabin'] = data['Cabin'].fillna('Unknown')	1	1
test2_df['Embarked'] = test2_df['Embarked'].map(emb_conv)	1	1
dataset['Title'] = dataset['Title'].map(title_dict).astype(int)	1	1
train['Fare_Cat']=train['Fare'].apply(fare_cat)	1	1
merged.info()	1	1
titanic.Survived.mean()	1	1
train['c_mean_s'] = pd.Series(c_mean_scaled, index=train.index)	1	1
row['Pclass'] == '3':	1	1
"train_data.loc[train_data[""Name""].str.contains(""Lady.""), ""TitleLady""] = 1"	1	1
solution.to_csv('newsolution', index_label = ['PassengerId'])	1	1
train_df[['Embarked','Survived']].groupby(['Embarked']).mean().plot.bar(ax=ax[0])	1	1
df_data['FamilySmall'] = np.logical_and(df_data['Family'] > 1, df_data['Family'] < 5).astype(int)	1	1
test_copy['Parch_Category'] = 4	1	1
X_test['SibSp'] = test_df['SibSp']	1	1
data['age_level'] = pd.qcut( data['Age'], 5 )	1	1
train_df['Family_Size_Class'] = train_df['Family_Size'].map(get_family_group)	1	1
x['Person_Class']	1	1
confused_mat[1][1]	1	1
sibsq_set.T	1	1
dot_list.append(dots)	1	1
whole.drop(['Survived'],axis=1).iloc[:891]	1	1
result_df_xgb.to_csv('submission.csv', columns=['PassengerId', 'Survived'], index=False)	1	1
df.describe(include=['int64', 'float64']).T	1	1
dataset[['Name','Title']].head(5)	1	1
modelTest.append(knclass)	1	1
data_raw.describe(include = 'all') #see both numerical and categorical	1	1
train.drop(['Sex'], axis = 1, inplace = True)	1	1
final.rename(columns = {'KNN_predictions':'Survived'}, inplace = True)	1	1
pd.merge(df, df3, left_index = True, right_index = True)	1	1
np.sum(difference, axis=1)	1	1
"test[[""PassengerId"", ""Survived""]].to_csv(""./submit.csv"", index=False)"	1	1
train['NameLength'] = train['Name'].apply(len)	1	1
trainData['PassengerId'].count()	1	1
test_df['Fare'].fillna(test_df['Fare'].mean(), inplace = True)	1	1
axes[1].set_title('Embarked')	1	1
df.rename(columns={'emb':'Embarked'},inplace=True)	1	1
model.transform(final_test_set_X)	1	1
tmp_clfs.items():	1	1
df_age.loc[(df_age['Age'] > 16) & (df_age['Age'] <= 26), 'Age'] = 1,	1	1
corr_coef['Correlation'] = pd.Series(logreg.coef_[0])	1	1
full.set_value(152, 'Fare', 7.75);	1	1
total['SmallF'] = total['Fsize'].map(lambda s: 1 if 2 <= s <= 4  else 0)	1	1
"dftotal[""KNNs""]="""""	1	1
combined_df.Sex.mean()	1	1
train_df['Embarked'] = imp_frequent.transform(train_df[['Embarked']]).ravel()	1	1
train_data.drop(['Survived', 'Age', 'PassengerId'], axis = 1)#since i will be suing the childs column instead	1	1
train_dataset.loc[ (train_dataset.Pclass == 3) & (train_dataset.Sex_male == 1) & (train_dataset.Age > 60), :]	1	1
"vif[""features""] = X_train.columns"	1	1
cv_res['CrossValErrors']	1	1
allset.drop(['Cabin'],axis=1)	1	1
NN_submission.to_csv('Titanic_perceptron_submission.csv',index=False)	1	1
df.drop('SibSp', axis=1, inplace=True)	1	1
df.loc[(df.Fare.isnull(),'Fare')]=0	1	1
"titanic_test.loc[titanic_test[""Embarked""] == 'Q',""Embarked""] = 2"	1	1
train_d.drop('Name',axis=1)	1	1
"train_model[""Survived""]"	1	1
data_train['Cabin'].notnull().sum()	1	1
titanic[['Age','Fare']].corr()	1	1
data_no_nan.loc[:, 'Age'] = fill_series(data_no_nan['Age'])	1	1
trainData['Sex'].value_counts().sort_index().plot.bar(ax=axs2[0], figsize=(12, 6), fontsize=16)	1	1
dataset['FareBand']	1	1
"dataset['title_level'] = dataset.title.map({""Miss"": 3, ""Mrs"": 3,  ""Master"": 2, 'Mister': 2,  ""rare"":2, ""Mr"": 1})"	1	1
test_df.drop(['Cabin', 'Ticket'], axis=1, inplace=True)	1	1
"_df[""childness""] = _df.age.apply(lambda x : (0 if x > 17 else (1 if x > 14 else 2)))"	1	1
df_test['Fare'] = df_test['Fare'].fillna(2)	1	1
result.drop(categorical_data, axis=1)	1	1
test.drop(['Pclass','Sex'],axis = 1)	1	1
raw_df['Embarked']=raw_df['Embarked'].fillna('Unknown')	1	1
train.loc[(train['farePP'] < 26.0), 'fareCat'] = 2	1	1
train.head()['Embarked']	1	1
"df['Embarked'] = df[""Embarked""].replace(['S','C','Q'], [0,1,2])"	1	1
data['Pclass'] = data['Pclass'].astype('category').cat.codes	1	1
"x_train[""Age""].plot.hist(alpha=0.5)"	1	1
"axs5[1].set_title(""People who survived"", fontsize=20)"	1	1
full_data['TravelGroup'] = full_data['TravelGroup'].map( {'alone': 0, 'small': 1, 'big': 2} ).astype(int)	1	1
final_score_rs.append(model_2.score(x_te, y_te))	1	1
model.add(Dense(9, activation='relu'))	1	1
train_df.iloc[:,[1,2,4,5,6,7,9]]	1	1
test_df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'PassengerId','SibSp','Parch'], axis=1)	1	1
axs[0].scatter(X_train_reduced[np.where(y_train == 0), 0], X_train_reduced[np.where(y_train == 0), 1], marker='o', c='red')	1	1
train_recoded.drop([c.Survived], axis=1)	1	1
X.drop(['Name', 'Ticket', 'Cabin'], axis=1)	1	1
data_df['Embarked'] = data_df['Embarked'].fillna(data_df['Embarked'].value_counts().idxmax())	1	1
"train_df['Embarked'].iloc[829] = ""C"""	1	1
known_data.iloc[idx].Cabin:	1	1
test_input['Sex'] = test_input['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
X.transform({self.column_name: self.mapping_func})	1	1
test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace = True)	1	1
"data_copy.loc[:,""Sex""] = data_copy[""Sex""].fillna(""female"")"	1	1
"test_df.describe(include=""all"")"	1	1
drop_elementsONS.append('Fare')	1	1
"processed_features.drop(""Name"",axis=1)"	1	1
"train.drop(labels=""Cabin"",axis=1,inplace=True)"	1	1
pclass_survive_crosstbl.sum(axis = 1)	1	1
"train_df[""fare""] = train_df[""fare""].fillna(train_df[""fare""].mean())"	1	1
kaggle.drop(['PassengerId','Ticket'],axis=1)	1	1
train_df.drop(['SibSp','Parch','familySize'],axis=1)	1	1
train['HasFamily'] = 0	1	1
df_data.Title.head() #Lets see the result.	1	1
titanic_df['age'].describe()	1	1
test.Age.fillna(test.Age.median()) ##mean()?	1	1
"train[""n""] = 0"	1	1
scores_log_reg.mean()	1	1
test_copy[['High_Fare_Female', 'first_class_female', 'age_division', 'Fare', 'Sex']].values	1	1
train_df['Title'] = train_df['Name'].map(extract_title)	1	1
"testingset[""Pclass""][x]"	1	1
ax2[0].set_title('Feature Importance in Gradient Boosting')	1	1
train_df.drop('Ticket', 1, inplace=True)	1	1
"test_df.drop([""Name"",""Ticket""], axis=1)"	1	1
df['is_female'] = df['Sex'].apply(lambda x: 1 if x == 'female' else 0)	1	1
train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]	1	1
np.median(data.Fare[(data.Embarked == embarked) & (data.Pclass == pass_class)].dropna())	1	1
"X_train[[""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Embarked"", ""Title"", ""IsAlone"", ""FareAdj"", ""Simple_S_C"", ""CabinInfo"" ] ] =  scaler.fit_transform(X_train[ [ ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Embarked"", ""Title"", ""IsAlone"", ""FareAdj"", ""Simple_S_C"", ""CabinInfo"" ]])"	1	1
"train.loc[(train[""Survived""]==1)&(train[""Pclass""]==3), ""Age""]"	1	1
train_df[['Embarked', 'Pclass', 'Name']].groupby(['Embarked', 'Pclass']).count()	1	1
test.loc[(test['family_size']>1)&(test['family_size']<=4),'travel_company']=1	1	1
frame[['one','four']].groupby(['one'],as_index=False).mean().sort_values(by='four')	1	1
"test.loc[(test['SexAge']==""children""),'Children'] = 1"	1	1
Scaler.transform(X_test)	1	1
full_df[ 'Cabin' ] = full_df[ 'Cabin' ].map( lambda c : c[0] )	1	1
super_learner.add(list(base_learners().values()),proba=True)	1	1
data['Title'].replace(title_map, inplace=True)	1	1
survivor_pred.head(n=10)	1	1
out['emS'] = out.Embarked == 'S'	1	1
"sibsp[""STD""] = train[[""SibSp"", ""Survived""]].groupby([""SibSp""], as_index = False).std()[""Survived""]"	1	1
train_copy['Cabin'] = train_copy['Cabin'].fillna('-1')	1	1
all_data.at[796,'Title']='Mrs'	1	1
label_encoder_title_tr.transform(titanic_test[:, 5])	1	1
cols.append(col2)	1	1
"train_data.hist(column=""Survived"")"	1	1
features.sort_values(by = ['importance'], ascending = True, inplace = True)	1	1
df['Survived'][df['Sex'] == 'female'][df['Age'] < 18][df['Pclass'] == 2].value_counts()	1	1
train.drop(categorical_columns, axis=1).describe(include=[np.number])	1	1
data['Survived'].value_counts().plot(kind='pie',explode =[0,0.1],autopct='%1.1f%%',ax=ax[0])	1	1
dataset['female'] = np.where(dataset['Sex']=='female',1,0)	1	1
"data.set_value(i, 'Name', ""Don"")"	1	1
submission2.to_csv('submission2.csv', index=False)	1	1
np.stack([real_age,sex_real,pclass],axis=1)	1	1
"data[""FamilySize""] = train[""Parch""] + train[""SibSp""] + 1"	1	1
accs.append(metrics.accuracy_score(y_validation, y_model))	1	1
"df1[[""Survived""]]"	1	1
dataset.loc[dataset['Pclass'] == 1, 'Pclass1'] = 1	1	1
model_type.append('GridSearchCV XGBoost')	1	1
combine['Child'] = combine.Age <= 10	1	1
dataset.loc[dataset['Age'] <= 10, 'IsChild'] = 1	1	1
data.head(30)	1	1
dataset['AgeBand'] = dataset['AgeBand'].astype(int)	1	1
data_set.append(list_take(row, [0, 2, 7, 9], False))	1	1
raw_test.join(fsize_df)	1	1
row['Pclass'] == 3 and row['Parch'] > 1:	1	1
train_data.set_index(['PassengerId'], inplace=True)	1	1
"titanic_train.groupby(""SibSp"")"	1	1
df_data.loc[df_data['Age'].isnull(), 'Age'] = predict_age1(df_data)	1	1
test_processed.loc[:, 'PassengerId'], test_processed.drop(columns=['PassengerId'])	1	1
data.drop(['PassengerId','Name','Sex','Ticket','Cabin','Has Cabin','SibSp','Parch'],axis=1)	1	1
test.loc[((test['Sex'] == 1) & (test['Pclass'] == 2)), 'gender_class'] = 5	1	1
train['Name_Title'] = train['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split('.')[0])	1	1
titanic_all['Small_fam'].loc[titanic_all['Small_fam'] < 5] = 1	1	1
df.loc[(df['Age'] >= 70.0525) & (df['Age'] <= 80), 'Age'] = 7	1	1
"dftest.loc[idx,""TicketButLast""]"	1	1
y.astype(np.float32),	1	1
valid_X['IsAlone'] = 1 #initialize to yes/1 is alone	1	1
"submission.to_csv(""file_name.csv"", index=False)"	1	1
tr['Deck'] =tr['Deck'].replace('E',5)	1	1
train_df.age.isnull().sum()	1	1
"df[""Title""] = pd.Series(df_title)"	1	1
"train_data[""Survived_str""] = np.select(conditions, choices)"	1	1
cols_to_drop.append('Ticket')	1	1
test_df['Title'] = test_df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
data_train.get(['Survived'])	1	1
train.append(test, ignore_index=True, sort=False )	1	1
trainingset.drop(['Cabin'],axis=1)	1	1
"axs7[0].set_title(""People on the Titanic"", fontsize=20)"	1	1
"test[""Title""] = test[""Title""].map(lambda x: target[x])"	1	1
"titanic[""Sex""] =titanic.Sex.apply(f)       #apply rule/function f"	1	1
norm.transform(np.array(f))	1	1
"dataset.loc[(dataset[""Age""]>50) & (dataset[""Age""]<=65),""Age""] = 3"	1	1
"bp[""min_samples_split""],"	1	1
"titanic[""Room""] = titanic.Room.astype(int)"	1	1
submission.to_csv('titanic_mvp_2_19_04_2018.csv', index=False)	1	1
ship.loc[ship['Age_was_missing'] == 1].sample(5)	1	1
test5['Sex'] = le.fit_transform(test5['Sex'])	1	1
titanic.Embarked.fillna(value='S', inplace=True)	1	1
dataset.loc[ dataset['Fare'] > 31.0, 'Fare' ] = 3	1	1
features['Pclass'] = full['Pclass']	1	1
X['Cabin'] = X['Cabin'].isnull().astype('int')	1	1
"test[""Fare""][test.Fare.isna()] = test[""Fare""].mean()"	1	1
df_Test.head()	1	1
df.Cabin.describe()	1	1
val['Fare'].agg(['min','max','count','mean','median'])	1	1
test.drop('Survived',axis=1,inplace=True)	1	1
"train_ori[""Title""]=(train_ori[""Name""].str.split(', ').str[1]).str.split('. ').str[0]"	1	1
df_test['individualticket'] = df_test['Fare'] / df_test['ticketcount']	1	1
x_train.shape,y_train.shape	1	1
"related_people.loc[related_people[""Ticket""]=='224252',""RGroup""]=""Carter_2"""	1	1
"titanic_train.groupby(""Pclass"")"	1	1
data_frame.Embarked.count();	1	1
"train_data[""TitleCountess""] = 0"	1	1
train_df.is_copy = False	1	1
df.loc[((df.Sex == 2) & (df.Pclass == 1)) , 'Se_Cl'] = 4 #rich female	1	1
test.loc[test['Cabin'].str.len() == 15.0, 'CabinL'] = test['Cabin'].astype(str).str[0]	1	1
"result.to_csv(""result_final.csv"", index = False)"	1	1
data['Sex_Code']=label.fit_transform(data['Sex'])	1	1
"data['Embarked'] = data['Embarked'].replace({""S"":1,""C"":2,""Q"":3})"	1	1
"datacv.drop(""PassengerId"", axis=1)"	1	1
row['Boy'] and (row['GroupID'] in boysSurvived):	1	1
ship['Title_Code'].loc[(ship['Title_Code'] == 0) & (ship['Survived'] == 0)].count()	1	1
dataset['FareAdjusted'] = dataset['Fare'].apply(lambda x: x if x != 0 else dataset['Fare'].median())	1	1
"df[""Age""][np.isnan(df[""Age""])] = rand"	1	1
np.round(predict_survival)	1	1
test['Initial']=0	1	1
data_frame.Embarked.astype(int);	1	1
"df_train[""Deck""] = df_data[""Deck""][:891]"	1	1
train_df['AgeBin_Code'] = data['AgeBin_Code'][:891]	1	1
df_train.append(re_train_temp)	1	1
"data_frame[""Title""]:"	1	1
tot.append(len(train_title[train_title.Title == k]))	1	1
df_titanic['Age'][condition].index	1	1
"v_data[[""Age"", ""Fare"", ""Survived""]].hist()"	1	1
var_auc.append(var)	1	1
Test['emQ'] = Test['Embarked'].map({'S':0,'Q':1,'C':0,np.nan:0}).astype(int)	1	1
X.drop(columns=['Name', 'Ticket', 'Cabin', 'Sex'])	1	1
df_titanic_test_mod['Embarked'].replace('C',2,inplace=True)	1	1
final_prediction.append(1)	1	1
"train_df[""Age""].plot.hist(x= ""Age"", ax = ax [1,0])"	1	1
sns.boxplot(y = 'Fare', data = train)	1	1
data.drop(['Name', 'Ticket', 'PassengerId', 'Cabin', 'Fare'], axis = 1)	1	1
ax[1].set(xlabel='tol', ylabel='Accuracy')	1	1
training_set.pivot_table('Survived', index='Title', columns='Pclass').plot(kind='bar')	1	1
data_pruned.loc[ data_pruned['Fare'] <= 8, 'Fare'] = 0	1	1
full_data.loc[ full_data['Fare'] <= 7.91, 'Fare'] = 0	1	1
submission.to_csv('GradientBoosting.csv', index=False)	1	1
"total.groupby([""Embarked"", ""Pclass""]).size().reset_index(name='count')"	1	1
test_df.loc[(test_df['Age'].isnull())&(test_df['Title']=='Mrs'),'Age'] = 36	1	1
plt.hist(df_all['Fare'], bins=100)	1	1
np.mean(hists[a_seed].history['val_acc'][-100:-1])	1	1
test['Sex'][test['Sex']=='female']=1	1	1
transformed_df['Age_Categorized_Young_Adult'] = age.Age_Categorized_Guess_Young_Adult	1	1
age_df.loc[ (age_df.Age.isnull()) ]# null Ages	1	1
df2.fillna(0, inplace = True)	1	1
dataset_train.head(5)	1	1
df_final.head()	1	1
"test[""Sex""] = test[""Sex""].map({""male"":0,""female"":1})"	1	1
df_train[['Survived','isSpecialTicket']].groupby('isSpecialTicket').mean().sort_values(by='Survived',ascending=False)	1	1
train_data[['SURVIVED', 'PCLASS', 'AGE', 'SIBSP', 'PARCH', 'EMBARKED', 'SEX']]	1	1
"data[""Pclass""] == 3"	1	1
"data[""Pclass""] == 2"	1	1
train_df.drop('Survived', axis=1).columns	1	1
"test[""Age""][test[""Age""] <= 16 ] = 0"	1	1
df_test.loc[ (df_test.Age.isnull()) & (df_test.Pclass == f+1) & (df_test.Sex == g), 'Age'] = median_age[f,g]	1	1
df.loc[df['Deck']=='G', 'Deck'] = 1	1	1
KNN_submission.to_csv('KNN-submission.csv', index=False)	1	1
full_set['HasCabin'] = full_set['Cabin'].apply(lambda x: 0 if isinstance(x, float) else 1)	1	1
grid_prediction.to_csv('prediction.csv', index=False)	1	1
model.feature_importances_.max() + headroom	1	1
secondtime_train_data.loc[:,['Survived','Pclass','Sex']]	1	1
"train[""Embarked_C""] = False"	1	1
Z['Embarked'] = pd.get_dummies(Z['Embarked'])	1	1
"train_set[""Embarked""].fillna(""S"",inplace=True)"	1	1
train_for_correlation.astype(float).corr()	1	1
"AgeTypeTrain.append(""2"")"	1	1
"train_data[""Age""].fillna(median, inplace=True)"	1	1
titanic_df['Age_filled'] = titanic_df['Age_filled'].fillna(titanic_df['Age'].median())	1	1
"train.select_dtypes(include=[""number""]).describe()"	1	1
data.Fare.quantile(0.25) - (IQR * 3)	1	1
dataset.loc[ dataset['Fare'] > 80, 'Fare'] = 4	1	1
"train[""fare_c""] = pd.qcut(train[""Fare""], 4, labels = [""1"", ""2"", ""3"",""4""])"	1	1
plt.hist(dataframe[target])	1	1
train_dataset.drop(['Name','SibSp','Parch','Ageband','Family','Fareband'],axis=1,inplace=True)	1	1
imputer_train.loc[imputer_train['Embarked'].isnull(), 'Embarked'] = modeEmbarked	1	1
train.iloc[:,0:1].values	1	1
traindf_info.shape	1	1
df.loc[ df['Fare'] > 31, 'Fare'] = 4	1	1
df_train.embarked.fillna('S', inplace=True)	1	1
y_train.append(passenger.Survived)	1	1
titanic_data.isnull().sum().sort_values(ascending=False)	1	1
ax[2].set_title('Sex Survival')	1	1
train_df.Fare.median(axis=0)	1	1
tf.mul(LAMBDA , tf.add(tf.reduce_sum(tf.pow(weights_1, 2)),tf.reduce_sum(tf.pow(weights_2, 2))))	1	1
full['Fare'] = full['Fare'].replace(4, 'High')	1	1
raw_data.select_dtypes(exclude=['object'])	1	1
test_df.ix[i, 'Title'] = re.search('([A-Za-z]+)\.', test_df.Name[i]).group(0)	1	1
df['Name_Len'] = df['Name'].apply(lambda x: len(x))	1	1
data['Survived'].fillna(value=0,inplace=True)	1	1
pred_X.round(0)	1	1
titanic['Fare'][titanic['Fare'].isnull()] = titanic['Fare'].median()	1	1
"test[""Fare""] = pd.qcut(test.loc[test[""Fare""] != 0, ""Fare""], q=5, labels=False)"	1	1
test_copy['Age'] = test_copy['Age'].fillna(value = 999)	1	1
data['Title'] = data.Name.str.extract(r'([a-zA-Z]+)\.', expand=False)	1	1
dataset.loc[dataset['Fare'] > 52.4, 'Fare']   = 2	1	1
"test_df.drop([""Ticket"", ""Cabin""], axis=1, inplace=True )"	1	1
age['Pclass'] = combined_df['Pclass']	1	1
"df_titanic[""Fare""]=df_titanic[""Fare""].fillna(random.randint(int(mean-std),int(mean+std)))"	1	1
"features_long.drop(['Pclass','Pclass_3'], axis=1)"""""""	1	1
train['Fare'] = pd.cut(train['Fare'], bins, labels=groups)	1	1
df.join(tmp)	1	1
stacked_model['CVScore'],	1	1
"pd.pivot_table(data=train, index=""FamilyType"", values=""Survived"")"	1	1
simple_train_df['Survived']	1	1
i['Title'] = i['Title'].replace('Mlle', 'Miss')	1	1
"test['Embarked'] = test['Embarked'].map({""S"" : 0,""C"": 1, ""Q"": 3})"	1	1
test.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace = True)	1	1
test.loc[(test['Fare'].isnull()) & (test['Pclass'] == 3), 'Fare'] = aveThirdFare	1	1
train.drop(['Name','Ticket','PassengerId'], axis=1, inplace=True)	1	1
age_df['female']	1	1
df_titanic['HasCabin'] = df_titanic['Cabin'].isnull().astype(int)	1	1
df_hist.shape[0] == 0:  # Empty DataFrame の時は	1	1
grp_df.loc[grp_df['SibSp']!=0, ['Age']]	1	1
titanic_dmy.ix[:,(1,2,3,4,5,6,7,8,9)].values	1	1
titanic_test_df['Age'].isnull().sum()	1	1
df_output[['PassengerId','Survived']].to_csv('to_submit.csv', index=False)	1	1
train['age_cuts'] = train['age_cuts'].astype(object)	1	1
"train[[""Survived"", ""Sex""]].groupby([""Sex""], as_index=False).mean().sort_values(by=""Sex"")"	1	1
parameters['model_name'] = 'titanic'	1	1
df_train['AgeRange'] = pd.cut(df_train['Age'], [0, 15, 80], labels=[0, 1])	1	1
data.loc[mask_m, 'Man'] = 1	1	1
data_full['Titles'] = data_full['Titles'].replace('Ms', 'Miss')	1	1
features_log_transformed.head()	1	1
"train[""Family_size""] = train[""Parch""] + train[""SibSp""]"	1	1
KNNaccu.append(accuracy_score(pred , y_test))	1	1
titanic_raw_train.shape[0]	1	1
train_df.loc[(train_df['Age'] > 7) & (train_df['Age'] <= 18), 'AgeGroup'] = 1	1	1
titanic.boxplot('Fare',by='Age_bin',figsize=(10,5),rot=10)	1	1
data['Age_code'] = encoder.fit_transform(data['AgeBin'])	1	1
"dataset['isMrTitle'] = dataset[""Title""].apply(lambda x: 0 if x != 'Mr' else 1)"	1	1
comparesion_df.head(14)	1	1
test_soft_pred_matrix.head()	1	1
"full.drop(""Cabin"", axis=1)"	1	1
model_scores['DecisionTree'] = DTree_grid_score	1	1
data_one.head()	1	1
y.info()	1	1
titanic.groupby(['Survived', 'Sex']).size()	1	1
"X[""Deck""] = encoders['deck'].transform(X[""Deck""])"	1	1
X['Sex'] = X['Sex'].map({'male':0,'female':1})	1	1
np.size(data[0::,1].astype(np.float))	1	1
df_test_cleaned['PassengerId']	1	1
t.iloc[0,:]/t.sum()	1	1
"df.loc[pid,""OtherName""] = m.group(4).strip()"	1	1
df_train[['Sex','P_Ti_Code','Ti_Code']] = df_data[['Sex','P_Ti_Code','Ti_Code']][:len(df_train)]	1	1
"dataset_train[""Survived""].groupby(dataset_train[""Parch""]).mean()"	1	1
Test_Master.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)	1	1
my_submission_RF.to_csv('submission_rf.csv', index=False)	1	1
df['Parch_bin'] = pd.cut(df['Parch'], bins=[0,1,4,20], labels=['None','Small','Large'], right=True)	1	1
test['has_cabin_T'] = raw_test['has_cabin_T']	1	1
"titanic_training_data.loc[titanic_training_data[""Sex""]==""female"",""Sex""] = 1"	1	1
"df_test[""Title""] = titles_test"	1	1
titanic[['Survived','Pclass']].groupby('Pclass').mean().reset_index().sort_values(by='Survived',ascending=False)	1	1
raw_test.isnull().sum()	1	1
"train[""Fare""] = train[""Fare""].fillna(fare_median)"	1	1
parametros.sort_values('Parametros',ascending=False).set_index('feature')	1	1
train.drop(['CategoricalFare'], axis = 1)	1	1
entire.set_value(index, 'Age', median)	1	1
df['Age'].iloc[i] = age_pred	1	1
test['Cabin'][~test.Cabin.isnull()]=1	1	1
np.where(X_train[variable].isin(frequent_cat), X_train[variable], mode_label)	1	1
train_df['FamMembers'] = train_df['SibSp'] + train_df['Parch'] + 1	1	1
train.loc[train['Name'] == name, 'title'] = 'Mr'	1	1
age_sur['Survived'].tolist(),	1	1
merged_df.drop(columns=['title'])	1	1
test_df['Embarked'].fillna(test_df['Embarked'].mode()[0], inplace = True)	1	1
dataset.loc[(dataset.Age.isnull())&(dataset.Initial=='Mrs'),'Age']=36	1	1
train.groupby('Salutations')['Age'].mean()	1	1
"test[""Cabin""] = test[""Cabin""].fillna(""C"")"	1	1
np.append(arr=test_x,values=emb_x,axis=1)#joining embarked column to test_x	1	1
"titanic[[""Cabin""]].copy()"	1	1
"train[""Title""] = lb_make.fit_transform(train[""Title""])"	1	1
train_df['familysize'] = train_df['sibsp'] + train_df['parch'] + 1 # ゼロにならないように 1 を足す	1	1
"train[""title""] = train[""title""].replace('Ms', 'Miss')"	1	1
"traindf[['Age','Fare']] = scaler.fit_transform(traindf[['Age',""Fare""]])"	1	1
testONS.values # Creats an array of the test data	1	1
df_test['Title'] = df_test.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\.', x).group(1))	1	1
df_comb.join(pd.get_dummies(df_comb[['Sex', 'Embarked','Title', 'Deck']]))	1	1
oof_test_training_set.mean(axis=0)	1	1
"train_df.loc[ (train_df[""Sex""]==""male"") & (train_df[""Age""].isnull()), ""Age""] = male_mean_age"	1	1
imputer_train.transform(X_train[:, 2:3]) # Convert NaN's to mean of whole column	1	1
dt.loc[(dt['Age']>48)&(dt['Age']<64),'Age']=3	1	1
combined.append(test)	1	1
train_df.loc[train_df['FamilySize'] == 1, 'IsAlone'] = 1	1	1
train_test['Sex'] = train_test['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
train['Survival_Predict'].loc[train.Predict_Score>50]=1	1	1
"age0_df.drop([""Name"", ""Ticket"", ""Age"", ""Sex"", ""Fare"", ""Cabin"", ""Embarked"", ""PassengerId""], axis=1)"	1	1
test_df.replace('C',0)	1	1
data_train.loc[data_train['Cabin'].notnull(),'Cabin'] = 'Yes'	1	1
Test.drop('Pclass',axis=1)	1	1
"test['Young_m'] = (test['Age']>=18) & (test['Age']<=40) & (test['Sex']==""male"")"	1	1
test3['Fare'] = test3['Fare'].fillna(test3['Fare'].median())	1	1
"data_df['Age']=data_df[""Age""].astype(""int"")"	1	1
df['embarked'] = df.embarked.fillna('U').apply(lambda x: x.lower())	1	1
"processed_dataframe[""Fare""] = dataframe[""NormalizedFare""].copy()"	1	1
score.append(gnb.score(X_val, y_val))	1	1
comb['Title'].replace(['Miss','Mlle','Mme','Mrs','Ms'],'Ms',inplace=True)	1	1
fill_train_age.loc[fill_train_age['Pclass']==pclass, 'Age'] = pclass_median[pclass]	1	1
train_recoded.drop(columns_to_drop, axis=1, inplace=True)	1	1
gender_encoder.transform(train.Sex)	1	1
df.Age.fillna(df.Age.mean(),inplace=True)	1	1
transformed_df['Title_Royalty'] = title.Title_Royalty	1	1
"df[""FamilyName""] = df.Name.apply(extract_name)"	1	1
df.drop(['BinnedAge', 'BinnedFare'], axis=1)	1	1
data_copy['Embarked']=data_copy['Embarked']*np.abs(corr_val['Embarked'])/total_val	1	1
test['Survived_avg'] = y_test_preds_avg.astype(int)	1	1
plt.hist(x=[train_df[train_df['Survived']==1]['Age'],train_df[train_df['Survived']==0]['Age']],stacked=True,color=['red','blue'],label=['Survived','Dead'])	1	1
full_df['title'] = full_df.name.str.extract(r'^[^,]+, ([\S]*) .*$', expand=False).astype('category')	1	1
data['title']=data['Name'].map(lambda x:parse_name(x)[1])	1	1
"test_df[""Title""] = test_df['Title'].map(title_mapping)"	1	1
"in [""Miss"", ""Mlle"", ""Lady""]: # Jeunes"	1	1
"train_features.drop(""Survived"", axis=1)"	1	1
df.iloc[perm[validate_end:]]	1	1
data['Sex'] = encoder.fit_transform(data['Sex'])	1	1
dataset['Pclass']	1	1
submission.to_csv('titanic_ensemble_model.csv', index=False)	1	1
names.loc[(names['don'])==1,'mr'] = 1	1	1
"data_df[""Room""] = data_df[""Room""].fillna(data_df[""Room""].mean())"	1	1
test['Survived_rf_wtd'] = test['Survived_nn']*recall_rf	1	1
df_test['Title']=df_test.apply(replace_titles, axis=1)	1	1
test_data['Pclass'].isnull().sum()	1	1
test['Title']=test['Name'].str.extract(' ([A-Za-z]+)\.',expand=False)	1	1
"SVC_result[2][""best_model""]"	1	1
df_train['age_snr'] = df_train['Age'].apply(lambda x: 1 if x >= 50 else 0)	1	1
"titanic_train_df[[""SibSp"", ""Survived""]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
"titanic['SharedTicket']= 0 # A new feature ""FanTicket"" created with initial value ""0"""	1	1
train.groupby('Survived')['Sex'].value_counts().unstack(level=1).plot.bar(stacked=True)	1	1
df.Age.fillna(df.Age.dropna().median(), inplace=True)	1	1
test_df.loc[test_df['FamilyMembers'] == 1, 'IsAlone'] = 1	1	1
combine['Cabin_Lv'].unique()	1	1
data_df['Ticket_Lett'] = data_df['Ticket'].apply(lambda x: str(x)[0])	1	1
"row[""Female""] == 1 :"	1	1
df_train['is_alone'] = df_train['family_size'].map(lambda f: 1 if f == 1 else 0)	1	1
"titanic_test[""Age""] =  titanic_test[""Age""].fillna(titanic[""Age""].median())"	1	1
dset.reset_index(inplace=True, drop=True)	1	1
trainPCA2.drop(columns = ['Age', 'SibSp', 'Parch', 'Fare', 'EmbarkedC', 'EmbarkedS', 'EmbarkedQ', 'SexM', 'SexF', 'Pclass1', 'Pclass2', 'Pclass3'])	1	1
test_data['Fare'] = test_data['Fare'].apply(impute_fare)	1	1
"test[""Cabin_8""] = 0"	1	1
titanic_train_data['Age'].isnull().sum()	1	1
x['forest'] = sum(fSurvived == split['Y_cv'])/len(fSurvived)	1	1
train.drop(columns=['PassengerId', 'Ticket', 'Cabin'], inplace=True)	1	1
df_all.loc[:,numerical_col].std()	1	1
titanic_df.Age.mean() + titanic_df.Age.std(),	1	1
train['Ttype'] = train['Ticket'].str[0]	1	1
titanic.groupby(['Pclass', 'Sex', 'Title'])	1	1
frame['n_ticket']=frame.Ticket.replace(n_ticket)	1	1
df_full.loc[mask_train, data_columns] = scaler.fit_transform(df_full.loc[mask_train, data_columns])	1	1
pipelines.append(('XGB', XGBClassifier()))	1	1
sns.boxplot(x=names, y=results)	1	1
"combined[""Pclass""] = combined[""Pclass""].map(int_to_eng)"	1	1
"dftest.loc[idxs,""Survived""]=0"	1	1
"plt.rcParams[""figure.figsize""] = (20, 20)"	1	1
data['AgeN'],cat=pd.qcut(data['Age'],5,retbins=True,duplicates ='drop')	1	1
train['Age'].loc[(train['Sex'] == 'female') & (train['Fare'] == i) & pd.isnull(train['Age'])] = train['Age'].loc[(train['Sex'] == 'female') & (train['Fare'] == i)].median()	1	1
test_data.Fare.fillna(value=test_data.Fare.mean(), inplace=True)	1	1
testData.loc[(testData.Age.isnull())&(testData.Initial=='Master'),'Age']=7	1	1
ax[2].set(xlabel='C', ylabel='Build_Time')	1	1
dataset.loc[(dataset['Age']>=48)&(dataset['Age']<64),'AgeBand']=3	1	1
train.groupby(['Age1', 'Pclass']).Survived.mean().plot(kind = 'bar')	1	1
train_data['Age'].isnull().sum()	1	1
df_train.groupby('Pclass')['Survived'].mean()	1	1
test7.drop(['SibSp', 'Parch'], axis=1)	1	1
test['Sex'] = test['Sex'].map(gencov)	1	1
train_ds.drop('Ticket', axis= 1, inplace= True)	1	1
train_df['Embarked']=train_df['Embarked'].fillna('S')	1	1
pd.pivot_table(tit_df, values = 'Survived',                     index = ['Parch', 'female', 'MMM'],                     columns=['Pclass'],                     aggfunc=np.mean)	1	1
train['Embarked'].replace('C', 1, inplace = True)	1	1
test.loc[(test.Fare > 202) & (test.Fare <= 270),'Fare'] = 4	1	1
df_train.loc[df_train['Deck'] == 'T', 'Deck'] = 'U'	1	1
"train_test[""Cabin""] = train_test[""Cabin""].fillna(""No"")"	1	1
val.groupby('Age').agg(np.mean).mean()	1	1
train['TicketNum'] = train['Ticket'].apply(lambda x: x[x.find(' ')+1:])	1	1
test_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1)	1	1
data['Pclass'][data['Fare'].isnull() == True] # Pclass = 3	1	1
data.sort_index(by=column)[:n]	1	1
"test[""Fare""].fillna(fill_fare['Fare'], inplace=True)"	1	1
titanic_df_test['person'] = titanic_df_test[['Age','Sex']].apply(titanic_children,axis=1)	1	1
"X_train[""Honorific""] = X_train[""Name""].map(lambda name: name.split('.')[0].split(', ')[-1])"	1	1
titanic['Age_bin'] = titanic['Age'].apply(lambda v: np.digitize(v, bins=age_bins))	1	1
df_train.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)	1	1
train_df['Embarked'].fillna('S', inplace=True)	1	1
data.reindex(sorted(data.columns), axis=1)	1	1
"submission_df.to_csv(""submission_best_rf.csv"", sep=',')"	1	1
df_csv_test.head()	1	1
train_copy['Age_Category'] = train_copy['Age_Category'].astype(int)	1	1
train['Title']=train['Title'].replace('Mme', 'Mrs')	1	1
data.shape[0], shuffle=True,	1	1
classifiers.append(kn)	1	1
ax1.boxplot(train.Fare[train.Fare<100])	1	1
train_data['Age'] = train_data['Age'].fillna(28.0)	1	1
data.drop(['Name','Ticket','Cabin','PassengerId','Age_cats'], 1, inplace =True)	1	1
X['Ticket']	1	1
x_train.append(x_test)	1	1
df_data['P_Ti_Minor'] = ((df_data['P_Ti_Age']) < 14.0) * 1	1	1
df['Cabin_Id'] = pred	1	1
"train.loc[train['Survived']==1, ""Age""]"	1	1
df_test2.iloc[:,:-1]	1	1
data_raw.drop(['Embarked'], axis=1, inplace=True)	1	1
scaler.transform(age_fare)	1	1
train_test.loc['train']	1	1
train_y.tail(validate_num)	1	1
test_df['SX'].map(Freq_title_Series)	1	1
Survived.sum()/df_train[df_train.Sex == 'male'].	1	1
"submission.to_csv(""titanic_keras.csv"", index=False)"	1	1
train_copy['Survived'].ravel()	1	1
in ['train','val']:	1	1
df_s.dropna(axis=0,how='any')	1	1
train_Data.drop(['Name','Ticket','PassengerId','Sex_female'],inplace=True,axis=1)	1	1
numerical_columns.append('AgeGroup_pred')	1	1
df['FamilySurvival'] = DEFAULT_SURVIVAL_VALUE	1	1
X_test['Age'] = X_test['Age'].fillna(X_test['Age'].mean())	1	1
medianages.iloc[1,0]	1	1
"related_people.loc[related_people[""PassengerId""]==408,""RGroup""]=""Richards_M"""	1	1
ds.drop(labels=['Age', 'SibSp', 'Parch', 'Title', 'FamilySize'], axis=1, inplace=True)	1	1
train_df['AgeBand'] = pd.cut(train_df['Age'],5)	1	1
dt_train.info()	1	1
dataset['IsChild'] = dataset['Age'].apply(lambda x: 1 if x < 14 else 0)	1	1
y_pred.head(10)	1	1
features['importance'] = forest.feature_importances_	1	1
train_data.drop(['PassengerId', 'Cabin', 'SibSp', 'Parch', 'Name', 'Ticket', 'FamilySize'], axis = 1)	1	1
survivors['Sex'].value_counts().sort_index()	1	1
data_train['Ticket']	1	1
"submission.to_csv(""output.csv"", sep=',', encoding='utf-8',index = False,index_label=False)"	1	1
df2.drop(df2.columns[[2,7,9]], axis = 1)	1	1
p_s['Survived']=0 #initialize with 0	1	1
"Titanic[""Title""] = Titanic.apply(lambda row: ExtractTitle(row[""Name""]),axis=1)"	1	1
all_df[['Pclass','Fare','Embarked','Deck']]	1	1
full.iloc[range(len(train)),:]	1	1
df_number[['Survived']].values[0:TRAINSIZE]	1	1
fdf['Survived']	1	1
dataTrain['Survived']	1	1
entire.Fare.fillna(link_fare_pclass[3])	1	1
training_df.describe()	1	1
yhats['yhat_logistic_0'] = clf.predict(test[feature_labels].values)	1	1
dataset['lowerClass'] = np.where(dataset['Pclass']==3,1,0)	1	1
result_submission.to_csv('submission.csv',index=False)	1	1
train_df['Sex'].value_counts(normalize=True)	1	1
"family.pivot_table(index=""isalone"", values=""Survived"")"	1	1
data_train['Age'].quantile([0, 0.25, .75, .9])	1	1
"test_df.pop(""Name"")"	1	1
named_steps['est'].feature_importances_,	1	1
full.loc[full.Embarked.isnull(), 'Embarked'] = 'C'	1	1
test_df[['PassengerId', 'Survived']].to_csv('output_model2.csv', index=False)	1	1
df_train['embarked'].fillna(value='q', inplace=True)	1	1
"sns.boxplot( x=""Sex"", y=""Age"", data = train);"	1	1
"dataset.loc[(dataset[""Age""] > 19) & (dataset[""Age""] <= 29), ""Age""] = 2"	1	1
"plt.hist(df_train.loc[df_train[""Survived""]==1,""FamMem""], label = ""Survived"", alpha = 0.3)"	1	1
titanic.drop(['Cabin'],axis=1)	1	1
"test_enc.drop(labels = [""PassengerId"", ""Name"", ""Sex_male""], axis = 1)"	1	1
train.loc[(train['Sex'] == 1) & (train['isAlone'] == 0), 'gender_alone'] = 3 #male together	1	1
test_dataset.drop(columns=['PassengerId', 'Cabin', 'Ticket'])	1	1
test_df['Deck'] = all_df[ 891: ]['Deck']	1	1
ax1.hist(train_data[train_data['Survived'] ==0].Age, bins = 25, label ='Did Not Survive', alpha = .50,edgecolor= 'black',color ='grey')	1	1
train_csv['AgeBin'] = pd.cut(train_csv['Age'], bins=[0,12,20,40,120], labels=['Children','Teenage','Adult','Elder'])	1	1
dataset['test_y'] = test_y	1	1
df_full['Data'] == 'V'	1	1
dataset_train['Is_Alone'] = dataset_train['Family'].apply(lambda x : 1 if x>1 else 0)	1	1
train['AgeStat'] = float('NaN')	1	1
test.drop(features_drop,axis = 1)	1	1
plt.hist(df_all[df_all['Survived']==1]['Fare'], bins=100)	1	1
"result.to_csv(""logistic_regression_predictions.csv"", index=False)"	1	1
np.where(test_predict>0,1,0)	1	1
class_mean_scores.append(score.mean())	1	1
"dat[""Fare""] = dat[""Fare""].map(lambda i: np.log(i) if i > 0 else 0)"	1	1
df['Deck'] = df['Deck'].replace(['X', 'A', 'B', 'C', 'D', 'E', 'F', 'G'], range(8))	1	1
"test_clean[[""Pclass"",""Sex"",""Age"", ""Parch"",""Fare""]]"	1	1
test['Age'] = test.Age.fillna(round(test.Age.mean(),2))	1	1
train['Age'] = train['Age'].fillna(train.Age.mean())	1	1
train['Survived'], test_size=0.50,	1	1
"pd.merge(train, train_age1, on=""PassengerId"", how=""left"")"	1	1
imputer_train['Pclass'] = imputer_train['Pclass'].astype('str')	1	1
"train_two[[""Pclass"", ""Sex"", ""Age"", ""Fare"", ""SibSp"", ""Parch"",""family_size""]].values"	1	1
"df_train.set_value(829,""Embarked"",""C"")"	1	1
dataset.loc[dataset['WcgAllSurvived'].isna(), 'WcgAllSurvived'] = 0	1	1
full_data.info()	1	1
titanic['title'] = titanic['title'].apply(title_to_no)	1	1
test['Title'].replace(['Mlle', 'Ms'], 'Miss', inplace=True)	1	1
Status.sum()	1	1
test_df.loc[:, 'PassengerId']	1	1
train['Sex'] = np.where(train['age0']==1, 0, train['Sex'])	1	1
trainRaw.shape[0]	1	1
"officer.pivot_table(index=[""Sex"",""Age_cat""],values='Survived').copy()"	1	1
train['Survived'], test_size=0.5,	1	1
df_submit.to_csv('hravat_titanic_pred_titl.csv',sep=',',index = False)	1	1
"train_df[[""Fare"", ""Sex"", ""Embarked""]]"	1	1
titanic_new[0].size	1	1
data_df.groupby(['Pclass'])['Survived'].mean()	1	1
data_train.iloc[:,2:]	1	1
tt['Surname'] = tt['Name'].apply(lambda x : x.split(',')[1].split('.')[1].strip())	1	1
df.append((col, len(nan), perc))	1	1
k_scores.append(cv_results['test_score'].mean())	1	1
test_set.drop('SibSp', axis = 1, inplace = True)	1	1
train.drop(['CategoricalFare','CategoricalAge'],axis=1)	1	1
train.Survived.groupby(train.Pclass).agg(['mean', 'count'])	1	1
ax[1].set_title('Sex and Fare vs Survived')	1	1
test.at[i, 'Cabin_section'] = test.at[i, 'Cabin'][0]	1	1
transformed_df['Pclass_3'] = pclass.Pclass_3	1	1
titanic_train['Survived'].values.tolist()	1	1
"TR[""target""] = y_tr"	1	1
"df[""CabinSide""] = ""Unknown"""	1	1
e_t.drop(['S'],axis=1)	1	1
train['CabinN4'] = pd.to_numeric(train['CabinN4'], downcast='integer')	1	1
train['Age'] = train['Age'].fillna(np.round(train['Age'].mean()))	1	1
"tmp_train[""cabin_found""] = ~tmp_train.Cabin.isnull()"	1	1
test['AgeGroup'] = test['AgeFill'].apply(agegrouping)	1	1
d['Fare'] = out	1	1
sns.boxplot(x=['With', 'Without'], y=[ticket_compare_df['With'], ticket_compare_df['Without']]);	1	1
train.at[i, 'Cabin_section'] = CABIN_SECTION.index(train.at[i, 'Cabin_section'])	1	1
in ['Sex', 'Pclass', 'Cabin', 'Embarked', 'IsAlone', 'Title_Code', 'FamilySize', 'Fare_Code', 'Age_Code']:	1	1
test.loc[(test['Age'] > 24) & (test['Age'] <= 35), 'Age'] = 4, #Young Adult	1	1
train_data['SURVIVED'] = pandas.to_numeric(train_data['SURVIVED'], errors='coerce')	1	1
titanic_df.isnull().sum(axis=0) # sum by column	1	1
testingset.drop(['Cabin'],axis=1)	1	1
results.iloc[:10, :]	1	1
train_df['Title'] = train_df['Title'].apply(lambda x: x if x in most_frequent_titles else 'Rare')	1	1
reviews.head(3)	1	1
df_full.describe()	1	1
df[['Fare','Pclass','Deck']] = scaler.fit_transform(df[['Fare','Pclass','Deck']])	1	1
dft.isnull().sum()	1	1
dataset['FamilySize'] = family_size	1	1
train_data['Survived'][700:]	1	1
"train_df[[""Age_group"", ""Survived"", ""Pclass"", ""Fare_cat""]].groupby([""Pclass""], as_index = False).mean().sort_values(by = ""Age_group"", ascending = False)"	1	1
df.loc[:,['Age','SibSp','Parch','Sex','Pclass','Age_Missing','Survived']]	1	1
my_feature_columns.append(tf.feature_column.numeric_column(key='Parch'))	1	1
submission.to_csv('/Users/nitinreshu/Documents/PGDDS/Kaggle/Titanic/submission.csv', index=False)	1	1
"train_df.loc[(train_df[""Age""]>16)&(train_df['Age']<=32),'Age']=1"	1	1
csv_train_OneHot[['Sex','Pclass','Fare','Age','SibSp','Parch','Embarked_C','Embarked_Q','Embarked_S']]	1	1
training_data[['Survived','Sex' , 'Embarked', 'Fare', 'Pclass', 'Age', 'Parch', 'SibSp']]	1	1
group_class_embark.groups.keys();	1	1
train['FareBucket'] = (train['Fare']/50).astype(int)	1	1
test_data.drop([variable],axis = 1, inplace = True)	1	1
data_test.Fare.mean()	1	1
trainML[['Fare']].values	1	1
"testdata[""Embarked""] = testdata[""Embarked""].map({""C"":0,""Q"":1,""S"":2})"	1	1
z.append(rfModelOutput[i])	1	1
"train['solo'] = train[""family_size""].apply(lambda i: 1 if i == 1 else 0)"	1	1
test['Ticket_s_g'] = km_model.predict(test[KMF])	1	1
X_train.iloc[:,[2]] = X_age_imputer.fit_transform(X_train.iloc[:,[2]])	1	1
classifiers.append(ld)	1	1
dataset.loc[(dataset.Age.isnull())&(train.Initial=='Mr'),'Age']=33	1	1
full_bins['CabinBin_Code'] = label.fit_transform(full_bins.Cabin_Letter)	1	1
dataframe[0:891].drop('Survived', 1),            dataframe[891:].drop('Survived', 1),            dataframe[0:891]['Survived'].tolist()	1	1
test_data.join(survived_dummies_test)	1	1
"data_test[""Sex""] = data_test[""Sex""].replace(""male"", 1)"	1	1
inputds1.drop('Survived',axis=1)	1	1
"df_data['Title'] = df_data['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
test_data.dropna(axis=1)	1	1
"data[""Parch""] == row[""Parch""] &"	1	1
combine_df['FamilySize'] = 1+ combine_df['Parch'] + combine_df['SibSp']	1	1
df_test['Fare'] = (df_test['Fare'] - fare_mean) / fare_std	1	1
sex.replace(to_replace = 'female', value = 1, inplace = True)	1	1
test.drop(['Fare'], axis=1, inplace=True)	1	1
ann_model.add(Dense(units= 1, kernel_initializer='uniform',activation='sigmoid'))	1	1
df.drop('Fare_category',axis=1,inplace=True)	1	1
titanic_train.drop(columns=['Survived','Cabin','Sex','Embarked'],axis=1)	1	1
second_class_female['Survived'].value_counts()# so 70/76 survived	1	1
data_df['Embarked'].fillna(data_df['Embarked'].mode()[0], inplace=True)	1	1
d_test['PassengerId']	1	1
test.SibSp.astype(float).fillna(test['SibSp'].median())	1	1
x.shape[1]	1	1
plt.hist(x=[train[train['Survived']==1][var],train[train['Survived']==0][var]], bins =20, stacked = True, color= [colour[j], colour[j+1]], label= ['Survived', 'Dead'])	1	1
sns.boxplot(x = 'Pclass', y = 'Age', data = train_data, palette= 'GnBu_d').set_title('Age by Passenger Class')	1	1
"train_df[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).mean()"	1	1
train_df_final.drop(['Survived','PassengerId'],axis=1)	1	1
data['Family'] = data['SibSp'] + data['Parch']	1	1
dataset['title'] = dataset['title'].fillna(0)	1	1
tf.add(tf.matmul(L4, W5), b5)	1	1
train.drop(drop_features , axis=1, inplace = True)	1	1
final_stack2.head()	1	1
"titanic_train.drop([""PassengerId"",""Name"",""Ticket""], axis = 1)"	1	1
all_Data.groupby(['Sex'])['PassengerId'].count()	1	1
"title_dummies_train.drop(["" Mr""], axis = 1)"	1	1
train_dataset['Farebin']=pd.cut(train_dataset['Fare'],5)	1	1
titanic_test_dataframe.loc[:, numeric_columns] = std_sc.transform(titanic_test_dataframe.loc[:, numeric_columns])	1	1
"train_df[""Deck""] = train_df.Cabin.str[0] # the first character denotes which deck the passenger is allocated"	1	1
test.loc[(test['Fare']>100) & (test['Fare']<=150),'FareCategorical'] = 2	1	1
df['Sex'] = df['Sex'].map( {'male': 0, 'female': 1} )	1	1
frame['Embarked'] = frame.Embarked.map({'S' : 0 , 'C': 1 , 'Q':2}).astype(int)	1	1
dataset['title'] = dataset['title'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dona', 'Dr', 'Jonkheer'                                                  , 'Lady', 'Major', 'Rev', 'Sir'], 'Rare')	1	1
df_dums['Parch_1']=[1 if ele == 1 else 0 for ele in df_dums['Parch']]	1	1
Xtest.apply(count_missing, axis=0)	1	1
"test[""Fare""]=test[""Fare""].fillna(test[""Fare""].mean())"	1	1
titanic_train_data.Age.fillna(titanic_train_data.Age.mean(), inplace=True)	1	1
"axs[0].set_title(""People on the Titanic"", fontsize=20)"	1	1
tr['Pclass'].unique()	1	1
train_test_dummies.fillna(value=0.0, inplace=True)	1	1
all_data.drop(['Ticket'], axis=1)	1	1
trainData['SibSp'].plot(kind='box')	1	1
"df_titanic[""Embarked""]=df_titanic[""Embarked""].fillna(""C"")"	1	1
"test_d.drop(""PassengerId"",axis=1).copy()"	1	1
submission.to_csv('mean_GBM_blend.csv',index=False)	1	1
test_data_only_first_class_female_Cherbourg['Age']:	1	1
pd.pivot_table(df_train, index = df_train['Fareband'],values = 'Survived' )	1	1
all_data.drop(['Sex','Embarked','Pclass','Title'],axis=1)	1	1
FamilySurvivors.Age.hist(figsize=(70,30), bins=7)	1	1
df.loc[((df.MisAge == 1) & (df.Cabin == 1)) , 'MA_Ca'] = 4 #No Age but Cabin	1	1
"train_df['Embarked'].iloc[61] = ""C"""	1	1
test.loc[(test['PaxclassA']==1),'Class1'] = 1	1	1
"plt.hist(train[""Fare""], bins = range(150))"	1	1
plt.hist(data['Fare'], bins=40)	1	1
"df[""FamilySize""] = df[""Parch""] + df[""SibSp""] + 1"	1	1
df[['Pclass', 'Age', 'SibSp', 'Parch']]	1	1
"new_df.Parch.astype(""int"")"	1	1
test['CabinGroup'] = test['Cabin'].apply(cabingroup)	1	1
X.astype(int)	1	1
test_csv[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']]	1	1
train.corr()**2	1	1
train_df.groupby('Age').size()	1	1
"df['Age'][(df[""Title""] == title)].dropna().median()"	1	1
train_df.drop(['SibSp','Parch'],axis=1)	1	1
person_dummies_titanic.drop(['Child'], axis=1, inplace=True)	1	1
family['Survived'] = combined_df.Survived	1	1
visualization_df['Sex_Code'] = label.fit_transform(visualization_df['Sex'])	1	1
titanic_test.loc[:,['Fare','Pclass']]	1	1
train_df.append(sub_df).reset_index()	1	1
full.drop(list_category_features, axis=1,inplace=True)	1	1
X_test.loc[(X_test.Fare.isnull()), 'Fare']=median_fare	1	1
test_dataset[['Age_range','Sex','Pclass','SibSp','Parch','Embarked']]	1	1
train_data_X.head()	1	1
row['Title'] == 'Mr' or row['Title'] == 'Mrs':	1	1
X_train.columns.drop(['Name', 'PassengerId'], 1)	1	1
"train[""Position""] = train.apply(lambda row:def_position(row[""cabin""]), axis=1)"	1	1
"avg_fare_pclass[['Fare']].plot(kind='bar', title =""Average Fare by Pclass"", legend=True, ax=ax2)"	1	1
df_train.drop(['PassengerId','Name','Ticket', 'Cabin'], axis=1)	1	1
df_data['Log_Fare'] = (df_data['Fare']+1).map(lambda x : np.log10(x) if x > 0 else 0)	1	1
"final_set[""PassengerId""],"	1	1
df_train['embarked'] = df_train['embarked'].map({'s': 0, 'c': 1, 'q': 2})	1	1
combine[1]	1	1
test['Age'] = test[['Age', 'Title']].apply(fill_missing_ages, axis=1)	1	1
"axes[0].set_title(""Survival Rate"")"	1	1
df.fillna(np.nan)	1	1
df_cat.items():	1	1
train_clean['Embarked'].isnull().sum()	1	1
train['fancy'] = train['Fare'].apply(lambda i: 1 if i >= 100 else 0)	1	1
"x_train['Title'] = x_train['Name'].map(lambda x: str(re.findall(""^.*[, *](.*)[.] *"", x)[0]))"	1	1
test_df[['PassengerId','Pclass', 'Sex', 'SibSp','Parch','Fare','Embarked']]	1	1
data.loc[(data.Age.isnull()) & (data.Title == 'Mrs.'), 'Age'] = data.loc[data.Title == 'Mrs.', 'Age'].median()	1	1
df_predict['Age']:	1	1
df_test[['PassengerId', 'Survived']].to_csv('../working/6dep_dec_tree.csv', index=False)	1	1
df_interesting['Group_Category'] = encoder.fit_transform(df_interesting['Group_Category'])	1	1
df_full.isnull().sum().sort_values(ascending=False) # output pandas.core.series.Series	1	1
"data[[""Pclass"", ""Mr"", ""Mrs"", ""Miss"", ""Sex"", ""Age"", ""SibSp"", ""Parch"",""Fare"", ""Cabin""]]"	1	1
rawdata['Embarked'].value_counts()	1	1
test[['Age','Fare','Family']]=sds_xtest1	1	1
train.loc[(train['PaxclassA'] == 1) & (train['Fare']>100),'PaxclassA'] = 0	1	1
encoder.transform(test_df[col])	1	1
testdata['Sex'].replace(['male','female'],[0,1],inplace=True)	1	1
pd.DataFrame.from_dict(sp_pred_items, orient='index')	1	1
big['Family_Survival'] = DEFAULT_SURVIVAL_VALUE	1	1
Data_train.describe()	1	1
titanic_train['Embarked'].fillna(titanic_train['Embarked'].mode()[0], inplace=True)	1	1
train_accuracy.append(train_result['accuracy'])	1	1
df.groupby('Pclass')['Age'].plot(kind='hist',alpha=0.5,legend=True,title='Pclass vs Age')	1	1
parameters['selected_feature']:	1	1
"test[""Fare""].fillna(test[""Fare""].median(), inplace=True) ;"	1	1
test_new.drop(['Embarked','Sex'], axis = 1, inplace = True)	1	1
test_df.Parch.hist(bins = 20, ax=axes[1])	1	1
combined_data['Embarked'].fillna(combined_data.iloc[:891]['Embarked'].value_counts().index[0],inplace =True)	1	1
dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)	1	1
"train_df.loc[train_df[""Title""] == ""Lady"", ""Title""] = 'Rare Title'"	1	1
dataset['noFamily'] = np.where(dataset['SibSp'] + dataset['Parch']==0,1,0)	1	1
ticket_table['Dead_kid_on_ticket'] = ticket_table['Dead_kid_on_ticket'].astype(int)	1	1
data['name_len'] = data['name'].apply(lambda x: len(x))	1	1
"title_by_sex2[""Male""] = full[full[""Sex""] == 0][""Title""].value_counts()"	1	1
traindf.drop(['FareBand'], axis=1)	1	1
train_df.drop(['PassengerId'], 1, inplace=True)	1	1
"train_df.loc[(train_df['Fare']>307)&(train_df['Fare']<=409),""Fare""]=3"	1	1
dfTrain['Survived'].groupby(pd.qcut(dfTrain['Fare'], 3)).mean()	1	1
train['Age']=train[['Age', 'Pclass']].apply(impute_age, axis=1)	1	1
model.add(Dense(1, activation= 'sigmoid'))	1	1
df_train[['Survived', 'Pclass']].groupby(['Pclass']).mean()	1	1
df.loc[df['Age'] <= i*10, 'Age_bin'] = i	1	1
third_class.loc[third_class['Survived'] == 0].shape[0], third_class.loc[third_class['Survived'] == 1].shape[0]	1	1
dt['Title'] = dt['Title'].replace('Ms', 'Miss')	1	1
"titanic_test_dataframe[""NormalizedAge""] = titanic_test_dataframe[""Age""]"	1	1
train['EmbarkedC'][i] = 1	1	1
train['EmbarkedC'][i] = 0	1	1
minmaxScaler.transform(X_train)	1	1
dataframe.loc[(dataframe[column_name] >= 51) & (dataframe[column_name] < 61), column_name] = 5	1	1
WholeDataSet.isnull().sum(axis=0) # check the data again	1	1
"ax[0].set_title(""Unsurvived"")"	1	1
train['Cabin_T']	1	1
train['AgeBin'] = pd.cut(train['Age'], num_bin)	1	1
Fare_range_test.append(fare_range_test)	1	1
comb['Fare'].fillna(comb['Fare'].median(),inplace=True)	1	1
df['Ticket_len'] = df.Ticket.apply(lambda x:len(x))	1	1
train_data['Sex'] = train_data['Sex'].apply(lambda x: int(x == 'male'))	1	1
ax1[1].hist(df_dead.SibSp, bins=10, range=(0,8))	1	1
input_dataset.describe()	1	1
dataset['EditedAge'][rowIndex] <= 13:	1	1
titanic_train['Age_range'] = Age_range	1	1
test_df['Cabin'] = test_df['Cabin'].fillna('UNKNOWN')	1	1
df_for_plotting['SurvivalRate']=df_for_plotting['sum']/df_for_plotting['count']	1	1
age_guess.rename(columns={'Age_Categorized_Guess': 'Age_Categorized'})	1	1
train_df.loc[ (train_df.Age.isnull()) & (train_df.Sex == i) & (train_df.Pclass == j+1),                'Age'] = guess_ages[i,j]	1	1
test_df['AgeBin_Code'] = data['AgeBin_Code'][891:]	1	1
df.loc[df.Cabin.isnull(), 'WithCabin'] = False	1	1
dataframe.shape[0]	1	1
train['AgeBand']=pd.cut(train['Age'],5, labels=[0,1,2,3,4]).astype(int)	1	1
y_pred_1.append(1)	1	1
plt.hist(df['Fare'], bins=32)	1	1
"df2[""Fare""].fillna(df[""Fare""].median(skipna=True), inplace=True)"	1	1
train['Survived']  #target variable	1	1
model.transform(x_train)	1	1
df_test['Title'] = name_parts[0].str.strip()	1	1
combined.set_index('PassengerId', inplace=True, drop=False)	1	1
test_data.tail(3)	1	1
data['Title']=data['Title'].str.replace('Ms.','125')	1	1
col.fillna('NAN', inplace=True)	1	1
dataset.isnull().sum().sort_values(ascending = False)	1	1
train.groupby('SibSp')	1	1
"scalerall_train_df.rename(columns={0:""Pclass"",1:""Sex"",2:""Age"",3:""Fare"",4:""Embarked"",5:""Family""})"	1	1
"sns.boxplot(x=""Pclass"", y=""Fare"", data=test_data)"	1	1
test_data.rename(columns={'SibSp':'SiblingsSpouses', 'Parch':'ParentsChildren'}, inplace = True)	1	1
data['Family'] = ''	1	1
testing_df.as_matrix(columns=['Pclass','Sex_Index','Age_Index'])	1	1
original_train_data.drop('Survived',axis=1)	1	1
"data.loc[data[""Cabin""].isnull(), ""Cabin""] = ""Unknown"""	1	1
"sns.boxplot(data=train,y=""Fare"",x=""Pclass"", hue=""Survived"")"	1	1
titanic['Age'].hist(bins=70, ax=axis2)	1	1
train.loc[(train['Sex'] == 'male'),'Survived'].groupby(male_age_bin).mean()	1	1
test_df.iloc[:,1:].values #.values turns the dataframe into a numpy array (Gets rid of index)	1	1
test['Sex']	1	1
"full[""Fare""] = full[""Fare""].fillna(new_value_2)"	1	1
train['E1'] = np.array(train['Embarked'] == 'S').astype(np.int32)	1	1
train['SibSp'] = dataset['SibSp']	1	1
data_pruned['Sex'] = Sex.values	1	1
df['Age_Range']=pd.qcut(df['Age'],7)	1	1
test_data['PassengerId'].values	1	1
"combined[""Age""]=fill_Age_result"	1	1
data.loc[ (data['Fare'] > 100) & (data['Fare'] <= 250) , 'Fare'] = 4	1	1
Xtrf_df['lenName'] = Xtrf_df['Name'].apply(len)	1	1
df.loc[df['TyTicket'].isnull(), 'TyTicket'] = 'N'	1	1
"final.to_csv(""final.csv"")"	1	1
categorical_columns.append('CabinCategory')	1	1
sns.boxplot(x='Sex', y=var, data=train, color= colour[i], hue='Survived')	1	1
submission_file.drop(drop_el, axis=1)	1	1
data_test[['PassengerId','Survived']]	1	1
"test[""spaces_in_name""] = test[""Name""].map(count_spaces)"	1	1
test.drop(['Name', 'PassengerId','Ticket','Embarked'], axis =1)	1	1
titanic_data.loc[(titanic_data['Age'] >32)&(titanic_data['Age'] <= 48),'Age'] = 2	1	1
dftr['Age'] = dftr['Age'].fillna(median1)	1	1
test_df.drop('TravelBuds', axis=1, inplace=True)	1	1
df.groupby([column_name])[column_name].count().values	1	1
train.drop('Embarked', axis=1, inplace=True)	1	1
target_dataset.Fare.fillna(7.925, inplace = True)	1	1
_df1['Title'] = _df1['Title'].replace('Mme.', 'Mrs.')	1	1
full_data[1].info()	1	1
dataset['Title'] = dataset['Title'].replace(['Capt','Col','Don','Jonkheer','Major','Sir','Rev','Dr'],'Raremale')	1	1
features['feature'] = data.columns	1	1
classifier_results['SVMC_best'] = (gsSVMC_accuracy, SVMC_best)	1	1
train_data['Cabin']	1	1
"ax[1].set_title(""Pclass and Age Vs Survived"")"	1	1
age_encoder.transform(age_validation[['Pclass', 'encodedTitle', 'SibSpGroup1', 'SibSpGroup2', 'SibSpGroup3', 'ParChGT2']])	1	1
df['Pclass']==1	1	1
df['Pclass']==3	1	1
df['Pclass']==2	1	1
df['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)	1	1
data['Age_band'].value_counts().to_frame()	1	1
"train.dropna(axis=0,how=""any"",inplace=True)"	1	1
test_set.drop(['PassengerId','Name','Cabin','Ticket'],axis=1, inplace=True)	1	1
titanic['Sex'] = titanic['Sex'].map({'male':0,'female':1})	1	1
"pred.append(row[""PassengerId""])"	1	1
data.loc[(data.passenger_fare>=13.) & (data.passenger_fare<13.1) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>=13.) & (data.passenger_fare<13.1) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
temp['SiblingsSpouses'] = temp['SiblingsSpouses'].apply(lambda x: 1 if x > 0 else 0)	1	1
train.sort_index(axis=1)	1	1
temp2['Survived']=temp2['Survived'].replace(1,np.int32(0))	1	1
test_df.loc[test_df.Title.isin(rare_title), 'Title'] = 'Rare'	1	1
df_test['Survived'] = df_test['Survived'].astype('int')	1	1
"result_test2[""Survived""] = y_pred_forest_rand"	1	1
SScaler.transform(train_X)	1	1
df_use_reg.dropna().as_matrix()[:,3:]	1	1
test_df_final.drop('Sex_female', axis = 1, inplace = True)	1	1
testWithHistory['Mark']='test'	1	1
"row['Title'] == ""Mlle"":"	1	1
data_train['lenName'] = data_train['Name'].apply(len)	1	1
df['PassengerId']=test['PassengerId']	1	1
"df_test.loc[ df_test['Age'] <= 16, 'Age'] 					       = 0"	1	1
train.loc[train['Cabin'].str.len() == 7.0, 'CabinL'] = train['Cabin'].astype(str).str[0]	1	1
df.rename(columns=col_names)	1	1
emb_pclass.groupby(['Embarked','Pclass']).Pclass.count().unstack()	1	1
male.Age.hist(alpha=0.7)	1	1
"train_df.loc[(train_df[""Age""]>48)&(train_df['Age']<=64),'Age']=3"	1	1
X_w_target['Survived'] = target.astype('int64')	1	1
raw_train['Survived']	1	1
data['y_p']	1	1
np.append(['Survived'],scols)	1	1
data['Embarked'] = data['Embarked'].fillna(0)	1	1
pd.isnull(df_titanic)	1	1
train['Alone'].loc[train['FamilySize'] > 0]=0;	1	1
train_accuracies.append(train_accuracy)	1	1
train_data['Fare'].loc[train_data['Pclass']==1]	1	1
x['Sex'] = lb.fit_transform(x['Sex'])	1	1
"titanic_df[""Salutation""] = np.select(conditions, choices, default='')"	1	1
dataset['Title']=dataset['Title'].replace(['Don', 'Rev', 'Dr','Major', 'Lady', 'Sir', 'Col', 'Capt', 'Countess','Jonkheer'],'Rare')	1	1
"data['Embarked'] = data['Embarked'].map({""S"": 0, ""C"": 1, ""Q"": 2}).astype(int)"	1	1
train_df['Title']=train_df['Name'].apply(get_title)	1	1
train['AgeBin']= pd.cut(train.Age.astype(int), 5)	1	1
X['Age']= pd.cut(X['Age'], age_bins, labels=age_group)	1	1
data_file['Cabin'] = data_file['Cabin'].fillna(0)	1	1
X_test_T.T	1	1
item['Title']	1	1
train.drop(drop_cols + ['Cabin_l'], 1, inplace = True)	1	1
df_submit.to_csv('./test_prediction_dnn.csv', index = False)	1	1
dataset.groupby('title').Survived.agg(['count', 'sum', 'mean', 'std'])	1	1
dataFrmae['Age'][np.isnan(dataFrmae['Age'])] = age_null_random_list	1	1
dataset.loc[dataset['Fare']  <=7.854, 'Fare'] = 0	1	1
df.dropna(subset=['Age']) # drops rows where age=NaN	1	1
train_df['Ticket'].unique():	1	1
"titanic_test_df.loc[titanic_test_df[""Sex""] == 'male',""Sex""] = 0"	1	1
train_dataset['Survived'].unique():	1	1
train.iloc[:,2:].as_matrix()	1	1
X_test.loc[dom].values.flatten().tolist()	1	1
test_df.drop('Parch', axis = 1, inplace = True)	1	1
"dftrain[""Title""].replace(to_replace='(.*, )|(\\..*)', value='', inplace=True, regex=True)"	1	1
df['age_T'] = df['Age']	1	1
scores_boost.mean()	1	1
df_submission['name'] = df_submission['name'].apply(cleaner_lambda)	1	1
df_FULL.loc[[62, 830]]	1	1
dtemp.mean()	1	1
train['parent_or_children_onboard'] = train.Parch.apply(lambda x: 'Yes' if x > 0 else 'No')	1	1
df.drop('Ticket', axis='columns')	1	1
classifier_score['RandomForestClassifier'] = scores.mean()	1	1
X_test['surname'] = X_test['Name'].apply(process_surname)	1	1
full.Embarked.mode()[0]	1	1
null_embarked.iterrows():	1	1
grads['db']	1	1
"pred[""PassengerId""] = passID"	1	1
bad_output.append(i)	1	1
"train_data[""Age""]:"	1	1
prep.transform(X)	1	1
"combine[0][""Survived""]"	1	1
data.loc[data['Title'].isin(['Lady'])]['Age']   # 48	1	1
train.drop(['Person'], axis=1, inplace=True)	1	1
return_obj[2],	1	1
df_test['Initial'] = df_test.Title.replace(mapping)	1	1
train_cl.dropna()	1	1
full.loc[full.Embarked.isnull()]	1	1
test_bfe.values	1	1
results.append([idx, r])	1	1
X.drop(X.columns[a], axis = 1)	1	1
df.drop('Parch', axis='columns')	1	1
data.loc[data.Fare == 0, ('Fare')] = data.loc[data.Fare.isnull()].apply( lambda x: median_fare_dict.get(x.Embarked, x.Pclass), axis = 1)	1	1
data_test_dummy['Age'].values.reshape(-1, 1)	1	1
inputds.fillna('S',inplace=True)	1	1
df[['Pclass', 'Sex', 'SibSp', 'Parch', 'Cabin', 'Embarked']].hist()	1	1
x['Name'] == 'Ensemble':	1	1
titanic['Age'][(Pclass3)&Family2] = titanic['Age'][(Pclass3)&Family2].fillna(26)	1	1
whole.head()	1	1
"test.drop([""PassengerId"", ""Name"", ""LastName"", ""SibSp"", ""Parch"", ""Ticket""], axis=1, inplace=True)"	1	1
test_df['Title'] = test_df['Name'].apply(hapusName)	1	1
combine_df.drop(['Name','Surname'],axis=1)	1	1
dt.dropna()	1	1
test['family']=test['SibSp']+test['Parch']	1	1
titanic['Age'][(female)&(Pclass1)&Family1] = titanic['Age'][(female)&(Pclass1)&Family1].fillna(31)	1	1
accuracies.append(acc)	1	1
dataset['Age'][i] < 16:	1	1
test_df['Gender'] = test_df['Sex'].map( {'male':1, 'female':2} ).astype(int)	1	1
axes[0].set_xlabel('Age')	1	1
data['Has_cabin']=data.Cabin.apply(lambda x:0 if type(x)==float else 1)	1	1
df_test['Title']=df_test['Name'].map(lambda x: substrings_in_string(x, title_list))	1	1
"dftest[""Age""].std()"	1	1
test_data.drop(['Age'],axis=1)	1	1
"data.query('Pclass == 2 and Sex == ""female""');     data2['Age'] = data2['Age'].fillna(28)"	1	1
dataset['Male'] = 0	1	1
train.loc[rows,'Age'] = 29	1	1
model.add(Dense(18, input_dim=9, kernel_initializer='uniform', activation='relu'))	1	1
train_data.drop('PassengerId', inplace = True, axis = 1)	1	1
train_data.drop('Ticket', axis=1)	1	1
y_test.shape[:]	1	1
iset['Cabin_Letter'] = iset['Cabin'].apply(lambda x: str(x)[0])	1	1
"pd.pivot_table(train, index=""Sex"", values=""Survived"")"	1	1
plt.hist(train.Pclass,bins=3)	1	1
"test['Sex'] = test['Sex'].map({""male"" : 0,""female"" : 1})"	1	1
train.loc[(train['Sex'] == 0) & (train['isAlone'] == 0), 'gender_alone'] = 2 #female together	1	1
dataset['Title'] = dataset['Name'].str.extract('(\w+(?=\.))', expand=False)	1	1
train[['Age','Fare']]=scaler.fit_transform(sub_features)	1	1
"ax[0].set_title(""Number Of Passengers By Pclass"")"	1	1
glbl['random_state'],	1	1
df.groupby(['Pclass']).agg(aggregations)	1	1
t.to_csv(filename, index=False)	1	1
train_data.drop(['Age'],axis=1)	1	1
"titanic_test.drop([""Embarked""], axis=1,inplace=True)"	1	1
x['Age'].median()	1	1
dataset.loc[(dataset['Age'] > 35) & (dataset['Age'] <= 64), 'Age'] = 5	1	1
ax[0].set_title('Not Survived')	1	1
survival.append(0)	1	1
train['Name'] = train.apply(lambda x: refineName(x), axis=1)	1	1
m.axes.flatten()	1	1
"data_2.ix[order].plot(kind=""Bar"")"	1	1
whole.set_value(418,'Fid',102) # Lahtinen, Silven	1	1
np.append(y_pred, clf.predict(features[test]))	1	1
dataframe['Embarked'] = embarked	1	1
test_df.fillna(test_df.mean()) # 1 missing value on Fare column	1	1
test_df.drop(['Cabin'],axis=1)	1	1
age_partition_size['Survived'] = age_partition.groupby('Partition').mean()['Survived']	1	1
data['ClassUp'] = data.apply(upperclass,axis=1)	1	1
"a[""Sex""] = a[""Sex""].map({""male"" : 0, ""female"" : 1})"	1	1
pivot_sex.reset_index(level=0, inplace=True)	1	1
"train_data.drop(""Survived"",1)"	1	1
a[0]=np.abs(a[0]) # getting the absoulte values so we get the strong relations despite if it's a negative or positive relation	1	1
test[['PassengerId','Survived']].set_index('PassengerId').to_csv('stack3.csv')	1	1
titanic.loc[(titanic['Age']>18.0) & (titanic['Parch'] > 0.0) & (titanic['Sex']==0) & (titanic['Title']!='Miss'), 'Mother'] =1	1	1
dataset['FareBin']=pd.qcut(dataset['Fare'],4,labels=[1,2,3,4])	1	1
test[['Sex', 'SibSp', 'Parch']].values	1	1
train.drop(['Survived'], 1, inplace = True)	1	1
splittest.drop('Survived', 1)	1	1
Prediction['SVC']	1	1
df['Pclass'] = df['Pclass'].astype(np.str)	1	1
joined['Age'][joined['Survived'] == 0],	1	1
train['Age'][train['Survived'] == 0].value_counts()	1	1
temp_dict['curr_count'] += 1	1	1
df.loc[(df['Fare'] >= 14.454) & (df['Fare'] < 31), 'Fare'] = 2	1	1
data_train.Sex.replace(['male', 'female'], [0, 1], inplace=True)	1	1
train2['Age']=train2['Age'].fillna(train2['Age'].median())	1	1
full['CabinType2'] = full['Cabin'].astype(str).str[0:2];	1	1
full.loc[~full['Title'].isin(['Miss','Master','Mr','Mrs']),'Title'] = 'Other' # NOT IN	1	1
Train_Master.loc[(Train_Master['Title'] == title) & (Train_Master['Age'].isnull()) , 'Age'] = Titanic_Master[Titanic_Master['Title'] == title]['Age'].median()	1	1
train.loc[((train['Sex'] == 1) & (train['Pclass'] == 2)), 'gender_class'] = 5 #male Pclass 2	1	1
holdout.drop('Cabin',axis=1)	1	1
"train[""Age""][i]=age_title_map[train[""Title""][i]]"	1	1
classifier.add(Dense(9,input_shape=(X_train.shape[1],),kernel_initializer=kernel_init,activation=act_func))	1	1
df_test_ml['SurvivedLRE'] = rfc.predict(X_predict_lre).astype(int)	1	1
test_data.drop('Embarked',axis=1,inplace=True)	1	1
titanic.loc[(titanic['Fare']>7.896) & (titanic['Fare']<=14.454),'Fare_grouped']=1	1	1
df.drop(columns=['Title'], axis=1)	1	1
"test.drop(columns = ""Cabin"")"	1	1
titanic_train_data.drop(['Survived', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
titanic_df.drop(['PassengerId','Ticket'], axis=1)	1	1
data.loc[data['Cabin'].isna(),'HasCabin']=0	1	1
random_forestsubmission.to_csv('random_forest.titanic.csv', index=False)	1	1
np.where(X_train.dtypes != np.float)[0]	1	1
data.loc[data.Cabin.str[0] == 'E', 'Cabin'] = 5	1	1
test_set[['Pclass', 'SibSp', 'Fare', 'FamliySize', 'Alone', 'Age']]	1	1
train_df['Fare'].max()	1	1
train['CategoricalAge'].cat.categories = [1, 2, 3, 4, 5]	1	1
"test[""Famille_2""] = test[""FamilleMember""] == '2'"	1	1
full_df.loc[ full_df['FamilySizeCategories'] == 1, 'FamilySizeCategories' ] = 0 #Singleton	1	1
titanic_df['Survivor']=titanic_df.Survived.map({0:'no',1:'yes'})	1	1
test.Parch.astype(str)	1	1
data_test.Age.fillna(data_test.Age.mean(),inplace=True)	1	1
validation_test['Prediction'] = cls_random.predict(validation_test.loc[:, ['M1_xgboost', 'M2_ada', 'M3_gradient']])	1	1
local_train.shape	1	1
train['Sex'].loc[train['Sex']=='female']=0	1	1
"X_train[""Deck""] = X_train[""Cabin""].fillna('U').map(lambda s: s[0])"	1	1
dataset.loc[ dataset['Age'] <= 8.378, 'Age'] = 0	1	1
gauss_submission.to_csv('algorithm-mix.csv', index=False)	1	1
data.groupby('Survived').fsize.value_counts() # checking if categorization worked	1	1
df_titanic_train.loc[outliers_to_drop]	1	1
np.ma.mean(masked_X, axis=0)	1	1
train_temp.drop([c],axis=1)	1	1
x_test['Age'] = x_test['Age'].fillna(x_train['Age'].mean())	1	1
test_dataset.loc[test_dataset.Fare.isnull(), :] = test_dataset.loc[test_dataset.Fare.isnull(), :].fillna(train_dataset.loc[ (train_dataset.Pclass == 3) & (train_dataset.Sex_male == 1) & (train_dataset.Age > 60), ['Fare']].median())	1	1
deck.loc[deck['deck']=='T']	1	1
"combine[""hasParents""]=combine[""Parch""].apply(lambda x : (x>0)*1)"	1	1
final.to_csv('sub.csv', index = False)	1	1
test.loc[test['Cabin'].str.len() == 15.0, 'CabinN3'] = test['Cabin'].astype(str).str[9:11]	1	1
test.Name.replace('Ms','Mrs')	1	1
train_df['SibSpBool'] = (train_df['SibSp'].apply(lambda x: 1 if x>0 else 0))	1	1
row['Title'] == 'Sir':	1	1
"x[""Embarked""] = x[""Embarked""].fillna (""S"")"	1	1
df['Age_pred'] = df['Age']	1	1
axes[0].legend((p1_f[0], p2_f[0]), ('Dead', 'Alive'))	1	1
"sex[""SibSp""] = np.nan"	1	1
"ranks[""LinReg""] = ranking(np.abs(lr.coef_), colnames)"	1	1
comb_data['Pclass'] = np.where(comb_data['Pclass']==1, 'UpperClass', np.where(comb_data['Pclass']==2, 'MiddleClass', 'LowerClass'))	1	1
"full_data.loc[full_data['TravelSize'] == 1, 'TravelGroup'] = ""alone"""	1	1
test['Name'] = test.apply(lambda x: refineName(x), axis=1)	1	1
df.loc[(df['Fare']>7.88) & (df['Fare']<=69.4),'Fare_Cat']=3	1	1
titanic_df.groupby(['Survived', 'Pclass'])['PassengerId'].count().unstack('Survived').fillna(0)	1	1
data_train.loc[data_train['Survived']==1,'Pclass'].value_counts()	1	1
test.Embarked.fillna(test.Embarked.mode()[0])	1	1
combined_data['Age'] = combined_data.apply(lambda row: fill_age(row) if np.isnan(row['Age']) else row['Age'], axis=1)	1	1
X_title['Title'] = X_title['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Miss'})	1	1
train['CategoricalFare'] = full_fare[:891]	1	1
whole.drop(['Pclass'], axis=1)	1	1
X_cat.apply(le.fit_transform)	1	1
"copy[""Pclass""].median()"	1	1
train.assign(male=Sex_['Sex_male'], female=Sex_['Sex_female'])	1	1
dataset['AgeGroup'] = dataset['AgeGroup'].astype(int)	1	1
all_data.groupby('Title')['Age'].median()[titles.index(title)]	1	1
full['Fare'].copy()	1	1
data['Fare_per_person']=data['Fare']/(data['Family_Size'])	1	1
result_df_xgb.head()	1	1
X.shape[1]    # number of examples	1	1
survived_list.append(known_data.iloc[idx].Survived)	1	1
train.drop(['Ageband'], axis=1)	1	1
df.corr()['Survived']	1	1
X.loc[1043,'Fare'] = fare	1	1
"train_dat.at[i,""Ticket_g""] = ""CA"""	1	1
df_test.loc[df_test['Embarked'].isnull(),'Embarked'] = freq_port	1	1
dfTrain['Survived'].groupby(dfTrain['Name_Title']).mean()	1	1
titanic_df.join(elitePerson_dummies_titanic)	1	1
data_df.groupby(['Fare'])['Survived'].mean()	1	1
"pd.merge(count, mean, on=[""Sex"",""Pclass""])"	1	1
"titanic_train_dataset[""CabinFloorScore""].loc[titanic_train_dataset['CabinFloor'] == ""C""] = 4"	1	1
np.round(perceptron.score(X_valid_norm, Y_valid), 4)	1	1
axes[1].set_xticklabels(('First class', 'Second class', 'Third class'))	1	1
Submission.to_csv('Submission.csv', index=False)	1	1
str.get(1)	1	1
"test_scores[""phase""] = ""test"""	1	1
honorifics_test.add(n.split(',')[1].split('.')[0].strip())	1	1
df_titanic.describe()	1	1
"train.loc[train[""FamilySize""] >=5, ""Big""] = True"	1	1
ax1.hist(full['Fare'].dropna(), bins=80);	1	1
submission.to_csv('RF_initial_submission.csv', index = False)	1	1
col_test.insert(1,col_test[-1])	1	1
dfgs.head()	1	1
"train.select_dtypes(include=[""number""]).columns"	1	1
df_test['Senior'] = df_test['Age'].map(lambda s:1 if s>60 else 0)	1	1
"X[""Age""].fillna(X.Age.mean(), inplace = True)"	1	1
"final_df.to_csv(""output-prediction.csv"", index=False)"	1	1
dfTrain['Embarked'] = dfTrain['Embarked'].fillna('znan')	1	1
all_data['FamSize'] = 1 + all_data['SibSp'] + all_data['Parch']	1	1
passenger['SibSp'] >= 3:	1	1
axes[2].set_xticklabels(['Cherbourg', 'Queenstown', 'Southampton'])	1	1
data_train.drop(['Cabin','Ticket'],axis=1)	1	1
"sns.boxplot(x=""Embarked"", y=""Fare"",data=full[full.Fare.notnull()])"	1	1
data_train['Age'].loc[data_train['Pclass']==1].plot(kind='kde')	1	1
"x_train[""Sex""].plot.hist(alpha=0.5)"	1	1
df_full['IsAloneT'] = (df_full['TicketSizeBin'] == 0).astype(int)	1	1
X_train.shape, X_test.shape, y_test.shape, y_test.shape	1	1
df_test_ml.set_index('PassengerId', inplace=True)	1	1
df.loc[(df['Pclass']==2) & (df['Cabin_letter']=='U'), 'Cabin_letter'] = 'D'	1	1
train.drop(['Cabin','Embarked','Ticket'], axis=1)	1	1
glbl['n_jobs'] = 1        # -1 to use all available CPUs	1	1
train.drop(['Embarked'], axis = 1, inplace = True)	1	1
df_test[['PassengerId', 'Survived']].to_csv('RandomForestClassifier.csv', index=False)	1	1
Xt['Cabin'].dropna(axis=0, inplace=True)	1	1
in ['Countess','Jonkheer','Mme']:	1	1
titanic_train['Pclass_1']=(titanic_train['Pclass']==1).astype(int)	1	1
titanic_data.loc[titanic_data['FamilySize']== 1, 'IsAlone'] = 1	1	1
np.cumsum(W)*np.sqrt(dt) ### standard brownian motion ###	1	1
full_df[ 'Family_Large' ]  = full_df[ 'Family' ].map( lambda s : 1 if 5 <= s else 0 )	1	1
"i.loc[i[""CabinCount""] >= 3,[""CabinType""]] = ""ThreePlus"""	1	1
df['Cabin_num'] = pd.qcut(df['Cabin_num1'],3)	1	1
df.drop(columns=['Sex'], axis=1)	1	1
data['FareBin'] = pd.cut(data.Fare, bins=(-1000,0,8.67,16.11,32,350,1000))	1	1
np.append(np.arange(0,90,10),np.array([100,1000]))	1	1
titanic.Age.fillna(titanic.Age.mean(), inplace = True)	1	1
data.groupby(['Title1','Pclass'])['Age'].mean()	1	1
data_test['Sex'].unique()	1	1
transformed_df['Fare'] = fare.Fare	1	1
train_df0.groupby('Embarked').count()	1	1
dset['Fare_Cat'] = pd.qcut(dset.Fare, q = 4, labels = False)	1	1
plt.hist(train_data.Age[(np.isnan(train_data.Age) == False) & (train_data.Survived == 1)], bins= 15, alpha = 0.4, color = 'b', label = 'After')	1	1
"df[""Family_size""] = (df.Parch + df.SibSp + 1).astype(np.uint8)"	1	1
"df.loc[df[""title""].isin([""Dona."", ""Mlle.""]), ""title""] = ""Miss."""	1	1
df['Fare_per_ticket_member_standard_score_with_Pclass'] = df.apply(lambda row: (log(row['Fare_per_ticket_member'] + very_small_val) - log(class_fare.loc[row['Pclass'], 'mean'] + very_small_val)) / log(class_fare.loc[row['Pclass'], 'std'] + very_small_val), axis=1)	1	1
X_train_stack.shape	1	1
"val_df.drop(""Embarked"", axis=1, inplace=True)"	1	1
"combined[""Cabin""].isnull().sum()"	1	1
test_data['Fare'].fillna(test_data['Fare'].mean(),inplace=True)	1	1
MLA_compare.sort_values(by = ['F1 Score'], ascending = False, inplace = True)	1	1
"data.loc[:,[""Pclass"",""Sex"",""Age"",""SibSp"",""Parch"",""Fare"",""Embarked""]]"	1	1
train_df.drop(labels='FareBand', axis='columns', inplace=True)	1	1
df_cp.loc[:, 'Pclass'] = df_cp['Pclass'].fillna(df_cp['Pclass'].median())	1	1
gridscgdbt3.best_params_['max_features'],	1	1
"train_data[""Family""]"	1	1
data['Embarked'] = data['Embarked'].astype('category').cat.codes	1	1
fill_strategies.items():	1	1
df_train_features.iloc[:,7]:	1	1
titanic_df['parent_of_child'] = titanic_df[['Parch', 'Age']].apply(get_parent_of_child,axis=1)	1	1
titanic_train_relevant.append(titanic_test_relevant)	1	1
X_train['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)	1	1
X_tot.head(ntr) #only take the first ntr rows to be the training set	1	1
submit.to_csv('plain_xgb_2.csv', index = False)	1	1
df_submission['has_cabin'] = df_submission['cabin'].map(lambda c: 0 if c == 'none' else 1)	1	1
processed_data.iloc[0:891,:]	1	1
pd.merge(missing,settypes, left_on='column_name', right_on='index',how='inner')	1	1
train['Age_band'].value_counts().to_frame().style.background_gradient(cmap='summer')	1	1
randomforest_test.append(pd.Series(metrics.accuracy_score(y_test,prediction_test)))	1	1
feats.iloc[tickets[tickets.ticket_nr == t].index.tolist()]	1	1
original_train_data.groupby('Embarked')['Survived'].sum().plot.bar(stacked=True)	1	1
data.dropna(thresh=0.8*len(data), axis=1)	1	1
stdScaler.transform(X_test)	1	1
test_df.loc[test_df['Name'] == NameTestListIndex[x], 'Name'] = 'Misc'	1	1
test.drop(['PassengerId','Name','Ticket'],1)	1	1
train_ch.groupby('CabinType3').sum()	1	1
df['Age_band'].value_counts().to_frame().style.background_gradient(cmap='summer')	1	1
titanic_train_final.head()	1	1
"p_class.div(p_class.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True, figsize=(4,4))"	1	1
test_rf_model[['PassengerId', 'Survived']]	1	1
"total[""Title""] = total[""Title""].replace(['Ms', 'Mlle'], 'Miss')"	1	1
dataset.loc[(dataset['Age'].isnull()) & (dataset['Sex'] == gender) & (dataset['Embarked'] == embarked) & (dataset['Pclass'] == pclass),'Age'] = guessed_age	1	1
Test_df.info()	1	1
data.drop(['FareBin'], axis=1, inplace=True)	1	1
test['Children'] = 0	1	1
train_data['With_Family'] = [0 if(Parch == 0 & Sib ==0) else 1 for Parch,Sib in zip(train_data['Parch'],train_data['SibSp'])]	1	1
data_train.drop('Name', axis=1, inplace=True)	1	1
test['hasCabin1'] = test['hasCabin1'].fillna(1)	1	1
"train[""title""] = train[""title""].fillna(0)"	1	1
"training[""Fare""] = scaler.fit_transform(fares_train)"	1	1
df.drop('Ticket', inplace = True, axis = 1)	1	1
test_df_X_num.as_matrix()	1	1
testd['Faregroup'] = pd.qcut(testd['Fare'], 5, labels = [1, 2, 3, 4, 5])	1	1
x_train.T	1	1
test.drop(['PassengerId','Embarked','Pclass','Sex','Cabin','Ticket','SibSp','Parch','Name','Title','Miss', 'Mr', 'Mrs', 'Ms', 'Colonel', 'Dona', 'Dr'], axis=1)	1	1
"titanic_train.loc[titanic_train[""Sex""] == ""male"", ""Sex""] = 0"	1	1
dataset.loc[(dataset['Fare'] > 131.5) & (dataset['Fare'] <= 175.333), 'FareBand'] = 3	1	1
train_data[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
result.to_csv(submission_file_path,sep=',',columns=['PassengerId', 'Survived'], index=False)	1	1
"train_new[""Survived""]"	1	1
df['Title']=extracted_titles.map(titles)	1	1
"data_test.drop([""PassengerId"", ""Name"", ""Cabin"", ""Ticket""], axis = 1, inplace = True)"	1	1
np.sum(layer_2_delta)	1	1
dataset['FamilyCount'] = dataset['SibSp'] + dataset['Parch']	1	1
full[['Age','TicketClass','Sibling_Spouse']].groupby(['TicketClass','Sibling_Spouse']).agg(['mean','std'])	1	1
"ax[0].set_ylabel(""gradients of loss"")"	1	1
class_sex_group.mean()	1	1
"_df[""cabin_let""] = _df[""_cabin""].apply(lambda i : i[0] if i != ""nan"" else np.nan)"	1	1
titanic_df.loc[miss_mask, 'Age'] = titanic_df.loc[miss_mask, 'Age'].fillna(titanic_df[titanic_df.Title == 'Miss'].Age.mean())	1	1
df.loc[df.Age >=5, 'AgeF'] = 'Child'	1	1
np.round(random_forest.score(X_valid_norm, Y_valid), 4)	1	1
training_set.groupby(['Survived', 'Sex'])	1	1
allfeat.drop(columns=['Fare','CategoricalFare']) #column no longer needed	1	1
train['Age'].interpolate(inplace = True)	1	1
dataset.Age.isnull()	1	1
test_copy.loc[test_copy['Embarked'] == 'Q', 'Embarked_Category'] = 2	1	1
df['famsurrate'].fillna(0, inplace=True)	1	1
"train.drop(""Ticket"", axis = 1, inplace = True)"	1	1
"accuracy.sort_values(by=""accuracy"", ascending=False)"	1	1
X_test['Title'] = X_test['Title'].replace(['Lady', 'the Countess', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona', 'Ms', 'Mme', 'Mlle'], 'Rare')	1	1
titanic_df['Age'][titanic_df['Title']==1].mean()	1	1
ds_train.iloc[:,0]	1	1
titanic_training_df.info()	1	1
dfTest['Title']=dfTest.Title.map(Title_Dictionary)	1	1
data['Embarked'].value_counts().plot(kind='bar', ax=ax[1], rot=0)	1	1
"train_p['Family'] =  train_p[""Parch""] + train_p[""SibSp""]"	1	1
labels_validate.values,	1	1
test_y.as_matrix()	1	1
transformed_df['Cabin_A'] = cabin.Cabin_A	1	1
sns.boxplot(x='Embarked', y='Fare', hue='Pclass', data=df_train)	1	1
test_mod.isnull().sum()	1	1
test_data.drop(['SibSp','Parch'], axis=1, inplace=True)	1	1
features_train.drop('Survived', axis=1, inplace=True)	1	1
data.loc[data.Ticket == tk, 'Fare'] = distribute_evenly	1	1
"new_output[""Survived""]=predictions"	1	1
df_test.drop(['AgeBinCode'], axis=1)	1	1
dataset['CabinNumber'] = dataset.Cabin.str.extract('[A-G](\d+)', expand=False)	1	1
titanic.to_csv('titanic.csv',index=False)	1	1
"sns.boxplot(y = ""Age"", x = ""Sex"", data = X_train, palette = ""muted"")"	1	1
combine_df.loc[ combine_df['Age'] > 64, 'Age'] = 4	1	1
df_titanic_test_mod['Title']=le.transform(df_titanic_test_mod['Title'])	1	1
train[['Embarked', 'Survived']].groupby('Embarked').mean().iplot(kind='bar', colors='blue', title='Survival Rate based on Port of Embarkment')	1	1
dataset['fare'] = dataset['fare'].astype(int)	1	1
titles['Title'] = titles['Title'].replace('Mme', 'Miss')	1	1
full_data['FamilySize'] = full_data['SibSp'] + full_data['Parch'] + 1	1	1
data.surname_Gordon.astype(np.uint8)	1	1
data.loc[(data.Room > 80) & (data.Room <= 120), 'RoomBand'] = 4	1	1
df['Age']=df['Age'].fillna(-.5)	1	1
df[['Title','Age']].groupby('Title').mean()	1	1
preds.append(pred.item())	1	1
"test.drop(columns=""Sex"")"	1	1
df['Cabin']=df['Cabin'].str[0]	1	1
df['Family_Size'] = df.Parch + df.SibSp + 1	1	1
train['Survived'].value_counts().plot.pie(explode=[0,0.1], autopct='%1.1f%%', ax=ax[0])	1	1
train['Fare'].plot(kind='hist',bins=30,color='green')	1	1
titanic_train['Sex'].value_counts()	1	1
"train_set[""Familysize""] = train_set[""Parch""] + train_set[""SibSp""]"	1	1
test_df.loc[(test_df['Age']>32)&(test_df['Age']<=48),'Age_band']=3	1	1
classifiers_summary[['Classifier','Prediction']].head(5)	1	1
df.Fare.describe()	1	1
"test_data.loc[(test_data[""Age""] > 50) & (test_data[""Age""] <= 80), 'Age_Group'] = 4"	1	1
"dataset[""Embarked""]=dataset[""Embarked""].fillna(""S"")"	1	1
test.drop('PassengerId', axis = 1, inplace = True)	1	1
train['Training_set'] = True	1	1
dfte['Fare'] = dfte['Fare'].fillna(mean)	1	1
"test[""Survived""] = lr.predict(test_data_X_sd)"	1	1
joined['Fare'][joined['Survived'] == 0],	1	1
train_df['Family'] =  train_df['Parch'] + train_df['SibSp']	1	1
train.drop(labels=['Name'], axis=1)	1	1
"test[""Sex""] = test[""Sex""].replace({""female"":0, ""male"":1})"	1	1
data_train[['Has_Cabin', 'Survived']].groupby(['Has_Cabin'], as_index=False).mean().sort_values(by='Has_Cabin', ascending=True)	1	1
train_df['Ticket'][y]== count_plot_index[x]:	1	1
train_df['AgeBand']= pd.cut(train_df['Age'],5)	1	1
train['SexM'][i] = 1	1	1
train['SexM'][i] = 0	1	1
plt.hist(male_data.Age, bins=sex_bins, alpha= .5, label= 'males')	1	1
return [0] * len(test_data)	1	1
train2_df['Age'].fillna(np.random.randint(age_avg - age_std, age_avg + age_std), inplace=True)	1	1
"train_df[""RGroup""]=train_df[""RGroup""].astype(""category"")"	1	1
titanic_df['Title'] = titanic_df['Title'].apply(title_class)	1	1
train.describe(include = ['O']) #Categoric	1	1
train.drop(['PassengerId', 'Name', 'Ticket'], axis=1)	1	1
df_train.Fare.fillna(avg_fare, inplace=True)	1	1
data1.drop(['Pclass','Name','Sex','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Age'], axis=1)	1	1
df['FareRange'] = pd.cut(df.Fare,labels=[0,1,2,3],bins=bins)	1	1
Xt.drop(['Cabin'], axis=1)	1	1
"test[[""Sex"", ""Sex_encode""]].head()"	1	1
trainPredictAttribute.shape	1	1
allset.drop(['Age'],axis=1)	1	1
titanicTest['Child']=np.nan	1	1
train.append(test,ignore_index=True)	1	1
x_train['Name_Len_words'] = x_train['Name'].map(lambda x: len(x.split()))	1	1
res.append(m.oob_score_)	1	1
data['Ticket_numerical'] = data.Ticket.apply(lambda s: s.split()[-1])	1	1
combine.groupby('Ticket')['Name'].transform('count')	1	1
np.mean(m_stack_score)	1	1
titanic['Ticket']	1	1
df_test.sample(2)	1	1
"dataset.drop([""Fare""], axis=1)"	1	1
"dftest_sorted[[""PassengerId"",""Survived""]]"	1	1
train['Survived'].value_counts().values[0] - train['Survived'].value_counts().values[1]	1	1
full_dataset.iloc[:881,:]	1	1
raw_test.join(ports_df)	1	1
train_df.drop(['PassengerId','Survived','Alone'], axis=1)	1	1
d_train.drop('Survived', axis=1)	1	1
"data[""Age_cohort""][(data[""Age""]>50)]=6"	1	1
categoric_data_encoded.head()	1	1
"testData[""Survived""] = dtree.predict(test_df.fillna(0))"	1	1
test.loc[(test['Sex'] == 0) & (test['isAlone'] == 1), 'gender_alone'] = 1	1	1
"test.loc[test[""PassengerId""]==1044,:]"	1	1
titanic_data['FamilySizeGroup'] = 'Small'	1	1
data_train['Fare']/(data_train['Family Size'])	1	1
strat_test_set.values	1	1
np.mean(hist.history['val_acc'][-100:-1]) > 0.55:	1	1
features_long.drop('Age',axis=1)	1	1
my_imputer.transform(final_submission)	1	1
df_test['SibSp'] + df_test['Parch']	1	1
"gradboost_prediction.to_csv(""gradboost_prediction.csv"", index = False)"	1	1
"train_test.loc[train_test[""Cabin""].notnull() ,""Cabin_nan""] = 0"	1	1
train_data.hist(bins=50, figsize=(20, 15))	1	1
df_titanic_train.info()	1	1
ax[0][1].bar(x,nonsurvivor_genders)	1	1
np.append(y_pred, rf.predict(features[test]))	1	1
data['Title'] = data['Name'].map(lambda x: get_title(x))	1	1
dataset['Miss'] = np.where(dataset['Title']=='Miss',1,0)	1	1
"all[""Cabin""].isnull().sum()"	1	1
df.Fare.isnull().sum(axis=0)	1	1
"dataset_train[""Parch""].value_counts()"	1	1
"plt.hist([train[train[""Survived""]==0][""normalizedFare""], train[train[""Survived""]==1][""normalizedFare""]], stacked=True, bins=10, label=['Dead', 'Survived'])"	1	1
data.groupby(['PreTkt','TktNum'])['CabinCode'].unique()	1	1
test.Age.fillna(test.Age.mean(), inplace=True)	1	1
np.mean(crossVal)	1	1
df_train.loc[:,('PassengerId','Survived','Embarked')].groupby(['Embarked','Survived']).agg('count')	1	1
train[['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Fare']]	1	1
full.iloc[0:nTrain,:]	1	1
train.loc[ (train.Age.isnull()), 'Age'] = median_age	1	1
"dataframe.loc[dataframe[""Fare""] > fare_threshold, crossed_feature] = 4"	1	1
avg_fare_pclass['Fare'] = np.round(avg_fare_pclass['Fare'], decimals = 4)	1	1
Y.loc[test_index]	1	1
df['Name'] = df['Name'].fillna(4).astype(int)	1	1
model.add(Dense(128, input_dim=6, kernel_initializer='normal', activation='relu'))	1	1
combined.loc[(combined['Pclass'])==1,'Age'] = combined.loc[(combined['Pclass'])==1,'Age'].fillna(combined.loc[(combined['Pclass'])==1,'Age'].median())	1	1
acc.append(pd.DataFrame({'Model': 'Random Forests', 'Accuracy': [accuracy_score(y_true, y_pred)]}))	1	1
df_combined['Title'] = df_combined.Name.str.extract('([A-Za-z]+\.)', expand=False)	1	1
lastname_table['Dead_mom_w_lastname'].fillna(0, inplace=True)	1	1
"traindata[""title""] = traindata[""title""].fillna(-1)"	1	1
data.loc[(data['Fare']>14.454) & (data['Fare']<=31.0), 'Fare_cat'] = 2	1	1
inDF['Cabin_type'] = inDF['Cabin'].apply(lambda x : x[:1])	1	1
df['Title'] = df['Title'].replace(['Lady','Mlle','Mme','Ms'],             'Miss')	1	1
df_titanic_train_mod['Embarked'].replace('S',1,inplace=True)	1	1
dataset.Sex.astype('category')	1	1
train.loc[:,feature_cols]	1	1
no_age['Age'] = predictions	1	1
df['Survived'].values.copy() if 'Survived' in df else []	1	1
"models.append((""SVC"",SVC()))"	1	1
train['Family_Size'] = data['Family_Size'][:891]	1	1
"data_train['Ticket_last_digit'] = data_train[""Ticket""].map(lambda x: float(x[-1:]) % 10 if x[-1:].isdigit() else float('NaN'))"	1	1
Merged_data['Age']=Merged_data[['Age','Pclass']].apply(Fill_Age,axis=1)	1	1
test['Age'].loc[(test['Sex'] == 'female') & (test['Fare'] == i) & pd.isnull(test['Age'])] = test['Age'].loc[(test['Sex'] == 'female') & (test['Fare'] == i)].median()	1	1
ada_feat_red.transform(ada_final_test)	1	1
Predictive_models.sort_values(by ='Score', ascending=True)	1	1
"i.loc[i[""Title""] == ""Don."",[""Title""]] = ""Other"""	1	1
"test_set[""Age""].fillna(train_set[""Age""].median(),inplace=True)"	1	1
features_long.drop('Sex',axis=1, inplace=True)	1	1
train_df['Title'] = train_df.Name.str.extract('([A-Za-z]+)\.')	1	1
"tmp_train.groupby(""cabin_found"")[""Survived""].mean()"	1	1
train_df[['FamilySize', 'Survived']].groupby('FamilySize').mean()	1	1
submission['Ticket_numerical'] = submission['Ticket_numerical_temp']	1	1
data.drop('Embarked' , axis=1)	1	1
le.transform(list(train_df[col].values))	1	1
"df.Survived.astype(""category"")"	1	1
train_raw['Survived']	1	1
X_age_dummied.shape, X_age_dummied_test.shape	1	1
confusion_matrix.sum().sum()	1	1
"sex[""Name""] = np.nan"	1	1
"test[""title""] = train[""title""].replace('Mme', 'Mrs')"	1	1
pdf['median'] = pdf.apply(lambda row: d[(row['Sex'], row['Pclass'])], axis=1)	1	1
test.loc[ test['Age'] <= 5, 'Age'] = 0, #Baby	1	1
test_data.Sex.apply(lambda x: 1 if x=='male' else 0)	1	1
titanic_df.iloc[:891]	1	1
titanic.Age.fillna(titanic.Fare.mean())	1	1
test_df['Sex'] = test_df['Sex'].map(gender)	1	1
test[['title','Age']]	1	1
df['Family'].replace(to_replace = [2,3,4], value = 'small', inplace = True)	1	1
"test_data.dtypes[test_data.dtypes != ""object""].index"	1	1
"combined[""cp_id""] = -1"	1	1
data_sub['Survived'] = classifier.predict(data_sub_prepared)	1	1
train['Sex'] = train['Sex'].map({'male':0, 'female':1})	1	1
"train[""Family""]=train[""SibSp""]+train[""Parch""]+1"	1	1
"dat.loc[dat[""Title""] == ""Mr"",""isMr""] = 1"	1	1
"df_train[""Embarked""] = df_train[""Embarked""].astype('category')"	1	1
dataset.loc[ dataset['Fare'] <=7.91, 'Fare'] = 0	1	1
df_train_ml['Age'].fillna(np.random.normal(df_train_ml['Age'].mean(), df_train_ml['Age'].std()), inplace = True)	1	1
"train_data.replace([""S"", ""C"", ""Q""], [0,1,2])"	1	1
test_df.join(elitePerson_dummies_test)	1	1
h.to_csv('take.csv',index=False)	1	1
test_features.as_matrix()	1	1
ax2[1].hist(df_2c[df_2c.Survived == 0].Age, bins=10, range=(0,100))	1	1
df.loc[(df.Cabin.isnull()), 'Cabin'] = 'No'	1	1
pd.pivot_table(df_train, index = df_train['Title'], values = 'Survived')	1	1
columns2.append('test_%s_%s' % (var2, stat))	1	1
"axs[1].set_title(""Now"")"	1	1
full.head(2)	1	1
test['Pclass1'] = b2.transform(test.loc[:,'Pclass'])	1	1
"df_test[""tot_family_size""] = df_test[""Parch""]+df_test[""SibSp""]"	1	1
np.sum(y*np.log(y_hat)+(1-y)*np.log(1-y_hat))	1	1
data[['PassengerId']]	1	1
_df1['Title'] = _df1['Title'].replace('Mlle.', 'Miss.')	1	1
titanic_train.drop(['Name'],axis=1)	1	1
testONS.drop(drop_elementsONS, axis = 1)	1	1
"train_data[""Name""]:"	1	1
test['age_cat']=pd.cut(test.Age,5,labels=['a_a','a_b','a_c','a_d','a_e'])	1	1
dataset_train['Sex'] = lb_Sex.fit_transform(dataset_train.Sex)	1	1
train[['Family','Survived']].groupby(['Family']).mean()	1	1
le.transform(test_set[column])	1	1
df['Male'] = (df['Sex']=='male').astype(int)	1	1
t['Count'].values[0]	1	1
"df[""Farebin""]=pd.qcut(df[""Fare""],4,labels=[1,2,3,4])"	1	1
predictionsVal.append(pred)	1	1
df.drop('Survived_fam', axis=1, inplace=True)	1	1
"df.set_index(""PassengerId"")"	1	1
test['Fare_cat'][test.Fare>50]=1	1	1
ax[1].set_xticks(domain_2)	1	1
df3['Age']	1	1
train_data.describe(include=['number'])	1	1
df_output[['PassengerId','Survived']].to_csv(filename, index=False)	1	1
test_data['Age']=test_data[['Age','Pclass']].apply(age_fill,axis=1)	1	1
df_adults.groupby('Survived').size() # with .size() we generate a pandas pandas.core.series.Series Series type variable	1	1
df['Embarked'] = df['Embarked'].map({'S': 0, 'Q': 1, 'C': 2}).astype(int)	1	1
Data['Pclass'] = Data['Pclass'].astype('category').cat.codes	1	1
test_data.Family_Size.describe()	1	1
"sns.boxplot(x=""Survived"", y=""Fare"", data=train,ax=axesbi[1,2])"	1	1
df_train['Survived'], test_size=0.20,	1	1
df['Travel_Alone'] = df['Family_Size'].map(lambda x: True if x == 1 else False)	1	1
df_data['P_Ti_Age'] = df_data['Age']	1	1
"tp.loc[tp[""Title""]==""Miss"",""Title_c""] = 1"	1	1
train_data['Pclass'].unique()	1	1
titanic_parch_group.apply(len)	1	1
data.loc[(data['Age']>=20)&(data['Age']<40),'Age']=1	1	1
data1.drop(drop_columns, axis=1, inplace=True)	1	1
test_df.pipe(fix_data).values	1	1
train.drop(columns='Cabin', inplace=True)	1	1
df.isnull().sum().plot(kind='bar');	1	1
allset['TotalFamily']=allset['SibSp'] + allset['Parch']	1	1
y['Age']=pd.cut(y['Age'],bins=[-100,1,10,20,40,60,100],labels=['invalid','small','teen','adult','matured','old'])	1	1
"tr[""Age""].mean()"	1	1
notNullData.iloc[i,5]=notNullData.Fare.mean()	1	1
sns.boxplot(x='Survived',y='Age',data=data_train)	1	1
test_df['Embarked'] = test_df['Embarked'].map(lambda x: 0 if x == 'S' else 1 if x == 'C' else 2)	1	1
test_df.drop('PassengerId', inplace=True, axis=1)	1	1
df2['Sex']=df2['Sex'].apply(discrete)	1	1
gb_acc_list.append(gb_acc); gb_f1_list.append(gb_f1)	1	1
train_df.drop(columns=unnecessary_columns)	1	1
np.dot(W2.T, dZ2)	1	1
trainData.iloc[:,0:8]	1	1
"train_set[""Family""] = train_set[""SibSp""] + train_set[""Parch""] + 1"	1	1
grads['dw']	1	1
data.set_value(302, 'TicketClean', int(med1))	1	1
titanic_test['Age'] = titanic_test['Age'].fillna(titanic_train['Age'].median())	1	1
"Y[""RGroup""]=Y[""Last_Name""]+'_'+Y[""Ticket""]"	1	1
training_set.loc[:, training_set.columns == 'Survived'].values	1	1
"train.loc[pd.isnull(train[""Cabin""]), ""Cabin""] = 0"	1	1
df[1] = data['Fare'].loc[data.Pclass ==1]	1	1
cabin_not_null['deck'] = cabin_not_null['Cabin'].str[0]	1	1
"train_data[""PclassOne""] = 0"	1	1
"pd.isnull(test[""Fare""][i]):"	1	1
data.sons.loc[data.PassengerId==881] = 1	1	1
test_df['Age'].apply(lambda x: 1 if (x > 32 and x <= 48) else 0)	1	1
"axes[1].set_title(""Survival ratios for atributes groups"")"	1	1
df['New_Age'].isnull().sum()	1	1
X_test.loc[:,selector.support_]	1	1
df02.rename(index=str, columns=app_mapping)	1	1
train_df.FarePP.hist(ax=axes[0], bins=20)	1	1
data.drop('Cabin', axis=1, inplace = True)	1	1
train_df['Survived'].groupby(train_df['Embarked']).mean()	1	1
full.set_value(62,'Embarked','S');	1	1
test_dataset.loc[(test_dataset['Age'].isnull()) & (test_dataset['Title']=='Mrs'),'Age'] = 39	1	1
df[['Age','Pclass_1','Pclass_2','Pclass_3','SibSp','Parch','Fare','Sex_female','Sex_male']]	1	1
data.loc[(data.Age.isnull()) & (data.Title == 'Sir.'), 'Age'] = data.loc[data.Title == 'Sir.', 'Age'].median()	1	1
dataset['Title'] = dataset['Title'].replace('Sir', 'Royalty')	1	1
raw_train[['Parch', 'Sex', 'Survived']].groupby(['Sex', 'Parch'], as_index=True).mean()	1	1
"test_df[""Age""].fillna(age_median, inplace=True)"	1	1
X_age_dummied_test['Parch_5'] = np.zeros(len(X_age_dummied_test))	1	1
test['Sex']=test['Sex'].apply(lambda x:gender[x])	1	1
plt.hist(df_to_imp[(df_to_imp.Pclass==a1)&(df_to_imp.Title==a2)&                                           (df_to_imp.Sex==a3)]['Age'], normed=True)	1	1
df['Title'] = df['Title'].apply(lambda x: titles[x] if x in titles.keys() else x).astype('category')	1	1
dataset.CabinNumber.fillna(0, inplace=True)	1	1
dataset['Title'] = dataset['Title'].replace('Col', 'Officer')	1	1
train_df.loc[:, Ycol]	1	1
"titanic_train[[""Embarked"",""Survived""]].groupby([""Embarked""],as_index = False).mean()"	1	1
test_data['SmallFamily'] = test_data['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)	1	1
df_pred.info()	1	1
np.shape(X_features_train)	1	1
d.corr()	1	1
"sns.boxplot(train[train[""Pclass""] == 3][""Fare""], ax = ax[2])"	1	1
titanic_df.loc[titanic_df['Family'] >= 1, 'Family'] = 1	1	1
new_features.head()	1	1
data.Personal_Titles_Royalty.astype(np.uint8)	1	1
data.loc[(data.passenger_fare>31.67) & (data.passenger_fare<=31.684) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>31.67) & (data.passenger_fare<=31.684) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
"test_df[""PassengerId""] = test_df[""PassengerId""].astype(int)"	1	1
allfeat['Age'] = allfeat['Age'].astype(int)	1	1
"test_df.drop([""PassengerId"",""Name"",""Ticket""], axis=1)"	1	1
data['Cabin'] = data['Cabin'].replace(['T', 'G', 'A',], 'L')  #Low	1	1
np.where(submission[variable].isin(frequent_cat), submission[variable], 'Rare')	1	1
np.mean(1 - val_scores, axis = 1)	1	1
df_final['Sex'] = df_final['Sex'].replace('female', 0)	1	1
"tmp[""Name""].str.contains(name).astype(int)"	1	1
train['title'].value_counts() >= count_min	1	1
"train_df.loc[train_df[""Age""]<=16,'Age']=0"	1	1
age[1].mean()	1	1
data['Deck'] = data.Deck.astype(int)	1	1
test[['PassengerId', 'Survived_svm']].to_csv('submission_svm.csv', index = False, header = ['PassengerId', 'Survived'])	1	1
titanic.loc[titanic['Embarked'] == 'C', 'Embarked'] = 0	1	1
train['Sex'][train['Survived']==1].value_counts().sort_index()	1	1
titanic_df['Cabin_Name'].unique()	1	1
df['Pclass'] = df.Pclass.astype('category')	1	1
df.loc[(df.Pclass == 3) &(df['Fare'] > 30)]	1	1
train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean();	1	1
train_copy['age_division'] = age_division	1	1
train['family'] = np.where(train['famSize']==0, 'N', 'Y')	1	1
X_test['Embarked'] = X_test['Embarked'].astype('float')	1	1
data_all['Embarked'] = data_all['Embarked'].map({'S': 1, 'C': 2, 'Q': 3, 'N':0}).astype(int)	1	1
df_test['Survived'] = df_test.Survived.apply(lambda x:int(x))	1	1
df.loc[ (df.Fare.isnull()) & (df.Pclass == f+1 ), 'Fare'] = median_fare[f]	1	1
x['MP_Surv']=0	1	1
imputed['Age'] = full.Age.fillna( full.Age.mean() )	1	1
dataset.loc[dataset['Fare']<=17,'Fare'] = 0,	1	1
"titanic[""Sex""].unique()"	1	1
feature_values.quantile(boundaries)	1	1
X_full['Fare']=(full['Fare'] - 32) / (500)	1	1
df['Age'].fillna(df['Age'].mean(),inplace=True)	1	1
"_df.loc[ [393,105], ""group_id""]  = 1000.0"	1	1
"df_real_test.drop([""Sex"" , ""Cabin"" , ""Embarked""] , axis =1)"	1	1
"test_df['Age'].hist(bins=100, label=""Test set"")"	1	1
j.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)	1	1
df_train.drop(['Title'], axis=1)	1	1
testdf.head(2)	1	1
Xdf.loc[(Xdf['Fare'] > 14.454) & (Xdf['Fare'] <= 31), 'Fare']   = 2	1	1
train_data.drop(['Survived'], axis = 1, inplace = True)	1	1
X.apply(fn)	1	1
"df.loc[ (df[""Age""] > 16) & (df[""Age""] <= 32), ""Age"" ] = 2"	1	1
train[['Survived','Pclass']].groupby(['Pclass'],as_index=False).mean()	1	1
train_df.drop(labels = ['Cabin'], axis = 1)	1	1
train['IsChild'] = 0	1	1
test['Title'] = test['Name'].apply(extract_title)	1	1
"traindata.loc[:,[""title"",""Pclass"",""Sex"",""SibSp"",""Parch"",""Fare"",""Embarked""]]"	1	1
"dataset.loc[(dataset.Age.isnull()) & (dataset.Title == ""Master""), ""Age""] = 4"	1	1
"dataset_med.loc[2,2][""Age""]"	1	1
test['Cabin'][test.Cabin.isnull()]=0	1	1
df.groupby(['Pclass']).Fare.mean()	1	1
"train_data[[""PassengerId"", ""Survived""]].corr()"	1	1
test['Embarked'] = test['Embarked'].apply(lambda e: 'SCQ'.find(e))	1	1
test_df['Title_num']=test_df['Title'].map(TITLES)	1	1
train_df.drop(['Ticket'],axis=1)	1	1
X_val.describe(include='all')	1	1
testages.append(random.randint(10,18))	1	1
X_train.corr() # determines parameters that are correlated to Survival	1	1
"test[""Title""] = test[""Title""].astype(int)"	1	1
k_to_score.items():	1	1
np.round(rfc_model.feature_importances_, 3)	1	1
data.drop_duplicates()	1	1
full_df['Fare'] = full_df['Fare'].fillna(full_df['Fare'].median())	1	1
"train[""Embarked""] = train[""Embarked""].astype(""int"")"	1	1
df_test['AgeCat']=pd.cut(df_test['Age'], bins=[0, 18, 100], include_lowest=True, labels=[1, 2])	1	1
df_new.head()	1	1
whole.set_value(69,'Fid',215) #display(whole[whole.Name.str.contains(r'Andersson')&(whole.Fid!=8)]) #[147,1212]	1	1
"train.groupby(""Age"")[""Survived""].aggregate({""sum_of_survivor"":""sum""})"	1	1
np.where(data_test.Sex=='male', 1, 0)	1	1
df_sub.dropna().drop('Age', axis=1)	1	1
val.groupby(['Embarked' ])['Fare'].agg(['count','min','max','mean','median'])	1	1
dataset['isCabinB'] = dataset['isCabinLetters'].apply(lambda x: 0 if x != 'B' else 1)	1	1
titanic.drop(['Ticket','Cabin','Embarked','PassengerId'],axis=1,inplace=True)	1	1
train_df['Cabin'] = train_df['Cabin'].fillna('UNKNOWN')	1	1
features.append('pclass')	1	1
dataset['Title'] = dataset['Title'].replace(['Capt', 'Col', 'Major', 'Dr'], 'Officer')	1	1
data_train.drop(['Survived','Cabin', 'PassengerId'], axis=1)	1	1
tit_df.drop(['Pclass', 'SibSp'], axis = 1)	1	1
"total[""Groups""] = labels"	1	1
"cache[""Z1""]"	1	1
"tab.div(tab.sum(axis=1).astype(float), axis=0).plot(kind=""bar"",stacked=True)"	1	1
ship['Title_Code'].loc[(ship['Title_Code'] == 3) & (ship['Survived'] == 1)].count()	1	1
train_data['Fare'] = np.log1p(train_data['Fare'])	1	1
test_data[['Pclass', 'Sex', 'Age_cat', 'SibSp', 'Parch', 'Fare','Embarked']]	1	1
titanic_testxdf['Sex'].replace(to_replace=['female','male'], value=[0,1],inplace=True)	1	1
params_init['boosting_type'] = 'gbdt'	1	1
"KNN_result[0][""best_model""],"	1	1
dt_train.head(10)	1	1
"embark_dummies_test.drop([""S""], axis=1,inplace=True)"	1	1
y.loc[train_index],y.loc[test_index]	1	1
nwdata2.head(10)	1	1
imputed_data_train.isna().sum()	1	1
"train['age_cuts'] = pd.cut(x=train.Age,bins=[0,18,75,100], labels=[""Young"",""Adult"",""Old""] )"	1	1
lr_model['CVScore'],	1	1
titanic_df.drop(['PassengerId','Name','Ticket','Embarked','Cabin'], axis=1)	1	1
Embarked.count() / total_embarked;	1	1
age_fare['Fare'] = titanic['Fare']	1	1
train.Survived.groupby(train.Fare_class)	1	1
test.drop('df_type',axis=1)	1	1
dataset_train['Survived'].ravel()	1	1
"train_df[[""Embarked"", ""Survived""]].groupby(['Embarked'], as_index=False).mean()"	1	1
"tit_df[[""Age"", ""Survived""]].groupby(['Age'], as_index = False).mean()"	1	1
df['Age'] = data.transform(lambda x: x.fillna(x.mean()))	1	1
d['Title'] = d['Title'].replace('Mlle', 'Miss')	1	1
test.passanger_id.values	1	1
Pcent[0]	1	1
"traindata[""Embarked""] = traindata[""Embarked""].fillna(0)"	1	1
data.loc[p, 'NetworkNum'] = key	1	1
test_df.loc[miss_mask, 'Age'] = test_df.loc[miss_mask, 'Age'].fillna(test_df[test_df.Title == 'Miss'].Age.mean())	1	1
clf_metrics.append(metric_dict)	1	1
family.describe()	1	1
df_test[['PassengerId', 'Survived']].to_csv('knn_cv_feat_eng.csv', index=False)	1	1
"train_kaggle.groupby(""Sex"")[""Sex""].count().plot.bar(x=""Sex"", title=""Sex feature distribution"")"	1	1
"df[""child""][df[""Age""] < 18] = 1"	1	1
df_test['SibSp']	1	1
df2.corr().nlargest(500, 'Survived')	1	1
test_X.Fare.fillna(test_X.Fare.median(), inplace=True)	1	1
train_csv['Age'].fillna(train_csv['Age'].median(), inplace=True)	1	1
"data2[""Name""] = data2[""Name""].str.replace("","","";"")"	1	1
each['Title'] = each['Title'].replace('Mlle', 'Miss')	1	1
"sex[""Cabin""] = np.nan"	1	1
ticket_T[ 'Ticket' ] = test[ 'Ticket' ].map( cleanTicket )	1	1
numerical_columns.append('Surname_perishing_women')	1	1
cabin_numbers.append(int(cab3[1:].strip()) if len(cab3[1:]) <= 3 else int(cab3[len(cab3)-2:].strip()))	1	1
"train_data[""Embarked""]=train_data[""Embarked""].map({""S"": 1, ""C"" :2, ""Q"" :3})"	1	1
sns.boxplot(x='Sex',y='Age',data=train) #the age is not that dependent on Sex	1	1
train_num['Survived'][~idxs_mask]	1	1
test_data['Age'] = test_data['Age'].values.round()	1	1
df_test['Embarked'].fillna('S',inplace=True)	1	1
df.drop(labels=['Sex', 'Embarked'], axis='columns', inplace=True)	1	1
"train_df[""Fare""].isnull().sum(), test_df[""Fare""].isnull().sum()"	1	1
"train.loc[train[""SibSp""] == 1, ""sib_c""] = ""1"""	1	1
axs[1].hist(df[df['Age'].notna()]['Age'], cumulative=True)	1	1
plt.rcParams['figure.figsize'] = [14, 10]	1	1
df_test['Survived'] = test_y	1	1
full_set.set_index('PassengerId', inplace = True)	1	1
test_df['Name'].str.split()	1	1
df['PersonType'] = df['Sex']	1	1
y_pred_xgb['Survived']	1	1
"train[[""Survived"",""SibSp"",""Parch"",""Age"",""Fare""]].corr(),"	1	1
lastname_table['Dead_kid_w_lastname'].fillna(0, inplace=True)	1	1
X_train_norm.iloc[:,:].values.astype('float');	1	1
test_sex_frame.drop(['male'], axis=1)	1	1
"Accuracy[""supportVectorMachine""] = accuracySVMP"	1	1
dataset['Title']=dataset.Name.str.split(',',expand=True)[1].str.split('.',expand=True)[0]	1	1
train['IsAlone'] = np.where(train.FamilySize >1, 0, 1)	1	1
"data[""FamilySize""] = data['Parch'] + data['SibSp'] + 1"	1	1
af.append(sortage)	1	1
test_baseline_model['Survived'] = predicted_survivors	1	1
"train.loc[train['Embarked'] == ""S"", 'Embarked'] = 1"	1	1
validation_accuracy.append(validation_result['accuracy'])	1	1
"df_test[[""P2"",""P3""]]=pd.get_dummies(df_test[""Pclass""],drop_first=True)"	1	1
"train[""Sex""]=train[""Sex""].astype(str)"	1	1
data.loc[data['Fare'] > 31, 'Fare'] = 3	1	1
train_df.groupby('SibSp')['Survived'].mean().plot(kind='barh',ax=axesbi[0,1],xlim=[0,1])	1	1
data_train['Name_length_scaled'] = scaler.fit_transform(data_train['Name_length'].values.reshape(-1, 1), namelength_scale_param)	1	1
"data.set_value(i, 'Name', ""Rev"")"	1	1
forest_clf_scores.mean()	1	1
input_df.shape[0]	1	1
data.groupby('FamilySize')['Survived'].mean().plot.bar()	1	1
df_train[['FamilySize','Survived']].groupby('FamilySize').mean().sort_values(by='Survived',ascending=False)	1	1
train.drop(['Cabin','Ticket','PassengerId','Name'], axis = 1)	1	1
dataset.Ticket.median()	1	1
"testdat.drop(""Fare"",axis=1,inplace=True)"	1	1
"df.loc[df[""Age""].notna(), ""Age_Band""] = pd.cut(df.loc[df[""Age""].notna(), ""Age""], 5)"	1	1
dataset['Embarked'] = dataset['Embarked'].fillna(train['Embarked'].dropna().mode()[0])	1	1
test_dataset[['Pclass','Sex']]	1	1
pyplot.boxplot(results)	1	1
data_Y['notEqual'] = data_Y['predict'] - data_Y['Survived']	1	1
dt_train.drop(['SibSp', 'Parch'], axis=1, inplace=True)	1	1
submission.to_csv( 'titanic_pred_RF.csv' , index = False )	1	1
titanic_train_df['Sex'] = le.fit_transform(titanic_train_df['Sex'].map( {'female': 0, 'male': 1} ).astype(str))	1	1
Train_Master.columns.values	1	1
df.drop(['Name', 'SibSp', 'Parch', 'Relatives', 'PassengerId'], axis = 1)	1	1
"train[""Title""] = [i.replace('Jonkheer', 'Nobility') for i in train.Title]"	1	1
epoch_list.append(epoch)	1	1
train.groupby('Pclass')['Survived'].mean().plot(kind='barh',ax=axesbi[0,0],xlim=[0,1])	1	1
"data[""Fare""] = data[""Fare""].fillna(np.mean(data[""Fare""]))"	1	1
test4.drop('Sex_female', axis=1, inplace=True)	1	1
"correlation_Y.sort_values(by = ""Survived"", ascending = False)"	1	1
dataframe['Fare'].fillna(fullData['Fare'].dropna().median(), inplace=True)	1	1
np.mean([x for x in train_x[:,2] if not isnan(x)])	1	1
data_raw.dropna(axis=1, how='any')	1	1
indices_of_outliers.append(ind)	1	1
df1['Embarked'] = np.where(df1['Embarked']== 'S', 2 ,df1['Embarked']  )	1	1
model.add(layers.Dense(64, activation='relu'))	1	1
trainSet.loc[:, 'Survived'][trainSet['Embarked'] == 'C'].value_counts()	1	1
train[['Sex','Survived']].groupby(['Sex']).mean().plot.bar()	1	1
dataset.loc[ dataset['Fare'] <= 5, 'Fare'] = 0	1	1
"test[""Age_Group""] = test.Age.apply(lambda x : 0 if x >= 0  and x < 10 else (1 if x >= 10 and x < 20 else (2 if x >= 20 and x < 30 else (3 if x >= 30 and x < 40 else (4 if x >= 40 and x < 50 else (5 if x >= 50 and x < 60 else 6))))))"	1	1
title.replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
df.loc[ df['Embarked'].isnull(), 'Embarked'] = 'S'	1	1
data_train.loc[:,['Survived','Embarked']].groupby(['Embarked']).count()	1	1
train.drop({'Pclass', 'Name', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Embarked', 'Age'}, axis=1)	1	1
train.loc[(train['Embarked'].isnull()), 'Embarked'] = train['Embarked'].median()	1	1
dataset.loc[(dataset['Age']>60)&(dataset['Age']<=80),'Age_range']=3	1	1
"test.loc[test[""Sex""] == ""male"", ""Sex_encode""] = 0"	1	1
"Test.insert(value=Test.Name.map(lambda name: name.split("","")[1].split(""."")[0].strip()),loc=11,column=""Title"")"	1	1
full['Embarked'] = pd.factorize(full['Embarked'])[0]	1	1
"dataset['isMissTitle'] = dataset[""Title""].apply(lambda x: 0 if x != 'Miss' else 1)"	1	1
"X[""Embarked""] = embarked_encoded"	1	1
df.groupby('bin_fare').Survived.count()	1	1
train_data['Parch'].describe()	1	1
df_tr.loc[sample_incomplete_rows.index.values]	1	1
"train_df2.drop(""Survived"",axis=1)"	1	1
models_df.loc[index, 'Execution Time'] = scores['fit_time'].mean()	1	1
test['Pclass'] = pd.DataFrame(pclass_scaled)	1	1
"died[""Fare""].plot.hist(alpha=0.5, color = ""blue"", bins=range(150))"	1	1
titanic_df['Alone']=titanic_df.SibSp + titanic_df.Parch	1	1
df_full.describe() # Summary  Statistics, df_full.describe(include='all') displays all types of data. By default, it only displays integer type stats	1	1
ax[0].set_title('Pclass and Fare vs Survived')	1	1
df.columns.values.tolist():	1	1
"data[""Age""] = data[""Age""].fillna(np.mean(data[""Age""]))"	1	1
np.mean(df_train['Age'])	1	1
df['Sex'] = df['Sex'].replace([0, 1], ['male', 'female'])	1	1
axes[0].legend(loc=2)	1	1
titanic_df['Type'] = titanic_df[['Age', 'Sex']].apply(child_female_male, axis = 1)	1	1
dataset.loc[i, 'Age'] = age_predict	1	1
"df_train[""SibSp""].hist(bins=8, density=True, stacked=True, color='teal', alpha=0.6)"	1	1
train['ExpensiveTickets'] = 0	1	1
test_data.describe(include='all')	1	1
"ts.drop([""Survived""], axis=1, inplace=True)"	1	1
Train_data.drop('source',axis=1,inplace=True)	1	1
"df_data[""TitleCat""] = df_data['Title'].map(title_mapping)"	1	1
df_comparison.head()	1	1
data_train_dummy['Age_scaled'] = std_scaler.fit_transform(reshape_Age, std_scaler_Age)	1	1
df['AgeBin'] = pd.cut(df['Age'], bins)	1	1
submit.drop('PassengerId', axis = 1, inplace = True)	1	1
"test_data.replace([""S"", ""C"", ""Q""], [0,1,2])"	1	1
titanic['Survived'].values	1	1
train['P2'] = np.array(train['Pclass'] == 2).astype(np.int32)	1	1
titanic.drop(['Parch', 'SibSp'], axis = 1)	1	1
cabin_df.groupby(['deck_level'])['Survived'].mean()	1	1
train_df.append(test_df, sort=False)	1	1
train.survived.values	1	1
df.drop(['Survived','AgeGroup'],axis=1)	1	1
"test[""Fam""] = test.loc[:,""FamilySize""].apply(Fam_label)"	1	1
dataPrepare['Title']=dataPrepare['Title'].fillna(0)	1	1
"df_test[""len_name""]=namelen"	1	1
data_df['AgeBin_Code'] = label.fit_transform(data_df['AgeBin'])	1	1
"dt_train[""Fare_cat""] = pd.cut(dt_train.Fare, intervals, labels=cats)"	1	1
"train_data.drop([""PassengerId"", ""Name"", ""Ticket"", ""Family"", ""Parch"", ""SibSp""], axis=1)"	1	1
data.Cabin.astype(str).str[0]	1	1
"df[""Title""] = df[""Title""].astype(""category"")"	1	1
dataset.hist(column='Age')	1	1
data2['Random_Score'] = 0 #assume prediction wrong	1	1
full_data.loc[train.index,:].corr(),	1	1
"df.loc[df[""Ticket""]==""PC 17608"", ""CabinSide""] = ""Starboard"""	1	1
X.drop(X.columns[j], axis=1)	1	1
dset['Familly_Size'] = dset.SibSp + dset.Parch + 1	1	1
"data[""familysize""] = data[""SibSp""] + data[""Parch""]"	1	1
train['AgeGroup'] = '0'	1	1
all_data.loc[all_data['Survived'].notnull(),:]['Survived']	1	1
x_test[['Fare']] = imr.fit_transform(x_test[['Fare']])	1	1
scaler_x.transform(X_test)	1	1
X_full['Parch']= full['Parch']	1	1
"train_df[[""Parch"",""Survived""]].groupby(['Parch'],as_index=False).mean().sort_values(by='Survived',ascending=False)"	1	1
train.info(), test.info()	1	1
Pclass.hist()	1	1
X_final_test.set_index('PassengerId')	1	1
"train_Pre[""Survived""]"	1	1
df_train.embarked.replace(['S', 'C', 'Q'],['Southampton', 'Cherbourg', 'Queenstown'])	1	1
data.iloc[:,2:6]	1	1
np.where(train_data.Survived == 0)	1	1
dataset['Initial'] = dataset['Initial'].replace('Ms', 'Miss')	1	1
err.append(y[i]*math.log(h_th+0.0001)+(1-y[i])*(math.log(1.0001-h_th)))	1	1
train['Survival_Predict']=0	1	1
test.drop(['Name','SibSp','Parch','Ticket','Cabin','CategoricalFare','CategoricalAge'], axis = 1)	1	1
df['SibSp'] = df0['SibSp'].apply(lambda e: -1 if pd.isnull(e) else e)	1	1
"df[""Age_categories""] = pd.cut(df['Age'],cut_points,labels=label_names)"	1	1
df_test.Sex.replace(to_replace = dict(male = 1, female = 0), inplace = True)	1	1
df2['safe_cabin']=[1 if i in ['B','C','D','E'] else 0 for i in df2.Cabin]	1	1
"XX[""SibSpBin""]=X[""SibSp""]>0"	1	1
"data[[""Name"",""Survived""]].corr()"	1	1
"tmp_test.drop(""Age"", axis = 1)"	1	1
data1.loc[data1['Embarked'] == 'C', 'Embarked'] = 1	1	1
"titanic_train.drop(columns=[""PassengerId"",""Name"",""Ticket""],inplace=True)"	1	1
train_df.drop(['Name', 'PassengerId'], axis=1, inplace=True)	1	1
"df_test.drop([""Survived"", ""PassengerId""], axis=1)"	1	1
train['is_female'] = train.Sex.apply(lambda sex: 1 if sex == 'female' else 0)	1	1
"dataset.drop(labels=[""Name""], axis=1, inplace=True)"	1	1
"tot[""FamilySize""] = tot.SibSp + tot.Parch + 1"	1	1
Xtrf_df['Age'] = Xtrf_df['Age'].fillna(Xtrf_df['Age'].median())	1	1
input_df['Age'] = input_df[['Age', 'Pclass']].apply(impute_age, axis=1)	1	1
"tmp[""Age""].fillna(tmp[""Age""].median(), inplace=True)"	1	1
history_acc_train.append(temp_acc)	1	1
"train_ori.loc[(train_ori[""Age""] >= 15) & (train_ori[""Age""] < 18),""Age""] = 1"	1	1
std.transform(test)	1	1
pre.to_csv('pre1.csv')	1	1
"related_people.loc[related_people[""PassengerId""]==540,""RGroup""]=""Frolicher_M"""	1	1
test[['PassengerId','Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]	1	1
dataframe['Title'] = title	1	1
data.loc[(data.passenger_fare>26.549) & (data.passenger_fare<=26.55) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>26.549) & (data.passenger_fare<=26.55) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
test.drop(['train', target, 'Pclass'], axis=1, inplace=True)	1	1
Y_tot.head(ntr)	1	1
test.loc[152, 'Fare'] = fare_mean	1	1
Sex.apply(lambda x: 'Mr' if (x=='male') else 'Mrs')	1	1
test_df['Title'] == 'Mr'	1	1
test_data_clean['PassengerId']	1	1
"test[""Sex""] = pd.get_dummies(test[""Sex""])['female']"	1	1
train.Embarked.fillna(train.Embarked.value_counts().index[0])	1	1
titanic_test.drop(labels = ['Cabin', 'Fare'], axis = 1)	1	1
df['Cabin_num']	1	1
full.loc[(full['Fare'] > 3.119) & (full['Fare'] <= 4.679), 'Fare']   = 3	1	1
train.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Embarked'], axis=1, inplace=True)	1	1
train_Predict['Age'] = age_partition['Partition']	1	1
train.loc[0:train_n, :]	1	1
ax[0].set_title('Histogram of Age (survived)')	1	1
titanic_train['Age_Child']=(titanic_train['Age']<=18).astype(int)	1	1
train.isin(combinator).sum(axis=1)	1	1
dft['Sex']	1	1
"train['Embarked']=train[""Embarked""].fillna(""S"")"	1	1
test['FamilySize']=test['FamilySize'].apply(replace3)	1	1
"df_titanic.loc[df_titanic[""Age""]<=16,""Sex""]=""Child"""	1	1
df_train[['Survived', 'Title', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'IsAlone']]	1	1
raw_data['FamilySize'] = raw_data.apply (lambda row: row['SibSp']+row['Parch'], axis=1)	1	1
"test.Embarked.fillna(""S"")"	1	1
train_df['Title_num'],T=train_df['Title'].factorize()	1	1
family['Family_Small'] = family['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)	1	1
dfcopy.SibSp.isnull().sum() == 0	1	1
df.drop(labels='Cabin', axis='columns', inplace=True)	1	1
df_train.median()	1	1
categorical_feature.append(df.columns[i])	1	1
in ['Sex','Embarked']:	1	1
df['Survived'].sum() / len(df)	1	1
df['Embarked'].unique()	1	1
train['fare_cat']=pd.qcut(train.Fare,3,labels=['f_a','f_b','f_c'])	1	1
joined.loc[:891, num_features].astype(np.float32).values,	1	1
"titanic_test.loc[titanic_test[""Sex""] == ""female"",""Sex""] = 1"	1	1
test.ix[:, ncol] = imputer.transform(test.ix[:, ncol])	1	1
X_train.drop('PassengerId',axis=1,inplace=True)	1	1
data.loc[(data.Room > 40) & (data.Room <= 80), 'RoomBand'] = 3	1	1
"plt.hist(mrs['Age'].dropna().values, histtype=""step"",color=""blue"",bins=np.arange(0,81,1))"	1	1
feats.sort_values(by='importance', ascending=True, inplace=True)	1	1
df['Sex'] = df['Sex'].map({'male':1,'female':0})	1	1
training_set.pivot_table('Survived', parch_intervals, 'Sex').plot(kind='bar')	1	1
train_data.head(1)	1	1
Y.iloc[train_index], Y.iloc[test_index]	1	1
train.Age.plot.hist(bins = 50)	1	1
df.loc[passengerId]	1	1
num_pipe.append(('name_len', Name_len))	1	1
train_df.loc[train_df['Age']<=16,'Age_band']=0	1	1
"train_df.drop([""PassengerId"", ""Name""], axis=1, inplace=True)"	1	1
"train.loc[train[""Embarked""] == ""C"", ""emk_c""] = ""2"""	1	1
X.iloc[:, self.ids].items():	1	1
survived.copy()	1	1
"df['Embarked_Class'] = df[""Embarked""].map(dict(zip((""S"", ""C"", ""Q""), (0, 1, 2))))"	1	1
df_train['Age'].fillna(age_median, inplace=True)	1	1
features['Sex'] = features['Sex'].map(sex_map)	1	1
test_df['kisibasiucret']=test_df['Fare']/(test_df['aile_boyut']+1)	1	1
test_df['Fare'].apply(lambda x: 1 if (x > 14.454 and x <= 31.0) else 0)	1	1
names.loc[(names['mme'])==1,'mme'] = 0	1	1
train.groupby(['Embarked'])	1	1
np.shape(X_scale_test)	1	1
test_df['Embarked'] = test_df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
dataset.loc[ (dataset['FamilySize'] <= 4) & (dataset['FamilySize'] > 1), 'FamilyClass'] = 1	1	1
app_train['Age'] = poly_features	1	1
df_null['Total_values'] = total_count	1	1
train_df.sort_values(by='Fare').describe(percentiles=[.1, .2, .3, .4, .5, .6, .7, .8, .9, .99])	1	1
np.mean(val_scores, axis = 1)	1	1
results.append(benchmark(clf))	1	1
"test.loc[test[""Sex""] == ""male"", ""Sex""] = 0 #Replaces all male values with 0"	1	1
"test_df.drop([""Cabin"", ""Ticket""], axis=1)"	1	1
train.groupby('Initial')['Age'].mean() #lets check the average age by Initials	1	1
train.loc[train['Cabin'] != 'None', 'HasCabin'] = 1	1	1
df['Ticket'] = df['Ticket'].map(lambda x:x.replace('/',''))	1	1
dat.drop(['Name', 'Ticket'], axis=1, inplace=True)	1	1
transformed_df['Cabin_C'] = cabin.Cabin_C	1	1
"titanic_train.loc[titanic_train[""Embarked""] =='S',""Embarked""] = 0"	1	1
"train_df[""age_category""] = pd.cut(train_df[""age""], 6)"	1	1
test_set.drop('Age', axis=1)	1	1
cost_list.append(cost)	1	1
result.to_csv(path_or_buf='neural_network_submittion.csv', index = False, header = True)	1	1
input.fillna(input.mean())	1	1
ax2.spines['top'].set_visible(False)	1	1
df['Title'] = df.Name.apply(lambda x: x.split()[1][:-1])	1	1
dataset.loc[ (dataset.Age.isnull()) & (dataset.Title == 4), 'Age']=10 #masters are children, not average male age.	1	1
"df['Cabin_deck'] = df['Cabin'].apply(lambda x: x.split("" "")[-1][0] if x != ""No"" else ""No"")"	1	1
titanic_test['Cabin'] = titanic_test['Cabin'].map(lambda x: diction_value(x, d))	1	1
scaler.transform(features_test)	1	1
"train.drop([""Survived""],axis = 1)"	1	1
"testdata[""Embarked""] = testdata[""Embarked""].fillna(0)"	1	1
train['Gender'] = (train['Sex'] == 'female').astype(int)	1	1
combined_features['Age']-=mean	1	1
test_df['Age'].dropna().median()	1	1
train_df['Name'].head(5)	1	1
train_data['Age'].fillna(mean_value_age, inplace=True)	1	1
test['Title'] = test['Title'].apply(lambda x: 'Misc' if title_names_test.loc[x] == True else x)	1	1
"dataset[""Title""]=dataset[""Title""].replace([5,6,15,17],5)"	1	1
"train_data.boxplot(column=""Age"",by=""Survived"")"	1	1
"submission[""Survived""] = np.argmax(final_prediction, 1)"	1	1
dataset['Ticket'].head(10)	1	1
app_test['Fare'].mean()	1	1
df.Sex.isnull().sum(axis=0)	1	1
data.loc[(data['Fare']>21.679)&(data['Fare']<=39.688),'Fare_cat']=3	1	1
"data['FamSize'] = data['SibSp'] + data['Parch'] # New feature ""FamSize"""	1	1
"Bagging_result[2][""best_model""]"	1	1
submission['Cabin_numerical'] = submission['Cabin_numerical'].astype('float')	1	1
"train_df[[""SibSp"", ""Survived""]].groupby([""SibSp""], as_index=False).mean().sort_values(by = ""Survived"", ascending = False).plot.bar(ax = ax[0], title = ""Survive rate by nr of SibSp"")"	1	1
dataset['Embarked'] = dataset['Embarked'].map({'S':1 , 'C':2, 'Q':3}).astype(int)	1	1
"titanic_test[""Fare""]= titanic_test[""Fare""].fillna(titanic_test[""Fare""].median())"	1	1
Embarked.isnull()	1	1
df['LastName'],df['FirstName'] = df['Name'].str.split(',', 1).str	1	1
test.join(gender_oh_test)	1	1
model.add(Dense(features.shape[1], input_shape=(features.shape[1], ), activation='linear' ))	1	1
"a.loc[(a[""Title""] == ""Ms"") & (a.Age.isnull()), [""Age""]] = ms_age"	1	1
model.add(Dense(16, activation='tanh'))	1	1
df_test['Age'] = df_test['Age'].fillna(age_mean)	1	1
corr_idx.corr()	1	1
"test[""family_size""] = float(""NaN"")"	1	1
pre_features2['Sex'].replace({'male' : 1, 'female': 0}, inplace=True)	1	1
"dfTest[""Fare""].fillna(dfTrain[""Fare""].median(), inplace=True)"	1	1
train['Fare'].iplot(kind='hist', bins=30)	1	1
in ['Pclass','Sex','SibSp','Parch','Embarked']:	1	1
"final_sub1.to_csv(""Sub2.csv"", index=False)"	1	1
"AdaBoost.to_csv(""AdaBoost.csv"", index=False)"	1	1
ax2[1].set_yticks(range(0,110,10))	1	1
df.tail(10)	1	1
df_guess.median()	1	1
FeatureDF.replace({'Sex':sex_d}, inplace=True)	1	1
df_copy[['Pclass', 'Parch', 'Age']].astype(np.float32)	1	1
"train[""Fare_Band""]=pd.qcut(train[""Fare""],4)"	1	1
df_test['Pclass'] = df_test['Pclass'].astype('category')	1	1
test['Fare_cut']	1	1
"StackingSubmission.to_csv(""myStackingSubmission.csv"", index=False)"	1	1
xtest.reset_index(inplace=True, drop=True)	1	1
df_test.drop(['SibSp'], axis = 1)	1	1
dataset.Name.head(5)	1	1
dftrain['Age'].dropna().astype(int).hist(bins=70, ax=axis1)	1	1
train_data[['SibSp', 'Parch', 'Survived']].copy()	1	1
combined['Sex'] = combined['Sex'].map({'male':1, 'female': 0})	1	1
"Test.drop([""Name"",""Ticket"",""Embarked"",""Cabin""],inplace=True,axis=1)"	1	1
features_imp['importance'] = my_forest.feature_importances_	1	1
model.transform(X_test)	1	1
test['Title'].replace(['Mme'], 'Mrs', inplace = True)	1	1
pd.merge(test_df, imputed_frame[['PassengerId', 'Age']], on='PassengerId')	1	1
train_df.Fare.hist(bins = 30, ax=axes[0])	1	1
all_data[['AgeRange', 'Survived']].groupby(['AgeRange'], as_index=False).mean().sort_values(by='AgeRange', ascending=True)	1	1
submission['Survived']=output.iloc[0].values	1	1
df_temp.loc[(df_temp['Has_Cabin']==cabin),'Count'] = df_temp[(df_temp['Has_Cabin']==cabin)]['Count']/int(title_count[cabin_list.index(cabin)])	1	1
test_df['Survived'] = test_df['Sex_female'] == 1	1	1
loss_trace.append(temp_loss)	1	1
"_df[""_cabin""]    = _df.cabin.apply(lambda i : [str(i), ])"	1	1
combine.iloc[train.shape[0]: ,:]	1	1
"df[""Title""] = df[""Title""].replace('Mlle', 'Miss')"	1	1
"train.loc[(train[""Name""]==""Others"")&(train[""Age""].isnull()), ""Age""] = train[""Age""].mean()"	1	1
test['HasFamily'] = 0	1	1
axes[1].set_title('% of Parents/Children', fontsize=15)	1	1
train.loc[(train['Embarked'].isnull()), 'Embarked'] = mostPopularPort	1	1
"df.loc[ (df[""Age""] > 32) & (df[""Age""] <= 48), ""Age"" ] = 3"	1	1
data_train_all['Age'] = data_train_all['Age'].fillna(mean_age)	1	1
"bestModel[""classifier""] = clf.best_estimator_"	1	1
"test_df.drop(""PassengerId"", axis=1).fillna(np.nan)"	1	1
full_df.loc[:,['source','Survived','Age','Fare','Embarked','Cabin','Family','Family_Single','Family_Small','Family_Large','Pclass','Sex','Title','Ticket']]	1	1
features['PC'] = (full['Ticket_short'] == 'PC').astype(int)	1	1
"result.to_csv(""Titanic_result.csv"", index=False)"	1	1
df['Embarked'] = df['Embarked'].map( {'C': 1, 'S': 2,'Q': 3} )	1	1
X_train['log_fare'] = X_train.log_fare.apply(lambda x: (x - log_fare_mean) / log_fare_std)	1	1
"df_train[""norm_family_size""].hist()"	1	1
"pred[[""PassengerId"",""Survived""]]"	1	1
"test.loc[test[""FamilySize""]==1, ""Single""] = True"	1	1
dataframe['Family'].loc[dataframe['Family'] > 0] = 1	1	1
test_one['Survived'] = 0	1	1
"family_in_trian.pivot_table(index=[""immediate_family""],values='Survived').copy()"	1	1
"data_test['Family'] =  data_test[""Parch""] + data_test[""SibSp""]"	1	1
gender_data.info()	1	1
train_df.groupby('Pclass')['Fare'].median()	1	1
df['Age'].isna().sum() # no more missing value	1	1
data_train_h2o['Survived']=data_train_h2o['Survived'].asfactor()    ## Converting Target Variable as Factor	1	1
test_df['Title'] == 'Mrs'	1	1
titanic.loc[titanic['Age']<=19.00,'NAge']=0	1	1
df_final.sample(5)	1	1
X_test.drop('Sex_female',1)	1	1
df_is.plot.hist(ax=ax, alpha=.3, legend=False, color=colors[i_s], bins=20)	1	1
test['Ticket'] = encoder.fit_transform(test['Ticket'])	1	1
data_test_all.drop(columns=['SibSp','Parch'],inplace=True)	1	1
fullData.drop(['PassengerId'], axis=1)	1	1
"train[[""Name"", ""Age""]]"	1	1
"train_set[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean()"	1	1
train.columns.values:	1	1
best_params['optim'],	1	1
dfTrain['Survived'].groupby(dfTrain['Ticket_Characters']).mean()	1	1
test.loc[test['Embarked'] == 'C', 'Embarked'] = 0	1	1
titanic_test_data.Age.fillna(titanic_test_data.Age.mean(), inplace=True)	1	1
maiden_names.rename('MaidenName')	1	1
df.loc[((df.Sex == 2) & (df.IsAlone == 1)) , 'Se_IA'] = 4 #Female without family	1	1
training_data.drop(labels=['SibSp', 'Parch'], axis=1, inplace=True)	1	1
"dat[""tick_SOTON""] =  dat['Ticket'].map(lambda s: 1 if re.search(""SOTON"",s)!=None else 0)"	1	1
df['Survived'][df['Sex'] == 'male'][df['filled_ages'] < 18][df['Pclass'] == 3].value_counts()	1	1
df['Pclass'].values.reshape(-1, 1),	1	1
titanic['Age_bin'] = titanic['Age_bin'].replace(labels)	1	1
"ax5.hist(train['Fare'], normed=1, alpha=0.75, label=""Fare"")"	1	1
"submission.to_csv(""dt_submission.csv"", index=False)"	1	1
data['Cabin3thclass']= data.apply(cabin3thclass,axis=1)	1	1
df_test['Sex'] = pd.to_numeric(df_test['Sex'], errors='coerce')	1	1
dataset['Cabin_Class'] = (dataset.cabinRec+1)*dataset.Pclass	1	1
target_columns.append('Age')	1	1
WholeDataSet['Embarked'] = WholeDataSet['Embarked'].fillna('S') # most the data is S and the missing data is not too much.	1	1
"axes[0].set_title(f""{feature} vs Frequency"")"	1	1
"test_data[""Ticket""].isnull().sum()"	1	1
train_data.loc[(train_data['Age']>=45) & (train_data['Age']<55),'Age'] = 3	1	1
classifiers.append(lr)	1	1
SScaler.transform(test_X)	1	1
"data['Survived'].value_counts().plot.pie(explode=[0,0.1], autopct=""%1.1f%%"", ax=ax[0], shadow=True)"	1	1
df_all['Family_name'] = df_all['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[1]	1	1
X_test['log_fare'] = X_test.log_fare.apply(lambda x: (x - log_fare_mean) / log_fare_std)	1	1
trainOrg['family'] = np.where(trainOrg['famSize']==0, 'N', 'Y')	1	1
df['Family_size'] = 1 + df.Parch + df.SibSp	1	1
"titanic_train_dataframe[""NormalizedAge""] = titanic_train_dataframe[""Age""]"	1	1
train.at[i, 'Sex'] == 'male':	1	1
testing_data.reset_index(drop=True)	1	1
ship['High_Fare'] = [1 if x > 50 else 0 for x in ship['Fare']]	1	1
np.empty((NFOLDS, o_x_test.shape[0]))	1	1
leg.legendHandles[1].set_alpha(1)	1	1
"count[[""Survived"", ""nFamily"", ""PassengerId""]]"	1	1
dfTrain['FamilySize'].value_counts()	1	1
results.sort_values(by='accuracy',ascending=False)	1	1
train_test['NameLen'] = train_test.Name.apply(lambda x : len(x))	1	1
ax[0].legend(['1', '2', '3'])	1	1
pd.isnull(string) else str(string)[0]	1	1
"val_df[""S""] = val_df.Embarked.apply(lambda l: np.where(l==0, 1, 0))"	1	1
dataset.loc[dataset['Survived'] == 1, 'FamilyCount'].value_counts()	1	1
tmp_scaled.assign(Embarked_Q=tmp['Embarked_Q'])	1	1
"full.groupby(full[""Age""]).mean()[""Survived""]"	1	1
"train['Title1'] = train['Title1'].str.split(""."", expand=True)[0]"	1	1
train.drop(['AgeBins'], axis = 1)	1	1
emb.isnull().sum()	1	1
tt.drop(['Name','PassengerId','Surname','Age','Fare','Ticket','Cabin','Embarked','Sex','FareGroup','AgeGroup','SibSp','Parch','TicketCount','Deck','FamilySize','Title'],axis=1)	1	1
"Adaboost_result[1][""best_score""],"	1	1
cv_results.sort_values(['Accuracy'],ascending=False).reset_index(drop=True)	1	1
data['Title'].replace('Master.', 1, inplace=True)	1	1
full_train_set.loc[full_train_set['Age'] >= 18]	1	1
test_df['Title'] = [x.split(', ')[1].split('. ')[0] for x in test_df['Name']]	1	1
titanic_df['Single'] = titanic_df['Family'].map(lambda s: 1 if s == 1 else 0)	1	1
df.loc[(df['Age'] >= 30.263) & (df['Age'] < 40.21), 'Age'] = 3	1	1
"test.loc[(test[""FamilySize""]>1)&(test[""FamilySize""]<5), ""Nuclear""] = True"	1	1
train.describe(include=[np.object])	1	1
params['clf_svc'] = grid_search.best_estimator_	1	1
data_train.drop(['Fare'], axis = 1)	1	1
"df_train[""SibSp""].plot(bw_method=1, kind='density', color='teal')"	1	1
titanic_train_df['Title'] = le.fit_transform(titanic_train_df['Title'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Rare': 4}).astype(str))	1	1
gbc_rfecv.transform(gbc_rfecv_train)	1	1
train.Age.mean(), train.Age.median()	1	1
"datacv.set_value(i, 'Name', ""Dr"")"	1	1
test.loc[:,'Age'].fillna(test.loc[:,'Age'].mean(),inplace=True)	1	1
drop_elementsNMD.append('isCabinG')	1	1
trainPCA2['1'] = trainPCA['Pclass2']	1	1
axes[1].set_xlim(0,550)	1	1
pdf.select_dtypes(include=[np.number]).isnull().astype(int).sum()	1	1
train_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1)	1	1
fullfinal['Family_Survival'] = full.Family_Survival	1	1
train_df_imputed['FamilySizeCategory'] = train_df_imputed['FamilySize'].map(size_categorize)	1	1
df_1.info()	1	1
np.sum(X.astype(np.float64), axis=1).values.reshape(-1, 1)	1	1
"all_data['LastName'] = """""	1	1
"titanic_test_data[""Age""] = titanic_test_data[""Age""].fillna(titanic_training_data[""Age""].median())"	1	1
combined_modified.info()	1	1
data.loc[data['FamilySize'] == 1, 'Family'] = 1	1	1
test_data.drop(['PassengerId', 'Ticket', 'Cabin', 'Name'], inplace=True, axis=1)	1	1
"total[""Ticket""] = Ticket"	1	1
test_df['Age']= test_df['Age'].astype(int)	1	1
"test.loc[test[""Parch""] == 1, ""pc_c""] = ""1"""	1	1
"dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30),""Fare""] = 1"	1	1
final_test.insert(0, 'Ones', 1)	1	1
"data[""Title""],"	1	1
model.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu', input_dim = 8))	1	1
x.mode() if len(x) > 2 else np.array(x)	1	1
data_replaced_ages.head()	1	1
"titanic_training_data[""Name""].apply(get_title)"	1	1
"train.at[87,""Age""]=20"	1	1
"Train_data[""Embarked""] = Train_data[""Embarked""].fillna(""S"")"	1	1
pd.DataFrame.from_dict(data = vol, orient='index').plot(kind='bar', legend=False)	1	1
data.parent_alone.loc[data.PassengerId==119] = 0	1	1
full_df['Gender'] = full_df['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
df.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass.*|Mother|Child|Family|Title')	1	1
np.sum(test_sample >= emp_val) / len(test_sample)	1	1
transformed_df['Cabin_F'] = cabin.Cabin_F	1	1
train_df.loc[train_df['Fare'] > 500]	1	1
"Ticket.append(i.replace(""."", """").replace(""/"", """").strip().split(' ')[0])  # Take prefix"	1	1
train_orj.head()	1	1
training_set.drop(['PassengerId','Name','Ticket','Survived'], axis=1)	1	1
trim_data['Age'].std()	1	1
allset.drop(['Parch'],axis=1)	1	1
titanic_train_dataset.head(n=5)	1	1
df.drop(columns=['SibSp', 'Parch'], inplace=True)	1	1
df.replace({'Title': mapping}, inplace=True)	1	1
df_test['FarePPBin'] = pd.cut(df_test['FarePP'], bins)	1	1
dataset['Fare'].fillna(dataset['Fare'].mean(), inplace = True)	1	1
"train.drop(""LoneChild"", 1)"	1	1
"x_train.replace({""Sex"": repCol3, ""Embarked"": repCol8} , inplace = True )"	1	1
X_val_filled[['Age', 'Sex_female', 'Pclass', 'Fare']]	1	1
"train.replace([""male"",""female""],[0,1])"	1	1
train_clean.sample(10)	1	1
"train.loc[train[""Parch""] == 0, ""pc_c""] = ""0"""	1	1
test['Embarked'] = test['Embarked'].fillna(test['Embarked'].value_counts().index[0])	1	1
iloc[0:5]	1	1
"train.loc[train[""Embarked""]=='Q', ""Embarked_Q""] = True"	1	1
titanic_df['Alone'].loc[titanic_df['Alone']>0] = 'With Family'	1	1
"df_train.loc[((df_train[""title""]==""master."") & (df_train[""Age""].isnull()==True)).tolist(),'Age']=avg_master"	1	1
train.groupby(['Sex'])['Survived'].mean()	1	1
train_data['Embark_C'] = Embark_dummy['C']	1	1
train.drop(['Name'],axis=1,inplace=True)	1	1
DataFile.groupby('Ticket'):	1	1
df_test['AgeBinCode'].unique()	1	1
clf.cv_results_['std_test_AUC']	1	1
df_test.loc[ (df_test.Sex == 'female'), 'Survived'] = 1	1	1
dset.loc[int(i), 'FamCode'] = families[i]	1	1
titanic_train_df.columns.values	1	1
X['Child'] = np.where(X['Age'] <= 13, 1, 0)	1	1
"train_clean[[""Survived"", ""Sex""]].groupby(['Sex'], as_index=False).count()#.mean().sort_values(by='Survived',ascending=False)"	1	1
train_df[['Family','Survived']].groupby(['Family'], as_index=False).mean()	1	1
X_test['Age'].dropna().median()	1	1
df['Ticket_Lett'] = df['Ticket_Lett'].apply(lambda x: str(x))	1	1
"test_df[""Embarked""]=test_df[""Embarked""].replace(""S"",0).replace(""Q"",2).replace(""C"",1)"	1	1
"training.at[count, ""Title""] = "" Other"""	1	1
train['SibsSp'] = train.apply(lambda row: row['SibSp'] > 0, axis=1)	1	1
"testdataframe[""PassengerId""],"	1	1
ax[0].set_title('Family vs Survived')	1	1
df_test['IsFemale'] = (df_test['Sex'] == 'female').astype(int)	1	1
submit.head(n=20)	1	1
np.min(support)	1	1
ax[0].set_title('Family Sizs vs Title')	1	1
"submission.to_csv(""prediction.csv"", index=False)"	1	1
np.sum(y_hat - y)	1	1
test['Pclass'][x]	1	1
comb_data.select_dtypes(include=['float', 'int64']).columns	1	1
training_data['Embarked'] = training_data['Embarked'].fillna('S')	1	1
comb_data.hist(bins=80, figsize=(27,6))	1	1
"titanic_train_dataframe.drop([""Name""], axis=1)"	1	1
map_table_age_df.iloc[5:10, 2] = [4, 20, 31, 30, 41]	1	1
TitanicSubmission['Type'] = 'Test'	1	1
testOrg['Fare'] = testOrg['Fare'].fillna(testOrg['Fare'].median())	1	1
titanic.isnull().sum() - titanic_test.isnull().sum()	1	1
"train.loc[(train[""Fare""] >= -0.001) & (train[""Fare""] < 7.896),""Fare""] = 0"	1	1
df.loc[idxs, new] = 0	1	1
df['Title'] = df['Name'].str.extract(' ([A-Za-z]+)\.', expand=True)	1	1
"df[""Child""] = df[""Child""].astype(""category"")"	1	1
df.drop('Cabin', axis=1, inplace=True, errors='ignore')	1	1
test.ix[:, test.columns != column].values	1	1
test_x.isnull().sum()	1	1
train.fillna(method='ffill')	1	1
titanic_train_data.Sex.fillna('0', inplace=True)	1	1
Y_train.shape[0]  # n_y : output size	1	1
df_combined.shape	1	1
df_train['FamilySize']=df_train['SibSp']+ df_train['Parch']+1	1	1
"df_test[""Cabin""].fillna(df_test.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	1	1
train_df[['Survived']]	1	1
group_counts['Diff'] = group_counts['Pred_survived']-group_counts['Survived']	1	1
ax[0].set_title('Age')	1	1
plt.hist(data['Age'].loc[data['Survived'] == 1], color='g', label='Survived')	1	1
acc_train_cv_summary.loc[clf_name, 'raw'] = np.mean(scores_clf['train_' + clf_name])	1	1
data_train.dropna(axis = 'columns')	1	1
df_train[['Cabin','Survived']].groupby('Cabin',as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
data_copy.loc[data_copy['Sex']=='female','Sex']=0	1	1
submission['Survived'] = predictions.astype(int)	1	1
train_cl.dropna().loc[:, Xcol + ['Age']]	1	1
titanic.loc[titanic['Survived'].isnull()== True, 'Survived']= predict_t	1	1
train_df.fillna(-999, inplace=True)	1	1
X_train.columns.values,	1	1
na_cols.append([i, data[i].isnull().sum(), round( data[i].isnull().sum() / len(data[i]) * 100, 4)])	1	1
comb_data[['Ticket', 'Fare']].groupby(['Ticket'], as_index=False).count().sort_values(by='Fare', ascending=False).head()	1	1
frame.to_csv('myfirstsubmission.csv', index=False)	1	1
data['harborB'] = data.apply(getembarkedB,axis=1)	1	1
dfTrain['Sex'].value_counts(normalize=True)	1	1
train_cl2.set_value(i, 'Age', randreg)	1	1
data_test_csv.loc[(data_test_csv.Fare.isnull()), 'Fare' ] = 0  #Set 0 to where Fare is null	1	1
"SVC_result[0][""best_model""],"	1	1
dataset.loc[dataset.Name.str.contains('Mr'), 'Age'].mean()	1	1
"train_df.drop([""FamilySize""], axis=1, inplace=True)"	1	1
titanic_data.loc[ titanic_data['Age'] <= 16, 'Age'] = 0	1	1
df_train_quantify.head()	1	1
"sol.to_csv(""tree.csv"", index=None)"	1	1
train_set.Age.isnull().sum()	1	1
X_test.drop('PassengerId',inplace=True,axis = 1)	1	1
"df_train_tmp.loc[:, ""Survived""]"	1	1
train_df.rename(columns = {'Title': 'Person'}, inplace=True)	1	1
"train[""Cabin""]"	1	1
titanic_test_data.loc[titanic_test_data.Embarked == 'S', 'Embarked'] = 3	1	1
test_data.drop(drop_elements, axis=1)	1	1
train['SibSp'] + train['Parch'] + 1	1	1
"dataset_train[""Survived""].value_counts()"	1	1
"train[""Age""][np.isnan(train[""Age""])] = train_rand"	1	1
"X_test.drop(""Surname"", axis = 1)"	1	1
s_sib.reindex(d_sib.index).fillna(0.0)	1	1
train_data.loc[mastermask, 'Age'] = 3.5	1	1
Accuracy_df.sort_values(by='Accuracy',ascending=False)	1	1
df_train.drop(['Cabin','Ticket'], axis=1)	1	1
X_test.drop(['Cabin', 'Name', 'Ticket', 'PassengerId'], axis=1, inplace=True)	1	1
train_cl.dtypes.reset_index()	1	1
whole.set_index('Id')	1	1
k['train']= train.isnull().sum()	1	1
"df[""Embarked""].value_counts().plot(kind=""pie"")"	1	1
plt.hist(data[column], weights=np.ones(len(data)) / len(data))	1	1
df_submission.info()	1	1
test_x[['Age']]	1	1
results_forest.append(forest.score(X_test,y_test))	1	1
"df[""Age""] = feature_normalize(df[""Age""])"	1	1
data.parent_alone.loc[data.PassengerId==333] = 0	1	1
data.Age.tail()	1	1
df_train['IsAlone'] = 0	1	1
df.loc[df['Title'] == 'Dr.', 'Age'] = df.loc[df['Title'] == 'Dr.', 'Age'].fillna(mean)	1	1
test_data.Age.fillna(test_data.Age.median())	1	1
"titanic_test.drop([""PassengerId"", ""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Age"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked"", ""cabin_na"", ""age_range""], axis= 1)"	1	1
group_survival['adj_dead'] = group_survival['group_dead'] - group_survival['Survived'].apply(lambda x: 1 if x == 0 else 0)	1	1
"train[""Embarked""] = labelEncoder_X_2.fit_transform(train[""Embarked""])"	1	1
train.Sex.apply(lambda l: sex_map[l])	1	1
"related_people.loc[related_people[""PassengerId""]==969,""RGroup""]=""Lamson_M"""	1	1
dataset['Title'] = dataset['Title'].replace('Capt', 'Officer')	1	1
classifier.add(Dense(output_dim=4,init='uniform',activation='relu'))	1	1
data.surname_Harper.astype('category')	1	1
pipelines.append(('ScaledKNN', Pipeline([('Scaler', StandardScaler()), ('KNN', KNeighborsClassifier())])))	1	1
merged.loc[(merged['Age']>32)&(merged['Age']<=48),'Age_band']=2	1	1
train_df['Family_Size_D'] = train_df['Family_Size'].apply(lambda size: conv_discrete(size))	1	1
"test[""FamilleMember""] = test[""FamilleMember""].map({0:'0',1:'1',2:'2',3:'3',4:'>4',5:'>4',6:'>4',7:'>4',10:'>4'})"	1	1
train['isChild'] = train.Age <= 15	1	1
test.drop(['Age_Cat'],axis=1,inplace=True)	1	1
train['Age'][train['Survived'] == 0]	1	1
test4['Sex'] = le.fit_transform(test4['Sex'])	1	1
inputds2.values	1	1
data.drop(['Name','PassengerId','Cabin','Ticket'],axis =1)	1	1
test['SexCategorical'] = test['SexCategorical'].astype(int)	1	1
test_p['Family'].loc[test_p['Family'] > 0] = 1	1	1
data['Embarked']=embarkedEncoder.fit_transform(data['Embarked'].transform(lambda e: e if isinstance(e, str) else 'NA'))	1	1
"test[""fare_c""] = pd.qcut(test[""Fare""], 4, labels = [""1"", ""2"", ""3"",""4""])"	1	1
X_one_hot.head(50)	1	1
train_drop.Sex.apply(encodeSex)	1	1
test['fare_T'] = raw_test['fare_T']	1	1
"test_dataset.drop(""PassengerId"",axis=1).copy().as_matrix()"	1	1
df['Class1'] = np.where(df['Pclass']==1, 1, 0)	1	1
minS.append(g.Age.min())	1	1
df_full.loc[mask_train].corr()	1	1
df_gender.head()	1	1
train.select_dtypes(int).nunique()	1	1
train['title'] = encoder.fit_transform(train['title'])	1	1
row['Sex'] == 'male' and row['Age'] < 16 and row['Pclass'] != 3:	1	1
plt.hist(x, bins=10)	1	1
"test.loc[test[""Age""].isnull(),""Age""] = test[""Age""].mode()[0]"	1	1
data_combined.head(891).drop(['PassengerId'], axis=1)	1	1
df['Sex_female'][df['Sex_female'] == 1].count()	1	1
sub_vot2['PassengerId'] = df_test['PassengerId']	1	1
data_train['FareBand'] = pd.qcut(data_train['Fare'], 7, precision=3)	1	1
train['Age'][(train['Survived'] == 0) & (train['Age'].notnull())],	1	1
train_df['Embarked'] = train_df['PassengerId'].apply(lambda x: repl_null_embarked(x))	1	1
"ALL_DATA[""Name""].head()"	1	1
titanic.drop('Cabin',axis=1)	1	1
lr_oof_train_l1f1.astype(int),ada_oof_train_l1f1.astype(int),	1	1
all_data[['FareRange', 'Survived']].groupby(['FareRange'], as_index = False).mean().sort_values(by = 'FareRange', ascending = True)	1	1
"df[""Elder""] = df[""Elder""].astype(""category"")"	1	1
"titanic_df.groupby([""Pclass"",""Sex""]).mean()[""Survived""][2].plot.bar(ax=axes[1] )"	1	1
input_test.head()	1	1
train_df.combine_first(train_df.set_index('Title').Age.fillna(title_age_df.set_index('Title').Age).reset_index())	1	1
"train.loc[train[""Embarked""]=='C', ""Embarked_C""] = True"	1	1
dataset['cabinRec']=dataset.Cabin.isnull().map({False:0,True:1})	1	1
df['estimated_age'] = df.Age.apply(lambda age: 1 if is_estimated_or_null(age) else 0)	1	1
all_data.loc[(all_data['Age'] > 48) & (all_data['Age'] <= 64), 'Age'] = 5	1	1
"train[""travel_company""] = 0"	1	1
data.groupby('Embarked', sort=False)['Survived'].mean().plot(kind='bar', ax=ax[0], rot=0)	1	1
np.empty((NFOLDS, ntest)) #predict all test NFOLDS times	1	1
OHE_X_submit.copy()	1	1
titanic_train.append(titanic_test)	1	1
train_df.drop(mycols, axis = 1)	1	1
data['Sex'] = data.Sex.map({'female':0,'male':1})	1	1
test.insert(loc=1, column='Survived', value=-1)	1	1
full['Last_Name'] = full['Name'].apply(lambda x :str.split(x,',')[0])	1	1
final_test_X.head(2)	1	1
combined['responsibleFor'] = combined.apply(lambda row: deriveResponsibleFor(row['children'], row['SibSp']), axis = 1)	1	1
Xmat['AgeBin'] = pd.cut(Xmat.Age, 5, labels=False)	1	1
combine.drop(['Survived'], axis=1),	1	1
"age[""Between16And45""] = ((age[""Age""] >= 16) & (age[""Age""] < 45)).astype(int)"	1	1
"titanicDF[""Pclass""].value_counts().plot.pie()"	1	1
"train[""Survived""].ravel()"	1	1
df_train['Sex'] = pd.to_numeric(df_train['Sex'])	1	1
df_test.loc[df_test.isnull().Age, 'Age'] = 35.0	1	1
"datacv.set_value(i, 'Name', ""Lady"")"	1	1
validation_df['Survived']	1	1
train_set.Pclass.hist()	1	1
test.drop(drop_cols,inplace=True,axis=1)	1	1
all_data.loc[(all_data['Age'] > 48) & (all_data['Age'] <= 64), 'Age'] = 3	1	1
"df_train['Age'] = df_train[""Age""].fillna(np.mean(df_train['Age']))"	1	1
df_test_ml.drop(['PassengerId','Name','Ticket', 'Cabin', 'Age', 'Fare_bin'],axis=1,inplace=True)	1	1
genderData.to_csv('passenger_survived_02.csv', index=False)	1	1
df_train['Fare'].max()	1	1
dataset['isCabinD'] = dataset['isCabinLetters'].apply(lambda x: 0 if x != 'D' else 1)	1	1
"test[""Embarked""] = test[""Embarked""].map({""S"" : 0, ""C"" : 1, ""Q"" : 2})"	1	1
full_set.drop('Survived', axis=1)	1	1
x.loc[ x['Fare'] <= i*10, 'Fare_bin'] = i	1	1
"data['CatFare']= pd.cut(data.Fare,bins=[0,1,10,100,600],labels=[""0-1"",""1-10"",""10-100"",""100-600""],include_lowest=True)"	1	1
dataset['Cabin_A'] = dataset['Cabin'].map(lambda s: 1 if s == 5 else 0)	1	1
sc.transform(data_test)	1	1
x_test['Age'].fillna(x_test['Age'].mean(), inplace=True)	1	1
train.loc[(train['SibSp'] == 0) & (train['Parch'] == 0),'isAlone'] = 1	1	1
"test.loc[test[""Sex""] == 0, ""Sex""] = ""male"""	1	1
testset.head()	1	1
data['Title'] = data.apply(set_title, axis=1)	1	1
"df_train[""Age_cat""] = pd.cut(df_train.Age, interval, labels=cats)"	1	1
full['Sex'].unique()	1	1
kaggle.iloc[i,1] = n	1	1
"df_train.drop([""Name"" , ""Ticket""], axis = 1)"	1	1
predictions_df.mean(axis=1).map(lambda s: 1 if s >= 0.5 else 0)	1	1
merged.loc[merged['Age']>64,'Age_band']=4	1	1
titanic_df['Age'][titanic_df['Title']==2].mean()	1	1
Load.drop([ 'Ticket', 'Cabin'], axis = 1)	1	1
submission.to_csv('lr_submission_titanic.csv', index=False)	1	1
in ['mean','median']:	1	1
dd['B'].fillna(dd.groupby(['C','A'])['B'].transform('median'),inplace=True )	1	1
cm[1][0]	1	1
"t[""Embarked""].fillna(""C"")"	1	1
dataset['Embarked'].isnull().values.any()	1	1
"test_data[[""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare""]]"	1	1
model.add(Dense(64,input_dim=4))	1	1
combined.drop('Name', 1, inplace=True)	1	1
fare.Fare.describe()	1	1
test_df['Alone'] = test_df['Alone'].astype(int)	1	1
"related_people.loc[related_people[""PassengerId""]==86,""RGroup""]=""Gustafsson_M"""	1	1
titanic_data.dropna(inplace=True)	1	1
test_df1['AgeGroup'] = test_df1['AgeGroup'].replace(age_map)	1	1
dataset['Sex'].value_counts().values	1	1
pd.DataFrame.from_csv('../input/train.csv')	1	1
cols.insert(33, 'Pclass^2')	1	1
"sol.to_csv(""sol.csv"",header=True,index=False)"	1	1
"data[""Survived""].corr(data[""Pclass""]),"	1	1
train_dataset.loc[(train_dataset['Age']>48) & (train_dataset['Age']<=64),'Age']=3	1	1
test_copy.loc[(test_copy['Age'] > 70) & (test_copy['Age'] <= 80), 'Age_Category'] = 7	1	1
X_train['Name_len'].value_counts()	1	1
titanic_test_data.Embarked.fillna(0, inplace=True)	1	1
original_train_data['Survived']	1	1
dataset[['PassengerId', 'Fare']] = imputer.transform(dataset[['PassengerId', 'Fare']])	1	1
train_df['AgeGroup'] = 0	1	1
"test[""Age""] = test[""Age""].fillna(train[""Age""].median())"	1	1
result_df.head(10)	1	1
dataset['Family_size']=dataset['SibSp']+dataset['Parch']+1	1	1
train_X_transformed.keys()	1	1
test3['Age'] = test3['Age'].fillna(test3['Age'].median())	1	1
titanic_df['Sex'] = titanic_df['Sex'].astype(int)	1	1
x['c_let'] = x['Cabin'].apply(lambda x: str(x)[0])	1	1
"data[""Age""].astype('float')"	1	1
df['nFamily'] = df['SibSp'] + df['Parch']	1	1
i_list[1] in ['Mrs.', 'Miss.', 'Master.', 'Mr.']:	1	1
re_test.values.reshape((re_test.shape[0],10))	1	1
train_df.groupby('Survived')['PassengerId'].count()	1	1
passenger['Sex'] == 'male' and passenger['Age'] < 10:	1	1
clfs.append(logReg)	1	1
test_mod.Fare.dropna()	1	1
kaggle_df['out'] = kaggle_df.mean(axis=1)	1	1
submit['Survived'] = ensemble	1	1
no_survivors.is_copy = False	1	1
df['Sex'] = n.fit_transform(df['Sex'].astype('str'))	1	1
app_test.replace({ None: avg_fare }, inplace=True)	1	1
Xt['SibSp'].dropna(axis=0, inplace=True)	1	1
accuracy.append(acc)	1	1
"df.to_csv(""titanic_logistic_regression.csv"",header=True,index=False)"	1	1
data_test['famsz'] = data_test.SibSp + data_test.Parch + 1	1	1
output['Survived'] = prediction	1	1
sc.transform(test_1)	1	1
X['Parch'] + X['SibSp'] + 1	1	1
df.groupby('Pclass').mean()	1	1
meanplot.sort_values('Mean Ranking', ascending=False)	1	1
data.loc[(data.passenger_fare<7.225) & (data.passenger_fare>=6.237) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Number'] =  data[(data.passenger_fare<7.225) & (data.passenger_fare>=6.237) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
df_test['Cabin'].fillna('Unknown', inplace=True)	1	1
model.add(Dense(1600, input_dim=16, init='normal', activation='relu'))	1	1
"test_data[""Age""].fillna(test_data.Age.mean(), inplace = True)"	1	1
df.Embarked.fillna(data.Embarked.mode()[0],inplace=True)	1	1
df.loc[df.label == 'test'].drop(['label', 'Survived'], axis = 1)	1	1
train_df.drop('Cabin', axis=1)	1	1
model_scores.append((classificator, score))	1	1
np.round(recall_score*100, 2)	1	1
submission ['Survived']= rfc_pred	1	1
test.drop(['Name','Cabin'],axis=1)	1	1
test_df.groupby(['Sex','Title'])['Title'].aggregate('count').unstack(fill_value=0)	1	1
test_df['Cabin'] = imp_const.transform(test_df[['Cabin']]).ravel()	1	1
test['Age_0'] = test['Age'].fillna(0)	1	1
"datacv.set_value(i, 'Name', ""Miss"")"	1	1
train_df['Survived'][train_df['IsAlone']==1].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[1],shadow=True)	1	1
temp1.head()	1	1
train.drop(features_drop, axis = 1)	1	1
"test_data[""Age""][np.isnan(test_data[""Age""])] = generated_ages"	1	1
survived_age.hist()	1	1
train5['IsAlone'].loc[train5['FamilySize'] > 1] = 0	1	1
combined[0:891]	1	1
df_test.insert(2,'Survived',0)	1	1
ax[1].set_title('Parch:Survived vs Dead')	1	1
data['FareN'],cat=pd.qcut(data['Fare'],5,retbins=True,duplicates ='drop')	1	1
train[['AgeBand','Survived']].groupby(['AgeBand'],as_index=False).mean().sort_values(by='AgeBand',ascending=True)	1	1
hist.history['val_loss']	1	1
test_df.join(sex_dummy_test)	1	1
data['Age_group'] = Age_group	1	1
titanic_test['NameLength']=titanic_test['Name'].apply(lambda x : len(x))	1	1
df2['Age']:	1	1
test_df['Nclass'] = test_df['Nclass'].map({'Mr': 1, 'Mrs': 2, 'Miss': 3, 'Other': 4})	1	1
df_cv.sort_values(by=['CrossValMeans'], ascending=False).reset_index(drop=True)	1	1
dset['Cabin_assigned'] = ~dset.Cabin.isnull()	1	1
answer.to_csv('Prediction.csv' , index=False)	1	1
combine['Sex'] = combine.Sex.astype('category')	1	1
full_models['set2']['num_scaling'] = 'std_scaler'	1	1
pdf['Title'] = pdf['Name'].str.replace('(.*, )|(\\..*)', '').str.lower()	1	1
df_train.drop(['Ticket'], axis = 1)	1	1
plt.hist(np.log2(np.log2(df.Fare + 2) + 2), bins=45)	1	1
dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch']	1	1
"data[""TicketPrefix""] = data[""TicketPrefix""].str.upper().str.strip()"	1	1
X_train.drop(columns=['Embarked']).join(lb_embarked)	1	1
whole['Family'] = 1	1	1
test_df['Cabin'] = test_df['Cabin'].map(lambda x: x[0])	1	1
train.loc[(train['Pclass'] == 1) & (train['hasCabin1'] == 1), 'class_hascabin'] = 2 #has cabin Pclass 1	1	1
"nn_result.to_csv(""nn_result.csv"", index = False)"	1	1
X_train.drop([col + '_missing_data'], axis=1)	1	1
"train_df[""Age""] = train_df[""Age""].astype(int)"	1	1
train_data[['Survived','ParentsChildren']]	1	1
"titanic.loc[titanic['Embarked'] == 'S', 'Embarked'] = 0   # ""S"":0, ""C"":1, ""Q"":2"	1	1
data.loc[(data.Fare > 12.5) & (data.Fare <= 17), 'FareBand'] = 3	1	1
"output.to_csv(""titanic-output-0113-v2.csv"",index=False)"	1	1
"tot[""Title""].replace(['Lady', 'Countess','Sir', 'Jonkheer', 'Dona'], 'Upper',inplace=True)"	1	1
c.keys():	1	1
test_dataset.head(10)	1	1
data['age_flag'] = data['Age'].apply(lambda x: 1 if pd.isnull(x) else 0)	1	1
test['Survived'] = model.predict(X_test)	1	1
sc.transform(titanic_features)	1	1
data_cpy.drop(columns=drop_col,axis=1,inplace=True)	1	1
"titanic_train_dataset[""TitleScore""] = 0"	1	1
train_df['fare_cat'] = pd.cut(train_df['Fare'], 50, labels = np.arange(1,51))	1	1
combined_data.drop(['PassengerId'], axis=1, inplace=True)	1	1
traindf['CabinGroup'].value_counts()	1	1
my_submission.to_csv('titanic_survival2.csv', index = False)	1	1
train.drop(['Name'],axis = 1, inplace = True)	1	1
"titanic['Deck'] = titanic['Cabin'].astype(str).str[0]  # Extracting first character in ""Cabin"" to create a new column ""Deck"""	1	1
"submission.to_csv(""sample_submission.csv"",index=False)"	1	1
train['Title'] = train['Title'].replace(TITLE).astype('category')	1	1
"train[[""Embarked"", ""Embarked_C"", ""Embarked_S"", ""Embarked_Q""]].head()"	1	1
cv_res.head()	1	1
test_df['ticketRef'] = np.where(test_df['noTicketRef']==1,0,test_df['Ticket'].map(ticketSurvived))	1	1
df.loc[(df['Age'] >= 20.315) & (df['Age'] < 30.263), 'Age'] = 2	1	1
train['had_SibSp'] = 0	1	1
"data[""Age_cohort""]=np.nan"	1	1
test.fillna(value=0.0)	1	1
test_1['Fare'].fillna(v,inplace = True)	1	1
train_X['AgeBin_Code'] = label.fit_transform(train_X['AgeBin'])	1	1
df_train[['Survived','Sex']].groupby(['Sex']).mean()	1	1
data['Sex'] = pd.Categorical(data['Sex']).codes	1	1
np.mean(y_train == y_train_preds_rf)	1	1
"dataset.loc[(dataset[""Fare""]<=7.91), ""Fare""]=0"	1	1
df_test['Person']  = df_test[['Age','Sex']].apply(get_person,axis=1)	1	1
np.round(xgb_clf.predict(dtest)).astype(int)	1	1
pd.merge(df, df2, left_index = True, right_index = True) # merges on index	1	1
train5['Sex'] = le.fit_transform(train5['Sex'])	1	1
test.loc[(test['AgeModified']>70) & (test['AgeModified']<=80),'AgeCategorical'] = 7	1	1
dc.at[index,'Unknown_Fare']	1	1
train_features.iterrows():	1	1
data_test1.describe()	1	1
individual[0] = toolbox.attr_C()	1	1
comb['Age'].fillna(comb['Age'].median(),inplace=True)	1	1
data_copy.loc[:, 'Pclass']=data_copy['Pclass'].fillna(data_copy['Pclass'].median())	1	1
merged['Fare_Range']=pd.qcut(merged['Fare'],4)	1	1
predictions.transpose().reshape(test_data['PassengerId'].shape)	1	1
Test_Master['Age'] = Test_Master[['Age','Pclass']].apply(impute_age,axis=1)	1	1
kaggle_data.rename(columns={'Predictions' : 'Survived'}, inplace=True)	1	1
test_copy.loc[(test_copy['Age'] > 60) & (test_copy['Age'] <= 70), 'Age_Category'] = 6	1	1
dataset['Title'].describe()	1	1
"titanic[['Survived', 'Title', 'Name', 'Age', 'Sex', 'sex_female', 'sex_male', 'SibSp', 'Parch', 'Fare', 'Pclass', 'class_1', 'class_2', 'class_3', 'Cabin', 'Embarked', 'Ticket Prefix', 'Ticket Number', 'title_Capt', 'title_Col', 'title_Don', 'title_Dr', 'title_Jonkheer', 'title_Lady', 'title_Major', 'title_Master', 'title_Miss', 'title_Mlle', 'title_Mme', 'title_Mr', 'title_Mrs', 'title_Ms', 'title_Rev', 'title_Sir', 'title_the Countess', 'embarked_C', 'embarked_Q', 'embarked_S', ""Age - Below 10"", ""Age - 10-18"", ""Age - 18-30"", ""Age - 30-55"", ""Age - Above 55""]]"	1	1
"data2[""Survived""]=y_predict_bagging"	1	1
train_df.apply(count_missing, axis=0) #axis=0 defines that function is to be applied on each column	1	1
output.head(100)	1	1
train_df['New_Age'] = train_df['Age']	1	1
df.Embarked.fillna('S' , inplace=True )	1	1
train_data['survived_dead'] = train_data['Survived'].apply(lambda x : 'Survived' if x == 1 else 'Dead')	1	1
train.loc[(train.Title.values == k) & (train.Age.isnull()), 'Age'] = v	1	1
df.groupby(var1[0])[var1[1]].agg(['sum', 'count']).reset_index()	1	1
X.loc[null_index,'Embarked'] ='S'	1	1
train['Fare'].fillna(train.groupby('Pclass')['Fare'].transform('median'))	1	1
np.mean(score_lr)*100, np.mean(score_dt)*100, np.mean(score_rf)*100,	1	1
X['Surname'] = X['Name'].str.extract('(\w+),', expand = False)	1	1
in ['Cabin', 'Embarked', 'Name', 'Sex', 'Ticket']:	1	1
test_df['SharedCabin'].loc[ test_df['Cabin'].notnull() ] = 0	1	1
"all_data['FamilySize'] = all_data[""SibSp""] + all_data[""Parch""] + 1"	1	1
knndf.head()	1	1
colectValues.append(Results)	1	1
scores.mean(),	1	1
test.drop(['Fare'],axis=1,inplace=True)	1	1
train_data['Cabin'].describe()	1	1
"clean_df.drop(""Survived"",axis=1)"	1	1
Xy[2]	1	1
data['Fare'].head()	1	1
"df2[""Embarked""].fillna(df['Embarked'].value_counts().idxmax(), inplace=True)"	1	1
titanic_train.drop(titanic_train.columns[8], axis = 1) # Removing the cabin column as it contains more nan than data.	1	1
"os.environ[""PATH""] += os.pathsep + 'C:/Program Files (x86)/Graphviz2.38/bin/'"	1	1
allfeat.drop(columns=['PassengerId','Cabin','Ticket'])	1	1
"related_people[""Last_Name""]="""""	1	1
"predictors2[""SibSp_Parch""] = predictors2.SibSp * predictors2.Parch"	1	1
"df_test.loc[((df_test[""title""]==""miss."") & (df_test[""Age""].isnull()==True)).tolist(),'Age']=avg_miss"	1	1
female_variable.append(raw_female_variable[i] if i in female_variable_index else 0)	1	1
"data['Title1'] = data['Title1'].str.split(""."", expand=True)[0]"	1	1
np.mean(train_score,axis=1) , np.mean(cv_score,axis=1)	1	1
"test[""Embarked_1""] = test[""Embarked""] == 'C'"	1	1
all_data[['Parch', 'Survived']].groupby(['Parch'], as_index = False).mean().sort_values(by = ['Survived'], ascending = False)	1	1
age_survived.hist(bins=70, ax= axis2).set(ylabel='Count')	1	1
"sub_rep.to_csv(""Tit Sub.csv"", index = False)"	1	1
dash_list.append(dashes)	1	1
"train[""Title""] = [i.replace('Lady', 'Nobility') for i in train.Title]"	1	1
"data_frame.loc[(data_frame.Age.isnull()), ""Age""] = Age_predictions"	1	1
dataset.loc[(dataset['Fare'] > 128.082) & (dataset['Fare'] <= 256.165), 'Fare'] = 2	1	1
final_test_data_set[['PassengerId']]	1	1
titanic.loc[:,['SibSp','Parch']]	1	1
"train_df[""t_has_prefix""] = train_df['Ticket'].apply(lambda x: 1 if len(x.split())>1 else 0)"	1	1
plt.boxplot(data1['Fare'], meanline=True, showmeans=True);	1	1
dfTrain['Embarked'].value_counts(normalize=True)	1	1
train_try.drop(['FareBand'], axis=1)	1	1
titanic['Family_size'] = titanic['Parch'] + titanic['SibSp'] + 1	1	1
data['FamilySize']=data['SibSp']+data['Parch']+1	1	1
data.fillna({'Fare': data.Fare.median()})	1	1
testdf.drop('PassengerId' , axis = 1).copy()	1	1
df.corr()[pred]	1	1
Survived.agg(['count', 'sum', 'mean', 'std'])	1	1
joined.loc[:891, cat_features].astype(np.unicode).values,	1	1
train_clean.isnull().sum()/891	1	1
train['embarked_T'] = dataset['embarked_T']	1	1
test5.drop(['SibSp', 'Parch'], axis=1)	1	1
train['hasCabin3'] = train['hasCabin3'].fillna(1)	1	1
set_.drop('Age_cat', axis=1, inplace=True)	1	1
full_set.drop(['Cabin', 'Ticket', 'Name'], axis = 1)	1	1
train.shape, test.shape, all_data.shape	1	1
data.boxplot(column='Fare', vert=False)	1	1
data_full['IsKid'] = 0	1	1
df['Name'].values	1	1
test['Child'] = (test['Age'] <= 18).astype(int)	1	1
np.dot(Input,parameter1)+ b1    #713X4	1	1
x_train1.shape,y_train1.shape,x_valid1.shape,y_valid1.shape	1	1
data_train1.as_matrix(columns = features)	1	1
"data.loc[(data[""Age""] > 16) & (data[""Age""] <= 32), ""Age_group""] = 1 # young teen and teen adult"	1	1
"original_test[""PassengerId""],"	1	1
dataset.loc[(dataset['Fare'] > 39.688) & (dataset['Fare'] <= 77.958), 'Fare']   = 6	1	1
trainset.drop(['Name','Cabin','Ticket','PassengerId'],axis=1)	1	1
test_data.loc[test_data['Pclass'] == 1]	1	1
"data_df.drop([""Ticket"", ""Last_Name"", ""Name"", ""Cabin"", ""Age"", ""Fare""], axis=1)"	1	1
allfeat['CategoricalAge'] = pd.cut(allfeat['Age'], 5)	1	1
"test.drop(""Name"", axis = 1, inplace = True)"	1	1
df_train.values	1	1
df_test['Age'] = df_test.Age.fillna(df_test.Age.median())	1	1
comb_data['FareGroup'] = comb_data['FareGroup'].astype('category')	1	1
temp.rename(columns={'Name': colLabel})	1	1
finalIsSurvived.Survived.astype(int)	1	1
name_surv.head(50)	1	1
"train_data.loc[train_data[""Name""].str.contains(""Miss.""), ""TitleMiss""] = 1"	1	1
d['Age'].fillna(d['Age'].median(), inplace = True)	1	1
df.loc[df['Fare'].isnull(), 'Fare'] = df['Fare'].median()	1	1
dataset.loc[dataset['Age'] <= 16,'Age'] = 1	1	1
dataset.loc[(dataset['Age'] > 64.084) & (dataset['Age'] <= 72.042), 'Age'] = 8	1	1
test['Cabin'] = np.where(test['Cabin'].notnull(), 1, 0)	1	1
"train_original[""Survived""]"	1	1
all_data.loc[~pd.isnull(all_data['Name']), ['PassengerId', 'Name']]	1	1
train.mask(np.isinf(train))	1	1
titanic_test1.info()	1	1
titanic.isna().sum(axis=0)	1	1
X_train.drop(['Fare'],axis=1)	1	1
dataset['Embarked'].describe().top	1	1
"train[""Result""] = 0"	1	1
"test[""Pclass_3""] = test[""Pclass""] == 3"	1	1
dataset.loc[(dataset['Fare']>70.0) & (dataset['Fare'] <= 250),'Fare'] = 2	1	1
train2['Fare_Pclass'] = train2['Fare'] * train2['Pclass']	1	1
test_data[['Sex', 'Age']].dropna()	1	1
"dataset['isRareTitle'] = dataset[""Title""].apply(lambda x: 0 if x != 'Rare' else 1)"	1	1
train_X.drop(columns='Cabin')	1	1
merged.loc[(merged.Age.isnull())&(merged.NameTitle=='Other'),'Age']=45	1	1
train_csv.isnull().sum()	1	1
clean_test_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'S', 'C', 'Q']]	1	1
"df[""Pclass""] = df[""Pclass""].astype('int32')"	1	1
train['Sex'] = train['Sex'].apply(lambda sex: 1 if sex == 'male' else 0)	1	1
"data_test[""Survived""]"	1	1
df_train.Survived.copy()	1	1
"data[""Alone""] = 0"	1	1
sc_X.transform(X_validate)	1	1
df['Sex'] = df['Sex'].map(gender_dict)	1	1
data.loc[(data.Age.isnull()) & (data.Initial=='Other'),'Age'] = 46	1	1
titanic_df['family_name'] = familyname.values	1	1
"test.loc[test[""Age""]<=16,""Age""]=0"	1	1
test_ToPred.groupby('Salutation').mean()	1	1
test4['Fare'] = test4['Fare'].fillna(test4['Fare'].median())	1	1
dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31),'Fare'] = 2	1	1
_df.loc[_df.embarked.isna(), : ]	1	1
test_labels.values	1	1
cabin['Cabin'] = cabin['Cabin'].map(lambda c: c[0])	1	1
ax[2].set_title('Southampton')	1	1
scores['valid_' + clf_name].append(acc_valid)	1	1
df_full['Sex'] == 1	1	1
df_full['Sex'] == 0	1	1
test['AgeFill']=test['Age'].apply(fill_missing_age)	1	1
"test_data.drop(""Sex"", axis=1, inplace=True)"	1	1
"test[""Name""].apply(get_title)"	1	1
column['Title'] = column['Title'].replace('Ms', 'Miss')	1	1
df_test['FamilySize'] = df_test.SibSp + df_test.Parch + 1	1	1
dataset.loc[(dataset['Fare']>14.454)&(dataset['Fare']<=31),'Fare_cat']=2	1	1
"titanic['CabinLevel'] =   titanic['CabinLevel'].apply( lambda x : 1 if x == 'A' else( 3 if (x == ""F"" or x == ""G"")  else (0 if x == ""U"" else 2) ))"	1	1
train_df.drop(['Name', 'Ticket'], axis=1)	1	1
dataset.loc[mask, ['FareBand', 'Pclass', 'PassengerFare']].groupby(['FareBand', 'Pclass']).agg(['mean'])	1	1
"test_df[""Sex""] = test_df[""Sex""].map({""female"": 0, ""male"": 1}).astype(int)"	1	1
Xtest['Age'].fillna(testdf['Age'].mean(), inplace=True)	1	1
df.Age.fillna(mean)	1	1
df_test.loc[:,features]	1	1
fare_series.isnull()	1	1
fare.mean(), fare.std()	1	1
test['new_Parch'] = test.Parch	1	1
titanic_test['Emb_Sex'] = titanic_test['Embarked']*titanic_train['Sex']	1	1
train_df['FareBin_Code'] = data['FareBin_Code'][:891]	1	1
train.loc[train['Fare']<10].Survived.mean() #19% survival rate Cheap Tickets	1	1
titanic_train.drop(['Cabin','Ticket'],axis=1)	1	1
train['Alone']  = (train['SibSp'] + train['Parch']) == 0	1	1
full_bins['AgeBin_Code'] = label.fit_transform(full_bins.AgeBin)	1	1
df.loc[mask_m,'Man'] = 1	1	1
df_test['Embarked'] = df_test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} )	1	1
"test_data[""Embarked""]=test_data[""Embarked""].map({""S"": 1, ""C"" :2, ""Q"" :3})"	1	1
"_df[""group_id""] = np.nan"	1	1
"train.drop([""istrain"", ""PassengerId""], axis=1, inplace=True)"	1	1
DataSetTrain.isnull().sum()	1	1
dataset.groupby(['Cabin', 'Pclass']).size().unstack(0)	1	1
all_data['Embarked'] = all_data['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype(int)	1	1
family_size.sort_values(by='Family Size', axis=0, inplace=True)	1	1
X_test['Embarked'] = le.fit_transform(X_test['Embarked'].values)	1	1
titanic_df['Fare'].plot(kind='hist', figsize=(15,3), bins=100,                              ls='solid', lw=0.5, ec='black')	1	1
"test['CabinN4'] = ""999"""	1	1
data_train_dummy2['Fare'].values.reshape(-1, 1)	1	1
perceptron_submission.head()	1	1
df[['Fare', 'Survived']].groupby(by=lambda i: int(df.loc[i]['Fare']/100)).mean()	1	1
full_models['set1'] = {}	1	1
series.std()	1	1
df_test.loc[df_test['Cabin'].isnull(),'Cabin']=0	1	1
train['Ticket'][train['Parch']==0]	1	1
train.drop(train.loc[train['Embarked' ].isnull()].index)	1	1
"train_df[""Embarked""] = train_df[""Embarked""].fillna(""C"")"	1	1
joined.describe()	1	1
df[['Group_Size','Survived']].groupby(['Group_Size']).mean().reset_index()	1	1
lr_submission.to_csv('log-reg.csv', index=False)	1	1
"df_train[""Pclass""][x] #Pclass = 3"	1	1
model.add(Dense(1, activation='softplus'))	1	1
"df_train.groupby('pclass')['fare'].mean().plot(kind='bar', figsize=(10,8), title = ""Average Ticket Value per Class"");"	1	1
test['hasCabin']=test['Cabin'].apply(lambda x: 0 if x==0 else 1)	1	1
train['Age']=train[['Age','Pclass']].apply(age_update, axis=1)	1	1
Y_tot.tail(ntt)	1	1
dataset['CabinChar'] = dataset['Cabin'].str[:1]	1	1
X.groupby(self.group_key).mean()[self.mean_key].to_dict()	1	1
test.Embarked.fillna('NO_VALUE', inplace=True)	1	1
voters.items():	1	1
"test_data.drop([""Name"",""Ticket"",""PassengerId""], axis = 1, inplace = True)"	1	1
pd.isnull(row['age']): # [2]	1	1
train[['Family','Survived']].groupby(['Family'], as_index=False).mean()	1	1
train.drop(['Pclass','Sex','Embarked'],axis=1)	1	1
"data.groupby(['Sex', 'Pclass', 'type'])[""Age""].median()"	1	1
submission['Survived'] = submission['Survived'].round(0)	1	1
df_train.drop(['Age'], axis=1, inplace=True)	1	1
input_data.head()	1	1
df_train['AgeBinCode'] = label.fit_transform(df_train['AgeBin'])	1	1
data.loc[(data.passenger_fare>=13.1) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>=13.1) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
np.mean(df_age)	1	1
"related_people.loc[related_people[""PassengerId""]==438,""RGroup""]=""Richards_M"""	1	1
train['CategoricalFare'] = pd.qcut(train['Fare'], 10)	1	1
results['name'].append(name)	1	1
second_variable.append(raw_second_variable[i] if i in second_variable_index else 0)	1	1
"test['Fare'] = test['Fare'].fillna(test[""Fare""].median())"	1	1
"df3_train[[""Pclass"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked_C"", ""Embarked_Q"", ""Embarked_S"", ""Sex_male""]]"	1	1
"test[""AgeGroup""] = np.vectorize(AgeGroup)(test[""Title""],test[""Age""])"	1	1
plt.rcParams['figure.figsize']=10,10	1	1
strat_test_set[['Survived']].copy()	1	1
test.drop(['Name', 'Ticket', 'Cabin'], inplace=True, axis=1)	1	1
chi2_reduced_test.drop(drop, axis = 1, inplace = True)	1	1
train_df[['Age', 'Fare', 'Parch', 'SibSp']].copy(deep=True).dropna()	1	1
"sns.boxplot(x=""Pclass"", y=""Fare"", data=dataset)"	1	1
df.drop(['Ticket','Cabin'], axis=1)	1	1
data.pop('Cabin')	1	1
data_val.describe(include='all')	1	1
pandasDFname.loc[n[0],featureName+str(i)]=1	1	1
pandasDFname.loc[n[0],featureName+str(i)]=0	1	1
test_df.groupby('Title').size()[title] >= 40:	1	1
titanic_df['Title'] == 'Mr'	1	1
"train_df[""AgeRange""] = pd.cut(train_df[""Age""], 5)"	1	1
train['Fsize'] = train['SibSp'] + train['Parch']	1	1
ages_probabilities['Probability'] = ages_probabilities['Count'] / big_X['Age'].value_counts().sum()	1	1
train_label.shape	1	1
X['Fare'].fillna(X['Fare'].median(),inplace=True)	1	1
"train_dat[""isAlone""].value_counts()"	1	1
model.add(Dense(20, input_shape=[7,]))	1	1
dataset_test[['PassengerId','Name','Ticket','Cabin','Embarked','Sex','Pclass','Age','SibSp','Parch','Fare']]	1	1
titanic_data.drop(['Sex','Embarked','Name','SibSp','Parch','FamilySize'],axis=1,inplace=True)	1	1
dataset.groupby(['Sex', 'SibSp']).size().unstack(0).fillna(0)	1	1
models.append(('Ada', AdaBoostClassifier()))	1	1
hist['val_acc']	1	1
output['PassengerId'] = ids	1	1
train_df['Survived'].groupby(train_df['Sex']).mean()	1	1
"ages.style.background_gradient(cmap=cm,subset=[('Survived','mean')])                 .format(""{:.4f}"",subset=[('Survived','mean')])                 .set_properties(subset=[('Survived','mean'),('Survived','count')], **{'width': '75px'})"	1	1
df_test['ParchBool'] = (df_test['Parch'] > 0)	1	1
frame['bin_age']=np.floor(frame['Age'])//10	1	1
Modified_data.iloc[891:]	1	1
score_train.append(1-accuracy_score(pred_train, y_train))	1	1
imputed[ 'Age' ] = full.Age.fillna( full.Age.median() )	1	1
_test.isnull().any()	1	1
entire['Cabin'] = entire.groupby('Ticket')['Cabin'].apply(fill_cabin_from_dict)	1	1
submission['PassengerId'] = new_data_test ['PassengerId']	1	1
Cabin[0] == 'C':	1	1
train.columns.shape	1	1
data.apply(lambda x: 1 if ((x.Parch>0) & (x.SibSp>0) & (x.Age>19) & (x.Age<=45) ) else 0, axis=1)	1	1
np.multiply(matrix1,outputs)	1	1
train_df['Family_Size']=train_df['SibSp']+train_df['Parch'] + 1	1	1
titanic_ytest.info()	1	1
train.loc[(train.Age > 0) & (train.Age <= 10)]	1	1
train_df['Embarked'] = train_df['Embarked'].apply(convert_embarked)	1	1
X.apply(transform, axis=1)	1	1
df_test[['PassengerId','Survived']].to_csv('women_survived.csv', index = False)	1	1
"df_coeff[""Correlation""] = pd.Series(clf.coef_[0])"	1	1
traindf[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)	1	1
person_dummies_test.drop(['male'], axis=1, inplace= True)	1	1
"all_data.loc[ all_data['Fare'] > 31, 'Fare'] 							        = 3"	1	1
replacement_table['Master'][2] = titanic_comb[titanic_comb['title_age']=='Master']['Age'].median() # we replace this value that looks spurious	1	1
test_data_clean_features['Sex'] = test_data_clean_features['Sex'].apply(lambda x: 1 if x =='female' else 0)	1	1
"train[[""Sex"",""Survived""]]"	1	1
df.dropna(axis=0, how='any', subset=['Embarked'])	1	1
traindata.drop(['PassengerId','Ticket','Name','Cabin'],axis=1)	1	1
"df_test[['PassengerId','Survived']].to_csv(""KNN_model.csv"",index=False)"	1	1
X['Age'].mean()	1	1
features.append('age_cat')	1	1
train_df['Person'] = train_df[['Age', 'Sex']].apply(get_person, axis=1)	1	1
dataset.set_value(rowIndex, 'Age66up', 0)	1	1
data.loc[data.Cabin.str[0] == 'F', 'Cabin'] = 6	1	1
"dataset[""Fsize""].replace(to_replace = [5,6,7,8,11], value = 'Large', inplace = True)"	1	1
titanic['Survived'] = titanic['Survived'].replace(0, 'No')	1	1
test['Survived_nn_wtd'] = test['Survived_nn']*recall_nn	1	1
dataset.groupby(dataset['Familysize_cat'])['Survived'].describe()	1	1
x_train['Age'] = x_train['Age'].fillna(mean)	1	1
"train[""Sex""] = pd.get_dummies(train[""Sex""])['female']"	1	1
df.loc[pd.isnull(df['Fare'])==True,'Fare']=df.Fare.median()	1	1
train1.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
train.pivot_table('PassengerId','Pclass', 'Survived', 'count').plot(kind='bar')	1	1
test['Survived'] = test['Survived'].apply(lambda x: round(x,0)).astype('int')	1	1
train_df.drop('PassengerId', axis=1, inplace=True, errors='ignore')	1	1
results['Survived'] = logi.predict(test)	1	1
test_df['Embarked'] = test_df['Embarked'].fillna(most_frequent_Embarked)	1	1
X_data.drop(X_train.index)	1	1
test.loc[test['Family']>=4,'Family']=2	1	1
X.drop(['Cabin'], axis=1, inplace=True)	1	1
"dat.loc[dat[""Cabin""].str.count(""F"") > 0,""Cabin""] = 5"	1	1
train_features.loc[train_index]	1	1
train_df['CabinInfo'] = train_df['CabinInfo'].map(title_mapping)	1	1
dftrain['Title'] = dftrain['Name']	1	1
"X_train_bin.drop([""Pclass"", ""SibSp"", ""Parch"", ""Age"", ""Fare""], axis=1, inplace=True)"	1	1
df_test.drop(['Family'], axis=1)	1	1
"titanic_train_df[[""Agecat"", ""Survived""]].groupby(['Agecat'],as_index=False).mean()"	1	1
test_df['Age'].dropna().max().astype(int)	1	1
df.groupby('Embarked').size()	1	1
data_test[['Age','Fare', 'Family', 'Pclass']]	1	1
train_df.groupby(['Survived'])['family_size'].plot(kind='hist', legend=True, alpha=0.5)	1	1
df[['Ticket', 'Fare']].groupby(['Ticket']).mean()	1	1
"df[""Title""] = df.Title.apply(lambda f: 'Mrs' if f in mrs else f)"	1	1
detc_cv.best_params_['min_samples_split'],	1	1
df_all['Sex'] = le.transform(df_all['Sex'])	1	1
titanic_df[['Fare', 'Pclass']].corr(method='spearman')	1	1
train_raw.Pclass.hist(density = True)	1	1
train_df.Age.round(0)	1	1
train_data[['Survived','Sex']].groupby(['Sex', 'Survived']).Sex.count().unstack()	1	1
full.set_value(61, 'Embarked', 'S');	1	1
train_df.iterrows():	1	1
test.drop(['PassengerId','Survived'],axis=1)	1	1
X_train.groupby([var])[target].mean().to_dict()	1	1
"factors[""Embarked""]=1"	1	1
"data.loc[train[""Age""].isnull(), ""Age""] = None"	1	1
"test.replace([""Mlle"",""Ms"", ""Mme""], [""Miss"", ""Miss"", ""Mrs""], inplace=True)"	1	1
data.iloc[:,0:cols-1]	1	1
train.drop('AgeCategory', axis=1, inplace=True)	1	1
df_1.drop(['Survived'], axis=1, inplace=True)	1	1
titanic_train.drop(['Survived'],1)	1	1
"combined[""Fare""].fillna(fill_fare)"	1	1
"results.to_csv(""./predictions1.csv"", index=False)"	1	1
df['parch']         = df['parch'].astype(parch_cat)	1	1
train_org.copy()	1	1
dataset['Embarked'] = dataset['Embarked'].map({'S':0, 'Q':1, 'C':2}).astype(int)	1	1
data_bar_train.sort_values(by = ['Percent_Missing','Feature'])	1	1
titanic_sub.loc[titanic_sub[var].isin(new), var] = -999	1	1
traindf.drop('Survived',axis='columns')	1	1
df_train['individualticket'] = df_train['Fare'] / df_train['ticketcount']	1	1
df_train.loc[:,tcols].dropna().reindex()	1	1
df1[['Pclass','Fare','Embarked']]	1	1
scores.append( votingC_soft.score(X_test, y_test) )	1	1
combined.update(age_learn, join = 'left', overwrite = False)	1	1
test_df['Family'] = test_df['SibSp'] + test_df['Parch'] + 1	1	1
classifier.add(Dropout(dropout_rate))	1	1
age_combined.std()	1	1
test.drop(['Pclass'], axis=1)	1	1
People_Survived[['Pclass','Survived']].groupby('Pclass').count()	1	1
"total[""Fsize""] = total[""SibSp""] + total[""Parch""] + 1"	1	1
estimators.append(('logistic', model1))	1	1
train_df.loc[(train_df['Fare']>7)&(train_df['Fare']<=14),'Fare_new']=1	1	1
corr_df.corr(method='pearson')	1	1
"data_df[""Family""] = data_df[""SibSp""] + data_df[""Parch""] +1"	1	1
"dataset.loc[ dataset[""FamilySize""] == 1, ""IsAlone"" ] = 1"	1	1
"sns.boxplot(x=var, y=""Fare_log"", data=data)"	1	1
np.squeeze(labels == 0)	1	1
"titanic_test[""FamilyId""]=family_ids"	1	1
Xmat.isnull().sum()	1	1
df['Age'] = df0['Age'].apply(lambda e: -1 if pd.isnull(e) else e)	1	1
data['Age']=data.Age.fillna(data.Age.mean())	1	1
test_dmy.head()	1	1
np.where(pd.notnull(cabin), str(cabin)[0].upper(), 'Z')	1	1
train_set[['Age', 'Survived']].groupby(['Age'],as_index=False).mean()	1	1
"dataset['hasAge'] = dataset[""Age""].apply(lambda x: 0 if x != x else 1)"	1	1
final_train.loc[:,final_train.columns != 'Survived'].columns.values	1	1
submission.to_csv('submission_blend.csv', index = False)	1	1
importance.append((name, model.steps[1][1].feature_importances_))	1	1
np.dot(np.transpose(A1), dZ2)    # 4X1	1	1
model.transform(train_df)	1	1
ax[0].set_title('Number of Passengers By Pclass', y=y_position)	1	1
"dataset[""Pclass""][x]==2:"	1	1
df.dtypes[df.dtypes == 'int64'].index.tolist()	1	1
values.append(test_df[col].isnull().sum())	1	1
dataset.loc[ dataset['Age'] < 10, 'Age'] = 0	1	1
df.loc[df['Deck']=='D', 'Deck'] = 4	1	1
row['SibSp'] >= 1 and row['Parch'] >= 2:	1	1
full['IsAlone'] = full['IsAlone'].astype(int)	1	1
x['FreqFare']	1	1
test_df['family_onboard'] = test_df['Parch'] + test_df['SibSp']	1	1
train_df['Foreign'] = False	1	1
df.join(one_hot)	1	1
"train[""IsAlone""] = train[""FamSize""].apply(lambda x: 0 if x==1 else 1)"	1	1
features['feature'] = x_train.columns	1	1
parameters['save_cost'] = True	1	1
df.groupby(['Name', 'Family_size'], as_index=False, group_keys=False).agg({'Fare': sum, 'Survived': np.mean})	1	1
test['Child'] = test['Age']<=10	1	1
df_copied['Name_titleCategory'] = df_copied['Name_titleCategory'].fillna(' ')	1	1
train4['Age'] = train4['Age'].fillna(train4['Age'].median())	1	1
test['Embarked'] = test['Embarked'].fillna('C')	1	1
parch_data['survived_pct'][np.isnan(parch_data['survived_pct'])]=0	1	1
re.sub('[Dd]ate$', '', fldname)	1	1
df['Pclass'].isnull().sum(axis=0)	1	1
"df[""F_single""] = df[""Fsize""].map(lambda s: 1 if s == 1 else 0)"	1	1
titanic.Embarked.dropna().mode()[0] #freq_port = S	1	1
data['Family']=data['Parch']+data['SibSp']	1	1
imputed_T[ 'Age' ] = test.Age.fillna( full.Age.mean() )	1	1
df_titanic['Title'] = df_titanic['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
df_train_ml['Title'] = df_train_ml['Title'].replace(man_upper, 3)	1	1
"models.append((""DecisionTree"",DecisionTreeClassifier()))"	1	1
test['Sex']=test['Sex'].map({'female':0,'male':1}).astype(int)	1	1
df_train['Pclass'].value_counts().plot.bar(color=['#045FB4'], ax=ax[0])	1	1
traindf[['Sex','Survived']].groupby(['Sex'] , as_index = False).mean()	1	1
X.astype(np.float32).values	1	1
np.append(test_text_feat, test_column_feat, axis=1)	1	1
dataset.loc[ dataset['Fare'] <= 7.91, 'Fare']  = 0	1	1
lbl_enc.transform(train_df[col])	1	1
test.count()	1	1
combine.ix[(combine.Family>0)&(combine.Family<5),'Fsize'] = 'small'	1	1
test_p_id.copy()	1	1
df[['Age', 'Fare']].values	1	1
ageDF.describe()	1	1
train['Family'] = train.Parch + train.SibSp	1	1
df['Sex'] = label.fit_transform(df.Sex)	1	1
data.surname_Yarred.astype('category')	1	1
models[8]	1	1
titanicTest.iloc[i,6]=titanicTest.iloc[i,3]+titanicTest.iloc[i,4]	1	1
titanic_train_test_merged['Fare_range']=titanic_train_test_merged['Fare_range'].astype('category')	1	1
df_main['Embarked'].fillna('S', inplace=True)	1	1
test.apply(getMissingValue)	1	1
Df['Predicted_Signal'] = cls.predict(X)	1	1
X_full['Fare'].fillna(fare_mean, inplace = True)	1	1
full_dataset.Title.replace(to_replace = ['Dona', 'Jonkheer', 'Countess', 'Sir', 'Lady', 'Don'], value = 'Aristocrat', inplace = True)	1	1
test_old['PassengerId'].values	1	1
Y.values[train_index], Y.values[test_index]	1	1
df_train.corr(),	1	1
"train_data[""Survived""][(train_data[""FareCat""] == fare_cat) & (train_data[""Sex""] == gender ) & (train_data[""Child""] != 1 )]"	1	1
"trainTitanic[""Embarked""] = trainTitanic[""Embarked""].fillna(""S"")"	1	1
"test.drop([""Cabin"",""PassengerId"",""Ticket"",""Name"",""Embarked"",""Fare""],axis=1)"	1	1
train['TicSurvProb'] = train['TicSurvProb'].replace(np.NaN, 38.38)	1	1
"total[""Cabin_ord""] = total.Cabin1.map(ordinal)"	1	1
AgeList.append(i)	1	1
train.loc[ train['Name_len'] <= 19, 'Name_len']       = 0	1	1
sub['AGE'] = sub['AGE'].replace(numpy.nan, sub['AGE'].median())	1	1
"allfeat['Title'] = allfeat['Title'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
df.drop([a + '_na' for a in list(set(na_dict.keys()) - set(na_dict_initial.keys()))], axis=1, inplace=True)	1	1
strat_train_set.values	1	1
df_features['Sex'] = df_features[['Sex','Age']].apply(lambda row: row['Sex'] if row['Age']>=10 else 3 ,axis=1)	1	1
tmp_leaf[0]	1	1
data.loc[(data.passenger_fare>41) & (data.passenger_fare<=41.2) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>41) & (data.passenger_fare<=41.2) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
data['Cabin']=data['Cabin'].transform(lambda c: 0 if isinstance(c, float) else (int(c[1:]) if c[1:].isdigit() else 0))	1	1
map_table_age_df.iloc[10:15, 0] = 3	1	1
avg_err.append(np.mean( np.abs(err) ))	1	1
fig.layout.xaxis2.update({'title':'Age'})	1	1
test_df.join(family)	1	1
train[[ 'Age', 'Survived']].dropna()	1	1
"test[""Age_5""] = (45 <= test[""Age""])&(test[""Age""]<60)"	1	1
submission.to_csv('titanic.csv', index=False, header=['PassengerID', 'Survived'])	1	1
train_data.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)	1	1
"train[[""Name"", ""Title""]].head()"	1	1
Test_Master.loc[ Test_Master['Age'] <= 24, 'Age'] = 0	1	1
train['cFare']= train.Fare.apply(lambda r: 'Low' if r <100 else ('Medium' if (r>=100 and r<200) else ('High' if (r>=200 and r<=300) else 'Ultra')  )).astype('category')	1	1
"train.loc[(train[""Age""] > 32)&(train[""Age""] <= 48), ""age_c""] = ""3"""	1	1
trainOrg['AgeGroup'] = np.where(trainOrg['AgeGroup']=='Adult', 0, 1)	1	1
data['Infant'] = data.apply( lambda row: int(row['Age'] <= 8), axis = 1)	1	1
train['Age'] = train[['Age', 'Title']].apply(fill_missing_ages, axis=1)	1	1
df1['PassengerId']	1	1
trainData['IsMale'] = trainData.Sex.cat.codes	1	1
"df_test[[""Age""]]"	1	1
titanic_data.loc[titanic_data['FamilySize']==1,'FamilySizeGroup'] = 'Alone'	1	1
dfcopy.join(pd.get_dummies(dfcopy.Title))	1	1
submission['Survived'] = tree.predict(new_test)	1	1
df_train.drop(['Name','Cabin','Ticket', 'SibSp', 'Parch', 'IsAlone','Title','Embarked','Age'], axis=1, inplace=True)	1	1
test.loc[test['FamilySize']==1,'IsAlone']=1	1	1
train_o_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	1	1
test_df['Title'] = titles	1	1
df.reset_index(drop=True, inplace=True)	1	1
accuracies_svc.mean()	1	1
chi2_reduced_final_test.drop(drop, axis = 1, inplace = True)	1	1
"test[""Embarked""].fillna(test['Embarked'].mode()[0], inplace=True)"	1	1
test.drop(['PassengerId','Name','Ticket', 'Cabin'], axis = 1)	1	1
linear_reg_df[['Pclass', 'SibSp', 'Parch']].values.reshape(-1, 3)	1	1
test_data.groupby(['Pclass']).size()	1	1
ax.hist(train.loc[train['Survived']==1, 'Age'].dropna(), bins=n_bins, color='g')	1	1
titanic_df.loc[titanic_df['PassengerId'] <= train_len]	1	1
"titanic.drop([""Name""],axis=1)"	1	1
test_features.T.values	1	1
inputData['Sex'].values.tolist()	1	1
"combined[""PassengerId""][891:]"	1	1
plt.hist([df[df['Survived']==1]['FamilySize'],df[df['Survived']==0]['FamilySize']],range(0,11),label=['Survived', 'Dead'])	1	1
x_test_test_age.drop(['PassengerId'], axis=1)	1	1
train_df['Salutation'] = split_salutation.str[1]	1	1
titanic_train_data['PassengerId']	1	1
data_train['Family'].loc[data_train['Family'] > 0] = 1	1	1
known_data.Parch.max()	1	1
data['MaidenLastName'] = data.MaidenLastName.replace('None', np.nan)	1	1
"train[""Title""] = train[""Title""].map(lambda x: target[x])"	1	1
age_plot.median()	1	1
dataset['Title'] = dataset['Title'].replace('Jonkheer', 'Royalty')	1	1
dataset_df.loc[dataset_df.Ticket == tk, 'Fare']	1	1
train_df[['Embarked','Survived']].groupby('Embarked',as_index=False).mean()	1	1
data_pruned.loc[(data_pruned['Fare'] > 20) & (data_pruned['Fare'] <= 50), 'Fare'] = 2	1	1
df.Name.apply(removeAfterComma)	1	1
test.loc[i,'FareCategorical'] = test['Fare'].mean()	1	1
family['Family_count'] = family['Surname_adj'].map(dict_fcount)	1	1
data['Title']=data.Title.fillna(0)	1	1
SibSp.plot.hist(alpha=0.5,color='red',bins=50)	1	1
titanic_train_dataset[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()	1	1
test2_df['Age'].fillna(np.random.randint(age_avg - age_std, age_avg + age_std), inplace=True)	1	1
df['Family_Size'].head()	1	1
"test['Cabin'] = test['Cabin'].fillna(""Z999"")"	1	1
df_train['FarePPBin'].unique()	1	1
submission.to_csv('output.csv', index = False)	1	1
survived_cabin_h['Rate'] = survived_cabin_h[1]/survived_cabin_h.sum(axis=1)	1	1
test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']].as_matrix()	1	1
test_dataset['Title'] = label_encoder.fit_transform(test_dataset['Title'])	1	1
test['Sex_Bin'] = test['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
"ans.to_csv(""submit_svc.csv"", index = False)"	1	1
df['Age'] = df['Age'].astype('float64')	1	1
raw_data.isnull().sum()	1	1
train.corrwith(train['Survived'])	1	1
test5['IsAlone'] =  1	1	1
train_p.head()	1	1
"train_data[""FsizeD""][train_data[""Family_Size""] == 1]  = ""singleton"""	1	1
X.fillna(X.mean()) # Imputing NA with average	1	1
combined_df.loc[(combined_df['Age'] >= 16) & (combined_df['Age'] < 32), 'age_group'] = 0.25	1	1
df_train['Fare'].hist(bins=40)	1	1
allfeat['Title'] = allfeat['Title'].replace('Mlle', 'Miss')	1	1
"dataset[""Embarked""] = dataset[""Embarked""].astype(int)"	1	1
comb.join(embarked_dummies)	1	1
std.append(cv_result.std().round(3))	1	1
"trainData[[""PassengerId"",""Survived"", ""Pclass"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""IsMale""]].corrwith(trainData.Survived).round(4) * 100"	1	1
full.loc[full['Survived'].notna(),['GroupSize','Survived']].groupby('GroupSize').agg('mean')	1	1
test_df['FareRange'] = pd.qcut(test_df['Fare'], 4)	1	1
titanic_test.loc[titanic_test['Embarked']=='S', 'Embarked']=0	1	1
sim_title.replace('Mlle', 'Miss')	1	1
survivor.count() + casualities.count() - 2	1	1
row['Pclass'] == '1' or '2':	1	1
titanicTest[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
gbcRed_test.to_csv('gbcRed_test.csv')	1	1
le.transform(data[col])	1	1
train_ori.head(2)	1	1
"test_submission[""PassengerId""],"	1	1
titanic_df['SibSp']	1	1
"test_df['Family'] = test_df['Parch'] + test_df[""SibSp""]"	1	1
train_dataset.count().min() == train_dataset.shape[0] and test_dataset.count().min() == test.dataset.shape[0]:	1	1
df.drop('Survived',axis=1)	1	1
train['Age1'] = train.apply(f, axis=1).astype('category')	1	1
"df_train_features.replace({""S"":1,""C"":2,""Q"":3})"	1	1
x_train['Embarked'] = x_train['Embarked'].fillna('S')	1	1
df_full['CabinType'] = df_full['Cabin'].str[0]	1	1
train['Embarked'] = train['Embarked'].astype(int)	1	1
"test_data[""Title""] = test_data[""Title""].apply(rare_title)"	1	1
train.pivot_table(index='Sex', values='Survived', aggfunc='mean').plot(kind='bar')	1	1
df_train['Embarked'] = df_train['Embarked'].map({'S':0, 'C':1, 'Q': 2}).astype(int)	1	1
full.groupby(['Title', 'Pclass'])['Age'].median()	1	1
jack_df.sample(5)	1	1
test['Title']= test['Title'].replace('Dona', 'Miss')	1	1
master_df['Fare'].median()	1	1
MLA_compare.loc[row_index, 'MLA Train Accuracy Mean']=cv_results['train_score'].mean()	1	1
"model.add(Dense(activation=""relu"", units=6, kernel_initializer=""uniform""))"	1	1
titanic_df['Age'] = titanic_df[['Age', 'Pclass', 'FareClass']].apply(fill_age, axis=1)	1	1
test.drop(['PassengerId','Name'], axis=1)	1	1
Class_Results.head(12)	1	1
ans.astype(int)	1	1
predictions.apply(lambda x: testCVNeural(createSplitColinear(train), x, reg), axis=1)	1	1
linear_result.head(5)	1	1
df_sub.loc[np.isnan(df.Age)].drop('Age', axis=1)	1	1
dt['Embarked']=dt['Embarked'].map(port_mapping)	1	1
dt_feat_red.transform(dt_final_test)	1	1
"tot[""Title""].replace(['Don', 'Rev','Capt','Col','Major','Dr','Rev'], 'Officer',inplace=True)"	1	1
treated_df.head()	1	1
fare.mean()	1	1
full['Child'] = np.where(full['Age']<12,1,0)	1	1
train.loc[(train['Age']>=48)&(train['Age']<64),'Age']=4	1	1
train_copy['Embarked_Category'] = 0	1	1
Y.loc[train_index]	1	1
train.loc[(train['Pclass'] == 2) & (train['hasCabin1'] == 0), 'class_hascabin'] = 5 #no cabin Pclass 2	1	1
converted_df.iloc[:, 1:].values	1	1
test_data[['PassengerId']]	1	1
acc_randomForest.std()	1	1
df.drop(['Ticket'], 1, inplace=True)	1	1
dataframe['Prefix'] = dataframe.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
"df[['title','fname']] = df['firstname'].str.split(""."",1,expand=True)"	1	1
titanic.loc[(titanic['Fare']>31.275),'Fare_grouped']=3	1	1
known_family_data.FamilySize.max()	1	1
data_train.replace(to_replace='male',value=1,inplace=True)	1	1
df.head(30)	1	1
full.loc[full.Age.notnull(),'Age']	1	1
processed_df.drop(['Name', 'Ticket'], axis = 1)	1	1
data_df['Cabin'] = data_df['Cabin'].fillna(0)	1	1
names.loc[(names['countess'])==1,'mrs'] = 1	1	1
"test[""Cabin""][test[""Cabin""] == ""D""] = 3"	1	1
"train[[""Embarked"", ""Survived""]].groupby(['Embarked'], as_index=False).mean()"	1	1
df_train['TicketEncoded'] = df_train['TicketEncoded'].apply(lambda x: 'Unknown' if x.isnumeric() else x)	1	1
allset['Embarked']=allset['Embarked'].fillna(HighestBoarding)	1	1
train['Embarked'].fillna(freqEmbark,inplace=True)	1	1
train.loc[train_n+1:891, 'Survived'].astype(int)	1	1
df[['Fare', 'Survived']].groupby(['Survived'],as_index=False).mean()	1	1
test['LargeF'] = test['Fsize'].map(lambda s: 1 if s >= 5 else 0)	1	1
train.Age.hist(alpha=0.7)	1	1
dataset['FamilySize'] = dataset['FamilySize'].map( {1: 0,2:1,3:1,4:1,5:0,6:0,7:0,8:0,11:0 } ).astype(int)	1	1
train_set.shape, test_set.shape	1	1
test.to_csv( 'titanic.csv' , index = False )	1	1
Fare_Set['Fare_Grp']=tmp[0]	1	1
X.loc[(X['Fare'] > 99) & (X['Fare'] <= 250), 'Fare']   = 4	1	1
submit.to_csv('results_nn.csv',index=False)	1	1
"age[""count_of_age""] = train.groupby(""Age"").size().values"	1	1
rcParams['figure.dpi'] = 150	1	1
"titanic_df[""Title""] = titanic_df[""Title""].astype(int)"	1	1
all_data['Title'] = all_data['Title'].replace('Ms', 'Miss')	1	1
df['TitleCat'] = df['Title'].map(titlemap)	1	1
train.drop(['PassengerId','Name','Ticket','Embarked'], axis = 1, inplace = True)	1	1
test_copy.loc[(test_copy['Age'] > 50) & (test_copy['Age'] <= 60), 'Age_Category'] = 5	1	1
in ['L', 'Lady', 'Sir', 'Countess', 'Mme', 'Mlle', 'Ms']:	1	1
fares.rename('Fare')	1	1
train_df.drop(['PassengerId','Ticket'],axis=1,inplace=True)	1	1
"train_df.groupby(""Ticket"")[""Ticket""].transform(len)"	1	1
train4['IsAlone'] =  1	1	1
"train_df.drop([""PassengerId"", ""Ticket"", ""Cabin""], axis=1, inplace=True )"	1	1
test.loc[indz,'Fare'] = fare_med	1	1
train.Embarked.fillna( 'S', inplace=True )	1	1
series.apply(lambda x:((x - min_val) / scale) - 1.0)	1	1
train_df.join([pclass_dummies, sex_dummies, deck_dummies, embarked_dummies])	1	1
score.append(gbmodel.score(X_val, y_val))	1	1
data['Title'] = Titles	1	1
names_test[1]	1	1
ages_probabilities.rename(columns={'Age': 'Count', 'index1': 'Age'})	1	1
train_copy.loc[train_copy['SibSp'] == 0, 'SibSp_Category'] = 0	1	1
"dataset[""Age4""] = 0"	1	1
test['Class2'] = 0	1	1
"datacv.set_value(i, 'Name', ""Capt"")"	1	1
data_train.shape[0]	1	1
"submission.to_csv(""xg_boost.csv"",index=False)"	1	1
Fare.plot.hist(ax=ax[1],color='green',bins=30,edgecolor='black')	1	1
pd.isnull(test2['Age'][x]):	1	1
"data.loc[:,""Pclass"":]"	1	1
test_df['top_cabin'] = test_df['Cabin'].astype(str).str[0]	1	1
train.drop(['Name','Sex','Ticket','Embarked','PassengerId','Pclass','Survived'],axis=1)	1	1
train_df[['Title', 'Sex', 'Age']].groupby(['Title', 'Sex'], as_index=False).max()	1	1
train.loc[train['Survived'] == 0, 'SibSp']	1	1
data.name_title.replace(miss_titles,' Miss', inplace = True)	1	1
df_test.loc[(df_test['Fare'] > 7.91) & (df_test['Fare'] <= 14.454), 'Fare']   = 1	1	1
family[ 'FamilySize' ] = titanic[ 'Parch' ] + titanic[ 'SibSp' ] + 1	1	1
"tp.loc[tp[""Ticket_g""]==""STON"",""Ticket_c""] = 2"	1	1
full_bins['FareBin'] = pd.qcut(full_bins['Fare_adjusted'], 6)	1	1
test_data.iloc[:,0].values	1	1
temp.loc[mrmask, 'Age'] = 30	1	1
combined.loc[(combined['Pclass']==3) & (combined['Embarked']=='S')].Fare.hist(bins=100,figsize=(8,6))	1	1
X_tot.loc[i,'Age']=(X_tot.loc[i,'Age']<0)*rnd.choice(agelist)+(X_tot.loc[i,'Age']>0)*X_tot.loc[i,'Age']	1	1
gss_scores.mean()	1	1
sns.boxplot(x = 'Pclass', y ='FamilyMembers', hue = 'Survived', data = data1, ax = axis3)	1	1
ax[1].set_title('Survived = 1')	1	1
train.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.|Sex_.*|Pclass_.*|Title_.*')	1	1
df['emb_Q'] = pd.Series(map(lambda x: 1 if x == 'Q' else 0 , df.Embarked.values))	1	1
"train_labels.to_csv(""train_labels.csv"",index=False,header=False)"	1	1
"test.loc[test[""LastName""].str.startswith(title), ""Title""] = c_title"	1	1
"titanic_test.drop(columns=[""PassengerId"",""Name"",""Ticket""],inplace=False)"	1	1
pred.to_csv('submission_file.csv')	1	1
max_leaf_nodes_value_predicted.append(my_mae)	1	1
df.iloc[0,0]/df.iloc[:,0].sum()*100	1	1
"df[""Fare""].fillna(df.Fare.median(), inplace=True)"	1	1
train.groupby('Sex')['Age'].mean()	1	1
isSurvived.Survived.astype(int)	1	1
useful_feature_data.copy(deep=True)#deep copy, make a new copy, do not modify the original data	1	1
df_submission['ticket'] = df_submission['ticket'].apply(cleaner_lambda)	1	1
cabin[0]=='B' and int(cabin[1:4])<=49	1	1
complete_data[0].drop(['Survived', 'PassengerId'], axis=1)	1	1
train['Name'] = train.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
data.Fare.isnull().sum()	1	1
test.drop(['PassengerId','SibSp','Parch','Family'], axis=1)	1	1
Pclass_['Pclass_Class1'], Class2=Pclass_['Pclass_Class2'],	1	1
"df.groupby(""call"")[""Age""].mean().astype(int).to_dict()"	1	1
data[['Personal_Titles', 'Survived']], aggfunc=np.count_nonzero,	1	1
data.loc[0:11,'Name':'Ticket']	1	1
result.insert(1,'Survived', df_pr)	1	1
final_csv['Age'].fillna(final_csv['Age'].median(), inplace=True)	1	1
base_predictions_train.astype(float).corr().values	1	1
X_age_dummied['Parch_9'] = np.zeros(len(X_age_dummied))	1	1
train_df.loc[train_df['Title'] == 'Mme', 'Title'] = 'Mrs'	1	1
raw_test_df.isnull()	1	1
df['siblings_4p'] = (df.sib_sp >= 4).apply(int)	1	1
dataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace =True)	1	1
ax[1].set_title('Age vs Survived')	1	1
"train[[""Age"", ""Survived""]].groupby(""Age"",as_index=False).mean()"	1	1
"lgb_results.iloc[lgb_results[""Score""].idxmin(),:][""Parameters""]"	1	1
testingset['Age'] = testingset['Age'].fillna(-0.5)	1	1
submission['PassengerId'] = submission['PassengerId'].astype(int)	1	1
csv_train.isnull().sum()	1	1
df['Sex'] = lb.fit_transform(df['Sex'])	1	1
df['Age_index']=pd.cut(df.Age, bins=bins,labels=labels)	1	1
Survived.corr(train_df['Title'], method='spearman')	1	1
temp_df['Lname'] = temp_df.Lname.apply(lambda x:((x-mn_name)/(mx_name-mn_name)))	1	1
df_final.loc[df_final['Fare'].isnull()]	1	1
mat.loc[combination[0],combination[1]] = p_value	1	1
kpca.transform(tX)	1	1
np.size(data[:,1].astype(np.float))	1	1
data_train['Sex'].loc[data_train['Survived']==0].value_counts()	1	1
dfgendersub.head()	1	1
df_test['Fare'].fillna(value=df_test['Fare'].median(),inplace=True)	1	1
sns.boxplot(x='Pclass',y='Age',data=train,palette='autumn')	1	1
data['Cabin_Letter'] = data.Cabin.str.findall('[^a-z]\d\d*')	1	1
"dftest[""Age""].mean()"	1	1
all_data.loc[all_data['Survived'].isnull(),:].drop(['Survived'],axis=1)	1	1
plt.hist(train_df.Age)	1	1
train_df['Age'].fillna(train_df['Title_num'].map(Median_age),inplace=True)	1	1
data.reset_index(inplace=True, drop=True)	1	1
model.add(layers.Dense(128, activation='relu'))	1	1
df_all['Age'] = age['Age']	1	1
test['TicSurvProb'] = test['TicSurvProb'].replace(np.NaN, 38.38)	1	1
dataset.loc[(train['Age'] > 40) & (train['Age'] <= 50), 'AgeGroup'] = 4	1	1
original_test_data['Fare'].hist(ax=axarr[1][1])	1	1
df_survival_rate.loc[i, ['Category', 'Class']]	1	1
df['lang_group'].unique()	1	1
plt.hist(train['Age'], bins=50)	1	1
sns.boxplot(x='Pclass',y='Age',data=train_d,palette='winter')	1	1
train_df.Embarked.fillna(method='ffill')	1	1
"data_train[[""Age"", ""Survived""]].groupby(['Age'],as_index=False).mean()"	1	1
data['CabinType']	1	1
df_test.drop(drop_elements, axis = 1)	1	1
train_df['family_status'] = train_df['family_status'].replace(dict2)	1	1
test_df.drop(['Name', 'Ticket'], axis=1)	1	1
all_data.loc[:, 'LastName'] = all_data.loc[:, 'Name'].apply(get_lastname)	1	1
data.parent_alone.loc[data.PassengerId==1042] = 0	1	1
data['Name'].head(10)	1	1
train['Age']=train['Age'].fillna(age_mean_train)	1	1
"df_train.loc[:,""Survived""]"	1	1
X_val.sample(1).index[0]	1	1
"train[""SibSp""].value_counts()"	1	1
testdf['Fare'].fillna(testdf['Fare'].dropna().median(), inplace=True)	1	1
tit_df_test[['Pclass', 'Sex', 'Age','Fare', 'Embarked', 'num of relatives']]	1	1
"titanic_training_data[""FamilySize""] = titanic_training_data[""SibSp""] + titanic_training_data[""Parch""]"	1	1
dataset['Fare'].fillna(dataset.Fare.mean(), inplace=True)	1	1
titanic.iloc[:,i]=pd.Categorical(titanic.iloc[:,i])	1	1
"_df.drop([""name"", ""_name""], axis= 1)"	1	1
train_test.isnull().count()	1	1
algorithm_results.loc[index, 'Train Accuracy'] = cv_results['train_score'].mean()	1	1
"plt.hist(df_train.loc[df_train[""Survived""]==1,""Age""], label = ""Survived"", alpha = 0.3)"	1	1
"data_train[""Alone""] = [1 if x == 1 else 0 for x in data_train[""Family Size""].values]"	1	1
"merged_data[""sex""] = le.fit_transform(merged_data[""sex""])"	1	1
"test_df[""Title""] = test_df[""Title""].astype(int)"	1	1
dataset.set_value(rowIndex, 'Age11to13', 0)	1	1
train_test.loc[(train_test.Age.isnull())&(train_test.Initial=='Other'),'Age']=45	1	1
np.sum(cnf_matrix)	1	1
final.to_csv('titanic_results.csv', index=False)	1	1
"train[""SibSp""] = train[""SibSp""].fillna(0)"	1	1
df_surname['SurnameGroup_include_perishing_women'] = df_surname['Surname_perishing_women'] > 0	1	1
test_df['Title'] = test_df['Title'].replace('Mlle.','Mrs.')	1	1
"train[""Age""] = train[""Age""].fillna(av_age)"	1	1
df['Embarked'] = pd.factorize(df['Embarked'])[0]	1	1
"tr[""Age""].std()"	1	1
val_X.copy()	1	1
combined_df['cabin_known'] = combined_df.Cabin.notnull()	1	1
"titanic_df['age'] = titanic_df['Age'].fillna(titanic_df[""Age""].median())"	1	1
train_cl2.loc[:, Xcol]	1	1
row['Age'] < 17 and row['Pclass'] <= 2:	1	1
df.iloc[trn_sz:]	1	1
trained_classifiers.keys():	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',                                                 'Don', 'Dr', 'Major', 'Rev', 'Sir',                                                  'Jonkheer', 'Dona'], 'Rare')	1	1
"tmp_train.groupby([""Ticket_num"", ""Pclass""]).count()[""PassengerId""]"	1	1
submission.to_csv('submission24Apr2018.csv', index = False)	1	1
titanic.iloc[0:892,]	1	1
data.loc[data.Room > 120, 'RoomBand'] = 5	1	1
data_all['Embarked_S'] = (data_all['Embarked']==1)+0	1	1
y_pred_1.append(0)	1	1
test_set['IsAlone'] = 0	1	1
test['Fare'] = np.log1p((test['Fare'] - test['Fare'].mean()) / test['Fare'].std())	1	1
test[['PassengerId', 'Survived']].to_csv('First_Kernel_SVM_Classifier.csv', index=False)	1	1
all_data['Age'] = data[:, 2]	1	1
"df2[[""PassengerId"",""Pclass"",""Sex"",""Age"",""SibSp"",""Parch"",""Fare"",""Embarked""]]"	1	1
radViz.transform(X)	1	1
dataset.loc[(dataset['Age'] > 20.315) & (dataset['Age'] <= 30.263), 'AgeBand'] = 2	1	1
test_df.drop(['SibSp'], axis=1)	1	1
"test_data[""Age""] = (test_data[""Age""]-min_fare)/(max_fare-min_fare)"	1	1
dataset['FareBand']=pd.qcut(dataset['Fare'],4)	1	1
featured_set.loc[valid_fold] # Extract valid data with cv indices	1	1
train['Cabin'] = train['Cabin'].fillna(value='G')	1	1
numerical_columns.append('Poor_Old_Miss_Third_Class')	1	1
df_test['Fare'] = df_test.Fare.fillna(df_test.Fare.median())	1	1
"train_file[""Survived""].values"	1	1
tit_df_test['Sex'].replace(['male','female'],[1,0],inplace=True)	1	1
df['Embarked'] = df['Embarked'].apply(cat2num_embarking)	1	1
sub.iloc[idx]['Survived'] = Y_pred[idx]	1	1
deck_notnull_slice.groupby(by='deck').agg({'Survived':'mean',                                                               'PassengerId':'count',                                                               'Sex':'mean',                                                               'Age':'mean',                                                                'Pclass':'mean'})	1	1
df_comb['Embarked']= df_comb['Embarked'].fillna(value=df_comb['Embarked'].value_counts().index[0])	1	1
data.fsize.replace(uniq_fsize,uniq_fsize_2, inplace= True)	1	1
test_data['Age']=test_data[['Age','Pclass']].apply(calculate_age,axis=1)	1	1
test['Title']=test['Title'].replace('Mlle','Miss',regex=True)	1	1
X['caA'] = X['Cabin'].map({'A':1,'B':0,'C':0,'D':0,'E':0,'F':0,'G':0,'T':0,'U':0}).astype(int)	1	1
network_members.items():	1	1
dataset['Cabin_C'] = dataset['Cabin'].map(lambda s: 1 if  s == 1  else 0)	1	1
"sibsp[""Count""] = train[[""SibSp"", ""Survived""]].groupby([""SibSp""], as_index = False).count()[""Survived""]"	1	1
train.loc[train['Fare']>50,'ExpensiveTickets'] = 1	1	1
"test.loc[test[""Cabin""].notnull(), ""Cabin""] = test.loc[test[""Cabin""].notnull(), ""Cabin""].str[0]"	1	1
money_df.loc[money_df.Fare<30,'FareLabel'] = 'Cheap'	1	1
"ALL_DATA[""SocialGroup""].unique()"	1	1
test_dat.loc[test_dat['Fare'].isnull(),'Fare'] = average_fare_by_class[average_fare_by_class['Pclass'] == 1]['Fare'][0]	1	1
combine_df['Fare'][combine_df['Fare'].isnull()] = temp_df['Fare'].mean()	1	1
requests.get(request_url)	1	1
train_df['FareRange'] = pd.cut(train_df['Fare'], 6)	1	1
"testing[""Age""].fillna(training[""Age""].median(), inplace = True)"	1	1
df.drop('Cabin', axis='columns')	1	1
counts.sort_values(ascending=sort_dict[sort])	1	1
titanic_data['S'] = embarked_dummy.S	1	1
titanic_train_data['Name'].head(50)	1	1
"Adaboost_result[1][""best_model""],"	1	1
df[['Family_Size', 'Survived']].groupby('Family_Size').count().merge(df[['Family_Size', 'Survived']].groupby('Family_Size').mean(), right_index = True, left_index = True)	1	1
data2_for_analysis.iloc[:,1:].values	1	1
tr['Deck'] =tr['Deck'].replace('B',2)	1	1
model.evals_result_['validation_1'][name],	1	1
"ax[1].set_ylabel(""People Count"")"	1	1
train_dataset.sample(10)	1	1
T.style.background_gradient(cmap='hsv')	1	1
"combine_df.drop([""PassengerId"",""Survived""], axis=1).columns"	1	1
test['CategoricalAge'] = pd.qcut(test['Age'], 5)	1	1
acc.append((cm[1,1]+cm[0,0])/((cm[1,0]+cm[0,1]+cm[1,1]+cm[0,0])+1e-5))	1	1
df.loc[(df['FareGroup']>50) & (df['FareGroup']<=100),'FareGroup'] = 1	1	1
train_data.head()['Cabin']	1	1
str.get(0)	1	1
full_data.describe(include=['O'])	1	1
my_feature_columns.append(sex_feature_columns())	1	1
kaggle.iloc[i,3] = agefiller(kaggle.iloc[i,0])	1	1
dataset.loc[(dataset['Fare']>17) & (dataset['Fare']<=30),'Fare'] = 1,	1	1
np.sum(dZ1, axis = 1, keepdims= True )	1	1
final_test['Survived'] = Survived_test	1	1
train.drop(v, axis=1, inplace=True)	1	1
merged.loc[merged['FamilySize'] >4, 'Fsize'] = 'Large'	1	1
comb_data['Parch'].replace([5, 6, 9],[4, 4, 4], inplace=True)	1	1
train_dataset.drop('Cabin',axis=1,inplace=True)	1	1
dataset['Embarked'] = dataset['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)	1	1
train_df.groupby('SX')['Title_num'].value_counts().plot.bar()	1	1
df_train.loc[:,features]	1	1
"train[[""Survived"",""Age""]].groupby('Survived').median()"	1	1
train.join(person_dummies_train)	1	1
test_df_X['Pclass']=test_df_X['Pclass'].astype('str')	1	1
"data['Title'] = data['Name'].str.split("","", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
"test[""Sex""] = labelEncoder_X_1.fit_transform(test[""Sex""])"	1	1
Rf.sort_values('Rf Coef',ascending=False,inplace=True)	1	1
dataset['Title'] = dataset['Name'].map(lambda name: name.split(',')[1].split('.')[0].strip())	1	1
numeric_features.append('non_relatives_shift')	1	1
dfnum['AgeGrp'] = dfnum['AgeGrp'].replace(['child', 'teen', 'adult'], range(3))	1	1
dataframe['Cabin'].fillna('Z', inplace=True)	1	1
X_train.iloc[:, 1]	1	1
raw_train.join(ports_df)	1	1
df_train.drop(['Survived','PassengerId'], axis=1)	1	1
data_test1.loc[:, 'Survived-RF'] = clf_rf.best_estimator_.predict(np_test_features)	1	1
x_train['Missed_Cabin'] = x_train['Cabin'].map(lambda x: 0 if pd.isnull(x)  else 1)	1	1
error_rate.append(np.mean(y_predG!=y_testeG))	1	1
plt.rcParams['figure.figsize'] = (15,9.27)	1	1
"train_df_dec[""Survived""].copy()"	1	1
"full.loc[full[""FamilySize""]>4,""FamilySizeBand""]=""BigFam"""	1	1
data['Embarked'] = data['Embarked'].map( {'S': 1, 'C': 2, 'Q': 3} )	1	1
"dataset_med.loc[3,5][""Age""]"	1	1
dataset['CategoricalAge'] = pd.cut(dataset_train['Age'], 5)	1	1
train_df['Age'].dropna().max().astype(int)	1	1
"df[""F_large""] = df[""Fsize""].map(lambda s: 1 if 8 <= s else 0)"	1	1
train['X'] = 'X'	1	1
solution.head(5)	1	1
history.history['acc']	1	1
"df_train[""age_norm""]=((df_train[""Age""]-age_mean)/age_std)"	1	1
testset.Embarked.astype('category')	1	1
dataset.loc[dataset['Age']<= 18, 'Age'] = 0	1	1
dataset['CabinBool'] = (dataset['Cabin'].notnull().astype('int'))	1	1
"train[""Survived""].value_counts(normalize=True)*100"	1	1
"data_train.loc[data_train[""Embarked""] == ""Q"", ""Embarked""] = 2"	1	1
train3.drop('Survived', axis=1)	1	1
sns.boxplot(train_data['Age'])	1	1
ax[0].set_yticks(range(0,100,10))	1	1
train.drop(['CategoricalAge'], axis = 1)	1	1
train_df['Sex'] = train_df['Sex'].map(lambda x: 0 if x == 'male' else 1)	1	1
combine[0].iloc[0]['Name']	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Major"", ""Mr"")"	1	1
"df_train.loc[df_train[""Age""].isnull()]"	1	1
Train_df.describe()	1	1
train_df.loc[ set(train_df.index) - set(train_set.index)]	1	1
submission_df[['PassengerId', 'Survived']] = final_submission[['PassengerId', 'Survived']]	1	1
input_df['Name_Title'] = input_df['Name_Title'].apply(Name_Title_Code)	1	1
importances['Average'] = importances.mean(axis=1)	1	1
train_df.loc[(train_df['Fare'] > 14.454) & (train_df['Fare']<=31),'Farecat'] = 2	1	1
train_csv['Mother'] = 0.0	1	1
"x.drop([""Name"",""Ticket"",""PassengerId""], axis = 1, inplace = True)"	1	1
X_test.loc[X_test['Sex'] == 'male', 'Sex'] = 0	1	1
X_test.loc[X_test['Sex'] == 'male', 'Sex'] = 1	1	1
data[['Age', 'Survived', 'Fare', 'Parch', 'SibSp', 'Pclass']]	1	1
df_test.loc[:,['Survived','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
data['Child'] = (data.Age < age_cutoff).astype(int)	1	1
train_set[['Age', 'Fare']].describe(percentiles=[.1, .2, .3, .4, .5, .6, .7, .8, .9, .99])	1	1
test_data.drop(['Cabin'], axis=1)	1	1
"data_combined[""Age""].std()"	1	1
y_test_pred_final['Survived']	1	1
"solution_nn.to_csv(""solution_nn.csv"", index=False)"	1	1
df['fare_T'] = df['Fare'].fillna(df['Fare'].mode().values[0])	1	1
train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).count()	1	1
train.Age.values.round().astype(int)	1	1
full['Age'] = full['Age'].replace(5, '64+')	1	1
X_test_dataset.head()	1	1
model.add(Dense(54, input_dim=X.shape[1], activation='relu'))	1	1
dataset.loc[dataset['Age']<=21.0,'Age'] = 0	1	1
MDA.drop('random')	1	1
workingDataset.values	1	1
"labels.insert(0, """")"	1	1
"test_df[""Fare""] = test_df[""Fare""].fillna( train_df[""Fare""].median())"	1	1
row['Sex'] == 'female' and row['Parch'] > 3:	1	1
"_df[""familly""] = _df.sibsp + _df.parch"	1	1
"GBT_result[2][""best_score""]"	1	1
features['has_Parch'] = (features['Parch'] > 0).astype(int)	1	1
"full[""Title""] = full.Name.apply(extract_title)"	1	1
d.Sex.replace(['male','female'],[1,0])	1	1
combine.groupby('Pclass')['Fare'].mean()	1	1
df_train['Sex'].value_counts().plot.bar()	1	1
dataset.loc[(dataset['Age']> 32) & (dataset['Age']<=48), 'Age'] = 2	1	1
"dataset.drop(labels = [""Cabin""], axis = 1, inplace = True)"	1	1
train.drop(['Ticket', 'Name', 'Cabin'], axis=1, inplace=True)	1	1
df.iloc[:,1:2]	1	1
all_data['Title'] = all_data['Title'].replace(['Rev','Major','Col','Capt','Dr'],'Other')	1	1
train['Title'] = [val if val in ['Mr', 'Mrs', 'Miss', 'Ms', 'Master'] else 'Others' for val in train['Title']]	1	1
train_df[['PassengerId', 'Survived']].groupby('Survived').count()	1	1
whole.set_value(idx, 'Age', imp)	1	1
features_dataframe.head()	1	1
comb['DupTickets'].hist(bins=20)	1	1
"test.drop([""Name"", ""Title""], axis=1)"	1	1
train_data['Title'].groupby(train_data['Title']).size()	1	1
"test[""Fare_1""] = test[""Fare""]<20"	1	1
train_df['Fare'] = train_df['Fare'].fillna(-0.5)	1	1
train.groupby('Parch')['Survived'].mean().plot(kind='barh',ax=axesbi[0,2],xlim=[0,1])	1	1
"train_data[""TitleLady""] = 0"	1	1
train_df.groupby(['family_onboard','Sex']).sum()	1	1
titanic_df['SharedCabin'].loc[ titanic_df['Cabin'].isnull() ] = 0	1	1
train_df1.groupby('Embarked').count()	1	1
"train_df[[""Title"", ""Survived""]].groupby(['Title'], as_index=False).mean()"	1	1
"axes[1].bar(idx, survival_ratios, width, color='#f1b7b0', label=""Survived"")"	1	1
test['Age']=test['Age'].fillna(train['Age'].median())	1	1
df_full['TicketSizeBin'] = df_full['TicketSizeBin'].map({'alone': 0, 'normal': 1, 'big': 2})	1	1
"mix_results.loc[index, ""linear_reg""],"	1	1
df['siblings_1'] = (df.sib_sp == 1).apply(int)	1	1
df.loc[k,'age*fare']= (1/df.loc[k,'Age_sec'])*df.loc[k,'fare/ticket']	1	1
data['Title'] = data['Title'].replace(['Countess','Capt', 'Col','Don', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Ms"", ""Miss"")"	1	1
x_train['Cabin'] = x_train['Cabin'].fillna('X')	1	1
resultDf.div(resultDf.max(axis=1), axis=0)*100	1	1
"a[""Name""]"	1	1
full.iloc[:891]	1	1
Titanic.Embarked.fillna(value=ModeEmbarked)	1	1
test_dataset.loc[test_dataset.Family == 1,'IsAlone']=1	1	1
dset.drop('PassengerId', axis=1, inplace=True)	1	1
df['Travel_Alone'] = df['Travel_Alone'].astype(int)	1	1
dataset.loc[(dataset['Fare'] > 180) & (dataset['Fare'] <= 280), 'Fare']   = 6	1	1
model.add(Dense(10, input_dim=dims, activation='relu'))	1	1
predictions['RandomForest']=acurracy_RF*100	1	1
df['Name_end'] = df['LastName'].str[-1:]	1	1
models['set1']['num_attrs'] = ['Fare', 'Age', 'Family_total']	1	1
"models.append((""XGBClassifier"",  XGBClassifier))"	1	1
dfte['Cabin']	1	1
fareperperson_vs_survived['TicketGrade'] = ['Very Cheap', 'Cheap', 'Moderate', 'Expensive']	1	1
df_train[['Title','Survived']].groupby('Title').mean().sort_values(by='Survived',ascending=False)	1	1
train_dataset['Gender'] = train_dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
titanic_test['Age'][titanic_test['Age'].isnull()] = titanic_test['Age'].median()	1	1
test[['Age','Fare']]	1	1
test['CabinL'] = test.loc[test['Cabin'].str.len() == 1.0, 'Cabin']	1	1
titanic_df['Cabin'].head(10)	1	1
df2['Set'] = 'test'	1	1
final_predict_new.to_csv('hravat_titanic_pred_titl.csv',sep=',')	1	1
titanic['Age'][(Pclass2)&Family3] = titanic['Age'][(Pclass2)&Family3].fillna(26)	1	1
train[['Age','Pclass']].head()	1	1
"df.rename(index={""NaN"": 0})"	1	1
"df_train[""title_ms""] = df_train[""title""].isin([""miss."",""ms.""]).astype('uint8')"	1	1
test_data.drop(labels = ['Ticket', 'Cabin'], axis=1, inplace=True)	1	1
train_df['Name'] = train_df['Name'].map({'Mr':0, 'Low Appearence': 1, 'Master': 2, 'Miss': 3, 'Mrs': 4})	1	1
dataset.loc[ dataset['Age'] > 64, 'Age']= 4	1	1
"test[""Fare_fillin""] = test[""Fare""]"	1	1
my_submission.to_csv('submission.csv', index=False)'''	1	1
combined.loc[train.index].copy()	1	1
"train[""Pclass_2""] = train[""Pclass""] == 2"	1	1
self.add(layers.Dropout(rate = 0.1))	1	1
df_test.loc[df_test['known_age'] == 0, 'age_mid'] = 1	1	1
std.transform(test.drop('PassengerId',axis=1))	1	1
df['Title'] = df.apply(lambda x: filter_title(x['Title'], x['Sex']), axis=1)	1	1
train_df.dropna(inplace=True)	1	1
titanic_2.drop('Survived',axis=1),	1	1
train_df['PassengerId']	1	1
df_test['SmallF'] = df_test['Family'].map(lambda s: 1 if  s == 2  else 0)	1	1
"test_ToPred.loc[test_ToPred.Salutation == 'Miss','Age'] = test_ToPred['Age'].fillna(means[""Age""][""Miss""])"	1	1
df[['Age', 'Age_0', 'Age_1', 'Age_2', 'Age_3', 'Age_4', 'Age_5', 'Age_6']].head(10)	1	1
df1['Age'] = np.where((df1['Age']>10*i) & (df1['Age']<=(i+1)*10) ,((10*i) + ((i+1)*10))/2 , df1['Age'])	1	1
logi_reg_prediction.astype(int)      #prediction compute from the test dataset	1	1
"tdf['lastname'] = tdf.name.str.extract(""^([a-zA-Z \-']+),"", expand=False)"	1	1
test_df['SharedCabin'] = test_df['Cabin']	1	1
df.Age.isna().sum()	1	1
data['Title_Remap'] = data.Title.replace(mapping)	1	1
test_df['Alone'] = test_df['Family_size'] == 0	1	1
train_features.apply(lambda x: sum(x.isnull()))	1	1
train.loc[((train['Sex'] == 0) & (train['Pclass'] == 1)), 'gender_class'] = 1 #female Pclass 1	1	1
test.loc[test['Cabin'].str.len() <= 4.0, 'CabinL'] = test['Cabin'].astype(str).str[0]	1	1
test_data['Sex_Indicator']=test_data['Sex'].map({'male':1,'female':0}).astype(int)	1	1
train_df.dtypes[train_df.dtypes.map(lambda x: x=='object')]	1	1
"titanic_df[""Fare""][titanic_df[""Survived""]==1]"	1	1
Each_Passenger.loc[(Each_Passenger['Age'] > 22) & (Each_Passenger['Age'] <= 50 ) | (Each_Passenger['Fare'] > 187) & (Each_Passenger['Fare'] <= 279) , 'Age'] = 4	1	1
dataset.groupby(['Sex', variable]).size()['male'].index.values	1	1
best_dectree.best_params_.get('max_features'),	1	1
dataset.loc[(dataset['Fare'].isnull()) & (dataset['Sex'] == gender) & (dataset['Embarked'] == embarked) & (dataset['Pclass'] == pclass) & (dataset['Age'] == age),'Fare'] = guessed_fare	1	1
"df_train[""Age_cat""].head()"	1	1
test['Initial']=test.Name.str.extract('([A-Za-z]+)\.') #lets extract the Salutations	1	1
"tp.loc[tp[""Sex""]==""female"",""Sex_c""] = 1"	1	1
df_train.pivot_table(values='Fare', index='Pclass', columns='Cabin')	1	1
data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked_C', 'Embarked_Q', 'Embarked_S']]	1	1
full['LargeGroup'] = np.where(full['GroupSize']>4,1,0)	1	1
test_df['TitleKey'] = train_df['Title'].map(title_mapping)	1	1
"testingset[""Fare""][x] = round(trainingset[trainingset[""Pclass""] == pclass][""Fare""].mean(), 4)"	1	1
dft_red.head()	1	1
X.drop(['PassengerId'], axis=1, inplace=True)	1	1
df_train.loc[df_train['FamilySize'] == 0, 'FamilySize'] = 1	1	1
train_data['child'][train_data['Age'] < 18] = 1	1	1
k_precision_scores.append(precisionScore)	1	1
test.copy() # duplicating	1	1
"sns.boxplot(""Fare"",data=train_df)"	1	1
Name.values	1	1
train.loc[Outliers_to_drop,num_features]	1	1
titanic_train_data['Ticket'].value_counts(normalize=True)	1	1
encEmb.transform(train.Embarked.values.reshape(-1,1))	1	1
estimators_list.append(('KNN', knn))	1	1
ax1[0].hist(df_surv.SibSp, bins=10, range=(0,8))	1	1
df_train_features.iloc[rowin,np]=-1	1	1
estimators_list.append(('Decision Tree', dt))	1	1
KNN_submission.head()	1	1
df['FareAdjusted'] = df['Fare'] / 10.0	1	1
probas.mean()	1	1
sn.boxplot('Embarked', 'Fare', data = train)	1	1
tmp['cnt'] = cnt.sum(axis=0)[idx]	1	1
dataset['Title'] = dataset['Title'].replace(['Mme'],'Mrs')	1	1
dataset.loc[ dataset['Age'] <= 15, 'Age'] = 0	1	1
test_csv['Fare'] = test_csv['Fare'].fillna(test_csv['Fare'].mean())	1	1
train[['Age','Pclass','Fare', 'Parch', 'SibSp', 'Sex',  'Embarked_C', 'Embarked_Q', 'Embarked_S']]	1	1
test_y.astype(int),	1	1
"submission.to_csv(""Knn_sub1.csv"", index = False)"	1	1
"train_data[""FareBetween100And200""] = 0"	1	1
df.loc[((df.IsKid == 1) & (df.Pclass == 3)) , 'IK_Cl'] = 6 #poor kid	1	1
dset.loc[1196, 'FamCode'] = 1024	1	1
PassengerId.count()/float(train.PassengerId.count())	1	1
data_x.append(age_row_formatter(row))	1	1
full.iloc[0:10]	1	1
fulldata.drop(labels=['family_num'], axis=1, inplace=True)	1	1
dataset.loc[ dataset['Fare'] <= 7.91, 'Fare_Band'] = 0	1	1
dfTest['Cabin']	1	1
df['Title'] = df['Title'].map( {'Other':0, 'Mr': 1, 'Master':2, 'Miss': 3, 'Mrs': 4 } )	1	1
test['Deck'] = test['Deck'].fillna(0)	1	1
"full.set_value(full[""Embarked""] == ""S"", ""Embarked"", 0)"	1	1
"data[""Age_cohort""][(data[""Age""]>30)&(data[""Age""]<=50)]=5"	1	1
train_df[['SibSp','Survived']].groupby('SibSp').mean()	1	1
test['Sex']=test.Sex.map({'female':0,'male':1})	1	1
StackingSubmission.to_csv('StackingSubmission.csv', index=False)	1	1
test.drop(['Age_2'], axis = 1, inplace = True)	1	1
"_res.drop(""acc"",axis=1).iloc[i,:].to_dict()"	1	1
full.sample(10)	1	1
test_df.drop(['Name', 'Ticket'], axis=1, inplace=True)	1	1
data.drop('Name',axis=1,inplace=True)	1	1
"_df[""_name""]    = _df.name.apply(lambda i : i.split("", ""))"	1	1
imputer.transform(data_with_missing_values)	1	1
X_all.iloc[891:,[0,2,3,4,5,6,7,8]]	1	1
"processed_dataframe[""Fare""] = dataframe[""Fare""].copy()"	1	1
df['CabinLetter'].dropna().median()	1	1
train.fillna({'Embarked': 'S'}, inplace = True)	1	1
"AgeTypeTrain.append(""1"")"	1	1
dataframe['Name'] = newTitles	1	1
bias_acc.append(score)	1	1
"submission.to_csv(""titanic_submission_kn.csv"", index=False)"	1	1
results['Survived'] = pred_values	1	1
titanic['Age'].unique()	1	1
test['Sex']=le_sex1.fit_transform(test['Sex'])	1	1
train_df['Name'] = train_df['Name'].replace(['Capt', 'Dr','Rev','Mile','Col','Major','Countess','Jonkheer','Mme',                                            'Don', 'Ms','Sir','Capt','Lady', 'Mlle'], 'Low Appearence')	1	1
Titanic_dataframe.loc[:, 'Embarked'] = Titanic_dataframe.loc[:, 'Embarked'].str.replace('Q', '2')	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Dr"", ""Mr"")"	1	1
"full_data[""FamilyCat""][ (full_data[""Parch""] + full_data[""SibSp""]) == 0] = 0"	1	1
train['Has_Cabin'] = train['Cabin'].apply(lambda x:0 if type(x) == float else 1)	1	1
trim_data['Age'][np.isnan(trim_data['Age'])] = age_null_random_list	1	1
train_df.loc[(train_df.Embarked.isnull()), 'Embarked'] = 'S'	1	1
submission.reset_index()	1	1
tr.loc[(tr['Age']>16)&(tr['Age']<=24), 'Age'] = 2	1	1
df_test.itertuples():	1	1
"titanic_training_data[""FamilyId""] = family_ids"	1	1
"sub.to_csv(""titanic_submission_randomforest.csv"", index=False)"	1	1
"test_df[""Age""].dropna(),"	1	1
all_data.loc[all_data['data_label'] == 'test', :]	1	1
dataFrmae['Age'].mean()	1	1
dataset['Age'].loc[i] = age_similar	1	1
data_test_all['Title'] = data_test_all['Title'].replace('Mme','Mrs')	1	1
df_submit.drop(columns=['Ticket', 'Cabin', 'Name'], inplace=True)	1	1
data.loc[data.Cabin.str[0] == 'D', 'Cabin'] = 4	1	1
importances.tail(10) # least 10 important features	1	1
"evalu.to_csv(""evaluation.csv"",index=False)"	1	1
test_test_age['AgeGroup'][i] = predictions[p]	1	1
all_data['AgeBin'] = label.fit_transform(all_data['AgeBin'])	1	1
df_train_features.head()	1	1
gs_metrics.iloc[7, 5]	1	1
"titanic_training_df.loc[titanic_training_df[""Embarked""] == ""C"",""Embarked""] = 1"	1	1
df['Age'].hist() # only generates the object	1	1
imputer_test.loc[(imputer_test['Pclass'] == 2) & (imputer_test['Age'].isnull()), 'Age'] = meanAgePclass2	1	1
train.groupby('Embarked').apply(top, n=5, column='Fare')	1	1
known_age.values[:, 0]	1	1
nn.add(Dense(units=1, kernel_initializer='uniform', activation='sigmoid'))	1	1
np.where((rounded_preds==0) & (rounded_preds==Y_valid))[0]	1	1
"titanic_train[""Age""] = titanic_train[""Age""].fillna(titanic_train[""Age""].median())"	1	1
"test_df.loc[test_df[""Title""] == ""Sir"", ""Title""] = 'Rare Title'"	1	1
data1['Embarked'].fillna(data1['Embarked'].mode()[0], inplace = True)	1	1
comb.drop(columns=['Ticket','TNumeric','Pclass'])	1	1
train_processed['Embarked'].replace({'C': 0, 'S': 1, 'Q': 2}, inplace=True)	1	1
test.copy()    # Make a copy of test dataset as dsubmit that will be used for further processing	1	1
titanic['Ticket'].value_counts()  #Calculates passengers groups on each tickets and assign it to a variable 'ticketV'	1	1
"a.loc[a[""Cabin""] != 0, ""Cabin""] = 1"	1	1
df.dtypes.reset_index().sort_values([0, 'index'])['index']	1	1
df.groupby('bin_age').Survived.count()	1	1
"X.drop(""PassengerId"",axis=1,inplace=True)"	1	1
data_train_all['Sex'] = data_train_all['Sex'].replace(to_replace='male', value=0)	1	1
test.loc[(test['Fare']>300) & (test['Fare']<=350),'FareCategorical'] = 6	1	1
train_df.drop(['SibSp','Parch'],axis=1,inplace=True)	1	1
train_data['Cabin_A'] = Cabin_dummy['A']	1	1
dataset.loc[(dataset['Age'] > 50) & (dataset['Age'] <= 60), 'Age'] = 5	1	1
df_train.drop(['Age', 'SibSp', 'Parch', 'PassengerId', 'Embarked_Val'], axis=1)	1	1
test.drop(['SibSp','Parch','Family'],axis = 1, inplace = True)	1	1
test_features.drop(columns={'Sex'})	1	1
rfc_params['max_depth'] = 250	1	1
data.loc[:,['sisBroSpo', 'parentChild']].plot(subplots = True)	1	1
test_df.drop(['Cabin', 'Ticket'], axis=1)	1	1
train.loc[:, ['Survived']]	1	1
test_df['Rich_man_travelling_w_wife'] = test_df[['Child', 'Female','Class_1', 'Class_2','SibSp']].apply(is_husband,axis=1)	1	1
data['SharedTicket'] = 0	1	1
"test_df[""Name""] = test_df.Name.str.extract("".((Mrs?)|(Miss)|(Master))."", expand = False)"	1	1
train.drop('Survived',1)	1	1
data_copy.loc[:, 'Age']=data_copy['Age'].fillna(data_copy['Age'].median())	1	1
title_names_all.iteritems():	1	1
df['Has_cabin'] = df['Cabin'].notna().astype(int)	1	1
df.loc[(df['Fare']>69.4) & (df['Fare']<=77),'Fare_Cat']=4	1	1
train['Salutations']=train.Name.str.extract('([A-Za-z]+)\.')	1	1
dataset['embarked_T'].value_counts()	1	1
titanic_testxdf.drop('Ticket', axis=1)	1	1
train['nLength_group'] = train['name_length'].map(name_length_group)	1	1
train[['Age','Fare','Survived']]	1	1
final_test['Embarked'] = final_test['Embarked'].apply(transform_embarked)	1	1
title_mean_age_test.append(list(set(X_Test.Name)))	1	1
df_test.isnull().sum().sort_values(ascending=False)	1	1
titanic_test['Age'] = titanic_test['Age'].fillna(0)	1	1
titanic_train_dataframe.info()	1	1
df_train['Title'] = df_train['Name'].str.split(', ', expand=True)[1].str.split('. ', expand=True)[0]	1	1
train_df.groupby(['age']).size().shape[0] == 71: # 変更前の年齢グループ数	1	1
data_test['Embarked'] = data_test['Embarked'].map({'S': 0, 'Q': 1, 'C': 2})	1	1
cabin['Cabin_Letter']  = cabin.Cabin.apply(lambda x: findLetter(x,1))	1	1
"train[""Cabin""].dropna()"	1	1
fit.append('AdaBoost')	1	1
"train[""Sex""] = sex.reshape(-1,1)"	1	1
"dfWF[""gen""]"	1	1
"df.drop([""Survived"", ""PassengerId""], axis=1)"	1	1
data.loc[((data.PreTkt==idx[0]) & (data.TktNum == idx[1]) & (pd.isnull(data.CabinCode))),'CabinCode'] = idxMap[idx]	1	1
train_data[['Pclass','Embarked']]	1	1
all_data.iloc[i, 0] = {1: 45, 2: 30.5, 3:31}[all_data.iloc[i, 7]]	1	1
df_test['TicketEncoded'] = df_test['TicketEncoded'].apply(lambda x: 'Unknown' if x.isnumeric() else x)	1	1
"train[[""FamilySize"", ""Survived""]].groupby(['FamilySize'], as_index=False)['Survived'].agg({'Survived': ['mean','count']})"	1	1
train.drop(['Sex','Embarked','Name','Ticket','Fare'],axis=1)	1	1
test['Age'].iloc[i] = age_pred	1	1
data['Cabin'] = data['Cabin'].apply(lambda x:unknown_cabin(x))	1	1
final_test['Fare']	1	1
test['Sex'] = test['Sex'].apply(lambda sex: 1 if sex == 'male' else 0)	1	1
"dat[""tick_CA""] =  dat['Ticket'].map(lambda s: 1 if re.search(""CA"",s)!=None else 0)"	1	1
df['Name'] = pd.Categorical(df['Name'])	1	1
titanic['Ticket_lett']=titanic['Ticket'].apply(lambda x:str(x)[0])	1	1
train_df['Fare']/train_df['FamMembers']	1	1
"df[""FamilyName""]=df[""Name""].map(lambda x: x.split("","")[0].strip())"	1	1
test.dropna(subset=['Embarked'])	1	1
train_data.drop(['PassengerId','Survived'],axis=1)	1	1
test.apply(lambda x: 1 if x['Pclass'] == (idx + 1) else 0, axis = 1)	1	1
combined['Sex'] = combined['Sex'].apply(lambda x: 1 if x == 'male' else 0)	1	1
df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()	1	1
complete_age.drop('Age',axis=1)	1	1
normalizer.transform(X[train])	1	1
test_df.drop(['Sex','Age'], axis = 1, inplace=True)	1	1
"test_data[""Cabin""] = test_data.Cabin.apply(clean_cabin)"	1	1
"X_validation[""Child_col""] = ""NaN"""	1	1
params['clf_logreg'],	1	1
original_test_data['Parch'].hist(ax=axarr[2][1])	1	1
df_results_global.append(df_results)	1	1
"train.groupby(""Pclass"")[""Fare""].median()"	1	1
test_df.update(related_people)	1	1
xtest_annoted['Predicted']=pred	1	1
dataframe1.sort_index(ascending=True,axis=0)	1	1
"df[""Sex""] = df[""Sex""].factorize()[0]"	1	1
"dftest.loc[idx,""CountTicket""]=(ticket_count_train[ticket]+ticket_count_test[ticket])"	1	1
"train_df[""Survived""].values"	1	1
test['Title'] = test.Name.str.extract('([a-zA-z]+)\.',expand=False)	1	1
train.fillna(value=0, method=None)	1	1
tr2['Single'] = tr2.apply(lambda r:single(r), axis=1)	1	1
sample_submission_df.to_csv('basic_dummy_classifier.csv', index=False)	1	1
tr['Title'] =tr['Title'].replace('Mrs',2)	1	1
score['Survived'].value_counts(normalize=True)	1	1
model_data.loc[(model_data.Pclass == 3)&(model_data.Title == 1)&model_data.Age.isnull(),('Age')] = 17	1	1
plt.hist(train['Fare'], 10, facecolor='blue', alpha=0.75)	1	1
df[['Parch', 'Survived']].groupby('Parch').count().merge(df[['Parch', 'Survived']].groupby('Parch').mean(), right_index = True, left_index = True)	1	1
"submission.to_csv('submission.csv', index_label = [""PassengerId""])"	1	1
t_df['Cabin'].dropna()	1	1
"df_test_output[""Survived""] = clf.predict(df_test_x)"	1	1
train.drop(['Sex', 'Person'], inplace=True, axis=1)	1	1
cabin.sample(10)	1	1
app_test['Age'] = poly_test_features	1	1
test_copy.loc[test_copy['Fare'] <= 7.9104, 'Fare_Category'] = 0	1	1
train['Title'].replace(['Mme'], 'Mrs', inplace = True)	1	1
test_list.append(accuracy)	1	1
"test_df[""Age""] = test_df[""Age""].fillna( train_df[""Age""].median())"	1	1
test[['PassengerId','Survived']].set_index('PassengerId').to_csv('vot5.csv')	1	1
train.groupby('AgeBand').Age.describe()	1	1
"data_df['Fare_Grouped']=data_df[""Fare_Grouped""].astype(""int"")"	1	1
train_data.Parch.describe()	1	1
"submit.to_csv(""submit_Base.csv"",index=False)''';"	1	1
test_df.drop(['Name','Ticket','Embarked','Cabin'], axis=1,inplace=True)	1	1
cv_means.append(mean_accuracy)	1	1
train_short['Survived']	1	1
test.loc[ test['Age'] > 60, 'Age'] = 6 #Senior	1	1
test['Age'].values.reshape(-1,1)	1	1
X.loc[X['Name'].str.contains('Mrs')]	1	1
dat['rareTitle'].fillna( 0, inplace = True)	1	1
test_df.drop('Ticket',axis=1,inplace=True)	1	1
df.sort_values('survived_per', ascending=False)	1	1
names.loc[(names['countess'])==1,'countess'] = 0	1	1
df_combined.mean()	1	1
data.Personal_Titles_Miss.astype('category')	1	1
"test.loc[(test['SexAge']==""female""),'Female'] = 1"	1	1
trainSet.loc[:, 'Survived'][trainSet.Pclass == 1].value_counts()	1	1
"test['Fare']=test['Fare'].fillna(test[""Fare""].median())"	1	1
test_df['ElitePerson']    = test_df[['Pclass','Sex']].apply(get_elitePerson,axis=1)	1	1
passenger['Pclass'] in [1, 2]:	1	1
whole.set_value([62,830],'Emb','S')	1	1
df.drop(['Name','Age','SibSp','Parch','Ticket','Cabin','Surname'],axis=1)	1	1
data.loc[829,'Embarked'] = 'S'	1	1
res_df_solver_tol['Train_acc_'+solver_list[i]],	1	1
test_X['PassengerId'] = test_df['PassengerId']	1	1
kaggle['Fare'] = kaggle['Fare'].fillna(kaggle['Fare'].mean())	1	1
test['Cabin_Cat'] = test['Cabin'].str[0]	1	1
combinedData['Ticket'].value_counts()[selectedTicket]	1	1
res_acc.append(cross_val_score(knnClass,X,y,scoring='accuracy',cv=10).mean()*100)	1	1
data.sons.loc[data.PassengerId==680] = 1	1	1
dataset['Familysize_cat'] = 0	1	1
label.groupby(train_c.Cabin).mean()	1	1
data.loc[(data.Fare<=8.1)&(data.Pclass==3), 'PassengerCat']=5	1	1
"combine['Sex'] = combine.Sex.apply(lambda x: 0 if x == ""female"" else 1)"	1	1
original_train_data.groupby('Sex')['Survived'].sum().plot.bar(stacked=True)	1	1
combined['LargeF'] = combined['family_size'].map(lambda s: 1 if s >= 5 else 0)	1	1
df_tr.iloc[:,-1].tolist() # Final Survived column in a target array	1	1
"test_df[""NumberCabins""][cabinzeros] = 1"	1	1
params['logreg_grid_search'] = grid_search	1	1
data_copy.loc[:, 'Fare']=data_copy['Fare'].fillna(data_copy['Fare'].median())	1	1
data.loc[data['fam_size']==1,'IsAlone']=1	1	1
full.sort_values('Ticket').head(10)	1	1
test.loc[test['Embarked'].isnull(),'Embarked'] = 'S'	1	1
"df.rename(columns={'sum': ""survived"", 'count': ""Total_Passengers""})"	1	1
"test[""Name""] = test[""Name""].apply(arrangename)"	1	1
NodeList.append(Passenger2)	1	1
dfNew.loc[i] = pd.Series({'PassengerId':PassId,'Survived':surv})	1	1
n[0] = nb_features	1	1
data_out['Salutation'] = data_out['Salutation'].replace('Mlle', 'Miss')	1	1
evalu['Survived'] = test_predict_result	1	1
train.Cabin.fillna('S')	1	1
Age.dropna().median()	1	1
data.fillna(na_vars)	1	1
comb_data['Title'] = comb_data.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
rfc_submission.to_csv('rfc_submission.csv', index = False)	1	1
"train_dataset.drop(""Survived"",axis=1).as_matrix()"	1	1
test['Age']=test['Age'].fillna(age_mean_test)	1	1
train_dataset.loc[(train_dataset['Age'].isnull()) & (train_dataset['Title']=='Miss'),'Age'] = 22	1	1
frame.loc[(frame.Fare > 7.91) & (frame.Fare <= 14.454) , 'Fare'] = 1	1	1
df['FamSize2'] = pd.cut(df['FamSize'], [0, 1, 4, 11], labels=['single', 'small', 'large'])	1	1
train_d['Survived']	1	1
dataset['Fare'] = dataset['Fare'].fillna(32.20)	1	1
submission.sample(5)	1	1
search_df.empty:	1	1
titles['Title'] = titles['Title'].replace(['Lady', 'Capt','Dona','Don', 'Jonkheer', 'Rev', 'Countess', 'Col', 'Dr', 'Sir', 'Major'], 'Rare')	1	1
model.add(Dense(units=1))	1	1
dataFrame['Sex'] = dataFrame['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
"df_test[""FamilySize""] = df_test[""SibSp""] + df_test[""Parch""] + 1"	1	1
test_df['Type'] = test_df['Type'].map({'male':0, 'female':1, 'child':2})	1	1
"SVC_result[2][""best_score""]"	1	1
X_train['missing_values'] = numpy.zeros((len(X_train),1))	1	1
trainData['Fare'].plot(kind='box')	1	1
"data[""Age""].fillna(data[""Age""].median(skipna=True), inplace=True)"	1	1
test_data['SibSp'] + test_data['Parch'] + 1	1	1
X.fillna(X.mean(), inplace=True)	1	1
dataset.loc[ (dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31.0), 'Fare' ] = 2	1	1
ctb_pred1.append(PTest)	1	1
dataset.loc[ dataset['Age'] <= 12, 'Age'] = 0,	1	1
RF_submission.head()	1	1
Xtrf_df['Deck'] = Xtrf_df['Cabin'].str.extract('(^[A-Z]{1})', expand=True).fillna('G')	1	1
X_train_selected.head()	1	1
test.loc[((test['Sex'] == 1) & (test['Pclass'] == 3)), 'gender_class'] = 6	1	1
"corr[""Fare""].sort_values(ascending=False)"	1	1
g.fillna(dict_ticket_cabin[g.name])	1	1
Titanic_train_dataframe.describe(include='all')	1	1
"x.drop(""index"", axis=1)"	1	1
"test_soft_pred_matrix.to_csv(""test_soft_pred_matrix.csv"")"	1	1
df.loc[ df.Fare.isnull(), 'Fare' ] = df[ df.Pclass==3 ].Fare.median()	1	1
traindat.isnull().sum()	1	1
test['Fare'] = test['Fare'].fillna(np.median(train['Fare']))	1	1
train_dataset['Embarked'].isnull().sum()	1	1
"train[""Age""][np.isnan(train[""Age""])] = rand_age_train"	1	1
imputer_train.loc[(imputer_train['Pclass'] == 3) & (imputer_train['Age'].isnull()), 'Age'] = meanAgePclass3	1	1
L1_pred.transpose()	1	1
imp.transform(train_data)	1	1
test.drop(drop, axis=1, inplace=True)	1	1
csv_train['Age'].describe()	1	1
full['Age'] = full['Age'].replace(3, '32-48')	1	1
df.loc[((df.Cabin == 1) & (df.Pclass == 1)) , 'Ca_Cl'] = 4 #rich with cabin	1	1
df_all.drop(['Name','PassengerId','Ticket'],axis=1)	1	1
test_df['Pclass'] = test_df['Pclass'] - 1	1	1
"test_data[""Title""] = test_data[""Name""].map(lambda x: x.split()[1].strip('.').strip(','))"	1	1
df_titanic_test['Survived']	1	1
train.groupby(['AgeBand'])[['Survived']].count()	1	1
importances['Importance'] = pd.Series(random_forest.feature_importances_)	1	1
train_features.loc[test_index]	1	1
"result.to_csv(""survived_predictions_1.csv"", index=False)"	1	1
sns.boxplot(x='Pclass',y='Age',data=test,ax=ax[1])	1	1
test_df.drop('PassengerId', axis=1).values	1	1
dataset['test_x'] = test_x	1	1
df.loc[(df['FareGroup']>100) & (df['FareGroup']<=200),'FareGroup'] = 2	1	1
dataFrame['Fare'] = dataFrame['Fare'].fillna(dataFrame['Fare'].median())	1	1
titanic_training_data.apply(get_family_id, axis=1)	1	1
original['Age'] = original['Age'].replace(np.nan, original['Age'].mean(), regex=True)	1	1
"a.loc[(a[""Title""] == ""Mr"") & (a.Age.isnull()), [""Age""]] = mr_age"	1	1
"test[""Age""] = test[""Age""].fillna(train[""Age""].mean())"	1	1
test.loc[(test['farePP'] >= 26.0), 'fareCat'] = 3	1	1
dataframe['Prefix'] = dataframe['Prefix'].replace('Mme', 'Mrs')	1	1
df['fem_perc'] = (df[df.columns[1]]/(df[df.columns[0]] + df[df.columns[1]]))	1	1
train.values # 变成ndarray	1	1
all_data.iloc[i, 8] == 'male':	1	1
full_df.loc[full_df['source']=='test']	1	1
df['Name']: #go through each person and identify their title and assign it a number	1	1
"traindat[""Ticket""].value_counts()"	1	1
"model.add(Dense(activation=""relu"", units=9, kernel_initializer=""uniform"",input_dim=9))"	1	1
"train7[""Mr""] = train7[""Name""].apply(lambda x: x.count(""Mr.""))"	1	1
plt.hist(train['FamilySize']);	1	1
X_test.drop(['SibSp','Parch'], axis = 1, inplace=True)	1	1
df_raw.isnull().sum().sort_index()/len(df_raw)	1	1
"predictions[""SVC""] = (acc_svc, Y_pred_svc)'''"	1	1
sns.boxplot(x = 'Fare', data = train_raw)	1	1
data['Sex'] = data['Sex'].map({'female':0, 'male':1}).astype(int)	1	1
"train_features.drop(""Survived"",axis=1)"	1	1
x_test['Fare'] = x_test['Fare'].fillna(x_test['Fare'].mean())	1	1
X.drop(self.to_drop, axis=1)	1	1
df_analysis['Embarked'].apply(lambda x: x if x != '' else 'S')	1	1
dataset['has_cabin_T'].value_counts()	1	1
scores1.mean(), scores2_tune2.mean(), scores3.mean(),	1	1
test.drop(columns=['Ticket','Cabin'], axis=1, inplace = True)	1	1
df_titanic.info()	1	1
df.loc[0,:]	1	1
PssID_df['Survived'] = best_model.predict(test_get_dummies)	1	1
plt.hist([df[df['Survived']==1]['Parch'],df[df['Survived']==0]['Parch']],bins=7,range=[0,7],label=['Survived', 'Dead'])	1	1
dataset['AgeGroup'], agebins = pd.cut(dataset['Age'], 6, labels=range(6), retbins=True)	1	1
"family_data['FamScore'].loc[family_data['FamScore']==0] = ""Alone"""	1	1
titanic_dirty.head()	1	1
test.Fare.fillna(test.Fare.mean(),inplace=True)	1	1
"test.drop([""PassengerId"",""Family_flag""],axis=1)"	1	1
full.Age.isnull()	1	1
df['Survived'] = survived	1	1
"models.append((""SVM"",SVC()))"	1	1
full_dataset['Age'].iloc[i] = age_pred	1	1
Xtest.select_dtypes(include=['object']).copy()	1	1
testds.fillna(testds.mean(),inplace=True)	1	1
dataset ['Embarked'] = dataset['Embarked'].fillna(freq_port)	1	1
combined['Child'] = combined['Age'].map(lambda s : 1 if s < 7 else 0)	1	1
titanic_raw_train.shape	1	1
"test_df[""Age""][np.isnan(test_df[""Age""])] = replacement_random_vals_test"	1	1
"df['Title'] = df['Name'].apply(lambda x: x.split(sep = ',')[1].split(sep = ""."")[0].strip())"	1	1
df_analysis['Cabin'].apply(extract_deck_str).value_counts().sort_values()	1	1
df_test['FareAvg'] = df_test['Fare'] / df_test['FamilySize']	1	1
"sub.to_csv(""titanic_submission_xgboost.csv"", index=False)"	1	1
df_test.loc[df_test['PassengerId'] == 1044, 'Fare'] = 13.675550	1	1
"titanic_df.drop([""Survived"", ""Age""],axis=1)"	1	1
df_titanic_test_mod['Embarked'].replace('S',1,inplace=True)	1	1
train['CabinLetter'] = train['Cabin'].str[0]	1	1
ax[0].set_title('SibSp va Survived')	1	1
test['CabinIsNan'] = [False if val == val else True for val in test['Cabin'].tolist()]	1	1
counts.append(l)	1	1
em_map['S'] = 0	1	1
dataset.loc[dataset['Sex']=='male','Sex'] = 0	1	1
predict_arr.astype(int)	1	1
"plt.hist(df.query(""Age>0"").Age, bins=40)"	1	1
dataset.loc[(dataset['Age'] == -1) &(dataset['Title'] == 'Mrs'), 'Age'] = 35.78	1	1
test_dataset.loc[test_dataset['Cabin'].notna(), 'Cabin_Status'] = 1	1	1
df['Name'].str.extract(' ([A-Za-z]+)\.',expand=False)	1	1
clean_train.isnull().sum()	1	1
predictions.to_csv(dest_file, index=False)	1	1
df_test['Age']  =  df_train.apply(impute_age, args =(medians_by_parch,) , axis=1)	1	1
np.shape(y_train)	1	1
train.loc[(train['Fare']>400) & (train['Fare']<=450),'FareCategorical'] = 8	1	1
dataset['Age']	1	1
Test_Master['Cabin_T'] = 0	1	1
df_train.corr(method='pearson')	1	1
train_df.loc[train_df.Embarked.isnull(), 'Name']	1	1
"train[""Embarked""].fillna(embarked.index.max(), inplace=True)"	1	1
test.drop(features_to_drop, axis=1)	1	1
x['title']	1	1
"titanic_train[""Person""] = titanic_train[[""Age"",""Sex""]].apply(get_person, axis = 1)"	1	1
titanic_df.drop(['PassengerId','Name','Sex','SibSp','Parch','Ticket','Embarked'],axis=1,inplace=True)	1	1
train_set['Embarked'] = labelencoder_x2.fit_transform(train_set['Embarked'])	1	1
df['EmbarkedCat'] = pd.Categorical.from_array(df.Embarked.fillna('C')).codes	1	1
X_full['SibSp'] =full['SibSp']	1	1
test_data.join(test_data['FName'].str.split('.', 1, expand=True).rename(columns={0:'Title', 1:'FirstName'}))	1	1
df.Age.fillna(-.5)	1	1
"titanic_test.loc[titanic_test[""Sex""]==""male"", ""Sex""] = 0"	1	1
"train.drop([""PassengerId"", ""Pclass"",""Name"", ""Sex"", ""Ticket"", ""Cabin"", ""Embarked""], axis = 1,inplace = True)"	1	1
data['Embarked'] = data['Embarked'].fillna(freq)	1	1
titanic_test.join(pd.get_dummies(titanic_test.Sex,prefix='Sex'))	1	1
test_data.drop(['Sex','Embarked','Pclass','Name','Ticket','Cabin'],axis=1,inplace=True)	1	1
"train_df[""Title""] = train_df['Title'].map(title_mapping)"	1	1
"train_dataset[""Embarked""]=train_dataset[""Embarked""].fillna(""S"")"	1	1
df_all['Ticket_count'] = df_all['Ticket'].apply(lambda x: ticket_count[x], 1)	1	1
df.drop('Name', inplace = True, axis = 1)	1	1
train.values, train_survived.values	1	1
test_df.loc[(test_df['Age'].isnull())&(test_df['Title']=='Miss'),'Age'] = 22	1	1
titanic_df['Age'] = titanic_df[('Age')].astype(int)	1	1
dataset['Age'][np.isnan(dataset['Age'])] = rnd.randint(age_mean - age_std, age_mean + age_std, size= nan_count)	1	1
combined.assign(children = combined.apply(lambda row: deriveChildren(row['Age'], row['Parch']), axis = 1))	1	1
big['Fare'] = big['Fare'].fillna(big['Fare'].mean())	1	1
test['Embarked'].fillna('N', inplace=True)	1	1
train.groupby(['Sex','Pclass', 'Title'])	1	1
sns.boxplot(x='Survived', y='Fare', data = df_analysis);	1	1
df_output[['PassengerId','Survived']].to_csv('output1.csv',index=False)	1	1
titanic_df.reindex(np.random.permutation(titanic_df.index)) #randomize dat shi	1	1
"titanic_test[""Age""] = titanic_test[""Age""].fillna(rand_2 )"	1	1
df['Ca_Cl'] = 0	1	1
data.loc[data['Family'] == 1, 'FamilyGroup'] = 1	1	1
fill_fare.loc[fill_fare['Pclass']==pclass, 'Fare'] = pclass_mean[pclass]	1	1
X.loc[row,'Cabin'].startswith('F'):	1	1
train.loc[train['Fare']<10,'CheapTickets'] = 1	1	1
DataSetTrain['Fare'].min()	1	1
train_hard_pred_matrix.loc[:,topmodels(df=train_hard_pred_matrix)]	1	1
"train_data[""FareBetween200And300""] = 0"	1	1
train_df[['Sex', 'Survived']].groupby('Sex').mean()	1	1
"train_kaggle.groupby([""Pclass""])[""Alive"", ""Not_alive""].sum().plot.bar(title = ""Pclass feature distribution related to target variable"")"	1	1
data.loc[data.Survived==1, col].value_counts()	1	1
X.apply(lambda x: sum(x.isnull()),axis=0)	1	1
"train.loc[(train[""Pclass""]==2)&(train[""Survived""]==1), ""Age""]"	1	1
data.Age.astype(float).fillna(data['Age'].median())	1	1
"LR_result[2][""best_score""]"	1	1
train_copy['Fare_Category'] = 1	1	1
np.where(X_test[variable].isin(frequent_cat), X_test[variable], 'Rare')	1	1
test_ds['FamilySize']= test_ds['Parch'] + test_ds['SibSp'] + 1	1	1
cate_ids.append(dtypes.index.get_loc(index))	1	1
data_train['hasCabin'] = data_train['Cabin'].isnull().astype(int)	1	1
"X_test[""Fare""].fillna(X_train[""Fare""].mean(), inplace=True)"	1	1
"titanic['Child'] = 0    # Creates a new feature ""Child"" and assigns initial value '0'"	1	1
train_csv.loc[(train_csv.Name.str.contains('Mr') & train_csv.Age.isnull()), 'Age'] = Mr_average_age	1	1
df.shape[0] - live_total	1	1
train[['Pclass', 'Name', 'Sex', 'Age', 'Cabin', 'Embarked']]	1	1
df_test['age_snr'] = df_test['Age'].apply(lambda x: 1 if x >= 50 else 0)	1	1
train_set['Title'].value_counts()	1	1
deck_analysis_df.reset_index(inplace=True)	1	1
train_df.loc[:, Xcol]	1	1
titanic_train_org.head()	1	1
X.Age.fillna(X.Age.mean(), inplace=True)  # replace NaN with average age	1	1
train.Family.loc[train.Family == 0] = 0	1	1
train_dataset.head(10)	1	1
"cvs[""Score_low2z""]=score.mean()-score.std()*3"	1	1
df.sort_values(['PassengerId'], ascending=[True]).reset_index(drop=True)	1	1
df.to_csv('df2.csv',index=False) #去掉第一列,行索引列	1	1
train.groupby('Embarked')['Survived'].mean().plot(kind='barh',ax=axesbi[1,0],xlim=[0,1])	1	1
test['Embarked']=test['Embarked'].apply(convertEmbarked)	1	1
test.loc[test['Fare'].isna(),'Fare'] = 13.91	1	1
combined_data.drop('Cabin',axis=1,inplace=True)	1	1
train_data['FareBand'] = pd.qcut(train_data['Fare'], 4)	1	1
df_test.replace(np.NaN, np.nan, inplace=True)	1	1
i['classes']:	1	1
titanic_test.loc[titanic_test['Fare'].isnull() == True, 'Fare'] = titanic_test['Fare'].mean()	1	1
test_df.drop(['Name','Ticket','Cabin','Embarked'],axis=1)	1	1
train_copy.loc[train_copy['Parch'] == 2, 'Parch_Category'] = 2	1	1
titanic_train.hist(bins=10,figsize=(9,7),grid=False)	1	1
titanic_df['SharedCabin'].loc[ titanic_df['Cabin'].duplicated() ] = 1	1	1
sns.boxplot(x='Survived',y='Fare',data=train_data,ax=ax1)	1	1
"data[""Survived""].corr(data[""Age""]),"	1	1
train_copy.loc[(train_copy['Age'] > 10) & (train_copy['Age'] <= 20), 'Age_Category'] = 1	1	1
"submission.to_csv(""../input/submission.csv"", index=False)"	1	1
"df[""Ticket""].str.extract('^(.+) [0-9]+$',expand=False)"	1	1
dataset_df['Connected_Survival'] = 0.5 # default	1	1
train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False). mean().sort_values(by='Survived', ascending=False)	1	1
"test['cabin_binary'] = test[""Cabin""].apply(lambda i: 0 if str(i) == ""nan"" else 1)"	1	1
male_variable.append(raw_male_variable[i] if i in male_variable_index else 0)	1	1
df['SexAdult'] = df[['Age', 'Sex']].apply(get_sex_adult, axis=1)	1	1
list_tmp_ind.append(i)	1	1
train[['Sex', 'Survived']].groupby(['Sex']).mean().plot(kind='bar', ax=ax2)	1	1
traindf[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()	1	1
test['Title'][i]=meantitle['Survived'][j]	1	1
"submit.to_csv(""submit.csv"",index=False)"	1	1
train_df.groupby('Name')['Age'].mean()	1	1
combined.corr().Age **2  # R2 = square of corr. R2 is the deterination coefficent	1	1
"df.query(""istrain == 0"")"	1	1
df_full['AgeBin'] = pd.qcut(df_full['Age'], 4, labels=False).astype(int)	1	1
dataset.loc[ (dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age' ] = 3	1	1
median_imp_age.hist(bins=30)	1	1
network.add(Dense(units = 5, kernel_initializer = 'uniform', activation = 'relu'))	1	1
rawdata.ix[(rawdata.Fare > 7.775) & (rawdata.Fare <= 8.662), 'FareCategory'] = 1	1	1
"total_result.loc[alone_in_test, ""Survived""] = (total_result.loc[alone_in_test,alo_algs].sum(axis=1) >= n_algs - 1).astype(int)"	1	1
df_final.drop(['Ticket', 'Name', 'Cabin', 'SibSp', 'Parch', 'PassengerId'], axis=1)	1	1
drop_elementsNMD.append('CabinNum')	1	1
ohe.transform(df_train[f])	1	1
"test_df[""Fare""] = test_df[""Fare""].fillna(test_df[""Fare""].mean())"	1	1
df['Pclass_3'][df['Pclass_3'] == 1][df['Survived'] == 1].count()	1	1
titanic.groupby(['Pclass','Sex']).Survived.value_counts()	1	1
test.loc[(test['Pclass'] == 2) & (test['isAlone'] == 0), 'class_alone'] = 2	1	1
scaler.transform(X_train4)	1	1
df.loc[df.Age.isnull(),'Age'] = mean_age	1	1
"df[""Class""].value_counts()"	1	1
data['Ticket_String_Id'] = data.Ticket_String.map(lambda x: Ticket_Strings_dict[x]).astype(int)	1	1
csv_final_test['Age'] = csv_final_test['Age'].fillna(age_mean)	1	1
test_df.describe(include = 'all')	1	1
"aq_group[""Age""].mean()"	1	1
titanic_df.groupby(titanic_df['ticket_prefix'] != 'None').count()['PassengerId']	1	1
train.iloc[:,1].as_matrix()	1	1
results['Survived'] = dt.predict(results).astype(int)	1	1
train[['Pclass','Fare']]	1	1
test.info()   # Age Fare Cabin 均存在缺失值	1	1
new_test['Fare'] = np.log(new_test['Fare'])	1	1
test_df['SX']=test_df['Sex'].map(pd.Series(data=range(S.size),index=S))	1	1
"test.drop([""Embarked"", ""PassengerId"",""Ticket""], axis=1)"	1	1
"train['CabinN2'] = ""999"""	1	1
surnames.head()	1	1
features.fillna(0)	1	1
df.iloc[index].Title	1	1
"train[""Age""][np.isnan(train[""Age""])] = rand_1"	1	1
ds.append(pd.get_dummies(train[col]))	1	1
sns.boxplot(joined['Age'][joined['Survived'] == 0], ax=ax2, width=0.3, color='orange')	1	1
test_data.drop(['SibSp','Parch'],axis=1)	1	1
features.append('parch')	1	1
FeatureDF['Title'] = FeatureDF['Name'].apply(ExtractAndMapTitle)	1	1
"traindf[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).mean()"	1	1
sns.boxplot(x='SibSp', y='Age', hue='Survived', data=df3)	1	1
train.drop(['PassengerId','Cabin',],axis=1,inplace=True) #passenger id does not contribute in model building	1	1
"df.loc[pd.notnull(df[""Cabin""]) & df[""Cabin""].str[-1].isin([""0"", ""2"", ""4"", ""6"", ""8""]),""CabinSide""] = ""Port"""	1	1
dataset['Fare'] = dataset['Fare'].fillna(dataset['Fare'][dataset['Pclass']==3].mean())	1	1
axarr[0].scatter(train['Age'], train['SibSp'])	1	1
dataset.groupby(['Embarked', variable]).size()['C'].index.values	1	1
sns.boxplot(x='Pclass',y='Age',hue='Sex',data=train_data,palette='magma')	1	1
train_data['Pclass'].isnull().sum()	1	1
all_df.groupby('Title')['Age'].mean()	1	1
"train[[""Survived"", feat]].groupby(by=feat).mean().plot.bar()"	1	1
"data.drop(""Cabin"", axis=1)"	1	1
Y_hat.eval({X: X_test})	1	1
results['PassengerId'] = data_test['PassengerId']	1	1
train.drop(['Cabin'],axis=1,inplace=True)	1	1
df_test.loc[ df_test['Fare'] <= 7.91, 'Fare'] = 0	1	1
df.Ticket.head(40)	1	1
comb.Title.loc[comb.Title.isin(['Ms'])] = 'Miss'	1	1
titanic_test_data['Fare'].head()	1	1
test_df_numerical.shape	1	1
czech_ryanair.items():	1	1
test['Single'] = test['Fsize'].map(lambda s: 1 if s == 1 else 0)	1	1
Test.drop('Embarked',axis=1)	1	1
dataset.loc[dataset.Name.str.contains('Mraster') & dataset.Age.isnull(), 'Age'] = master_ave	1	1
df['shared_fare'] = df['Fare'] / df['ticket_owners']	1	1
train.groupby('Sex').Survived.mean()	1	1
df['Died'] = (df['Survived'] == 0).map(lambda x: 1 if x == True else 0)	1	1
"ax2[0].set_title(""Sex and Age vs Survived"")"	1	1
train['Cabin_Num'] = train['Cabin'].str.extract('(\d+)')	1	1
df.drop(['Age_age'], axis=1, inplace=True)	1	1
combined_df['Age'][combined_df['Title'] == 3].mean()	1	1
"train[""Cabin""][train[""Cabin""] == ""D""] = 3"	1	1
"train.drop([""Survived"", ""Family_flag""], axis=1)"	1	1
df.pivot_table(values = 'Survived', index = 'Alone').Survived.plot.bar()	1	1
dr.reset_index(drop=True, inplace=True)	1	1
df['FareBand'] = 0	1	1
"data_train[""Survived""].value_counts()"	1	1
acc_gaussian.std()	1	1
df['A'][0:100].plot(title='A', style='.')	1	1
train_df['Title'].value_counts().plot.bar()	1	1
dataset.groupby(['Embarked', variable]).size()['S']	1	1
data_test.drop(['PassengerId'], axis = 1,inplace = True)	1	1
missing_data['Total'][i] > 0:	1	1
ds['Title'] = ds['Title'].replace(['Capt', 'Col', 'Don', 'Dr', 'Jonkheer'], 'Rare')	1	1
sns.boxplot(data=df_age, x='Survived', y='Age', orient='v', color='lightsteelblue')	1	1
sib.var()	1	1
train_data.Embarked.fillna(train_data.Embarked.value_counts().idxmax(), inplace=True)	1	1
train_df.drop(['Person'], axis = 1, inplace = True)	1	1
dataset['Age'][i] < 32:	1	1
"train[""title""] = [i.replace('Col', 'rare') for i in train.title]"	1	1
train_df['Fare_bins'] = pd.cut(train_df['Fare'], bins=fare_bins, labels=fare_labels, include_lowest=True)	1	1
test['calculated_fare'].fillna(0,inplace = True)	1	1
ax[0].set_title('SipSp vs Survived')	1	1
"test['solo'] = test[""family_size""].apply(lambda i: 1 if i == 1 else 0)"	1	1
missing.rename(columns={'Name': 'passenger_count'})	1	1
"ages_prob[""Age""].values.tolist()"	1	1
test['Cabin'] = test['Cabin'].fillna(value='G')	1	1
"test_df.loc[(test_df.Age.isnull()), ""Age""] = median_age"	1	1
D.values	1	1
df['Title'] = df['Title'].replace(['Col','Dr','Major'], 'MidNoble')	1	1
sex_agg['rate'] = sex_agg.apply(lambda row: row['sum'] / row['count'], axis=1)	1	1
train_df['Title']=train_df['Name'].apply(lambda name: get_title(name))	1	1
train_data['Fare'].max()	1	1
model.add(layers.Dense(10, activation='relu', input_shape=(len(featureColumns),)))	1	1
df_train['Age'] = df_train[['Age', 'Sex', 'Pclass']].apply(fill_age, axis=1)	1	1
"df[""CabinFloorScore""].loc[df['CabinFloor'] == ""D""] = 3"	1	1
"df[""TGS_norm""] = df[""TicketGroupSurvivors""] / df[""TicketGroupSize""]"	1	1
train_data['Embarked'] = train_data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2}).astype(int)	1	1
test_df.to_csv('test_result.csv', index=False)	1	1
dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age2'] = 1	1	1
df_all['Embarked'].mode()	1	1
X_train1.loc[:,('Age', 'SibSp','Parch','Fare','Sex1', 'Pclass1')]	1	1
data['FamilySize'] = data['Parch'] + data['SibSp'] + 1	1	1
predictions.apply(lambda x: testCVSVM(createSplitColinear(train), x, reg), axis=1)	1	1
"train_ini.append(re.findall(r""\w+\."",i))"	1	1
dataset.replace(encoded_cols, inplace=True)	1	1
model.add(Dense(units=3000))	1	1
models['XGBoost'] = XGBClassifier(objective='binary:logistic', **xgb_params)	1	1
titanic_df.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)	1	1
"Titanic_Kaggle_Submit.to_csv(""Titanic_Kaggle_Submit_voting_clf.csv"", index=False)"	1	1
data['Embarked'] = data['Embarked'].fillna('Southampton')	1	1
titanic_train.hist(bins=50, figsize=(20,15))	1	1
in ['Pclass', 'Embarked','Sex', 'Survived', 'SibSp', 'Parch']:	1	1
test_set.copy()	1	1
np.mean(_d.history['val_acc'])	1	1
"train_df[""Age""] = train_df[""Age""].fillna( train_df[""Age""].median())"	1	1
train_X['Title'] = train_X['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)	1	1
"df.loc[i, ""Alone""] = 1"	1	1
"df.loc[i, ""Alone""] = 0"	1	1
n[1]==featureList[i]:	1	1
t['title'] = t['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
train['c_std'].max()	1	1
all_predictions.values:	1	1
train_X['FareBin_Code'] = label.fit_transform(train_X['FareBin'])	1	1
data.set_value(179, 'TicketClean', int(med1))	1	1
"children[[""Survived"", ""Age""]].groupby([""Age""], as_index=False).mean()[""Survived""].mean()"	1	1
train_df['Sex'] == 'female'	1	1
test_df.isnull().sum()/ len(test_df) *100	1	1
data.drop(droplist, axis = 1)	1	1
arr.keys():	1	1
plt.hist(df_all[df_all['Survived']==1]['_Fare'], bins=100)	1	1
date_df.head()	1	1
for_fittin.info(), for_fittin.sample()	1	1
in ['Don', 'Sir', 'Jonkheer']:	1	1
test_data['Fare'][test_data['Fare'].isnull()] = test_data['Fare'].mean()	1	1
df_test['Survived'] = pd.Series(pred)	1	1
test_set['FamilyCount'] = test_set['SibSp'] + test_set['Parch']	1	1
data_train.loc[data_train['Survived']==1,'Embarked'].value_counts()	1	1
titanic_train_dataset[['CategoricalFarePerPerson', 'Survived']].groupby(['CategoricalFarePerPerson'], as_index=False).mean()	1	1
test.apply(lambda row: get_family_id(row, family_id_mapping), axis=1);	1	1
test4['FamilySize'] = test4['SibSp'] + test4['Parch'] + 1	1	1
df['PassengerId'].values[TRAINSIZE::];	1	1
dataset.loc[(dataset['Age'] > 10.368) & (dataset['Age'] <= 20.315), 'AgeBand'] = 1	1	1
test.Cabin.apply(lambda x: x[0])	1	1
train_X['Cabin_level'] = train_X['Cabin'].apply(get_cabin_level)	1	1
date_ids.append(dtypes.index.get_loc(index))	1	1
df['has_age'] = (df.age > 0).apply(int)	1	1
train.Embarked.iloc[61]= 'S'	1	1
d['Title'] = d['Title'].replace('Mme', 'Mrs')	1	1
train_data.drop(['Survived', 'is_test'], axis=1)	1	1
data['Title_code'] = encoder.fit_transform(data['Title'])	1	1
data.loc[(data.Fare > 7.91) & (data.Fare <= 14.454), 'FareBand'] = 2	1	1
X.drop(['PassengerId','Ticket','Cabin','Embarked','Name'],axis=1,inplace=True)	1	1
spines['right'].set_visible(False)	1	1
"sns.boxplot(x = ""Embarked"", y = ""Fare"", hue = ""Pclass"", data = X_test, ax = ax[1]);"	1	1
vectorizer.transform(testData[column]).toarray()	1	1
"train_df.loc[ (train_df.Age.isnull()), ""Age""] = median_age"	1	1
df[['SibSp', 'Parch']].hist(figsize=(16, 10), xlabelsize=8, ylabelsize=8);	1	1
submission.to_csv('New Submission.csv',index=False)	1	1
test.Cabin.fillna('Unknow')	1	1
Anova.loc[var[0],'Anova F value'] = anova_one_way[0]	1	1
"results_df[""PassngerId""] = test_df.index"	1	1
females_xt.div(females_xt.sum(1).astype(float), axis=0)	1	1
test_df.loc[test_df['familySize']==1,'IsAlone'] = 1	1	1
titanic_raw_train.head()	1	1
df.copy() # save df containing string features to use for plotting later	1	1
"accuracy_models.sort_values(by=""Accuracy"", ascending=False)"	1	1
train.FamilySize.describe()	1	1
df_train['Embarked_Val'] = df_train['Embarked']                                .map(embarked_locs_mapping)                                .astype(int)	1	1
score_b.append(b)	1	1
test_data.Age.sum(axis=0)/test_data.index.size	1	1
models_df['ValidationScore']	1	1
"dataset[""Age""].iloc[i] = age_med"	1	1
missing_data1.iloc[:,[1,2,4,5,6]].values	1	1
test_data['SEX'] = test_data['SEX'].cat.rename_categories([0,1])	1	1
titanic_df.dropna(inplace=True)	1	1
"data.query('Pclass == 3 and Sex == ""male""');       data6['Age'] = data6['Age'].fillna(25)"	1	1
titanic['log_fare'] = np.log(titanic['Fare']+1)	1	1
"results[""Accuracy""]=Acc"	1	1
"DataFile[""Cabin""] = DataFile['Cabin'].apply(lambda x: str(x)[0])"	1	1
train.drop(columns=('Survived'), inplace=True)	1	1
test['InGroup'] = dataset.iloc[train_len:, -1].reset_index(drop=True)	1	1
whole.set_value(193,'Fid',174) # Andersen-Jensen with Jensen	1	1
"inDF.groupby(""Surname"").size().to_dict()"	1	1
narrowed.fillna(narrowed.mean())	1	1
df_train['Name'].str.split(',', n=1, expand=True)	1	1
test.drop(['Name'],axis = 1, inplace = True)	1	1
Age.plot.hist(alpha=0.5,color='blue',stacked=True, bins=50)	1	1
train_df['Age'].isnull().sum() / len(train_df)	1	1
dataset['AgeBand'] = pd.cut(dataset['Age'], bins=[0, 1, 12, 18, 21, 29, 36, 60, 100])	1	1
test_df.loc[ (test_df.Age.isnull()) & (test_df.Gender == i) & (test_df.Pclass == j+1),                'AgeFill'] = guess_ages[i,j]	1	1
all_df['Ticket'].unique().tolist()	1	1
np.dot(np.dot(X2,Vx),np.linalg.inv(np.diag(sx)))	1	1
best_classifier.items():	1	1
train['FareScaled'] = 0	1	1
train_raw[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
train_df['Salutation'] = train_df['Salutation'].replace(['Planke,','Don.','Rev.','Billiard,','der','Walle,','Dr.','Pelsmaeker,','Mulder,','Steen,','Carlo,','Mme.','Impe,','Ms.','Major','Gordon,','Messemaeker,','Mlle.','Col.','Capt.','Velde,','the','Shawah,','Jonkheer.','Melkebeke,','Cruyssen,', 'Khalil,', 'y'], 'Other')	1	1
X_train['PassengerId'] = all_data_PassengerId.iloc[:train.shape[0]]	1	1
df_1['survival'] = df_1['Survived']	1	1
x_train['Embarked'] = embarked_encoder.fit_transform(x_train['Embarked'])	1	1
X.sex.values	1	1
"df[""Fare""].fillna(df_train.Fare.median(), inplace=True)"	1	1
"X[""Parch""] + X[""SibSp""]"	1	1
test.loc[(test['Pclass'] == 3) & (test['hasAge'] == 1), 'class_hasage'] = 6	1	1
titanicTest.drop('Name',1)	1	1
tickets['ticket_prefix'] = split.apply(lambda s: get_element(s))	1	1
np.sum((y-t))	1	1
train['c_std'].min()	1	1
df3_train_X.shape	1	1
df_train.drop('Survived', axis = 1).copy()	1	1
test_df.columns.isin(['sibsp', 'parch', 'familysize']).any():	1	1
data.corr().Fare.sort_values(ascending = False)	1	1
titanic.iloc[61,11] = 'C'	1	1
test['FamilySize']	1	1
train.loc[(train['Age'] > 13), 'age_cat'] = 'adult'	1	1
"df[""Survived""].sum()/nRows"	1	1
dfTrain['Survived'].groupby(dfTrain['Ticket_FirstLetter']).mean()	1	1
data.drop(Feature_to_drop,axis=1,inplace=True)	1	1
"train[""Family_Size""] = train[""SibSp""] + train[""Parch""] + 1"	1	1
train.loc[(train['SibSp'] != 0), 'Alone'] = 0	1	1
data.loc[(data.Age > 26) & (data.Age <= 37.5), 'AgeBand'] = 2	1	1
train_dat.copy(deep = True)	1	1
df_data[['Age', 'SibSp', 'Parch', 'Fare', 'Pclass_1',                    'Pclass_2', 'Pclass_3', 'Gender', 'Singleton', 'FamilySmall', 'FamilyLarge', 'Child',                    'Embarked_C', 'Embarked_Q', 'Embarked_S', 'Embarked_nan']]	1	1
df_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].median())	1	1
no_family['Friends_group'] = no_family.groupby('Ticket')['PassengerId'].transform('count')	1	1
combined.Ticket.replace(t_nShare.index.values,t_nShare.tolist())	1	1
data['Age'] = data['Age'].fillna(data['Age'].dropna().median()).astype(int)	1	1
sns.boxplot(y='Fare', x='Pclass', ax=ax1, data=train_df, linewidth=1, saturation=5, palette=palette3)	1	1
Titanic_dataframe.loc[:, 'Embarked'] = Titanic_dataframe.loc[:, 'Embarked'].fillna('3')	1	1
dataset.loc[(dataset['Sex'] == gender) & (dataset['Embarked'] == embarked) & (dataset['Pclass'] == pclass),'Age'].dropna()	1	1
np.sum(term) / len(X_train)	1	1
ship['Title'].loc[ship['Title'] == 'Mlle'] = 'Miss'	1	1
"df_test.hist(""Fare"", by=[""Embarked"", ""Pclass""],layout=[4,3], figsize = [15,15], bins=10)"	1	1
tX.as_matrix()	1	1
X_train['Age']= X_train['Age'].fillna(X_train['Age'].mean())	1	1
data_frame.update(train.Sex.apply(lambda x: 1 if x == 'male' else 2));	1	1
"test[""Age""].fillna(test.groupby(""Title"")[""Age""].transform(""median""), inplace = True)"	1	1
titanic.boxplot('Age',by='Sex',figsize=(10,5),rot=10)	1	1
titanic_test_data.loc[titanic_test_data.Sex == 'male', 'Sex'] = 1	1	1
temp_df.drop('Ticket_number', axis = 1, inplace = True)	1	1
df['Sex']=label_encoder.fit_transform(df['Sex'].astype('str'))	1	1
"data.drop([""Cabin""],axis=1)"	1	1
"X[""Title""] = X[""Name""].apply(get_title)"	1	1
data_test['Cabin']	1	1
data['Fare']     = data['Fare'].fillna(data['Fare'].median())	1	1
cvs_all.append(cvs)	1	1
combined_data['Name_title']	1	1
titanic_train_df.Age.loc[titanic_train_df['Title'] == 'Mrs'] = titanic_train_df.Age.fillna(titanic_train_df[(titanic_train_df['Title'] == 'Mrs')]['Age'].mean())	1	1
test_data['Survived'] = 1  # 增加一列survived 方便后面操作～	1	1
raw_train['Age'].hist(bins=100, grid=True, alpha=0.8, color='gray')	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Mme', 'Mrs')	1	1
data_all['Child'] = (data_all['Age']>18)+0	1	1
clean_train.drop(columns = 'Survived')	1	1
df.loc[ (df['Age']>30) & (df['Age']<=55) , 'AgeGroup'] = 'Adult'	1	1
titanic_train.groupby(['Embarked', 'Sex'])['Survived'].mean()	1	1
data['Emb_Q'] = (data['Embarked']=='Q').astype(int)	1	1
Y_out['PassengerId'] = test_df['PassengerId']	1	1
"data_to_submit.to_csv(""output_2.csv"",index=False)"	1	1
test['encodedTitle'] = le.transform(test['title']).astype('int')	1	1
train_cp['Title'] = train_cp['Title'].replace('Mme', 'Mrs')	1	1
"predictions[""KNeighbors""] = (acc_knn, Y_pred_knn)"	1	1
df_train_clean_age.groupby('Pclass')['Survived'].mean()	1	1
Xtrf_df['Embarked'] = Xtrf_df['Embarked'].fillna('S')	1	1
"test.assign(famSize = test[""SibSp""] + test[""Parch""])"	1	1
test.loc[(test['Age'] > 35) & (test['Age'] <= 60), 'Age'] = 5, #Adult	1	1
train_df.loc[train_df['Fare'].idxmax()]	1	1
test_mod['Sex'] = test_mod['Sex'].map(genders)	1	1
train['Age'] = train.groupby(['Pclass', 'Sex'])['Age'].transform(lambda x: x.replace(np.nan, x.median()))	1	1
parameters[0]	1	1
test.loc[test['Age'].isnull(),'hasAge'] = 0	1	1
dataset.loc[(dataset['Age']>28.0)&(dataset['Age']<=38.0),'Age'] = 2	1	1
df_test.join(dummies, how='outer')	1	1
"train['CabinN1'] = ""999"""	1	1
np.round(x*100, n_dec)	1	1
df_raw.sample(5)	1	1
"df.drop([""Name"", ""Sex"", ""Ticket"", ""Cabin"", ""Embarked"", ""Cabin_I""], axis=1, inplace=True)"	1	1
test['age_bin'] = encoder.fit_transform(pd.cut(test.Age,6))	1	1
"titanic_test_data[""FamilySize""] = titanic_test_data[""SibSp""] + titanic_test_data[""Parch""]"	1	1
survivor.describe()	1	1
Test.drop(['Embarked'], axis=1)	1	1
train_df['Survived'] = trainingdata['Survived']	1	1
params_init['num_threads'] = 16	1	1
xgb_stacked_grid.cv_results_['std_test_score'][xgb_stacked_grid.best_index_],	1	1
testOrg.drop(['SibSp','Parch','Embarked','Age','Fare','family','Pclass'],axis=1)	1	1
df_sibsp.merge(df_parch)	1	1
train_df['Cabin'] = train_df['Cabin'].fillna('!!!')	1	1
train.drop(['Cabin'], axis =1, inplace=True)	1	1
test_df['Person']    = test_df.apply(get_person,axis=1)	1	1
"full.drop(""Name"", axis=1, inplace=True)"	1	1
data.groupby(['Fare_Range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer')	1	1
full_train_set.loc[full_train_set['Pclass'] == 2]	1	1
full['LastName'] = full.Name.str.split(',').apply(lambda x: x[0]).str.strip()	1	1
"train['Title1'] = train['Name'].str.split("", "", expand=True)[1]"	1	1
df.groupby('Status')['Age'].mean().to_dict()	1	1
dataset.loc[(dataset['Age'] > 30) & (dataset['Age'] <= 40), 'Age']        = 2	1	1
df['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)	1	1
dataset_train['Ticket_Length'] = dataset_train['Ticket'].apply(lambda x : len(x))	1	1
full_data['CategoricalAge'] = pd.cut(full_data['Age'], 5)	1	1
data.drop(['Title'], axis=1, inplace=True )	1	1
data['Cabin_char'].fillna(value=-9999, inplace=True)	1	1
dataset['AgeBand'] = pd.cut(dataset['Age'], 5)	1	1
x['Fare'].fillna(x['Fare'].median(), inplace=True)	1	1
df['Title'] = df['Name'].str.extract('([A-Za-z]+)\.', expand=True)	1	1
"train_data.merge(age_sal_grouped_median, on=""Salutation"", how=""inner"")"	1	1
"test[[""PassengerId""]]"	1	1
data['Age_category'] = age_categories	1	1
data.loc[data['Age'] <= 17, 'SortAge_3'] = 0	1	1
data_train_df['Survived']	1	1
titanic_traindf.Age.isna().sum()	1	1
train_df_X_num.as_matrix()	1	1
df['FamSize'] = 0 #alone people	1	1
df_train.replace(np.NaN, np.nan, inplace=True)	1	1
data_df.drop(['FareBin'], 1, inplace=True)	1	1
data_df['Title'] = data_df['Title'].astype(int)	1	1
df2.groupby('age_grp').agg({'Survived':['mean','sem']})	1	1
"train_dataset[""Survived""].as_matrix()"	1	1
"train.boxplot(column=""Age"",by=""Survived"", ax = ax_lst[1])"	1	1
"titanic_training_df['Age'] = titanic_training_df[""Age""].fillna(titanic_training_df[""Age""].median())"	1	1
df_test['Embarked'].describe()	1	1
test_df.Age.fillna(test_df.Age.dropna().max(),inplace =True)	1	1
test_data.Fare.sum(axis=0)/test_data.index.size	1	1
all.loc[all['Survived'].isin([np.nan]) == True]	1	1
titanic_df['Title'].head()	1	1
plt.boxplot(x = data1['FamilySize'], showmeans = True, meanline = True)	1	1
test['Age'].fillna(test.Age.mean(), inplace=True)	1	1
all_data['Family'] = all_data['SibSp'] + all_data['Parch']	1	1
new_train.iloc[:,7].values	1	1
map_table_age_df.iloc[0:5, 2] = [4, 30, 45, 41, 48]	1	1
missing_elements.copy().astype(np.float16)	1	1
titanic_test.join(pd.get_dummies(titanic_test.Title,prefix='Title'))	1	1
df_train['FamilyCount'] = (df_train['SibSp'] + df_train['Parch'])	1	1
titanic.loc[:,cnames]	1	1
"test_df[""EmbarkedInt""] = test_df[""Embarked""].map({""S"": 0, ""C"": 1, ""Q"": 2}).astype(int)"	1	1
combined_data['Ticket'].value_counts()	1	1
train_set.drop('SibSp', axis = 1, inplace = True)	1	1
"submission_lr[""Survived""] = test[""Survived""]"	1	1
test.loc[test[(test['Pclass'] == 3) & (test['Fare'].isnull())].index, 'Fare'] = df['Fare'][df['Pclass'] == 3].mean()	1	1
df_test['Title'] = pd.to_numeric(df_test['Title'])	1	1
X['Survived'].copy()	1	1
plt.hist([df[df['Survived']==1]['NameLen'],df[df['Survived']==0]['NameLen']],bins=10,label=['Survived', 'Dead'])	1	1
train['Cabin'].fillna('U', inplace=True)	1	1
"train[""Master""] = False"	1	1
train['SibSp']=train['SibSp'].apply(replace2)	1	1
train_df['Title'] = train_df['Title'].replace('Ms.','Miss.')	1	1
cabins_df.replace({'Cabin': r''+cabin+'.*'}, {'Cabin': cabin}, regex=True)	1	1
dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1 #+1 because it indicates the person of the i-th row	1	1
test.Age.fillna(value = avgAge_test)	1	1
train_df.iloc[:,1]	1	1
train_df.drop(['Name','Pclass','Age','Ticket','Sex','SibSp','Parch','Fare','Cabin','Embarked','Age_categories','Fare_categories'], axis=1)	1	1
combined_features['Title']=combined_features.Title.map(Title_Dictionary)	1	1
names.Name.equals(name)	1	1
arr['D'].append(row)	1	1
data_test_all.Age.fillna(data_train_all.Age.median())	1	1
df2.drop('Cabin', axis=1, inplace=True)	1	1
non_missing_data1.iloc[:,[1,2,4,5,6]].values	1	1
data['Pair_Family'] = data.apply( lambda row: int(row['Family_Size'] == 2), axis = 1)	1	1
feature_sets_ints.append([vocab_to_int[word] for word in each.split()])	1	1
comb['TGroup'] = comb['Ticket'].apply(lambda x: str(int(x.split(' ')[-1])//10))	1	1
df['FamilySize'] = pd.cut(df.SibSp + df.Parch, bins, labels = labels)	1	1
train['Cabin'] = train['Cabin'].apply(lambda x: x[0])	1	1
"sibsp[""Count""] = train[[""Parch"", ""Survived""]].groupby([""Parch""], as_index = False).count()[""Survived""]"	1	1
test4['Age'] = test4['Age'].fillna(test4['Age'].median())	1	1
enc.transform(X_le)	1	1
test[['Sex', 'Embarked', 'Deck']] = test[['Sex', 'Embarked', 'Deck']].apply(lambda feat: encoder.fit_transform(feat))	1	1
test['Embarked'][test['Embarked'] == 'C'] = 1	1	1
data_train['FarePP_bins'] = le.transform(farepp_qcut_train)	1	1
dataset['Title_Mr'] = dataset['Title'].map(lambda s: 1 if s == 1 else 0)	1	1
dataset.loc[ dataset['Age'] <= 18, 'Age'] = 1	1	1
train_X['IsAlone'].loc[train_X['FamilySize'] > 1] = 0 # now update to no/0 if family size is greater than 1	1	1
combined['Age_grp'] = pd.cut(combined['Age'],5,labels=[1,2,3,4,5])	1	1
train_df.drop('New_Age', axis=1, inplace=True)	1	1
test_df['Ticket']	1	1
train_p['Family'].loc[train_p['Family'] > 0] = 1	1	1
"train[[""Pclass"", ""Survived""]].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
"test_df[""Embarked""] = test_df[""Embarked""].apply(embarked_indexer)"	1	1
tt['FamilySize'] = tt['SibSp'] + tt['Parch'] + 1 # Summary the number of family members for each people	1	1
test['Sex']*test['Parch']	1	1
person_dummies_titanic.drop(['male'], axis=1, inplace= True)	1	1
df['FareCat'] = pd.to_numeric(df['FareCat'])	1	1
dataset['upperClass'] = np.where(dataset['Pclass']==1,1,0)	1	1
dt['Isalone']=0	1	1
"df_train['Sex'] = pd.Categorical(df_train[""Sex""])"	1	1
"test.loc[test['Embarked'] == ""S"", 'Embarked'] = 1"	1	1
train_X['Parch_9'] = 0	1	1
titanic_test['Companion'] = titanic_train['SibSp'] + titanic_train['Parch']	1	1
submission['Ticket_numerical_temp'] = pd.cut(x = submission['Ticket_numerical'], bins=bins, include_lowest=True)	1	1
dfcopy.Pclass.isnull().sum() == 0	1	1
"fold_importance_df[""feature""] = X_stack.columns"	1	1
"dat['Title'] = dat['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
train_d.drop(['Parch','SibSp'],axis=1)	1	1
df.loc[df.Survived.notnull()]	1	1
"axs5[0].set_title(""People on the Titanic"", fontsize=20)"	1	1
test.loc[(test['AgeModified']>20) & (test['AgeModified']<=30),'AgeCategorical'] = 2	1	1
test_data.drop('Cabin', axis = 1)	1	1
axis1.spines['bottom'].set_linewidth(0)	1	1
data['Sex']=data.Sex.map({'female':0,'male':1})	1	1
trainData.head(n=20)	1	1
X_test['Age'].fillna(X_test['Age'].median(), inplace=True)	1	1
df1.describe(include=['O'])	1	1
data1[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean(),	1	1
cross_val_score.mean()	1	1
test.iloc[150:155,:]	1	1
test_data['Survived'].value_counts(ascending= False)	1	1
data['Survived'][data.Child == 1].count(),	1	1
dataset['Age'] = dataset['Age'].fillna(value=35)	1	1
data_test['Sex'] = gender_encoder.transform(data_test['Sex'])	1	1
data['Title'] = data.Name  # for now copy name directly	1	1
df.loc[((df.Sex == 1) & (df.Cabin == 0)) , 'Se_Ca'] = 1 #male without cabin	1	1
train2['Embarked'] = le.fit_transform(train2['Embarked'])	1	1
df_train.Cabin.describe()	1	1
"titanic_training_data.loc[titanic_training_data[""Embarked""]== ""C"",""Embarked""] = 1"	1	1
df_data['TicketRef'] = df_data['Ticket'].apply(lambda x: str(x)[0])	1	1
train_df.Embarked.values.reshape(-1,1)	1	1
train['Age_0'].head(10)	1	1
data_train['Age'].hist(bins=70)	1	1
tf['Embarked'] = tf['Embarked'].apply(emb)	1	1
test_df.loc[test_df['Age']>64,'Age_band']=5	1	1
df_k.mean()	1	1
my_data.info()	1	1
train['Pclass'][train['Survived'] == 0].value_counts()	1	1
titanicTest.drop('Fare',1)	1	1
combined_df['age_known'] = combined_df.Age.notnull()	1	1
scale.transform(X_test20)	1	1
df_train['Age'] = df_train[['Age','Pclass']].apply(agerep,axis = 1)	1	1
test_df_age[['Pclass', 'Fare', 'Age', 'Family', 'Sex_d']]	1	1
"train7[""Survived""]"	1	1
trainData.groupby(feature).agg(['sum','count'])['Survived']	1	1
data['NetworkNum'] = 0	1	1
df.loc[df['FareGroup']<=50,'FareGroup'] = 0	1	1
test.fillna(train.mean())	1	1
titanic_df['w_family'] = w_family.values	1	1
df_train.pivot_table(index=['Sex', age_bin], columns='Pclass', values='Survived')	1	1
train2.corr()	1	1
classifiers_summary.append(cv_calc_s,ignore_index=True)	1	1
train_df.dtypes.value_counts()	1	1
"xval_ex_df[[""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""family_size""]]"	1	1
df['Cabin'] = label.fit_transform(df.Cabin)	1	1
big['XCabin'].iloc[group] = 'U'	1	1
"X.drop(""Ticket"", axis=1)"	1	1
test_data['Survived'] = y_	1	1
titanic_test['Embarked'] = titanic_test['Embarked'].fillna(titanic_test['Embarked'].mode()[0])	1	1
"test.drop([""Ticket"", ""Cabin""], axis=1)"	1	1
combine.drop(['Name'], axis=1)	1	1
full['Title'] = pd.factorize(full['Title'])[0]	1	1
tr.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)	1	1
X.loc[:,'Age'].min()	1	1
test_orj.copy()	1	1
fare_df.insert(0,'Fare',fare_data)	1	1
merged_df['Embarked'].value_counts().idxmax()	1	1
combined['Title'] = combined['Title'].replace(['Ms', 'Mlle'], 'Miss')	1	1
titanicTest.drop('Ticket',1)	1	1
titanic_df.drop(['SibSp'],axis=1,inplace=True)	1	1
test.drop('Fare',axis = 1,inplace = True)	1	1
test_data['Embarked'] = test_data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2}).astype(int)	1	1
combine.ix[(combine.Family>4),'Fsize'] = 'big'	1	1
df.drop('Embarked', axis=1, inplace=True, errors='ignore')	1	1
data.groupby(['Pclass'])['Survived'].mean()	1	1
gbc_predictions.to_csv('submission.csv')	1	1
"train_kaggle[""Alive""] = train_kaggle[""Survived""].apply(lambda s : s )"	1	1
age1.mean()	1	1
train_df0.groupby('Sex').count()	1	1
Z.copy()	1	1
ax[1].set_yticks(range(0,550,50))	1	1
train_data.pop('Survived')	1	1
"test.drop([""PassengerId"",""Name"", ""Ticket"", ""Cabin""], axis = 1)"	1	1
cur['PassengerId'] = p_id	1	1
in ['A','B','C','D','E','F']	1	1
df_test_raw.query('Fare != Fare')	1	1
_df.loc[_df[old].isna(), :].index	1	1
data['SharedTicket'] = ticket['SharedTicket'] # joins by index, works correctly	1	1
"train_df[""Gender""] = train_df[""Sex""].map( {""female"": 0, ""male"": 1} ).astype(int)"	1	1
model.add(Dense(1, activation='sigmoid'))  # output layer	1	1
train_df.shape[0]-ntr-ncv	1	1
"combined.loc[pid,""Age_cat""] = assign_Age_cat(aq_avg_age)"	1	1
dataset['Age'].dropna().mean()	1	1
df1['Survived'].value_counts(normalize=True)	1	1
row['Age'] == 3 or 4 or 5 or 2 or 1 or 0.42:	1	1
titanic_sub.fillna(-999)	1	1
df.drop([col for col in df.columns if col not in label], axis=1)	1	1
Xt.shape	1	1
pd.merge(test,history[['Name','Survived']],on='Name', how = 'left')	1	1
testData.tail()	1	1
"TicketTrim.append(""N"")"	1	1
train.drop(['Ticket','Cabin'],axis = 1)	1	1
train_dummies.corr()['Survived']	1	1
number[1]	1	1
fig.axes	1	1
train['Has_Cabin']=train['Cabin'].apply(lambda x : 0 if type(x)==float else 1)	1	1
"train['Sex'] = train['Sex'].map({""male"" : 0,""female"" : 1})"	1	1
train_cl.dropna().loc[:, Ycol]	1	1
train_data.groupby(['Sex'])['Survived'].value_counts().div(train_data.groupby(['Sex'])['Survived'].count()).unstack().plot.bar(stacked = True, ax=axes[0])	1	1
titanic_train['Cabin'] = titanic_train['Cabin'].map(lambda x: diction_value(x, d))	1	1
df.Age[15:30]	1	1
Train_Master.loc[ Train_Master['Fare'] == 0.0 , 'Fare'] = 0	1	1
"second_class_didnt_survive.plot.hist(fc=(1, 0, 0, 0.5), normed=1, label=""Did not Survive"")"	1	1
"train.loc[(train.Embarked.isnull()),'Embarked'] = ""S"""	1	1
train['Children'] = 0	1	1
data.parents.astype(np.uint8)	1	1
train.loc[boolColVec, 'Age'] = np.double(0)	1	1
sol.to_csv('./my_prediction.csv', index = False)	1	1
scores.append( best_lsvc.score(X_test, y_test) )	1	1
traindf.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)	1	1
test['Surname'] = [test.iloc[i]['Name'].split(',')[0] for i in range(len(test))]	1	1
combined_df['title'] = combined_df['title_extracted'].str.lower()	1	1
results2[['PassengerId','Survived']]	1	1
sub_rf.to_csv('rf.csv',index=False)	1	1
data.drop(['Cabin', 'Ticket', 'PassengerId', 'Survived'], axis=1)	1	1
test.loc[(test['SibSp'] == 0) & (test['Parch'] == 0),'isAlone'] = 1	1	1
train.drop(labels=['PassengerId','Survived','Name'],axis=1)#Dropping PassengerId, Name it is inconsequential	1	1
data_train.drop(['FareBand'], axis=1)	1	1
train6['IsAlone'] =  1	1	1
df_test.drop(['PassengerId'],axis=1)	1	1
train.groupby('Parch')	1	1
rfc_params['min_samples_leaf'] = 0.01	1	1
np.mean(train_predict == train.Survived.values)	1	1
df.pivot_table(values='Age',index=['New_Salutation'],columns=['Pclass', 'Sex'], aggfunc=np.median)	1	1
train[['SibSp', 'Survived']].groupby(['SibSp'], as_index = False).mean().sort_values(by = 'SibSp')	1	1
train['tkno'] = train['Ticket'].str.extract('(\d\d+)', expand=True)	1	1
full.loc[(full['Age'] > 16.136) & (full['Age'] <= 32.102), 'Age'] = 2	1	1
test.Cabin.fillna('N').str[:1]	1	1
x['Name'] == 'SVC':	1	1
output_svm.to_csv('svm2.csv', index= False)	1	1
"title_dict[""REV""] = 6"	1	1
ax[0].set_xticks(domain_1)	1	1
train.loc[(train['farePP'] < 8.6), 'fareCat'] = 1	1	1
"train.drop(columns=['PassengerId', ""Pclass"", 'Name', ""Sex"", ""Age"", 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', ""Embarked"", ""Age_Categories"", 'SibSp_Categories', 'Parch_Categories', 'Cabin_T'])"	1	1
test_df.drop(['Name','Ticket'], axis=1, inplace=True)	1	1
"train[[""Fare_cut"",""Pclass"",""Survived""]].groupby([""Fare_cut"",""Pclass""], as_index=False)['Survived'].agg(['mean','count'])"	1	1
test_data.drop(labels='Name', axis=1, inplace=True)	1	1
RMSEs.append(training_root_mean_squared_error)	1	1
accuracy.append(metrics.accuracy_score(prediction, y_val))	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',     'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')	1	1
"test[""Sex""]"	1	1
test.drop(['PassengerId','Name'],axis=1,inplace=True)	1	1
dataset['isAlone']=0	1	1
train.loc[(train['Age']<=12),'SexAge'] = 'children'	1	1
"train[""Age""] = train.groupby(""Title"")[""Age""].transform(lambda x: x.fillna(x.mean()))"	1	1
df_test['Cabin']	1	1
dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 48), 'Age'] = 2	1	1
dataset[['Age','SibSp','Parch','FamilySize']] = scaler.fit_transform((dataset[['Age','SibSp','Parch','FamilySize']]))	1	1
df_train['Ticket'].str.strip().str.split(' ', n=1, expand=True)	1	1
test_df.Age.fillna(test_df.Age.mean(), inplace=True)	1	1
finalResult.reset_index()	1	1
pd.DataFrame.from_dict(fp_pred_items, orient='index')	1	1
submission.to_csv('CNN-submission-simple-cleansing_5Layer.csv', index=False)	1	1
df['gender_num'] = df['Sex'].map( {'female':0, 'male':1} ).astype(int)	1	1
data[5]	1	1
names.loc[(names['ms'])==1,'ms'] = 0	1	1
Titanic.Fare.fillna(value=MedianFare)	1	1
submission.to_csv('submission_' + name + '.csv', index=False)	1	1
tit_df.iloc[0:891, 0].values	1	1
df1.iloc[:,[2,4]]	1	1
features.append('fare')	1	1
"corr_matrix[""Fare""].sort_values(ascending=True)"	1	1
dataset.loc[(train['Age'] > 70) & (train['Age'] <= 80), 'AgeGroup'] = 7	1	1
knn_predictions_wo_TGS.sum()	1	1
test3.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
embark_dummies_test.drop(['Q','S'], axis=1, inplace=True)	1	1
"data_test[""Embarked""].apply(lambda x: 4 if type(x) == float else Embarked_dict[x])"	1	1
idx.sort_values(inplace=True)	1	1
data['Embarked'].replace('C', 2, inplace=True)	1	1
train['InGroup'] = dataset.iloc[:train_len, -1]	1	1
X.loc[y.isnull()]	1	1
"dataset['Title']   =   dataset['Title'].map({""Mr"": 1, ""Miss"": 2, ""Mrs"": 3, ""Master"": 4, ""Rare"": 5})"	1	1
df_copied[0:891].copy()	1	1
each['Title'] = each['Title'].replace('Mme', 'Mrs')	1	1
"agetraindf[""Age""]"	1	1
dataset['Fare'].hist(density=True)   # histogram	1	1
"train.drop([""Survived"", ""PassengerId""], axis=1)"	1	1
data.parent_alone.loc[data.PassengerId==1294] = 0	1	1
titanic_test_df['Agecat'] = le.fit_transform(titanic_test_df['Agecat'].map( {'infant': 0, 'child': 1, 'young': 2, 'adult': 3, 'Senior': 4}).astype(str))	1	1
feature_dict.items():	1	1
"train['Title'] = train[""Name""].str.extract(' ([A-Za-z]+)\.',expand=False).map(title_map)"	1	1
sub_gbdt['PassengerId'] = df_test['PassengerId']	1	1
"titanic_df.groupby(['Pclass','Sex'])['Survived'].sum().plot(kind=""bar"", figsize = (10,10), grid = 10 ,logy = 0, title = ""No of people survived along with their Pclass and Sex"").set_ylabel(""Frequency"")"	1	1
titanic_df.append(test_df)	1	1
train_df['Cabin_cat'] = train_df['Cabin_cat'].fillna('U')#unknown	1	1
"titanic_train.corr()#[""Survived""]"	1	1
training_data.loc[(training_data['Age'] >15)].loc[(training_data['Age']<=30 )]	1	1
train_df.loc[ (train_df.Age.isnull()) & (train_df.Gender == i) & (train_df.Pclass == j+1),                'AgeFill'] = guess_ages[i,j]	1	1
dataset.loc[(dataset['Age'] <= 10), 'AgeGroup'] = 1	1	1
train4.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
X.loc[(X['Fare Group'] > 99) & (X['Fare Group'] <= 250), 'Fare Group']   = 4	1	1
test['Cabin'] = test['Cabin'].apply(keepfirst)	1	1
"final_output.to_csv(""predict_hybrid_r1.csv"",index=False)"	1	1
bcols.add('Plcass_X_p_fare')	1	1
full_models['set1']['num_scaling'] = 'std_scaler'	1	1
test.loc[(test['farePP'] < 26.0), 'fareCat'] = 2	1	1
"test.loc[test[""Fare""].isnull(), ""Fare_fillin""] = 0"	1	1
pd.pivot_table(child, index = ['Sex'], values = 'Survived')	1	1
train_df.loc[train_df.Title == 'Mlle', 'Title'] = 'Miss'	1	1
df_test_raw.fillna(fillval)	1	1
train_data['Title']= train_data['Title'].map(title_dict).astype(int)	1	1
train.groupby(['Survived','Embarked']).mean()[['Pclass','SibSp']]	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',                                                  'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],                                                'Rare')	1	1
dataset['CabinLetter'] = dataset.Cabin.str[0]	1	1
df_submission['log_age'] = df_submission['age'].map(lambda a: 0 if a == 0.0 else np.log(a))	1	1
train_df.groupby('Age')['Age'].count()	1	1
data_encode.drop(['Survived'],axis=1)	1	1
df2['no_parch'] = [1 if i == 0 else 0 for i in df2.Parch]	1	1
"dataset[""Title""]=dataset[""Title""].replace([10,14],8)"	1	1
re.sub('[A-Z]', '', cabin.split()[0])	1	1
test_data['Age']= test_data['Age'].fillna('30.2')	1	1
"df_test[""FamilySize""] = df_test[""SibSp""] + df_test[""Parch""]"	1	1
combined_data['Title'] = combined_data['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	1	1
train.join(person_dummy_titanic)	1	1
df[['Survived']].groupby([df['Parch'] + df['SibSp']]).count()/df.shape[0]	1	1
x_train_numerical.describe()	1	1
"test[""Pclass""][x] # Pclass = 3"	1	1
df_train.isnull().sum() #ลองเช็คอีกทีว่า NaN ยังเหลือตรงไหนบ้าง	1	1
Train_TargetVar.astype('float')	1	1
"test[""Famille_4""] = test[""FamilleMember""] == '>4'"	1	1
"df_titanic[""Parch""]+df_titanic[""SibSp""]"	1	1
data_copy.loc[data_copy['Sex'] == 'male','Sex'] = 1	1	1
train.loc[(train['Age']>20)&(train['Age']<=35),'Age_cat']=2	1	1
pivot_pclass.reset_index(level=0, inplace=True)	1	1
"lone_m_in_fg_s['Age_cat'].value_counts(sort=False).plot(kind=""bar"",alpha=0.5,color='red',ax=axes[1,1])"	1	1
j.append(lcost(X, w, b, y))	1	1
"Accuracy[""adaBoost""] = accuracy"	1	1
"X_train.drop(""Title_Royal"",axis=1,inplace=True)"	1	1
df['FamilySize'] = df['SibSp']+df['Parch']+1	1	1
"test_data[""Age""].fillna(data[""Age""].median(skipna=True), inplace=True)"	1	1
combine.Fare.fillna(combine.Fare.mean(), inplace=True)	1	1
data_train.shape,data_test.shape	1	1
test['Age'].isnull().values.ravel().sum()	1	1
train.loc[(train['Name_len'] > 23) & (train['Name_len'] <= 27), 'Name_len'] = 2	1	1
"test_df[[""Pclass"", ""SibSp"", ""Parch"", ""Fare""]]"	1	1
combine_df['Ticket_Lett'] = combine_df['Ticket_Lett'].apply(lambda x: str(x))	1	1
submit.to_csv('submission.csv')	1	1
combined['unaccompaniedChild'] = combined.apply(lambda row: unaccompaniedChild(row['Age'], row['Parch']), axis = 1)	1	1
train['Age'][train['Survived'] == 1][train['Sex'] == 0], hist = False, ax = ax1, norm_hist = True,	1	1
classifiers.append(RandomForestClassifier(random_state = 0))	1	1
test['FamilySize'] = test['SibSp'] + test ['Parch']	1	1
"df_ticket[""TicketId""] = pd.Categorical.from_array(df_ticket.index).codes"	1	1
train_df['Age']= train_df['Age'].fillna(-1)	1	1
data_train_all['Title'].head()	1	1
"titanic_df['Embarked'].fillna('S', inplace=True)  # assign ""S"" for two missing values"	1	1
all_data.drop(drop_elements, axis=1)	1	1
confused_mat[0][1]	1	1
Modified_data.drop(['Embarked','Age','Sex','Name','Fare'],axis=1,inplace=True)	1	1
total_df.info()	1	1
test['Pclass'] = test['Pclass'].astype('category')	1	1
"data['CatFamily']= pd.cut(data.Family,bins=[0,0.5,3.5,10],labels=[""0"", ""1-2"",""3-10""],include_lowest=True)"	1	1
test['Fare'] = test['Fare'].fillna(train['Fare'].median())	1	1
df.groupby('Sex').agg('mean')[['Survived']]	1	1
train['Embarked'] = train['Embarked'].replace(np.NaN, 'S')	1	1
"train.Embarked.fillna(""S"")"	1	1
dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare_Band'] = 2	1	1
master_df['Fare'].fillna(med, inplace=True) # Median because numerical.	1	1
data_df['Title'] = data_df['Title'].replace(['Capt', 'Rev'], 'Crew')	1	1
y_train_col.values	1	1
test_df['Southampton']=test_df[['Embarked']].apply(get_southampton, axis=1)	1	1
"combined[""isCrew""] = 0"	1	1
combined_data.ix[1305]	1	1
train['Name'] = StandardScaler().fit_transform(train['Name'].values.reshape(-1, 1))	1	1
train['Title'].replace(['Countess', 'Dona', 'Lady'], 'Mrs', inplace=True)	1	1
c.Cabin.str.replace('\d+', '')	1	1
pclass_survived_counts[0:3].sort_index()	1	1
test_df.drop('PassengerId',axis=1).copy()	1	1
np.mean(a_gm, axis=1)	1	1
"sns.boxplot(x=""Pclass"",y=""Age"",data=titanic)"	1	1
df_train.iloc[:, :1].values	1	1
"full[""Sex""] = lable_encoder.transform(full[""Sex""])"	1	1
test_df['SharedCabin'].loc[ test_df['Cabin'].duplicated() ] = 1	1	1
train_scaled.transform(train2[training_features])	1	1
titanic.shape[1] # 12 in this cases	1	1
dfcopy.Name.isnull().sum() > 0:	1	1
"train_data[""Age""]=train_data[""Age""].astype(int)"	1	1
"titanic_test.drop([""PassengerId"", 'Name', 'Ticket'], axis=1)"	1	1
pred_df['PassengerId'] = data_test.index	1	1
"_both_df.drop([""cabin"", ""name"", ""ticket""],axis=1)"	1	1
MLA_predict.astype(float).corr(),linewidths=0.1,vmax=1.0,	1	1
train_X['AgeBin'] = pd.cut(train_X['Age'].astype(int), 5)	1	1
"df.loc[pd.notnull(df[""Cabin""]), ""Deck""] = df[""Cabin""].str[0]"	1	1
train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).count()	1	1
titanicTest['FamilySize']=np.nan	1	1
data.loc[data['relatives'] == 0,'not_alone'] = 1	1	1
titanic_train_dataframe.drop(drop_cols, axis=1)	1	1
list_of_indices.append(index)	1	1
titanic_df.loc[highest['Fare'],['Fare', 'Survived']]	1	1
X.drop(['Age', 'SibSp', 'Parch'], axis=1, inplace=True)	1	1
"train_df[['Pclass', 'Survived']].groupby([""Pclass""], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
data['Cabin'].fillna('Unknown',inplace=True)	1	1
data_test1.loc[:, 'Survived-XGB'] = clf_xgb.best_estimator_.predict(np_test_features)	1	1
n[2] = 7 8	1	1
data.Sex.replace(['male','female'],[0,1], inplace = True)	1	1
b['Age']=b['Age'].fillna(b['Age'].mean())	1	1
X_train[['TraveledAlone', 'Survived']].groupby(['TraveledAlone'], as_index=False).mean()	1	1
"ranks[""Lasso""] = ranking(np.abs(lasso.coef_), colnames)"	1	1
predictors2.head()	1	1
data.drop(['Survived'],axis=1)	1	1
df['Age'] = df['Age'].fillna(df['Age'].mean())  # 用平均值填充空值	1	1
train.loc[train['Family']>=4,'Family']=2	1	1
plt.hist(np.log10(df.Age), bins=40)	1	1
test_data['Suffix'] = test_data['Suffix'].replace('Mme', 'Mrs')	1	1
data.fillna(np.nan)	1	1
train_df.loc[(train_df['Age']>24)&(train_df['Age']<=32),'Age_band']=2	1	1
"models[0][""grid""]"	1	1
plt.hist(age_null_random_list,alpha=0.7)	1	1
dataset['Age']=dataset['Age'].fillna(dataset['Age'].mean())	1	1
"title_dict[""SIR""] = 4"	1	1
testingData.head()	1	1
test2_df['Embarked'].fillna('S', inplace=True)	1	1
dataset['Sex'] = dataset['Sex'].map({'female':0, 'male':1})	1	1
ax1.spines['bottom'].set_visible(False)	1	1
"titanic_df.drop(""PassengerId"", axis=1).copy()"	1	1
df.loc[male & Class2,'Class'] = (4)	1	1
sex_test.replace(to_replace = 'female', value = 1, inplace = True)	1	1
df.groupby('Sex').Fare.mean()	1	1
raw_df['Deck']=raw_df['Cabin'].map(lambda x: substrings_in_string(x, cabin_list))	1	1
train[['Pclass','SexF','Age', 'Fare', 'family_is','cabin_is']]	1	1
data.select_dtypes(exclude=['object'])	1	1
attr.Embarked.fillna(attr.Embarked.mode()[0])	1	1
"df[""IsAlone""] = df[""FamilySize""] == 1"	1	1
"traindat[""Age""].median()"	1	1
test['CabinN1'] = pd.to_numeric(test['CabinN1'], downcast='integer')	1	1
train_data.loc[(train_data['Age']>=32) & (train_data['Age']<45),'Age'] = 2	1	1
df.groupby(self.column_ref).median().to_dict()[self.column_to_impute]	1	1
df.loc[(df['Pclass']==3) & (df['Cabin_letter']=='U'), 'Cabin_letter'] = 'G'	1	1
"submission.to_csv(""nn_submission.csv"", index=False)"	1	1
"data_df[""Deck""] = data_df[""Deck""].fillna(""N"")"	1	1
train_df.describe(exclude='number')	1	1
df1['Fare'].value_counts().plot.hist(grid=True,color='r')	1	1
df_train['isalone'] = df_train['isalone'].astype('category')	1	1
dataset['Age'][i]=3	1	1
feat['ImpVal'] = feature_imp	1	1
subm_df.to_csv('submission.csv', index=False)	1	1
df_test['Embarked']	1	1
test_data[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'SibSp', 'Parch']]	1	1
all_data.drop('Survived',axis=1, inplace=True) # drop survived column	1	1
df.rename(columns={'cabin':'Cabin'},inplace=True)	1	1
train_df['Age'].isnull().sum()  # number of null age values	1	1
train['IsBaby'] = 0	1	1
train_corr_idx.corr()	1	1
train['CabinN2'] = pd.to_numeric(train['CabinN2'], downcast='integer')	1	1
full_models['set1']['num_attrs'] = ['Fare', 'Age', 'Family_total', 'Name_len']	1	1
pd.merge(Age_values,null_age,how='inner',on=['Sex','Name_key','Pclass','Parch'])	1	1
df_train['LastName'].unique().shape, df_test['LastName'].unique().shape	1	1
test_dataset.loc[test_dataset['Fare']<=7.91,'Fare']=0	1	1
"X_test.drop([""PassengerId""], axis = 1, inplace=True)"	1	1
train_df['Survived'].groupby(pd.qcut(train_df['Age'],6)).mean()	1	1
"new_df[""Age_Pclass""] = df[""Age""] * df[""Pclass""]"	1	1
test.drop(['Name', 'Sex', 'Ticket', 'Embarked'], axis=1, inplace=True)	1	1
predictions.append(model.predict_proba(test_reduced)[:, 1])	1	1
Model.append('XGBoost')	1	1
test['Age'] = test[['Age', 'Pclass']].apply(avg_age, axis = 1)	1	1
data.Cabin_Letter_D.astype('category')	1	1
df_all.Embarked.fillna('S')	1	1
"train_X[""Age_Fare""] = train_X.Age * train_X.Fare"	1	1
"train.loc[(train.Age.isnull())&(train.Salutations==""Other""),'Age'] = 46"	1	1
dict_missing.update(d)	1	1
titanic['SibSp']=df_train['SibSp']	1	1
titanic_traindf.drop('Name', axis=1)	1	1
test.drop(labels=['PassengerId','Name'],axis=1)	1	1
complete_data.head()	1	1
"titanic_train[""Parch""].value_counts()"	1	1
combine_df.loc[ combine_df['Age'] <= 16, 'Age']= 0	1	1
"X_train[""FamilySize""] = X_train[""RelativesCount""].add(1).map(map_family_size)"	1	1
data.loc[(data.Age.isnull()) & (data.Title == 'Miss.'), 'Age'] = data.loc[data.Title == 'Miss.', 'Age'].median()	1	1
test_ToPred['Age']  =  titanic_df['Age'].astype(float)	1	1
"df_titanic_train.describe(include=""O"")"	1	1
age[ 'Age' ] = full.Age.fillna( full.Age.mean() )	1	1
Train.head(), Test.head()	1	1
x['Age'].fillna(x['Age'].mean(), inplace=True)	1	1
combined_df['Cabin'] = combined_df['Cabin'].fillna('U').astype(str)	1	1
gender_submissionData.info()	1	1
train_dat[['Alone', 'Survived']].groupby('Alone').mean()	1	1
dataset['Initial'] = dataset.Name.apply(get_title)	1	1
column['Title'] = column['Title'].replace('Mme', 'Mrs')	1	1
train_df['Cabin'].value_counts().head()	1	1
train_dataset['Title'] = train_dataset['Title'].replace('Mme','Miss')	1	1
"results[""AUC""]=auc_scores"	1	1
data['Status'] = np.where(data.Survived==0, -1, data.Status)	1	1
"df[""title""] = df.title.apply(lambda i : group_dict[i] if i in group_dict.keys() else i )"	1	1
train_df.drop(['PassengerId','Survived'],axis=1).values	1	1
"train_kaggle.groupby([""Sex""])[""Alive"", ""Not_alive""].sum().plot.bar(title=""Sex feature distribution related to target variable"")"	1	1
train2['Embarked'] = train2['Embarked'].fillna('S')	1	1
test_data['Age'].fillna(test_data['Age'].mean(),inplace=True)	1	1
Xmat.sort_values(by='PassengerId')	1	1
combined['Cabin_survived'] = combined['Cabin'].apply(lambda x: 1 if(x in ['B','C','D','E','F']) else 0)	1	1
data_2['Survived']	1	1
"full.loc[(full.Embarked == 'S') & (full.Pclass == 3), ""Fare""].mean()"	1	1
axis1.spines['left'].set_linewidth(0)	1	1
"data['is_male'] = data['Sex'].map(lambda x: 1 if x == ""male"" else 0)"	1	1
"ax_lst[0].plot(train[""Fare""][train[""Survived""] == 1], ""b."", train[""Fare""][train[""Survived""] == 0], ""r."")"	1	1
"test.loc[test[""Embarked""] == ""Q"", ""emk_c""] = ""1"""	1	1
ALL_DATA.head()	1	1
data.loc[data['Age'] > 63.9, 'Age'] = 4	1	1
data1.loc[data1['Embarked'] == 'S', 'Embarked'] = 0	1	1
dataset['Age'][i] < 48:	1	1
"test[[""Title""]] = test[[""Title""]].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
"dataset[""Cabin""] = dataset[""Cabin""].fillna('U')"	1	1
titanicDF.assign(isChild=df.map(lambda x: x<ageThresh))	1	1
"train[""Survived""] = train.Survived.astype(int)"	1	1
new_test['Sex'] = new_test['male']	1	1
submission3.to_csv('titanic-xgboost.csv', index=False)	1	1
"axes[18].set(xlabel='Deck', ylabel="""")"	1	1
data_test.drop(['SibSp'], axis=1)	1	1
"data_out[""AgeBucket""] = data_out[""Age""] // 15 * 15"	1	1
dataset['train_x']	1	1
data_test.loc[data_test['Age'].isnull(),'Age'] = mean_age	1	1
corr.loc[top_corr_cols, top_corr_cols]	1	1
maxS.append(g.Fare.max())	1	1
svm_submission['Survived'],	1	1
submit_csv2['Survived'] = results	1	1
"data[""Cabin""] = data['Cabin'].apply(lambda x : str(x)[0] if not pd.isnull(x) else 'NoCabin')"	1	1
df.Age.fillna(title_age_median, inplace=True)	1	1
testData['Alone']=0	1	1
df_train['Pclass']	1	1
age0_df.values	1	1
test_x['Age'] = predict_y	1	1
train.Fare.fillna(train.Fare.median())	1	1
"df_test[""is_male""] = pd.get_dummies(df_test[""Sex""], drop_first=True) #we use drop_first to avoid creating another correlated column is_female"	1	1
tmp_scaled.assign(Embarked_C=tmp['Embarked_C'])	1	1
data_age.dropna(subset=['Age'])	1	1
ds_test['Title'].replace({'Mlle':'Miss', 'Mme': 'Mrs', 'Ms':'Miss'}, inplace=True, regex=True)	1	1
Age.hist(bins=10,normed=True)	1	1
"data_train[""Age""].fillna(data_train.groupby(""Sex"")[""Age""].transform(""mean""), inplace=True)"	1	1
"dataframe2[""Sex""]= dataframe[""Sex""].apply(lambda sex : sex == 'male') * 1"	1	1
costs.append(calculated_cost)	1	1
test['Name'] = StandardScaler().fit_transform(test['Name'].values.reshape(-1, 1))	1	1
np.dot(np.transpose(Input), dZ1)	1	1
data_test['Age'].fillna(data_test['Age'].mean(), inplace = True)	1	1
df_submission['fare_bin'] = df_submission['fare_bin'].astype('int')	1	1
"dataset.loc[(dataset[""Age""]>30) & (dataset[""Age""]<=50),""Age""] = 2"	1	1
dataset['age'] * dataset['pclass']	1	1
x_train['Cabin'].apply(lambda x: len(str(x)))	1	1
df_test['Survived'] = prediction	1	1
titanicAll.describe()	1	1
train_df_bkp.head()	1	1
df['Pclass'].value_counts().plot.bar(ax=ax[0])	1	1
"train[""Fare""] = train[""Fare""].fillna(train[""Fare""].mean())"	1	1
"data_test.drop(""PassengerId"", axis=1).copy()"	1	1
"train_df[""Embarked""] = train_df.Embarked.apply(lambda x: ""s"" if x == 0 else x.lower())"	1	1
titanic_df.groupby(['Sex'], as_index=False).get_group('female')	1	1
data['FamilySize'] = data.SibSp + data.Parch	1	1
df.drop(['Cabin'], 1, inplace=True)	1	1
df_train_X.loc[:, df_train_X.dtypes != 'category'] = stdscaler.fit_transform(df_train_X.loc[:, df_train_X.dtypes != 'category'])	1	1
d_dev.drop('Survived', axis=1)	1	1
train_data['Survived'].astype(int).plot.hist()	1	1
train_df['Age'].hist(bins = 70, ax = axis2)	1	1
train.groupby(['Survived', 'Sex']).size(),	1	1
X_test.drop(['PassengerId', 'Cabin', 'Name', 'SibSp', 'Parch', 'Ticket'], axis=1)	1	1
"results.to_csv(""result.csv"",index=False)"	1	1
"related_people.loc[related_people[""PassengerId""]==334,""RGroup""]=""Vander Planke_M"""	1	1
titanic.drop('Ticket', axis=1, inplace=True)	1	1
"train[""Title""] = train[""Title""].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
train['Sex'].value_counts().plot.bar()	1	1
data.loc[(data['Age']>48.5) & (data['Age']<64),'Age']=3	1	1
full['Title'] = full['Name'].apply(lambda name:re.findall(' ([a-zA-z]+)\.',name)[0])	1	1
test_x.info()	1	1
sns.boxplot(x='Parch', y='Age', data=new_train)	1	1
train_df['FamilyMembers'] = train_df['SibSp'] + train_df['Parch'] + 1	1	1
dataset.loc[ dataset['Age'] <= 5, 'Age'] = 0	1	1
"train[""Survived""] = train_sur"	1	1
train_data.mean(axis=0)	1	1
df.loc[((df.IsKid == 1) & (df.Pclass == 2)) , 'IK_Cl'] = 5 #avg kid	1	1
"submission.to_csv(""submission_df"", index=False)"	1	1
test_dataset.loc[(test_dataset['Age']>48) & (test_dataset['Age']<=64),'Age']=3	1	1
all_data['Deck'] = all_data.apply(impute_deck,axis=1)	1	1
df_te.head()	1	1
combine_df.isnull().sum().sort_values(ascending=False)	1	1
df_train.select_dtypes(include=['object']).columns	1	1
train['farePP'] = (train['Fare'] / (train['famSize'] + 1.0)).round(1)	1	1
"train.boxplot(column=""Fare"",by=""Survived"", ax = ax_lst[1])"	1	1
x.replace('.','')	1	1
data['Title']=data.Title.map({'Mr':0,'Mrs':1,'Miss':2,'Special':3})	1	1
df_train['ticket_length'] = df_train['ticket'].map(len)	1	1
data.max() - data.min()	1	1
"data_copy.loc[data_copy[""Sex""] == ""female"", ""Sex""] = 0"	1	1
train['Age'][indices_of_outliers],	1	1
test['Sex'].replace({'male':1 ,'female':0},inplace=True)	1	1
train['CategoricalFare'].cat.categories = [1, 2, 3, 4]	1	1
X_test['Sex'] = le.fit_transform(X_test['Sex'].values)	1	1
df['Alone'].loc[df['Alone'] > 0] = 0	1	1
test_df['Fare'].fillna(test_df['Pclass'].map(Median_Fare),inplace=True)	1	1
train_deck['Deck']	1	1
df_all['SharedFeatures'] == 1,	1	1
train['LargeF'] = train['Fsize'].map(lambda s: 1 if s >= 5 else 0)	1	1
titanic_df.AgeExists.loc[titanic_df['AgeExists'] > -1] = 1.0	1	1
result.to_csv('randomforest-5-titles.csv', index=False)	1	1
np.empty(143)	1	1
all_data.drop(['Cabin'],axis=1,inplace=True)	1	1
train['Child'] = train.apply(lambda row: row['Age'] <= 12.0, axis=1)	1	1
trainONSWAR.values # Creates an array of the train data	1	1
"train_set[""Survived""]"	1	1
test.loc[(test['Fare'].isnull()) & (test['Pclass'] == 2), 'Fare'] = aveSecondFare	1	1
"test[""AgeGroup""][x] = age_mapping[test[""Title""][x]]"	1	1
titanic_df.groupby(titanic_df['Age'].isnull()).mean()['Survived']	1	1
"train_data[[""Survived""] + features].dropna()"	1	1
"df_test[""Fare""] = df_test[""Fare""].fillna(df_test[""Fare""].median())"	1	1
pclass_dummies_train.drop(['C3'], axis=1, inplace=True)	1	1
data_train.drop(['Name'], axis=1)	1	1
data.select_dtypes(include = [np.number]).columns	1	1
"df_data[""Embarked""]=df_data[""Embarked""].fillna('S')"	1	1
scores['train_' + clf_name] = []	1	1
dataset['Fareband'] = pd.cut(dataset['Fare'], bins=bins, labels=labels, include_lowest = True)	1	1
train_x.fillna(0)	1	1
test['Fare'].fillna(test['Fare'].mean(),inplace = True)	1	1
train.groupby(['Survived','Parch']).count()['PassengerId']	1	1
train_df[['FamilySize','Survived']].groupby(['FamilySize'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
test_data.drop(['Cabin','Ticket'], axis=1, inplace=True)	1	1
df['Title'] = df['Title'].apply(lambda x: 'Noble_Man' if x in ['Dr', 'Master', 'Rev', 'Jonkheer', 'Capt', 'Don', 'Major', 'Col', 'Sir'] else x)	1	1
index.append(i)	1	1
"train_df.drop(labels=[""source""],axis = 1,inplace=True)"	1	1
with_age.append(no_age)	1	1
res_df_solver_C.head()	1	1
ax1[0].set_title('1st Class (survived)')	1	1
pivot_Age.reset_index(level=0, inplace=True)	1	1
df_train['Sex'],	1	1
train_df.apply(pd.Series.nunique).sort_values(ascending=False)	1	1
test.drop('Name', axis=1)	1	1
"test.drop([""Name"", ""Ticket"", ""Age"", ""Embarked"", ""CatFare"", ""Title""], axis = 1)"	1	1
dataset['FamilySize'] = dataset['FamilySize'].replace([5,6,7,8,9,10,11], 2)	1	1
data.boxplot(column='Cabin_numerical')	1	1
lossList.append(total_loss / len(validL))	1	1
train_dataset.loc[(train_dataset['Fare']>7.91) & (train_dataset['Fare']<=14.454),'Fare']=1	1	1
df['Cabin'].notnull().mean()	1	1
data.groupby(['Surname'])['Deck'].median()	1	1
"train.drop(""SibSp"", axis = 1, inplace = True)"	1	1
df.itertuples():	1	1
"df_train[""Free""] = df_data[""Free""][:891]"	1	1
accuracy.append(cv_result.mean())	1	1
dataset['Fare'] = dataset['Fare'].fillna(df['Fare'].median())	1	1
df['CategoricalFarePerPerson'] = pd.qcut(df['FarePerPerson'], q = 4)	1	1
test_dataset.loc[(test_dataset['Fare']>14.454) & (test_dataset['Fare']<=31),'Fare']=2	1	1
train_data_features['Name'] = train_data_features['Name'].apply(lambda x: 0 if ('Mr.' in x or 'Master' in x or 'Mrs.' in x                                                                                or 'Miss' in x or 'Ms.' in x) else 1)	1	1
dt_test.drop('Family', axis=1, inplace=True)	1	1
rf_rfecv.transform(rf_rfecv_train)	1	1
model_type.append('Random Forest')	1	1
"train.drop([""Embarked"",""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare""], axis = 1)"	1	1
train_df_new.drop(['Survived'], axis=1)	1	1
raw_train[['Deck', 'Survived']].groupby('Deck').mean().plot(kind='bar', color='brown')	1	1
df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']]	1	1
lda.transform(X_test_std)	1	1
"train_data_test[""Survived""]"	1	1
test_df['Title']= test_df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],'Rare')	1	1
test['Age'] = test['Age'].fillna(-1.0)	1	1
test.loc[(test.Fare.isnull()),:]	1	1
training_data.isnull().sum()	1	1
test['Embarked'].fillna(freqEmbark,inplace=True)	1	1
sds.transform(sd_train)	1	1
np.append(np.append(test_num_feat, test_cat_feat, axis=1), test_text_feat, axis=1)	1	1
test_ds.count()	1	1
"train_clean[[""Survived"", ""Sex""]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived',ascending=False)"	1	1
first_variable.append(raw_first_variable[i] if i in first_variable_index else 0)	1	1
"_df.loc[  176, ""group_id""] = 201.0"	1	1
"age0_t_df[""PassengerId""].values"	1	1
df_train.loc[:, ['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
test_set.drop('Name', axis = 1, inplace = True)	1	1
isnull.sum()	1	1
df_comb.loc[df_comb.Fare.isnull(), 'Fare'] = df_comb.groupby(['Title', 'Pclass']).Fare.transform('mean')	1	1
data['SibSp'].astype('int64')	1	1
train_df['Initial']=train_df.Name.str.extract('([A-Za-z]+)\.')	1	1
test_df.drop(['Name', 'PassengerId'], axis=1, inplace=True)	1	1
test_df['Queenstown']=test_df[['Embarked']].apply(get_queenstown, axis=1)	1	1
submission.to_csv('linden_Titanic_submission.csv', index=False)	1	1
dataset.loc[dataset['Fare']<=7.91,'Fare_cat']=0	1	1
dataset.loc[(dataset['Age'] > 48.168) & (dataset['Age'] <= 56.126), 'Age'] = 6	1	1
"titanic[[""Age"", ""Sex"", ""Fare""]]"	1	1
df['Fare_log'].kurt()	1	1
np.sum(data[:,1].astype(np.float))	1	1
X_pred.iterrows():	1	1
"full['Deck'] = full.Cabin.str.extract(""([a-zA-Z])"", expand=False)"	1	1
train_df['Parch'].ix[train_df['Parch']>2] = 3	1	1
df_train['AgeFill'] = df_train['Age']	1	1
pcl.head()	1	1
train_dataset['Title'] = label_encoder.fit_transform(train_dataset['Title'])	1	1
np.mean(precision),	1	1
df['Title'] = label.fit_transform(df.Title)	1	1
"df[""Embarked""].isnull().sum()"	1	1
fold_names.append('overall')	1	1
titanic_traindf[['Pclass','Sex','Age', 'SibSp','Parch','Fare']]	1	1
data_no_nan.loc[:, 'Embarked'] = fill_series(data_no_nan['Embarked'])	1	1
corr_val.abs().sum(axis=0)-1	1	1
train_data.loc[:,['Survived','Pclass','Sex','Age']]	1	1
all_data['Deck'] = all_data.apply(cabin_to_deck,axis=1)	1	1
"dfWF[""val_acc""]"	1	1
train.groupby(['FareBand'])[['Survived']].count()	1	1
df_train['Sex'] = df_train['Sex'].map({'male': 1, 'female': 0})	1	1
train_with_title['Title'] = train_with_title.Name.apply(extractTitle)	1	1
np.multiply(error_missing_x,x)	1	1
"min_max_scaler.transform(copy_that_dev[[""Age"", ""SibSp"", ""Parch"", ""Fare""]])"	1	1
"train_df[[""Pclass"", ""Sex"", ""SibSp"", ""Parch"", ""Embarked""]]"	1	1
depth_train_error.append(results[0])	1	1
imputer.transform(X1[:, 2:3])	1	1
"df_hist['age'].plot.hist(ax=ax, bins=20, label=""{}"".format(isv), color=colors[isv], alpha=.3)"	1	1
one_hot_encoded_training_predictors.head()	1	1
"df_test.loc[df_test[""Sex""] == ""female"", ""Sex""] = 1"	1	1
df.copy() # save df containing factorized features to use for subsequent analysis	1	1
comb['Cabin'].fillna('X',inplace=True)	1	1
merged.groupby('NameTitle')['Age'].mean() #lets check the average age by Initials	1	1
titanic_df['Age'].hist(bins=70, ax=axis2, ls='solid', lw=0.2, ec='black')	1	1
train['Age'][train['Survived']==0].value_counts().sort_index()	1	1
Pclass_dummies_titanic.drop(['class3'],axis=1,inplace=True)	1	1
data_full.loc[data_full['AgeBin'] == 1, 'IsKid'] = 1	1	1
test['Sex'].replace('male', 1, inplace = True)	1	1
np.multiply(error, X_train[:,i])	1	1
dataset['Sex'] = dataset['Sex'].map({'male':1 , 'female':2}).astype(int)	1	1
train_df.loc[ train_df['Age'] > 64, 'Age'] = 4	1	1
processed_test_df.loc[ (processed_test_df.Age.isnull()) & (processed_test_df.Sex == i) & (processed_test_df.Pclass == j+1),'Age'] = median_ages[i,j]	1	1
train.drop('Name',1,inplace=True)	1	1
train.isnull().values.any() == True:	1	1
df_valid['Data'] = 'V'	1	1
"test['Deck'] = test['Cabin'].astype(str).str[0]  # Extracting first character in ""Cabin"" to create a new column ""Deck"""	1	1
missing_values.sort_values(ascending=False, inplace=True)	1	1
all_data['FareBin'] = label.fit_transform(all_data['FareBin'])	1	1
titanic_with_dummies.columns.values	1	1
together[['SibSp', 'Parch', 'isalone', 'Age', 'ischild']].head(10)	1	1
train_copy.loc[train_copy['Pclass'] == 2, 'Pclass_Category'] = 1	1	1
"full.loc[full.Cabin.notnull(),""Cabin""] = full[full.Cabin.notnull()][""Cabin""].apply(lambda x : x[0])"	1	1
splittrain.drop('Survived', 1)	1	1
np.dot(w.T,x_train) + b	1	1
raw_df['Fare_Per_Person']=raw_df['Fare']/(df['Family_Size']+1)	1	1
"X_test.drop(labels = [""PassengerId"", ""Sex"",""Name"", ""Title"", ""Embarked""], axis = 1, inplace = True)"	1	1
stacked.max(),	1	1
best_iteration[3] = epoch	1	1
dff_corr.corr()	1	1
"raw_test[""PassengerId""],"	1	1
dataset['Embarked'].fillna('S',inplace=True)	1	1
train['Pclass'].values.reshape(-1,1)	1	1
df.drop(['Name'],axis=1) #remove the name column	1	1
input_df.isnull().count()	1	1
"_df[""ticket_let""] = _df.ticket_let.apply(lambda i : i.replace(""."", """"))"	1	1
X.head(2)	1	1
train_data.Sex.astype('category').cat.codes	1	1
test.Age.apply(encodeAge)	1	1
perf.append(getMetrics(y_test, y_pred, 'Gaussian Naive Bayes'))	1	1
data.loc[(data.passenger_fare<8.0) & (data.passenger_fare>=7.75) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Letter'] =  data[(data.passenger_fare<8.0) & (data.passenger_fare>=7.75) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
"confirm_data.drop([""Survived""], axis = 1)"	1	1
"train_df2.drop([""Survived"", ""PassengerId""], axis=1)"	1	1
matplotlib.rcParams['figure.figsize'] = (20.0, 10.0)	1	1
X_test1['Pclass1'] = c2.transform(X_test1.loc[:,'Pclass'])	1	1
"dftrain[""Age""] = dftrain[[""Age"", ""Pclass""]].apply (imput_age, axis=1)"	1	1
y.dropna(inplace = True)	1	1
train3.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
null_mat[0][0]	1	1
train[['Q', 'S', 'C']].head()	1	1
titanic.loc[titanic['Sex']=='female','Sex']=1	1	1
train_df2['FareBand'] = pd.qcut(train_df2.Fare,7,labels=False)	1	1
train['CategoricalAge'] = pd.cut(train['Age'], 10)	1	1
pred_table_lr_2_test['Prob'] = prob_lr_1_test	1	1
"data_train[[""Pclass"", ""Survived""]].groupby(['Pclass'], as_index=False).mean()"	1	1
combined.assign(familySize = combined['Parch'] + combined['SibSp'])	1	1
plt.rcParams['figure.figsize'] = (10, 10)	1	1
test.describe(include = 'all')	1	1
predict_survival.astype(int)	1	1
x_train.isnull().values.any()	1	1
strat_train_set.drop('Sex', axis=1, inplace=True)	1	1
df[['Name','Age']]	1	1
temp_df.head(2)	1	1
test.drop(['Ticket','Cabin'],axis=1,inplace=True)	1	1
test['Family_Survival'] = data['Family_Survival'][891:]	1	1
titanic_data['Age'].head()	1	1
dataset.shape[0]	1	1
train_labels.values[train_index], train_labels.values[test_index]	1	1
Test_Master['Age'] = Test_Master['Age'].fillna(np.mean(Test_Master['Age']))	1	1
tf.transpose(A3)	1	1
train_copy.loc[train_copy['Parch'] == 1, 'Parch_Category'] = 1	1	1
train_df_bins['age_class'] = train_df_bins['age'] * train_df_bins['pclass']	1	1
"df[""Title""][df[""Title""] == ""Ms""] = ""Miss"""	1	1
lgb_params['num_iterations'] = 5000	1	1
fig.axes.set_ylabel('Survival Rate')	1	1
combined_data.reset_index(drop=True, inplace=True)	1	1
test.loc[test['Age']<=19.00,'NAge']=0	1	1
"X.loc[(X[""Title""] == ""Mlle"") | (X[""Title""] == ""Ms""), ""Title""] = ""Miss"""	1	1
"train_df[""Age""][np.isnan(train_df[""Age""])] = replacement_random_vals_train"	1	1
df.Embarked.fillna('U')	1	1
ax[0].set_title('Fare per Ticket Class')	1	1
"test.loc[test.Embarked != test.Embarked, ""Embarked""] = ""C"""	1	1
data_cleaner[0].iloc[:,1:]	1	1
combine_df['titles'] = titles	1	1
transformed_df['Age_Categorized_Child'] = age.Age_Categorized_Guess_Child	1	1
test_df.ix[-np.isnan(test_df.Age), 'Ageknown'] = 'Yes'	1	1
result.to_csv('submission5.csv')	1	1
train_df_final.drop(['Survived'], axis = 1)	1	1
df_input[['Survived', 'Pclass','Sex', 'Fare']][df_input.Fare!=0].dropna()	1	1
data_set['Survived']	1	1
titanicAll['Title'] = titanicAll['Title'].map(titleDict)	1	1
dataset['InWcg'] = 0	1	1
test['c_mean'] = pd.Series(test.mean(axis=1), index=test.index)	1	1
data.iloc[[0,1,3,9]]	1	1
test_model.drop(['Survived'], axis = 1)	1	1
df_submission['embarked'].fillna(value='q', inplace=True)	1	1
dataset['Embarked'] = dataset['Embarked'].replace('C', 3)	1	1
data_df.copy(deep = True)[['Age']]	1	1
test_data.groupby(['Sex', 'Survived']).size()	1	1
test_df.loc[p, 'Age'] = rand_MMM_test[is_m]	1	1
tmp.append([model, scores[model][0], scores[model][1]])	1	1
ax[1].set_title('Accuracy on TRAIN sample ' + suff)	1	1
ax[1].set_title('Fare per Embarkment Location')	1	1
data_train['Title'] = title_train.map(title_to_replace)	1	1
data['Survived'][data.Pc3 ==1].count(),	1	1
"titanic_train[""Family""].loc[titanic_train[""Family""] == 0] = 0"	1	1
Pclass_survived['pclass'] = Pclass_survived.index	1	1
test_df['Survived'] = result	1	1
dataset.loc[(dataset['Fare']>100), 'Fare']=3	1	1
"dftrain[""Ticket""].value_counts()"	1	1
"full[""Family""] = full[""SibSp""] + full[""Parch""] + 1"	1	1
missing.head(20)	1	1
cv_y.append(fold_ytest)	1	1
train.loc[i,'SibSp'] == 0 and train.loc[i,'Parch'] == 0:	1	1
df_familygroup.groupby('Name', as_index=False)['Survived'].mean()	1	1
temp_train['Pclass'] = data['Pclass']	1	1
training.corr()	1	1
ax[1].set_title('Fare vs Embarked')	1	1
test.groupby('Embarked').count()['PassengerId']	1	1
testdata.drop(['Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin'], axis=1, inplace=True)	1	1
titanic_df['Title'] == 'Dr'	1	1
fare_series.isnull().any()	1	1
conf.get('n_jobs', 1)	1	1
train_df.Embarked.fillna('C', inplace=True)	1	1
np.dot(feats, weights) + biais	1	1
df_tr.iloc[:,:-1].values.tolist()	1	1
tit_df['Parch'] = tit_df['Parch'].apply(Pch_sep)	1	1
"dataset[""FareBin""] = pd.cut(dataset[""Fare""],fare_bin,labels=faregroup_name)"	1	1
matplotlib.rcParams['figure.figsize'] = (12.0, 6.0)	1	1
result_df['Survived']=preds_test_whole_df['Survived']	1	1
"result_test4[""Survived""] = y_pred_svc_rand"	1	1
train['mis_age'] = np.where(pd.isna(train['Age'])==True,'missing','not_missing')	1	1
self.values = list(X[self.column_name].value_counts()[:self.n_values_to_keep].keys())	1	1
dataset['Deck'] = dataset['Cabin'].str[0]	1	1
train.loc[(train['Fare']>=31),'Fare']=4	1	1
dataset['Title'] = dataset['Title'].replace(['Countess', 'Lady', 'Sir', 'Master'], 'Royal')	1	1
cols[3]	1	1
Xtrf_df['Alone'] = (Xtrf_df['Fsize'] == 0).astype(int)	1	1
"train['Family_Size'] =  train[""Parch""] + train[""SibSp""]"	1	1
model_result.append([group_result])	1	1
in ['Embarked.S', 'Embarked.C', 'Embarked.Q']:	1	1
"train_df.pivot_table(index=""IsAlone"",values='Survived')"	1	1
"data.loc[data[""Cabin""] == ""Known"", 'Cabin'] = 1"	1	1
"titanic_df.groupby(by=[""Pclass"",""Sex"",pd.cut(titanic_df[""Age""],years_range)]).mean()[""Survived""][3,1].plot.bar(ax=axes[2,1], title = (""Men Class 3"") )"	1	1
ax[1].set_title('Pclass 2 Fare Distribution')	1	1
Parch_data.sum()	1	1
data_train['Deck'] = data_train['Deck']         .replace(['A','B','C','D','E','F','G','T'],[1,2,3,4,5,6,7,8])	1	1
train['clean_embarked'] = train.Embarked.fillna(most_common_embarked)	1	1
train_df['Title'] = train_df['Title'].apply(lambda x: 'Misc' if ((train_df['Title']==x).sum() < 8) else x)	1	1
boyData['Age'].median(axis=0)	1	1
train.loc[(train['Parch'] > 0) | (train['SibSp'] > 0), 'HasFamily'] = 1	1	1
"comb.drop([""Pclass"", ""Sex"", ""Embarked""], axis=1)"	1	1
combined['Embarked'].fillna('S', inplace=True)	1	1
"sns.boxplot(x=""Age"", data=train_df, ax=axes[1])"	1	1
df['BinnedAge'] = pd.cut(df['Age'], bins=6, labels=labels, include_lowest=True)	1	1
fill_df.groupby(predictors)['age_mod']	1	1
scores2.mean()	1	1
"traindata.groupby(""Fare"").Survived.mean().plot(kind=""bar"",figsize=(25,25))"	1	1
survived_data['SibSp']	1	1
"titanic.drop(""Embarked"", axis=1, inplace = True)"	1	1
df['age_T'] = df.apply(lambda x: 6 if x['Age'] >= 60 else x['age_T'], axis=1)	1	1
data_test_input.loc[data_test['Sex']=='male','Sex'] = 1   #male	1	1
train_df['Deck'] = all_df[ 0:891 ]['Deck']	1	1
RF.to_csv('RF.csv')	1	1
tops.items():	1	1
numerical_columns.append('Fare_per_ticket_member_standard_score_with_Pclass')	1	1
"res.fillna({""Age"":age_avg, ""Fare"":fare_avg})"	1	1
Df['PREMAX'] - Df['PREMIN']	1	1
df['Age_bin_custom_label'] = pd.cut(np.array(df.Age), bins=bin_ranges, labels=bin_names)	1	1
data['DatingRank']= data.apply(dating_rank, axis=1)	1	1
features['Sex']=le.transform(features['Sex'])	1	1
model.add(Dense(4))	1	1
dataset.loc[ dataset['Age'] <= 16, 'Age' ] = 0	1	1
family_df_grpby['Survived'].sum().astype(int)	1	1
dataset.loc[(dataset['Age'] > 60) & (dataset['Age'] <= 70), 'AgeGroup'] = 8	1	1
df['Title'] = df.Name.map( lambda x: x.split(',')[1].split( '.' )[0].strip())	1	1
train['title']=train['Name'].apply(get_title)	1	1
test_data['FamSize'] = test_data['SibSp'] + test_data['Parch'] +1	1	1
X_test.drop('SibSp', 1)     .drop('Parch', 1)	1	1
curated_data['Sex'] = train['Sex'].map(sex_mapping)	1	1
test['Age'].iloc[i] = age_med_test	1	1
best_adaboost.best_params_.get('base_estimator__min_samples_split'),	1	1
tt['Fare'] = tt['Fare'].fillna(tt['Fare'].mean())	1	1
test_data['ticket_num']=list(map(extract_int, test_data['Ticket']))	1	1
train['Cabin'] = train['Cabin'].fillna(value='Z')	1	1
df['Parch']=df['Parch'].astype('category')	1	1
X_validation.values	1	1
df['Title'] = df.Name.str.extract('([a-zA-z]+)\.',expand=False)	1	1
titanic_test['Mod_col_2']=col_4[:,0]	1	1
combined.loc[test.index].copy()	1	1
df_full.groupby('Ticket'):	1	1
train['WcgAllSurvived'] = dataset.iloc[:train_len, -1]	1	1
train.loc[train['Embarked'].isnull() == False]	1	1
"df_test[""Name""].apply(get_title)"	1	1
"train.loc[(train[""Age""]>32) & (train[""Age""]<=48),""Age""]=2"	1	1
titanic_test['Pclass_1']=(titanic_test['Pclass']==1).astype(int)	1	1
df[['PassengerId', 'Set', 'Survived'] + feats]	1	1
plotValues.hist(bins=10, weights=weights,ax = axis1)	1	1
Train_Master['Age'] = Train_Master['Age'].astype(int)	1	1
dataset.loc[dataset['FamliySize']==1,'isAlone'] = 1	1	1
test_df['Ticket'] = le.transform(test_df['Ticket'])	1	1
title_survive_crosstbl.sum(axis = 1)	1	1
allset.drop(['AgeBand'],axis=1)	1	1
sns.boxplot(x='Pclass',y='Fare',data=test_data)	1	1
pd.DataFrame.from_dict(test_score).T.rename(index=str, columns={0: '20_Train', 1: '40_Train', 2: '60_Train', 3: '80_Train', 4: '100_Train'})	1	1
test['cabin']= test.Cabin.str[0]	1	1
test_dataset.drop(['Name','SibSp','Parch','Ageband','Family','Fareband'],axis=1,inplace=True)	1	1
"train_df[""Sex""] = train_df[""Sex""].apply(sex_indexer)"	1	1
"df_test[""Fare""] = df_data['Fare'][891:]"	1	1
nn_model.add(Dense(1,activation='sigmoid'))	1	1
parameters['b5']	1	1
train_df.groupby('Title_num')['Age'].median()	1	1
"traind.fillna({""Embarked"": ""S""})"	1	1
in ['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked']:	1	1
data.loc[(data.passenger_fare<7.75) & (data.passenger_fare>=7.65) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Number'] =  data[(data.passenger_fare<7.75) & (data.passenger_fare>=7.65) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Number.min()	1	1
trainingPCA.drop(columns = ['Survived'])	1	1
"tot.Sex.replace({""male"": 0, ""female"": 1})"	1	1
df.groupby('Pclass')['Age'].plot(kind='kde')	1	1
all_data.loc[:,'Embarked']=all_data['Embarked'].fillna('S')	1	1
data.loc[ data['Age'] <= 16, 'Age'] = 0	1	1
df.Sex.replace(['male', 'female'], [0, 1], inplace = True)	1	1
test_df['Name'].value_counts().tolist()	1	1
testingData['is_test'] = 1	1	1
df['Title_x'] = df['Name'].apply(get_title)	1	1
data_test.drop(['Name','Ticket'],axis=1)	1	1
"dat.loc[~dat[""Title""].isin([""Mr"",""Mrs"",""Miss"",""Master"",""Dr""]), ""rareTitle""] = 1"	1	1
train_data.dtypes.value_counts()	1	1
train_df['Age'].dropna().median()	1	1
df.loc[((df.IsAlone == 1) & (df.Pclass == 2)) , 'Cl_IA'] = 2 #avg alone	1	1
train['Age'][train['Survived'] ==1]	1	1
comb_data.shape	1	1
"count[""Percentage""] = round(count[""PassengerId""].div(num_passengers),2)"	1	1
data.loc[(data['Age']>48)&(data['Age']<=64), 'Age_band'] = 3	1	1
train_data[['Age', 'Survived', 'Sex']]	1	1
"dataset['Salutation'] = dataset['Salutation'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
model_results['PublicLeaderboard'] = [0.77511, 0.77950, 0.79425, 0.77033, 0.75598]	1	1
"train_df.loc[train_df['Age'].isnull(),[""Age""]] = train_df.loc[train_df['Age'].isnull(),[""Age"",""Name""]].apply(age_na_fill,axis=1)"	1	1
df_class.iloc[0,0]/df_class.iloc[:, 0].sum()*100	1	1
tpr3.append(my_tpr)	1	1
combined['Title'] = combined.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
train_df.groupby(['familysize']).mean()['survived'].sort_values(ascending=False)	1	1
"test['Family'] = test[""Parch""] + test[""SibSp""]"	1	1
train.drop(['PassengerId', 'Survived'], axis=1).values.astype(np.float64)	1	1
train_d['Survived'].as_matrix()	1	1
test_df.rename(columns = {'Title': 'Person'}, inplace=True)	1	1
scaler.transform(x_test_data)	1	1
dataset.loc[(train['Age'] > 10) & (train['Age'] <= 20), 'AgeGroup'] = 5	1	1
train.assign(Alone = (train.SibSp == 0) & (train.Parch == 0))	1	1
df_train[['Survived','Pclass']].groupby(['Pclass'],  as_index=False).mean()	1	1
test['Fammems'] = test['Parch'] + test['SibSp']	1	1
combine['Alone'] = 0	1	1
data_sex.loc['female'].plot(kind='bar', ylim=[0, 1], title='Female Survival Rate', legend=False)	1	1
"df_test.loc[df_test[""Sex""] == ""male"", ""Sex""] = 0"	1	1
transformed_df['Family_Single'] = family.Family_Single	1	1
"test[""Cabin""] = test[""Cabin""].fillna(""C"").apply(first_letter)"	1	1
train_data['Suffix'] = train_data['Suffix'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Outlier')	1	1
df_test.drop('SibSp', axis='columns')	1	1
plt.hist(train_df['Age'])	1	1
"data[""Title""] = data[""Title""].replace(['Don', 'Dona', 'Rev', 'Dr','Major', 'Lady', 'Sir', 'Col', 'Capt', 'Countess', 'Jonkheer'],""Special"")"	1	1
"dataPrepare['Sex']=dataPrepare['Sex'].map({""male"":1,""female"":2})"	1	1
test_p.drop(['Age','Sex'],axis=1)	1	1
"titanic.query(""Survived == 0"")['Age'].dropna(), bins=int(titanic['Age'].max()),"	1	1
data_frame['Cabin'] = data_frame['Cabin'].map(lambda c : c[0])	1	1
test.drop(['Name', 'Ticket', 'Cabin'], axis=1) #Keep PassengerId here for prediction purposes	1	1
"_train[""Survived""]"	1	1
df_train['Title'] = ''	1	1
ax[3][0].hist(survivors['SibSp'].dropna().tolist(), bins=nbins)	1	1
train_df_imputed['IsMother'] = [is_mother(row) for row in train_df_imputed.iterrows()]	1	1
submission.to_csv('titanic_3.csv', index=False)	1	1
data[['FareBand', 'Survived']].groupby(['FareBand']).agg(['count','mean'])	1	1
train_df[['Age']].plot(kind='hist', bins=20)	1	1
women.loc[full_train_set['Survived'] == 0].shape[0]	1	1
x.drop(['PassengerId','Name','Ticket','Cabin'],axis =1)#ropna(inplace = True)	1	1
testData.reset_index()	1	1
train['FamilyCategory'] = train['FamilySize'].apply(get_family_category)	1	1
"result_df.to_csv(""prediction.csv"", index=False)"	1	1
X.shape, X_test.shape, y.shape, y_test.shape	1	1
np.mean(train_data['Age'])	1	1
"df_train.loc[df_train[""Sex""] == ""male"", ""Sex""] = 0"	1	1
train['Title'] = train['Name'].apply(getTitle)	1	1
"test[[""PassengerId"",""Pclass"", ""Sex"",""Age"",""SibSp"",""Parch"",""Fare"",""Embarked""]]"	1	1
"test_df[""SibSp""]"	1	1
data_copy['Fare']=data_copy['Fare'].fillna(data_copy['Fare'].median())	1	1
dataframe1.iloc[:,6].values	1	1
train.loc[train['Fare']<=8,'Fare_cat']=0	1	1
"result.to_csv(""logistic_regression_bagging_predictions.csv"", index=False)"	1	1
testData['Family_Size']=testData['Parch']+testData['SibSp']#family size	1	1
axes[1].set(xlabel='# of Parents/Children', ylabel='')	1	1
test_df['Name'] = le.transform(test_df['Name'])	1	1
label_encoder.transform(list(train_df['cabin_blocks']))	1	1
df_full.groupby(['LastName', 'FareOrig'])	1	1
data['MilitaryTitle'] = [1 if title in militaryTitles else 0 for title in data['Title']]	1	1
train['Sex'] = train['Sex'].astype('category').cat.codes	1	1
dc.at[index,'Fare_Per_Person']=0	1	1
dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'AgeBand'] = 2	1	1
cat_indices.append(i)	1	1
gender_submission_data.describe()	1	1
data.distinction_in_tikect_PC.astype(np.uint8)	1	1
df.loc[((df.Cabin == 0) & (df.Pclass == 2)) , 'Ca_Cl'] = 2 #avg no cabin	1	1
pd.merge(df , k1_means, left_on='key1', right_index = True)	1	1
df_test.loc[:,tcols].dropna().reindex()	1	1
"train['Family'] =  train[""Parch""] + train[""SibSp""]"	1	1
t['Age'] = t['Age'].fillna(dataset['Age'].median())	1	1
ax[1].hist(train_data[train_data.Embarked == 'Q'].Fare, bins=5)	1	1
train_df['Title'] = train_df['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')	1	1
train['Pclass'] = dataset['Pclass']	1	1
train_df.groupby([key,'Survived'])['Survived'].count()	1	1
rows_to_predict['PassengerId']	1	1
df['AgeGroup'] = df.Age	1	1
encoder.transform(test)	1	1
titanic_test['Fare'] = titanic_test['Fare'].fillna(combined_df['Fare'][combined_df['Pclass'] == 3].mean())	1	1
X.drop('Survived')	1	1
train['label'] = 'train'	1	1
test['title'] = [i.replace('Col', 'rare') for i in test.title]	1	1
df_test['TitleEncoded'] = le_title.transform(df_test['Title'])	1	1
train_data['CategoricalFare'] = pd.qcut(train_data['Fare'],4)	1	1
data.Fare.fillna(val,inplace=True)	1	1
titanic_df['Cabin'] = titanic_df['Cabin'].astype(str).str[0]	1	1
full[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	1	1
"X_train.drop(labels=[""Survived"",""PassengerId""], axis=1, inplace=True)"	1	1
complete_data.append(complete_df)	1	1
dataset['Ageband'] = dataset['Ageband'].astype(int)	1	1
validation_test['M1_xgboost'] = cls_xgboost.predict(validation_test.loc[:, columns])	1	1
dfcopy.Age.values.reshape(-1,1)	1	1
all_data.query('Age != Age').head()	1	1
"sns.boxplot(x='Pclass', y='Fare', hue=""Survived"", data=train)"	1	1
df_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index = False).mean()	1	1
"train_data.loc[train_data[""Name""].str.contains(""Dr.""), ""TitleDr""] = 1"	1	1
dataset.loc[ dataset['Fare'] > 31.275, 'Fare_cat']  = 3	1	1
df['Age'] = df[['Pclass','Sex','Embarked','Age']].apply(real_age, axis=1)	1	1
"train.loc[train[""Sex""] == ""female"", ""Sex_encode""] = 1"	1	1
"df_train['fare_bin'] = pd.cut(df_train[""fare""], bins=bins_fare, labels=range(5), include_lowest=True)"	1	1
oo_test.transpose()	1	1
survived_family.sort_values(by='Rate', ascending=False, inplace=True)	1	1
X_train['null_hypo'] = 0.0	1	1
dataset.set_value(rowIndex, 'Age23to29', 1)	1	1
"sub['AGEGROUP'] = sub['AGEGROUP'].cat.rename_categories([""CHILDREN"", ""ADOLESCENENTS"", ""ADULTS"", ""MIDDLE AGE"", ""OLDS""])"	1	1
"test[""Title""] = test[""Name""].apply(title)"	1	1
df_all['Ticket'].value_counts()	1	1
df_train.apply(get_family_id, axis=1)	1	1
"data.ix[i,""Name""]"	1	1
tmp_scaled.assign(Survived=train_data['Survived'])	1	1
np.where(y_train == 0.)[0]	1	1
join['Title']	1	1
"submission.to_csv(""malai_submission.csv"", index=False)"	1	1
train['Embarked'].value_counts().plot.bar();	1	1
df_full.at[idx, 'Group'] = group_members	1	1
dataset['Age4']=0	1	1
accuracy_linreg_kfolds.append(accuracy_linreg_kfold)	1	1
test_df.replace('female',0)	1	1
data['Fare_Bin'] = pd.qcut(data['Fare'], 4)	1	1
test['Sex'] = test['Sex'].apply(lambda x: 1 if x == 'male' else 0)	1	1
"train[""Embarked""] = train[""Embarked""].map({'C':0,'Q':1,'S':2})"	1	1
model_ann.add(Dense(units=h_dims,kernel_initializer='uniform',activation='relu',input_dim=dims))	1	1
df_titanic_cleaned.dropna(axis=0, how='any', inplace=True)	1	1
train['Sex'].loc[train['Sex'] == 'female'] = 1	1	1
df_train_clean_age.groupby('AgeRange')['Survived'].mean()	1	1
"_df.loc[ [1268, 70],""group_id""] = 1002.0"	1	1
"pclass.groupby(""Pclass"")[""Survived""].aggregate({""sum_of_survivor"":""sum""})"	1	1
df['Woman'] = (df[df.Sex == 'female'].Age >= age_cutoff).astype(int)	1	1
base_models['GradientBoosting'].feature_importances_,	1	1
dataset['Title'] = dataset['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)	1	1
train_raw.append(test_raw, sort=False)	1	1
group_counts['Pred_survived'] = survived_by_group['Pred_survived']	1	1
dataset['Parch'][i] >= 4:	1	1
test_data['Parch'].isnull().sum()	1	1
test['TicketPrefix'] = test['Ticket'].apply(extract_ticket_prefix)	1	1
train_copy.drop(['PassengerId','Survived'], axis=1)	1	1
train['Pclass']	1	1
test['Name'] = test.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
X.loc[np.isnan(X['Age']), 'Age'] = age_null_random_list	1	1
"data4[""Survived""]=y_predict_adaboost"	1	1
"train[""Embarked_Q""] = False"	1	1
df_train.drop(['Cabin','Ticket'],axis = 1, inplace= True)	1	1
dataset_train['Embarked'] = lb_Emb.fit_transform(dataset_train.Embarked)	1	1
test2_df['FamilySize'] = test2_df['SibSp'] + test2_df['Parch'] + 1	1	1
x_test['FamilySize_6'] = x_test['FamilySize'].apply(lambda x: 1 if x == 6 else 0)	1	1
df_train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)	1	1
titanic.drop(['PassengerId', 'Ticket', 'Cabin'], axis = 1)	1	1
test.loc[test.Age.notnull()]	1	1
np.dot(X_train, weights) + biais	1	1
dup_train_label.head()	1	1
df_train['Name']	1	1
"df_train[""Alone""] = df_data['Alone'][:891]"	1	1
aov_table['sum_sq'][0]/(aov_table['sum_sq'][0]+aov_table['sum_sq'][1])	1	1
"train[""FamilyMembers""]=train[""SibSp""]+data[""Parch""]"	1	1
"df[""n_noise""] = np.random.randn(len(df))"	1	1
new_test_data.values[:, :].astype(float)	1	1
dataset['test_x']	1	1
submission.to_csv('kernel.csv', index=False)	1	1
X['Embarked'] = le.fit_transform(X['Embarked'].astype(str))	1	1
test_df['FareBin_Code'] = data['FareBin_Code'][891:]	1	1
X_final_test.reset_index();	1	1
df_full['Embarked'].fillna('S', inplace=True)	1	1
ada2_params['n_estimators'] = num	1	1
test[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
train_test.loc[(train_test['Embarked'].isnull()), 'Embarked']='S'	1	1
train_set.isnull().sum() # quantify missing data in features	1	1
"test[""Survived""] = model.predict(sp.sparse.hstack([sex, age, pclass, fare]))"	1	1
"data[""Survived""].corr(data[""Parch""]),"	1	1
le.transform(test_c[column])	1	1
ship.drop(['Title', 'Title_Code'],axis=1,inplace=True)	1	1
Test['caC'] = Test['Cabin'].map({'A':0,'B':0,'C':1,'D':0,'E':0,'F':0,'G':0,'T':0,'U':0}).astype(int)	1	1
"combine['Embarked'].iloc[61] = ""C"""	1	1
test_df['Name_Title']	1	1
rf_rfecv.transform(rf_rfecv_test)	1	1
traindf[['Pclass','Survived']].groupby(['Pclass'] ,as_index=False ).mean()	1	1
df.drop(index=df.loc[df['Embarked'].isnull()].index, inplace=True)	1	1
"combined.to_csv(""combined.csv"")"	1	1
df['Fare_Range']=pd.qcut(df['Fare'],4)	1	1
"train2_df[""TitleEnc""] = title_lab_enc.transform(train2_df[""Title""])"	1	1
k.append('Master.')	1	1
train3_X[['Sex', 'Age', 'Fare']]	1	1
test_df.drop('Ticket', 1, inplace=True)	1	1
"logistic_submit_dataframe[""Survived""] = logistic_test_Y"	1	1
df_train.loc[df_train['Embarked'].isnull(),'Embarked'] = freq_port	1	1
df_train.shape, df_test.shape, df_train.columns.values	1	1
"train.loc[train['Embarked'] == ""Q"", 'Embarked'] = 2"	1	1
data_replaced_ages.loc[(data_replaced_ages['Sex'] == 'male') & (data_replaced_ages['Survived'] == 1) & (data_replaced_ages['Age'].isnull()), 'Age'] = survive_males['Age'].median()	1	1
df_train['Age'] = df_train[['Age','Pclass']].apply(impute_age, axis=1)	1	1
data.iloc[-1]	1	1
"train_dataset.loc[ train_dataset.Fare <= train_dataset.Fare.median(), ""Fare_Bound"" ] = 2 # Low Fare type"	1	1
updated_test_data['Title'] = updated_test_data['Title'].str.extract('([A-Za-z]+)\.', expand=True)	1	1
dataset['Title'] = dataset['Title'].replace(['Countess','Dona','Lady'],'Rarefemale')	1	1
merged.loc[(merged['FamilySize'] > 1)  &  (merged['FamilySize'] < 5) , 'Fsize'] = 'Small'	1	1
"test.drop([""Cabin""], axis=1)                                   #dropping Cabin variable"	1	1
df_test.drop('Name', axis=1)	1	1
train_data['Sex'] = train_data['Sex'].map(sex_map)	1	1
titanic['Age'] = df_train['Age'].fillna(age_mean)	1	1
test_data.Embarked.fillna(value=test_data.Embarked.mode()[0], inplace=True)	1	1
data['Age'] = pd.qcut(data['Age'], 10, labels=False)	1	1
df_test.join(pclass_one_hot_test)	1	1
imputed.values	1	1
train.drop('Training_set', axis=1, inplace=True)	1	1
data[['Survived', 'Pclass']].groupby('Pclass').mean()	1	1
"test_df.set_index(""passengerid"")"	1	1
"train[[""Pclass"",""Sex"", ""Survived""]].groupby(['Pclass','Sex'], as_index=False).agg(['mean', 'count'])"	1	1
"t[""Embarked""].groupby(t[""Pclass""]).value_counts()"	1	1
d.to_csv('pred.csv',index=False,header=['PassengerId','Survived'])	1	1
df['Fare'].hist()	1	1
new_x.append('Non Alpha')	1	1
dataset['Familysize_cat'] = pd.cut(dataset['Familysize'], 4)	1	1
data_train.loc[data_train['FamilyPresent']==0,'FamilyPresent'] = 0	1	1
m.FamilySurvived.astype('int32')	1	1
survived_female_data.shape[0]	1	1
"test['Age'].fillna(test.groupby('Title')['Age'].transform(""median""), inplace=True)"	1	1
"test[""Cabin""][test[""Cabin""] == ""T""] = 7"	1	1
axes[2].cla()	1	1
train.Survived.groupby(train.Pclass)	1	1
output.to_csv('./prediction.csv', index=False)	1	1
data.apply(lambda x: x.Cabin if len(str(x.Cabin))== 1 else x.Cabin_Letter[0][0], axis=1)	1	1
"df[""NameLength""] = df[""Name""].apply(lambda x: len(x))"	1	1
t.empty==False:	1	1
"train[""FamilySize""]=train[""SibSp""]+train[""Parch""]+1"	1	1
"result_test6[""Survived""] = y_pred_log_rand"	1	1
df['prob_surv'] = df[1] / (df[1] + df[0])	1	1
titanic.loc[female_index,'Sex'] = 0	1	1
X_train.shape, X_test.shape, y_train.shape, y_test.shape	1	1
row['Age'] <= 17 and row['Pclass'] == 1:	1	1
train['Parch'].isnull().values.ravel().sum()	1	1
df_test['Name'].str.split(',', n=1, expand=True)	1	1
my_submission.to_csv('submission_3.csv', index=False)	1	1
pipelines.append(('ScaledGBC', Pipeline([('Scaler', StandardScaler()),('GBC', GradientBoostingClassifier())])))	1	1
test['Has_Cabin'] = test['Cabin'].apply(lambda x:0 if type(x)==float else 1)	1	1
test_data.set_value(index,'AgeRange','>60')	1	1
train[['Title','Survived']].groupby(['Title']).mean()	1	1
dataset[['Age', 'Title']].groupby(['Title'], as_index=False).median()	1	1
full['_AgeImputer'].hist();	1	1
titanic_df['Fare'] = titanic_df['Fare'].fillna(titanic_df['Fare'].median())	1	1
titanic_train.loc[titanic_train.Age.isnull(), 'Age'] = titanic_train.groupby('Pclass')['Age'].transform('mean')	1	1
test_data.values[:, :].astype(float)	1	1
strat_train_set[['Survived']].copy()	1	1
"train_dat.at[i,""Ticket_g""] = ""Others"""	1	1
X_train.Survived.mean()	1	1
data_train['Age'].loc[data_train['Pclass']==2].plot(kind='kde')	1	1
dataset['Sex'] = dataset['Sex'].map({'female': 0, 'male': 1})	1	1
test['Male'] = pd.get_dummies(test['Sex'])['male']	1	1
pipelines.append(('ScaledETR', Pipeline([('Scaler', StandardScaler()),('ETR', ExtraTreesClassifier())])))	1	1
test3['Intercept'] = 1	1	1
train_df['Title'] = train_df['Title'].apply(filter_title)	1	1
"combined.loc[p, ""group_type""] = ""family"""	1	1
all_data.groupby(['Pclass', 'Sex', 'Married'], as_index=False)['Age'].mean()	1	1
data.loc[ data['Age'] <= 13, 'Age'] = 0	1	1
train[['CategoricalFare', 'Survived']].groupby(['CategoricalFare'], as_index=False).count()	1	1
train_data.loc[:,['Survived','Pclass','Sex']]	1	1
train_data.reindex(np.random.permutation(train_data.index))	1	1
test_dat.loc[test_dat['Fare'].isnull(),'Fare'] = average_fare_by_class[average_fare_by_class['Pclass'] == 2]['Fare'][0]	1	1
test.loc[test['Name'] == name, 'title'] = 'Mr'	1	1
test_df['Age'] = test_age_groups.Age.apply(lambda x: x.fillna(x.median()))	1	1
"data['Title'] = data['Name'].str.split("","",expand=True)[1].str.split(""."",expand=True)[0]"	1	1
titanic_train['Sex'] = titanic_train['Sex'].map({'female': 10, 'male': 1}).astype(int)	1	1
titanic_test['Fare'].fillna(titanic_test['Fare'].median(),inplace=True)	1	1
data_train_all.Age.fillna(data_train_all.Age.median())	1	1
age_all.drop(['Survived'], 1)	1	1
train['EmbarkedCategorical'] = train['EmbarkedCategorical'].astype(int)	1	1
rawdata.ix[(rawdata.Fare > 14.454) & (rawdata.Fare <= 26), 'FareCategory'] = 3	1	1
testData.groupby(['Sex']).count()['isSurvived'].reset_index()	1	1
df['Title'] = name[1].str.strip()	1	1
test_df['family_size'] = test_df['SibSp'] + test_df['Parch']	1	1
survived_embarked['Rate'] = survived_embarked[1]/survived_embarked.sum(axis=1)	1	1
frame.values	1	1
train_X['Pclass'] = train_X['Pclass'].map(p)	1	1
testdata.shape	1	1
acq_in_train.drop(family_cols, axis=1)	1	1
"data_df.loc[(data_df[""Age""] > 35) & (data_df[""Age""] <= 64),  'Age_Grouped'] = 3"	1	1
train_df.columns.isin(['passengerid', 'name']).any():	1	1
em_map['C'] = 1	1	1
sns.boxplot(x = 'Survived', y = 'Fare', data = titanic_train)	1	1
survived_data['Survived'].loc[survived_data['Pclass']==3]	1	1
"titanic_test.drop(""PassengerId"",axis=1)"	1	1
df['Age'][np.isnan(df['Age'])] = train_random_ages	1	1
"holdout[""Age_categories""] = pd.cut(holdout[""Age""],cuts,labels=labels)"	1	1
df['age_T'] = df.apply(lambda x: 3 if (x['Age'] >= 18 and x['age_T'] < 25) else x['age_T'], axis=1)	1	1
"np.where(dataset[""Embarked""]==""C"",1,0)  #Embarked on Q is when the rest of embarked are 0"	1	1
data_test_dummy2['Age_scaled'] = std_scaler.fit_transform(reshape_Age2, std_scaler_Age2)	1	1
train_one.head(10)	1	1
df_test['Initial']= df_test.Name.str.extract('([A-Za-z]+)\.')	1	1
re_train.drop('Survived', axis=1).values.reshape((re_train.shape[0], 10))	1	1
scaler.transform(np_train_features)	1	1
combine['Family'] = combine.SibSp + combine.Parch	1	1
train_df[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending= False)	1	1
train_df[['Title','Age']].loc[train_df['Age'].notnull()].groupby('Title').std().fillna(0)	1	1
"df_train[""Sex""].loc[df_train[""Sex""] == 'female'] = 0"	1	1
"test_df[""Sex""]=test_df[""Sex""].astype(""category"")"	1	1
train['Embarked']=train['Embarked'].apply(lambda b: e[b])	1	1
train.merge(withPeer[['Ticket', 'peer']], on='Ticket')	1	1
"test[[""Embarked"", ""Embarked_C"", ""Embarked_S"", ""Embarked_Q""]].head()"	1	1
test_ori.drop(['Name','PassengerId','Ticket','Cabin','SibSp','Parch'],axis=1)	1	1
impute.isnull().sum()	1	1
comb.Cabin.describe()	1	1
train.drop(['PassengerId', 'Survived','Name','Cabin'],axis=1)	1	1
df['famwithmr'] = np.where(df['famsize']==1, 1, df['famwithmr'] )	1	1
dataset['Ticket'][rowIndex]	1	1
"test_X[""Pclass_Fare""] = test_X.Pclass * test_X.Fare"	1	1
ax[0][1].set_xticks([i+width/2 for i in x])	1	1
train['sex_code'] = train['Sex'].astype('category').cat.codes	1	1
Y_train.reset_index(drop=True)	1	1
titanic['Fare'] = titanic['Fare'].fillna(titanic['Fare'].mean())	1	1
var.append(X_train_new.shape[1])	1	1
ax[1].set_title('Feature Importance in AdaBoost')	1	1
df.drop(columns=['PassengerId', 'Ticket', 'Cabin', 'Name'], inplace=True)	1	1
np.mean(X_train['age'][X_train['age'].gt(0)])	1	1
test_df['Fare'].apply(lambda x: 1 if (x > 31.0 and x <= 52.329) else 0)	1	1
children.loc[full_train_set['Survived'] == 1].shape[0]	1	1
train.drop(['Fare'], 1, inplace=True)	1	1
test_set[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
result.to_csv('decisiontree-age-parch-sibsp-sex.csv', index=False)	1	1
data.loc[(data.passenger_fare>19.69) & (data.passenger_fare<=23.374) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>19.69) & (data.passenger_fare<=23.374) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
"df_train[""AgeGroup""] = pd.cut(df_train[""Age""], bins, labels = labels)"	1	1
df_final['FamilySize'] = df_final['SibSp'] + df_final['Parch'] + 1	1	1
y_t.values.reshape(y_t.shape[0], 1)	1	1
X_test['Sex_Label'] = le.fit_transform(X_test['Sex'])	1	1
categorical_data.append('ischild')	1	1
"titanic_df[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
titanic_test['Fare_range']=Fare_range_test	1	1
dataPrepare['Age'][dataPrepare['Age']<1]=1	1	1
Submission['Survived'] = Y_pred	1	1
df.loc[(df['SibSp'] == 0) & (df['Parch'] == 0), 'Alone'] = 1	1	1
test_data['Embarked'] = test_data['Embarked'].map({'S':1,'Q':2,'C':3})	1	1
test.drop(droppings, 1, inplace=True)	1	1
data['is_alone'] = is_alone	1	1
test.apply(lambda row: get_cabin_id(row, cabin_id_mapping), axis=1);	1	1
np.mean(classifier.predict(X_test)==y_test)*100	1	1
test_df.join(embarkDummy_test)	1	1
dataset.loc[dataset['Age'] > 60, 'Age'] = 4	1	1
x_test['Embarked'] = le.fit_transform(x_test['Embarked'])	1	1
row.keys():	1	1
self.leaves[0]	1	1
data['Age']      = data['Age'].fillna(data['Age'].median())	1	1
ax2[0].hist(df_1c[df_1c.Survived == 0].Age, bins=10, range=(0,100))	1	1
df_s.groupby(['Survived'])['Sex']	1	1
df.loc[df['Survived'] == 0, :].copy()	1	1
val[0]	1	1
comparesion_df.set_index('Score')	1	1
plt.style.use('dark_background')	1	1
Xy_train_df.drop('Survived',axis=1).head()	1	1
df_test['df_type'] = 'Test'	1	1
train[['Age']]	1	1
"categoric_data[""Pclass""] = categoric_data[""Pclass""].astype('str')"	1	1
train['Survived'].values.reshape(-1, 1)[:m, :]	1	1
"titanic_training_data[""Embarked""] = titanic_training_data[""Embarked""].fillna(""S"")"	1	1
"StackingSubmissionNMD.to_csv(""StackingSubmissionNMD.csv"", index=False)"	1	1
"test_df[""Embarked""].loc[test_df[""Embarked""]==""S""]=1"	1	1
train_df.loc[:, 'Name']	1	1
data.Embarked.fillna(data['Embarked'].mode()[0], inplace=True)	1	1
data['AgeGroup'] = data['Age'].apply(age_group)	1	1
data['Title'].describe()	1	1
comb_data[['Fare']] = np.log1p(comb_data[['Fare']])	1	1
df_test['Fare'].fillna((df_test['Fare'].mean()), inplace=True)	1	1
"submission_lr[""PassengerId""] = test[""PassengerId""]"	1	1
predict_test.loc[ (predict_test['Pclass']==1) & (predict_test['Age'] < 18) ,'Survived']=1 # set 1st children survive to 1	1	1
train['Fare'].describe(percentiles = [.15, .30, .45, .60, .75, .90])	1	1
train_data.drop(['Name'],axis = 1)	1	1
train_df.drop(['PassengerId','Age','SibSp','Parch','Fare'], axis=1)	1	1
"titanic_train_dataframe.loc[titanic_train_dataframe[""Pclass""] == 3, ""Fare""].describe()"	1	1
train.iloc[:, :-1]	1	1
dataset['Age_Class']= dataset['Age']*dataset['Pclass']	1	1
"df_test[""Title""] = df_test[""Title""].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
test.drop(drop_cols, axis=1, inplace=True)	1	1
df_train.dropna(subset=dropped_row_subset)	1	1
data['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)	1	1
train_df['isAlone'] = train_df['family_size'][train_df['family_size'] == 1]	1	1
data['Fare'] = data['Fare'].apply(impute_fare)	1	1
"df['Title'] = df['Title'].map({""Mr"": 1, ""Miss"": 2, ""Mrs"": 3, ""Master"": 4, ""Rare"": 5}).fillna(0)"	1	1
"df.to_csv(""submission.csv"")"	1	1
rf_oof_train.shape	1	1
feats.loc[~feats.Age.isnull(), predictors]	1	1
df1['SibSp'].value_counts().plot.bar()	1	1
preprocessedDataset.iloc[i,0:nDataCol]	1	1
np.mean(features, axis=0)	1	1
test.loc[(test['Pclass'] == 1) & (test['hasCabin1'] == 1), 'class_hascabin'] = 2	1	1
tdf_train['Survived'].astype(int)	1	1
output['Survived'] = y_test	1	1
train_data['Cabin'].dropna()	1	1
test.loc[test.Age.isnull()]       #Age = Nan( to be predicted)	1	1
titanic.loc[titanic['Fare']<=7.896,'Fare_grouped']=0	1	1
titanic_data['Cabin_letter'] = titanic_data['Cabin'].str[0]	1	1
test['Name_Title'].value_counts()	1	1
fill_test_age.loc[fill_test_age['Pclass']==pclass, 'Age'] = pclass_median[pclass]	1	1
train.loc[(train['Age'] > 16),'Age']=1	1	1
train['AgeBand'] = (train['Age']/5).astype(int)	1	1
Y_train.values.ravel()	1	1
df.Cabin_numerical.fillna(extreme, inplace=True)	1	1
data_no_nan['Fare'] = data_set['Fare'].fillna(data_set['Fare'].median())	1	1
dataset.loc[dataset['Family_size']==1,'IsAlone']=1	1	1
titanic_test['Age_Child']=(titanic_test['Age']<=18).astype(int)	1	1
data['prefix'] = data['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	1	1
"full_data[""AdultFemale""] = 0"	1	1
train['Survived'].values.astype(np.float64)	1	1
df.loc[the_embark_series & the_sex_series & df.Age.isnull(), 'Age'] = median	1	1
"dataset[""Sex""] = dataset[""Sex""].map({""female"": ""1"", ""male"": ""0""}).astype(""int"")"	1	1
"dftest.loc[dftest[dftest[""PassengerId""]==1297].index,""Survived""]=1"	1	1
"full_df[[""FamilySize"", ""Survived""]].groupby(['FamilySize'],as_index=False).mean()"	1	1
frame.loc[frame.Sex=='female','Sex']=1	1	1
"test_data[""Family""]"	1	1
submission.to_csv(r'mysubmission.csv',index=False)	1	1
dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age3'] = 1	1	1
acc_valid_cv_summary.loc[clf_name, transform_name] = score['test_score'].mean()	1	1
testdata.ix[testdata.Age < 12, 'AgeCategory'] = 0	1	1
in ['Capt', 'Col', 'Dr', 'Major', 'Rev']:	1	1
score_list.append(knn.score(x_test,y_test))	1	1
titanic_data['FamilySize'] = titanic_data['SibSp'] + titanic_data['Parch']+1	1	1
df_t['Title'] = titles	1	1
df.loc[((df.IsKid == 1) & (df.Pclass == 1)) , 'IK_Cl'] = 4 #rich kid	1	1
train_df.drop(['PassengerId','Ticket', 'Cabin','Name','SibSp', 'FamilySize','Parch','n_on_ticket'], axis=1)	1	1
df['Ticket'] = Ticket	1	1
train['Fare'].hist()	1	1
my_submission['producto'].values.sum()	1	1
test_try.drop(['FareBand'], axis =1)	1	1
test_y.append(0)	1	1
test['Embarked'] = test['Embarked'].map(lambda x : 1 if x=='S' else 2 if x=='C' else 3)	1	1
df_full.loc[df_full['PassengerId'] == 1044, 'Fare'] = 13.302889	1	1
"X_test.select_dtypes(exclude=[""object""])"	1	1
model.add(Dense(10, input_dim=InputDimension, activation='relu'))	1	1
df_all['Title'][df_all.Title.isin(['Capt', 'Don', 'Major', 'Col', 'Sir'])] = 'Sir'	1	1
y.describe(include = 'all')  # Pandas describe function, wow!	1	1
dataset.loc[dataset.Embarked.isnull(),'Embarked'] = 'S'	1	1
train_data.Embarked.fillna('S', axis=0)	1	1
"train_dat[""Sex""].value_counts()"	1	1
df_combined['Salutation'] = df_combined.Name.str.extract(', ([A-Za-z]+)\.', expand=False)	1	1
age_validation.assign(rf_age = age_rf.predict(age_validation[['Pclass', 'encodedTitle', 'SibSpGroup1', 'SibSpGroup2', 'SibSpGroup3', 'ParChGT2']]))	1	1
combined['Name_Title'] = combined['Name_Title'].apply(Name_Title_Code)	1	1
test.loc[(test.Age.isnull())&(test.Initial=='Master'),'Age']=5	1	1
df.describe(include = 'all')	1	1
AA_train.drop(['Age'], axis=1)	1	1
nostra_coefs.ix[0].plot(kind='bar')	1	1
combine['Fare_eff'] = combine['Fare']/combine['NoPerTicket']	1	1
scores.sort_values(by='Score', ascending=False)	1	1
train['Sex'].loc[train['Sex']=='male']=1	1	1
"tp.loc[tp[""Title""]==""Master"",""Title_c""] = 3"	1	1
sns.boxplot(x='Pclass', y='Fare', hue='Survived', data=df3)	1	1
titanic[['Survived','Age_bin']].groupby('Age_bin').mean().reset_index().sort_values(by='Survived',ascending=False)	1	1
t_df.pivot_table('Survived', index= [Age, 'Sex'], columns = 'Pclass')	1	1
"test['Age'] = test[""Age""].fillna(np.mean(test['Age']))"	1	1
original_test_df['PassengerId']	1	1
Xtest_category.head()	1	1
train_isnull.style.format({'% of Missing Data': lambda x:'{:.1%}'.format(abs(x))})	1	1
titanic_test_df.drop(['Parch', 'SibSp', 'Ticket', 'Cabin', 'Name'], axis=1)	1	1
"test[""Age""].fillna(train.groupby('Title')[""Age""].transform(""median""),inplace=True)"	1	1
shap_values.sum(1).astype(np.float64),	1	1
res_acc.append(cross_val_score(gradientBClass,X,y,scoring='accuracy',cv=10).mean()*100)	1	1
all_data['Family_Survival'] = default_survial_value	1	1
data.Age.loc[(data.Age<0) & (data.relatives==1) & (data.Personal_Titles=='Mr')] =    data.Age[(data.Age>=0) & (data.sons==1) & (data.Personal_Titles=='Mr')].median()	1	1
"test[""TicketGrp""] = test.loc[:,""TicketGrp""].apply(Tix_label)"	1	1
full_dataset.loc[(full_dataset['Fare']>14.454)&(full_dataset['Fare']<=31),'Fare']=2	1	1
"df2['Embarked'] = df2['Embarked'].fillna(""S"")"	1	1
dataset['Embarked'] = dataset['Embarked'].fillna(top)	1	1
"train['cabin_binary'] = train[""Cabin""].apply(lambda i: 0 if str(i) == ""nan"" else 1)"	1	1
X_train_t.copy()	1	1
test_df.loc[test_df['FamMembers'] > 4, 'FamSize'] = 'large (>4 members)'	1	1
k.append('Dr.')	1	1
"train[""Parch""]"	1	1
dataset['Middle_Class'] = dataset['Pclass'].map(lambda s: 1 if  s == 2  else 0)	1	1
titanic_train['Age'] = titanic_train['AgeBand']	1	1
titanic_train['Emb'] = titanic_train['Embarked'].apply(convert_e_2_num)	1	1
dataset['FamilyS'] = dataset['FamilyS'].apply(family)	1	1
"train_df.set_index(""RGroup"",inplace=True)"	1	1
dft['Fare'] = dft['Fare'].fillna(dft['Fare'].median())	1	1
imputer_test.transform(X_test[:, 2:3]) # Convert NaN's to mean of whole column	1	1
train_df.describe(include=['number'])	1	1
"train.drop([""PassengerId"", ""Name"", ""Ticket""], axis=1)"	1	1
combined.drop(['Cabin', 'Name', 'Survived', 'Ticket', 'Parch', 'PassengerId'], axis=1)	1	1
ax[0].set_title('Survival per Age')	1	1
df['FamSize2'] = df['FamSize2'].replace(['single', 'small', 'large'], range(3))	1	1
"train_data[""FamilySize""] = train_data[""Parch""] + train_data[""SibSp""] + 1"	1	1
test_df.drop(['Ticket', 'Cabin',], axis=1)	1	1
submission.to_csv('finaloutput.csv',index=False)	1	1
train['title'] = train['title'].apply(lambda x: x if x in Title_List else 'Misc')	1	1
data['grandparent_alone'] = data.apply(lambda x: 1 if ((x.Parch>0) & (x.SibSp==0) & (x.Age>45) ) else 0, axis=1)	1	1
"testdf[""PassengerId""],"	1	1
"pd.pivot_table(data= titanic, values= ""Age"", index= ""Sex"", columns=""Pclass"", aggfunc=""mean"")"	1	1
cols_cut1.copy()	1	1
df_test['FirstName'] = name_parts[1]	1	1
train.Cabin.fillna('N')	1	1
model.evals_result_['validation_0'][name],	1	1
to_replace.keys():	1	1
merged['Fare_cat']=0	1	1
X_train.loc[:,'Pclass'] = X_train.loc[:,'Pclass'] - 1	1	1
"dataset_train[""Cabin""].head()"	1	1
full['Fare'] = full['Fare'].replace(3, 'Medium')	1	1
train_dummy['Age'] = age_imputed	1	1
test.loc[ test['Name_len'] <= 19, 'Name_len']       = 0	1	1
test_df.loc[(test_df['Age']>48)&(test_df['Age']<=64),'Age_band']=4	1	1
train_clean.head()	1	1
titanic_data[['Survived', 'Parch', 'Age']];	1	1
df1['Set'] = 'train'	1	1
manual_check.append(idxs)	1	1
train.drop('Pclass', axis=1, inplace=True)	1	1
"df.loc[:,[""Pclass"",""Sex"",""Age"",""SibSp"",""Parch""]]"	1	1
test.drop(['Name', 'Cabin', 'Embarked', 'Ticket', 'Fare'], axis=1, inplace=True)	1	1
full['fSize'] = full['SibSp'] + full['Parch'] + 1	1	1
"imputedTest[""isChild""] = 0"	1	1
train_df.drop('Name',axis =1)	1	1
q_variable.append(raw_q_variable[i] if i in q_variable_index else 0)	1	1
df['Sex_female'][df['Sex_female'] == 1][df['Survived'] == 1].count()	1	1
df['Embarked']=df['Embarked'].replace('Q',np.int32(2))	1	1
data.drop('PassengerId' , axis=1)	1	1
train_dataset.drop(['PassengerId','Name','SibSp','Parch','Cabin','Ticket','Cabin','family','Title'],axis=1)	1	1
"full_data[""FamilyCat""][ (full_data[""Parch""] + full_data[""SibSp""]) > 3 ] = 2"	1	1
"full.set_value(full[""Title""] == ""Mrs"", ""Title"", 1)"	1	1
d['IsAlone'] = 1	1	1
df_full['TicketSize'] = df_full['Ticket'].map(df_ticket)	1	1
train['title']=0	1	1
test_data['Title'] = test_data['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	1	1
"data[""SocialGroup""] = data[""Title""].map(SOCIAL_GROUP_BY_TITLE)"	1	1
"full[""Surname""] = full[""Name""].apply(split_surname)"	1	1
data.set_value(841, 'TicketClean', int(med2))	1	1
self.val_accs.append(logs.get('val_acc'))	1	1
train.groupby(['Embarked', 'Sex']).Survived.mean().plot(kind = 'bar')	1	1
train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False);	1	1
model.transform(train_X)	1	1
train['Embarked'] = train['Embarked'].fillna(np.argmax(train['Embarked'].value_counts()))	1	1
train.groupby(['Embarked']).mean()	1	1
test['Fare'].values[152] = fc_test['Fare'].values[2]	1	1
"model[""classifier""].fit(X_train, y_train) # fit model to training data"	1	1
Feature_rfe.sort_values('RFECV Accuracy rank',inplace=True)	1	1
full.loc[full.PassengerId==1044,'Fare'] = Mr_S_Fare_Mean	1	1
ax2[1].set_title('Parch Not Survived')	1	1
dataset.set_value(rowIndex, 'PerPersonFare', 26)	1	1
test_df['Salutation'] = test_split_salutation.str[1]	1	1
df['Age'] = np.where((df['Age']>10*i) & (df['Age']<=(i+1)*10) ,((10*i) + ((i+1)*10))/2 , df['Age'])	1	1
corr.round(2)	1	1
"train_data[""FareBetween20And40""] = 0"	1	1
ticCount.join(ticSurN)	1	1
sns.boxplot(x=train_df.Survived, y= np.log10(train_df.Fare + 1))	1	1
raw_train['FamilyMembers'] = raw_train['SibSp'] + raw_train['Parch']	1	1
title_mean_age_test[1][7]= title_mean_age[1][13]	1	1
tr_df.drop(['Name','Embarked','Pclass','Ticket'],axis=1,inplace=True)	1	1
A_test['Age']	1	1
train_dataset['Title'].value_counts()	1	1
test_csv.loc[(test_csv.Name.str.contains('Mrs') & test_csv.Age.isnull()), 'Age'] = Mrs_average_age	1	1
X_one_hot.head()	1	1
"full.loc[(full.Embarked==""S"") & (full.Title==""Mr"") & (full.FamilySizeBand==""Loner"") & (full.Pclass==3) & (full.Fare.isnull()),""Fare""]=8"	1	1
result_df['Survived'].value_counts()	1	1
df.drop(drop_columns + ['Survived'], axis=1).iloc[:train_size]	1	1
cv_pred.append(fold_P_base)	1	1
"test_df[""YourCoin""] = test_df[ [""Female"",""Pclass""] ].apply(myCoin, axis=1)"	1	1
train_df[['AgeCategorical', 'Survived']].groupby('AgeCategorical', as_index=False).mean()	1	1
test.head(5) #survived 칼럼만 없다. 왜냐? 타겟이기 때문(종속변수 = 예측해야하는 것이기 때문)	1	1
scaled_tuples.append((model_name, Pipeline([(scaler_name, scaler), (model_name, model)])))	1	1
df['Fare'].dropna()	1	1
"train[""Title""].str.strip("" "")"	1	1
prec.append(float(Summary_DT['Precision']))	1	1
test_op.head()	1	1
data.drop(['Parch'], axis=1, inplace=True)	1	1
test_X['Embarked'] = pd.Categorical(test_X['Embarked'], categories=['S', 'C', 'Q']).codes	1	1
data.drop(['Name','Cabin','Fare','Age','Ticket'], 1)	1	1
df.drop('Title', axis=1, inplace=True, errors='ignore')	1	1
df_temp.pivot(index='Sex', columns='Survived', values='Count')	1	1
test['Survived_nn'] = y_test_preds_nn.astype(int)	1	1
train.loc[(train['Pclass'] == 1) & (train['hasAge'] == 0), 'class_hasage'] = 3 #no age Pclass 1	1	1
enc_title.transform(title_numerical.reshape(-1,1))	1	1
data['Age']=data['Age'].apply(map_age)	1	1
self.values = values.value_counts(sort=False)	1	1
test_data.drop('Title',axis=1)	1	1
"X_train[""Embarked""].fillna(X_train[""Embarked""].mode().values[0], inplace=True)"	1	1
df_train.Embarked.fillna(df_train.Embarked.mode()[0],inplace=True)	1	1
train_df[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
df_train.drop('Survived', axis=1).as_matrix()	1	1
data_combined['AgeClass'] = data_combined['Age'].apply(getAgeClass)	1	1
"test_df[""AgeImputed""] = test_df.Age.fillna(test_df.Age.mean())"	1	1
plt.hist(train.loc[train['CabinN1'] != 999, 'CabinN1'], bins = range(0, 140, 10), label = 'all')	1	1
combined.drop('family_size', inplace=True, axis=1)	1	1
titanic.loc[:,['Fare','Pclass']]	1	1
plt.hist(train['Pclass'], color = 'blue', edgecolor = 'black')	1	1
training_data['FamilySize'] = training_data['SibSp'] + training_data['Parch'] + 1	1	1
pd.pivot_table(titanic, index=['Sex', 'Title', 'Pclass'], values=['Age'], aggfunc='median')	1	1
df_train.drop(['Name', 'Cabin', 'Ticket'], axis=1, inplace=True)	1	1
axes[1].set_ylabel('Number of people')	1	1
i['FareBin'] = pd.qcut(i['Fare'], 4)	1	1
test6.drop(['SibSp', 'Parch'], axis=1)	1	1
X_test_age['PassengerId']	1	1
subset.shape[0] - (child+unknown)	1	1
data.Personal_Titles_Technical.astype(np.uint8)	1	1
dft['Fare']	1	1
df['Sex'].value_counts(normalize=True)	1	1
test_df.drop(['Pclass_3','SibSp','Parch','Sex'], axis=1) #'Family','Pclass',	1	1
test.copy(deep=True)	1	1
train_data.groupby('Pclass')['Age'].median()[row['Pclass']] if np.isnan(row['Age']) else row['Age'],	1	1
axes[0].set_xticks(ind)	1	1
dataset.Ticket.values	1	1
train_df['Survived'][train_df['Sex']=='female'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[1],shadow=True)	1	1
dataset.loc[(dataset['Fare'] > dataset['Fare'].quantile(0.2)) & (dataset['Fare'] <= dataset['Fare'].quantile(0.4)), 'Fare'] = 1	1	1
titles_test.replace(['Countess', 'Dona', 'Lady', 'Mme'], 'Mrs', inplace = True)	1	1
test['Embarked'] = test['Embarked'].replace(Embarked).astype('category')	1	1
df_test_ml['SurvivedNN'] = model.predict_classes(df_test_ml[used_features]).astype(int)	1	1
full_dataset.Cabin.fillna(value = 'X', inplace = True)	1	1
df_train['Title'] = name_parts[0].str.strip()	1	1
all_data.Cabin.count()	1	1
model_scores['KNN'] = knn_score	1	1
train_df.drop(['Surname'], axis = 1)	1	1
test_copy.loc[test_copy['Embarked'] == 'S', 'Embarked_Category'] = 0	1	1
train.isnull(),yticklabels=False,cbar=False,	1	1
raw_train['SibSp'].hist(bins=20, color='orange', normed=True, alpha=0.5)	1	1
"test3.to_csv(""Prediction.csv"", index=False)"	1	1
ave_age['Age'].loc[ave_age['Title'] == name].item()	1	1
dataset_df.groupby('Ticket'):	1	1
data.at[i,col]=df_pred.at[i,'value']	1	1
test.loc[test['Age']<=12,'Age_cat']=0	1	1
accurs.append([p, acc(y_val, preds)])	1	1
data.drop(['Survived','Name', 'PassengerId','Ticket','Fare'], axis = 1)	1	1
data.loc[ data['Age'] <= 11, 'Age'] = 0	1	1
test['Name']=nameEncoder.transform(test['Name'].transform(lambda n: n[n.index(',')+2:n.index('.')]).transform(lambda n: 'Don' if n == 'Dona' else n))	1	1
"train[[""Family"", ""Survived""]].groupby(['Family'], as_index=False).mean()"	1	1
"submission.to_csv(""sub.csv"", index = False)"	1	1
ret[1]	1	1
final_pred_df.sum(axis=1)	1	1
"data[""Survived""],"	1	1
df['Sex'] = np.where(df['Sex']== 'male', 1 , 0  )	1	1
all_data.drop(['Last_Name','Fare','Age'],axis=1,inplace=True)	1	1
validation_input['Survived'].values	1	1
allset.loc[(allset['TicketFirst']=='5') | (allset['TicketFirst']=='8') | (allset['TicketFirst']=='A')| (allset['TicketFirst']=='7')| (allset['TicketFirst']=='W')| (allset['TicketFirst']=='6')| (allset['TicketFirst']=='4'),'TicketBucket']='Low'	1	1
ticket_table['Dead_female_on_ticket'] = ticket_table['Dead_female_on_ticket'].astype(int)	1	1
test1_df['PassengerId'] = test.PassengerId	1	1
df['Sex_male'] * df['Age_0-10']	1	1
X_test.loc[(X_test.Age.isnull()), 'Age']=median_age_test	1	1
xte['T']=np.zeros((len(xte),1)).astype('int')	1	1
"traindat[""Age""]"	1	1
df[['lang','Pclass']].groupby('lang').mean()	1	1
result.to_csv('predictions_final.csv', index = False)	1	1
titanicTrain_X['Survived']	1	1
df_reduced.drop(columns=['Survived'])	1	1
csv_final_test_OneHot[['Sex','Pclass','Fare','Age','SibSp','Parch','Embarked_C','Embarked_Q','Embarked_S']]	1	1
submission['Cabin_categorical'] = submission.Cabin.str[0]	1	1
data_train.loc[:,['Survived','FamilyPresent']].groupby(['FamilyPresent']).count()	1	1
train_dat[['Pclass', 'Survived']].groupby('Pclass').mean()	1	1
train_test['Embarked'] = train_test['Embarked'].fillna('S')	1	1
test_df['Survived'] = test_result	1	1
feature_importances.set_index('features').sort_values(by = 'importance')	1	1
names.loc[(names['jonkheer'])==1,'mr'] = 1	1	1
data.Age.loc[(data.Age<0) & (data.relatives==1) & (data.Personal_Titles=='Mrs')] =    data.Age[(data.Age>=0) & (data.relatives==1) & (data.Personal_Titles=='Mrs')].median()	1	1
tit_df_san.head()	1	1
dset.drop(['SibSp', 'Parch'], axis=1, inplace=True)	1	1
train.rename(columns={'C': 'Cherbourg', 'Q': 'Queenstown', 'S': 'Southampton'})	1	1
plt.hist(x = [data1[data1['Survived']==1]['Age'], data1[data1['Survived']==0]['Age']], stacked=True, color = ['g', 'r'], label = ['Survived', 'Dead'])	1	1
"dat.loc[dat[""Title""] == ""Miss"",""isMiss""] = 1"	1	1
train_df.join(dummy[['PClass_1', 'PClass_2']])	1	1
test_copy.loc[test_copy['Pclass'] == 1, 'Pclass_Category'] = 0	1	1
"df_2[['PassengerId','Survived']].to_csv(""output.csv"",index=False)"	1	1
data['Cabin'] = data['Cabin'].replace(['B', 'D', 'E'], 'H')   #High	1	1
data['Title'] = data.Name.str.extract(' ([A-Z][a-z]+)\.', expand=False)	1	1
train['Title'] = [i.split(', ')[1] for i in train.Title]	1	1
"test[""train_test""] = ""test"""	1	1
"test[""Name""]:"	1	1
"_df.loc[mask, ""status""] = (_df.loc[mask, ""sex""] - 1).abs()"	1	1
test.loc[test['Embarked']=='Q','Port']=2	1	1
conf['parameters']	1	1
data_test.loc[data_test.Embarked.isnull(), 'Embarked'] = 'S'	1	1
train_df['Sex'] = train_df['Sex'].map( {'male': 0, 'female': 1} ).astype(int)	1	1
"combined.loc[pid,""Age_cat""] = assign_ac_by_title(combined.loc[pid,""Title""])"	1	1
df[3] = data['Fare'].loc[data.Pclass ==3]	1	1
"submission.to_csv(""kaggle_SVC.csv"",index=False)"	1	1
dataframe['Cabin'] = dataframe['Cabin'].str[0]	1	1
Test_TargetVar.astype('float')	1	1
dataset.drop(['PassengerId', 'Name', 'Parch', 'Ticket', 'Cabin'], axis=1)	1	1
df_train.loc[ (df_train.Age.isnull()) & (df_train.Pclass == f+1) & (df_train.Sex == g), 'Age'] = median_age[f,g]	1	1
data['Has_cabin'] = data['Cabin'].apply(has_cabin)	1	1
test_df['Name_Title'] = test_df['Name_Title'].apply(Name_Title_Code)	1	1
train_data['PCLASS'] = pandas.to_numeric(train_data['PCLASS'], errors='coerce')	1	1
"results.sort_values(by=""acc"", ascending=False, inplace=True)"	1	1
test.loc[:,'Pclass':]	1	1
df.loc[df['Deck']=='B', 'Deck'] = 6	1	1
test_x.drop(['Survived'], 1)	1	1
df_features['Embarked'] = df_features.groupby(['Sex','Pclass'])['Embarked'].apply(lambda x: x.fillna(x.median()))	1	1
"t[""Sex""].hist(by=t[""Survived""], sharey=True, figsize=(16,8))"	1	1
y_test[0]	1	1
y.iloc[train_index]	1	1
train.interpolate()	1	1
df['Pc3'] = (df['Pclass']==3).astype(int)	1	1
data.combine_first(misters)	1	1
"Y[""Age""].fillna(Y[""Age""].mean(), inplace=True)"	1	1
"test.loc[np.isnan(test['Age']), ""Age""] = rand_age"	1	1
sns.boxplot(y='Fare', x='Embarked', ax=ax1, data=train_df, linewidth=1, saturation=5, order=['S', 'C', 'Q'], palette=palette3)	1	1
test['Title']=test['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir','Jonkheer','Dona'], 'Rare')	1	1
ann_model.add(Dense(units= 20, kernel_initializer='uniform',activation='relu', input_dim = 12))	1	1
records.keys():	1	1
data['Pclass_2'] = data.Pclass_2.apply(lambda x: int(x))	1	1
data['Fare']=data['Fare'].astype(int)	1	1
fare_bins[0] -= 0.001 # dirty fix	1	1
df.set_index('PassengerId',inplace=True)	1	1
full['Age'] = full['Age'].apply(math.ceil)	1	1
submission.to_csv('titanic_kaggle.csv', index=False)	1	1
ax[1].set_title('Accuracy on TRAIN sample ' + suff + '(mean from CV)')	1	1
raw_test['FamilyMembers'] = raw_test['SibSp'] + raw_test['Parch']	1	1
df_train['Embarked'] = df_train['Embarked'].fillna(port_mode)	1	1
final_data.to_csv('output2.csv')	1	1
train['Title'] = train['Title'].map({'Master.': 0, 'Miss.': 1, 'Mr.': 2,'Mrs.':3}).fillna(4).astype(int)	1	1
train.join(embark_dummies_titanic)	1	1
survived_df.groupby('Sex').Survived.count()	1	1
dfte['Age'].median()	1	1
data_test_df['Cabin'] = data_test_df['Cabin'].astype(str)	1	1
test.drop('Fare', axis=1)	1	1
df.to_csv('titanic_submission.csv',header=True,index=False)	1	1
data['MaidenLastName'] = data['MaidenLastName'].str.strip()	1	1
df_train[['Parch_0_1_2_3over', 'Survived']].groupby(['Parch_0_1_2_3over']).mean()	1	1
"train_df[""Age""].dropna().astype(int).hist(bins = 70, ax=axis1)"	1	1
data_combined.drop(['Name', 'Parch', 'SibSp', 'isChild', 'isMother', 'Singleton'], axis=1)	1	1
df_test['Fare_scaled']= scaler.fit_transform(df_test[['Fare']], fare_scale_param)	1	1
"train[""Hypothesis""] = 0"	1	1
titanic_df.drop(['PassengerId', 'Name', 'Ticket', 'Embarked'], axis=1)	1	1
joined_data[['PassengerId', 'Ticket_Code']].groupby('Ticket_Code').count().rename(columns={'PassengerId': 'Number'})	1	1
"ax[2].set_title(""Predicted Survival"")"	1	1
titanic_train_data.loc[titanic_train_data.Cabin.str[0] == 'G', 'Cabin'] = 7	1	1
"test_data[""Title""][test_data[""Title""].str.contains('Col|Rev|Dona|Dr')] = ""Rare Title"""	1	1
pd.merge(df1,df2,how='outer')	1	1
"combine[1][""Age""] = tmp_test[""Age""]"	1	1
train_data.groupby(['Sex', 'Pclass']).Survived.mean().unstack()	1	1
test_d.loc[152,:]	1	1
valid_X['Embarked_Code'] = label.fit_transform(valid_X['Embarked'])	1	1
titanic_dirty.drop('Survived',axis=1),	1	1
test.Fare.dropna().mode()[0]	1	1
ax[1].plot(res_df_tol['tol'], res_df_tol['Build_time'] , 'y')	1	1
train_ds.drop(['Name'], axis= 1, inplace= True)	1	1
pd.isnull(x) and x.find(cabin) != -1 else 0	1	1
sub.to_csv('titanic_prediction_file.csv',index = False)	1	1
dataset.loc[(train['Age'] <= 10), 'AgeGroup'] = 1	1	1
tr.head()	1	1
data.loc[data['Age']>64,'Age']=4	1	1
finalTest.Age.fillna(finalTest.Age.mean(), inplace=True)	1	1
train_df[['Age','Survived']].dropna() # returns a copy with blanks removed	1	1
df['isSpecialTicket'] = df['isSpecialTicket'].map({'P':0, 'F':1, 'RE':2, 'C':3, 'S':4, 'L':5, 'W':6, 'A':7})	1	1
features_train.values	1	1
ax[0][0].set_xticks([i+width/2 for i in x])	1	1
train2['Title'][x] = 2	1	1
titanic_test_data.Cabin.fillna(0, inplace=True)	1	1
train['SibSp'].unique()	1	1
df[['Pclass','Survived']].groupby('Pclass').count()	1	1
test.loc[:, 'PassengerId']	1	1
"dftotal.loc[index,""Ticket2""]"	1	1
allset.loc[allset['TotalFamily']>3,'FamilyBucket']='LargeFamily'	1	1
submit['PassengerId'] = pd.read_csv('../input/test.csv')['PassengerId']	1	1
train.Cabin.fillna('Unknow')	1	1
dfTrain.shape	1	1
"models.append((""BaggingClassifier"", BaggingClassifier))"	1	1
all_data['Title'] = all_data['Name']	1	1
"male_alone_s['Age_cat'].value_counts(sort=False).plot(kind=""bar"",alpha=0.5,color='red',ax=axes[0,1])"	1	1
row['ticket'].isnumeric():	1	1
"train[""Sex""][train[""Sex""]==""female""]=1"	1	1
one_hot_encodings.head()	1	1
"fpr[""micro""], tpr[""micro""], _ = roc_curve(y_test.ravel(), y_score.ravel())"	1	1
data.surname_Dick.astype(np.uint8)	1	1
data_train.drop(['PassengerId', 'Name', 'Ticket'], axis=1)	1	1
test['Embarked']=test['Embarked'].map(Embarked_mapping)	1	1
data_train.loc[data_train['Survived']==0,'Embarked'].value_counts()	1	1
df.loc[df[df['Age'].isnull()].index, 'Age_pred'] = age_prediction_tree_regressor.predict(df[age_prediction_features][df['Age'].isnull()])	1	1
dataframe.loc[dataframe.Embarked.isnull(),'Embarked'] = 'S'	1	1
data_test.loc[data_test['Age'].isnull(),'Age'] = Age_mean_train	1	1
data_mut[['Survived','Sex','Pclass']]	1	1
test['Age'] = test[['Age','Pclass']].apply(fill_age_test,axis=1)	1	1
summary_df.loc['Pclass','level']='categorical' #ordinal	1	1
train_df['Alone']=0	1	1
train_df_concat['name_third_place'] = np.array(name_third_place)	1	1
fulldata.loc[fulldata['source']=='test']	1	1
df_train[['isOld','Survived']].groupby('isOld').mean()	1	1
df['Fare'].fillna(df['Fare'].dropna().median(), inplace=True)	1	1
train_features.corr()	1	1
"family[""isalone""] = np.where(familySize>=1, 1, 0)"	1	1
np.max(histAcc_validation)	1	1
dataset['Ttype2'] = dataset['Ticket'].map(cleanTicket)	1	1
data['Cabin_categorical'] = data.Cabin.str[0]	1	1
mdl.append(model)	1	1
params[0]	1	1
titanic_df['person'] = titanic_df[['Age', 'Sex']].apply(male_female_child, axis=1)	1	1
df_submission['embarked'] = df_submission['embarked'].apply(cleaner_lambda)	1	1
test['Age']=test.apply(lambda row: applypredictions(row['Age'], row[pred_cols]), axis=1)	1	1
"full.set_value(full[""Embarked""] == ""Q"", ""Embarked"", 2)"	1	1
df['ageIsNull'] = df.Age.isnull().astype(int)	1	1
features_filtered.loc[:, features_filtered.ge(0).all()]	1	1
full_data['Title'] = full_data['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
train_num.drop(columns='Survived')[~idxs_mask]	1	1
df_test['HasCabin'] = df_test['Cabin'].str.extract(r'([A-Za-z]+)', expand=False).apply(lambda x: 0 if pd.isnull(x) else 1)	1	1
data_test.drop(['Name','Ticket','Cabin','Embarked'],axis=1)	1	1
df_clean.copy()	1	1
dataset.loc[(dataset['Age'] >= 50) & (dataset['Age'] < 60), 'Age'] = 5	1	1
train_df.groupby('Sex')['Survived'].mean().plot(kind='barh',ax=axesbi[0,3],xlim=[0,1])	1	1
"fpr[""macro""] = all_fpr"	1	1
df.loc[df.Age>70]	1	1
"titanic_df.groupby([""Pclass"",""Sex""]).mean()[""Survived""][1].plot.bar(ax=axes[0] )"	1	1
dfTrain['Survived'].groupby(dfTrain['Name_Complexity']).mean()	1	1
sns.boxplot(x = 'Survived', y = 'Fare', data = train)	1	1
plt.hist(train['Age'].dropna(), bins=30)	1	1
"train_data[""Salutation""] = train_data.Name.str.split(',').str[1].str.split('.').str[0]"	1	1
evaluation_stats.append(evaluation_stat)	1	1
Z['Sex'] = labelencoder.fit_transform(Z['Sex'])	1	1
model_num.add(Dense(16, activation='relu'))	1	1
k_scores_cv.append(clf_cv_score)	1	1
np.dot(dZ1, X.T)	1	1
test['Cabin'] = test['Cabin'].fillna(value='Z')	1	1
test['F1'] = np.array(test['CategoricalFare'] == 1).astype(np.int32)	1	1
data.Woman.mean(),	1	1
train_d['Title'].unique()	1	1
train_df[['Person','Survived']].groupby(['Person'],as_index=False).mean()	1	1
"all_df[""title""] = [i[i.index(', ')+2:i.index('.')] for i in all_df[""Name""]]"	1	1
test2_df['Fare'].fillna(full_data['Fare'].mean(), inplace=True)	1	1
df_data['Fare'] = df_data['Fare'].fillna(df_data['Fare'].median())	1	1
df_train.join(fare_one_hot)	1	1
test_X['Fare'] = scaler.fit_transform(test_X['Fare'].values.reshape(-1,1))	1	1
"test.loc[test[""Embarked""]=='Q', ""Embarked_Q""] = True"	1	1
total.groupby('Ticket'):	1	1
"data_train.drop(columns=[""Fare"", ""Age""])"	1	1
tr['Deck']='C'	1	1
tmp_scaled.assign(Age=train_data['Age'])	1	1
dataset['Survived'].value_counts().values	1	1
train_csv.loc[train_csv.Name.str.contains('Mrs') & (train_csv.Parch>0), 'Mother'] = 1.0	1	1
rand_1.mean()	1	1
final_submission['Survived'] = final_mlp	1	1
x['Name'].map(map_name, na_action=None)	1	1
"train[""Pclass""]"	1	1
full['Age'] = full['Age'].replace(2, '16-32')	1	1
Survived.copy()	1	1
test['title']='Mrs'	1	1
titanic_df['Alone'].loc[titanic_df['Alone']>0]='With family'	1	1
ax[1].set_title('Age distribution')	1	1
grouped1.Age.median()	1	1
"copy[""Fare""].median()"	1	1
traindf.append(test_df)	1	1
data_train.isnull().sum()#Takes all null values and displays ammount for each coloumn	1	1
train.loc[(train['Pclass'] == 3) & (train['hasCabin1'] == 1), 'class_hascabin'] = 3 #has cabin Pclass 3	1	1
train_dataset[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
Df['Strategy_Return'] = Df.Return * Df.Predicted_Signal	1	1
d['Title'] = d['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')	1	1
train_ds.drop(['PassengerId'], axis= 1, inplace= True)	1	1
fam_df['PassengerId'][fam_df['Survived'] == 0].count()	1	1
X_train.Cabin_numerical.mean() + X_train.Cabin_numerical.std()*3	1	1
cabin['Cabin'] = full_data.Cabin.fillna('U')	1	1
"df[""embarked""]   = df.embarked.apply(lambda x : x if x not in [""S"", ""C"", ""Q""] else embarked_dict[x] )"	1	1
training_set['Mature'] = np.where((training_set['Age'] > 40) & (training_set['Age'] <= 60), 1, 0)	1	1
train[['Name']].head(20)	1	1
train_csv['Family'] = train_csv.SibSp + train_csv.Parch	1	1
"all_data[0][[""Survived""]]"	1	1
filt_df.drop(columns=['sibling_count', 'parent_child_count'])	1	1
"train_df.groupby(""pclass"")[""survived""].mean()"	1	1
data['Name'][i] = 2	1	1
data['Name'][i] = 0	1	1
data['Name'][i] = 1	1	1
scor.append(cvs.mean())	1	1
data['Name'][i] = 4	1	1
data['Name'][i] = 5	1	1
"X_test.drop([""SibSp"", ""Parch""], axis=1, inplace=True)"	1	1
"processed_dataframe[""Title""] = dataframe[""Title""].copy()"	1	1
"parameters[""b1""] -= learning_rate * db1"	1	1
train_df[['EmbarkedFill', 'Port']].head(10)	1	1
train_dat['Embarked'].isna().sum() > 0:	1	1
titanic['Title'] = titanic.Name.str.extract('([A-Za-z]+)\.',expand=True)	1	1
ax1[0].set_title('Feature Importance in Random Forests')	1	1
"df_tmp.drop([""TicketGroupSize"", ""s_with_tgs"", ""s_wo_tgs""], axis=1, inplace=True)"	1	1
train['Name_length']=train['Name'].apply(len)	1	1
data_test_all.drop(columns=['Name','PassengerId'],inplace=True)	1	1
test_data.drop(['PassengerId'],axis=1)	1	1
train['leftRight']=float('NaN')	1	1
sns.boxplot('Embarked','Fare',data=df)	1	1
df['Title_Class'] = df['Title'].map(title_mapping)	1	1
names.loc[(names['jonkheer'])==1,'jonkheer'] = 0	1	1
train_set.iloc[:,[0,2,8,11,12,14,17,18,20,21,22]].columns.tolist()	1	1
df_train['Port'] = df_train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
"test.drop([""Name""],axis=1)"	1	1
"related_people.loc[related_people[""PassengerId""]==1268,""RGroup""]=""Kink_M"""	1	1
test.loc[(test['SibSp']==0) & (test['Parch']==0) , 'Alone'] = 1	1	1
test2.values	1	1
params['learning_rate'],	1	1
test_analysed[['Sex','PTitle','Predict']].groupby(['Sex','PTitle']).mean()	1	1
test.loc[test['Cabin'].str.len() == 11.0, 'CabinL'] = test['Cabin'].astype(str).str[0]	1	1
df.iloc[:,1:2].values	1	1
data['Name'].unique():	1	1
train.loc[i,'isAlone'] = 1	1	1
train.loc[i,'isAlone'] = 0	1	1
train['withfamily'] = np.where(train['FamilySize'] > 0, 1, 0)	1	1
nat_data.items():	1	1
pred.apply(lambda x: 1 if x>0 else 0)	1	1
train[['Age', 'Fare', 'Survived']]	1	1
Each_Passenger.loc[(Each_Passenger['Age'] > 13) & (Each_Passenger['Age'] <= 22 ) | (Each_Passenger['Fare'] > 126) & (Each_Passenger['Fare'] <= 187) , 'Age'] = 3	1	1
comb.reset_index()	1	1
dataset.set_value(rowIndex, 'Age43to55', 0)	1	1
test['Title'] = test.Name.str.extract('([A-Za-z]+)\.', expand=False)	1	1
male_temp['AgeBucket'] = male_temp['Age'].apply(lambda x: x//10)	1	1
df_test['FamilySizeGroup'] = pd.cut(df_test['FamilySize'], bins)	1	1
data.loc[(data.Fare<=7.9)&(data.Pclass==3), 'PassengerCat']=5	1	1
"traindata.loc[:,[""Pclass"",""Sex"",""SibSp"",""Parch"",""Fare"",""Embarked""]]"	1	1
"new_df[""Age_qd""] = normalize( new_df[""Age_qd""] )"	1	1
test_data_after_sex.head()	1	1
X_train['Parch']	1	1
data['TicketNum'] = np.where(pd.isnull(data.TicketNum), data.Ticket.str.extract('([0-9]+)', expand=False), data.TicketNum)	1	1
"train_data[""Name""].head(100)"	1	1
k_cv_score.append(score)	1	1
"result.to_csv(""knn.csv"", index=False)"	1	1
all_data.values[:,1:]	1	1
train_data_1[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked','Title','FsizeD']]	1	1
"test[""SexF""] = test[""Sex""].apply(lambda s: genders.get(s))"	1	1
train_df['Title']=train_df['Name'].map(lambda x: re.search('.*, ([^\.]*).*',x).group(1))	1	1
df_train.groupby(['FamCat','Survived']).size().to_frame(name='Count').reset_index()	1	1
"test_forest2[[""Pclass"", ""Age"", ""Sex"", ""Fare"", ""SibSp"", ""Parch"", ""family_size""]].values"	1	1
df_final.count()	1	1
titanicTrain['Child']=np.nan	1	1
df.drop('Ticket', axis=1, inplace=True, errors='ignore')	1	1
"df_train.hist(""Survived"", by=[""Parch""],layout=[2,4], figsize = [15,10])"	1	1
data['isMother'] =np.where((data.ImputedAge>18) & (data.name_title !=' Miss') & (data.Parch >0) & (data.Sex == 'female'), 'Mother','Not Mother')	1	1
title_survive_crosstbl.divide(passanger_num_title, axis = 0).round(2)	1	1
maxS.append(g.Age.max())	1	1
df.corr()['Survived'][1:]	1	1
data.loc[ data['Fare'] > 31, 'SortFare_4'] = 3	1	1
data['Family_size']=data['SibSp']+data['Parch']	1	1
"df[""Title""][df[""Title""] == ""Mme""] = ""Mrs"""	1	1
"df_test[""title_others""]=df_test[""title""].isin(['countess.', 'lady.', 'master.', 'dr.', 'don.','jonkheer.','rev.','major.','sir.','col.','capt.']).astype('uint8')"	1	1
data['DatingRank']=data['DatingRank']*0.15	1	1
df['Age'][0:15]	1	1
"result.to_csv(""./predictions.csv"", index=False)"	1	1
"df_titanic[""Name""]=df_name[""Name""]"	1	1
test_dataset['Fare']=train_dataset['Fare'].fillna(train_dataset['Fare'].mean())	1	1
dataset.fillna(np.nan)  # Fill in empty values with NaN	1	1
df_all.loc[df_all['Fare'].isnull()]	1	1
df_d.info()	1	1
"train.loc[train[""Family""]>0, ""Family""] = 1"	1	1
"df_test[""norm_len_name""]=(df_test[""len_name""]-len_name_avg)/len_name_std"	1	1
whole.set_value(705,'Fid',192) #display(whole[whole.Name.str.contains('Hansen')]) #(624,'Fid',172)	1	1
df1.head(5)	1	1
plt.hist(coefs, bins=20)	1	1
dataset_train[['FamilySize', 'Survived']].groupby(['FamilySize']).sum()	1	1
full_data['Title'] = full_data.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
a['CatTitle'] = a['CatTitle'].replace('Mme', 'Mrs')	1	1
df.corrwith(df.Survived)	1	1
train.loc[train['Age']<1,'IsBaby']=1	1	1
test_df['Cabin'].isnull().sum()	1	1
X2.values #Converting back to array format	1	1
train[['Survived','Fare']].groupby('Fare').mean().sort_values('Survived',ascending=False)	1	1
df_test1.rename(columns={0: 'Age'}, inplace=True)	1	1
title_dummies_titanic.drop(['Misc', 'Mr'], axis=1, inplace=True)	1	1
train['Salutation'] = train['Name'].map(lambda dummy: dummy.split(',')[1].split('.')[0].strip())	1	1
test_df['Survived'] = -888 # Adding Survived with a default value	1	1
test_df.drop(['Ticket', 'Cabin', 'Embarked', 'Name'], axis = 1, inplace=True)	1	1
df_test.drop(['Fare', 'FamilySize', 'FarePPBin', 'FarePP'], axis=1)	1	1
test['Cabin'] = test['Cabin'].fillna(value=' ')	1	1
"train.groupby([""Sex"",""Pclass""],as_index=False).mean().loc[:, [""Sex"",""Pclass"",""Survived""]].rename(columns={""Survived"":""ratio""})"	1	1
Each_Passenger.loc[(Each_Passenger['Pclass'] > 0) & (Each_Passenger['Pclass'] <= 1 ) | (Each_Passenger['Parch'] > 0) & (Each_Passenger['Parch'] <= 1) , 'Pclass'] = 1	1	1
ax[0].set_title('Passengers in Pclasses')	1	1
"dataset_train[""Survived""].value_counts(normalize = True)"	1	1
data.groupby('Pclass')['Fare'].mean()	1	1
result_df.to_csv('titanic_results.csv', index=False)	1	1
vectorizer.transform(test.to_dict(orient='records'))	1	1
all_dummy_df.isnull().sum().sort_values(ascending=False).head(10)	1	1
train2['Embarked_Number'] = train2['Embarked'].map({'Cherbourg':1,'Queenstown':2,'Southhampton':3})	1	1
x_train['IsAlone'] = 1	1	1
train_df_numerical_X.as_matrix()	1	1
submission.to_csv('Submit_bag.csv', index = False)	1	1
NodeList.append(Passenger)	1	1
"sns.boxplot(x=""Title"",y=""Age"",data=df_train,ax=ax)"	1	1
df_train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
"test_dataset.loc[ (test_dataset.Pclass == 1) & (test_dataset.Sex == ""male"") & (test_dataset.Age.isnull()), ""Age"" ] = test_dataset.loc[ (test_dataset.Pclass == 1) & (test_dataset.Sex == ""male"") & (test_dataset.Age.isnull()), ""Age"" ].fillna(test_dataset.loc[ (test_dataset.Pclass == 1) & (test_dataset.Sex == ""male"") ][""Age""].median())"	1	1
data.genre.astype('category')	1	1
train_data['Title'] = train_data['Title'].replace('Mme.','Mrs.')	1	1
dataset['Cabin2']=dataset[dataset['Cabin'].notnull()]['Cabin'].apply(lambda x: str(x)[0])	1	1
titanic.to_csv('titanic.csv')	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Jonkheer"", ""Other"")"	1	1
dataset.loc[(dataset['Fare']>17)&(dataset['Fare']<=30), 'Fare']=1,	1	1
df_data['IsAlone'].loc[df_data['FamilySize'] > 1] = 0	1	1
titanic_train['age_range'] = pd.cut(titanic_train['Age'], bins, labels=age_range)	1	1
TRAIN_DATA.dtypes	1	1
test['Age'][np.isnan(test['Age'])] = test_random_ages	1	1
train_df.loc[(train_df['Age'] >= 70.0525) & (train_df['Age'] <= 80), 'Age'] = 7	1	1
df_output1.to_excel(writerxls1,'Sheet1')	1	1
train_clean.drop(['PassengerId'], axis=1)	1	1
df['Pclass_1'][df['Pclass_1'] == 1].count()	1	1
titanic_train_df.info()	1	1
"df_titanic.loc[(df_titanic[""Age""]>16) & (df_titanic[""Parch""]>0) & (df_titanic[""Sex""]==""female""),""Sex""]=""Mother"""	1	1
"train.drop([""SibSp"", ""Parch""], axis=1, inplace=True)"	1	1
"df_train[""Embarked""].fillna('S', inplace=True)"	1	1
Answer.to_csv('Answer.csv',index=False)	1	1
df['Age'] = df['Age'].fillna(-0.5)  # filling the missing data, Replace all NaN elements.	1	1
test_set['AgeBand'] = test_set['AgeBand'].cat.codes	1	1
"results.query(""Model not in @not_proba_list & Model not in @ignore"")"	1	1
train.pivot_table(columns='Sex', index='Pclass',                  values='Survived', aggfunc='mean').plot(kind='bar')	1	1
data.drop('Cabin',inplace=True, axis = 1)	1	1
"results[""Classifier""]=Classifiers"	1	1
train_data['Embarked'].unique()	1	1
test_X.drop('PassengerId', axis=1, inplace=True)	1	1
"train_df[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by=""Survived"", ascending=False)"	1	1
train.drop(outlier_indices).reset_index(drop=True)	1	1
"train_df[[""Age"", ""Survived""]].groupby(['Age'],as_index=False).mean()"	1	1
dataset.loc[dataset['Fare']>60, 'Fare']=6	1	1
df.loc[ (df.Age <= 36.75) & (df.Age > 28.5),'AgeBand'] = 2	1	1
pd.pivot_table(titanic_comb, values='Age', index='Pclass', columns='title_age',aggfunc=np.median)	1	1
combine.loc[i,'AgeAbove12'] =2	1	1
combine.loc[i,'AgeAbove12'] =1	1	1
train_df.loc[(train_df['Age']>48)&(train_df['Age']<=64),'Age_band']=4	1	1
data['Couple'] = 0	1	1
titanic_df['Alone'] = titanic_df.Alone.astype('category')	1	1
data['NetSize'] = 1	1	1
"df_train.pivot_table(""Name"", ""Embarked"", ""Sex"", ""count"").plot(kind=""bar"", stacked=True, ax=axes[0])"	1	1
df.pivot_table(values = 'Age', index = ['Pclass', 'SibSp', 'Parch'], aggfunc = 'median')	1	1
"train_set[""Fare""] = StandardScaler().fit_transform(train_set[""Fare""].values.reshape(-1,1))"	1	1
model.add(Dense(arr[i],input_dim=arr[0],kernel_initializer='normal', activation='relu'))	1	1
df_clean['Cabin_h'] = df_clean['Cabin'].map(lambda x: x[0])	1	1
"dftest[""Age""] = dftest[[""Age"", ""Pclass""]].apply (imput_age, axis=1)"	1	1
titanic_df['Alone'] = titanic_df[['Parch','SibSp']].apply(isAlone,axis=1)	1	1
df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Title'], axis=1, inplace=True)	1	1
test_df['Survived'] = -222 #enter any values	1	1
full_data.fillna(value=nan_values)	1	1
StackingSubmission.to_csv('StackingSubmission.csv', index = False)	1	1
X_train['Sex'] = X_train['Sex'].map( {'female': 1, 'male': 0} ).astype(int)	1	1
data_3.head()	1	1
"axs4[0].set_title(""People on the Titanic"", fontsize=20)"	1	1
data[1] # sex of passenger	1	1
"train.loc[(train[""Fare""] >= 14.454) & (train[""Fare""] < 31.0),""Fare""] = 2"	1	1
train['Title']=train.apply(replace_titles, axis=1)	1	1
plt.boxplot(data1['FamilySize'], showmeans=True, meanline=True)	1	1
sns.boxplot(joined['Age'][joined['Survived'] == 1], ax=ax1, width=0.3, color='blue')	1	1
train_df['Fare'][train_df['Survived'] == 1]	1	1
"df_train[[""Age""]]"	1	1
Xdf.loc[ Xdf['Fare'] > 31, 'Fare'] = 3	1	1
dfTrain.loc[dfTrain.Sex=='male','Age']=dfTrain.loc[dfTrain.Sex=='male','Age'].fillna(avgmaleTrain)	1	1
pd.isnull(arr) # using pandas isnull to also operate	1	1
finalTest.iloc[:,[0,1,2,5]]	1	1
test_df.drop(['Ticket', 'CabinLetter'], axis=1)	1	1
dataset.loc[(dataset['Age'] >48) & (dataset['Age'] <= 64), 'Age'] = 3	1	1
df[['Parch','Survived']].groupby('Parch').mean().Survived.plot('bar')	1	1
full_bins['FareBin_Code'] = label.fit_transform(full_bins.FareBin)	1	1
"train_dat.at[i,""Fmsize_c""] = ""Single"""	1	1
test['Fare'] = test.Fare.fillna(test['Fare'].median())	1	1
test_df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1)	1	1
"train[""title""] = train[""title""].map(title_mapping)"	1	1
data['LastName'] = data.Name.str.extract('([A-Za-z]+),', expand=False)	1	1
df['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major',                                        'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
df.loc[df['Cabin'].isnull(), 'HasCabin'] = 0	1	1
data['FamSize'] = data.SibSp + data.Parch + 1	1	1
train['Survived'].groupby(train['Pclass']).mean	1	1
Xtest['Sex'] = Xtest['Sex'].map({'male':0,'female':1})	1	1
"train.drop(columns = ""cabin"")"	1	1
full.iloc[len(train):,:]	1	1
data_train.drop(['Age','Fare'],axis=1, inplace=True)	1	1
"train[""Fam_group""].value_counts().plot.bar(color = ""skyblue"", ax = ax[0])"	1	1
cols['Parch']	1	1
df.shape, test.shape	1	1
df_train_ml.head(10)	1	1
coeff['Correlation'] = pd.Series(logreg.coef_[0])	1	1
train['Pclass'] = train['Pclass'].astype(str)	1	1
df_all['_Fare_norm'] = pd.DataFrame(x_scaled)	1	1
train['Title']=train['Title'].replace('Ms','Miss')	1	1
"titanic_test_data[""Name""].apply(get_title)"	1	1
subset['Fare'], hist = False, kde = True,	1	1
classifiers.append(gnb)	1	1
np.min(age)	1	1
test.loc[(test['Age']>20)&(test['Age']<=35),'Age_cat']=2	1	1
"traindat.drop(""Parch"", axis=1, inplace=True)"	1	1
dt.drop(['SibSp','Parch','Familysize'],axis=1,inplace=True)	1	1
"df_train[[""P2"",""P3""]]=pd.get_dummies(df_train[""Pclass""],drop_first=True)"	1	1
test_df['AgeGroup'] = 0	1	1
X_train_.info()	1	1
person_dummies_train.drop(['Male'], axis = 1, inplace = True)	1	1
"train_df[""ticket_number""] = [i if re.search('[a-zA-Z]', i) == None else None for i in train_df[""Ticket""]]"	1	1
df_train.groupby('Embarked')[['Survived']].mean()	1	1
df['Name'].notnull().mean()	1	1
df_all.dtypes	1	1
train.loc[train['Cabin'].str.len() == 15.0, 'CabinN1'] = train['Cabin'].astype(str).str[1:3]	1	1
sb.boxplot(dataset['Family'],dataset['Age'])	1	1
train_y.shape[1]	1	1
"prob_eval[""pushout_median""] = pushoutmedian.iloc[:,0]"	1	1
"train[""Age""] = train[""Age""].fillna(value=-0.5)"	1	1
test_df['NameLen'] = test_df['Name'].apply(len)	1	1
reduced_test_data.head()	1	1
test_features['ID']	1	1
test_df.drop(['Name','PassengerId','Ticket'], axis=1)	1	1
submission['Survived'] = model.predict(X_test).astype('int')	1	1
a.append(1/(1+math.exp(-item)))	1	1
titanic_train_data.describe()	1	1
train.groupby('Age').mean()	1	1
big_X.copy()	1	1
data.loc[ data['Fare'] <= 7.8, 'Fare'] = 1	1	1
data['Title'] = title_encoder.fit_transform(data['Title'])	1	1
submission['PassengerId'] = test['PassengerId']	1	1
features_extra.append('Survived')	1	1
titanic_test_data.loc[titanic_test_data.Cabin.str[0] == 'A', 'Cabin'] = 1	1	1
dtc_prediction.astype(int)      #prediction compute from the test dataset	1	1
train.groupby(['Fare_Range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')	1	1
titanic_df.loc[titanic_df['Embarked'].isnull() == True, 'Embarked'] = 'S'	1	1
trainNMD.shape[0]	1	1
"full_data[""FareCat""][(full_data[""Fare""] >= r) & (full_data[""Fare""] < f)] = f"	1	1
models['SVC_rbf'] = SVC(probability=True, kernel='rbf', gamma='scale', random_state=0)	1	1
train['T2'] = np.array(train['Title'] == 'Miss').astype(np.int32)	1	1
name_surv.isnull().count()	1	1
X_full.describe()	1	1
"combined.loc[f_member,""family_role""] = ""Senior"""	1	1
testdf['Embarked'].fillna('S', inplace = True)	1	1
X_tot['Fare']=X_tot['Fare'].fillna(-1)	1	1
seg_by_fare['Fare'].mean()	1	1
dataset.loc[(dataset['Fare'] > 7.896) & (dataset['Fare'] <= 14.454), 'Fare_cat'] = 1	1	1
plt.hist(test_df.Age,range=(test_df.Age.min(),test_df.Age.max()))	1	1
"sns.boxplot(x=""Pclass"", y=""Fare"", data=train_data)"	1	1
test2_df['Sex'] = test2_df['Sex'].map(sex_conv)	1	1
df1.convert_objects(convert_numeric=True)	1	1
submission.to_csv('Titanic_test_prediction_V9.csv', index=False)	1	1
data_train['Title'].value_counts()	1	1
train['Age_0'] = train['Age'].fillna(0)	1	1
raw_train['Embarked'].count()	1	1
train.loc[train.Embarked.isnull(), 'Embarked'] = train[train.Pclass==1].Embarked.mode()	1	1
df['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)	1	1
"X_dev[""Title""] = dev_data[""Title""]"	1	1
age_cate.append(ap)	1	1
test['Cabin_section'] = '0'	1	1
raw_data['Title'] = raw_data['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
"p_data[""Alone""] = p_data[""FamilySize""].apply(lambda x : 1 if x == 1 else 0)"	1	1
"X_data.drop([""Survived""], axis = 1, inplace=True)"	1	1
model_data.loc[(model_data.Pclass == 3)&(model_data.Title == 3)&model_data.Age.isnull(),('Age')] = 32	1	1
train_orj.info()	1	1
"test_df.drop([""PassengerId"", ""Family"", ""Class_1"", ""Class_2""],axis=1).copy()"	1	1
df[['lang','Survived']].groupby('lang').mean()	1	1
data.drop(['Fare_Bin', 'Age_Bin'], axis=1, inplace=True)	1	1
dataset1.iloc[:,[1,3]].values	1	1
dataframe.loc[dataframe[column_name] < 11, column_name] = 0	1	1
df_test.drop(['Cabin'],axis=1)	1	1
imput.transform(test_age_frame)	1	1
train_df.drop('Cabin', 1, inplace=True)	1	1
data_train.Fare.quantile([.25, .5, .75])	1	1
train['FinalAge'] = pd.cut(train['Age'], 5)	1	1
"train[""Embarked""].describe()"	1	1
test_df['Port'] = test_df.EmbarkedFill.map( lambda x: Ports_dict[x]).astype(int)	1	1
data['Sex'] = data['Sex'].map(sex_map).astype(int)	1	1
"X_test[""Honorific""] = X_test[""Name""].map(lambda name: name.split('.')[0].split(', ')[-1])"	1	1
parameters['print_freq'] = 100	1	1
test_df['Family_Survival'] = data_df['Family_Survival'][891:]	1	1
"dftrain[""TicketButLast""]=dftrain.Ticket.map(lambda x: x[:-1])"	1	1
x['FareBin'] = pd.qcut(x['Fare'].astype(int), 6, labels=bucket_labels)	1	1
train.dropna(subset = ['Age', 'Embarked'])	1	1
df_predict['Age']=df_predict['Age'].fillna(df_predict['Age'].mean())	1	1
dataset['Ticket'] = tickets	1	1
merged[['FamilySize','Survived']].groupby(['FamilySize']).mean().plot.bar()	1	1
"df[""HasChild""] = 0"	1	1
df_train[['AgeRange', 'Survived']].groupby(['AgeRange'], as_index=False).mean().sort_values(by='AgeRange', ascending=True)	1	1
"train.Title.replace(""Ms."", ""Miss."")"	1	1
cv_f.drop({'Survived'}, axis=1)	1	1
"df_test.loc[ df_test['Fare'] <= 7.91, 'Fare'] 						         = 0"	1	1
train.loc[(train.PassengerId==j),'Age'] = age.iloc[i,0]	1	1
combine['Title'] = combine['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')	1	1
models['set3']['num_scaling'] = 'std_scaler'	1	1
dataset.drop(drop_elements,axis=1,inplace=True)	1	1
data['Parch'].replace(0, 9, inplace=True)	1	1
one_hot_encoded_test_df.columns.values.tolist()	1	1
train['Fare_Cat'] = pd.cut(train['Fare'],bins,labels = label)	1	1
features['Age'] = normMinMax(features['Age'])	1	1
train['CategoricalFare'] = pd.cut(train['Fare'], 5)	1	1
comb.drop(['Cabin','Embarked','Name','Ticket','Title','old_age'],axis=1,inplace=True)	1	1
output_ann.to_csv('seventh_ann.csv', index= False)	1	1
acc.append(pd.DataFrame({'Model': 'Decision Tree - Gini Impurity', 'Accuracy': [accuracy_score(y_true, y_pred)]}))	1	1
dataset.set_value(rowIndex, 'PerPersonFare', 7)	1	1
"age_unique.Age.sort_values().value_counts().plot(kind=""bar"")"	1	1
whole.set_value([923,1211],'Fid',135) # Renouf, Jefferys	1	1
titanic_train_dataset['Name']:	1	1
classifiers.append(gb)	1	1
test_csv['PassengerId'] = test_dataframe['PassengerId']	1	1
data['Title'] = data['Title'].map(map_title)	1	1
test_data['child'] = 0	1	1
train_data[['Fare','Survived']].groupby('Fare', as_index=False).mean()	1	1
train.drop(['AgeBand','FareBin','Ticket','Cabin','Name','PassengerId','ticketPos'],axis=1)	1	1
train_df['Embarked'].fillna('X', inplace=True)	1	1
df.loc[df['Age'].isna(), 'Age'] = rscv.best_estimator_.predict(age_pat[age_pat['Age'].isna()].drop(['Age'], axis=1))	1	1
fulldata['Fare'] = pd.Series(scaler.fit_transform(fulldata.Fare.reshape(-1, 1)).reshape(-1), index=fulldata.index)	1	1
train_data['Pclass'].hist()	1	1
train.pivot_table(index='Sex', columns='Survived', aggfunc='count').Age	1	1
test['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)	1	1
test_1.Fare.fillna(0.0,inplace=True)	1	1
"dataset.loc[dataset[""Age""] <= 19, ""Age""] = 0"	1	1
np.add(gradient_log_likelihood(features, predicted, target)*learning_rate,weights)	1	1
X_age_dummied['SibSp_8'] = np.zeros(len(X_age_dummied))	1	1
model_type.append('GridSearchCV Logistic Regression')	1	1
all_data['Embarked'] = all_data['Embarked'].fillna(all_data['Embarked'].mode()[0])	1	1
names[1].str.split(n=1, expand=True)	1	1
"train[""Embarked""].fillna(train[""Embarked""].mode()[0], inplace=True)"	1	1
train_data['Sex'] = train_data['Sex'].map( {'female': 1, 'male': 0}).astype(int)	1	1
train[['Parch', 'Survived']].groupby('Parch').mean().iplot(kind='bar', colors='blue', title='Survival Rate based on presence of Parents or Children')	1	1
acc_scores.append(score_acc)	1	1
test_d['Title']=test_d['Title'].replace([' Col',' Major',' Sir',' Don',' the Countess',' Jonkheer',' Capt',' Dona'],' Rare')	1	1
z.append(minor(k))	1	1
cabin['Survived']/(cabin['Survived']+cabin['Non_survived'])*100;	1	1
df_submission['embarked'] = df_submission['embarked'].map({'s': 0, 'c': 1, 'q': 2})	1	1
"bestModel[""classifier""].predict(X_test),"	1	1
model.add(Dense(1, activation='linear', name='output_layer'))	1	1
df_test_ml['SurvivedECLF'].rename('Survived')	1	1
train.Age.isnull().any().sum()	1	1
"train[""Fare_cat""] = 0"	1	1
t_data.Embarked.fillna(value='S')	1	1
TitanicTrain.info()	1	1
features_long.set_value(idx1[ii], 'Age', master.iloc[np.random.randint(len(master))])	1	1
df['Cabin_type']=df['Cabin_type'].fillna('Unknown')	1	1
F_Value['Fare'].mean()	1	1
titanic_test_df.Age.loc[titanic_test_df['Title'] == 'Mrs'] = titanic_test_df.Age.fillna(titanic_test_df[(titanic_test_df['Title'] == 'Mrs')]['Age'].mean())	1	1
data['Parent'] = list(map(parent, data.Sex, data.Age, data.Parch))	1	1
pd.DataFrame.from_dict({'PassengerId': test_df['PassengerId'],'Survived' : Y_pred})	1	1
train['Fare'].iplot(kind='hist', bins=50)	1	1
a.sort_values('Values')	1	1
data['family'] = data.SibSp + data.Parch + 1	1	1
dftest.iloc[boys_survived_ids,:]	1	1
data_train['Embarked'] = data_train['Embarked'].fillna('S')	1	1
"df[""Elder""] = df[""Age""] > 65"	1	1
tempdf['min'] = np.min(np.array([tempdf[col] for col in pred_cols]),axis=0)	1	1
dataset.loc[(dataset['GroupSize'] > 1) & (dataset['GroupSize'] <= 4), 'GroupSize'] = 1	1	1
cat_pipeline.transform(df_t)	1	1
"test_df[""RGroup""]="""""	1	1
train_data['Title'].value_counts() # value_cout works only in series not in Dataframe	1	1
"data[""TravelingAlone""] = (data[""SibSp""] + data[""Parch""] == 0) * 1"	1	1
combined.drop(labels=['PassengerId','Pclass','SibSp','Parch','Ticket','Title','Embarked','Sex'],axis=1, inplace=True)	1	1
X_test.Age.fillna(X_test.Age.mean(),inplace=True)	1	1
XX['TicketCat']=XX['Ticket'].str.split(' ').map(lambda x: x[0]).str.split('/').map(lambda x: x[0])        .str.replace('.','').map(lambda x: first_digit(x))	1	1
titanic_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
test['Age'].fillna(value=np.random.randint(test['Age'].mean() - test['Age'].std(), test['Age'].mean() + test['Age'].std()), inplace=True)	1	1
df_train.drop(['SibSp','Parch','Fare','Family_members','FareBand'],axis = 1)	1	1
train_df.groupby(['title']).size().plot.bar(color='silver', rot=False); axes.set_xlabel('')	1	1
"train_data[""TitleDon""] = 0"	1	1
whole.drop('Sex',axis=1, inplace=True)	1	1
plt.hist(train.loc[(train['Survived'] == 1) & (train['CabinN1'] != 999), 'CabinN1'], bins = range(0, 140, 10), label = 'live', alpha = 0.5)	1	1
titanic.loc[(titanic['Fare']>31)&(titanic['Fare']<=513),'NFare']=3	1	1
dtrain.values	1	1
"merged_data[""fare_category""] = le.fit_transform(merged_data[""fare_category""])"	1	1
test_X['Survived'] = pred_Y	1	1
num_pipeline.transform(df_t)	1	1
titanic_all['Small_fam'] = titanic_all['Parch'] + titanic_all['SibSp'] + 1	1	1
titanic['Age'] = titanic[['Age', 'Title']].apply(master_age, axis=1)	1	1
titanic_test_df.Age.loc[titanic_test_df['Title'] == 'Master'] = titanic_test_df.Age.fillna(titanic_test_df[(titanic_test_df['Title'] == 'Master')]['Age'].mean())	1	1
df.groupby(by=['Sex', 'Title'], as_index=False, group_keys=False)['Age'].median()	1	1
titanic.Age.fillna(titanic.Age.mean(), inplace=True)  # ganti NaN dengan umur rata-rata	1	1
df_train.drop(['Deck'], axis=1)	1	1
test1.to_csv( 'titanic_pred1.csv' , index = False )	1	1
test_df['AgeGroup'] = pd.cut(test_df['Age'],[0,4,15,25,35,45,65,100])	1	1
"dataset[[""Age"", ""Sex"", ""SibSp"", ""Parch"", ""Pclass""]].corr(),"	1	1
df.loc[df['Sex'] == 'female','Sex'] = 1	1	1
all.head(891)	1	1
knn_train.append(pd.Series(metrics.accuracy_score(y_test,prediction_train)))	1	1
"train_df[[""Family"", ""Survived""]].groupby(['Family'],as_index=False).mean()"	1	1
"df[""Age""].fillna(df_train.Age.median(), inplace=True)"	1	1
Age.plot.hist(ax=ax[0],bins=20,edgecolor='white',color=['#D98880'])	1	1
"train_df[""SibSp""]"	1	1
df['data1'].groupby(df['key1'])	1	1
test1.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
data.boxplot(column='Age')	1	1
testJ.append(c_test)	1	1
dataset.loc[ (dataset['Age'] > 36)&(dataset['Age'] <= 62), 'Age'] = 3,	1	1
"submission.to_csv(""random_forest.csv"",index=False)"	1	1
df_test.drop(['Name','Ticket','Cabin'], axis=1)	1	1
df_train['Training_set'] = True	1	1
data.Title.str.replace('Mme', 'Mrs')	1	1
dataset.loc[dataset.Name.str.contains('Mrs') & dataset.Age.isnull(), 'Age'] = mrs_ave	1	1
test_df['FamMembers'] = test_df['SibSp'] + test_df['Parch'] + 1	1	1
data['Ticket_numerical'] = np.where(data.Ticket_numerical.str.isdigit(),data.Ticket_numerical, np.nan )	1	1
df_reduced.values	1	1
data_train['Embarked'].loc[data_train['Survived']==0].value_counts()	1	1
"df_pred.to_csv(""out.csv"", index=False)"	1	1
train.loc[idx, feature_labels].values	1	1
train2.drop(['Survived', 'PassengerId'], axis = 1)	1	1
ax[0].set_title('Variation in Training Data Accuracy w.r.t to Max Iterations for different Solvers')	1	1
"df.loc[(df.Survived == 1) & (df.Sex == ""male"") & (df.Pclass == 3) , :].count()"	1	1
NotSurvivedFareData['Fare'].mean()	1	1
train.columns.get_values().tolist()	1	1
combined_df['Age'].isnull().sum()	1	1
df.loc[ df['Age'] > 48, 'Age'] = 3	1	1
titanic_df['Queenstown']=titanic_df[['Embarked']].apply(get_queenstown, axis=1)	1	1
"df_train.count()['PassengerId'] - df_train.count()['Age'], ""Age"","	1	1
data['Survived'][data.Pc3 ==1].mean(),	1	1
df.drop(df.loc[df['Fare'].isnull()].index)	1	1
train.pivot_table(index='Pclass', columns='Survived', aggfunc='count').Age	1	1
test_copy.isnull().sum()	1	1
pina_submission.head(20)	1	1
full.loc[(full.Age.isnull()) & (full.Titles_mapped == 'Master'), 'Age'] = get_Age_mean('Master', 3)	1	1
"train[[""Title""]] = train[[""Title""]].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
sns.boxplot(x=test_data['Pclass'],y=test_data['Age'],data=test_data)	1	1
df_copied['Cabin'] = df_copied['Cabin'].fillna(' ')	1	1
df.drop(['Name','Age','Ticket','Fare','Cabin','Fare_Range','PassengerId'],axis=1,inplace=True)	1	1
df_train['ticket_class'] = df_train.apply(fill_ticket_class, axis=1)  # [1]	1	1
dataset['has_cabin'] = dataset['Cabin'].apply(lambda x: 0 if type(x) == float else 1)	1	1
titanic_3.drop(['Sex_male', 'SibSp', 'Parch', 'Em_Q', 'Em_S', 'Fare'], axis=1, inplace=True)	1	1
"test[""Port""] = 0"	1	1
train_data.drop(['Cabin'],axis = 1)	1	1
"clean_data[""Embarked""].factorize()"	1	1
train.loc[:,['Survived', 'Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
train1.drop(unwanted,axis=1)	1	1
final.to_csv('final.csv') # 0.77511 on kaggle for that	1	1
"df.loc[pid,""NickName""] = """""	1	1
pivot_col.apply(lambda x: x / sum(x), axis=1)	1	1
df_submission.to_csv('./submission_all_rf_10th.csv', index=False)	1	1
"_df[""embarked""] = _df.embarked.fillna(_embarked)"	1	1
survived_class_1.shape[0]	1	1
train_data['AGE'] = pandas.to_numeric(train_data['AGE'], errors='coerce')	1	1
DTC3_submission.to_csv('DTC3_submission.csv', index=False)	1	1
train.dropna(axis=0)#Null values create problem in predicting data	1	1
df['Embarked'] = df['Embarked'].replace('S', 0)	1	1
test_df.fillna(0)	1	1
dataset_train.Survived.describe()	1	1
data_pruned.loc[(data_pruned['Age'] > 40) & (data_pruned['Age'] <= 60), 'Age'] = 4	1	1
data['Survivingfam']=data.apply(Survivingfam,axis=1)	1	1
titanic_test['Cabin'] = titanic[['Cabin','Pclass']].apply(impute_cabin,axis=1)	1	1
csv_train['Sex'].describe()	1	1
Class_Results.sort_values(by = 'Accuracy', ascending=False)	1	1
test_set['Title'] = test_set['Title'].str.replace('(Mlle|Mme|Ms)', 'Miss')	1	1
train_df[['Pclass','FareGroup','AgeGroup','SibSpBool','ParchBool','Sex','CabinBool']]	1	1
Survived.sum()/df_train[df_train.Sex == 'female']	1	1
train_features.drop(columns={'Sex'})	1	1
acc_randomForest.mean()	1	1
titanic_df['Title'].value_counts()	1	1
train_cp['Title'] = train_cp.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
np.mean(y_pred == y_true) * 100	1	1
i.loc[indexs, 'Name'] = 'mr'	1	1
"train7[""Mrs""] = train7[""Name""].apply(lambda x: x.count(""Mrs.""))"	1	1
train.iloc[:,[0,2,3,4,5,6,7,8]].values	1	1
test_df_X['Fare']= test_df_X['Fare'].fillna(0.00)	1	1
orig_test_set.head(n=10)	1	1
tot.FamDeath.fillna(0.5,inplace=True)	1	1
df.drop(['Train', 'Ticket', 'Name', 'Fare_fam', 'per_capita'], axis=1, inplace=True)	1	1
train.loc[(train['Age'] > 35) & (train['Age'] <= 60), 'Age'] = 5, #Adult	1	1
df['Title']=df['Title'].apply(lambda s: CorrectTitle(s))	1	1
df_dums['Class_2']=[1 if ele == 2 else 0 for ele in df_dums['Pclass']]	1	1
preprocessing_pipeline.transform(X_train)	1	1
neural_record['Single_In'][i]=c.score(X_train,y_train) #In-sample result with single layer	1	1
df_full.loc[mask_train].groupby('GroupSize', as_index=False)['Survived'].mean()	1	1
data.loc[(data.passenger_fare>30.6) & (data.passenger_fare<=30.7) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>30.6) & (data.passenger_fare<=30.7) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
df_train.describe(include='O')	1	1
"test_data[""Embarked""] = test_data[""Embarked""].fillna(""S"")"	1	1
df['Embarked'] = df['Embarked'].replace('Q', 2)	1	1
combined['Fare_per_person'] = combined['Fare'].groupby(combined['Ticket']).transform(lambda x: x / x.count())	1	1
train.drop('Pclass', axis=1)	1	1
"train[[""Sex"", ""Age"", ""Pclass"", ""Fare""]].values"	1	1
train.drop('Embarked',inplace=True,axis=1) #drops the embarked axis	1	1
"titanic_test[""Person""] = titanic_test[[""Age"",""Sex""]].apply(get_person, axis = 1)"	1	1
Survive_Corr[1:15] # remove the 'Survived'	1	1
df.drop('Surname', axis=1, inplace=True, errors='ignore')	1	1
np.empty((N_FOLDS, n_test))	1	1
train['Age'].hist(bins=50)	1	1
dataset.loc[(dataset['Age']>35)&(dataset['Age']<=50),'Age_cat']=2	1	1
df_train.drop(drop_elements, axis = 1)	1	1
"submission.to_csv(""rf_submission_1.csv"", index=False)"	1	1
final_test.head(5)	1	1
"df_titanic[""Age""]=df_titanic[""Age""].apply(lambda x: np.random.randint(int(mean_age-std_age),int(mean_age+std_age)) if pd.isnull(x) else x)"	1	1
Scaler.transform(df_test)	1	1
train_dataset.describe(include='all')	1	1
df_train.columns.values:	1	1
f['Position'] = footballers['Position']	1	1
review.append(sentence)	1	1
raw_train.info()	1	1
"np.where(dataset[""Cabin""]==""D"",1,0)"	1	1
embarkedLe.transform(df_test.Embarked)	1	1
test_dummies['PassengerId'],	1	1
"test_data.drop([""PassengerId"", ""Name"", ""Cabin"", ""Ticket""], axis = 1)"	1	1
df_train.drop(['Cabin','Embarked','Title','Age','Sex','Name','Ticket','AgeGroup','Deck','Pclass','Fare','FareBand','SibSp','Parch','Parch_7','Parch_8','Parch_9'], axis=1)	1	1
test['Age'] = test[['Age','Pclass']].apply(setAge,axis=1)	1	1
final_csv.copy()	1	1
numerical_columns.append('SurnameMembers')	1	1
data_scaler.transform(X_test)	1	1
submission['PassengerId'] = passenger_ids	1	1
"sns.boxplot(y=df_male_class[""Age""])"	1	1
"train_df[""Cabin""].isnull()"	1	1
"train.pivot_table(index=""Age_Categories"",values=""Survived"")"	1	1
train_data.join(title_dummies_titanic)	1	1
train_df['Name_Head'] = train_df['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])	1	1
df.to_csv('best_of_breed_gauss_nn_3.csv', sep=',')	1	1
full_set.astype(float).corr(),	1	1
data.drop(['Name'],axis=1, inplace=True)	1	1
"traindat.drop(""Fare"", axis=1, inplace=True)#Same as above"	1	1
train.join(embarked_oh)	1	1
train_dataset.groupby('Sex')	1	1
test_X[['Pclass','Sex','Embarked']]	1	1
Z['Age_cat'] = pd.qcut(Z.Age, q=4, labels=False)	1	1
stats.mode(X_train[feature])	1	1
Y_train.values.reshape(-1, 1)	1	1
df_tr_test.loc[sample_incomplete_rows_test.index.values]	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'the Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
"titanic.groupby('Title')['Age'].mean()   # Mean age based on the engineered feature ""Title"""	1	1
dfte.copy()	1	1
row[8] >= j*fare_bracket_size        and row[8] < (j+1)*fare_bracket_size:	1	1
titanic.head(2)	1	1
df_all['Title'] = df_all['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]	1	1
train_data[['Survived','SiblingsSpouses']]	1	1
train['par_ch'] = np.where(train['Parch']==0,0,1)	1	1
train_df['Age'].dropna().astype(int).hist(bins = 70, ax = axis1)	1	1
res['cum_importance'] = res.importance.cumsum()	1	1
datacv['Embarked'] = datacv['Embarked'].map({'C': 3, 'Q': 2, 'S': 1})	1	1
merged['Family_size'] = merged.SibSp + merged.Parch + 1	1	1
labels_train.values	1	1
"models.append(( ""LDA"" , LinearDiscriminantAnalysis()))"	1	1
test_data['Cabin'].str.extract('([0-9]+)')	1	1
train_test['Ticket_Letter'] = train_test['Ticket_Letter'].apply(lambda x:np.nan if x.isnumeric() else x)	1	1
titanic.iterrows():	1	1
cols[0:5]	1	1
"entire['Embarked'] = entire['Embarked'].fillna(""S"")"	1	1
curr_row[0][6]	1	1
training_set.align(test_set, axis=1)	1	1
data.loc[data['relatives']>0,'not_alone'] = 0	1	1
train['Fare_cat'] = pd.DataFrame(np.floor(np.log10(train['Fare'] + 1))).astype('int')	1	1
titanic_df.drop(['person'],axis=1,inplace=True)	1	1
data_test['PassengerId'] # 存储测试集乘客ID	1	1
train['Embarked'] = train[['Embarked','Pclass']].apply(embarked_enumerator,axis=1)	1	1
titanic_df['Title'] = titanic_df['Name'].apply(find_title)	1	1
titanic_df['person'] = titanic_df[['Age','Sex']].apply(male_female_child,axis=1)	1	1
all_dummy_df['Fare']=np.log1p(all_dummy_df['Fare'])	1	1
"sns.boxplot(x=""Pclass"", y=""Fare"", data=full[full.Fare.notnull()])"	1	1
data_1.drop(labels = ['PassengerId','Ticket','Cabin','Name'], axis = 1)	1	1
titanic.dropna(subset=['Embarked'],inplace=True)	1	1
df.loc[df[column] == enum, column] = value	1	1
age1[ '11to25' ] = age1[ 'AgeGroup' ].map(  lambda r : 1 if 11 <= r <= 25 else 0 )	1	1
train_ds.iloc[3:5, :]	1	1
"combined.loc[combined[""Fare""].isnull()]"	1	1
data_test1.loc[:, 'Survived-RFC'] = rfc.predict(np_test_features)	1	1
"train.drop([""Name"", ""Ticket"", ""Age"", ""Embarked"", ""CatFare"", ""Title""], axis = 1)"	1	1
"test.loc[test[""Parch""] >1 , ""pc_c""] = ""2"""	1	1
dftest.drop(['Name','Sex','Embarked'],axis=1)	1	1
train['SexF'] = train['Sex']	1	1
randpred.append(np.random.randint(low=0,high=2))	1	1
data_train_all.Cabin.apply(f)	1	1
train_Predict['Embarked'] = train['Embarked'].apply(embarked_class)	1	1
df['Status'] = df['Name'].apply(create_status)	1	1
df.loc[(df['Fare'] > 14.454) & (df['Fare'] <= 31),'Fare'] = 2	1	1
x['Sex'].map({'male': 0, 'female': 1})	1	1
dataset['male'] = np.where(dataset['Sex']=='male',1,0)	1	1
train_df['age'].isnull()	1	1
"df_train[""Sex""].loc[df_train[""Sex""] == 'male'] = 1"	1	1
train.values[:,0:9]	1	1
train.loc[train['Survived']==1]	1	1
full.loc[(full.Fare == 80) & (full.Pclass == 1),:]	1	1
train['HaveLessThanFiveBrothers'] = ''	1	1
"train_df[""Embarked""] = train_df[""Embarked""].fillna('C')"	1	1
"in [""Mr"", ""Don"", ""Dr"", ""Jonkheer"", ""Sir""]: # Hommes"	1	1
titanic_df.loc[titanic_df['Fare'].isnull() == True, 'Fare'] = random_fare	1	1
df.groupby('Sex').count()	1	1
"X[[""SibSp"", ""Parch""]]"	1	1
corr.style.background_gradient()	1	1
"train_df.pivot_table(index=""Parch"",values=""Survived"")"	1	1
"copy_df[""Survived""]"	1	1
train_df[['Family','Survived']].groupby('Family',as_index=False).mean()	1	1
train_df['Cabin_cat'] = train_df['Cabin_cat'].astype('category')	1	1
test['AgeCategorical'] = test['AgeCategorical'].astype(int)	1	1
test_1['PPT'] = test_1['SibSp'] + test_1['Parch'] + 1	1	1
test6['Sex'] = le.fit_transform(test6['Sex'])	1	1
train.drop(['Parch', 'SibSp'], inplace=True, axis=1)	1	1
model.add(Dense(1000,input_shape=(8,),kernel_initializer='glorot_normal',activation='sigmoid'))	1	1
x_train_categorical['Pclass'].value_counts(True)	1	1
"train_dat['Embarked'].replace({1:""S"", 2:""C"", 3:""Q""}, inplace=True)"	1	1
df_train['Age'].unique()	1	1
testData['Initial'].replace(['Col','Dona','Dr','Rev','Ms'],['Mr','Mrs','Mr','Other','Miss'],inplace=True)	1	1
"df_titanic_train_mod[""Title""] = np.nan"	1	1
"X.loc[ X['Age'] <= 16, 'Age'] 					 = 0"	1	1
"test[""Family""]=test[""SibSp""]+test[""Parch""]+1"	1	1
final_csv['SimplifiedTitle'] = get_simplified_title(final_csv)	1	1
"plt.rcParams[""figure.figsize""] = (30,5)"	1	1
age_mean['fill_up_type'] = 'mean'	1	1
"dataset[[""Survived"",""Age""]].groupby('Survived').median()"	1	1
"dataset[""Fare""].fillna(dataset.groupby(""Pclass"")[""Fare""].transform(""median""), inplace=True)"	1	1
"full[""Sex""] = full[""Sex""].map({""male"": 0, ""female"":1})"	1	1
X_train_rfc_age.head()	1	1
titanic_df.drop(['Alone','person','Pclass','Without Family','male','class_3'],axis=1,inplace=True)	1	1
train.drop(['Survived','PassengerId'],axis=1)[columns]	1	1
test['Embarked'] = embark.map({'S': 1, 'C': 2, 'Q': 3}).astype(int)	1	1
"df_test[""Title""] = pd.Series(dataset_title)"	1	1
"test['Title'] = test['Title'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
df['FarePerPerson'] = df.Fare / df.FamilySize	1	1
test['M3_gradient'] = cls_gradient.predict(test.loc[:, columns])	1	1
df['Age'].dropna().hist(bins=16, range=(0,80), alpha=.5)	1	1
df.drop('PassengerId', axis='columns')	1	1
df[['GroupSurvFlag','GroupSize','GroupSurvIndex']] = GroupInfo	1	1
train['Age'].groupby(train['Survived']).hist(alpha=0.6,bins=50)	1	1
cab[0] == 'T':	1	1
parameters['print'] = True	1	1
"serie[""acc""] = acc"	1	1
df['IsTrain'] = True	1	1
all_data.Fare.fillna(15, inplace=True)	1	1
"data[""Title""] = data[""Title""].map({""Master"":0, ""Miss"":1, ""Ms"" : 1 , ""Mme"":1, ""Mlle"":1, ""Mrs"":1, ""Mr"":2, ""Rare"":3})"	1	1
params['random_state']=0	1	1
preds_csv.to_csv('test_pred.csv', index=False)	1	1
train_set['Survived'].value_counts()/len(train_set['Survived'])	1	1
train_copy['High_Fare_Female'][n] = 1	1	1
submission.to_csv('LogRegStack.csv',index=False)	1	1
data.Age.loc[(data.Age<0) & (data.alone==1) & (data.Personal_Titles=='Miss')] =    data.Age[(data.Age>=0) & (data.alone==1) & (data.Personal_Titles=='Miss')].median()	1	1
train_data['Survived'].mean()	1	1
dt_train.drop(['Survived', 'PassengerId'], axis=1)	1	1
"combined[""Age""] = combined.groupby(['Sex','Pclass','Title'])['Age'].transform(lambda x: x.fillna(x.median()))"	1	1
"df['Family'] = np.where( df[""Parch""] + df[""SibSp""]>0,1,0)"	1	1
"df.loc[(df.ischild == 0)&(df.Age.isna()), ""Age""].shape[0]"	1	1
test_X.drop(['Pclass','Sex','Embarked'],axis=1)	1	1
df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).sum()	1	1
test7['Embarked'] = le.fit_transform(test7['Embarked'])	1	1
train_X['FareBin'] = pd.qcut(train_X['Fare'], 4)	1	1
train_df_X['Pclass']=train_df_X['Pclass'].astype('str')	1	1
dataset.loc[dataset['Age'] <=16 , 'Age' ] = 0	1	1
"combined.loc[cp.index,""isVIP""] = 1"	1	1
df_test['Survived'] = rfc_pred	1	1
"train.drop(columns=""name"")"	1	1
df_full[['Pclass','Title','Age']].groupby(['Pclass','Title'], as_index=False).median().sort_values(by='Age', ascending=False)	1	1
df.loc[(df['Fare'] > 14.45) & (df['Fare'] <= 31), 'FareGroup'] = 2	1	1
all_data.set_value(829,'Embarked',value='C')	1	1
test_df.drop(['Parch_9'], axis=1)	1	1
temp['Pclass'] = temp['Pclass'].map({1: 'First', 2: 'Second', 3: 'Third'})	1	1
"results.to_csv(""submission1.csv"", index=False)"	1	1
dataset['Male_P3'] = (dataset['Sex'] == 0) & (dataset['Pclass'] == 3).astype(int)	1	1
features.loc[features.Age.isnull(), 'Age'] = unknown_ages	1	1
"data_dict[""PC"" + str(PC_Coder.classes_[i])] = PC_Vals[:, i]"	1	1
ax[0].set_title('Passenger Count by Embarked')	1	1
ticket_table['Dead_female_on_ticket'] = data_full.Ticket[(data_full.AgeBin > 1) & (data_full.Survived < 1) & (data_full.IsFemale)].value_counts()	1	1
combined_data.drop('Parch',axis=1,inplace=True)	1	1
train['Single'] = train['Fsize'].map(lambda s: 1 if s == 1 else 0)	1	1
"full['Embarked'].fillna(""S"", inplace = True)"	1	1
age_range.head()	1	1
df_train['PclassEncoded'] = le_pclass.transform(df_train['Pclass'])	1	1
"df_scores[""CVScore""].argmax()"	1	1
df['embarked']      = df['embarked'].astype(embarked_cat)	1	1
"titanic_test.loc[titanic_test[""Embarked""] == ""S"",""Embarked""] = 0"	1	1
df.join(pd.get_dummies(df[['Sex', 'Age']]))	1	1
df['New_Age'] <= 16	1	1
train['Cabin_info']=1	1	1
df_cp.loc[:, 'Fare'] = df_cp['Fare'].fillna(df_cp['Fare'].median())	1	1
test.drop(['Person'], axis=1, inplace=True)	1	1
whole['Survived'][:891]	1	1
test_df['Age'] = test_df['Age'].replace(dict1)	1	1
"train[""Embarked""].fillna(train['Embarked'].mode()[0], inplace=True)"	1	1
"df[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
"ax[0].set_title(""Contributions to the age gradient"")"	1	1
"train[""Embarked""].loc[train[""Embarked""] == ""C""] = 1"	1	1
X.groupby(idx).mean()	1	1
combine_df['High_Fare'] = np.where(combine_df['Fare']>=26,1,0)	1	1
test['Alone']=test['Family_Size'].transform(alone)	1	1
"train_df[""Ticket""]"	1	1
age_df.assign(Age = predicted_age)	1	1
i_list[2] in ['Mrs.', 'Miss.', 'Master.', 'Mrs']:	1	1
combine['Fare'] = combine['Fare'].astype(int)	1	1
train_data.values[:, -1:].ravel()	1	1
dc.drop(['Title','DatingRank','SureName'], axis=1, inplace=True)	1	1
combine.loc[(combine['Age'] > 48) & (combine['Age'] <= 64), 'Age'] = 3	1	1
"train_data.loc[train_data[""Cabin""].notnull() & train_data[""Cabin""].str.contains(""E""), ""CabinLetterE""] = 1"	1	1
"test[[""Sex"",""Age"",""Pclass"",""Family"",""Embarked"",""Title"",""Fare""]]"	1	1
df_titanic['Cabin'].isnull().sum()	1	1
df.select_dtypes([np.number]).dropna(axis=1)	1	1
"df['Title'] = df['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
"test_data[""Title""].value_counts()"	1	1
"data2[""Name""] = data2[""Name""].str.replace(""."","";"")"	1	1
df.pivot_table('Survived', index='Sex', columns='Pclass')	1	1
df_test['Fare_scaled'] = scaler.fit_transform(df_test[['Age', 'Fare']], scale_param)[:,1]	1	1
testset[['Pclass', 'Sex', 'Age','Fare','Embarked']]	1	1
titanic['Sex'].value_counts()	1	1
df2.drop(['Total'], axis=1, inplace=True)	1	1
"traindat.drop(""Survived"",axis=1,inplace=True)"	1	1
test_data['Fare'].fillna(test_data['Fare'].median(), inplace = True)	1	1
tot.iloc[i,:].FamSize	1	1
model.add(Dense(200, input_dim= 17))	1	1
train_set['Survived'][train_set['Cabin'].isnull()]	1	1
"data[""Title""] = data[""Title""].astype(int)"	1	1
df['name_category'],df['no_word'],df['no_char'] = k, no_word,no_char	1	1
model_cat.add(Dense(8, activation='relu'))	1	1
train.Cabin.notnull().mean()	1	1
tre.append(float(Summary_DT['Limited leafs']))	1	1
dataPrepare['Age']=dataPrepare['Age'].astype('float32')	1	1
df_titanic_train.drop(['Survived'], axis=1)	1	1
dataset['Fare_Band'] = dataset['Fare_Band'].astype(int)	1	1
new.append(j)	1	1
valid_set.drop('Survived', axis=1)	1	1
"related_people.loc[related_people[""PassengerId""]==313,""RGroup""]=""Lahtinen_M"""	1	1
train_data['Pclass'].describe()	1	1
promising_seeds.append(a_seed)	1	1
"data.loc[data[""LastName""].str.startswith(title), ""Title""] = c_title"	1	1
"train_df[[""Survived"",'Sex']].groupby('Sex').mean()"	1	1
"dataset.loc[ dataset['Age'] > 60, 'Age'] 							      = 5"	1	1
test_df['Age'].apply(lambda x: 1 if (x > 16 and x <= 32) else 0)	1	1
x['CP_Died']=0	1	1
df.drop(['Ticket', 'Survived', 'PassengerId'], axis=1, inplace=True)	1	1
"dtc5_survivors.to_csv(""dtc5_survivors.csv"", index=False)"	1	1
titanic_df['sex'] = (titanic_df['Sex'] == 'male').astype(int)	1	1
train_data['Survived'].ravel()	1	1
tf.add(tf.matmul(W2, drop_out), b2)	1	1
df_test['Embarked'].replace(['S', 'Q', 'C'], [0,1,2], inplace=True)	1	1
train_corr.corr()['Survived']	1	1
df['Class2'] = np.where(df['Pclass']==2, 1, 0)	1	1
data_test.drop('Name', axis = 1)	1	1
data['FareGroup'] = data['FareGroup'].astype(int)	1	1
le.transform(X.Sex)	1	1
trainData.fillna(trainData.mean())	1	1
submission.to_csv('titanic_submission_2.csv', index=False)	1	1
t[0] == '6':	1	1
dataset.loc[(dataset.Age.isnull())&(dataset.Initial=='Other'),'Age']=46	1	1
df['Title'] = df.Title.apply(title_map_func)	1	1
accuracy['majority_voting_selected_cols']	1	1
raw_data.drop(columns=['PassengerId']).corr().round(2)	1	1
df.sort_values(by='cross-accuracy',ascending=False)	1	1
df2['age_grp'] = df2['Age'].apply(lambda x: 0 if x < 1 else 1+ int(x/10))	1	1
test['M1_xgboost'] = cls_xgboost.predict(test.loc[:, columns])	1	1
train.drop(['Age_Group', 'Fare_Cat'], axis=1, inplace=True)	1	1
df_result.to_csv('../input/submission606.csv', index=False)	1	1
"test_df[""Fare""].fillna(age_median, inplace=True)"	1	1
test_data.loc[test_data['Sex'] == 'female', 'Sex'] = 1	1	1
df.loc[df['Fare']>77,'Fare_Cat']=5	1	1
family['Surname_count'] = family['Surname'].map(dict_scount)	1	1
"sns.boxplot(x='Titles_mapped', y='Age', data=full, hue=""Pclass"")"	1	1
"train[[""Pclass"", ""Survived""]].groupby(['Pclass'], as_index=False).mean()"	1	1
train.sample(100)	1	1
train['Age'] = train[['Age','Pclass']].apply(fill_age_train,axis=1)	1	1
X_train.drop('PassengerId', axis=1)	1	1
X.loc[row,'Cabin'].startswith('C'):	1	1
ageData['Age']	1	1
full_data.isnull().sum(axis=0).reset_index()	1	1
merged.loc[(merged.Age.isnull())&(merged.NameTitle=='Mr'),'Age']=33	1	1
data['Age'] = data['Age'].fillna(mean_df)	1	1
"test_df[""Cabin""] = test_df[""Cabin""].fillna(""X"")"	1	1
train['Fare_Per_Person']=train['Fare']/(train['Family_Size']+1)	1	1
test_df.drop('Ticket', axis=1, inplace=True)	1	1
data.surname_Richards.astype('category')	1	1
test['Fare_Per_Person']=test['Fare']/(test['Family_Size']+1)	1	1
arr['B'].append(row)	1	1
train.loc[train['Cabin'].str.len() == 15.0, 'CabinL'] = train['Cabin'].astype(str).str[0]	1	1
test.drop(cols_to_drop, axis=1).copy()	1	1
titanic.groupby(['Sex', 'Title']).size()	1	1
grp_by_parch['Survived'].mean()	1	1
"embark_dummies_titanic.drop([""S""], axis=1,inplace=True)"	1	1
mom.shape	1	1
"ts.loc[:, ""Survived""] = Ts[""Survived""]"	1	1
"all_df['mother'] = ['Mother' if all_df[""Parch""][i]>0 and all_df[""Sex""][i] == 'female' and all_df[""title""][i] != 'Miss' else 'nonMother' for i in range(len(all_df))]"	1	1
full_train.dtypes	1	1
full_data['IsAlone'] = 0	1	1
var1[0] != 'Age':	1	1
_df.loc[~_df.group_count.isna(), :].index	1	1
train['Female'] = 0	1	1
train[['Embarked','Survived']].groupby('Embarked',as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
test_df['Age']= test_df['Age'].replace(0, np.nan)	1	1
train_df['family'] = train_df['SibSp'] + train_df['Parch'] + 1	1	1
train_df.groupby('Pclass')['Survived'].mean().plot(kind='barh',ax=axesbi[0,0],xlim=[0,1])	1	1
train_df['Name']=train_df['Name'].apply(name)	1	1
traindf[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)	1	1
train['Age_isNaN'] = train['Age'].isnull().astype(int)	1	1
train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False)['Survived'].agg({'Survived': ['mean','count']})	1	1
"X_validation.loc[X_validation.Age >= 18,""Child_col""] = ""Adult"""	1	1
curated_data.drop(['Survived', 'Ticket', 'PassengerId', 'Embarked'], axis=1)	1	1
train.groupby([pd.cut(train.Fare,np.arange(0,max(train.Fare)+50,50)),'Survived']).PassengerId.count().unstack()	1	1
result.append(dict(Surv= row.Surv, Class=row.Pclass , Sex=row.Sex, Fare=row.Fare ))	1	1
train_df['isAlone'] = (train_df['SibSp'] + train_df['Parch']) == 0	1	1
"data_train[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean()"	1	1
train['Title']=train['Title'].replace('Mme','Mrs',regex=True)	1	1
df_norm_3.describe()	1	1
df.loc[550]	1	1
data_train['FamilyPresent'] = data_train['SibSp'] + data_train['Parch']	1	1
training_data.Embarked.describe()	1	1
df1.drop(['Embarked_Numerical'], axis=1)	1	1
submission.to_csv('submissionFLYHI.csv', index=False)	1	1
df['Name_title'] = df['Name'].apply(lambda x: re.search(' ([A-Za-z]+)\.', x).group(1))	1	1
df[['Embarked', 'Fare']].groupby(['Embarked']).mean()	1	1
"train['Sex'][sel_age_fin] == ""female"""	1	1
df['family'] = df['SibSp'] + df['Parch']	1	1
df['Title_x'] = df['Title_x'].replace('Mme', 'Mrs')	1	1
train_df['Age'] = train_df['Age'].apply(split_equal_groups)	1	1
X_train['Name_title'].unique()	1	1
data_whole.iloc[891:1309,:]	1	1
sns.boxplot(y='Fare', x='Parch', ax=ax2, data=test_df, linewidth=1, saturation=5, palette=palette8)	1	1
dataset.drop('Family',axis=1,inplace=True)	1	1
loss_val.append(ev_val[0])	1	1
predicted_df.to_csv('titanic.csv', index=False)	1	1
"df_titanic.loc[(df_titanic[""family""]>=1) & (df_titanic[""family""]<=3) ,""family""]=1"	1	1
axes[0].bar(ind, dead_f, width, color='#d62728')	1	1
dataset.loc[ dataset['Age'] > 70.052, 'AgeBand']=7	1	1
missing_deck.drop('Deck', axis = 1)	1	1
df_all['Age'] = df_all[['Age', 'Sex', 'Pclass']].apply(fill_age, axis=1)	1	1
"train.loc[train[""SibSp""] == 0, ""sib_c""] = ""0"""	1	1
df['Sex'] = df['Sex'].map({'female': 1, 'male' : 0}).astype(int)	1	1
y_train.isnull().values.any()	1	1
train.head(3) # acompanhando o progresso	1	1
"train_df.drop([""PassengerId"", ""Name"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Fare_range"", ""FamilySize""], axis = 1)"	1	1
"df_test.loc[ df_test['Fare'] > 31, 'Fare'] 							         = 3"	1	1
df.loc[df['Cabin_letter']=='T']	1	1
"data_train[""Survived""].copy(deep=True)"	1	1
train[['Age']].quantile([0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,0.95,0.98])	1	1
all_data.iloc[i, 13] == 0:	1	1
data_train.sample(3)#randomly taking 3 values	1	1
model.add(Dense(2, activation='relu'))	1	1
test['Age'] = test['Age'].fillna(age_mean)	1	1
all_data.Pclass.head()	1	1
"train_df[[""FareBin"", ""Survived""]].groupby(['FareBin'], as_index=False).mean()"	1	1
raw_data['Title'] = raw_data['Title'].replace('Mlle', 'Miss')	1	1
df_train.drop(['Embarked'], axis=1)	1	1
"test[""Fare""].isnull().sum()  # count_nan_fare_test = 1"	1	1
train[['Pclass', 'Sex','Age','SibSp','Parch', 'Fare', 'Embarked']]	1	1
combined_data.iloc[891:]['Age'].describe()	1	1
"train[""AgeCategory""] = age_cate"	1	1
"submission[""Survived""] = predict"	1	1
"df[""Age""].fillna(df.Age.mean(), inplace=True)"	1	1
"df[""FamilyId""] = family_ids"	1	1
"test[""sex_""] = test.apply(lambda row: def_sex(row[""Sex""]),axis = 1)"	1	1
df['AgeRange'] = pd.cut(df.Age,labels=[0,1,2,3,4],bins=bins)	1	1
dfTest['PassengerId'].astype(int),	1	1
data.loc[[0]]	1	1
train.loc[(train['PaxclassA']==2),'Class2'] = 1	1	1
df_train[['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]	1	1
df_data['FareBin_Code_6'] = label.fit_transform(df_data['FareBin_6'])	1	1
test.iloc[:,1] = test_sex_t	1	1
curr_row[0][3]	1	1
"imputedTest[""isChild""] = 1"	1	1
dset['Age'] = np.where(dset['Age'] <= child_max, 1, 0)	1	1
df_test.fillna(0,axis=1,inplace=True)	1	1
test_df.loc[fil, 'Fare'] = mis	1	1
x_t_c['Fare']=x_fare	1	1
train.pivot_table(index='Sex', columns='SibSp', values='Survived', aggfunc='mean').plot(kind='bar')	1	1
df.loc[df['FareGroup']>30,'FareGroup'] = 4	1	1
submission.to_csv('submission_knn.csv', index=False)	1	1
train_with_ages.Age.apply(encodeAge)	1	1
df_data.groupby('Connected_Survival')['Survived'].mean().round(3)	1	1
fare_distribution.reset_index()	1	1
test['FamilySize']=test['SibSp']+test['Parch']	1	1
"p_data[""Title""] = val"	1	1
Train.values[:, 1:4]	1	1
age_df.loc[ (age_df.Age.notnull()) ]# known Age values	1	1
df['Age'][np.isnan(df['Age'])] = random_age	1	1
"dftrain.loc[idx,""CountTicket""]=ticket_count_train[ticket]"	1	1
"submission.to_csv(path_or_buf=""Submission.csv"", index=False, header=True)"	1	1
model_data.loc[(model_data.Pclass == 3)&(model_data.Title == 2)&model_data.Age.isnull(),('Age')] = 28	1	1
te_df[['Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Mr','Mrs', 'other', 'Q', 'S',2,3]]	1	1
x.append(i+1)	1	1
test_data.Embarked.fillna(test_data.Embarked.value_counts().idxmax(), inplace=True)	1	1
X_train.iloc[:,:-1]	1	1
parch.var()	1	1
my_submission['Survived']=my_submission['Survived'].apply(lambda x: 1 if x > 0 else 0)	1	1
data.loc[(data.passenger_fare>=8.0) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Number'] =  data[(data.passenger_fare>=8.0) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
"train[""Child""] = np.where(train[""Age""] < 18, 1, 0)"	1	1
train_df.drop(['PassengerId', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'FamilyCount'], axis=1, inplace=True)	1	1
numerical_columns.append('CabinCount')	1	1
cross_share_df.head()	1	1
df_test['Name'].copy()	1	1
dataset['Deck'] = dataset['Deck'].map(cabin_mapping)	1	1
test2['Fare'] = test2['Fare'].fillna(test2['Fare'].median())	1	1
"df_real_test.drop([""PassengerId""], axis=1)"	1	1
train.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1)	1	1
test_data.head(5)	1	1
scaler.transform(t_X)	1	1
train.iloc[:, 1].values	1	1
"dataset[""Sex""]=dataset[""Sex""].map({""female"":0,""male"":1}).astype(int)"	1	1
ohe.transform(finalTest.Embarked.astype(str))	1	1
"test.loc[test[""FamilySize""] >=5, ""Big""] = True"	1	1
train_X['Sex'] = le1.fit_transform(train_X['Sex'])	1	1
train['cabin']=train.Cabin.str[0]	1	1
mod_data['Age'] = mod_data.Age.fillna(mean_age)	1	1
train_df_C.head()	1	1
train_df['Title'] = title_col	1	1
input_train_featured[['PassengerId', 'Pclass', 'Sex', 'SibSp', 'Parch']]	1	1
df_train.groupby(['Sex','Pclass'])	1	1
survived['SibSp'].value_counts().sort_index().plot.bar(ax=axs4[1], fontsize=16)	1	1
train.isnull().sum().plot(kind = 'barh')	1	1
ax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)	1	1
train.loc[train['Cabin'].str.len() == 15.0, 'CabinN4'] = train['Cabin'].astype(str).str[-2:]	1	1
df_all.Sex.replace('male',0)	1	1
results[['mean_test_score','std_test_score']]	1	1
imageid.append(i+892)	1	1
df['title_status'] = df['title'].replace(['Capt', 'Don', 'Jonkheer', 'Rev'], 'Mr')	1	1
"test[""Embarked""] = test[""Embarked""].map({'C':0,'Q':1,'S':2})"	1	1
y_predict.astype(int)	1	1
"titanic[""cabin_na""] = np.where(titanic[""Cabin""].isnull(), 1, 0)"	1	1
df3.drop('Sex_female', axis=1, inplace=True)	1	1
cabin.dropna(inplace=True)	1	1
a.set_index('Title', inplace=True)	1	1
train_dataset.Embarked.fillna('C')	1	1
model.add(Dense(classes))	1	1
y_train.head(5)	1	1
test['title'] = test['Name'].str.extract(patern)	1	1
test_df.ix[i, 'Familytype'] = 'Small family'	1	1
"combined.loc[pid,""group_type""] != ""0"":"	1	1
"test[""Fsize""] = test[""SibSp""] + test[""Parch""] + 1"	1	1
titanic_df['Sex'] = titanic_df['Sex'].apply(sex_column)	1	1
train.groupby(by = 'Sex')['Fare'].describe()	1	1
"test[""PassengerId""]  # save the id for submiting the final results"	1	1
"test_data.drop(""Title"", axis=1, inplace=True)"	1	1
data_copy.loc[data_copy['Sex'] == 'female', 'Sex'] = 0  # loc is to access a group of rows	1	1
arr[0]	1	1
data_apr.drop(['Pclass','Sex','Survived'],axis=1)	1	1
ax[1].set_title(t1 + ': Survived vs dead')	1	1
"df_train.groupby('survived')['fare'].mean().plot(kind='bar', figsize=(10,8), title = ""Average value of survival tickets"");"	1	1
tit_df.iloc[0:891, [1,8]].values	1	1
shape[0]/\	1	1
original_train_data['SibSp'].hist(ax=axarr[3][0])	1	1
"test_ToPred.loc[test_ToPred.Salutation == 'Mr','Age'] = test_ToPred['Age'].fillna(means[""Age""][""Mr""])"	1	1
dataset.combine_first(tmp) # uses tmp to fill holes	1	1
data['Embarked'] = data['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)	1	1
df_FULL.loc[[28, 76, 89, 129]]	1	1
data['harborC'] = data.apply(getembarkedC,axis=1)	1	1
classes.append(int(prediction['class_ids'][0]))	1	1
Survived.sort_values(ascending=False).keys()	1	1
"train.drop(['PassengerId', ""Ticket"", 'Cabin'], axis = 1, inplace = True)"	1	1
"titanic_df[['Age_Class', ""Survived""]].groupby(['Age_Class'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
dataset.loc[(dataset['Embarked'].isnull()) & (dataset['Sex'] == gender) & (dataset['Pclass'] == pclass) & (dataset['Age'] == age),'Embarked'] = guessed_port	1	1
train_df['Title'] = pd.factorize(train_df['Title'])[0]	1	1
"test_df[""Age""][np.isnan(test_df[""Age""])] = rand2"	1	1
np.abs(stats.zscore(x_train))	1	1
"submission.to_csv(""submission2.csv"",index=False)"	1	1
data.loc[(data['Age']>16) & (data['Age']<=32), 'Age_band'] = 1	1	1
"v[""Embarked""] = v[""Embarked""].map(input_embarked)"	1	1
test_dataset.drop('PassengerId',axis=1,inplace=True)	1	1
train_df.drop(['Survived','PassengerId',], axis=1)	1	1
submission.to_csv('../working/basic_submission.csv', index=False)	1	1
x['Titles'] = x['Name'].str.split(',').str.get(1).str.split('.').str.get(0)	1	1
input.copy()	1	1
df_data.Title.tail()	1	1
"tp.loc[tp[""Sex""]==""male"",""Sex_c""] = 0"	1	1
test_df_final.drop('PassengerId', axis=1).copy()	1	1
train_y_samp.append(train_y[j])	1	1
"test.loc[test[""Fare""] == 0, ""Fare""] = None"	1	1
test_df['C_sex'] = pd.Categorical(test_df['Sex'], test_df['Sex'].unique()).codes	1	1
group_sur_class.unstack().plot(kind='bar')	1	1
dataset['2017':].iloc[:,1:2].values	1	1
best_f1_score.append(f_score)	1	1
train_df['Embarked'].mode().to_string(index =False)	1	1
X.iloc[val_index]	1	1
df_train_features['Age'].mean()	1	1
train.join(train_titles)	1	1
"df.loc[(df[""Title""]==t) & np.isnan(df[""Age""]), ""Age"" ] = train[train[""Title""]==t].Age.median()"	1	1
merged['Family_size'] = merged.SibSp + merged.Parch + 1  # Adding 1 for single person	1	1
df.groupby(['NameLen_Range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')	1	1
"data_train[""Sex""] = data_train[""Sex""].replace(""male"", 1)"	1	1
"copy_df[""Embarked""].reshape(-1,1)"	1	1
data.loc[(data.passenger_fare>23.374) & (data.passenger_fare<=25.25) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>23.374) & (data.passenger_fare<=25.25) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
test.loc[[test['PassengerId']==1044],: ]['Fare']= test[test['Pclass']==3]['Fare'].mean()	1	1
Test_Master.loc[ Test_Master['Age'] > 47 , 'Age'] = 3	1	1
"X_train[""Age""] = (X_train[""Age""] - X_train[""Age""].mean())/X_train[""Age""].std()"	1	1
Y_train['Survived']	1	1
df.join(temp)	1	1
data.set_value(271, 'TicketClean', int(med1))	1	1
titanic.drop(['Name'], axis=1, inplace=True)	1	1
l.append(self.d[col].transform(X[col].values).reshape(-1,1))	1	1
train_dataset['IsAlone']=0	1	1
dataset.loc[(dataset['Age']>21.0)&(dataset['Age']<=28.0),'Age'] = 1	1	1
drop_elementsNMD.append('EditedAge')	1	1
new_dataFrame['Sex'] = pd.Series([1 if s == 'male' else 0 for s in data.Sex], name = 'Sex')	1	1
train_df.pipe(fix_data).values	1	1
"my_submission.to_csv(""titanic_predictions.csv"",index=False)"	1	1
X2['Sex'] = X2['Sex'].replace(to_replace=['male', 'female'], value=[0, 1])	1	1
"submission[""PassengerId""] = df_test.PassengerId"	1	1
"train.loc[ train['Fare'] > 31, 'Fare'] 							        = 3"	1	1
"dataset[""Deck""].fillna(train.groupby(""Pclass"")[""Deck""].transform(""median""), inplace=True)"	1	1
"titanic['NameLength'] = titanic[""Name""].apply(lambda x: len(x))"	1	1
train_df.dropna(subset = ['Embarked'])	1	1
features['Age'].apply(lambda x: np.log(x + 1))	1	1
"train[""Embarked""].fillna(""S"")"	1	1
comb['Ticket'] = comb['Ticket'].map(lambda x: 'XX' if x.isdigit() else x.split(' ')[0])	1	1
train_df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'PassengerId'], axis=1)	1	1
train_df.drop(['PassengerId', 'Name', 'Age', 'Ticket', 'Fare', 'Cabin'], axis=1)	1	1
"df_full['FamilySizeBin'] = pd.cut(df_full['FamilySize'], [0, 1, 4, 20], labels=[""alone"", ""normal"", ""big""])"	1	1
test.loc[(test['Age'] > 5) & (test['Age'] <= 12), 'Age'] = 1, #Child	1	1
td.describe()	1	1
"test_data[""Age""] = test_data[""Age""]/np.mean(test_data[""Age""])"	1	1
"result.to_csv(""prediction.csv"", index=False)"	1	1
predictions.append(0 if passenger['Sex'] == 'male' else 1)	1	1
train_data.join(titanic_person)	1	1
"titanic_test.drop([""Pclass""],axis=1,inplace=True)"	1	1
test['Class1'] = 0	1	1
df_comb['Title'] = df_comb['Title'].replace('Mme', 'Mrs')	1	1
pd.merge(df, fam, left_on=['Name', 'Family_size'], right_on=['Name', 'Family_size'], suffixes=['_ind', '_fam'])	1	1
age_survive_crosstbl.divide(age_survive_crosstbl.sum(axis = 1), axis = 0)	1	1
np.round(logreg.score(X_valid_norm, Y_valid), 4)	1	1
result[['PassengerID','Survived']].to_csv('submission.csv',index=False)	1	1
test_set.drop(['SibSp', 'Parch'], axis=1)	1	1
"train.loc[train['Survived']==0, ""Age""]"	1	1
Train_survived.values	1	1
encode.transform(test.Sex)	1	1
train['Tag']='train'	1	1
df.drop(['Name', 'Cabin', 'Ticket', 'Name', 'Parch', 'SibSp', 'Embarked','Pclass'], axis=1, inplace=True)	1	1
df['Family'] = df['FamilySize'].map(lambda s : 1 if 3<=s else 0)	1	1
df.drop(['Ticket'], axis=1)	1	1
"_df[""group_count""] = np.nan"	1	1
"sns.boxplot(data = df_data, x = ""Pclass"", y = ""Fare"",ax=ax1);"	1	1
comb['Ticket'] = comb['Ticket'].map(lambda x:x.replace('/',''))	1	1
train_df.Ticket.apply(len).max()	1	1
df['GrpSize'] = df['Ticket'].replace(df['Ticket'].value_counts())	1	1
data.Survived.groupby(data.age_level).mean()	1	1
"sns.boxplot(""Pclass"", ""Fare"", data=train, palette=[""lightblue"", ""lightpink"", ""lightgreen""]).set_title('Fare Distribution by Pclass')"	1	1
pca.transform(X)	1	1
"titanic_df[['not_alone', ""Survived""]].groupby(['not_alone'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
dataset.loc[(dataset['Age'] > 30) & (dataset['Age'] <= 40), 'Age'] = 3	1	1
layer.T.dot(delta)	1	1
"sns.boxplot(x = ""Embarked"", y = ""Fare"", hue = ""Pclass"", data = X_train, ax = ax[0]);"	1	1
"train_set[""Name""] = train_set[""Name""].apply(lambda x: replacement.get(x))"	1	1
"dftotal[""KNNsNbr""]=0"	1	1
params['subsample'] = grid.best_params_['subsample']	1	1
"train.loc[train[""Embarked""].isnull()]"	1	1
np.where(train[variable].isin(frequent_cat), train[variable], 'Rare')	1	1
titanic.groupby('FareBins')['FareBins'].count()  # Confirms the values in each bin	1	1
df_test.loc[df_test.isnull().Fare, 'Fare'] = 0	1	1
tp[0:10]	1	1
train_df.loc[(train_df.Cabin.isnull())&(train_df.Initial=='Mr'),'Cabin']='B51'	1	1
embarked_encoder.transform(test.Embarked)	1	1
train_df[['Sex','Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
"data.loc[(data[""Fare""] > 14.454) & (data['Fare'] <= 31), 'Fare'] = 2"	1	1
data['surname'] = (data.Name.str.findall(r'[A-z]*\,'). apply(lambda x: ''.join(map(str, x)).strip(','))).apply(lambda x: x if surnames.get_value(x)>1 else 'Alone')	1	1
dataset['Embarked'] = dataset['Embarked'].map(embark_map)	1	1
ages_probabilities['index1'] = ages_probabilities.index	1	1
df['Embarked'].fillna(embarked_most_common, inplace=True)	1	1
train.values #trainデータの配列	1	1
S['Grade_ordered'] = S['Grade'].astype('category', ordered=True, categories=['Po', 'Ag','Gd','Ex'])	1	1
pd.notnull(EdgeList).any():  # add edges to graph for a passenger match	1	1
data_train.shape	1	1
train['EmbarkedS'][i] = 1	1	1
train['EmbarkedS'][i] = 0	1	1
test.drop(['PassengerId','Cabin','Ticket','Name'], axis=1)	1	1
titanic_test.drop(['PassengerId'],1)	1	1
data2['AgeBin'] = pd.cut(data1['Age'].astype(int), 5)	1	1
X_train['Fare'].fillna(-1).tolist()	1	1
train_X['Embarked'].fillna(train_X['Embarked'].value_counts().index[0], inplace=True)	1	1
train_csv.loc[train_csv.Age<=13, 'Child'] = 1.0	1	1
test_df['Nclass'], test_df['Name'] = test_df['Name'].str.split('.', 1).str	1	1
entire.groupby('Pclass')['Fare'].median()	1	1
data_test.drop('Age',axis=1)	1	1
"df_test[""Embarked_bool""] = df_test.Embarked.map(context2)"	1	1
df_train['Age'].fillna(df_train['Age'].mean(), inplace=True)	1	1
sub.to_csv('name_only_knn.csv', index = False, float_format='%1d')	1	1
df['filled_ages'] = df['Age'].interpolate()	1	1
"test_df[""Title""] = test_df[""Name""].apply(get_title)"	1	1
df['Title'] = df['Name'].apply(title_extract_function)	1	1
np.sum(losses)/Xd.shape[0]	1	1
"dataset['Title'] = dataset['Name'].str.split(', ', expand = True)[1].str.split(""."", expand = True)[0]"	1	1
ticket_table['Alive_male_on_ticket'] = ticket_table['Alive_male_on_ticket'].astype(int)	1	1
grouped_fare_train.median()	1	1
"train_df[[""Pclass"", ""Survived""]].groupby([""Pclass""], as_index=False).mean().sort_values(by=""Survived"", ascending=False)"	1	1
vif.round(1)	1	1
titanicAll[['Age','Fare']] = mean_imputer.transform(titanicAll[['Age','Fare']])	1	1
"input_test_data[""Survived""] = np.nan"	1	1
numerical_columns.append('TicketGroup_include_perishing_women')	1	1
Fare.plot.hist(bins=20,color='green',ax=ax[1,0])	1	1
train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
combined['Sex'] = combined['Sex'].map(lambda s : 1 if s=='male' else 0)	1	1
dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),                    'Age'] = ages_est[i,j]	1	1
ax[1][0].set_xticks([i+width/2 for i in x])	1	1
combined.loc[ combined['Age'] > 64]	1	1
train2.values, test2.values	1	1
"train_data[""Pclass_str""] = np.select(conditions, choices)"	1	1
data['Embarked'].replace(['S', 'C', 'Q'],[0,1,2],inplace=True)	1	1
"testdataframe2[""SibSp""]= testdataframe[""SibSp""]"	1	1
test_df.Cabin.isna().sum()	1	1
ds_test_copy[['PassengerId', 'Survived']].to_csv('SUBMISSION.csv', index=False)	1	1
train_df['SibSp'] == 0	1	1
best_iteration[1] = epoch	1	1
train.fillna({'Embarked': 'S'})	1	1
train['FinalFare'] = pd.qcut(train['Fare'], 4)	1	1
dataset['title'].replace(['Mme', 'Ms', 'Mlle'], ['Mrs', 'Miss', 'Miss'], inplace = True)	1	1
"TE[""target""] = y_pred"	1	1
"data_train['AgeGroup'] = pd.cut(data_train[""Age""], bins, labels = labels)"	1	1
dataset.loc[(dataset['Fare'] > 175.333) & (dataset['Fare'] <= 219.167), 'FareBand'] = 4	1	1
gs.cv_results_['mean_test_score']	1	1
titanic_df['SibSp'].isnull().sum()	1	1
df['Age_categorical'] = df['Age_categorical'].map(ages).astype('category')	1	1
"dataset['Name'].str.contains(""Master|Miss|Mrs|Mr"", na=False)"	1	1
"df_train.pivot_table(""Name"", ""Pclass"", ""Survived"", ""count"").plot(kind=""bar"", stacked=True)"	1	1
"train_df[""Sex""]=train_df[""Sex""].replace(""male"",0).replace(""female"",1)"	1	1
test_d.drop('Name',axis=1)	1	1
titanic_df.isnull().values.any()	1	1
train_df[829:830]	1	1
cm.sum(axis=1)[:,None] # making percentages of absolute values	1	1
train['Ticket_Cat'] = np.where(train.Ticket_Cat.str.isdigit(),  np.nan, train['Ticket_Cat'])	1	1
ax[0].plot(res_df_tol['tol'], res_df_tol['Val_acc'] , 'b.')	1	1
titanic_ndf.head()	1	1
"train[""Title""] = train[""Name""].str.extract(' ([A-Za-z]+)\.', expand=False)"	1	1
train_df.drop(['CategoricalAge'],inplace=True,axis=1)	1	1
data.loc[data['SharedTicket']==1, 'Ticket'].sort_values()	1	1
train_df.drop(['Cabin','Age'], axis=1)	1	1
confm.astype(float)	1	1
data_combined.sample(3)	1	1
combined.loc[(combined['Title']=='Miss') & (combined['Age']<=14.0),'Title'] = 'Girl'	1	1
dataset.loc[(dataset['Fare'] > 21.679) & (dataset['Fare'] <= 27.0), 'Fare'] = 6	1	1
"Adaboost_result[0][""best_score""],"	1	1
test_x['Age']=test_x['Age'].apply(rem_age_nan)	1	1
train_df['Survived'][train_df['Sex']=='male'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)	1	1
traindf.describe()['Age']	1	1
train_df['Embarked'].fillna('S',inplace=True)	1	1
train['Cabin'] = data['Cabin'].fillna('U')	1	1
combine_df.loc[(combine_df['Age'] > 48) & (combine_df['Age'] <= 64), 'Age'] = 3	1	1
data.Embarked.isna().sum()	1	1
y_train.iloc[train]	1	1
data.drop('Embarked_Q', axis=1, inplace=True)	1	1
"test_ori.loc[(test_ori[""Title""] == ""Dr"") & (test_ori[""Sex""] == ""male"") ,""Title""] = ""Mr"""	1	1
test['EmbarkedCategorical'] = test['EmbarkedCategorical'].astype(int)	1	1
"df_train.hist(""Survived"", by=""Pclass"", grid=""False"", layout=[1,3],figsize = [10,3])"	1	1
tdf['third_class'] = tdf.pclass == 3	1	1
train_df['fare'].isin([n for n in np.arange(q)]).all()	1	1
combine['Fare'].fillna(7.775, inplace=True)	1	1
plt.hist(x=[data1[data1['Survived']==0]['Fare'],data1[data1['Survived']==1]['Fare']], stacked=True, color=['g','b'], label=['Survived','Dead'])	1	1
"x_train[""Fare""].plot.hist(alpha=0.5)"	1	1
test['Gender']=test['Sex'].str.contains('female').apply(lambda x:0 if x==False else 1) ##females are 1 males are 0	1	1
X_train.drop(missing_col_tt, axis=1)	1	1
"dataset[""Ticket""].head(10)"	1	1
"titanic_test.drop([""Name"",""Ticket""], axis = 1)"	1	1
"train.loc[(train[""Survived""]==0)&(train[""Pclass""]==3), ""Age""]"	1	1
result_df.drop(['FareAdj','Embarked'],  axis=1)	1	1
non_nullcols.append(df[col].name)	1	1
testData['Age']=testData.groupby(['Pclass','Sex'])['Age'].transform(lambda x: x.fillna(x.median()))	1	1
titanic_test.drop(['Fare','Pclass'], axis=1)	1	1
train.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)	1	1
"df_test[""Pclass""][x] #Pclass = 3"	1	1
full_data['Embarked'] = full_data['Embarked'].astype('category')	1	1
dsubmit.head(2)	1	1
df_test['Survived']=df_test.Sex=='female'	1	1
dataset['Age']=dataset.groupby(['Sex', 'Pclass'])['Age'].transform(lambda x: x.fillna(x.mean())).astype(int)	1	1
data.loc[(data.passenger_fare==0) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare==0) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
titanic_df['Rich_man_travelling_w_wife'] = titanic_df[['Child', 'Female','Class_1', 'Class_2', 'SibSp']].apply(is_husband,axis=1)	1	1
"StackingSubmission.to_csv(""NetStackingSubmission.csv"", index=False)"	1	1
X['Name_length'] = X['Name'].apply(len)	1	1
df_train.groupby('Survived').Fare.hist(alpha=0.6);	1	1
train_data['Sex'] = train_data['Sex'].apply(personType)	1	1
df_train.drop('male',axis=1,inplace=True)	1	1
df_train['Title'] = df_train['Name'].apply(lambda x : x.split(',')[1].split('.')[0].strip())	1	1
data_copy.loc[data_copy['Sex'] == 'female', 'Sex'] = 0 # loc is to access a group of rows	1	1
"df2.replace([""S"", ""C"", ""Q""], [0,1,2])"	1	1
"p_data[""FamilySize""] = pandas.cut(p_data[""FamilySize""], bins=[-1,1,2, 4, 100])"	1	1
app_train['Survived']	1	1
raw_test_df.copy(deep=True)	1	1
clf.add(Dense(output_dim = 8, input_dim = 8 , init = 'uniform', activation = 'relu'))	1	1
all_data.set_value(61,'Embarked',value='C')	1	1
train[['Title','Pclass','Survived']].groupby(['Title','Pclass']).Survived.mean()	1	1
X_test_reseted['Survived_'] = y_test	1	1
data_train.corr()['Survived']	1	1
train_df_copy['age'].isnull()	1	1
x['Sex']=='male':	1	1
"testdat.drop(""Ticket"",axis=1,inplace=True)"	1	1
train_data['Cabin_Id'] = train_data['Cabin'].str[0]	1	1
np.round(data_sorted, 4)	1	1
"test[""Title_miss""] = test[""Title""] == 'Miss'"	1	1
train.head() #reading the data	1	1
tdf['title_cat'] = tdf.name.str.extract(r'^[^,]+, ([\S]*) .*$', expand=False).astype('category').cat.codes	1	1
df_train_tmp.drop('Ticket',axis=1,inplace=True)	1	1
titanic['Age'][(Pclass3)&Family1] = titanic['Age'][(Pclass3)&Family1].fillna(28)	1	1
dfte['Sex'] = le.fit_transform(dfte['Sex'])	1	1
train_data.sample(5)	1	1
split_view.str[1].str.split('.')	1	1
train_df['fare'].plot.hist(bins=bins, color='grey', alpha=.3, label='')	1	1
titanic_traindf.drop('Ticket', axis=1)	1	1
dataset['Age1']=0	1	1
good_dicts.append(d)	1	1
x_train['Embarked'] = x_train['Embarked'].fillna('$')	1	1
test['Age'].replace(np.nan,30.27,inplace= True)	1	1
dataset['Child'] = dataset['Age']<=10	1	1
train_data['Title'] = train_data.Name.str.extract(' ([A-Za-z]+)\.', expand=False) ##Regular Expression <3	1	1
df['Name'].str.lower().apply(get_title_from_name)	1	1
"model[""best_params""] = grid.best_params_"	1	1
traindf.describe(include = ['O'])	1	1
gender_dummy.drop(labels= label_drop, inplace=True, axis=1)	1	1
parameters['learning_rate'] = 0.01	1	1
lowest_data.isna().sum()	1	1
"data_set.drop(columns=[""PassengerId"",""Cabin"",""Name"",""SibSp"",""Parch"",""Ticket""],inplace=True)"	1	1
fpr3.append(my_fpr)	1	1
np.sum(dZ) / m	1	1
"data[""Cabin""] = le.transform(data[""Cabin""])"	1	1
full_data.isnull().sum()	1	1
"train_set[""Pclass""] = StandardScaler().fit_transform(train_set[""Pclass""].values.reshape(-1,1))"	1	1
test_df['Age'].fillna(test_df['Age'].mean(), inplace=True)	1	1
dataset['DiscreteTitle'] = label.fit_transform(dataset['Title'])	1	1
"test[""Age_6""] = (60 <= test[""Age""])"	1	1
test['Age'].loc[(test['Sex'] == 'male') & (test['Fare'] == i) & pd.isnull(test['Age'])] = test['Age'].loc[(test['Sex'] == 'male') & (test['Fare'] == i)].median()	1	1
dataset_df['HasAge'] = dataset_df['Age'].isnull().map(lambda i : 1 if i == True else 0)	1	1
clf_best_acc.append(grid_searchs[i].best_score_)	1	1
score.append(rforest_model.score(X_train, y_train))	1	1
"train_data.replace([""NaN""],[0])"	1	1
test_df.drop(['FamilySize'], axis=1)	1	1
data.Pclass.astype('category')	1	1
test['Survived'] = rf.predict(X_test)	1	1
df['Title'] = df['Title'].map({'Mr':1 , 'Mrs':2, 'Miss':3, 'Master':4}).astype(int)	1	1
df_pred_use_X.values	1	1
data_train_filter_csv.as_matrix()	1	1
holdout.head(2)	1	1
data.groupby(['Initials'])['Age'].mean()	1	1
comb.drop(['PassengerId','Survived','index'],inplace=True, axis=1)	1	1
titanic_full_train.drop(['Survived'], axis=1)	1	1
titanic_train.groupby('Companion')[['Survived', 'Sex']].agg(['mean', 'count'])	1	1
"t2.corr()[""Embarked""]"	1	1
train_data.drop(drop_elements, axis=1)	1	1
titanicDF.fillna(0).sample(frac=1)	1	1
"data.loc[data[""FamilySize""] == 1, ""Alone""] = 1"	1	1
"os.path.join(INPUT_DIR, ""train.csv"")"	1	1
data_male['Age'].mean()	1	1
floor.append(level[0])	1	1
"train[""Family""].loc[train[""Family""]==0]=0      #0 indicates --- travelling Alone"	1	1
df['PassengerId'].count()	1	1
test['title'].value_counts()	1	1
test.values.T	1	1
"train[""Salutations""]=train[""Salutations""].astype(str)"	1	1
"train.set_index('PassengerId').drop('Name', 1).to_csv(""prepped_train.csv"")"	1	1
dataset.drop(['PassengerId', 'Cabin', 'Name', 'SibSp', 'Parch', 'Ticket'], axis=1)	1	1
data.drop(labels=['Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)	1	1
best_estimator[9].predict(X_test)	1	1
train.loc[(train['Fare'].isnull()) | (train['Fare']==0) ]	1	1
data.Cabin_Letter_F.astype('category')	1	1
full_models.items():	1	1
test.head()['Embarked']	1	1
Test.info()	1	1
df_test['FamilySize']	1	1
data_test[['PassengerId']]	1	1
comb['Sex'] = comb['Sex'].map({'male':0,'female':1})	1	1
survived.head(10)	1	1
"train_data.loc[train_data[""Cabin""].notnull() & train_data[""Cabin""].str.contains(""D""), ""CabinLetterD""] = 1"	1	1
Title_test.append(title_test)	1	1
train_df_imputed['FamilyId'] = np.nan	1	1
test_norm.as_matrix([0,1,2,3,4,5,6])	1	1
new_data.drop(drop_cols, axis=1)	1	1
Title_Dict.update(dict.fromkeys(['Capt', 'Col', 'Major', 'Dr', 'Rev'], 'Officer'))	1	1
np.std(X_train['age'][X_train['age'].gt(0)])	1	1
train.sample(15)	1	1
np.sum(mask, axis=0)	1	1
df.loc[ (df['Age'].isnull() & (df['Pclass'] == (j + 1)) & (df['gender_num'] == i)), 'age_fill' ] = median_ages[i, j]	1	1
clfs.append(randomForest_best_result)	1	1
train_data['Title'] = train_data['Title'].str.strip()	1	1
df['cabin_letter'] = df['Cabin'].apply(lambda c: c[0] if not pd.isnull(c) else 'N') # N=none	1	1
test['FamilySize'] = test['SibSp']+test['Parch']+1	1	1
"train_data[[""Age"", ""Survived""]]"	1	1
feats['Embarked'].isnull().sum()	1	1
data_df['Title'] = data_df['Title'].map({'Mr': 0, 'Miss': 1, 'Mrs': 2, 'Master': 3, 'Rare': 4})	1	1
age_train['Fare'] = [float(x) for x in age_train['Fare']]	1	1
train['Person'] = train[['Age', 'Sex']].apply(get_person, axis=1)	1	1
test.loc[test.Fare > 300,'Fare'] = 270	1	1
transformed_df['Age_Categorized_Senior'] = age.Age_Categorized_Guess_Senior	1	1
test_df['Family_size'] = test_df['SibSp'] + test_df['Parch']	1	1
test_data['Age'].fillna((test_data['Age'].mean()), inplace=True)	1	1
train['IsAlone'] = train[['SibSp','Parch']].apply(isAlone,axis=1)	1	1
result['Survived'] = predictions	1	1
rawdata.ix[rawdata.Age < 12, 'AgeCategory'] = 0	1	1
"df[""ischild""] = (df.Age < 16).astype(np.uint8)"	1	1
x[0],	1	1
df_submission['fare'] = df_submission.apply(fill_fare, axis=1, df=df_all)  # [1]	1	1
train['Family'] = train.SibSp+train.Parch+1	1	1
data.loc[(data.Embarked.isnull()), 'Embarked'] = 'S'  # 保留缺失出发城市	1	1
df.drop('Name', axis='columns')	1	1
train_df.isnull().any()#After imputation DataFrame is free from NA	1	1
vec.transform(arr) > 0  #ignore double counts	1	1
train_set.Age.hist()	1	1
x.drop(['Cabin'], axis=1, inplace=True)	1	1
axis2.spines['bottom'].set_linewidth(lw)	1	1
train['Embarked'] = train['Embarked'].fillna('S') # Removes 2 null values from embarked	1	1
titanic_data[['Pclass', 'Survived']];	1	1
df.loc[:,'Cabin'] = df['Cabin'].apply(find_cabin)	1	1
df['FamilySizeGroup'] = pd.cut(df['FamilySize'], bins)	1	1
titanicAll['Family'].describe()	1	1
pipelines.append(('ScaledLR', Pipeline([('Scaler', StandardScaler()), ('LR', LogisticRegression())])))	1	1
sc.transform(X_t)	1	1
test.set_index('PassengerId')	1	1
"df[""Alone""] = df[""Family_Size""] > 1"	1	1
raw_test['Title'] = raw_test['Title'].replace('Ms', 'Miss')	1	1
data['Embarked_C'] = data.Embarked_C.apply(lambda x: int(x))	1	1
train['Cabin_Letter']	1	1
df_train.drop(labels=['Survived'], axis=1, inplace=True)	1	1
data['Title'].replace('Mr.', 2, inplace=True)	1	1
df.drop(labels='Title', axis='columns', inplace=True)	1	1
"data_set.drop(columns = [""SibSp"",""Parch""])"	1	1
np.where(train['Age'].isnull())#checking the indexes where age is null	1	1
data.ImputedAge_bin.replace([0,1,2,3],[0,1,2,3], inplace = True)	1	1
combine_df['Surname'] = combine_df['Name'].apply(lambda x:x.split(',')[0])	1	1
test.drop('Embarked',inplace=True,axis=1) #drops the embarked axis	1	1
"test_df[""IsAlone""] = [1 if i<2 else 0 for i in test_df.FamilySize]"	1	1
"titanic_train_dataframe.loc[titanic_train_dataframe[""Embarked""].notnull(), ""Embarked""]"	1	1
np.mean(y_test==classifier.predict(X_test))*100	1	1
tr['Embarked'].unique()	1	1
test_one.head()	1	1
test_df.filter(regex='Age_.*|SibSp|Parch|Fare_.*|Sex_.*|Pclass_.*|Title_.*')	1	1
testOrg['AgeGroup'] = np.where(testOrg['Age']<=16, 'Child', 'Adult')	1	1
best_scores.append(grid_searches[i].best_score_)	1	1
titanic[['PassengerId','Embarked','Pclass','Sex','Fare_Scaled','AgeCategory','FamilyCount','FamilyCategory','CabinLevel','Title','Pclass_Sex','Embarked_Sex','Emb_label_encoding','Survived']]	1	1
submission.set_index('PassengerId', inplace=True)	1	1
train_df['Sharedticket2'] = train_df.Sharedticket	1	1
"submission[""Survived""] = 0"	1	1
allset['FamilySurvived']=0	1	1
temp_train['Age'] = data['Age']	1	1
"test_df[""FamilySize""] = test_df[""SibSp""] + test_df[""Parch""]"	1	1
data['SmallFamily'] = [1 if familysize >= 2 and familysize < 5 else 0 for familysize in data['FamilySize']]	1	1
Age.plot.hist(ax=ax[1],bins=20,edgecolor='black',color='green')	1	1
X['Sex'].dropna(axis=0, inplace=True)	1	1
dataset.loc[(dataset['Age']>24)&(dataset['Age']<=32), 'Age'] = 3	1	1
dataframe['Age'] = dataframe.Age.fillna(-0.5)	1	1
df[['Age','Survived']].groupby(by=lambda index: int(df.loc[index]['Age']/10)).mean()	1	1
df['LargeFamily'] = df['LargeFamily'].apply(int)	1	1
"models.append((""QuadraticDiscriminantAnalysis"", QuadraticDiscriminantAnalysis))"	1	1
train_df['Age_bin'] = pd.cut(train_df['Age'], bins=[0,12,20,40,120], labels=['Children','Teenage','Adult','Elder'])	1	1
test['FareBand'].astype(int)	1	1
test['Ticket_Cat'] = test.Ticket.apply(lambda s: s.split(' ')[0])	1	1
df['IsMother']=np.where(((df.Sex=='female')&(df.Parch>0)&(df.Age>18)&(df.Title!='Miss')),1,0)	1	1
tt.loc[tt['TicketCount'] > 1,'ShareTicket'] = 1	1	1
df_out_1.Age.fillna(math.floor(mean_age_by_pclass.iloc[index-1]));	1	1
train_test['Cabin_nan'] = train_test['Cabin'].apply(lambda x:str(x)[0] if pd.notnull(x) else x)	1	1
df['TicketLetter'] = df['Ticket'].apply(lambda x : str(x)[0])	1	1
"row[""Pclass""] == 1:"	1	1
test_person_dummies.drop(['male'],axis=1,inplace=True)	1	1
test.loc[i,'EmbarkedModified'] = 'S'	1	1
test_one['Survived'] = 0;	1	1
df_test.drop('Sex', axis=1)	1	1
row['Sex'] == 1 and row['Pclass'] == 1 and row['Survived'] == 1 and row['Age'] == 17:	1	1
test_df.describe().columns	1	1
ageDF['Age'] = data_train['Age']	1	1
data2.drop(['Pclass','Name','Sex','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Age'], axis=1)	1	1
age_complete[['Title','Pclass', 'Sex']].values[650:]	1	1
"plt.hist(miss['Age'].dropna().values, color=""orange"", bins=np.arange(0,81,1))"	1	1
"test_df[[""PassengerId"",""Name"",""SibSp"",""Parch"",""Ticket"",""Embarked""]].copy()"	1	1
solution.to_csv('solution_final_v1.csv', index=False)	1	1
df3.drop('Name', axis=1, inplace=True)	1	1
one_hot_encoded_test_predictors.isnull().sum()	1	1
numeric_data.head()	1	1
data.loc[(data['Age'].isnull()) & (data['Initials']=='Other'),'Age']=46	1	1
df['LargeFamily'] = df['Family_size'].map(lambda s: 1 if 5 <= s else 0)	1	1
test_encoded.drop('Survived', 1)	1	1
family[ 'Family_Large' ]  = family[ 'FamilySize' ].map( lambda s : 1 if 4 <= s else 0 )	1	1
pdModelos.loc[row, 'pred'] = pipe.predict(X_train)	1	1
"test[""Cabin""][test[""Cabin""] == ""B""] = 1"	1	1
test_data.drop(['Person','Embarked'], axis=1, inplace=True)	1	1
data_train.drop(['Cabin'], axis=1, inplace=True)	1	1
np.squeeze(y.values)	1	1
dataset.set_value(rowIndex, 'PerPersonFare', dataset['Fare'][rowIndex]/numOfTickets)	1	1
full.loc[full.FamilySize <= 1, 'IsAlone'] = 1	1	1
model.add(Dense(units=29, activation='selu'))	1	1
row.copy()	1	1
data.loc[data['Age'] <= 16, 'Age'] = 0	1	1
titanic_df['Embarked'] = titanic_df.Embarked.astype('category')	1	1
cabin['Cabin'] = cabin['Cabin'].map( lambda c : c[0] )	1	1
titanic_p.family.replace(n,'without family', inplace=True)	1	1
"train_df['Family'] = train_df['Parch'] + train_df[""SibSp""]"	1	1
embark_location.head()	1	1
test7['FamilySize'] = test7['SibSp'] + test7['Parch'] + 1	1	1
target_columns.append('Titles_mapped')	1	1
df.loc[df['Age'] > 16, 'AgeC'] = 1	1	1
titanic_df.groupby('Title')['Age'].median()[titles.index(title)]	1	1
"df_train.groupby([""title""])[""PassengerId""].count()"	1	1
test.Name.str.replace('(.*, )|(\\..*)', '').rename('Title')	1	1
"test[""Sex""] = le.fit_transform(test[""Sex""].fillna('0'))"	1	1
Merged_data['CatAge'] = pd.qcut(Merged_data.Age, q=4, labels=False )	1	1
data['AgeBin'] = pd.cut(data['Age'], [0, 4, 8, 16, 100])	1	1
dataset.isnull().sum()  # See which columns have NaN values	1	1
"df.to_csv(""dandan_titanic_submission2.csv"",header=True,index=False)"	1	1
test_df.loc[i,'Title'] not in list(set(list(train_df['Title']))):	1	1
numerical_columns.append('Surname_surviving_men')	1	1
"data.dtypes[data.dtypes != ""object""].index"	1	1
tt.loc[(tt['Age'].isnull()) & (tt['Title'] == title), 'Age'] = fillAge	1	1
dfTest.drop(['Title'],axis=1,inplace=True)	1	1
train_data[['Name','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked','Survived']]	1	1
test.loc[test['Age'] > 60.0, 'ageCat'] = 6	1	1
"train.pop(""Survived"")"	1	1
titanic.Name.apply(lambda s: s.split(',')[1].split('.')[0])	1	1
"train_set[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
titanic_comb['familly_size'] = titanic_comb['SibSp'] + titanic_comb['Parch'] + 1	1	1
test_copy.loc[test_copy['SibSp'] == 1, 'SibSp_Category'] = 1	1	1
"copy.loc[data.Sex == 'female', ""Sex""] = 0"	1	1
train_df.groupby(col).size().plot.bar(ax=ax, color='silver')	1	1
df_test['Sex'] = pd.get_dummies(df_test['Sex'], drop_first=True)	1	1
dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2}).astype(int)	1	1
comb.loc[891:].reset_index(drop=True)	1	1
titanic.groupby('AgeBins')['AgeBins'].count()    # Confirms the values in each bin	1	1
"data[""Survived""].corr(data[""Family Size""]),"	1	1
"test_df.loc[(test_df[""Age""]>16)&(test_df['Age']<=32),'Age']=1"	1	1
combine_df.drop('Cabin',axis=1)	1	1
dataset.iloc[:, 1:].values	1	1
train_data.drop('Cabin', 1, inplace=True)	1	1
test_df['Title'] = test_df['Title'].replace('Ms.','Miss.')	1	1
X.loc[ X['Fare Group'] <= 7.91, 'Fare Group'] = 0	1	1
drop_elementsNMD.append('hasAge')	1	1
test.drop('Embarked', inplace=True, axis=1)	1	1
accuracyLs.append(acc)	1	1
ax[0].set_title('Number of passenger by Embarked')	1	1
df.replace({'GroupID':TicketList}, inplace=True)	1	1
train_copy['Embarked'] = train_copy['Embarked'].fillna('-1')	1	1
dataset.loc[(dataset['Age'] > 8) & (dataset['Age'] <= 12), 'Age'] = 1	1	1
submission_tree.to_csv('submission_tree_turned.csv', index=False)	1	1
train_data.loc[oldmissmask, 'Age'] = 26	1	1
dataset['FareBin']	1	1
df_train['Age'] = df_train[['Age','Pclass']].apply(impute_age,axis=1)	1	1
np.mean(pred==y_train)  # accuracy on train	1	1
transformed_df['Cabin_E'] = cabin.Cabin_E	1	1
test_df.drop('Name', axis = 1, inplace = True)	1	1
X.drop(['Sex','SibSp','Parch'], axis=1, inplace=True)	1	1
df1['Embarked'].value_counts().plot.bar()	1	1
SVC_accuracies.mean()	1	1
"X_test[""Title""] = X_test[""Name""].apply(getTitle)"	1	1
"trainingset[""CabinBin""] = (trainingset[""Cabin""].notnull().astype('int'))"	1	1
classifiers['acc_mean'].append(score.mean())	1	1
df['TicketMembers'] = df['TicketMembers'].fillna(0)	1	1
tt_train.append(tt_test, ignore_index = True, sort = True)	1	1
"AgeTypeTrain.append(""3"")"	1	1
x_test.values # Creats an array of the test data	1	1
dataset['Embarked'] = dataset['Embarked'].replace('Q', 2)	1	1
dfTrain['Survived'].value_counts(normalize=True)	1	1
train_data['Cabin_Id']	1	1
"combine[""Age""] = combine[""Age""].fillna(-0.5)"	1	1
x.loc[:, columns]	1	1
np.any(train['Age'].isna())	1	1
df_train['Survived'][df_train['Sex']=='male'].value_counts().plot.pie(explode=[0,0.2],autopct='%1.1f%%',ax=ax[0],shadow=True)	1	1
full_train_set.loc[full_train_set['Pclass'] == 3]	1	1
ticketlist.append(tick2)	1	1
drop_elementsNMD.append('isCabinE')	1	1
data.loc[data['Fare'] > 50, 'Fare'] = 2	1	1
df[['Survived', 'Cabin']].copy()	1	1
test['Title']=test['Title'].replace('Ms','Miss')	1	1
"ship['Title'] = ship['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
combine_df.at[ind,'titles'] = 'Miss'	1	1
data.Without_Age.astype('category')	1	1
x_train_preprocessed.drop(['Person'],axis=1)	1	1
plt.hist(df.Age, bins=40)	1	1
titanic_df['Age'].dropna().astype(int).hist(bins=20, ax=axis1)	1	1
data_test_all.drop(columns='Ticket')	1	1
train_dataset.loc[(train_dataset['Age'].isnull()) & (train_dataset['Title']=='Mrs'),'Age'] = 36	1	1
preds_all.astype('int')	1	1
df.loc[(df['Age'].isnull()) & (df['gender'] == gender), 'Age'] = median_age	1	1
train_df.drop(columns=['Survived', 'PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp', 'Parch'])	1	1
train.loc[(train['Age']>40)].Survived.mean() #Older parties don't show any specifically higher levels of survival rate	1	1
train_data['Famly'] = train_data.apply(lambda x:0  if((x['SibSp'] + x['Parch']==0))  else (1 if((x['SibSp'] + x['Parch']<4))  else 2)  , axis=1)	1	1
stc.transform(train_data[i].values.reshape(-1,1))	1	1
titanic_train['Age']= titanic_train[['Age','Pclass']].apply(impute_age,axis=1)	1	1
testData['isSurvived'] = np.where(testData['Sex'] == 'female', '1', '0')	1	1
prediction.to_csv('predictions.csv', sep=',', encoding='utf-8', index = False)	1	1
train_features.shape, train_labels.shape, val_features.shape, val_labels.shape, test_features.shape	1	1
model_data[0:891]	1	1
df_test['Fare']=df_test['Fare'].fillna(df_test['Fare'].mean())	1	1
"train[[""Name_Title"", ""Age""]].groupby(['Name_Title'], as_index=False).mean()"	1	1
"train.drop([""Embarked""], axis=1)"	1	1
"train.loc[(train[""Survived""]==0)&(train[""Pclass""]==2), ""Age""]"	1	1
"df_train[""title""].head()"	1	1
alg['algo']	1	1
"df_test[""Fare""].isnull().sum()"	1	1
df['SibSp'].notnull().mean()	1	1
allfeat['Fare'] = allfeat['Fare'].fillna(train['Fare'].median())	1	1
"df.drop(""Name"",axis=1,inplace=True)"	1	1
feature_dataframe.head(11)	1	1
ax[0],	1	1
X['Sex']	1	1
X_full['Nulls'] = X_full.Cabin.isnull().astype('int') + X_full.Age.isnull().astype('int')	1	1
t.loc[ t['Age'] <= 15, 'Age']                                                = 0	1	1
NameList.append(G.node[Passenger]['HyphenName'])	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Jonkheer', 'Rare')	1	1
train['Sex'] = train['Sex'].map({'female':0,'male':1})	1	1
cabins.values.flatten()	1	1
test_df.drop(['Sex'], axis=1, inplace=True)	1	1
"df[""Age""] = df.groupby(['Sex','Pclass','Title'])['Age'].transform(lambda x: x.fillna(x.median()))"	1	1
tr['Title'].loc[i] = tr['Name'].loc[i].split(',').pop(1).split('.').pop(0).strip()	1	1
train_data.head(10) # You can see the median value has been updated to Null values.	1	1
"train.drop([""Cabin"", ""Name"", ""Ticket""], axis=1, inplace=True)"	1	1
submission.to_csv('TitanicSubmission.csv',index=False)	1	1
rawdata.ix[(rawdata.Age >= 12) & (rawdata.Age < 18), 'AgeCategory'] = 1	1	1
items.append(('train-%s-mean', 'test-%s-mean'))	1	1
train.drop(columns = ['Survived'])	1	1
"test.loc[(test[""Pclass""].values == 3) & (test[""Age""].isnull()), ""Age""] = meanAge3"	1	1
ax[0].plot(res_df_tol['tol'], res_df_tol['Train_acc'] , 'r*')	1	1
X_full['Age']= full['Age'].fillna(0)  / 80	1	1
self.add(layers.Dense(Nh_l[1], activation='relu', name='Hidden-2'))	1	1
df2.iloc[1043]	1	1
dataset['AgeBand']	1	1
combine.ix[(combine.Pclass==3)&(combine.Cabin.isnull()),'Cabin'] = np.random.choice(['E','F','G'])	1	1
data.loc[(data.passenger_fare>=13.1) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>=13.1) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
titanic_scaled.iloc[891:1309,:]	1	1
"test[[""PassengerId"", ""Survived""]]"	1	1
df.loc[df['Embarked']=='S','Embarked'] = 0	1	1
"sub_df.sort_values(by=[""name_count"", ""name_last"", ""pclass"", ""embarked"", ""age"", ""group_id""], ascending=False, inplace=True)"	1	1
s_parch.reindex(d_parch.index).fillna(0.0)	1	1
df_data.loc[df_data['PassengerId'] == passID, 'Connected_Survival'] = 1	1	1
df_data.loc[df_data['PassengerId'] == passID, 'Connected_Survival'] = 0	1	1
dataset.loc[(dataset['Age']>48)&(dataset['Age']<=64),'Age_band']=3	1	1
"data_train.loc[data_train[""Embarked""] == ""S"", ""Embarked""] = 0"	1	1
train.drop(columns=['Cabin','Age','Parch','Ticket','Name', 'Embarked'])	1	1
train.loc[(train['AgeModified']>60) & (train['AgeModified']<=70),'AgeCategorical'] = 6	1	1
df_train_ml['Age_Cat'] = pd.cut(df_train_ml['Age'], bins = 10, labels = [i for i in range(10)])	1	1
"final_df.to_csv(output_file_name+""_tr_acc_""+""{0:.2f}"".format(final_tr_accuracy)+""_prediction.csv"", index=False)"	1	1
np.product(train.shape)	1	1
data_train.loc[data_train.Embarked.isnull(),'Embarked']='S'	1	1
df.loc[df['Fare'] < 7.91, 'Fare'] = 0	1	1
"train[[""Survived"",""Age"",""SibSp"",""Parch"",""Fare""]].corr()"	1	1
"Titanic_Prediction.to_csv(""Titanic_Prediction.csv"", index=False)"	1	1
rfc_params['learning_rate'] = 0.015	1	1
trainingset['AgeBin'] = trainingset['AgeBin'].map(agemappings)	1	1
"X[""Fare""] / (X[""Family""] + 1)"	1	1
submission_test['Age'].mean()	1	1
train_df.loc[(train_df['Age'].isnull())&(train_df['Title']=='Mr'),'Age'] = 33	1	1
"train_data[""CabinLetterT""] = 0"	1	1
train.groupby(['Greeting', 'Sex'])['Age'].median()	1	1
titanic_test[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
dfTrain.loc[dfTrain.Sex=='female','Age']=dfTrain.loc[dfTrain.Sex=='female','Age'].fillna(avgfemaleTrain)	1	1
data.Title.str.replace('Don', 'Mr')	1	1
df.fillna({'Embarked': 'X','Cabin':'Dummy'})	1	1
test_df.loc[(test_df['Fare']>7)&(test_df['Fare']<=14),'Fare_new']=1	1	1
ytr.iloc[train_index]	1	1
data_test['Survived'] = data_test['SVC']	1	1
sns.boxplot('Pclass', 'Age', data=df_train)	1	1
df[['decade', 'Survived']].groupby('decade').mean().plot()	1	1
train.loc[train['Embarked'] == 'C', 'Embarked'] = 0	1	1
train7['Fare'] = pd.cut(train7['Fare'], 5, labels=False)	1	1
all_data.drop(['AgeRange'], axis = 1)	1	1
fit.append('lg')	1	1
pd.isnull(train_test).sum()	1	1
data_train.drop(['Age', 'Fare', 'Name_length', 'FamilySize'], axis=1, inplace=True)	1	1
train_df['Age'] < 15 & C2	1	1
train_df['Age'] < 15 & C3	1	1
train_df['Age'] < 15 & C1	1	1
data['Family_Survival'] = default_survival_chance	1	1
train_df['Family']=train_df['SibSp']+train_df['Parch']	1	1
"train2[""Survived""]"	1	1
"_df.loc[ [705, 624], ""group_id""]  = 209.0"	1	1
"df_test[""Ticket""]"	1	1
group_counts['Survived'] = survived_by_group['Survived']	1	1
forest_mod_scores.mean()	1	1
"train[""title""] = [i.replace('the Countess', 'rare') for i in train.title]"	1	1
dataset_df['AgeLessThan17'] = (dataset_df['NewAge'] < 17) * 1 #multiply 1 makes boolean change to numbers	1	1
train['T3'] = np.array(train['Title'] == 'Mr').astype(np.int32)	1	1
df1.loc[152, :]	1	1
comb.Embarked.loc[comb.Embarked.isnull()] = 'C'	1	1
output.to_csv('rbf.csv', index=False, header=True, sep=',')	1	1
test_copy['SibSp_Category'] = 4	1	1
dataset.drop(['Cabin','Ticket'], axis=1, inplace=True)	1	1
train_df['Name'].value_counts().index.tolist()	1	1
train['Embarked'].mode()[0]	1	1
np.mean(lossesLs)	1	1
titanic_test.Name.values[i].replace('.',',').split(',')	1	1
df_test.drop(['Survived'],axis=1,inplace=True)	1	1
dataset.loc[(dataset['Age'] > 8.378) & (dataset['Age'] <= 16.336), 'Age'] = 1	1	1
test['Honorific']=sexTest	1	1
data.set_value(i, 'Age', int(means[temp_title]))	1	1
sns.boxplot(x =data.Sex =='female',y=data['Survived'])	1	1
test.isnull().sum()/test.isnull().count()*100	1	1
dataset['Family'] = dataset['SibSp'] + dataset['Parch']	1	1
full_x[0:891]	1	1
dataset.loc[(dataset['Fare'] > 14.454)&(dataset['Fare'] <= 31), 'Fare'] = 2	1	1
dataset[['Pclass','Sex','Age','Fare','Embarked']]	1	1
train_set['Age'].fillna(train_set['Age'].median(), inplace = True)	1	1
"train_test.loc[train_test[""Age""].notnull() ,""age_nan""] = 0"	1	1
"train_df[""Title""] = train_df[""Name""].apply(get_title)"	1	1
test5.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
test_set['Title'] = test_set['Title'].map(title_dictionary)	1	1
train_data['Cabin_C'] = Cabin_dummy['C']	1	1
test['Age'][i] = predictions[inc]	1	1
"dt_train[""Fam_cat""] = pd.cut(dt_train.Family, intervals, labels=cats)"	1	1
res1[2]	1	1
"test.loc[train[""Embarked""] == ""S"", ""Embarked""] = 0"	1	1
np.stack((lr_test,rfc_test,svc_test,knn_test,gb_test))	1	1
"combined.loc[pid, ""group_size""] = 1"	1	1
titanic_data['Couple'] = 0	1	1
one_hot_encoded_train_df.head()	1	1
all_df.drop(['Ticket'],axis=1,inplace=True)	1	1
df['Sex'] = df['Sex'].apply(cat2num_sex)	1	1
"train[""Title""] = train_titles.map(titles)"	1	1
data_all['Adult'] = (data_all['Age']<=18)+0	1	1
x_new_norm.head()	1	1
titanic_df.drop(['PassengerId','Name','Ticket','Fare'], axis=1)	1	1
df_train['Age'] = df_train['Age'].fillna(30)	1	1
"dataset[""hasSiblings""] = dataset[""SibSp""].apply(lambda x: (x>0)*1)  #making the Siblings Column to having Siblings and Spouse or not"	1	1
"sns.boxplot(""Embarked"",""Fare"", palette='rainbow', hue='Pclass',data=train)"	1	1
"axes[1].set_title(""Gender Figure"")"	1	1
titanicTest.Pclass.count()	1	1
data.loc[data['Title'].isin(['Jonkheer'])]['Age']    # 38	1	1
"traindata.groupby(""title"").Survived.sum().plot(kind=""bar"")"	1	1
train[['Pclass','Sex','Age',]]	1	1
"mix_results.loc[index, ""svm""],"	1	1
featstats['featstd']	1	1
train.head()['Cabin']	1	1
tr['Alone'] = 0	1	1
train.pivot_table(index='Age_Group', columns='Survived', aggfunc='count').Age	1	1
test_csv.to_csv('submission_all_lin_0.5.csv', index=False)	1	1
test.Fare.mean()	1	1
"submission[""PassengerId""] = Xsubmission[""PassengerId""]"	1	1
data.fillna(0,inplace=True)	1	1
df['Age'] = df['Age'].fillna(np.random.randint(low = mean_age - std_age, high = mean_age + std_age))	1	1
Train_df.info()	1	1
"train[[""Fare_cat"",""Pclass"",""Survived""]].groupby([""Fare_cat"",""Pclass""], as_index=False)['Survived'].agg(['mean','count'])"	1	1
"df.loc[(df[""Age""] > 16.336) & (df[""Age""] <=32.252), ""Age""] = 1"	1	1
dataset_train['Name'] = lb_Title.fit_transform(dataset_train.Name)	1	1
df_test['Title'] = df_test['Name'].apply(lambda n: str(set([w for w in n.split()]) & set(titles)) )	1	1
pred.size	1	1
test.drop(features_drop1, axis=1)	1	1
"test['CabinN3'] = ""999"""	1	1
data_df['Title'] = data_df['Name'].str.extract('([A-Za-z]+)\.', expand=True)	1	1
full.loc[full.Fare.isnull(),'Pclass'].map(dict_fare_by_Pclass)	1	1
X.drop(['y'],axis=1)	1	1
"test[""Partition""]=""test"""	1	1
df['age_med']	1	1
train_df['Cabin_Letter'] = train_df['Cabin'].apply(lambda x: str(x)[0])	1	1
"sns.boxplot(x=""Survived"",y=""Fare"",data=titanic)"	1	1
traindf[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
np.mean([x for x in test_x[:,2] if not isnan(x)])	1	1
df_test.drop(['Cabin'], 1, inplace=True)	1	1
results.sort_values(by='Score', ascending=False).reset_index(drop=True)	1	1
scores.append(acc.mean())	1	1
df['Fare'] = df.groupby(['Pclass'])['Fare'].transform(lambda x: x.fillna(x.mean()))	1	1
x_test['Title_Mrs'] = test_df['Title'].apply(lambda x: 1 if x == 'Mrs' else 0)	1	1
df['SexN'] = df['Sex']	1	1
df_test['TicketEncoded'] = le_ticket.transform(df_test['TicketEncoded'])	1	1
data[['Cabin', 'Cabin_numerical', 'Cabin_categorical']].tail()	1	1
df_test['Fare'].fillna(df_test['Fare'].median(), inplace=True)	1	1
"train[""nnull""] = null_count(train)"	1	1
dataset.loc[dataset['Fare'] <= 17, 'Fare'] = 0,	1	1
classifier_.add(Dense(units = 6, kernel_initializer = 'random_uniform', activation = 'relu', input_dim = 10))	1	1
test.loc[(test['Age']>40.00)&(test['Age']<=81.00),'NAge']=4	1	1
"sns.boxplot(data=jsd, ax=ax, orient=""h"", linewidth=1, saturation=5, palette=palette2)"	1	1
full[['TicketCounts','Ticket','SibSp','Parch']][:20]	1	1
"survived[""Age""].plot.hist(alpha = 0.5,color = 'green',bins = 50)"	1	1
data['AgeBin_Code'] = le.fit_transform(data['AgeBin'])	1	1
train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean();	1	1
df_train.groupby(['Title'])['Survived'].mean().to_frame()	1	1
data_copy['Sex']=data_copy['Sex'].fillna('female')	1	1
"test_y[""Survived""]"	1	1
"titanic.groupby(['Title','Pclass'])['Age'].mean()   # Mean age based on ""Title"" and ""Pclass"""	1	1
"tp.loc[tp[""Ticket_g""]==""Num"",""Ticket_c""] = 3"	1	1
"dataset_med.loc[3,1][""Age""]"	1	1
correlations.head(10)	1	1
plt.hist(ageOfMrsWithoutParch)	1	1
"data[""Embarked""] = data[""Embarked""].astype(int)"	1	1
df['group_size'] = df['SibSp'] + df['Parch'] + 1	1	1
train_ds.sort_index(axis= 1, ascending= False)	1	1
X.drop(columns=self.exclude)	1	1
data_test['Name']	1	1
test_df.Age.mean() + test_df.Age.std(),	1	1
df.drop(['Survived'],axis=1)	1	1
Fare.plot.hist(bins=20,color='green',ax=ax[0,1])	1	1
"combined[""FamilySize""] = combined[""SibSp""] + combined[""Parch""] + 1"	1	1
train_copy.loc[train_copy['Embarked'] == 'Q', 'Embarked_Category'] = 2	1	1
df['Pclass'].hist(ax=axs[0])	1	1
"train[""Cabin""].unique()"	1	1
train_df['Cabin'] =  train_df['Cabin'].apply(lambda x: 0 if x == '!!!' else 1)	1	1
df[['name_length', 'Survived']].groupby('name_length').mean().plot()	1	1
train_raw.info()	1	1
"pd.merge(df, df_ticket, left_on=""Ticket"", right_index=True, how='left', sort=False)"	1	1
X_full['Embarked'] = full['Embarked'].map( {'C': -1,'Q': 0, 'S': 1}).fillna(0)	1	1
"models.append(( ""CART"" , DecisionTreeClassifier()))"	1	1
"train_data.drop(""Pclass"", axis=1)"	1	1
titanic_test['Cabin'] = titanic_test['Cabin'].fillna('Unknown')	1	1
df_submission.to_csv('accountant_titanic_02.csv', index=False)	1	1
"history['Survived']=history['Survived'].map({""No"":0,""Yes"":1})"	1	1
"submit.to_csv(""../working/submit_svc_gamma01.csv"", index=False)"	1	1
Survived.append(rate)	1	1
sub_rfc['Survived'] = pred_all_rfc	1	1
uniq_fsize_2.append('Large')	1	1
data_combined['Fare'] = data_combined['Fare'].astype(int)	1	1
dset['Title'] = dset.Name.str.split(',', expand=True)[1].str.split('.', expand=True)[0]	1	1
titanic_train.loc[titanic_train['Embarked'] == 'Q', 'Embarked'] = 2	1	1
df[['Name', 'Age']][~df['Name'].str.contains(', M')]	1	1
train_person_dummies.drop(['Male'], axis=1, inplace=True)	1	1
"train_df.groupby(""sex"")[""survived""].mean()"	1	1
"dataset.drop(columns=[""Parch"",""SibSp"",""Cabin"",""Name""], axis=1) #dropping the duplicates columns that are extracted"	1	1
data['companions'] = data.apply(lambda x: 1 if ((x.SibSp==0) & (x.Parch==0) & (x.same_tckt==1)) else 0, axis=1)	1	1
"df_test[""Deck""] = df_data[""Deck""][891:]"	1	1
test['Title'] = test.Title.map(Title_Dictionary)	1	1
col.fillna(filler)	1	1
test.drop(['Name', 'Sex'], axis=1)	1	1
full.Name.head()	1	1
"ax1.hist(train['Age'][sel_age_fin][sel_age_female], bins, normed=0, alpha=0.15, label=""female"")"	1	1
X_train['Age'] = X_train['Age'].fillna(X_train['Age'].mean())	1	1
"titanic_test_data.loc[titanic_test_data[""Embarked""]==""Q"",""Embarked""] = 2"	1	1
ax1.hist(df.Fare, bins=20, color='c')	1	1
df_y_adults.groupby('Survived').size() # with .size() we generate a pandas  pandas.core.series.Series Series type variable	1	1
df['Group_Size'] = df['Parch'] + df['SibSp'] + 1	1	1
train_df.ix[i, 'Familytype'] = 'Alone'	1	1
rawdata['FareCategory']=pd.qcut(rawdata['Fare'],6)	1	1
df.ix[df['Age'].isnull(), 'Age'] = df['Age'].mean(skipna = True)	1	1
test['Fare'] = test['Fare'].fillna(Fare_mean)	1	1
df.corr().Age	1	1
"traindf.drop(""Survived"",axis=1)"	1	1
titanic_train_df.Age.loc[titanic_train_df['Title'] == 'Miss'] = titanic_train_df.Age.fillna(titanic_train_df[(titanic_train_df['Title'] == 'Miss')]['Age'].mean())	1	1
dataset['FareBand'] = dataset['FareBand'].cat.codes	1	1
df_combined['Sex'] = df_combined.Sex.map({'male':1,'female':0})	1	1
test['Cabin']=test['Cabin'].transform(lambda c: 0 if isinstance(c, float) else (int(c[1:]) if c[1:].isdigit() else 0))	1	1
"df[""Age""] = df['Age'].fillna(-0.5)"	1	1
full.drop(['Cabin', 'FamilyName', 'Name', 'Ticket', 'Title'], axis=1, inplace=True)	1	1
np.where(test_predict>0.5, 1, 0)	1	1
y_test.pop(0) #Drop the first row which is just a label	1	1
train_data.drop(['Cabin','Cabin_Letter','Cabin_Letter_num', 'Name', 'Ticket'], axis=1)	1	1
Xy_train_df.isnull().sum()[Xy_train_df.isnull().sum()>0]	1	1
families.describe()	1	1
data_val.PassengerId.copy()	1	1
test_df['SmallF'] = test_df['Family'].map(lambda s: 1 if  s == 2  else 0)	1	1
ax[0].set_title('Distribution of target variable')	1	1
train_data.loc[:,('Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare')].values	1	1
dataset.loc[mask, 'GroupId'].value_counts()	1	1
train['Survived'].corr(train['Pclass'])	1	1
df_all['Title'][df_all.Title == 'Mme'] = 'Mrs'	1	1
df['SIBSP_1']=0	1	1
train[['Title', 'Sex']].groupby('Title').count()	1	1
test_data.Age.fillna(value=0)	1	1
combined['class'] = combined['Pclass'].astype(int, copy=False)	1	1
self.weights.append((2*np.random.random((layers[i] + 1, layers[i + 1]))-1)*0.25)	1	1
dataset.drop(['Cabin'], axis = 1)	1	1
"data.loc[train[""Cabin""].isnull(), ""Cabin""] = """""	1	1
train_df.ix[np.isnan(train_df.Age), 'Ageknown'] = 'No'	1	1
"df_data[""Free""] = df_data['Free'].astype(int)"	1	1
"dataset.loc[dataset['Fare'] > 93,""Fare""] = 3"	1	1
"people.to_csv(""people.csv"", index_label = [""ID""])"	1	1
df.loc[df['Age']<1, 'Survived_ind'].value_counts()	1	1
test['Title'][i]== meantitle['Title'][j]:	1	1
"dataset['Title'] = dataset['Title'].replace(['Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer'], 'RareM')"	1	1
combined['Age'] = combined.groupby(['Title','Pclass'])['Age'].transform(lambda x: x.fillna(x.median()))	1	1
data_2.columns.values	1	1
test.loc[test['AgeModified']<=10,'AgeCategorical'] = 0	1	1
"data_train.Embarked.fillna(""S"", inplace = True)"	1	1
df['fare_med']	1	1
df['AgeBin'] = pd.to_numeric(df['AgeBin'])	1	1
"test[""Ticket""] = le.fit_transform(test[""Ticket""].fillna('0'))"	1	1
"titanic_df.loc[titanic_df.Salutation == 'Mrs','Age'] = titanic_df['Age'].fillna(means[""Age""][""Mrs""])"	1	1
data_test_input.loc[data_test['Embarked']=='S','Embarked'] = 1   #male	1	1
"pd.merge(data_full, ticket_table, left_on=""Ticket"",right_index=True,how='left', sort=False)"	1	1
X['Embarked']	1	1
"test.loc[test[""Embarked""]==""Q"",""Embarked""] =2"	1	1
data_train_input.loc[data_train['Embarked']=='Q','Embarked'] = 3  #child	1	1
known_data.iloc[idx].Cabin is np.nan:	1	1
torch.eq(y, pred.round_()).cpu().float().mean().data[0]	1	1
conf_mat[0][1]	1	1
output.Survived.astype(int)	1	1
"train.loc[i,""First Name""] = l[0].strip()"	1	1
train['Embarked'].fillna(train['Embarked'].mode()[0], inplace=True)	1	1
train_df.sort_values(by='Survived').describe(percentiles=[.61, .62, .63])	1	1
in ['Ticket', 'Fare', 'Cabin']:	1	1
test3_df.loc[:,:] = scaled_values	1	1
data['Deck'] = data.Cabin.dropna().apply(lambda row: row[0])	1	1
df_null.sort_values(by='Null_Count',ascending = False)	1	1
X_train['Sex']=le.fit_transform(X_train['Sex'].values)	1	1
test_df['Family'] = test_df['Family'].astype(int)	1	1
train_df['aile']=train_df['Parch']+train_df['SibSp']	1	1
"test_df[""Cabin""] = train_df[""Cabin""].apply(lambda x: 1 if x != 0 else 0)"	1	1
df.sort_values(by='Fare', ascending = False)	1	1
train['Pclass'] = pd.DataFrame(pclass_scaled)	1	1
ticket_numbers['count'][ticket_numbers['Ticket'] == ticket].values[0]	1	1
clean_data['Survived'].corr(df3['Parch'])	1	1
df_FULL.isnull().sum()	1	1
tr['Title'] =tr['Title'].replace('Mr',1)	1	1
X_train.loc[(X_train.Age.isnull()), 'Age']=median_age	1	1
data['FarePP'] = data['Fare']/ data['FamilySize']	1	1
dset.loc[f.index, 'FamSize'] = len(f)	1	1
test['Sex'].isnull().sum()	1	1
test.loc[(test['Age']>19.00)&(test['Age']<=26.00),'NAge']=1	1	1
test.join(df_sex_2)	1	1
data.loc[(data.Age.isnull()) & (data.Initial=='Master'), 'Age'] = 5	1	1
train_age['AgeGroup'][i] = predictions[k]	1	1
"train_df[""Name""] = train_df.Name.str.extract("".((Mrs?)|(Miss)|(Master))."", expand = False)"	1	1
"t_data['Name_pred'] = t_data['Name_pred'].replace(""Mlle"", ""Miss"")"	1	1
train['Title']=train.Name.str.extract('([A-Za-z]+)\.')	1	1
age_data.drop(age_data[['Survived']], axis=1)	1	1
"data[""Deck""]="""""	1	1
data.loc[(data.passenger_fare>25.69) & (data.passenger_fare<=25.929) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>25.69) & (data.passenger_fare<=25.929) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
titanic.groupby(['Survived', 'Age_bin']).size()	1	1
survived['Pct_Survived'] = survived['Survived', 'Survived'] /                                survived['Survived', 'Passengers']	1	1
lgb_params['objective'] = 'binary'	1	1
test['family']= test['SibSp'] + test['Parch'] + 1	1	1
axarr[0].scatter(train['Age'][sel_age_fin], train['Fare'][sel_age_fin])	1	1
"train_data[""Fcat""] = pd.cut(train_data[""Fsize""], bins=[0, 1, 4, 10], labels=[""Singleton"", ""Small"", ""Large""], include_lowest=True)"	1	1
test_df['AgeIsNull'] = pd.isnull(test_df.Age).astype(int)	1	1
pcn_scores.mean()	1	1
test['Sex'].loc[test['Sex'] == 'female'] = 1	1	1
test_data['Age'] = test_data['Age'].interpolate()	1	1
titanic.drop(['Name','Ticket','Cabin','class'], axis=1)	1	1
X.drop(['Sex'], axis=1)	1	1
new_train.drop('Survived', axis=1)	1	1
"df_train[""Embarked""] = df_data[""Embarked""][:891]"	1	1
training_set['Parch'] + training_set['SibSp']	1	1
"test[""Sex""][test[""Sex""]==""female""]=1"	1	1
df_test[['Group_Category','Person_Class','Age_Missing']].values	1	1
"test_df[""FareBin""] = pd.cut(test_df['Fare'],farepercentile, labels=[""Low"",""Mid"",""High""])"	1	1
train_dat.loc[train_dat['Survived'] == 1]['Age'].dropna()	1	1
b_mask.sum() > 0:	1	1
avg_fare_pclass.sort_values(by='Fare', ascending=False)	1	1
pred_table_lr_1_test.is_copy = False	1	1
np.dot(dZ, X_train) / m	1	1
submission_df.to_csv('feature_engineering_rf.csv', index=False)	1	1
train['Cabin_section'] = '0'	1	1
classifiers.append(LGBMClassifier(random_state = 0))	1	1
data_test['Age_imputed']=data_train_imputed.iloc[:,0]	1	1
age.corr()	1	1
error_rate.append((i, 1 - scores.mean()))	1	1
np.median(df_train['Fare'])	1	1
f['Aggression'] = f['Aggression'].astype(float)	1	1
df['survived'] = train.groupby(column).sum()['Survived']	1	1
train['Cabin'].fillna(train['Cabin'].mode(),inplace=True)	1	1
df.drop(['Fare'], axis =1, inplace = True)	1	1
submission.to_csv('LSVC_submission.csv', index = False)	1	1
train_dat.loc[train_dat['Survived'] == 0]['Fare'].dropna()	1	1
M.ndim == 2:	1	1
test['training_set'] = False	1	1
plt.rcParams['figure.figsize'] = (16, 8)	1	1
"tmp_test.loc[(tmp_test[""kmeans_labels""] == j) & (tmp_test[""Age""].isnull()), ""Age""] = tmp_age_test[j]"	1	1
combine_df['Name_Len'] = pd.qcut(combine_df['Name_Len'],5)	1	1
model.add(Dense(units=128))	1	1
train[['Pclass', 'Survived']].groupby('Pclass').mean()	1	1
df.items(): numericalize(df, c, n, max_n_cat)	1	1
accs_ths.append((acc, threshold, count_tp, count_tn, count_tp+count_tn, my_tpr, my_fpr))	1	1
features['feature'] = X.columns	1	1
data_pruned['Fare']=data.Fare.values	1	1
dataset['Cabin_F'] = dataset['Cabin'].map(lambda s: 1 if s == 7 else 0)	1	1
testOrg.head()	1	1
row['Sex'] == 'male' and row['PassengerId'] ==	1	1
train_df['Title'] = train_df['Title'].fillna(0)	1	1
raw_train['Age'].plot(kind='kde')	1	1
df_combined['IsAlone'] = df_combined.apply(lambda x: 1 if ((x['Total_Passengers'] == 1) and (x['Fam_Mem_Onboard'] == 1)) else 0,axis=1)	1	1
"full_dataset[""Embarked""] = full_dataset[""Embarked""].fillna(""S"")"	1	1
df_all['withFamily'] = df_all['Family_size'].apply(lambda x: 1 if x > 0 else 0, 1)	1	1
test_df.replace('male', 1,inplace=True)	1	1
training.dropna( inplace = True)	1	1
test_GP.astype('float')	1	1
model.add(Dense(arr[i],activation='relu',kernel_initializer='normal'))	1	1
data1.dropna(inplace=True)	1	1
survived_data.loc[survived_data['Sex']=='male',:]	1	1
df['Age'] = np.round(df['Age'])	1	1
merged_df.drop(columns=['Name'])	1	1
dataFrmae['Age'].isnull().sum()	1	1
data.drop(labels=[column], axis=strategy)	1	1
my_data.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)	1	1
age.as_matrix()	1	1
combined.drop(['PassengerId', 'Name', 'Ticket', 'Fare', 'Cabin'], axis = 1)	1	1
score.append(LR.score(X_train, y_train))	1	1
predictions.to_csv('gender_submission.csv')	1	1
dataset.loc[dataset.Name.str.contains('Master'), 'Age'].mean()	1	1
train_data['Title'] = train_data['Title'].replace(['Mme','Lady','Ms'], 'Mrs')	1	1
raw_data['Title'] = raw_data.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
titanic.loc[titanic.Sex== 'male',:]	1	1
names.loc[(names['mme'])==1,'mrs'] = 1	1	1
X['Sex'] = labelencoder.fit_transform(X['Sex'])	1	1
"X_train_dataset.drop(""PassengerId"", axis=1)"	1	1
"Mapped_titles.fillna(""Rare"", inplace=True)"	1	1
trainingdata['Related'].loc[trainingdata['Related'] > 0] = 1	1	1
df.drop('Title', axis=1, inplace=True)	1	1
df_test_output.to_csv('model_titanic_procedure.csv', index = False)	1	1
train.drop(['FareBins'], axis = 1)	1	1
row['Age'] > 7:	1	1
train_dataset[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	1	1
full_dataset.Survived.dropna().astype('int')	1	1
train.copy() # Working on cpoy of data set and keeping original data set as safe	1	1
"df[""Fare_cat""] = pd.cut(df[""real_fare""],cut_points,labels=label_names)"	1	1
dataset.loc[dataset['Age'].isnull(), 'Age'] = lin_reg_age.predict(dataset.loc[dataset['Age'].isnull(), X_test_cols])	1	1
"test[""Survived""] = y_pred"	1	1
data['Title'] = data.Title.replace(female)	1	1
train_data['Embarked'].isnull().sum() + test_data['Fare'].isnull().sum()	1	1
"processed_dataframe[""Age""] = dataframe[""NormalizedAge""].copy()"	1	1
minmaxScaler.transform(X)	1	1
df.fare.hist(bins=100, ax=axs[0])	1	1
raw_train.loc[raw_train['Survived']==0, 'Age'].plot(kind='kde', color='red', label='Not Survived', legend=True)	1	1
datadict.rename(columns={0:'DataType'})	1	1
modelSTD.append('NA')	1	1
df_test.drop('Name',axis =1, inplace=True)	1	1
df.ix[most_family]	1	1
test['Cabin_'] = test['Cabin'].notnull().astype('int')	1	1
dataset['Pclass2'] = 0	1	1
"train[""Pclass_3""] = train[""Pclass""] == 3"	1	1
train['data_label'] = 'train'	1	1
data['Cabin']    = data['Cabin'].apply(lambda x: str(x)[0])	1	1
model.melt('Classifier', var_name='Col',  value_name='Score')	1	1
evaluation_temp.append(recall)	1	1
df.loc[df['Fare'] >= 31, 'Fare'] = 3	1	1
test_df.loc[ test_df['Age'] <= 7, 'AgeGroup'] = 0	1	1
"coeff_df.sort_values(by=""Correlation"",ascending=False)"	1	1
age['Age'].mean()	1	1
train.loc[(train['AgeModified']>30) & (train['AgeModified']<=40),'AgeCategorical'] = 3	1	1
row['Sex'] == 'female' and (row['SibSp'] + row['Parch'] > 3) and row['Pclass']== 3:	1	1
data_set[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
train.drop(labels = ['Cabin', 'Ticket','Child'], axis = 1, inplace = True)	1	1
"train_df.groupby([""RGroup""])[""Survived""].agg([""count"",""sum""])"	1	1
dset['Embarked'].fillna(dset['Embarked'].mode()[0], inplace=True)	1	1
"ax[1].set_title(""Change of weights after 1 step"")"	1	1
data_train['Survived'].loc[data_train['Sex']=='male'].value_counts()	1	1
em_count.values,	1	1
training_set.pivot_table('Survived',index='Sex',columns='Pclass').plot(kind='bar')	1	1
"df.Cabin.fillna(""X"")"	1	1
original['Titles'].replace(['Sir', 'Rev', 'Major', 'Lady', 'Jonkheer', 'Dr', 'Don', 'Countess', 'Col', 'Capt'], 'Name')	1	1
df.drop('Age', axis=1, inplace=True)	1	1
test_data.drop(cols, axis=1)	1	1
df_output[['PassengerId','Survived']].to_csv('titanic_submission.csv',index=False)	1	1
df.assign(C=embarked_['Embarked_C'], Q=embarked_['Embarked_Q'], S=embarked_['Embarked_S'])	1	1
train_df.loc[:,'Age':].values.astype('float')	1	1
"AgeTypeTrain.append(""4"")"	1	1
missing_age_train.drop(['Age'], axis=1)	1	1
dataset.loc[(dataset['Fare'] > 10.5)   & (dataset['Fare'] <= 21.679), 'Fare'] = 2	1	1
"dataset.loc[(dataset.Age.isnull()) & (dataset.Title == ""Mr""), ""Age""] = 32"	1	1
test.drop(['Cabin','Ticket'],axis=1)	1	1
ax[1].set_title('Survival Distribution of Male and Female')	1	1
classifiers['acc_std']	1	1
"test.loc[(test[""Age""] > 32)&(test[""Age""] <= 48), ""age_c""] = ""3"""	1	1
"ax2[1].set_title(""Pclass and Age vs Survived"")"	1	1
train_df['Fare_new']=0	1	1
row['Parch'] >= 4 and row['Pclass'] == 3:	1	1
"training.drop([ ""Name"" , ""PassengerId"",""Ticket"",""Cabin""], inplace = True, axis = 1 )"	1	1
"train[[""SibSp"", ""Survived""]].groupby(['SibSp'], as_index=False).agg(['mean', 'count'])"	1	1
train['M_F'] = mfSeries	1	1
test['SmallFamily'] = test['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)	1	1
"test_data.replace([""male"", ""female""], [0,1])"	1	1
"comb[""Title""] = comb.Name.str.extract('^.* ([A-Z][a-z]+)\..*')"	1	1
submission.to_csv('random_forest_y_pred_2_f.csv', index=False)	1	1
data['Ticket'].str.split(' ')	1	1
tit_df['MMM'] = tit_df[['Name']].apply(get_mmm, axis = 1)	1	1
join_data['Title'][join_data['Sex'] == 'female'] = 'Miss'	1	1
combine.loc[(combine['Fare'] > 7.91) & (combine['Fare'] <= 14.454), 'Fare'] = 1	1	1
dataset['Title'] = dataset['Title'].replace('Countess', 'Royalty')	1	1
"train[[""Family_flag"", ""Survived""]].groupby(""Family_flag"",as_index=False).mean()"	1	1
family[ 'Largefamily' ]  = family[ 'FamilySize' ].map( lambda s : 1 if 5 <= s else 0 )	1	1
train_test_data[0].head() # train data	1	1
"X_test.loc[(X_test['Age'].isnull()), ""Age""] = Age_predictions_test"	1	1
movie_hot.drop('Name',axis=1)	1	1
df.iloc[:trn_sz]	1	1
"dataset[""SibSp""][x]==4:"	1	1
"train['Cabin'] = train['Cabin'].fillna(""U0"")"	1	1
train['Fare'].hist() #This was the original graph that helped me understand why a fare of 50 and above would be a good starting place	1	1
percent.head(20)	1	1
"dftrain.loc[idx,""CountTicketButLast_InTrain""]=ticketButLast_count_train[ticketButLast]"	1	1
temp.Age.fillna(-1)	1	1
test_df.loc[master_mask, 'Age'] = test_df.loc[master_mask, 'Age'].fillna(test_df[test_df.Title == 'Master'].Age.mean())	1	1
df_output[['PassengerId','Survived']].to_csv('../data/output.csv',index=False)	1	1
test_df.ix[(test_df.Fare <= 10),'Fare2'] = 1	1	1
sex['female']	1	1
ax[1].set_title('Variation in Validation Data Accuracy w.r.t to Inverse Regularization parameter C for different Solvers')	1	1
test_df.drop(['Ticket', 'Cabin'], axis=1, inplace=True)	1	1
df['Sex_code'] = df.Sex.cat.codes	1	1
test_df_imputed['IsMother'] = [is_mother(row) for row in test_df_imputed.iterrows()]	1	1
"clean_data.drop(""Embarked"",axis=1)"	1	1
test.PassengerId.values,	1	1
rd.info()	1	1
"modelResults.loc[2][""Model""]"	1	1
df['Sex'] = df['Sex'].replace(['male', 'female'], range(2))	1	1
numerical_columns.append('Fare_standard_score_with_Pclass')	1	1
"test.drop([""Name"", ""Ticket"", ""Cabin""], axis=1, inplace=True)"	1	1
"train[""FamilySize""].max()"	1	1
Sex_dummy.head(5)	1	1
Each_Passenger.loc[(Each_Passenger['Parch'] > 3) & (Each_Passenger['Parch'] <= 4 ) | (Each_Passenger['SibSp'] > 3) & (Each_Passenger['SibSp'] <= 4) , 'Parch'] = 4	1	1
dataset['Age3']=0	1	1
df_train.drop(['FareBinCode'], axis=1)	1	1
X.astype('float')	1	1
scores.append( best_svc.score(X_test, y_test) )	1	1
d_test[['Survived']]	1	1
"df[""Alone""] = df[""Alone""].astype(""int"").astype(""category"")"	1	1
"train3[""Survived""]"	1	1
i[2] #First checks for rare titles (Thanks Anisotropic's wonderful Kernel for inspiration//help here!)	1	1
answer_df['Survived'] = predictions	1	1
"inDF[""Born""]= inDF[""Born""].apply(lambda x : ""Other"" if born_dict[x] < 10 else x)"	1	1
MLA_compare.loc[index, 'MLA Train Accuracy'] = round(alg.score(train_X, train_y), 4)	1	1
titanic_df['FareClass'] = titanic_df['FareClass'].apply(int)	1	1
axs[0].set_title('Survival Rate by Embarked Spot')	1	1
train.size # 10 less samples	1	1
test_df.Embarked.fillna(test_df.Embarked.dropna().max(),inplace =True)	1	1
df.loc[((df.Sex == 2) & (df.IsAlone == 0)) , 'Se_IA'] = 3 #Female with family	1	1
"y[""Fare""] = y[""Fare""].fillna(0)"	1	1
perf.append(getMetrics(y_test, y_pred, 'XG Boost'))	1	1
RealPrediction.info()	1	1
"test_df[[""pclass"", ""sex"", ""embarked"", ""family_size_category"", ""age_category"", ""fare_category"", ""title""]]"	1	1
trainNMD.drop(['Survived'], axis=1)	1	1
"dataset[""title""] = dataset_title"	1	1
Train_Y.head(), WholeDataSet.head()	1	1
data_train.drop(['Name','Ticket','Cabin','Embarked'],axis=1)	1	1
test_features_normalized.drop(['Cabin', 'PassengerId', 'Name', 'Ticket', 'SibSp', 'Parch'], axis=1)	1	1
"df_train[""len_name""].mean()"	1	1
test_df['Title']=test_df['Title'].apply(lambda x: x if x in title_num else 'Misc')	1	1
train['Fare'].hist(bins=20,range=(0,100))	1	1
data_test.loc[(data_test.Age.isnull()), 'Age' ] = predictedAges	1	1
"df[""Age""] = df[""Age""].fillna(df[""Age""].mean())"	1	1
train_df.groupby('Survived').Fare.describe()	1	1
"dataset.loc[(dataset.Age.isnull()) & (dataset.Title == ""Other""), ""Age""] = 42"	1	1
data.loc[ data['Fare'] > 54, 'Fare'] = 4	1	1
temp.loc[:,extratrain.columns]	1	1
train_csv[['Pclass', 'Sex', 'Age',  'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']]	1	1
"titanic.drop(""PassengerId"", axis = 1, inplace = True)"	1	1
enriched_test_data.drop(exclude_features[1:],axis=1)	1	1
dataset.iloc[:,1].values	1	1
"test_data['Name_pred'] = test_data['Name_pred'].replace(""Mme"", ""Mrs"")"	1	1
"test[""Title""] = titles2"	1	1
train2['Survived_Label'] = train2['Survived'].map({0:'No',1:'Yes'})	1	1
raw_data.drop(['PassengerId','Name', 'Ticket', 'Cabin', 'Embarked'], axis=1)	1	1
train_set.iloc[:, :-1].values	1	1
test.loc[(test['Pclass'] == 1) & (test['hasCabin1'] == 0), 'class_hascabin'] = 4	1	1
dataset.loc[(dataset['Age']>48)&(dataset['Age']<=56), 'Age'] = 6	1	1
train['Age'][np.isnan(train['Age'])] = rnd.randint(mean-std, mean+std, size= null_count)	1	1
"train.drop(columns= ""Position"")"	1	1
dftrain.drop(['Fare_bin'],axis=1)	1	1
data_df.groupby(['SibSp'])['Survived'].mean()	1	1
"X.select_dtypes(include=[""object""])"	1	1
dataset.loc[(dataset['Fare']>20) & (dataset['Fare']<=30), 'Fare']=2	1	1
missing_age_X_train.head()	1	1
df_train.drop(labels='tmpt_AgeBand',inplace=True,axis=1)	1	1
full.set_value(index, 'Title', 'Rare Title')	1	1
full[['Age']]	1	1
non_missing_data1.iloc[:,[3]].values	1	1
train.apply(lambda x: isKid(x), axis=1)	1	1
titanic_df.isnull().sum(axis=1).max() # find the max	1	1
train.drop('Survived',axis = 1,inplace = True)	1	1
y_train.append(y_test_series)	1	1
dataset[['Survived','Cabin']].copy(deep=True)	1	1
train_f['Survived']	1	1
dfTest.loc[dfTest.Sex=='male','Age']=dfTest.loc[dfTest.Sex=='male','Age'].fillna(avgmaleTest)	1	1
X_train.groupby([variable])[variable].count()/np.float(len(X_train))	1	1
train['Sex'].unique()	1	1
scaler.transform(X_final)	1	1
df_temp.pivot(index='Has_Cabin', columns='Survived', values='Count')	1	1
np.round(tree_predictions)	1	1
dataset.isnull().sum(axis=0).reset_index()	1	1
df['Origin'] = df['Embarked'].dropna().map( {'S':0, 'C':1, 'Q':2} ).astype(int)	1	1
train_data[['Cabin','Survived']].groupby('Cabin', as_index=False).mean()	1	1
test_data_prep['Cabin_Lett'].value_counts()	1	1
train['Title'] = train['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
models['set2']['cat_encode'] = 'LabelEncoder'	1	1
dataset[['Pclass','Sex','Age','SibSp','Parch','Embarked']]	1	1
data['Title'] = data['Title'].replace(['Don', 'Capt', 'Col', 'Major', 'Sir', 'Jonkheer', 'Rev', 'Dr'], 'Honored')	1	1
df_submit['Status'] = df_submit_raw['Name'].str.extract('(\w+)\.', expand=False)	1	1
titanic['Title'].replace(['Mr','Mrs','Miss','Child','Other'],[0,1,2,3,4],inplace=True)	1	1
Title_Dict.update(dict.fromkeys(['Mlle', 'Miss'], 'Miss'))	1	1
my_submission.to_csv('titanic_first_try.csv', index=False)	1	1
"sns.boxplot(x=""Survived"", y=""Fare"", data=train_df,ax=axesbi[1,2])"	1	1
data_full['Titles'].value_counts().keys()	1	1
"df_test[""Fare""] = df_test[""Fare""].map(lambda i: np.log(i) if i > 0 else 0)"	1	1
"df_train['Minor'] = df_train[""Age""].apply(is_minor)"	1	1
test.drop(['Survived'], axis=1)	1	1
"x_train[""SibSp""].plot.hist(alpha=0.5)"	1	1
"data.set_value(i, 'Name', ""Miss"")"	1	1
Merged_data.iloc[:891]	1	1
model.add(Dense(units=6240, input_dim=7))	1	1
combine.Age.fillna(combine.Age.mean())	1	1
data.Age.loc[(data.Age<0) & (data.sons==1) & (data.Personal_Titles=='Mrs')] =    data.Age[(data.Age>=0) & (data.sons==1) & (data.Personal_Titles=='Mrs')].median()	1	1
titanic_df.columns.values	1	1
df['Title'] = df['Title'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dr',                                        'Jonkheer', 'Lady', 'Major', 'Rev', 'Sir', 'Dona'], 'Other')	1	1
df_test['Ticket'].str.strip().str.split(' ', n=1, expand=True)	1	1
"new_df[""Fare_qd""] = df[""Fare""]**4"	1	1
train_df['Fare'] = train_df['Fare']/train_df['FamilySize']	1	1
"test.drop(labels = [""PassengerId""], axis = 1, inplace = True)"	1	1
full_dataset.drop(['FareBand'],axis=1,inplace=True)	1	1
data_replaced_ages.loc[data_replaced_ages['Embarked'].isnull(), 'Embarked'] = 'S'	1	1
train_data['Sex']	1	1
dataset['Title'] = dataset['Title'].replace(['Major','Sir','Capt','Col','Don','Jonkheer','Rev','Master','Lady'], 'Mr')	1	1
RFC_submit_ray.to_csv(index = False)	1	1
"test[""Fare""] = test[""Fare""].fillna(train.groupby([""Pclass""]).mean()[""Fare""][3])"	1	1
train2[['Title', 'Survived']].groupby(['Title'], as_index = False).mean	1	1
m.add(Dense(output_dim=2, activation='softmax'))	1	1
train['FamilyCount']=train.SibSp+train.Parch	1	1
ts.shape[0]	1	1
"test_data[""Survived""] = np.array([int(item['classes']) for item in test_predictions])"	1	1
ohe.transform(test)	1	1
accuracy.append(scores.mean())	1	1
train_df.join(person_dummies_titanic)	1	1
result.to_csv('submission.csv',index=False)	1	1
sub_file.head()	1	1
titanic_train.groupby('age_range')['Survived'].mean()	1	1
test.to_csv('out.csv',columns=['PassengerId','Survived'],index=False)	1	1
ship.drop(['Name'],axis=1,inplace=True)	1	1
"tmp[""FamilySize""] = 1 + tmp[""SibSp""] + tmp[""Parch""]"	1	1
df['Title'].replace({'Mr':0,'Ms':1,'Master':2},inplace=True)	1	1
dft.rename(columns={'cabin':'Cabin'},inplace=True)	1	1
"train.loc[train[""Age""].isnull(),""Age""]"	1	1
df_titanic_test_mod['Embarked'].replace('Q',3,inplace=True)	1	1
train.reset_index(inplace = True)	1	1
"testData[""Survived""] = dtree.predict(testData[testFeatures].fillna(0).as_matrix())"	1	1
"train[""Cabin_type""].head()"	1	1
"test[""Family_size""] = test[""Parch""] + test[""SibSp""]"	1	1
test[['Name', 'Pclass','Sex','Age','Parch','SibSp','Embarked', 'Fare', 'Cabin']].copy()	1	1
train_data['Cabin'] = train_data['Cabin'].apply(lambda x: replacement.get(x))	1	1
data.parent_alone.loc[data.PassengerId==540] = 0	1	1
frame.loc[(frame.Fare > 31) , 'Fare'] = 3	1	1
test_d.describe()	1	1
train.loc[(train['Fare'] > 31) & (train['Fare'] <= 99), 'Fare']   = 3	1	1
data.select_dtypes(include = ['object']).dtypes.index	1	1
dataset.Age.isnull().sum()	1	1
"data_train['Embarked'].fillna(""S"", inplace = True)"	1	1
df_Test.Cabin.describe()	1	1
data.loc[data['Fare']<8,'Fare']=0	1	1
x.T.dot(error)	1	1
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data=train_dataset)"	1	1
train_norm.as_matrix([0,1,2,3,4,5,6])	1	1
_df.loc[_df.name_last == n , :]	1	1
train_data.iloc[:,[1,2,3,4,5,6,7,8,9,10,11,12,13]].values	1	1
test_data['Age'].fillna(test_data['Age'].median(), inplace=True)	1	1
train_data.drop(['Ticket'],axis = 1)	1	1
dftest.dtypes	1	1
test_df.drop(['PersonClass'], axis=1, inplace=True)	1	1
X.median()	1	1
list_features_ind.append(max_ind)	1	1
"sns.boxplot(data=jsd, ax=ax, orient=""h"", linewidth=1, saturation=5, palette=palette4)"	1	1
t_num_log10.isnull()	1	1
train.loc[(train['Fare']>450) & (train['Fare']<=500),'FareCategorical'] = 9	1	1
df_full['GroupSurvived'] = df_full['Group'].apply(group_survived)	1	1
dataset['Embarked'] = dataset['Embarked'].fillna(dataset['Embarked'].value_counts().index[0])	1	1
testing_data['Survived'] # it is generated as nan by the first concat (while gathering the data )	1	1
df_raw.isnull().sum().sort_values(ascending=False)/len(df_raw)	1	1
train_df['cabin_blocks'] = [cabin[0] if cabin is not np.NaN else cabin for cabin in train_df.Cabin]	1	1
x_train['SibSp'] + x_train['Parch'] + 1	1	1
train.loc[train['Cabin'].str.len() <= 4.0, 'CabinL'] = train['Cabin'].astype(str).str[0]	1	1
train['FareBand'].astype(int)	1	1
X.drop(['Fare'], axis=1, inplace=True)	1	1
X_data.sample(frac=0.8, random_state=100)	1	1
all_df['Pclass']=all_df['Pclass'].astype(str)	1	1
all_data.loc[(all_data.Fare.isnull()), 'Fare' ] = 0	1	1
pd.DataFrame.from_records(accs_ths, columns=col_names)	1	1
tr['Sex'].unique()	1	1
data['Deck']=data['Deck']*0.025 + 0.025	1	1
test['title'] = test['Name'].apply(get_title)	1	1
train.drop(['Name','Ticket'],axis = 1)	1	1
"test[""Child""] = [""Child"" if int(x) < 18 else ""Adult"" for x in test[""Age""]]"	1	1
data_test.loc[data_test['Cabin'].notnull(),'Cabin'] = 'Yes'	1	1
"test_df.drop([""Name"", ""Ticket"", ""Sex"", ""SibSp"", ""Parch"", ""Cabin"", ""Embarked"", ""PassengerId""], axis=1)"	1	1
"cvs[""Score_mean""]=score.mean()"	1	1
"train_df.loc[train_df[""Age""].isnull()].groupby([""Fare""])[""Fare""].agg([""count""])"	1	1
DataSetTrain['Fare'].max()	1	1
train.Social_name.replace({a:index},inplace=True)	1	1
train.Age.fillna(round(train.Age.mean()), inplace=True)	1	1
df_train['Parch_0_1_2_3over'] = [i if i <= 2 else 3 for i in df_train['Parch']]	1	1
original_train_data['Parch'].hist(ax=axarr[2][0])	1	1
combine_df['IsChild'] = np.where(combine_df['Age']<=12,1,0)	1	1
df['Title'] = df['Title'].replace(['Mme.'], 'Mrs.')	1	1
"test_df.loc[test_df[""Title""] == ""Don"", ""Title""] = 'Rare Title'"	1	1
data.loc[:,'Pclass':'alone']	1	1
Y_prediction.T * 1	1	1
titanic_test_data.loc[titanic_test_data.Sex != 'male', 'Sex'] = 0	1	1
"tmp_train[""Ticket""].apply(lambda x: len(x.split())) == 1"	1	1
"bp[""max_depth""],"	1	1
scores.append((i, s, f))	1	1
df['Embarked'] = np.where(df['Embarked']== 'C', 0 ,df['Embarked']  )	1	1
whole['High'] = (whole.Title.str.contains(r'Don\.|Jonkheer\.|Sir\.|Countess\.|Dona\.')).astype(int)	1	1
df_FULL['Deck'] = df_FULL['Cabin'].astype(str).str[0].where(~crit, other='X')	1	1
X.loc[y.notnull()]	1	1
np.round(y_test, decimals = 0)	1	1
hist['acc']	1	1
LogReg_submission.to_csv('LogReg_submission.csv', index=False)	1	1
"datacv.set_value(i, 'Name', ""Col"")"	1	1
test_df.drop(['Cabin'],axis=1,inplace=True)	1	1
test_df.drop(['Pclass', 'SibSp'], axis = 1)	1	1
self.weights.append((2*np.random.random((layers[i - 1] + 1, layers[i] + 1))-1)*0.25)	1	1
dataset3.iloc[:,0]	1	1
titanic_df['Parch'].isnull().sum()	1	1
linear_result.to_csv('Titanic_Linear.csv', index=False)	1	1
titanic_train['Embarked_C']=(titanic_train['Embarked']=='C').astype(int)	1	1
cabin_result.append(df, ignore_index=True)	1	1
df['FamilySize'] = df.apply(lambda row: family_size(row['SibSp'], row['Parch']), axis=1)	1	1
df['Pclass_3'][df['Pclass_3'] == 1].count()	1	1
train.drop('Survived',axis= 1)	1	1
raw.survived.sum() / raw.survived.count()	1	1
df_test[['PassengerId', 'Survived']].to_csv('women_survive.csv', index=False)	1	1
data['Pclass_3'] = data.Pclass_3.apply(lambda x: int(x))	1	1
sub_xgb.to_csv('xgb.csv',index=False)	1	1
df['Southampton'].sum()/df['PassengerId'].count()	1	1
ticket[0].strip()	1	1
trainData.drop('Cabin',axis = 1)	1	1
dataset.loc[(dataset['Age'] > 25) & (dataset['Age'] <= 40), 'Age']   = 3	1	1
dataset_train['Family'] = family	1	1
sur_by_fare['Fare_Grp']=tmp[1].categories[sur_by_fare.index]	1	1
X_train.shape,y_train.shape,X_test.shape,y_test.shape	1	1
"related_people.loc[(related_people[""SibSp""]>0)|(related_people[""Parch""]>0)].groupby([""Last_Name"",""total_related""])[""PassengerId""].agg([""count""])"	1	1
x_train['Sex'] = x_train['Sex'].fillna(x_train['Sex'].mode())	1	1
test['Fare'].fillna((test['Fare'].median()), inplace=True)	1	1
row['Age'] <=17:	1	1
df[['Cabin_number', 'Survived']].groupby('Cabin_number').count().merge(df[['Cabin_number', 'Survived']].groupby('Cabin_number').mean(), right_index = True, left_index = True)	1	1
train.loc[train['Sex']=='male'].drop(male_children.index).sort_values(by='Age')[:5]	1	1
df.drop(columns=c, inplace=True)	1	1
train.pivot_table('PassengerId','Embarked', aggfunc='count').plot(kind='bar')	1	1
data_train.loc[data_train['Survived']==1,'Parch'].value_counts()	1	1
"sex[""Pclass""] = np.nan"	1	1
no_nulls.head()	1	1
"combine[0].drop(""kmeans_labels"", axis = 1)"	1	1
train_df.groupby('SX')['Title_num'].value_counts().reset_index(name='count')	1	1
test_df.drop('Name', 1)	1	1
base_predictions_test.head()	1	1
test_df['Fc'] =     test_df[['C','Male']].apply( get_malec, axis=1 )	1	1
data_test['Title']=data_test['Name'].str.split(', ',expand=True)[1].str.split('.',expand=True)[0]	1	1
merged['Age_band']=0	1	1
"mice_submit.to_csv(""mice.csv"", index=False)  # Kaggle: 0.75120"	1	1
all_data['Title']=all_data['Name'].apply(lambda name:re.search(r'(?<=,).*?(?=\.)',name).group(0))	1	1
importances[['Features', 'Importance']]	1	1
titanic_test['Title']=titanic_test.Title.replace(to_replace=['Ms','Mme'],value='Miss')	1	1
data.Cabin_Letter_C.astype('category')	1	1
d['Embarked']=lbl.fit_transform(d['Embarked'])	1	1
dataset.groupby('AgeBand')['Survived'].mean()	1	1
train.drop(['PassengerId','Name','Ticket','Cabin'], axis=1,inplace=True)	1	1
train_df[['SibSp','Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
Train_Master.loc[(Train_Master['Age'] > 24) & (Train_Master['Age'] <= 36), 'Age'] = 1	1	1
Survived.to_csv('test.csv')	1	1
df_lre.to_csv('SubmissionLRE.csv', header=True)	1	1
dataset['noCabin'] = np.where(dataset['Cabin'].isnull(),1,0)	1	1
titanic_df.loc[titanic_df['Age'].idxmin()]	1	1
dft.iloc[:-1,:].iplot(kind='bar',title='Pclass: Survived Vs Dead')	1	1
train_raw.loc[train_index]	1	1
data_df['Family_Size'] = data_df['Parch'] + data_df['SibSp'] + 1	1	1
df.groupby('Salutation').PassengerId.count()	1	1
test['Fare']=test['Fare'].fillna(fare_mean)	1	1
pd.pivot_table(df_data,values = ['Fare'], index = ['Pclass'], columns= ['Survived'] ,aggfunc = 'median' ).round(3)	1	1
df.loc[((df.IsKid == 0) & (df.Pclass == 1)) , 'IK_Cl'] = 1 #rich adult	1	1
submission['Survived'] = my_prediction	1	1
test['Cabin'] # it's unnecessary anymore	1	1
model_data.loc[(model_data.Pclass == 1)&(model_data.Title == 0)&model_data.Age.isnull(),('Age')] = 7	1	1
"test[""Survived""] = y_test_xgb.astype(np.int)"	1	1
data.loc[:,'Survived']	1	1
tdf['fare_log'] = np.log(tdf.fare.fillna(tdf.fare.median())+0.1)	1	1
dataset['Fare'] = dataset['Fare'] #astype(int)	1	1
temp.append(df, ignore_index = True)	1	1
df_train.groupby('embarked').size()	1	1
train_d['Embarked']=le1_tr.fit_transform(train_d['Embarked'])	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Rev', 'Rare')	1	1
scores['valid_' + clf_name] = []	1	1
X_train['Name_title']= X_train['Name'].apply(lambda x: x.split(',')[1])	1	1
df.Alone.astype('int64')	1	1
pred.mean(axis=1)	1	1
X_train1['Pclass1'] = a2.transform(X_train1.loc[:,'Pclass'])	1	1
class_data.sum()	1	1
"test_p['Age_new'][test_p[""Age""]<16] = 0"	1	1
data2.loc[(data2['Sex'] == 'female'), 'Tree_Predict'] = 1	1	1
dataset.Ticket.apply(str_freq)	1	1
df_modelo.drop(colunas_to_drop, axis = 1, inplace = True)	1	1
"full[""Fare""] = full[""Fare""].map(lambda i: np.log(i) if i > 0 else 0)"	1	1
train['Male'] = pd.get_dummies(train['Sex'], drop_first=True)	1	1
train.Embarked.fillna(train.Embarked.mode()[0], inplace=True)	1	1
titanic.loc[train.index].Survived.hist(by=titanic.has_Family.map({0:'Without Family',1:'With Family'}),layout=(2,1),sharex=True)	1	1
df['Title'] = df['Title'].fillna('NoTitle')	1	1
tempdf['std'] = np.std(np.array([tempdf[col] for col in pred_cols]),axis=0)	1	1
test.Age.fillna(np.mean(test.Age), inplace = True)	1	1
"df['Name'] = df['Name'].str.replace('\""','').str.strip()"	1	1
train.describe(include=['O']) #for categorical data	1	1
"data_train[""Parch""].describe()"	1	1
train_data.Fare.fillna(guess_Fare , inplace=True)	1	1
combined_data.isnull().mean()	1	1
df.groupby(pd.cut(df['Age'], bins))['Survived'].agg(['sum', 'count']).reset_index()	1	1
data[['Pclass','Sex','Age','Fare','SibSp','Cabin']]	1	1
data.drop(['Name', 'Ticket'], axis = 1, inplace=True)	1	1
data['Title'] =  data.Name.str.extract(' ([A-Za-z]+)\.',expand=False)	1	1
train_dataset['Title'] = train_dataset.Name.str.extract('([A-Za-z]+)\.')	1	1
"in [""Master""]: # Sacrifice"	1	1
"train_data[""Title""].value_counts()"	1	1
submission.to_csv('prediction_dt.csv', index=False)	1	1
dataset['Pclass'][i]== 3:	1	1
titanic_test_data.loc[titanic_test_data.Cabin.str[0] == 'D', 'Cabin'] = 4	1	1
data_train.drop(['passengerid', 'survived'], axis=1, errors='ignore')	1	1
"processed_data[""Fare""]"	1	1
final_data_set.iloc[:,2:]	1	1
data_copy.loc[data_copy.Sex=='male', 'Sex']=1	1	1
"results.to_csv(""gbdt_csv_to_submit.csv"",index=False)"	1	1
traindf.Embarked.dropna().mode()[0]	1	1
all_data['Cabin_type'] = all_data['Cabin'].apply(get_cabin_type)	1	1
df_test.drop(['Ticket'],axis=1)	1	1
classifiers.append(AdaBoostClassifier(random_state=seed))	1	1
train_data['child'] = 0	1	1
x_test['Embarked_S'] = test_df['Embarked'].apply(lambda x: 1 if x == 'S' else 0)	1	1
clf.add(Dropout(0.2))	1	1
test.loc[test['Embarked']=='Q','Embarked'] =3	1	1
train_data.loc[(train_data['Fare'])<= 8.662, 'Fare'] = 0	1	1
axes[0].set(xlabel='# of Siblings/Spouses', ylabel='')	1	1
train.Embarked.fillna(value='S', inplace=True)	1	1
test_df.loc[(test_df['Age'].isnull())&(test_df['Title']=='Royal'),'Age'] = 43	1	1
all_data['Fare'] = all_data['Fare'].fillna(train['Fare'].median())	1	1
"Titanic[""Fsize""] = Titanic['SibSp']+Titanic['Parch']+1"	1	1
"train.drop(columns = ""embarked"")"	1	1
data_test_dummy2['Family_scaled'] = std_scaler.fit_transform(reshape_Family, std_scaler_Family)	1	1
titanic_df.drop(['PassengerId','Name','Ticket','Embarked','Cabin','SibSp','Parch'],axis = 1)	1	1
df_train.fillna(1, inplace=True)	1	1
train['Salutations'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona', ''], 'Rare')	1	1
X_valid['age'] = X_valid.age.apply(lambda x: (x - age_mean) / age_std if x > 0 else x)	1	1
"data_train.drop([""PassengerId"", ""Name"", ""Cabin"", ""Ticket""], axis = 1, inplace = True)"	1	1
titanic_df['Title'] = titanic_df['Title'].replace('Mlle', 'Miss').replace('Ms', 'Miss').replace('Mme', 'Mrs').replace(['Dr', 'Major', 'Col', 'Rev', 'Lady', 'Jonkheer', 'Don', 'Sir', 'Dona', 'Capt', 'the Countess'], 'Special')	1	1
X_test.iloc[:,ranking[:10]]	1	1
PassengerId.nunique()[0]	1	1
train_df.Fare.plot.hist(bins = 10 , ax = ax[1])	1	1
train.loc[(train['Pclass'] == 2) & (train['hasAge'] == 0), 'class_hasage'] = 4 #no age Pclass 2	1	1
train_df.groupby(['title']).size().sort_values(ascending=False).index	1	1
"test[""Age""] = test[""Age""].fillna(random.randint(0,80))"	1	1
df_features['Age'] = df_features.groupby(['Sex','Name'])['Age'].apply(lambda x: x.fillna(x.median()))	1	1
df.loc[df.Sex == 'male',:]	1	1
men2_analysis['HasCabin'] = men2_analysis['Cabin'].notnull()	1	1
test['Age'] = imp.transform(test['Age'].values.reshape(-1, 1))	1	1
"dataset_train[""Survived""].groupby(dataset_train[""Pclass""]).mean()"	1	1
test_data.groupby(['Pclass', 'Survived']).size()	1	1
trainingdata['Age'].dropna().astype(int)	1	1
df['Survived'][df['Sex'] == 'female'][df['Age'] < 18][df['Pclass'] == 1].value_counts()	1	1
"X_data_bin.drop([""Pclass"", ""SibSp"", ""Parch"", ""Age"", ""Fare""], axis=1, inplace=True)"	1	1
trainEmbarkedPercentage['embarkedPercentage'] = (trainEmbarkedPercentage['Survived'] / totalTrainData)*100	1	1
x_test['Embarked'] = x_test['Embarked'].fillna('S')	1	1
"people[""survived""]=train_df.loc[train_df[""Survived""]==1].groupby([""Cabin_prefix""])[""Cabin_prefix""].agg([""count""]).reset_index()[""count""]"	1	1
test_df['Sex'].value_counts().plot(kind='barh', ax=ax2)	1	1
"testing.drop(labels= [""Cabin"", ""Ticket""], axis = 1, inplace  = True)"	1	1
"sns.boxplot(x=""Survived"",y=""Age"",data=titanic)"	1	1
Xmat.drop(['Fare', 'Age'], axis=1)	1	1
"train_data[""SmallFamily""] = ((train_data[""Family""] > 0) & (train_data[""Family""] < 4)).astype(int)"	1	1
dft['cabin']=dft['Cabin'].apply(con)	1	1
df.Age.hist()	1	1
titanic_data['FamilySizeGroup'] = titanic_data['FamilySizeGroup'].map(family_mapping)	1	1
df_train.loc[:,cols]	1	1
np.where(X_train[variable].isin(frequent_cat), X_train[variable], 'Rare')	1	1
df_corr.drop(labels=['PassengerId', 'IsTrain'], axis=0, inplace=True) # Drop from rows	1	1
trainSet['Survived'][trainSet.Pclass == 3].value_counts()	1	1
pred_df['Survived'] = y_pred	1	1
titanic_df.drop(['Name','Ticket','Cabin','Embarked'],axis=1)	1	1
dataset.loc[dataset['Age'] < 17, 'Age'] = 0	1	1
names.loc[(names['capt'])==1,'capt'] = 0	1	1
"df.loc[pid,""Title""] = m.group(2).strip()"	1	1
trainSet['Survived'][trainSet['Embarked'] == 'S'].value_counts()	1	1
attr.drop(['Name','Cabin','Ticket'],axis=1)	1	1
df_train['Ticket'].value_counts()	1	1
data['Title_Code'] = title_label.fit_transform(data.Title)	1	1
correlations.index[1:6]	1	1
train1.drop('Survived', axis=1)	1	1
SibSp.append(sib)	1	1
train['Fare'][train['Survived'] == 0]	1	1
total['Title'] = total['Name'].str.extract('([A-Za-z]+)\.', expand=True)	1	1
pd.isnull(df)	1	1
final_train[['Survived']].values	1	1
full_data['Cabin']=a.str.upper()	1	1
imputer.transform(df[cols])	1	1
whole.set_value(665,'Fid',137) #display(whole[whole.Name.str.contains(r'Hirvonen|Lindqvist')])	1	1
df3.isnull().any()	1	1
"np.append(headings,[""C"",'Q','S',""female"",'male'])"	1	1
cat_pipe.append(('selector', DataFrameSelector(cat_attrs)))	1	1
training_data.Name.nunique()	1	1
test_df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'SibSp', 'Parch', 'Survived'], axis=1)	1	1
submission.to_csv('titanic_16.csv', index=False)	1	1
classfy_mean.append(cv_result.mean())	1	1
df[['Title','Survived']].groupby(['Title']).agg(['mean','sum']).reset_index()	1	1
train_df.groupby('Age')['PassengerId'].count()	1	1
"test_df[""Fare""].fillna(14.45, inplace=True)"	1	1
train.drop(['Ticket','Cabin'],axis = 1);	1	1
ship['Person'] = ship[['Age','Sex']].apply(get_person, axis=1) # The apply function will run the get_person function to the 'Age' and 'Sex' columns	1	1
"ts.loc[:, ""Survived""] = 0"	1	1
test['NameTitle'] = test['Name'].apply(extract_title)	1	1
ticket.duplicated(False)	1	1
np.where(test[variable].isin(frequent_cat), test[variable], 'Rare')	1	1
"train_final[""Survived""]"	1	1
"dataset[""Title""] = dataset[""Title""].fillna(0);"	1	1
pivot_ratio.iloc[:, 1]	1	1
results.loc['Logistic Regression', 'Validation'] = LR_preds	1	1
data.distinction_in_tikect_PC.astype('category')	1	1
dataset['Embarked'].fillna('S', inplace=True)	1	1
"models.append((""LinearDiscriminantAnalysis"", LinearDiscriminantAnalysis))"	1	1
dataset['Age_bin'] = pd.cut(dataset['Age'], bins=[0,12,20,60,120], labels=['Children','Teenager','Adult','Elder'])	1	1
feature_dataframe['mean']=feature_dataframe.mean(axis=1)	1	1
bar1.select(dict(type = bkm.HoverTool))	1	1
test_df['Person']=test_df[['Age','Sex']].apply(get_person,axis=1)	1	1
new_test.drop('Pclass',axis = 1)	1	1
titanic_train_dataset_for_training_step.info()	1	1
predictions['Survived'] = y_pred_SVC	1	1
"full_data[""Child""][full_data[""Age""] < 14] = 1"	1	1
sns.boxplot(y='Age', x='Sex', ax=ax2, data=test_df, linewidth=1, saturation=5, palette=palette2)	1	1
raw_test['Title'] = raw_test['Title'].map(title_mapping)	1	1
"df[""CabinFloorScore""].loc[df['CabinFloor'] == ""B""] = 5"	1	1
test['Sex'].apply(lambda x : 1 if x == 'male' else 0)	1	1
"ax[0].set_title(""Number Of Passengers By Family Group"")"	1	1
cabin['Survived'] = combined_df.Survived	1	1
plt.hist(data.Pclass[data.Survived == 1], color = 'r', alpha = 0.4, label = 'after')	1	1
d['Fare'][np.isnan(d['Fare'])] = d['Fare'].fillna(d['Fare'].median())	1	1
df['Survived'] = df['Survived'].replace([0, 1], ['no', 'yes'])	1	1
pdf['mode'] = pdf.apply(lambda row: d[(row['Sex'], row['Pclass'])], axis=1)	1	1
df.drop(labels='Ticket', axis=1, inplace=True)	1	1
x_train['Missed_Age'] = x_train['Age'].map(lambda x: 1 if pd.isnull(x)  else 0)	1	1
"test[""Family""].loc[test[""Family""]>0]=1       #With Family"	1	1
guess_df_all['age'].dropna()	1	1
ens_test['Survived'].sort_index()	1	1
full_data['Fare'] = full_data['Fare'].fillna(full_data['Fare'].median())	1	1
df['SmallFamily'] = df['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)	1	1
df_titanic['Age'].iloc[age] = new_age if not np.isnan(new_age) else df_titanic['Age'].median()	1	1
df_test['Fare'].mean()	1	1
df['Age_range']=pd.factorize(pd.qcut(df.Age,4),sort=True)[0]	1	1
combined_df['Fare_Bins'] = pd.qcut(combined_df['Fare'], bins_count, labels=list(range(1,bins_count + 1)))	1	1
"classes[""Percentage""] = round(classes[""PassengerId""].div(num_passengers)*100,2)"	1	1
all_data.loc[ all_data['Age'] > 64, 'Age']	1	1
df_t.Fare.fillna(np.mean(df_t.Fare))	1	1
titanic_test['Embarked'] = titanic_test['Embarked'].map({'C': 3,'Q':2, 'S': 1}).astype(int)	1	1
titanic_train.loc[titanic_train['Sex'] == 'female', 'Sex'] = 1	1	1
raw_data['FareRange'] = pd.cut(raw_data.Fare, bins=np.arange(start=0, stop=600, step=50), precision=0, include_lowest=True)	1	1
all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)	1	1
model_results.append(gbcRed_results)	1	1
"train[""Family""].loc[train[""Family""]>0]=1       #1 indicates --- travelling With Family"	1	1
y_pred_orig.sum()	1	1
test_df.drop(mycols, axis = 1)	1	1
ml_model.reset_index(drop=True,inplace = True)	1	1
dataset['Age']=dataset[['Pclass','Sex','Age','Title']].apply(fill_age,axis=1)	1	1
train.drop(['AgeBin'], axis=1)# Investigate the survival probability after grouping the age into N categories (Here I use N=8)	1	1
df.drop(columns=['Embarked'], axis=1)	1	1
row['Sex'] == 'female' and row['Pclass'] == 3 and (row['Parch'] <= 1 or row['SibSp'] <= 1) and row['Fare'] > 20 and row['Fare'] < 100:	1	1
dataset['Title'] = dataset['Title'].replace(['Lady.', 'Master.', 'Countess.', 'Sir.'], 'Royal.') # Mrs. is 4	1	1
"df_test[""norm_len_name""].hist()"	1	1
train['Cabin']=train['Cabin'].fillna(0)	1	1
test_data['Age'] = imputer.fit_transform(test_data.iloc[:,3].values.reshape(-1,1))	1	1
frame.loc[frame.Sex=='male','Sex']=0	1	1
all_df['Title'].unique().tolist()	1	1
train[['FamilySize','Survived']].groupby(['FamilySize']).mean().sort_values(by='Survived', ascending=False)	1	1
group_counts_test['Est_Num_Errors'] = group_counts_test.apply(lambda x:count_potential_errors(x,group_counts),axis=1)	1	1
data.columns.values.tolist():	1	1
df.loc[0, :]	1	1
test_df['Embarked'] = test_df['Embarked'].map(embarked_mapping)	1	1
df.to_csv('submission.csv', header=True, index = False)	1	1
df['Cabin_num1'].replace('an', np.NaN, inplace = True)	1	1
all_feature_importance_df.loc[all_feature_importance_df.feature.isin(cols)]	1	1
testdata.ix[(testdata.Age >= 18) & (testdata.Age < 25), 'AgeCategory'] = 2	1	1
network.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))	1	1
fdf.head()	1	1
"data[""Desk""].unique()"	1	1
oldmisstemp['Age'].median()	1	1
confused_mat.sum()	1	1
sns.boxplot(x='Pclass',y='Age',data=train,ax=ax[0])	1	1
dft['Cabin']	1	1
x.set_value(row.Index,'MP_Died',len(m[m.Survived==0]))	1	1
survived_age_number.drop([0.42,0.67,0.83,0.92],inplace = True)#delete these values from tail of serie	1	1
t.iloc[0,:]	1	1
survival_rates.append(survival_rate if (survival_rate != 0.0 or survival_rate != 1.0) else 0.5)	1	1
df[['Pclass','Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
train_df.drop(['SibSp','Parch'], 1, inplace=True)	1	1
df['title']         = df['title'].astype(title_cat)	1	1
train_data[['Survived','Sex']]	1	1
test_X.drop(columns='PassengerId')	1	1
test.fillna(0, inplace=True)	1	1
train_df.drop(['Parch', 'SibSp' ], axis=1)	1	1
comb_data['Fare'] = boxcox1p(comb_data['Fare'], lam)	1	1
"titanic.loc[titanic[""Deck""] == 'T',:]"	1	1
"dataset[""IsAlone""] = np.where(dataset[""Family""] > 0, 0,1)"	1	1
titanic_proj.shape	1	1
df_final['Sex'] = df_final['Sex'].replace('male', 1)	1	1
"df[""TicketGroupSize""] = df[""Ticket""].apply( lambda x: ticket_dict[x])"	1	1
fscore.append(metrics.f1_score(y_val, prediction))	1	1
train_csv['Embarked'] = train_csv['Embarked'].fillna('0')	1	1
A.fillna(self.fill)	1	1
age_df.loc[ (df.Age.isnull()) ]# Age 欠損値	1	1
data.sample(10)     # take a random sample of 10 observations	1	1
Test_Master.loc[(Test_Master['Fare'] > 12.2) & (Test_Master['Fare'] <= 24), 'Fare'] = 3	1	1
age_mean.rename(columns={'Age_Categorized_Mean': 'Age_Categorized'})	1	1
"tp.loc[tp[""Title""]==""Dr"",""Title_c""] = 4"	1	1
test.loc[test['Sex']=='female','Sex']=1	1	1
"train.loc[train[""Age""] >= 13, ""Child""] = 0"	1	1
test_df.Fare.fillna(test_df.Fare.mean())	1	1
train_df[['Sex', 'Survived']].groupby(['Sex']).mean()	1	1
cnt.sum(axis=0) > (cnt.shape[0] * pct)	1	1
test_label.drop(labels=['AgeBin', 'FamilySize', 'FareBin'], axis=1, inplace=True)	1	1
train_set[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean()	1	1
"combine[""hasSibs""] = combine[""SibSp""].apply(lambda x : (x>0)*1)"	1	1
full['CabinType2'] = pred	1	1
df['Title'] = df['Title'].apply(lambda x: 'Man' if x == 'Mr' else x)	1	1
"dataset[""FamilySize""] = dataset[""SibSp""] + dataset['Parch'] +1"	1	1
holdout.shape	1	1
"train.groupby(""Title"")[""Age""].count()"	1	1
test.drop(['Survived'], axis=1, inplace=True)	1	1
"train_ori.loc[(train_ori[""Age""] == 2.0) & (train_ori[""Sex""] == 'female') & (train_ori[""FamilySize""] == 1) & (train_ori[""Pclass""] == 1)& (train_ori[""CabinAssigned""] == 1) & (train_ori[""Fare""] >= 75) & (train_ori[""Fare""] <= 85)]"	1	1
train_df.drop(['SibSp', 'Parch'], axis=1)	1	1
ticket_list.append(ticket_id)	1	1
"train[[""Sex"",""Survived""]].groupby(""Sex"",as_index=False).mean()"	1	1
age_mean.items():	1	1
"test_df['Has_Cabin'] = test_df[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
models['set2']['cat_encode'] = 'OneHot'	1	1
"data['Sex'] = data['Sex'].replace([""female"", ""male""], [0, 1])"	1	1
testds['Ticket']=le.fit_transform(testds['Ticket'])	1	1
curr_row[0]	1	1
train['Title'] = train['Title'].apply(lambda x: 'Misc' if title_names_train.loc[x] == True else x)	1	1
"axes[0].set_title(""Survival Rate Based \n on Siblings/Spouses Number aboard"")"	1	1
train_df.drop(['Name','Title'],axis=1,inplace=True)	1	1
titanic_df['Survived'].groupby(titanic_df['Sex']).mean() *100	1	1
full_bins['EmbarkedBin_Code'] = label.fit_transform(full_bins.Embarked)	1	1
scaler.transform(df_train_ml.drop(['Survived'],axis=1))	1	1
scores_mlp.std(),	1	1
"ax[0].set_title(""Pclass and Age vs Survived"")"	1	1
data['Title2'] = data['Title2'].astype('category').cat.codes	1	1
np.sum(labels.data.numpy() == y_val)	1	1
"ALL_DATA[""Sex""].unique()"	1	1
titanic_test_data.loc[titanic_test_data.Embarked == 'Q', 'Embarked'] = 2	1	1
"data.drop([""PassengerId"", ""Name"", ""LastName"", ""SibSp"", ""Parch"", ""Ticket""], axis=1, inplace=True)"	1	1
model.add(Dense(32, kernel_initializer='normal', activation='relu'))	1	1
data.Embarked_S.astype('category')	1	1
df_train.join(dummies, how='outer')	1	1
model_scores['Stacking'] = cross_val_score(clf, X, y, cv=cross_vals)	1	1
"df.drop([""Name"", ""Ticket"",""Cabin""], axis=1)"	1	1
"data[""Sex""] = data[""Sex""].apply(lambda x: 1 if x == ""male"" else 0)"	1	1
test_df_imputed['FamilySizeCategory'] = test_df_imputed['FamilySize'].map(size_categorize)	1	1
curated_data.loc[(train['Age'] > 16) & (train['Age'] <= 25), 'Age'] = 1,	1	1
"plt.hist([train[train[""Survived""]==0][""Fare""], train[train[""Survived""]==1][""Fare""]], stacked=True, bins=20, label=['Dead', 'Survived'])"	1	1
K.items():	1	1
data_train['Embarked'] = data_train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
train.drop('Survived', 1)	1	1
all_data['Title'] = all_data['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())	1	1
df['Pclass'].values.copy()	1	1
"df[""Fare""]=df[""Fare""].fillna(df[""Fare""].mean())"	1	1
df['Embarked']= df.Embarked.astype('category')	1	1
"train.groupby(['Title'])[""Age""].mean()"	1	1
df['IsKid'] = 0	1	1
"data[""Survived""].astype('int32')"	1	1
model_desc['name'],	1	1
test_data['Embarked'] = test_data['Embarked'].map(input_Embarked)	1	1
test['Sex'] == 'female'	1	1
train['TSNE3'] = new_features.iloc[0:(train_rows-1),2]	1	1
combined['Cabin'] = combined['Cabin'].groupby(combined['Ticket']).apply(lambda x: x.fillna(x.astype(str).str[0].mode()[0])).apply(lambda x: x[0]).apply(lambda x: 'U' if(x=='n') else x)	1	1
"test_df[""PricePerCabin""] = test_df[""Fare""]/test_df[""NumberCabins""]"	1	1
combined['Number_of_relatives']=combined['SibSp']+combined['Parch']	1	1
"train[""Age""].median(skipna=True)"	1	1
"titanic.query(""Fare > 300"")"	1	1
test.Fare.fillna(train.Fare.mean(), inplace=True)	1	1
train['Embarked'].fillna(train['Embarked'].mode()[0], inplace= True)	1	1
"x.drop(""Cabin"", axis=1)"	1	1
all_data.rename({'Cabin':'Deck'},axis=1,inplace=True)	1	1
df_test['Pclass'] = df_test['Pclass'].astype(str)	1	1
"test[""Title""] = le.transform(test[""Title""])"	1	1
test_featued.drop(extra_features, axis=1)	1	1
test_df[152:153]	1	1
cv_results.append(cross_val_score(classifier, X_train, y_train, scoring = 'accuracy', cv = kfold, n_jobs = -1))	1	1
"sns.boxplot(x=""Fare"", y=""Survived"", data=train_data, orient=""h"");"	1	1
"Ticket.append(""0"")"	1	1
results.to_csv('models_voting.csv', index = None)	1	1
"tp.loc[tp[""Embarked""]==""C"",""Embarked_c""] = 2.0"	1	1
training_set.groupby('Title')['Age'].mean()	1	1
train['AgeCohort'] = train.groupby(level=0)['Age'].min().apply(lambda x: np.floor(x/10).astype(int))	1	1
train_data['Sex'].describe()	1	1
train.replace('female', 0,inplace=True)	1	1
titanic.assign(Deck=titanic.Deck.astype(object))	1	1
processed_data[['Survived']]	1	1
df.dropna(subset=['Age', 'Parch', 'SibSp'])	1	1
"traind.fillna({""Age"": 29})"	1	1
data.loc[data.Cabin.str[0] == 'G', 'Cabin'] = 7	1	1
"X['IsAlone']=(X[""SibSp""]+X[""Parch""]).apply(lambda x: 0 if x>0 else 1).astype('category')"	1	1
"test['Title'] = test['Name'].apply(lambda x: x.split(sep = ',')[1].split(sep = ""."")[0].strip())"	1	1
clfs.append(logReg_best_result)	1	1
train_data.Cabin.fillna(value='Unknown', inplace=True)	1	1
df_children.groupby('Survived').size() # with .size() we generate a pandas pandas.core.series.Series Series type variable	1	1
train_df.loc[ train_df['Age'] > 60, 'AgeGroup'] = 5	1	1
errors.append(100*(1 - knn.fit(xtrain, ytrain).score(xtest,ytest)))	1	1
df_test['Age'].fillna(0, inplace=True)	1	1
df_comb.isnull().sum()	1	1
"related_people.loc[related_people[""PassengerId""]==393,""RGroup""]=""Gustafsson_M"""	1	1
train.drop(drop_cols + ['Survived'], axis=1)	1	1
"tot[""RT""] = tot.Ticket.map(lambda x: x.split("" "")[0] if len(x.split("" ""))==1 else x.split("" "")[1])"	1	1
Train_Master.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)	1	1
titanic_df[['Pclass','Survived']].groupby('Pclass',as_index=False).mean()	1	1
train['Embarked'] = train['Embarked'].fillna('S')# S is the most common symbol	1	1
test['Title']=test['Name'].copy()	1	1
row['Survived'] == 1 and row['Sex'] == 'male' and np.isnan(row['Age']):	1	1
train_df.drop(['Pclass'], axis=1, inplace=True)	1	1
train.loc[train['Sex']=='female','Sex'] = 2	1	1
all_data.drop(columns=['High', 'Miss', 'Mr', 'Mrs', 'Other'], axis=1, inplace=False)	1	1
kpca.transform(X)	1	1
train['Cabin'][train.Cabin!='0']='1'	1	1
"all_df[""title""] = [""Rare"" if i in rare_title else i for i in all_df[""title""]]"	1	1
df.loc[(df['Age'] <= 20),'Age'] = 0	1	1
"test_data[""Fare""].fillna(test_data.Fare.mean(),inplace = True)"	1	1
y_train_pred_stack.shape, y_train_stack.shape, y_test_pred_stack.shape	1	1
"_df.drop([""cabin"", ""_cabin""], axis=1, inplace=False)"	1	1
train2.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
new_train.drop(['Sex', 'Embarked'], axis=1, inplace=True)	1	1
dataset['Fare'] = dataset['Fare'].apply(lambda x: dataset['Fare'].median() if x < 5 else x)	1	1
np.append(['Survived'],colsSVM)	1	1
Z.head().T	1	1
full_dataset.loc[full_dataset['Fare']<=7.91,'Fare']=0	1	1
all_data.drop(['Cabin'], axis=1)	1	1
data['Embarked']=data.Embarked.map({'S':0,'C':1,'Q':2})	1	1
ax[1].set_xlim(-50, 300)	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'the Countess', 'Sir', 'Don','Jonkheer', 'Dona'], 'Rare')	1	1
train3['Fare_Pclass'] = train3['Fare'] * train3['Pclass']	1	1
"results.to_csv(""Final Submission File.csv"",index=False)"	1	1
X_test['FamilySize'] = X_test.SibSp + X_test.Parch	1	1
sns.boxplot(x = 'Sex', y = 'Age', data = train, hue = 'Pclass')	1	1
Gender_Survived['Gender'] = Gender_Survived.index	1	1
parameters['feature_scaling'] = 'standardization'	1	1
trainOrg.drop(['Survived','SibSp','Parch','Age','Fare','family','Embarked','Pclass'],axis=1)	1	1
df['Last_Name'] = df.Name.str.split(' ').apply(lambda x:x[0])	1	1
df_test['Age_scaled'] = scaler.fit_transform(df_test[['Age']], age_scale_param)	1	1
"df_train.boxplot(""Fare"", by=[""Embarked"",""Pclass""], figsize = [8,8])"	1	1
"related_people.loc[related_people[""PassengerId""]==1106,""RGroup""]=""347091"""	1	1
training_set.tail()	1	1
train_data['Cabin_G'] = Cabin_dummy['G']	1	1
df_test_ml['Fare'].fillna(np.random.normal(df_test_ml['Fare'].mean(), df_test_ml['Fare'].std()), inplace = True)	1	1
df_test['PassengerId'].as_data_frame()	1	1
df_train[['Sex','Survived']].groupby('Sex').mean()	1	1
data_df.drop(['Fare'], 1, inplace=True)	1	1
le.transform(train.Embarked)	1	1
test.iloc[:, 0:1]	1	1
df_test_X.loc[:, df_train_X.dtypes != 'category'] = stdscaler.transform(df_test_X.loc[:, df_train_X.dtypes != 'category'])	1	1
test_copy.loc[(test_copy['Age'] > 10) & (test_copy['Age'] <= 20), 'Age_Category'] = 1	1	1
params_init_l['num_leaves'] = 255	1	1
"train.drop(""Embarked"", axis=1, inplace=True)"	1	1
test_data.drop(['Fare'], axis=1)	1	1
df.apply(lambda row: row['Pclass'] * row['Person'], axis=1)	1	1
data_copy.loc[data_copy.Sex == 'female', 'Sex']= 0	1	1
original_train.corr()	1	1
data['type'] = data['prefix'].map(name_dict)	1	1
test_1.drop(['SibSp','Parch'], axis = 1,inplace = True)	1	1
test2.drop(['Cabin', 'Ticket'], axis = 1)	1	1
"test_df[""title""] = test_df[""name""].str.split("","").str[1].str.strip().str.split().str[0]"	1	1
data_test_trans.head()	1	1
df_train['Data'] = 'T'	1	1
test_cleaned.drop('Survived', axis=1)	1	1
tr['Deck'] =tr['Deck'].replace('D',4)	1	1
dataset[['Survived', 'Fare']].copy()	1	1
train_cl.loc[:, Xcol + ['Age']]	1	1
"test_df.set_index(""PassengerId"",inplace=True)"	1	1
df['Fare_bin'] = pd.qcut(df.Fare, 4, labels = [0,1,2,3]).astype(int)	1	1
men_analysis[['PTitle','Pclass','Survived','Fsize']].groupby(['PTitle','Pclass','Fsize']).mean()	1	1
train_df[['FareBin', 'Survived']].groupby(['FareBin'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
df['Fare']=df['Fare'].fillna(df['Fare'].median())	1	1
"dataframe2[""Fare""]= dataframe[""Fare""] / 10 #normalization"	1	1
X_train.shape, Y_train.shape, test_data.shape	1	1
Titanic_Master['FamilySize'] = Titanic_Master['SibSp'] + Titanic_Master['Parch'] + 1	1	1
train_df.columns.values[4]	1	1
test.loc[test['EmbarkedModified'] == 'S', 'EmbarkedCategorical'] = 0	1	1
testnum_norm[3]	1	1
"new_test.drop(""Sex_male"", axis = 1, inplace = True)"	1	1
data_df.drop(['Name', 'Parch', 'SibSp'], axis = 1, inplace = True)	1	1
"df_train[""Cabin""].dropna().apply(lambda x: x[0])"	1	1
used.append(X_Train.columns[i])	1	1
metrics['range'] = range(2)	1	1
metrics['Model'] = name	1	1
row['Sex'] == 'female' and row['Pclass'] == 3 and row['Parch'] > 1 and row['SibSp'] > 1:	1	1
df_train.drop(['FareRange'], axis=1)	1	1
traindf.drop('Survived' , axis = 1)	1	1
Test_set_1.median()	1	1
"data.drop(""Embarked"",inplace=True, axis=1)"	1	1
ship['Cabin'].loc[ship['Cabin'].notnull() & (ship['Survived'] == 0)].count()	1	1
"Titanic_submission.to_csv(""Titanic_compet_submit.csv"", index = False)"	1	1
test['CabinKnown'] = pd.Categorical((test.Cabin.isnull() == False))	1	1
df_train_quantify.drop(['Survived'], axis=1)	1	1
df_features['Cabin1'] = df_features['Cabin'].apply(lambda x: dict_cabin1[x[0]] if p.notnull(x) else 0)	1	1
titanic_df['Fare'][titanic_df['Survived']==1]	1	1
total_data.describe()['Age']['mean']	1	1
train_model_red.corr()	1	1
test['Age'].iloc[i] = age_med	1	1
combined_df['Related'] = combined_df['SibSp'] + combined_df['Parch']	1	1
count.reset_index(inplace=True)	1	1
train_df_bins['fare'] = qcut	1	1
"titanic_df['Age'].plot(kind=""hist"",title = ""Ages of all the passengers on ship after replacing null"",figsize = (10,10)).set_xlabel(""Agesg in years"")"	1	1
trainML.isnull().sum()	1	1
"df.drop([""Title""], axis=1, inplace=True)"	1	1
combine['Age'].isnull().sum() == 0:	1	1
df['Embarked'] = df['Embarked'].fillna('S').astype('category')	1	1
test_df.merge(test_agg, on = 'ID', how = 'left')	1	1
df_test.loc[ df_test['Age'] <= 16, 'Age'] = 0	1	1
data['same_tckt'] = data.qtd_same_ticket.apply(lambda x: 1 if (x> 1) else 0)	1	1
"ax[1].set_title(""Pclass Vs Survived or Dead"")"	1	1
DataFrameName.loc[:,featureName]=DataFrameName.loc[:,featureName]/divi	1	1
joined_data['Ticket_Code'] = clusters	1	1
train.drop('Ticket', axis=1, inplace=True)	1	1
"data_train.drop(""Embarked"", axis=1, inplace = True)"	1	1
table.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)	1	1
df_tmp.corr()['Survived'].sort_values(ascending=False)	1	1
"test_df[""Family""].loc[test_df[""Family""] == 0] = 0"	1	1
axes[0].set_xlabel('Sex')	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'the Countess','Capt', 'Col',                                             'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
df[['Age','Pclass','SibSp','Parch','Fare']]	1	1
logistic_submission.head()	1	1
trainOrg.drop(['PassengerId','Name','Ticket'], axis=1)	1	1
"test[""Title""] = test[""Name""].str.extract(' ([A-Za-z]+)\.', expand=False)"	1	1
"test[""Embarked""].isnull().sum()"	1	1
victims.apply(lambda x: -x).plot.bar(ax= ax1, hatch = 'x', color = 'r')	1	1
combined.head(20)	1	1
notNullData.iloc[:,[0,1,3,4,5,6]].head()	1	1
combined_data['Deck'] = combined_data['Cabin'].map(lambda x: x[0])	1	1
combine.ix[combine.Family==0,'Fsize'] = 'Single'	1	1
all_data.set_value(373,'Deck',value='C')	1	1
ax2.hist([dataset.loc[:,'FamilyCount'], dataset.loc[dataset['Survived'] == 0, 'FamilyCount']],bins=np.arange(12)-0.5, color=['blue', 'red'], histtype='bar', label=['Family Members On-Board', 'Family Members Died'])	1	1
df_all['IsSingle'] = np.select(shared_features, is_single)	1	1
full_dataset.loc[full_dataset['FamilySize']==1,'IsAlone']=1	1	1
data.loc[(data['FamilySize'] > 1), 'IsAlone'] = 0	1	1
df['Age'].count()	1	1
sub['AGEGROUP'] = sub.apply(lambda row: AGEGROUP (row),axis=1)	1	1
df['smlfam'] = np.where((df['famsize']>1) & (df['famsize']<5), 1, 0)	1	1
full_data.loc[ full_data['Age'] > 64, 'Age']                             = 4	1	1
train_cp['FamilySize'] = train_cp['SibSp'] + train_cp['Parch'] + 1	1	1
total.info()	1	1
data_train.describe(include='all')	1	1
df_test['Sex'] = df_test['Sex'].map(di)	1	1
titanic['Age'].describe(include=all)	1	1
test_csv.to_csv('submission_all_tree_0.5.csv', index=False)	1	1
all_data['Alone'] = 0	1	1
df_titanic_test_mod['Sex'].replace('female',0,inplace=True)	1	1
Age.plot.hist(alpha=0.5,color='red', stacked=True, bins=50)	1	1
classifiers.append(MLPClassifier())	1	1
"DataFile[[""Cabin""]] = DataFile[[""Cabin""]].fillna(value=""O"")"	1	1
dftrain['Fsize']=family_df_tr['Fsize']	1	1
train.loc[:, ['Pclass', 'Sex', 'Age', 'Embarked']]	1	1
dataset['Title'] = dataset['Title'].replace('Miss', 2)	1	1
train.groupby(['Parch'])[['Survived']].mean()	1	1
train_df['family_status'] = train_df['family']	1	1
test.drop(['LargeFamily', 'FamilyClass'], axis=1)	1	1
data_series.apply(lambda x: col_dict[x])	1	1
dataset[['PassengerId','Name','Ticket','Cabin','Embarked','Sex','Pclass','Age','SibSp','Parch','Fare','Survived']]	1	1
dataset.loc[(dataset['Fare']>10) & (dataset['Fare']<=20), 'Fare']=1	1	1
k_f1.append(f1)	1	1
test_df.values #Age and Title of each row	1	1
test_predictors['PassengerId']	1	1
df['Age'].fillna(np.mean(df.Age), inplace = True)	1	1
dataset.loc[dataset.Name.str.contains('Mrs'), 'Age'].mean()	1	1
X.groupby(idx).median()	1	1
filt_df.fillna(filt_df.mean(axis=0), axis=0)	1	1
X_test['Age'].fillna(age_mean, inplace=True)	1	1
ticket_table['Dead_female_on_ticket'].fillna(0, inplace=True)	1	1
dfTest['Embarked'] = dfTest['Embarked'].fillna('znan')	1	1
train_data.join(train_data['Name'].str.split(',', 1, expand=True).rename(columns={0:'LastName', 1:'FName'}))	1	1
data.loc[(data['Fare'] > mean_fare[1]) & (data['Fare'] < mean_fare[2]), 'FareStage'] = 2	1	1
sub.to_csv('submissions.csv',index=False)	1	1
df['SibSp']=df['SibSp'].astype('category')	1	1
nan_test_fare.replace('nan', fare_median)	1	1
test_df['Name']=test_df['Name'].apply(name)	1	1
"dataset_t.drop([""PassengerId"",""Ticket"",""Cabin""], axis=1)"	1	1
test['Sex'] = test['Sex'].map({'male': 1, 'female': 0}).astype(int)	1	1
dataset.drop('Cabin', axis=1)	1	1
survived_class_2.shape[0]	1	1
plt.hist(x=train['Family_size'], bins=10, color='C5', edgecolor='black')	1	1
"train_data.loc[(train_data[""FamilySize""] >= 2) & (train_data[""FamilySize""] < 4), ""FamilySizeBetween2And4""] = 1"	1	1
train_original.info()	1	1
data['FamilySizeBin'] = pd.cut(data['FamilySize'], [0, 1, 4, 11])	1	1
df[['Person_Class','Group_Category']].groupby(['Person_Class','Group_Category']).size().reset_index(name = 'Count')	1	1
"test['Fare'].fillna(test[""Fare""].mean(),inplace=True)"	1	1
train3_df.loc[:,:] = scaled_values	1	1
titanic_df.iloc[891:]	1	1
df.iloc[:891,:]	1	1
data_train_dummy2['Age'].values.reshape(-1, 1)	1	1
test.fillna(titanic_comb['Fare'].median())	1	1
dataset.iloc[i,4] = agefiller(dataset.iloc[i,1])	1	1
data['isAlone'].loc[data['Family_Size']>1]=0	1	1
pdf['Deck'] = pdf['Deck'].map(dict(zip('1abcdefgt', range(0,9)))).astype(int) # map to ints	1	1
testdf['Age'] = testdf['Age'].fillna(testdf['Age'].mean())	1	1
df_output[['PassengerId','Survived']].to_csv('TitanicPred.csv',index=False)	1	1
df.AgeGroup.apply(retGroup)	1	1
"df.loc[pid,""MainName""] = """""	1	1
survived['Age'].plot.hist(ax=axs3[1], fontsize=16)	1	1
ship.join(title_dummies_titanic)	1	1
data.loc[(data['Age']>cat[2]) & (data['Age']<=cat[3]),'Age']=3	1	1
x_train['Cabin'] = new_cabin.values	1	1
"LR_result[1][""best_model""],"	1	1
data['Title']=data.Name.str.split(', ',expand=True)[1].str.split('. ',expand=True)[0]	1	1
"train_kaggle[""Not_alive""] = train_kaggle[""Survived""].apply(lambda s : abs(1 - s))"	1	1
data[['Age', 'Fare', 'Parch', 'SibSp', 'Pclass']]	1	1
accuracy_score.append([i,acc_svc])	1	1
data.Embarked.fillna(df.value_counts().idxmax(),inplace=True)	1	1
df_pred_use_X.head(1)	1	1
"train_df.drop([""Survived"", ""AgeBand""], axis=1)"	1	1
train.loc[(train['Fare']>=14)&(train['Fare']<31),'Fare']=3	1	1
X_test[['Sex', 'Embarked']]	1	1
train_df.iloc[:,1:] #taking all the columns except first.	1	1
nn_model.add(Dense(30,activation='relu'))	1	1
merged_df['title'] = title_series	1	1
data.hist(bins=10,figsize=(10,10),grid=False)	1	1
submission.to_csv('submission_boost.csv', index = False)	1	1
full_df['AgeFill'] = full_df['Age']	1	1
"tab_corr.div(tab_corr.sum(axis=1).astype(float), axis=0).plot(kind=""bar"",stacked=True)"	1	1
train_data.groupby(['SibSp'])['Survived'].value_counts().div(train_data.groupby(['SibSp'])['Survived'].count()).unstack().plot.bar(stacked = True, ax = axes[0])	1	1
concat_set.drop(['PassengerId'], axis = 1, inplace = True)	1	1
le.transform(training_set[column])	1	1
ship.join(pclass_dummies_titanic)	1	1
dummy_test['Cabin_T'] = 0 #dirty fix	1	1
model_accuracies.sort_values(by='accuracy')	1	1
my_submission3.to_csv('submission3.csv', index=False)	1	1
drop_elementsONS.append('Sex')	1	1
test.Fare.fillna(-0).values.reshape(-1, 1)	1	1
train1.drop(columns=['Survived'])	1	1
train.drop(['Age_Cat'],axis=1,inplace=True)	1	1
df['Lname'] = df.Name.apply(lambda x:x.split(' ')[0])	1	1
imputer.transform(test_data_1)	1	1
df_full['Title']:	1	1
"data[""Age_cohort""][(data[""Age""]>16)&(data[""Age""]<=30)]=4"	1	1
df['Embarked'] = df['Embarked'].fillna(mos_freq)	1	1
test_data['Cabin'].head()	1	1
test_set.drop('Cabin', 1, inplace=True)	1	1
dataset.groupby(['Embarked', variable]).size()['Q'].index.values	1	1
"train_df[""Cabin""] = train_df[""Cabin""].apply(lambda x: 1 if x != 0 else 0)"	1	1
pd.merge(model_summary,df2,how='outer')	1	1
model.add(keras.layers.Dropout(0.01))	1	1
submision.head()	1	1
dataset['EmbarkedDiscrete'] = label.fit_transform(dataset['Embarked'].apply(lambda x: x if not pd.isnull(x) else 'S'))	1	1
test_df.drop('FamilySize', axis=1, inplace=True)	1	1
ticket_count.groupby('Ticket').count()[['Name']].reset_index()	1	1
dataset['train_x'] = train_x	1	1
data['Elderly'] = data.apply( lambda row: int(row['Age'] >= 65), axis = 1)	1	1
"test[""Age""].fillna(test[""Age""].median(), inplace = True)"	1	1
"train_kaggle.groupby([""Pclass""])[""Pclass""].count().plot.bar(title=""Distribution of Pclass feature"")"	1	1
MLA_compare.loc[row_index, 'MLA Name'] = alg.__class__.__name__	1	1
combined_df.drop('Cabin', axis=1)	1	1
train_df['embarked'].dropna().mode()[0]	1	1
df['FTicket'] = df['Ticket'].map(lambda x: x[0])	1	1
cv['train_accuracy'].mean(),	1	1
regressor.add(Dense(units=1))	1	1
titanic_test['Sex_M']=(titanic_test['Sex']=='male').astype(int)	1	1
test['Sex']=test['Sex'].apply(convertSex)	1	1
train1.drop(['PassengerId','Cabin','Ticket','Name'], axis=1)	1	1
"all[""Embarked""] = le.fit_transform(all[""Embarked""].fillna('0'))"	1	1
train_df['Sex'] = train_df['Sex'].map(gender)	1	1
data['Survived'][data.Pclass != 3].value_counts().sort_index()	1	1
"full[""Age""].mean() - full[""Age""].std(),"	1	1
test_df_clean.loc[test_df_clean['Fare'].isnull(), 'Fare'] = test_df[test_df['Fare'].notnull()]['Fare'].mean()	1	1
df['Deck'] = df['Cabin'].apply(cabin_to_deck)	1	1
"train[[""Fare"", ""Survived""]].groupby([""Fare""], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
"plt.hist(df_train[""Fare""],log = True, alpha = 0.3, label = ""all_passenger"")"	1	1
parameters['save_cost_freq'] = 10	1	1
trainOrg['family'] = np.where(trainOrg['family']=='Y', 1, 0)	1	1
ages_probabilities['Age'].values.tolist()	1	1
features.append('age')	1	1
frame.loc[(frame.Age >48) & (frame.Age<=64) , 'Age'] = 3	1	1
combine['Deck'] = combine.Deck.astype('int')	1	1
newDF.drop([col], axis=1)	1	1
data_df['Ticket'].values:	1	1
features.append(feature_vec)	1	1
df.drop(labels='Age', axis='columns', inplace=True)	1	1
merged_df.loc[filled_series.index, ['Fare']] = fare_series.median()	1	1
training['Embarked'].fillna('S',inplace=True)	1	1
dataset.loc[(dataset['Age'] == -1) &(dataset['Title'] == 'Miss'), 'Age'] = 21.84	1	1
data['Age'][data['Age'].isnull()]=data['Age'].mean()	1	1
tempdf['med'] = np.median(np.array([tempdf[col] for col in pred_cols]),axis=0)	1	1
"dat[""tick_A5""] =  dat['Ticket'].map(lambda s: 1 if re.search(""A5"",s)!=None else 0)"	1	1
df.Fare.fillna(guess_Fare , inplace=True)	1	1
df_clone.loc[fold[1],'M2_ada'] = cls_ada.predict(test.loc[:, columns])	1	1
train_copy['Survived']	1	1
dfTrain['Ticket_Characters'].value_counts()	1	1
"df_train[""Pclass""].plot.kde()"	1	1
"data[""Age""][((data['SibSp'] == data.iloc[i][""SibSp""]) & (data['Parch'] == data.iloc[i][""Parch""]) & (data['Pclass'] == data.iloc[i][""Pclass""]))].median()"	1	1
test_dataset.Fare.fillna(test_dataset.Fare.mean())	1	1
best_model_names.keys():	1	1
test_p['Age_new'].hist()	1	1
full.loc[full['Survived'].notna(),['Cabin','Survived']].groupby('Cabin').agg('mean')	1	1
df[['cabin_letter','Pclass','Survived']].groupby(['cabin_letter']).mean()	1	1
submit.loc[:, 'Survived'] = results	1	1
train['Embarked'] = train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)	1	1
train_set.drop(['PassengerId','Name','Cabin','Ticket'],axis=1 ,inplace=True)	1	1
"name.replace("","", """").split():"	1	1
new_data.drop('Survived', axis=1), new_data.Survived	1	1
train_df[['age', 'survived']]	1	1
train_original.head()	1	1
all_data['Deck'] = all_data['Deck'].fillna('N')	1	1
test_set.loc[(test_set['Sex'] == 'female') & (test_set['Parch'] > 0) & (test_set['Title'] == 'Mrs'), 'IsMother'] = 1	1	1
"df_test[""Age""].mean() - df_test[""Age""].std(),"	1	1
traindf.drop(['Ticket' , 'Cabin'] , axis = 1)	1	1
df_age.loc[ df_age['Age'] > 62, 'Age'] = 4	1	1
"dataset['Embarked'] = dataset['Embarked'].apply(lambda x:1 if x==""C"" else(2 if x==""S"" else 0))"	1	1
"test_df[""Pclass""]=test_df[""Pclass""].astype(""category"")"	1	1
df_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')	1	1
test_df['Unvan'] = test_df['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	1	1
"train_df.append(test_df)[""Age""].dropna().median()"	1	1
df_train_quantify['Survived']	1	1
data.loc[data['Age'] < 16, 'Age'] = 1	1	1
"data_test[""Desk""] = data_test[""Desk""].apply(lambda x: 0 if type(x) == float else desk_dict[x])"	1	1
"train.drop(""Cabin"", axis = 1)"	1	1
"_df[""ticket_let""] = _df.ticket_let.map(ticket_dict)"	1	1
test5['Fare'] = test5['Fare'].fillna(test5['Fare'].median())	1	1
data_train['Fare'].loc[data_train['Survived']==1].plot(kind='kde',label='survived')	1	1
model.add(Dense(25, activation='sigmoid'))	1	1
"data_df.loc[(data_df[""Fare""] > 7.896) & (data_df[""Fare""] <= 14.454),  'Fare_Grouped'] = 1"	1	1
full['Group_num'] = pd.Series(scaler.fit_transform(full.Group_num.values.reshape(-1,1)).reshape(-1), index=full.index)	1	1
predictions_df[['PassengerId', 'out']]	1	1
np.mean( cross_val_score(model, X, y, cv = 5, scoring='accuracy') )	1	1
"embarked_dummy.drop([""Q""], axis=1, inplace= True)"	1	1
df_var['family_is'].values[i-1] = '1'	1	1
titanic['Embarked'].value_counts()	1	1
"data[""Title""].replace([""Mr"", ""Miss"", ""Mrs"", ""Master"", ""Other""], [0, 1, 2, 3, 4], inplace = True)"	1	1
Predictions.to_csv('submission.csv', index=False)	1	1
train7['Cabin'] = train7['Cabin'].fillna('U')	1	1
df.Age.fillna(value=df.Age.mean(), inplace=True)	1	1
GroupInfo.append([SurvStatus,GroupSize,SurvProb])	1	1
train['FareCalcul'] = calculFare(train, ticket_count)	1	1
train_df.drop('Ticket', 1)	1	1
ticketgrouptest.rename(columns = {0: 'Count'}, inplace=True)	1	1
train_df.ix[train_df['Fare']>152]	1	1
data_eval['Survived']	1	1
df_train.Sex.replace(to_replace = dict(male = 1, female = 0), inplace = True)	1	1
"test.loc[test[""Embarked""]=='S', ""Embarked_S""] = True"	1	1
train_set.drop('Sex_nan',axis=1,inplace=True)	1	1
df.Title.replace(['Capt','Don','Major','Sir'],'Sir',inplace=True)	1	1
"train_data[""TitleRev""] = 0"	1	1
dataset.loc[ dataset['Fare'] > 280, 'Fare'] = 7	1	1
df2[['Age', 'Parch', 'SibSp']].values	1	1
titanic.drop(['Fare'],1)	1	1
dt_test.drop(['Name','Cabin', 'Ticket'], axis=1, inplace=True)	1	1
data[['Fare']] = data[['Fare']].fillna(value=data[['Fare']].mean())	1	1
x['IsAlone'] = x['FamilySize'].apply(lambda n: 1 if n == 0 else 0)	1	1
train_copy['Fare_Category'] = train_copy['Fare_Category'].astype(int)	1	1
"train_data[""Fare""][train_data[""Fare""] < 100].hist(bins=20, figsize=(10,5))"	1	1
data.loc[data['FamilySize'] > 4, 'Family' ] = 3	1	1
"test.loc[test[""Family""] == 1, ""Alone""] = 1"	1	1
df_test['Age'] = df_test['Age'].fillna(-1)	1	1
"train[""isSibsp""] = train.SibSp.apply(lambda x : 0 if x == 0 else 1)"	1	1
dataset['Age'].fillna(dataset['Age'].mean(), inplace=True)	1	1
dt['Title'] = dt['Title'].replace('Mme', 'Mrs')	1	1
test.loc[test['Pclass'] == 3]['Deck'].describe()	1	1
train.join(train_fsize.rename('Fsize'))	1	1
trainONS['Survived'].ravel()	1	1
test_data.set_index(['PassengerId'], inplace=True)	1	1
model_num.add(Dense(32, activation='relu'))	1	1
dataset.loc[(dataset['Fare'] > dataset['Fare'].quantile(0.4)) & (dataset['Fare'] <= dataset['Fare'].quantile(0.6)), 'Fare'] = 2	1	1
imr.transform(df.values)	1	1
test_X.loc[test_X['Fare'].isnull(), 'Fare'] = test_X['Fare'].mean()	1	1
test_data.drop(['SibSp','Parch','Fare','Name','Cabin','Ticket'],axis=1)	1	1
X_train.iloc[:,[2,4,5,6,7,9,11]].copy()	1	1
X['Age'].iloc[i] = age_med	1	1
"train.drop(labels=[""Pclass"",""Name"",""Sex"",""Age"",""SibSp"",""Parch"",""Ticket"",""Fare"",""Ticket"",""Fare"",""Embarked"",""Test""],axis=1)"	1	1
"axes[0].set_title(""Atributes groups passengers counts"")"	1	1
"dataset[""Title""] = dataset[""Title""].replace(""Dona"", ""Other"")"	1	1
data[0]	1	1
dataset['Embarked'] = dataset['Embarked'].astype(int)	1	1
train_csv.info()	1	1
testd.drop(['Age', 'Fare', 'Name' ], axis=1)	1	1
data.loc[(data.passenger_fare>30.6) & (data.passenger_fare<=30.7) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>30.6) & (data.passenger_fare<=30.7) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
trainingData.drop(['Survived','PassengerId'], axis = 1)	1	1
X.drop(cat,axis=1,inplace=True)	1	1
"holdout[""Title""] = extracted_titles.map(titles)"	1	1
clf.cv_results_['std_test_Loss']	1	1
submission.groupby(['Fare'])['Fare'].count() / np.float(len(submission))	1	1
sns.boxplot(x='Title', y='Age', data=df)	1	1
df['CabinLoc'] = df['CabinLoc'].replace(['unknown', 'front', 'mid', 'back'], range(4))	1	1
perceptron_submission['Survived'] = survived	1	1
Test['caD'] = Test['Cabin'].map({'A':0,'B':0,'C':0,'D':1,'E':0,'F':0,'G':0,'T':0,'U':0}).astype(int)	1	1
"train[""Title""] = [i.replace('Don', 'Military') for i in train.Title]"	1	1
test1['Embarked'] = le.fit_transform(test1['Embarked'])	1	1
combine.iloc[891:, :]	1	1
train_df.Embarked.fillna(train_df.Embarked.dropna().max(),inplace =True)	1	1
models_op.append(('lgbm_optimized', optimized_lgb))	1	1
"Accuracy[""decisionTree""] = accuracy"	1	1
data.loc[data.Fare == data.Fare.min()]	1	1
original_test['Fare'].mean()	1	1
dataset['Title'] = dataset['Title'].replace('Mme', 'Ms')	1	1
train.drop(['PassengerId', 'Ticket'], axis=1)	1	1
data.drop(columns=['Ticket'], inplace=True)	1	1
m.add(BatchNormalization(input_shape=(7,)))	1	1
"test_df[""Title""] = train_df.Name.map(get_title)"	1	1
test.join(Pclass_dummies)	1	1
df['age_T'] = df.apply(lambda x: 0 if (x['Age'] >= 0 and x['age_T'] < 5) else x['age_T'], axis=1)	1	1
"df_test.loc[df_test['Name'].str.contains(""Miss"") & df_test.isnull().Age, 'Age'] = 10.0"	1	1
df_train['tmpFareBand'] = pd.qcut(df_train['Fare'],4)	1	1
y.loc['2014-10']	1	1
dataset.loc[ dataset['Cabin'] != '0', 'Cabin'] = '1'	1	1
parameters['b' + str(l)] = tf.get_variable('b' + str(l), [layer_dims[l]], initializer=tf.zeros_initializer())	1	1
dataset['Class1'][rowIndex] == 1:	1	1
df.head(10)[['Fare','bin_fare','Age','bin_age']]	1	1
"tab.div(tab.sum(1).astype(float), axis=0).plot(kind=""bar"", stacked=True, ax=axes[2])"	1	1
test_copy['Sex_Category'] = test_copy['Sex_Category'].astype(int)	1	1
df['Name'] = df['Name'].replace(['Lady','Countess','Capt', 'Col','Don', 'Major','Rev','Sir','Jonkheer','Dona'], 'Special')	1	1
model.add(Dense(1500, activation='relu'))	1	1
data.groupby(['Sex']).count()	1	1
test_data['Age'].iloc[i] = age_med	1	1
age0.mean()	1	1
train_df[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by='Survived',ascending= False)	1	1
train['Dead'] = 1 - train['Survived']	1	1
y_train.T	1	1
combine.iloc[:train.shape[0],:]	1	1
inDF.insert(len(inDF.columns), column = 'tfidf_' + str(i), value = tfidf_array [:,i])	1	1
parameters['feature_scaling'] == 'mean_normalization':	1	1
train['Sex'].isnull().values.ravel().sum()	1	1
df['AliveRelative'] = (df['Surname'].isin(alive)) & (df.Age < 20)	1	1
df.Name.apply(lookup)	1	1
data['CatFare']= pd.qcut(data.Fare, q=4, labels=False)	1	1
df_titanic['Title'].unique()	1	1
train_test.drop(['Survived','Cabin'],axis=1)	1	1
allset['Salutation'] = allset['Salutation'].replace(['Lady', 'Countess','Don', 'Dr','Rev','Jonkheer', 'Dona'], 'Rare')	1	1
plt.boxplot(x = data1['Fare'], showmeans = True, meanline = True)	1	1
titanic_df['Sex'].groupby(titanic_df['Pclass']).value_counts().unstack()	1	1
df_train['AgeBin'] = pd.qcut(df_train['Age'], 4)	1	1
t_data.Age.fillna(value=0)	1	1
df['FareBins'] = categories	1	1
data['Survived'][data.Pclass == 3].value_counts().sort_index()	1	1
X_train['Embarked'].fillna(X_train['Embarked'].median(), inplace=True)	1	1
"copy_test_df.Name.fillna(train_df[""Name""].mode()[0], inplace=True)"	1	1
train_norm.as_matrix([7])	1	1
coeff.sort_values(by = 'Importance').set_index('Feature').plot.bar(title = 'Feature Importance of Linear Model (LR)', color = 'green', figsize = (18,2.5))	1	1
dataset.loc[(dataset['FamilySize'] > 1) & (dataset['FamilySize'] <= 4), 'FamilySize'] = 1	1	1
titanic_data.sample(5)	1	1
raw_test_df.head()	1	1
predict.insert(1, 'Survived', '?');	1	1
X_test.iloc[:,[2,4,5,6,7,9,11]].copy()	1	1
"dataset[""NameLength""] = dataset[""Name""].apply(lambda x: len(x))  #Create feture for name length"	1	1
test.loc[(test.Title.values == k) & (test.Age.isnull()), 'Age'] = v	1	1
t_df.pivot_table('Survived', index= 'Sex', columns= 'Pclass')	1	1
data['Family_size'] = data.apply(lambda x: family_size(x['SibSp'], x['Parch']), axis=1)	1	1
trainData['Parch'].value_counts().sort_index().plot.bar(ax=axs5[0], figsize=(12, 6), fontsize=16)	1	1
pipelines.append(('ScaledSVC', Pipeline([('Scaler', StandardScaler()),('SVC', SVC(kernel = 'rbf'))])))	1	1
_train.isnull().any()	1	1
titanic_test_data['Fare'] = titanic_test_data[['Fare','Pclass']].apply(sub_faref,axis=1,args=(fare_mean_per_class,1))	1	1
dfNew.to_csv('submitClass.csv',index=False)	1	1
traind.drop(['Age', 'Fare', 'Name' ], axis=1)	1	1
"others[[""Survived"", ""Age""]].groupby([""Age""], as_index=False).mean()[""Survived""].mean()"	1	1
test.loc[(test['AgeModified']>50) & (test['AgeModified']<=60),'AgeCategorical'] = 5	1	1
model_data.loc[(model_data.Pclass == 2)&(model_data.Title == 2)&model_data.Age.isnull(),('Age')] = 32	1	1
train_df.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)	1	1
data_train_all.Fare.astype(float)	1	1
train.drop(drop_list, axis=1)	1	1
df_train['Title'] = df_train['Name'].apply(get_title)	1	1
df.to_csv(filename + '.csv', index = False)	1	1
data['LastName'] = data['LastName'].str.strip() # strip whitespace from ends	1	1
titanic.drop(['Name'],1)	1	1
dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Jonkheer', 'Dona'], 'Lady')	1	1
titanic_train[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
ax[1][1].bar(x, nonsurvivor_class)	1	1
df_features['Ticket'].value_counts().head(5)	1	1
df['Family_Size']=df['Parch']+df['SibSp']#family size	1	1
dt_submission['Survived'],	1	1
data.groupby('Sex').agg('sum')[['Survived','Died']].plot(kind='bar',stacked=True)	1	1
train.drop(columns=['PassengerId', 'Name', 'SibSp', 'Ticket', 'Cabin'])	1	1
train_1.corr()	1	1
comb['Ticket'] = comb['Ticket'].map(lambda x:x.replace('.',''))	1	1
train_df['Age'].fillna(train_df['Age'].median(),inplace=True)	1	1
test_df_tickets.add(t_val)	1	1
test.rename(columns={'female': 'Female', 'male': 'Male'})	1	1
train_df_raw.drop(['PassengerId'], 1).hist(bins=50, figsize=(20,15))	1	1
"data_copy.loc[:,""Pclass""] = data_copy[""Pclass""].fillna(data_copy[""Pclass""].median())"	1	1
train_data['Age'].isnull().any()	1	1
"full_df['Title'] = full_df['Name'].str.replace('(.*, )|(\\..*)', '') # creation of a new feature ""Title"" in the dataframe"	1	1
test_dataframe_complex.values	1	1
df_train.loc[df_train['Sex'] == 'male', 'Sex'] = 0	1	1
data_testTransformed['Age'] = data_testTransformed['Age'].fillna((array(data_testTransformed.loc[data_testTransformed['Age'].isna() == False, 'Age'])).mean())	1	1
train.Name.replace('Dr','Master')	1	1
"train[[""Name"", ""Survived""]].groupby(['Name'], as_index=False).mean().sort_values(by='Survived', ascending=False).head(20)"	1	1
"df_train.drop([""Name"", ""PassengerId"", ""Cabin"", ""Ticket""], axis=1)"	1	1
train_df.loc[(train_df.Cabin.isnull())&(train_df.Initial=='Other'),'Cabin']='A26'	1	1
"test_df[""Title""] = test_df[""Title""].map({""Master"":0, ""Miss"":1, ""Ms"" : 1 , ""Mme"":1, ""Mlle"":1, ""Mrs"":1, ""Mr"":2, ""Rare"":3})"	1	1
"train_data.loc[:,""Survived""].values"	1	1
dataset['Pclass3'] = 0	1	1
"titanic_test_dataframe[""NormalizedEmbarked""] = titanic_test_dataframe[""Embarked""].map({""C"": 55.36, ""Q"": 38.96, ""S"": 33.90})"	1	1
test2.drop(['Name'], axis = 1)	1	1
"train.loc[train[""Name""].str.contains(""Mrs""), ""Title""] = ""Mrs"""	1	1
score.std()	1	1
"test.loc[test['Fare'] <= 7, 'Fare'] 						        = 0"	1	1
full.Embarked.fillna(value='S', inplace=True)	1	1
all.Embarked.fillna('S',inplace=True)	1	1
x_data.shape[1]	1	1
lbe.transform(test_data[i].values.reshape(-1,1))	1	1
sns.boxplot(box.T)	1	1
t.loc[ t['Age'] > 64, 'Age'] =4	1	1
data['Died']= 1 - data['Survived']	1	1
df_train['Fare'] = (df_train['Fare'] - fare_mean) / fare_std	1	1
"train[""Embarked""] = train[""Embarked""].fillna(train[""Embarked""].median())"	1	1
merged['Alone']=0	1	1
all_data.drop('Embarked_Q', axis=1)	1	1
train_df['Alone'].loc[train_df['Alone'] == 0] = -1	1	1
"ax[0].set_title(""Number Of Passengers By Embarked"")"	1	1
Titanic_Master[['Ticket', 'Cabin','Cabin_t','Pclass', 'Pclass_t']].sample(10)	1	1
train.loc[(train['Pclass'] == 3) & (train['hasAge'] == 1), 'class_hasage'] = 6 #has age Pclass 3	1	1
data['Name'][i] = 3	1	1
"train_df['AgeGroup'] = pd.cut(train_df[""Age""], bins, labels = labels)"	1	1
X.drop('SibSp',axis=1,inplace=True)	1	1
"data_train.loc[data_train[""Embarked""] == ""C"", ""Embarked""] = 1"	1	1
rest.append(['Fsize','SibSp','Parch'])	1	1
df.loc[((df.IsAlone == 1) & (df.Pclass == 3)) , 'Cl_IA'] = 3 #poor alone	1	1
sex_encoder.transform(X_test[:, 1].astype(str))	1	1
dtc5_survivors.is_copy = False	1	1
df_train_features.loc[:,'np'+str(i)]=-1	1	1
train[['AgeBin', 'Survived']].groupby(['AgeBin'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
data['isAlone']=1	1	1
data1_dummy.iloc[:,0:1].columns.tolist()	1	1
test_df['Female']=test_df[['Sex']].apply(get_female, axis=1)	1	1
survived_rate_list.append((feature_val, survived_cnt / count * 100))	1	1
"test.loc[(test[""Name""]==""Master"")&(test[""Age""].isnull()), ""Age""] = train.loc[train[""Name""]==""Master"",""Age""].mean()"	1	1
survived_title.fillna(0, inplace=True)	1	1
row['Sex'] == 0 and row['Pclass'] == 3 and row['Survived'] == 0 and row['Age'] == 20:	1	1
np.where(submission.Survived == 0, 0, 1)	1	1
"test_data[""CabinAvail""] = test_data[""Cabin""].notnull().astype('int')"	1	1
"df_full['TicketSizeBin'] = pd.cut(df_full['TicketSize'], [0, 1, 4, 20], labels=[""alone"", ""normal"", ""big""])"	1	1
train_df['Fare_code'] = enc.fit_transform(train_df['Fare_bins'].astype(str))	1	1
coefficients[0]	1	1
df_test_result.Survived.astype(int)	1	1
data['FarePP'] = ''	1	1
dataset['Embarked'] = dataset['Embarked'].fillna(Embarking_freq)	1	1
"survived[""Age""].plot.hist(alpha=0.5,color=""red"",bins=50)"	1	1
data[['Cabin_numerical', 'Ticket_numerical', 'Family_size']].isnull().mean()	1	1
all.iloc[891:]	1	1
"train_kaggle.corr(method=""spearman"")"	1	1
df_all.Embarked.replace('C',0)	1	1
tmp.drop(list(need_imp[ii:,0]), axis=1)	1	1
test_df_clean.loc[test_df['Age'].isnull(), 'Age'] = age_mean	1	1
dfx.items():	1	1
features['Parch'] = full['Parch']	1	1
df.isnull().sum(axis=0)	1	1
"df_train.to_csv(path_or_buf=""train_processed.csv"")"	1	1
titanic_test.replace('male',1).replace('female',2) # Converting Sex feature to numeric data.	1	1
lowest_data.select_dtypes(exclude = ['object'])	1	1
"X_test[""Embarked""].fillna(X_train[""Embarked""].mode().values[0], inplace=True)"	1	1
pd.isnull(cc[1]) and pd.notnull(cc[0]):	1	1
"test[""title""] = [i.split('.')[0] for i in test.Name]"	1	1
"data_copy.loc[:,""Age""] = data_copy[""Age""].fillna(data_copy[""Age""].median())"	1	1
df_final['MrMale'][df_final.title_level == 1] = 10	1	1
in ['Don', 'Rev', 'Capt', 'Jonkheer']:	1	1
titanic['NFare'] = 0  # Creates a feature 'NFare' and assign an initial value '0'	1	1
"full_data[""Mother""] = 0"	1	1
df.loc[ (df.Age >  36.75),                'AgeBand'] = 3	1	1
train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean()   # 各组的存活率	1	1
test_df['IsAlone'] = 0	1	1
temp['PassengerId'] = df['PassengerId']	1	1
dataFrame.loc[dataFrame['Age'].isnull(), 'Age'] = age_pred	1	1
cabinList.reset_index()	1	1
backup_set['Title'] = dataset['Title']	1	1
all_data['Age'].astype(int)	1	1
"train.loc[(train[""Age""]>16) & (train[""Age""]<=32),""Age""]=1"	1	1
test['Age'] = test['Age'].fillna(test.Age.mean())	1	1
cabin_types.append(cabin_type)	1	1
"submit.to_csv(""../working/submit22.csv"", index=False)"	1	1
"train_data[""CabinLetterG""] = 0"	1	1
combined.drop('Embarked', inplace=True, axis=1)	1	1
"titanic_train.drop([""Parch"",""SibSp""], axis = 1)"	1	1
comb['FS_medium'] = comb['Family_Size'].map(lambda x: 1 if 3<=x<=4 else 0)	1	1
"dataset_med.loc[3,3][""Age""]"	1	1
train['age'] = train['age'].fillna(train['age'].median())	1	1
predicts.append(predict['probabilities'])	1	1
submission1.to_csv('titanic.csv', index=False)	1	1
data[['FamilySize', 'Survived']].groupby(['FamilySize']).agg(['count','mean'])	1	1
data.loc[(data['Age'] > 19) & (data['Age'] <= 25), 'SortAge_2'] = 1	1	1
data.loc[data['Age']>=60,'Age']=3	1	1
train_df.drop(['Survived','PassengerId'],axis=1)	1	1
"train[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False)['Survived'].agg({'Survived': ['mean','count']})"	1	1
submission_df.to_csv('submit6.csv', index=False)	1	1
df_temp.loc[(df_temp['FareCat']==i),'Count'] = df_temp[(df_temp['FareCat']==i)]['Count']/gender_count[i]	1	1
x.astype('bool')	1	1
"train[""Survived""] #define training label set"	1	1
"df[""sex""] = df.sex.apply(lambda i : sex_dict[i] if i in sex_dict.keys() else i )"	1	1
testData.drop(labels='Cabin', axis=1,errors='ignore')	1	1
"X[""is_child""] = X[""Age""] <= 8"	1	1
test_data['Title'].copy()	1	1
df.Ticket.head(20)	1	1
df['Fare'].mode()[0]	1	1
df[0:891]['Survived'].values	1	1
"df.loc[df.Age >= 0, ""AgeF""] = ""Infant"""	1	1
all['Fare_loc'] = all.Fare.map(lambda i: np.log(i) if i > 0 else 0)	1	1
final_train['Age']	1	1
df_test['PclassEncoded'] = le_pclass.transform(df_test['Pclass'])	1	1
"test.loc[test[""Embarked""] == ""S"", ""emk_c""] = ""0"""	1	1
test_dataset.loc[test_dataset['Fare'].isnull(), 'Fare'] = test_dataset['Fare'].mean()	1	1
train2_df['Sex'] = train2_df['Sex'].map(sex_conv)	1	1
df_eclf.to_csv('SubmissionECLF.csv', header=True)	1	1
df.CabinCode.values.tolist()	1	1
traind['Faregroup'] = pd.qcut(traind['Fare'], 5, labels = [1, 2, 3, 4, 5])	1	1
test2.head()	1	1
"training.loc[training[""Title""] == ""Rev"", ""Title""] = 5"	1	1
raw_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Title', 'Ticket', 'Cabin', 'Sex', 'Embarked', 'FamilyMembers', 'FamilySize', 'Deck', 'Fare'], axis=1)	1	1
"ax[1].set_ylabel(""Survived Count"")"	1	1
cm[0][1]	1	1
dataset['Familysize']=dataset['Familysize'].map(family_mapping)	1	1
train_dataset_raw.copy(deep = True)	1	1
test_data['Cabin'].isnull().sum()	1	1
y_test[['PassengerId','Survived']]	1	1
dataset.loc[dataset['Fare']<10, 'Fare']=0	1	1
data.loc[(data.passenger_fare>26.549) & (data.passenger_fare<=26.55) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>26.549) & (data.passenger_fare<=26.55) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
dataset.drop(['Parch', 'SibSp'], axis=1,  inplace=True)	1	1
"testdat.drop(""SibSp"",axis=1,inplace=True)"	1	1
plt.hist(df_all['Age'],bins = 30,  range = [0,100],label='Wszyscy')	1	1
"survived_class.loc[""coltotal"",""rowtotal""]"	1	1
train['Shared_ticket'].iloc[i] = 1	1	1
"train_df[""Embarked""]=train_df[""Embarked""].astype(""category"")"	1	1
pd.isnull(emb):	1	1
row['Age'] <= 16 and row['SibSp'] < 2:	1	1
train['Pclass']=le_sex.fit_transform(train['Pclass'])	1	1
titanic['PC'] = (titanic['Ticks'] == 'PC').astype(int)	1	1
test['Class1_Premium'] = 0	1	1
names.loc[(names['mlle'])==1,'miss'] = 1	1	1
test['Survived_rf'] = y_test_preds_rf.astype(int)	1	1
combined.Cabin.fillna('U', inplace = True)	1	1
train_df['Ticket'].value_counts().head(20)	1	1
sex_label_encoder.transform(df['Sex'].values)	1	1
pred_df.to_csv('predictions_svm_titanic_final.csv',index=False)	1	1
"SVC_result[1][""best_score""],"	1	1
df_full['FamilySize'] = df_full['SibSp'] + df_full['Parch'] + 1	1	1
feature_columns.append((isnull_col_name, tf.feature_column.numeric_column(key=isnull_col_name)))	1	1
data[['Odd', 'Survived']].groupby(['Odd']).agg(['count','mean'])	1	1
test_csv['Age'] = test_csv['Age'].fillna(test_csv['Age'].mean())	1	1
"row[""Age""]"	1	1
df_y_predict.rename(columns = {0:'Survived'})	1	1
family[['Surname_code','Surname_count','Family_code','Family_count']],	1	1
"test_df['Title'] = test_df['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
"train.drop([""Others""], axis=1, inplace=True)"	1	1
men2_analysis[['PTitle','HasCabin','Survived']].groupby(['PTitle','HasCabin']).mean()	1	1
test['HasCabin'] = pd.Series(len(test['Cabin']), index=test.index)	1	1
concat_set.drop(drop_elements, axis = 1, inplace=True)	1	1
df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()	1	1
"combined[""t_pre""] = t_pre"	1	1
df['IK_Cl'] = 0	1	1
data.loc[(data.Fare.isnull())&(data.Pclass==1), 'Fare']=60.3	1	1
"ship[""Fare""].fillna(median_value, inplace=True)"	1	1
data_train[['Age', 'Fare']].describe()	1	1
died_male_data.shape[0]	1	1
test1['Age'] = test1['Age'].fillna(test1['Age'].median())	1	1
test_dataset.loc[(test_dataset['Age'].isnull()) & (test_dataset['Title']=='Miss'),'Age'] = 22	1	1
train_dat[['Title', 'Survived']].groupby('Title').mean()	1	1
test_data.Age.fillna(joined.Age_y, axis=0)	1	1
df2.drop(df2.columns[np.isnan(df2).any()], axis=1)	1	1
t[0] == '0':	1	1
output.to_csv('output.csv',index=False)	1	1
traindf.shape, testdf.shape	1	1
submission_df.to_csv('submit_final.csv', index=False)	1	1
submission.to_csv('pySubmission.csv', index=False)	1	1
test.drop(['Title', 'Name'], axis=1)	1	1
survived_male_data.shape[0]	1	1
train['Title']=train['Name'].str.extract(' ([A-Za-z]+)\.',expand=False)	1	1
"df_train.hist(""Survived"", by=[""age_group"",""Sex""], layout=[2,4], figsize = [10,10])"	1	1
train[['Title','Survived']].groupby(['Title'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
submission.to_csv('CNN-submission-simple-cleansing_20Layer.csv', index=False)	1	1
data_train.loc[:,'Age'].fillna(np.mean(data_train['Age']),inplace=True)	1	1
df_train.dtypes[df_train.dtypes.map(lambda x: x == 'object')]	1	1
result.to_csv('decisiontree-age-sibsp.csv', index = False)	1	1
features.append('title_cat')	1	1
model.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu', input_dim = 7))	1	1
train.loc[train['EmbarkedModified'] == 'Q', 'EmbarkedCategorical'] = 2	1	1
raw_data['FareGroup'] = pd.cut(raw_data.Fare, bins=np.arange(start=0, stop=600, step=50), precision=0, include_lowest=True, labels=False)	1	1
"train[[""Sex"", ""Fare"", ""Cabin""]].values"	1	1
test['famSize'] = test['SibSp'] + test['Parch']	1	1
full_df.loc[ full_df['Fare'].isnull(), 'Fare' ] = full_df['Fare'].mean()	1	1
dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age1'] = 1	1	1
X_tot.drop(['PassengerId','Name','Ticket'],axis=1)	1	1
train_pclass_dummies.drop(['Class_3'], axis=1, inplace=True)	1	1
X_train[['Sex', 'Embarked']].reset_index().drop('index', axis=1)	1	1
X['Title'] = X.Name.str.extract(self.regex)[0].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
name_first_place.append(i[0])	1	1
train3['Age'] = train3['Age'].fillna(train2['Age'].median())	1	1
train_data[['PassengerId','Survived']]	1	1
data.Fare.astype(float).fillna(data['Fare'].median())	1	1
titanic_train_data.loc[titanic_train_data.Cabin.str[0] == 'T', 'Cabin'] = 8	1	1
Titanic.head(2)	1	1
test_data.drop(['PassengerId','Name','Sex','Ticket','Cabin','Has Cabin','SibSp','Parch'],axis=1)	1	1
lgb_params['metric'] = 'auc'	1	1
train_df.to_csv('clean_train_nick.csv',header=True,index=True)	1	1
train_discrete.head()	1	1
df_train['Embarked'].fillna(df_train['Embarked'].value_counts().index[0], inplace=True)	1	1
combined_new['PassengerId'] = combined['PassengerId']	1	1
df.loc[ df['FamilySize'] > 4, 'isLargeFamily'] = 1	1	1
example_answer.shape	1	1
df_train[['CategoricalFare', 'Survived']].groupby(['CategoricalFare'], as_index=False).mean()	1	1
df_train['Age'].std()	1	1
training_data.copy()	1	1
"factors[""Survived""]=1"	1	1
X_train['Age'] = scaler.fit_transform(X_train['Age'].values.reshape(-1, 1))	1	1
df['age_range'] = pd.cut(df['Age'], bins, labels=age_range)	1	1
"t_num.fillna(""9999"") #there is no ticket number 9999, so use it as special number for not ticket number passenger."	1	1
"encodeVals.insert(0, ""ind_"", ind)"	1	1
"train_data.replace([""male"", ""female""], [0,1])"	1	1
X.fillna(X.Age.median(), inplace=True)	1	1
one_hot_train.isnull().sum()	1	1
FeatureDF['AgeTier'] = FeatureDF['Age'].apply(AgeMapping)	1	1
item['Pclass']	1	1
df_all['Cabin_info'] = df_all['Cabin'].apply(lambda x : str(x)[0] if not pd.isnull(x) else 'NoCabin')	1	1
test_X['Survived']	1	1
"pred_df.to_csv(""../working/predictions.csv"", index=False)"	1	1
"test_data.groupby(""Parch"").size()"	1	1
"df_test[""Fare""].mean()"	1	1
"test[""title""] = train[""title""].fillna(0)"	1	1
titanic.loc[titanic['Embarked']=='C', 'Embarked'] = 1	1	1
dataset.loc[dataset['Pclass'] == 2, 'Pclass2'] = 1	1	1
test_df['PchM'] =     test_df[['ParchBinary','Male','MasterMiss']].apply( get_malepm, axis=1 )	1	1
df_train[['Survived']]	1	1
"X_train_dataset.drop(""Result"", axis=1)"	1	1
"df_test.drop(""PassengerId"",axis=1).copy()"	1	1
TitanicTrain.Embarked.mode()[0]	1	1
np.mean(recall),	1	1
feature_dataframe['mean'] = feature_dataframe.mean(axis=1)	1	1
train.Age.fillna(29.699118).values.reshape(-1, 1)	1	1
sns.boxplot(x='Pclass',y='Age',data=titanic_train_data,ax=ax[0,2])	1	1
train_df['Lastname'], train_df['Name'] = train_df['Name'].str.split(',', 1).str	1	1
poly2.transform(eval_x)	1	1
"test.drop(columns= ""Position"")"	1	1
search_df.iloc[:1]	1	1
plt.hist(train['Fare'], 100)	1	1
"test.loc[i,""Last Name""] = l[2].strip()"	1	1
data_df.groupby('Tour')['IsWoman', 'IsChild'].transform('sum')	1	1
importances.sort_values('score', ascending=False)	1	1
data.dropna(subset=['Age'],axis ='index',how='all',inplace=True)	1	1
dt['Title'] = dt['Title'].map(map_title)	1	1
data_x.append([sex, age, sib, parch, pclasss, depart_c, depart_q, depart_s, fare])	1	1
df['Group_Size'] = df.apply(lambda x: modify_group_size(x,ticket_numbers), axis=1)	1	1
data['Without_Age'] = data.Age.apply(lambda x: 0 if x>0 else 1)	1	1
df_combined.groupby('Salutation')['Age'].mean()	1	1
cost_history.append(cost)	1	1
frame['Sex'] = frame.Sex.map({'female': 0 ,  'male': 1}).astype(int)	1	1
"titanic_df['Family'] =  titanic_df[""Parch""] + titanic_df[""SibSp""]+1"	1	1
"df_train[""NameLen""] = df_data[""NameLen""][:891]"	1	1
df['Tribord']=0	1	1
plt.hist([survived['Age'],titanic['Age']],bins=20,stacked =True,label=['Survived','total'])	1	1
plt.hist(ageOfMissWithoutParch)	1	1
all['Cabin'] = [str(cname)[0] for cname in all.Cabin ]	1	1
train_data['Family'] = train_data['SibSp']+train_data['Parch'] +1	1	1
final.to_csv('results.csv', index=False)	1	1
pid.join(Survived)	1	1
"combine[1].drop(""PassengerId"", axis=1).copy()"	1	1
prediction.append(0)	1	1
tfn.values	1	1
train_predictors_numeric.merge(coded_train, left_index = True, right_index = True)	1	1
embarked.mean()	1	1
test.drop(['Name','Ticket'],1)	1	1
pd.isnull(df['Age'])	1	1
train.loc[train['FamilySize']>0,'HaveFamily']=1	1	1
"test_x[""Survived""] = a"	1	1
df1['Ticket']	1	1
iset['Name']	1	1
train_df2.info()	1	1
test['Fare']/ test['Family Size']	1	1
"titanic_test[""Title""]=titles"	1	1
combine.reset_index(drop=True,inplace=True)	1	1
df.rename(columns={'gender':'Sex'},inplace=True)	1	1
training_dataset.shape[0]	1	1
data.surname_Alone.astype(np.uint8)	1	1
df_test['SibSpBool'] = (df_test['SibSp'] > 0)	1	1
data.drop('Cabin', axis=1)	1	1
"data[""Name""] = data[""Name""].str.replace(""Ms"",""Mrs"")"	1	1
input_test.info()	1	1
coeff_df.sort_values(['Coefficient Estimate'], ascending=[0])	1	1
age_summary.reset_index()	1	1
"data_train[""Age""] = pd.cut(data_train[""Age""], agebins, labels=group_names)"	1	1
combined['IsAlone'] = combined['Family'].apply(lambda x: 1 if(x==1) else 0)	1	1
"dataset.drop(labels=[""PassengerId""], axis=1, inplace=True)"	1	1
"factors[""FamilySize""]=1"	1	1
dataframe['Age'].mean() # calculates the mean values	1	1
"titanic_train.groupby(""Embarked"")"	1	1
"plot.hist(alpha=0.5, label=""Survived"")"	1	1
"test[""Title""] = [i.replace('Dona', 'Nobility') for i in test.Title]"	1	1
"train[""Age""][train['Title'] == row['Title']].isnull().sum()"	1	1
age_train['Survived'] = [x for x in train['Survived']]	1	1
dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <=48) , 'Age' ] = 2	1	1
"model[""classifier""],"	1	1
full['Ticket'].map(dict_ticket_size)	1	1
dataset.loc[(dataset['Fare'] > 99) & (dataset['Fare'] <= 180), 'Fare']   = 5	1	1
full.index.size	1	1
tr_df['Fare']=(tr_df['Fare']-tr_df['Fare'].mean())/(tr_df['Fare'].max()-tr_df['Fare'].min())	1	1
train_data['EmbarkPort'] = train_data['Embarked'].map(embarked_mapping)	1	1
rawdata.ix[(rawdata.Embarked.isnull()),'Embarked'] = 'S'	1	1
test['Survived']=votingC.predict(X_test)	1	1
Train_data['Age'].fillna(Train_data['Age'].mean(), inplace = True)	1	1
train.SibSp.describe()	1	1
params_init_l['learning_rate'] = 0.02	1	1
grouped.index.labels[0]	1	1
predictions['MultiNeuralNetwork']=acurracy_MLP*100	1	1
classifier.add(Dense(units = second_lays_units, kernel_initializer = 'uniform', activation = 'relu'))	1	1
"df.hist(column=""Age"",bins=50)"	1	1
df.loc[(df['Age'] >= 10.367) & (df['Age'] < 20.315), 'Age'] = 1	1	1
X_Test.head()	1	1
df.to_csv('df3.csv',sep='\t')	1	1
df.drop(['Ticket', 'Name', 'Embarked','Cabin'], axis=1)	1	1
df_train.drop('Training_set', axis=1)	1	1
train_df['Sex'] = train_df['Sex'].map(sex_mapping)	1	1
train['Cabin'].count()/891	1	1
train_df.loc[:,['Age*Class', 'Age', 'Pclass']].head(10)	1	1
test.loc[(test.Fare.isnull()), 'Fare'] = P3_fare_mean	1	1
test['Fare'] = pd.DataFrame(fare_scaled)	1	1
"train[""Fare""][train.Survived == 0]"	1	1
"test[""Title""] = [i.replace('Col', 'Military') for i in test.Title]"	1	1
test.loc[test.Age >= 50,'Age'] = 5	1	1
X_one_hot.drop(['SibSp', 'Embarked_Q', 'TitleMaster.', 'Parch'], axis=1, inplace=True)	1	1
df.dropna(subset=['Age', 'SibSp'])	1	1
data.loc[data['Fare']<=cat[0],'Fare']=0	1	1
corr_coef.sort_values(by='Correlation',ascending=False)	1	1
dataset['Age'][np.isnan] = age_null_random_list	1	1
test_df[['PassengerId']]	1	1
X_test.copy(deep=True)	1	1
train.loc[(train['Pclass'] == 3) & (train['hasAge'] == 0), 'class_hasage'] = 5 #no age Pclass 3	1	1
new_test.drop('male',axis = 1,inplace = True)	1	1
search_df.drop(index = idx)	1	1
full_train_set.iterrows():	1	1
model.add(Dropout(dropout_rate))	1	1
test_data['LargeFamily'] = test_data['FamilySize'].map(lambda s: 1 if 5 <= s else 0)	1	1
data_train['Age'].astype(int).plot(kind='hist', bins=80)	1	1
sub_df[['PassengerId', 'Survived' ]].to_csv('lgb_sub.csv', index = False)	1	1
df.loc[df['Title'] == 'Miss.', 'Age'] = df.loc[df['Title'] == 'Miss.', 'Age'].fillna(mean)	1	1
test_df_clean[['PassengerId']].copy()	1	1
in [ 'Ms', 'Mlle', 'Mme', 'Mrs', 'the Countess','Lady']:	1	1
test_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'],1)	1	1
all_df.drop(['Name'],axis=1,inplace=True)	1	1
"p_data[""FamilySize""] = p_data[""Parch""] + p_data[""SibSp""] + 1"	1	1
_train.drop(['PassengerId'], axis=1, inplace=True)	1	1
full.Title.sample(10)	1	1
test_data['Age'] = test_data.groupby(['Pclass', 'Sex'])['Age'].transform(lambda x: x.replace(np.nan, x.median()))	1	1
"X_train.drop(""Surname"", axis = 1)"	1	1
df['Embarked'] = df['Embarked'].astype('category').cat.codes	1	1
"train_data.drop([""PassengerId"", ""Name"", ""Cabin"", ""Ticket""], axis = 1)"	1	1
test.drop(['PassengerId', 'Survived', 'Name','Ticket','Cabin','Embarked','title'], axis=1)	1	1
survived_sex['Rate'] = survived_sex[1]/(survived_sex.sum(axis=1))	1	1
test2.drop(['Fare', 'Pclass'], axis=1)	1	1
data.drop(data[data['Fare']> 100].index,  inplace= True)	1	1
tree.query(tmp[[62, 830]], k=6)	1	1
df_1.values	1	1
"sub.to_csv(""titanic_submission.csv"", index=False)"	1	1
training_df.as_matrix(columns=['Pclass','Sex_Index','Age_Index'])	1	1
data.surname_Taylor.astype('category')	1	1
test_X.drop(['Survived'], axis=1)	1	1
train['Prefix'] = train[['Prefix','Pclass']].apply(prefix_enumerator,axis=1)	1	1
"titanic[""Cabin""].value_counts()"	1	1
test['Age'] = pd.DataFrame(age_scaled)	1	1
data_train.drop(['PassengerId', 'Age', 'Ticket', 'Fare', 'Cabin', 'FarePP'], axis = 1)	1	1
test_id.shape	1	1
"out.to_csv(""output2.csv"", index=False)"	1	1
df['Family_Size'] = df['Parch'] + df['SibSp'] + 1	1	1
sns.boxplot(y='Age', x='Parch', ax=ax1, data=train_df, linewidth=1, saturation=5, palette=palette7)	1	1
ship['Title'].value_counts()	1	1
df.loc[df['Family_size'] >=5, 'Family_size_bin'] = 2	1	1
titanic_df.drop(['PassengerId','Name','Ticket'], axis=1, inplace=True)	1	1
titanic['Sex']=df_train['Sex']	1	1
titanic_df.groupby('Pclass').mean()['Fare'].plot(kind='bar',figsize=(15,8), ax = ax)	1	1
all_data.set_value(1266,'Deck',value=all_data.loc[1033]['Deck'])	1	1
ship['Title'] = ship['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)	1	1
result.to_csv('final1.csv', index=False)	1	1
testOrg['family'] = np.where(testOrg['famSize']==0, 'N', 'Y')	1	1
data_train.drop(columns = ['PassengerId','SibSp','Name','Ticket','Cabin','Embarked'])	1	1
train_df['Age'].values	1	1
data.append([i+891,np.argmax(predictions[i-1])])	1	1
data.drop(col_delete,axis=1,inplace=True)	1	1
training_itemList.append(getTicketType(ticket,True))	1	1
train['Fare1'] = train['Fare'].apply(combine_fare)	1	1
data.loc[(data.passenger_fare>=8.59) & (data.passenger_fare<10.5) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>=8.59) & (data.passenger_fare<10.5) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
test['c_mean'].min()	1	1
train_df.loc[(train_df['Age'].isnull())&(train_df['Title']=='Royal'),'Age'] = 43	1	1
test.loc[152,'Fare'] = fare_med	1	1
forest.transform(X_train_orig, threshold=.05)	1	1
y_train.as_matrix()	1	1
test_df['family_members'] =  test_df['Parch'] + train_df['SibSp']	1	1
data_train.corr() #correlation matrix	1	1
"full_data[""PclassXAge""]= full_data[""Pclass""] * full_data[""Age""]"	1	1
titanic_test_data.loc[titanic_test_data.Cabin.str[0] == 'E', 'Cabin'] = 5	1	1
df[['Age','Pclass','Fare', 'Parch', 'SibSp', 'Sex',  'Embarked_C', 'Embarked_Q', 'Embarked_S']]	1	1
data.loc[data['FamilySize'] > 1, 'IsAlone'] = 0	1	1
data[['Title', 'Survived']].groupby(['Title']).agg(['count','mean'])	1	1
Df.Strategy_Return.iloc[split:].cumsum().plot(figsize=(10,5))	1	1
"train_df[[""Age"", ""Title""]].dropna().groupby(""Title"").mean()"	1	1
df_Test['Training_set'] = False	1	1
train5.drop(['SibSp', 'Parch'], axis=1)	1	1
raw_test['Title'] = raw_test['Title'].replace('Mme', 'Mrs')	1	1
dataset['Fare']        =    dataset['Fare'].fillna(0)	1	1
test_copy.drop('PassengerId',axis=1)	1	1
for_age_train.drop('Age', axis=1)	1	1
X_test.drop('Name',inplace=True,axis=1)	1	1
Titanic_Master['Pclass'] = Titanic_Master['Pclass'].astype(str)	1	1
"df[""Has_Cabin""] = df[""Has_Cabin""].astype(""category"")"	1	1
test['Embarked'].values.reshape(-1,1)	1	1
"related_people.loc[related_people[""PassengerId""]==821,""RGroup""]=""Hays_M"""	1	1
train2['Age'] = train2['Age'].fillna(train2['Age'].median())	1	1
test_data_predictors.as_matrix()	1	1
test.loc[(test['Pclass'] == 1) & (test['isAlone'] == 0), 'class_alone'] = 1	1	1
data_train_input.loc[data_train['Sex']=='female','Sex'] = 2 #female	1	1
data.Fare.astype(int)	1	1
"train.loc[(train.Age.isnull())&(train.Salutations==""Master""),'Age'] = 4"	1	1
ax1.spines['right'].set_visible(False)	1	1
df.divide(df.sum(axis=1),axis=0)*100	1	1
"train[""call""] = train[""Name""].apply(find_call)"	1	1
"titanic['Embarked'].fillna('S',inplace=True) # To impute missing values in ""Embarked"" column with ""S"""	1	1
combine_cl.loc[:, Xcol + ['Age']]	1	1
test_x['PassengerId'] = test_x['PassengerId'].astype('int64')	1	1
test_data.drop(['Cabin', 'SibSp', 'Parch', 'Name', 'Ticket', 'FamilySize'], axis = 1)	1	1
evaluations.append(eval_result)	1	1
model.add(Dense(1, init='uniform', activation='sigmoid'))	1	1
sns.boxplot(x='Survived', y='Fare', data=df)	1	1
df_test_ml.drop(['PassengerId','Name','Ticket', 'Cabin'],axis=1,inplace=True)	1	1
test_data_clean_features['SiblingsSpouses'] = test_data_clean_features['SiblingsSpouses'].apply(lambda x: 1 if x > 0 else 0)	1	1
"dataset.drop(""Embarked"", axis=1, inplace=True)"	1	1
titanic_submission.head()	1	1
test['Has_Cabin'] = test['Cabin'].apply(lambda x:0 if type(x) == float else 1)	1	1
test['nLength_group'] = test['name_length'].map(name_length_group)	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Countess', 'Rare')	1	1
yt['PassengerId']	1	1
train.loc[train['Fare'].between(30.0001, 513, inclusive=True), 'Fare'] = 1	1	1
titanic_test['Title']=titanic_test.Title.replace(to_replace=['the Countess','Lady','Mlle','Dona'],value='Mrs')	1	1
"train.drop([""Name""],axis=1)"	1	1
data.Age.loc[(data.Age<0) & (data.relatives==1) & (data.Personal_Titles=='Miss')] =    data.Age[(data.Age>=0) & (data.relatives==1) & (data.Personal_Titles=='Miss')].median()	1	1
df.drop('FamilySize',axis=1)	1	1
df.groupby(['Pclass', 'Sex'])['Survived'].mean().unstack().plot(kind='bar',figsize=(13,6), fontsize=20, color=['r','b']);	1	1
X.drop(self.string_param,axis=1)	1	1
y_pred_final['Survived'].value_counts()	1	1
"test_df.set_index(""RGroup"",inplace=True)"	1	1
data.loc[ (data['Fare'] > 7.91) & (data['Fare'] <= 14.454) , 'Fare'] = 1	1	1
"titanic_training_df.loc[titanic_training_df[""Embarked""] == ""Q"",""Embarked""] = 2"	1	1
df_full['Pclass'] == 3	1	1
tt['Embarked'] = tt['Embarked'].fillna(tt['Embarked'].mode()[0])	1	1
test[['PassengerId', 'Survived_rf']].to_csv('submission_rf.csv', index = False, header = ['PassengerId', 'Survived'])	1	1
train['SingleMale'][train['Survived']==1].value_counts().sort_index()	1	1
data_frame.drop('Fare',axis=1,inplace=True)	1	1
coef_df.sort_values(by='Correlation', ascending=False)	1	1
results[['PassengerId','Survived']]	1	1
train.loc[(train['Pclass'] == 1) & (train['hasAge'] == 1), 'class_hasage'] = 1 #has age Pclass 1	1	1
submission_X['Child'] = np.where(submission_X['Age'] <= 13, 1, 0)	1	1
df.loc[(df['Age'] > 20) & (df['Age'] <= 28), 'Age'] = 1	1	1
axes[1].set_title('Class 1')	1	1
"train[""Survived""][train[""child""] == 0].value_counts(normalize = True)"	1	1
dataset['Cabin'] = dataset['Cabin'].fillna('0')	1	1
training_data.iloc[:, 0].values	1	1
train_ori.drop(['Name','PassengerId','Ticket','SibSp','Cabin','Parch'],axis=1)	1	1
age_df.loc[ (df.Age.notnull()) ]	1	1
plt.hist([df[df['Survived']==1]['Fare'],df[df['Survived']==0]['Fare']],bins=10,label=['Survived', 'Dead'])	1	1
data_train['Survived'].loc[data_train['Pclass']==2].value_counts()	1	1
test_df.replace('female', 0,inplace=True)	1	1
"in  [""fare"", ""age"", ""sibsp"", ""parch""] :"	1	1
titanic.isnull().sum()          # To get the count of missing data in each column	1	1
training_data.drop(labels='PassengerId', axis=1, inplace=True)	1	1
titanic_train.loc[train_index]	1	1
"test[""Survived""] = """""	1	1
data.loc[data.Fare > 29, 'FareBand'] = 5	1	1
train.loc[(train['Age'].isnull()) & (train['Sex'] == 'female'), 'Age'] = aveFemaleAge	1	1
test['F4'] = np.array(test['CategoricalFare'] == 4).astype(np.int32)	1	1
normalized_test.sample(10)	1	1
df_elim_cols.replace({'Sex': {'female': 1, 'male': 2}}) #replace Sex data	1	1
titanic.head(50)  #displays 50 rows	1	1
"df_test[""Alone""] = df_data['Alone'][891:]"	1	1
accuracy['logistic_regression_second_level_selected_cols'] = sum([1 if train_predictions['logistic_regression_second_level_selected_cols'].loc[i] == survived.loc[i] else 0 for i in survived.index])/791	1	1
"titanic[""Deck""] = titanic[""Cabin""].str.slice(0,1)"	1	1
train_set['Sex'] = labelencoder_x.fit_transform(train_set['Sex'])	1	1
data['Title'][index]='misc'	1	1
training_data['Cabin_8']	1	1
titanic_train[['Fare']]=imputer.transform(titanic_train[['Fare']])	1	1
X.drop('Survived', axis = 1)  #Train set contains the whole train dataset with Survived column at the end.	1	1
decks.keys():	1	1
titanic_train_df['Family'] = titanic_train_df['Familysize'].apply(famsz)	1	1
X.astype(self.dtype)	1	1
dataset.set_value(rowIndex, 'Age30to42', 1)	1	1
test_df['Title']=test_df['Name'].apply(lambda name: get_title(name))	1	1
test_data['Suffix'] = test_data['Suffix'].replace('Ms', 'Miss')	1	1
data.Personal_Titles_Royalty.astype('category')	1	1
"test[""Test""] = 1"	1	1
x_train['Age'].fillna(x_train['Age'].mean(), inplace=True)	1	1
data.sons.loc[data.PassengerId==581] = 1	1	1
df.ix[df['Fare'].isnull(), 'Fare'] = df['Fare'].mean(skipna = True)	1	1
"datacv[""Age""] = datacv[""Age""].fillna(datacv[""Age""].mean())"	1	1
df.skew()	1	1
df_full.loc[mask_noage]	1	1
df_rfc.to_csv('SubmissionRFC.csv', header=True)	1	1
test_df.combine_first(test_df.set_index('Title').Age.fillna(title_age_df.set_index('Title').Age).reset_index())	1	1
temp.loc[temp.Pclass==2]	1	1
"lone_f_in_fg_s['Age_cat'].value_counts(sort=False).plot(kind=""bar"",alpha=0.5,color='red',ax=axes[1,0])"	1	1
test['Age'].dropna()	1	1
data.apply(is_southampton_exception, axis=1).astype(float).rename('SouthException')	1	1
results.to_csv('DecisionTreeClassifier_engineered_features.csv')	1	1
big.drop(col, inplace=True, axis=1)	1	1
iset['Ticket_Spaces'] = iset['Ticket'].apply(lambda x: len(x.split()))	1	1
train.iloc[:,1:9].values	1	1
combined['Title'] = combined.Title.map(Title_dictionary)	1	1
df_predict['Minor']=z	1	1
hf['X_train'].value	1	1
testing_data.copy()	1	1
ds['Title'] = ds['Title'].replace(['Ms', 'Mme', 'Lady', 'Mlle'], 'Miss')	1	1
axes[2].bar(data.index, data, color='violet')	1	1
test.drop(['Name', 'PassengerId', 'Ticket', 'Cabin', 'Embarked'], axis=1)	1	1
df.loc[:,['Group_Category','Person_Class','Age_Missing','Survived']]	1	1
X_all['Salutation'] = X_all.apply(lambda row: row['Name'].split()[1], axis=1)	1	1
train.convert_objects(convert_numeric=True)	1	1
train[['FareBand', 'Survived']].groupby(['FareBand']).mean()	1	1
train_data.groupby('Survived').agg('count')['Age'].plot.pie(title='Survived', ax=axs[0, 1])	1	1
fare1.std()	1	1
df_main_stats_summary.describe()	1	1
np.std(cv_score_rs)/np.mean(cv_score_rs) * 100 # 0.526	1	1
"traindat[""Embarked""].fillna(""S"",inplace=True)"	1	1
test['family_size'] = test['SibSp'] +test['Parch']	1	1
train_df['Survived'] = train_df['Survived'].replace(0,-1)	1	1
data_train_all.Fare.hist(bins=20)	1	1
trainCpy.drop(['Age'], axis=1, inplace=True)	1	1
test.loc[(test['SibSp'] != 0), 'Alone'] = 0	1	1
raw_train_df.tail()	1	1
data1['FamilySize'] = data1 ['SibSp'] + data1['Parch'] + 1	1	1
"train.Title.replace(""the"", ""Nobility"")"	1	1
sns.boxplot(x='Embarked_Q', y='Age', hue='Survived', data=df3)	1	1
train_df['AgeBand'] = pd.cut(train_df['Age'], 10)	1	1
"test[""title""] = ["""" if re.search(' ([A-Za-z]+)\.', x)==False else re.search(' ([A-Za-z]+)\.', x).group(1) for x in test[""Name""]]"	1	1
test_df['Sex'] = test_df['Sex'].map( {'male': 0, 'female': 1} ).astype(int)	1	1
scores.append( votingC_hard.score(X_test, y_test) )	1	1
x_train_age.drop(['PassengerId'], axis=1)	1	1
"data[""Embarked""] = data[""Embarked""].map({'S':0, 'C':1, 'Q':2}).astype(int)"	1	1
"df_train[[""age15"",""age25"",""age50"",""age100""]]=pd.get_dummies(df_train[""age_group""], dtype=""uint8"")"	1	1
df_train.groupby(df_train.Ticket)	1	1
df['Embarked'] = df['Embarked'].apply(lambda x: embark_value(x))	1	1
"titanic_train.drop(""Survived"", axis=1)"	1	1
NotSurvivedFareData['Fare'].min()	1	1
df['Cabin'] = df['Cabin'].map(lambda c: c[0])	1	1
symbol.append('None')	1	1
train_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)	1	1
"titanic_train['Embarked'] = titanic_train['Embarked'].fillna(""S"")"	1	1
Fare.dropna()	1	1
train7['Embarked'] = train7['Embarked'].fillna('S')	1	1
dftest['Age'].dropna().astype(int).hist(bins=70, ax=axis1)	1	1
test.loc[(test.Age >= 25) & (test.Age < 35),'Age'] = 3	1	1
test_df[['Title', 'Sex', 'Age']].groupby(['Title', 'Sex'], as_index=False).max()	1	1
df.dtypes[df.dtypes == 'datetime64'].index.tolist()	1	1
test.shape[0],	1	1
"df_i.plot.hist(ax=axes, alpha=.3, bins=40, label=""survived: {}"".format(i))"	1	1
titles[0].str.contains(title).astype('int')	1	1
tr['Embarked'] =tr['Embarked'].replace('Q',3)	1	1
ax2[2].set_xlabel('Age')	1	1
l1.sum()	1	1
"train_data[""Cabin""][train_data[""Cabin""].notnull()].head(100)"	1	1
train_df_new['Survived']	1	1
data.Age.agg(['min','max','mean','std'])	1	1
df_2['Survived'] = pd.Series(y_est)	1	1
test_data.drop('TravelBuds', axis=1, inplace=True)	1	1
"dataset_train[""Survived""].groupby(pd.qcut(dataset_train[""Fare""], 5)).mean()"	1	1
"Test[""Age""]=Test[""Age""].fillna(fill_age(Test,Test_set_1_median))"	1	1
test['new_Parch'] = test.new_Parch.astype(int)	1	1
"dataset[""Title""].replace('Ms', 'Miss', inplace=True)"	1	1
train_df['FareCategorical'] = pd.qcut(train_df['Fare'], 4)	1	1
x_train.plot.hist(alpha=0.75)	1	1
data_test['Age'] = imp_age.transform(data_test[['Age']])	1	1
res_acc.append(cross_val_score(rfClass,X,y,scoring='accuracy',cv=10).mean()*100)	1	1
fpr3.append(count_fp/100.0)	1	1
sub.to_csv('sub2.csv', index=False)	1	1
cv_std.append(cv_results.std())	1	1
data.loc[(data.Fare > 17) & (data.Fare <= 29), 'FareBand'] = 4	1	1
test_df['Embarked'] = test_df['Embarked'].apply(impute_embarked)	1	1
dataset['Embarked'] = dataset['Embarked'].replace('S', 0)	1	1
X_valid.copy(deep=True)	1	1
All_X.head()	1	1
test_ds.drop('Cabin', axis= 1, inplace= True)	1	1
df.loc[the_embark_series & the_pclass_series & df.Fare.isnull(), 'Fare'] = median	1	1
test['Age'].dropna().median()	1	1
train['FareBin_Code'] = data['FareBin_Code'][:891]	1	1
df['Cabin_num1'] = df['Cabin_num1'].apply(lambda x: int(x) if not pd.isnull(x) and x != '' else np.NaN)	1	1
"titanic.loc[titanic['FamSize']== 0,'Alone'] = 1  # Populate ""Alone"" with value '1' where family size is '0'"	1	1
"titanic.loc[titanic[""Embarked""] == ""S"", ""Embarked""] = 1"	1	1
train_set_1.median()	1	1
pcclassServived.groupby('Pclass',as_index=False)	1	1
test_df['Person'] = test_df[['Age', 'Sex', 'Pclass']].apply(get_person,axis=1)	1	1
testData['Sex']=testData['Sex'].apply(lambda x : 0 if x=='male' else 1)	1	1
train['Title'].replace(['Mlle', 'Ms'], 'Miss', inplace=True)	1	1
copy.dropna(inplace=True)	1	1
temp_train['Title'] = data['Title']	1	1
dataset.loc[(dataset['Fare'] > 14.25) & (dataset['Fare'] <= 60.2875), 'FareGroup']   = 2	1	1
train.replace('female', 1)	1	1
full.groupby('Pclass')['Pclass'].count()	1	1
train.groupby('Sex')['Survived'].mean().plot(kind='barh',ax=axesbi[0,3],xlim=[0,1])	1	1
df_train.drop('Survived', axis = 1)	1	1
df2.loc['a']	1	1
"train.loc[train['Embarked'] == ""C"", 'Embarked'] = 3"	1	1
"train_df[[""Fareband"", ""Survived""]].groupby([""Fareband""], as_index=False).mean().sort_values(by='Fareband', ascending=True)"	1	1
test_df['Survived'] = 3	1	1
age_fill.get_value(('female',1),'Age')	1	1
test.drop(columns=['Name','Ticket','Cabin','PassengerId'])	1	1
dataset['Age'].astype(int)	1	1
data_train['Fsize'] = data_train['SibSp'] + data_train['Parch']	1	1
dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 3	1	1
SOCIAL_GROUP_BY_TITLES.items():	1	1
data['SibSp'].size	1	1
data_df['HasCabin'] = data_df['CabinString'].apply(lambda x: 0 if pd.isnull(x) else 1)	1	1
plt.hist(train_data.Survived[pd.Categorical(train_data.Embarked).codes==2], color = 'yellow', label='')	1	1
df.groupby('key1').mean().add_prefix('mean_')	1	1
df[['Survived']].groupby(df['Age'].apply(lambda x: f'below {threshold}' if x < threshold else f'above {threshold}')).mean().plot.bar()	1	1
deltas.append(deltas[-1].dot(self.weights[l].T)*self.activation_deriv(a[l]))	1	1
test_df['Survived'] = y	1	1
test.Age.astype(str)	1	1
df.loc[df['Family_size'] == 1, 'Family_size_bin'] = 0	1	1
full_df['Class1'] = (full_df['Pclass'] == 1).astype(int)	1	1
data['Cabin_nr'] = list(map(extract_cabin_nr, data['Cabin']))	1	1
df_test['ageband'] = pd.cut(df_test['Age'], bins, labels=group_names)	1	1
test_df['Title'] = test_df.Name.str.extract('(\w+\.)', expand=False)	1	1
"axes[1].set_title(""Number of Parents/Children Aboard"")"	1	1
pd.DataFrame.from_dict(grid_times)	1	1
Z.drop(['Pclass', 'Name', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Embarked', 'PassengerId', 'Parch_9'], axis=1, inplace=True)	1	1
df_train['cabin'].fillna(value='none', inplace=True)	1	1
train_df['Title']	1	1
test['Child'] = test.apply(lambda row: row['Age'] <= 12.0, axis=1)	1	1
"axes[1].set_title(""Title vise Survival rate"")"	1	1
test.drop('Parch', axis=1, inplace=True)	1	1
trainSet['Survived'][trainSet['Sex'] == 'male'].value_counts()	1	1
t_df.groupby('Sex')[['Survived']].mean()	1	1
dataset.drop(['PassengerId', 'Name', 'Ticket', 'Fare', 'Cabin'], axis = 1, inplace = True)	1	1
lowest.pop('PassengerId', 0)	1	1
train_data['Age'].plot(kind='density',color='green')	1	1
Y_train.transpose();	1	1
test_df.Age.describe()	1	1
"train.groupby([""Pclass""]).Survived.count()"	1	1
np.max(support)	1	1
tmp['AgeGroup'] = age_groups[sex] # index age group values	1	1
combined['Ticket']	1	1
data_train.loc[data_train['Survived']==0,'Cabin'].value_counts()	1	1
train.groupby('Embarked')['Age'].agg(['size', 'count', 'mean'])	1	1
x.Age.isnull().sum()	1	1
res_acc.append(cross_val_score(extraTreesClass,X,y,scoring='accuracy',cv=10).mean()*100)	1	1
model_type.append('RandomizedSearch Decision Tree')	1	1
data['Misc'] = data['Title'].map(lambda x: 1 if str(x) not in ['Mr', 'Miss', 'Mrs', 'Master', 'Dr', 'Major', 'Rev', 'Col', 'Capt'] else 0)	1	1
"train[""Survived""][train[""Sex""]=='female'][train[""Age""]<18][train[""Pclass""]==2].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
"df_train.pivot_table(""Name"", ""Sex"", ""Survived"", ""count"").plot(kind=""bar"", stacked=True)"	1	1
data_test['FamilyPresent'] = data_test['SibSp'] + data_test['Parch']	1	1
tit['Fam'] = tit['SibSp'] + tit['Parch']	1	1
train_test['Alone']=0	1	1
train.loc[train.Age.isnull()]       #Age = Nan( to be predicted)	1	1
missing_data1['Age']=Y4_pred1	1	1
rawdata.ix[(rawdata.Fare > 52.369), 'FareCategory'] = 5	1	1
test_df.drop(['Ticket', 'Cabin','PassengerId'], axis=1)	1	1
"train_set[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).count().sort_values(by='Survived', ascending=False)"	1	1
train[['FareRange', 'Survived']].groupby(['FareRange'], as_index=False).mean().sort_values(by='FareRange', ascending=True)	1	1
data_y.append(age)	1	1
train_data['Fare'].hist()	1	1
train['Ticket_len'].value_counts()	1	1
pd.DataFrame.as_matrix(dfTrain[['Survived']]).ravel()	1	1
"train_base.loc[:,[""Survived"",""Pclass"",""Name"",""Sex"",""Age"",""SibSp"",""Parch""]].copy()"	1	1
dataset['Age2']=0	1	1
titanic_data['Fare'] = titanic_data[['Fare','Pclass']].apply(fare_approx, axis=1)	1	1
y.fillna(0)	1	1
testdata['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)	1	1
df['Sex'] = df['Sex'].astype('category').cat.codes	1	1
features.set_index('features', inplace=True)	1	1
womanData['Age'].fillna(medianWomanAge, inplace=True, axis=0)	1	1
df['surname'] = df['Name'].apply(lambda x: x.split(',')[0].lower())	1	1
"df_train.groupby('embarked')['fare'].mean().plot(kind='bar', figsize=(10,8), title = ""Average ticket price per port"");"	1	1
"sns.boxplot(data = results, x = ""Model"", y = ""Precision"", hue = ""Scaler"")"	1	1
"train_data[""FareAbove300""] = 0"	1	1
vd['Survived'] = model.predict(vd.drop(['Survived_ind'], axis=1)).astype(int)	1	1
data.loc[(data['Fare']>cat[2]) & (data['Fare']<=cat[3]),'Fare']=3	1	1
X_full.drop(['Name', 'Ticket'], axis = 1, inplace = True)	1	1
test['Fare'].isnull().value_counts() # only one missing value in testing set	1	1
"titanic_df.groupby('Sex')['Survived'].sum().plot(kind=""bar"" ,figsize = (10,10), grid = 10 ,logy = 0, title = ""No of survivors and their sex "").set_ylabel(""Frequency"")"	1	1
age_by_sex['Age'].mean()	1	1
test.Fare.fillna(test['Fare'].mean(),inplace=True)	1	1
sns.boxplot('Ticket','Fare',data=df)	1	1
dataset['Age'].fillna(0, inplace=True)	1	1
dataset_test.head()	1	1
df.Embarked.fillna(value=(df.Embarked.value_counts().idxmax()), inplace=True)	1	1
train_df[['Embarked','Pclass', 'Sex', 'Survived']].groupby(['Embarked', 'Pclass','Sex']).mean()	1	1
my_very_first_submission.to_csv('submission.csv', index=False)	1	1
combine['Large_Family'] = (np.logical_or(combine['SibSp']>2,combine['Parch']>3))	1	1
train.set_index(index)	1	1
train_df.drop(['Cabin','Ticket'], axis = 1)	1	1
df['CategoricalFare'] = pd.qcut(df['Fare'], 4)	1	1
sb.boxplot(x='Pclass',y='Fare',data=test,width=0.9)	1	1
submit['PassengerId'] = id_2	1	1
"train_data[""SibSp""]"	1	1
train7.drop(['SibSp', 'Parch'], axis=1)	1	1
titanicTrain.iloc[i,7]=titanicTrain.iloc[i,4]+titanicTrain.iloc[i,5]	1	1
data.append(test_data)	1	1
test['Embark']=test['Embarked'].apply(lambda x:2 if x=='Q' else (1 if x=='C' else 0)) ## making value as number to help apply regression and stuff easier	1	1
"df[""Has_Title""]=(~df[""Title""].isin([""Mr."",""Mrs."",""Miss.""]))*1"	1	1
train['gender_class'] = 4 #male Pclass 1	1	1
t_df.head()	1	1
"pd.isnull(data[""Age""]).nonzero()"	1	1
survived['Pclass'].value_counts().sort_index().plot.bar(ax=axs[1], fontsize=16)	1	1
submission_test.drop(['Ticket', 'Name', 'Cabin'], axis=1, inplace=True)	1	1
ans['Survived'] = ans['Survived'].map({'Yes': 1, 'No': 0})	1	1
sb.boxplot(x='Cabin',y='Fare',data=titanic_data)	1	1
dataset['isAlone'] = 1	1	1
titanic['Cabin']=df_train['Cabin']	1	1
"train[""Fare""]=train[""Fare""].fillna(train[""Fare""].median())"	1	1
the_df['FareIsNull'] = pd.isnull(the_df.Fare).astype(int)	1	1
np.round(regressor.predict(X_test),1)	1	1
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace = True)	1	1
"train_df[""RGroup""]="""""	1	1
dataset.loc[(dataset['Fare'] > 50) & (dataset['Fare'] <= 100), 'Fare'] = 2	1	1
"df[""Fare_Band""] = df[""Fare_Band""].astype('category')"	1	1
titanic_data.loc[(titanic_data['Fare'] > 7.91) & (titanic_data['Fare'] <= 14.454), 'Fare'] = 1	1	1
train_df['FareGroup'] = train_df['FareGroup'].replace(fare_map)	1	1
original_gendersubmission.head()	1	1
check_model['Age'] = check_model['Age'].fillna(check_model['Age'].mean())	1	1
test_ds.drop('PassengerId', axis= 1)	1	1
df.Ticket.isnull().sum(axis=0)	1	1
"full[""Fare""] = full[""Fare""].fillna(full[""Fare""].median())"	1	1
whole.set_value(268,'Fid',73) #display(whole[whole.Name.str.contains(r'Strom|Persson|Lindell')])	1	1
fare1.mean()	1	1
test_copy['Pclass_Category'] = test_copy['Pclass_Category'].astype(int)	1	1
title_by_sex2.fillna(0)	1	1
train['Age'] = age_imputer.fit_transform(train[['Age']])	1	1
train['FareBand'] = train[['Fare','Pclass']].apply(fare_bander,axis=1)	1	1
test_data.drop(labels='PassengerId', axis=1, inplace=True)	1	1
titanic.groupby(['Pclass', 'Embarked'])['Fare'].describe()	1	1
df['embarked_T'] = df.apply(lambda x: 2 if str(x['Embarked']) == 'Q' else x['embarked_T'], axis=1)	1	1
"titanic_training_data[""Age""] = titanic_training_data[""Age""].fillna(titanic_training_data[""Age""].median())"	1	1
"train_data[""Title""][train_data[""Title""].str.contains('Dr|Rev|Col|Major|Capt|Jonkheer|Sir|Lady|Don|the Countess')] = ""Rare Title"""	1	1
data['Embarked'].groupby(data['Embarked']).count()	1	1
"test.loc[test['Cabin'].str.len() == 1.0, 'CabinN1'] = ""999"""	1	1
train[['Pclass', 'Deck']].groupby('Pclass')['Deck'].mean()	1	1
dataset.iloc[:, 2:]	1	1
train_d[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(by='Survived',ascending=False)	1	1
submission.to_csv('submission_201804062319.csv', index=False)	1	1
results.head(10)	1	1
titanic_data.loc[titanic_data['FamilySize'] == 1, 'IsAlone'] = 1	1	1
model.add(Dense(512, activation='relu',input_shape=(n_cols,)))	1	1
"data[""Age""] = data[""Age""].fillna(data[""Age""].mean())"	1	1
j.drop(['SibSp','Parch'],axis=1)	1	1
unique_groups[0]	1	1
test_data.drop(['Dataset', 'PassengerId', 'Survived'], axis = 1)	1	1
df[['surname', 'Name']].groupby('surname').count().rename(columns={'Name':'count'})	1	1
out['Survived'] = clf.predict(testing_data())	1	1
train_data['SibSp'][np.isnan(train_data['SibSp'])] = int(mean_SibSp) + 1	1	1
tit_df_test.drop(['SibSp','Parch'],axis=1,inplace=True)	1	1
data_no_nan['Embarked'] = data_set['Embarked'].fillna('S')	1	1
train.drop(columns='Survived').as_matrix(columns=None)	1	1
"evaluation[""Survived""]=predictions"	1	1
rfc_submit.to_csv('rfc_submit.csv', index=False)	1	1
train_missing_data.head(5)	1	1
testset.drop(['Name', 'Ticket'], inplace=True, axis=1)	1	1
full_dataset.iloc[881:,:]	1	1
train[['Captain','Colonel','Countess','Don','Dr','Jonkheer','Lady','Major','Master','Miss','Mlle','Mme','Mr','Mrs','Ms','Rev','Sir']] = pd.get_dummies(train['Title'])	1	1
ages['Age'] = pd.cut(ages['Age'],bins)	1	1
"df1[[""PassengerId"",""Pclass"",""Sex"",""Age"",""SibSp"",""Parch"",""Fare"",""Embarked""]]"	1	1
data_train['Survived'].loc[~(data_train['Parch']==0) & (data_train['SibSp']==0)].value_counts()	1	1
"related_people.loc[related_people[""PassengerId""]==249,""RGroup""]=""Beckwith_M"""	1	1
test_df.drop(columns=['Survived'], axis=1)	1	1
np.mean(knc_scores)	1	1
"related_people.loc[related_people[""PassengerId""]==756,""RGroup""]=""Hamalainen_M"""	1	1
train.loc[Qtest_n+1:891, quick_feature].values	1	1
df.loc[:,'Survived']	1	1
test.loc[(test['Age'].isnull()) & (test['Sex'] == 'female'), 'Age'] = aveFemaleAge	1	1
train['Fare'].groupby(train['Fare']).sum(),labels=['Category 0','Category 1','Category 2','Category 3'],	1	1
train_new.Survived.copy()	1	1
combined_df.loc[:890, cols]	1	1
test['NameLength'] = test['Name'].apply(len)	1	1
X_train.groupby(['Fare'])['Fare'].count() / np.float(len(X_train))	1	1
"dataset_train[""Survived""].groupby(dataset_train[""Age""].isnull()).mean()"	1	1
"sns.boxplot(x=""Survived"", y=""Fare"", data=df)"	1	1
titanic_df['Alone'].loc[titanic_df['Alone'] == 0] = 'Alone'	1	1
df_test['SexN'] = df_test['Sex']	1	1
data['Travel_Alone']=data.apply(travel_alone,axis=1)	1	1
df.fillna(df.groupby('A')['B'].mean(), inplace=True)	1	1
Z['Age'].fillna(Z['Age'].median(), inplace=True)	1	1
"X.drop(""Ticket"",axis=1,inplace = True)"	1	1
"train_df[[""FamilySize"", ""Survived""]].groupby([""FamilySize""], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
"c_data.drop([""PassengerId"", ""istrain"", ""Age""], axis=1, inplace=True)"	1	1
"df[""Age""][(df[""Title""] == title) & df[""Age""].isnull()] = avg_title_age[title]"	1	1
ds['AgeType'] = ds['Age'].apply(age_categories)	1	1
test.drop(columns=['Name', 'SibSp', 'Parch', 'Ticket'], inplace=True)	1	1
"dfcopy.join(pd.get_dummies(dfcopy.Sex)).drop([""Male""], axis=1)"	1	1
train_label.corr() >.8	1	1
d.dropna(axis=0)	1	1
row['GroupID'] in femDie:	1	1
train_df.ix[train_df['Fare']>200]	1	1
train.replace({'female':1,'male':0, 'S':1, 'C':2, 'Q':3}, inplace=True)	1	1
train_df['EmbarkedFill'] = train_df['Embarked']	1	1
"X_test[""Sex""] = X_test[""Sex""].astype('category').cat.codes"	1	1
train['CabinKnown'] = train['Cabin'].apply(has_cabin)	1	1
dataset['Title'] = dataset['Title'].replace('Rev', 'Officer')	1	1
df_age_fare.apply(my_norm)	1	1
df_train['ageband'] = pd.cut(df_train['Age'], bins, labels=group_names)	1	1
"test_df.loc[test_df[""Fare""].isnull()]"	1	1
data.groupby(['Title1'])['Age'].mean()	1	1
bin_fsize.transform(raw_test['FamilySize'])	1	1
"df.loc[:,c] = df.loc[:,c].astype(""category"")"	1	1
test_set[['Pclass','Sex','Embarked','IsAlone','Title','FareBin','AgeBin']]	1	1
data['Title'] = data['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
allset.loc[allset['Age']<=1,'AgeBand']='Infant'	1	1
"test_data[""Age""]=test_data[""Age""].astype(int)"	1	1
full_train_set.loc[(full_train_set['Fare'] > i) & (full_train_set['Fare'] <= i + fare_step)]	1	1
data_train['AgeBand'] = pd.cut(data_train['Age'], 6)	1	1
df_analysis.dropna().groupby('deck_mod').agg({'Survived':['mean','sem']})	1	1
train_test.loc[(train_test.Age.isnull())&(train_test.Initial=='Miss'),'Age']=22	1	1
df['no_family'] = df['family_size'].apply(lambda s: 1 if s==1 else 0)	1	1
df_lre.head()	1	1
df_train[['SibSp', 'Survived']].groupby(['SibSp']).mean()	1	1
test5['Fare'] = np.log1p(test5['Fare'])	1	1
WholeDataSet.drop(['PassengerId','Ticket', 'Name'], axis=1, inplace=True) # remove the data we don't know how to deal yet	1	1
test['Fare_0'] = test['Fare'].fillna(0)	1	1
tumveri.head()	1	1
testd['Embarked'] = testd['Embarked'].map(embarked_mapping)	1	1
df['Rare']=0	1	1
data_train_x.drop(['PassengerId','Survived'], axis = 1,inplace = True)#drop passengerıd and survived because they will not use while training	1	1
comb.groupby('Ticket').size()	1	1
"test.loc[i, ""Alone""] = 1"	1	1
"test.loc[i, ""Alone""] = 0"	1	1
accuracy_gnb_kfolds.append(accuracy_gnb_kfold)	1	1
train_data['Age']=train_data[['Age','Pclass']].apply(impute_age, axis =1 )	1	1
df_all['IsAlone']=df_all.apply(lambda x: 1 if x['Family_size']==1 else 0, axis=1)	1	1
train_data['Cabin_F'] = Cabin_dummy['F']	1	1
test['CategoricalAge'] = pd.cut(test['Age'],5)	1	1
test_df.drop(['Lastname'], axis=1)	1	1
k.append('Don.')	1	1
"df[""Ticket""] = Ticket"	1	1
Test_Master['FamilySize'] = Test_Master['SibSp'] + Test_Master['Parch'] + 1	1	1
testOrg['Sex'] = np.where(testOrg['Sex']=='female', 0, 1)	1	1
train_df[['Pclass','Survived']].groupby('Pclass', as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
df['Age'] = df.apply(lambda x: age_imputation(x,age_lookup), axis=1)	1	1
"test[""SibSp""] + test[""Parch""] + 1"	1	1
dataset['Cabin']	1	1
train_df['Sex'] = label_encoder.transform(list(train_df['Sex']))	1	1
test_df.loc[train_df['Age']>64,'Age']=4	1	1
df_clean.dtypes	1	1
"X_test[""Fare""] = (X_test[""Fare""] - X_test[""Fare""].mean())/X_test[""Fare""].std()"	1	1
"combined[""Sex""] = combined[""Sex""].map(sex_mapping)"	1	1
"titanic['SharedTicket'].value_counts() # Checks the values in ""SharedTicket"" column to confirm the accuracy of imputation"	1	1
test['Family'] = test.SibSp+test.Parch+1	1	1
"dataset.loc[(dataset[""Age""] > 32) & (dataset[""Age""] <=48), ""Age_group""] = 2"	1	1
cabin_not_null.head()	1	1
"train.drop([""Title"", ""Name""], axis = 1)"	1	1
data_pruned.loc[(data_pruned['Fare'] > 50) & (data_pruned['Fare'] <= 100), 'Fare'] = 3	1	1
submission.to_csv('submissions_gbc.csv', index=False)	1	1
test['new_SibSp'] = test.SibSp	1	1
grouped2.Age.apply(lambda x: x.fillna(x.median()))	1	1
test['Ticket_group'] = np.where(test['Ticket'].str.isdigit(), test['Ticket'].astype(str).str[0], test['Ticket'].str[:1])	1	1
titanic_df['Family'] = titanic_df['Family'].astype(int)	1	1
"train[""Title""] = train[""Name""].str.extract(""([A-Za-z]+)\."",expand=True)"	1	1
test_data['Fare'] = np.log1p(test_data['Fare'])	1	1
featureRanks2['ranking'] = best_dtc.named_steps['rfe'].ranking_	1	1
"test['Cabin'].fillna(test.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace=True)"	1	1
data_pruned.loc[(data_pruned['Fare'] > 8)  & (data_pruned['Fare'] <= 20), 'Fare'] = 1	1	1
train.drop(['Cabin_T'], axis=1, inplace=True)	1	1
"dataset[""Cabin""] = dataset[""Cabin""].map(cabin_map)"	1	1
df_full['FareBin'] = pd.qcut(df_full['Fare'], 4, labels=False).astype(int)	1	1
train.shape[1] # get the number of columns fro index one	1	1
train_df.describe(include=['object'])	1	1
model.add(Dense(64, input_dim=input_length-1, activation='softplus'))	1	1
output['Survived']	1	1
df_test.drop(['PassengerId', 'Name',  'SibSp', 'Parch', 'Ticket', 'Cabin', 'Title'], axis=1, inplace=True)	1	1
train_df.loc[(train_df['Age'].isnull())&(train_df['Title']=='Rare'),'Age'] = 45	1	1
X.describe() # sumarizing variables	1	1
test_data['Fare'] = test_data['Fare'].interpolate()	1	1
df2['Age'].values.reshape(-1,1)	1	1
rf_feat_red.transform(rf_red_train)	1	1
X_test['FamilySize']	1	1
dataset.loc[~dataset['Fare'].isnull(),'Fare'].unique(): # For each fare	1	1
train['proba'] = pred	1	1
"X[""Title""] = X[""Name""].str.extract(r'\w+,\s+([\w\s]*)\.\s+.*', expand=True)"	1	1
named.replace(' ', '')+'.'	1	1
rcParams['figure.figsize'] = 15,6	1	1
"test['Title']=test['Title'].map({""Mr"": 1, ""Miss"": 2, ""Mrs"": 3, ""Master"": 4, ""Rare"": 5}).astype(int)"	1	1
"test[""Title_autre""] = test[""Title""] == 'Autre'"	1	1
pclass[2]	1	1
pdModelos.loc[row,'Accuracy']= pipe.score(X_test, y_test)	1	1
train.Survived.groupby(age_group)	1	1
x_test['Family'] = x_test ['SibSp'] + x_test['Parch']	1	1
np.append(X_text_feat, X_column_feat, axis=1)	1	1
data.distinction_in_tikect_Low.astype('category')	1	1
"age[""s_rate""] = age[""sum_of_survivor""] / age[""count_of_age""]"	1	1
train.drop(['Name','Ticket','PassengerId'],axis = 1)	1	1
test.drop(['PassengerId'],axis = 1)	1	1
titanic_test_data['Fare'].values	1	1
train.drop(columns=['Cabin','Ticket'])	1	1
all_age.groupby(col)	1	1
"train_df.groupby([""Sex"", ""Pclass"", ""Survived""]).size()"	1	1
dataset.loc[dataset['CabinNumber'] == 0, 'CabinBand'] = 1	1	1
train_df_X.drop('Survived', axis=1)	1	1
df_test.drop('Name Ticket Embarked'.split(), axis=1, inplace=True)	1	1
data_test.replace(to_replace='male',value=1,inplace=True)	1	1
"full_data.loc[ full_data['Fare'] > 31, 'Fare'] 							        = 3"	1	1
"plt.hist(np.log10(surv['Fare'].values + 1), color=""orange"", normed=True, bins=25)"	1	1
columns[2]	1	1
train.drop(['Age_bin','Fare_bin','Age','Fare'],1)	1	1
my_submission_SVC.to_csv('submission_svc.csv', index=False)	1	1
data.drop('AgeBand', axis=1, inplace=True)	1	1
ax0.hist(fare_original.dropna(), bins=80);	1	1
testingset['PassengerId']	1	1
df_test_load.loc[:,cols]	1	1
data_whole['Survived']	1	1
Submission['Survived']=tree.predict(test)	1	1
mapper.transform(test)	1	1
test.groupby('Embarked')['Pclass'].count()	1	1
df_train_labels.head()	1	1
testData.loc[(testData['Age']>48)&(testData['Age']<=64),'Age_band']=3	1	1
full.loc[full.Age.notnull(),:].copy()	1	1
full.isna().sum().sort_values()	1	1
drop_elementsONS.append('Age')	1	1
dataset['Sex']         =    dataset['Sex'].map({'female': 0, 'male': 1}).astype(int)	1	1
test_data.join(test_person)	1	1
"train.loc[train[""Title""] == ""Mr""].mean()[""Age""]"	1	1
original['Titles'] = titles	1	1
x_test.isnull().sum()	1	1
X_train.shape, x_test.shape, Y_train.shape, y_test.shape	1	1
"train[""TicketCategory""] = data[""TicketCategory""][:891].astype(int)"	1	1
df_train['Cabin'].unique()	1	1
et_score.mean()	1	1
x['Fare']=pd.cut(x['Fare'],bins=[-100,1,10,30,50,100,200,1000],labels=['invalid','least','less','average','abovAvg','High','veryHigh'])	1	1
dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'FareBand']   = 2	1	1
"train_data.loc[(train_data[""Fare""] >= 200) & (train_data[""Fare""] < 300), ""FareBetween200And300""] = 1"	1	1
input_df['Age'].plot(kind='density', color='green')	1	1
classifiers.append(NN_classifier)	1	1
Train_data.drop('Survived',axis=1)	1	1
data_test.drop(['Name','Cabin','Ticket'], axis=1)	1	1
df.drop(prop, axis=1, inplace=True)	1	1
embark_dummies_titanic.drop(['Q','S'], axis=1, inplace=True)	1	1
test_df.loc[test_df['Family'] == 0, 'Family'] = 0	1	1
df_test['Cabin_available'] = df_test['Cabin'].isnull()	1	1
"df_train[""Age""].std()"	1	1
titanic_df.drop(['PersonClass'], axis=1, inplace=True)	1	1
titanic['Fare'].values	1	1
combined_data.info()	1	1
"axs2[0].set_title(""People on the Titanic"", fontsize=20)"	1	1
Cabin[0] == 'F':	1	1
"train[""Cabin""] = train[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
transformed_df['Cabin_D'] = cabin.Cabin_D	1	1
titanic_train_df['Agecat'] = le.fit_transform(titanic_train_df['Agecat'].map( {'is': 0, 'child': 1, 'young': 2, 'adult': 3, 'Senior': 4}).astype(str))	1	1
dataset['Embarked'] = dataset['Embarked'].map( {'C': 2, 'Q': 1, 'S':0} ).astype(int)	1	1
X_train['Family'] = X_train['Parch'] + X_train['SibSp']	1	1
farepp_xt.div(farepp_xt.sum(1).astype(float), axis=0)	1	1
copy.copy(y_test)	1	1
data['PassengerId'] = PassengerId	1	1
training_set.iloc[:, 1].values # Survived	1	1
"copyTest_df[""EmbarkedQ""] = test_OneHotEncoded[:,2]"	1	1
train.loc[train['Age'] < 14.0, 'ageCat'] = 1	1	1
"validation_metrics[""loss""]"	1	1
data['BigFamily'] = data.FamilySize.apply(lambda s: s if s < 5 else 5)	1	1
plt.rcParams['patch.force_edgecolor'] = True #Add lines to bars in histograms	1	1
test.drop(['Sex','Embarked','Name','Ticket', 'Pclass', 'Cabin'],axis=1,inplace=True)	1	1
"titanic.loc[titanic['Sex'] == 'female', 'Sex'] = 1      # ""female"": 1, ""male"" : 0"	1	1
df['Cabin'].fillna('U0', inplace=True)	1	1
train.Fare.plot.hist()	1	1
pina_submission['Survived'] = pina_submission['Survived'].astype(np.int64)	1	1
X_data.dtypes	1	1
Z['Fare'].fillna(Z['Fare'].median(),inplace=True)	1	1
"x_train[""Pclass""].plot.hist(alpha=0.5)"	1	1
train.drop(labels=drop_columns, axis=1)	1	1
df.loc[df.Cabin=='T','Cabin']=np.NaN	1	1
titanic_df.drop(['Embarked'],axis=1)	1	1
testset['PassengerId']:	1	1
data_train['Survived'].loc[data_train['Sex']=='female'].value_counts()	1	1
train['Name'].head(20)	1	1
data['Embarked'].unique()	1	1
data[['IsAlone', 'Survived']].groupby(['IsAlone']).agg(['count','mean'])	1	1
"submission.to_csv(""kaggle_practice.csv"", index = False)"	1	1
titanic_train_test_merged['PTitle_cat']=titanic_train_test_merged['PTitle'].cat.codes	1	1
"related_people.loc[related_people[""PassengerId""]==477,""RGroup""]=""Renouf_M"""	1	1
titanic_df['Alone']	1	1
survived_sibsp['Rate'] = survived_sibsp[1]/survived_sibsp.sum(axis=1)	1	1
"test[""Sex""] = LabelBinarizer().fit_transform(test[""Sex""])"	1	1
df['Cabin'] = df.Cabin.str[0]	1	1
data_train_p.head(5)	1	1
combo.loc[combo['Embarked'].isna(), 'Embarked'] = combo.Embarked.mode()	1	1
df_train.loc[ df_train['Fare'] > 31, 'Fare'] = 3	1	1
x_test_AgeGroup.drop(['AgeGroup'], axis = 1)	1	1
"my_titanic_submission[""Survived""] = my_titanic_submission[""Survived""].astype(int)"	1	1
scores4.mean(), scores5.mean(),	1	1
data.loc[(data['Age'] < 60) & (data['Age'] > 31.9), 'Age'] = 2	1	1
data_train_split_csv.as_matrix()[:, 2:]	1	1
accuracy_ls.append(metrics.accuracy_score(y_test, y_pred, normalize=True))	1	1
"test_df[""cabin""] = test_df[""cabin""].fillna(""Z1"")"	1	1
train['Age']=train.apply(check_class,axis=1)	1	1
"train_df.drop(""Survived"", axis=1).fillna(np.nan)"	1	1
pp.hist(died_age, bins, normed=1, facecolor='red', alpha=0.5)	1	1
comb_data[['NameLength']] = np.log1p(comb_data[['NameLength']])	1	1
test.loc[test['Embarked'] == 'S', 'Embarked'] = 0	1	1
test_data.drop(var_to_drop,axis=1,inplace=True)	1	1
"train_df[""cabin""] = train_df[""cabin""].fillna(""Z1"")"	1	1
"_df.loc[idx, ""title""] = ""Countess"""	1	1
_df1['Title'] = title	1	1
data.fillna(-9999,inplace=False)	1	1
x_train.sample(10)	1	1
test.drop(['PassengerId','Name','SibSp','Parch','Fare','Ticket','Cabin'],axis = 1)	1	1
fill_age_df.loc[fill_age_df['AgeBand'] == -1, 'AgeBand'] = Y	1	1
X.copy(deep = True)	1	1
en_en['tree_clf'] = pd.DataFrame(tree_clf.predict_proba(X_train))[1]	1	1
"df[""SibSp""]"	1	1
"_df[""cabin_let""] = _df[""cabin_let""].apply(lambda i :cabin_let_dict[i] if i is not np.nan else np.nan)"	1	1
app_train.isnull().sum()/len(app_train)*100	1	1
age_bands.append(np.inf)	1	1
"processed_features.drop(""Cabin"",axis=1)"	1	1
test_data.loc[:, 'Survived'] = None	1	1
"data_train_no_zero_fares[[""Pclass"", ""Fare""]].groupby(['Pclass'], as_index=False).min()"	1	1
"train.loc[(train[""Pclass""]==3)&(train[""Survived""]==0), ""Age""]"	1	1
ticket['Ticket'] = combined_df[ 'Ticket' ].map( cleanTicket )	1	1
test.drop(['Name', 'Ticket'], inplace=True, axis=1)	1	1
data.iloc[0:891, :]     # iloc is incl:excl	1	1
"dataset.drop([""Parch"", ""SibSp"", ""FamilySize""], axis=1, inplace=True)"	1	1
test_data.drop('Title', axis=1)	1	1
test_data.drop(['Sex','Embarked'],axis=1,inplace=True)	1	1
"df[""Age_Band""] = np.nan"	1	1
df_train['Age'] = df_train[['Age', 'Pclass']].apply(train_imputer, axis=1)	1	1
ax[0].set_title('Sex and Age vs Survived')	1	1
"subm_df.to_csv(""subm""+ now +"".csv"",index=False)"	1	1
sns.boxplot(x='Sex', y='Fare', hue='Survived', data=train);	1	1
train_df.astype(float).corr()	1	1
rawdata.ix[(rawdata.Age >= 25) & (rawdata.Age < 51), 'AgeCategory'] = 3	1	1
pdf['IsMale'] = pdf['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
train_df.loc[:, ['Age*Class', 'Age', 'Pclass'] ].head(10)	1	1
full_set.info()	1	1
X_train['surviving_father_husband'] = X_train[['surname', 'Pclass', 'person']].apply(surviving_father_husband, axis=1)	1	1
data.drop(['Cabin', 'Cabin_M'], axis = 1)	1	1
ax1.hist(train_data['Pclass'], bins = 20, alpha = .50,edgecolor= 'black',color ='teal')	1	1
titanic_data.loc[titanic_data['FamilySize'] == 2, 'Couple'] = 1	1	1
"data.drop(""PassengerId"",inplace=True, axis=1)"	1	1
train.Fare.round().astype(int)	1	1
family_df.loc[(family_df.FamilySize>2)&(family_df.FamilySize<=4),'FamilyLabel'] = 'Small'	1	1
dataset['Title'].head()	1	1
x_test_test_AgeGroup.drop(['AgeGroup'], axis = 1)	1	1
"train[""Embarked_S""] = False"	1	1
submission.to_csv('titanic_mvp_1_19_04_2018.csv', index=False)	1	1
train.groupby([variable])[variable].count().sort_values(ascending = False).index[0]	1	1
df_full['FareOrig'] = df_full['Fare'] * df_full[fare_scaler]	1	1
df_test.drop(['Age', 'AgeBin'], axis=1)	1	1
train['A4'] = np.array(train['CategoricalAge'] == 4).astype(np.int32)	1	1
test_df_x['Fare'] = test_df_x['Fare'].fillna(test_df_x['Fare'].mean())	1	1
matplotlib.rcParams['figure.figsize'] = (12,6)	1	1
train_scores.append(np.mean(train_scores))	1	1
dt['Title'] = dt['Title'].replace('Mlle', 'Miss')	1	1
"new_df[""Age_Pclass""] = normalize( new_df[""Age_Pclass""] )"	1	1
age_test.groupby(['title']).mean()	1	1
data['Pclass_1'] = data.Pclass_1.apply(lambda x: int(x))	1	1
test_set.drop('Parch', axis=1, inplace=True)	1	1
"df[""Sex""] = df[""Sex""].astype('category')"	1	1
data['Fare_Per_Person']=data['Fare_Per_Person']*0.001	1	1
sns.boxplot(x='Survived', y='Age', data=titanic_train, ax=ax1)	1	1
y_pred_class.eval(feed_dict={x_data: x_test_batch,tf_keep_prob: 1.0}).astype('int').flatten()	1	1
x_test.loc[x_test['Fare'].isnull()]['Pclass']  # determine a Class for this passenger	1	1
dataset['Name'] = dataset['Name'].replace('Ms', 'Miss')	1	1
female_temp['AgeBucket'] = female_temp['Age'].apply(lambda x: x//10)	1	1
"dftrain[""Age""].isnull().sum()"	1	1
X_train.append(X_test, ignore_index=True)	1	1
one_hot_data.drop(['Pclass', 'Sex', 'Embarked'], axis=1)	1	1
train_data.drop('Cabin', axis = 1, inplace = True)	1	1
train_ds.describe()	1	1
"sur[""Age"" ].plot(kind='hist',alpha=0.5,color='red',bins=11)"	1	1
"join[""Test""].value_counts()"	1	1
"data_copy[""Fare""] = data_copy[""Fare""].fillna(data_copy[""Fare""].median())"	1	1
svc_prediction.astype(int)      #prediction compute from the test dataset	1	1
"train[""Title""] = [i.replace('Capt', 'Military') for i in train.Title]"	1	1
df['Title']=df.Name.map(lambda x: getTitle(x))	1	1
titanic_train.drop(columns=['Survived','Embarked','Cabin','Name','Ticket','PassengerId'],axis=1)	1	1
"train[""TicketNum""] = train[""TicketNum""].apply(pd.to_numeric)"	1	1
data_train.loc[data_train['Cabin'].isnull(),'Cabin']=0	1	1
row['Age'] <= 6.5 and row['Embarked'] == 'S':	1	1
train.join(train_embarked_dummies)	1	1
finaldf['Survived'] == target	1	1
df['Title'] = df.Name.apply(lambda x: re.search(' ([A-Z][a-z]+)\.', x).group(1))	1	1
"train[""Age""]=AgeTypeTrain"	1	1
etc_reduced_train.drop(drop, axis = 1, inplace = True)	1	1
"models.append(( ""NB"" , GaussianNB()))"	1	1
models.append('LogisticRegression')	1	1
allset['AgeBand']=pd.qcut(allset['Age'],4)	1	1
"data_test[""Age""]=data_test['Age'].fillna(data_test['Age'].median())"	1	1
ax[0]	1	1
data['Embarked'] = data.Embarked.astype(int)	1	1
x['Group_Category']	1	1
test_df.join(dummy[['PClass_1', 'PClass_2']])	1	1
df['IsAlone'] = [(1 if x == 1 else 0) for x in df.NumFamily]	1	1
"data[""Age""].hist(color='teal', alpha=0.6)"	1	1
train_df.Embarked.fillna('S',inplace=True)	1	1
df['log_fare'] = df.fare.apply(lambda x: np.log1p(x))	1	1
Test['caF'] = Test['Cabin'].map({'A':0,'B':0,'C':0,'D':0,'E':0,'F':1,'G':0,'T':0,'U':0}).astype(int)	1	1
"combined_df[""Embarked""].value_counts()"	1	1
Parch.plot.hist(alpha=0.5,color='blue',bins=50)	1	1
test_df.loc[test_df.Title == 'Mlle', 'Title'] = 'Miss'	1	1
data_replaced_ages.loc[data_replaced_ages['Cabin'].isnull(), 'Cabin_Status'] = 0	1	1
dataset.groupby(['Pclass', variable]).size()[2]	1	1
all_data.loc[all_data['data_label'] == 'train', :]	1	1
sns.boxplot(data=train, x='Pclass', y='Age')	1	1
test.loc[test['Fare']>50,'ExpensiveTickets'] = 1	1	1
test_df[['Fare', 'Pclass_1', 'Pclass_3', 'Sex_female', 'Embarked_C', 'Embarked_S', 'HasCabin', 'IsAlone', 'Title_Master', 'Title_Miss', 'Title_Mr', 'Title_Mrs']]	1	1
submission.to_csv('submissions_xgb.csv', index=False)	1	1
df_all['Family_size']=df_all['SibSp']+df_all['Parch']+1	1	1
df.Name.replace(['Lady', 'the Countess', 'Mme'], 'Mrs', regex = True, inplace = True)	1	1
"test[""Age""][np.isnan(test[""Age""])] = test_rand"	1	1
test['Survived']=a	1	1
data_test.loc[data_test['FamilyPresent']>0,'FamilyPresent'] = 1	1	1
plt.hist(train_data.Age[(train_data.Survived == 1)], bins= 15, alpha = 0.4, color = 'b', label = 'After')	1	1
dict_K['KNN'] = get_acc(x_train,y_train,classifier)	1	1
"test_mod.groupby([""Pclass""]).Fare.median()"	1	1
footballers.loc[:, ['Acceleration', 'Aggression', 'Agility', 'Balance', 'Ball control']]	1	1
trainCpy.head()	1	1
result.to_csv(f'{OUTPUT_DIR}results.csv', index=False)	1	1
df_train['AgeNull'] = df_train['Age'].isnull()	1	1
train.loc[train['MissingAge'] == 0, :]	1	1
train_df['Age'] = pd.cut(train_df['Age'], bins=[0,12,40,80, 250], labels = ['Child', 'Young', 'Old', 'Missing'])	1	1
test['Survived_svm_wtd'] = test['Survived_svm']*recall_svm	1	1
test_df['Embarked'] = test_df['Embarked'].map( {'Q': 0, 'S': 1, 'C': 2} ).astype(int)	1	1
train['Sex'].loc[train['Sex'] == 'male'] = 0	1	1
pclass.corr()	1	1
"predictions.to_csv(""result.csv"", index=False)"	1	1
"df[""Embarked""] = lb.fit_transform(df[""Embarked""]) # Substitutes 'S', 'C' and 'Q' by float values to allow the decision tree to run"	1	1
combined_features.drop('Name', axis=1, inplace=True)	1	1
test_df.drop(['PassengerId'], axis = 1).values	1	1
train_data.loc[train_data.Age.isnull(), 'Age'] = train_age_rand	1	1
X_test['Age'] = test_df['Age']	1	1
h['Survived']=m.predict(p)	1	1
train['Fare'].fillna(train.groupby('Pclass')['Fare'].transform('median'), inplace=True)	1	1
Y_test.count()	1	1
inputds['Sex']=le.fit_transform(inputds['Sex'])	1	1
df['Fare_Range']=pd.qcut(df['Fare'],12)	1	1
dataset.loc[:, dataset.columns != 'Survived']	1	1
combined_data.Cabin.fillna('U')	1	1
X_train[ 'FamSize'] = train_df['FamSize'].map(label_dict).astype(int)	1	1
train.groupby('Parch').mean()	1	1
train_data['Single'] = train_data.FamilySize.apply(lambda x: 1 if x == 1 else 0)	1	1
plt.hist([df_survived.Age.dropna(), df_died.Age.dropna()], rwidth = 0.95, stacked = True, color = ['xkcd:blue', 'xkcd:red'], label = ['Survived', 'Died'])	1	1
testID['PassengerId']	1	1
raw_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean()	1	1
train.loc[train['Cabin'].str.len() == 5.0, 'CabinL'] = train['Cabin'].astype(str).str[2]	1	1
test.drop(['Name', 'Sex', 'Age', 'SibSp','Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked','Deck', 'FareBins']          ,inplace=True,axis=1)	1	1
train_df.loc[(train_df.Fare.isnull()), 'Fare'] = 0.0	1	1
df_to_submit.PassengerId.astype(np.int32)	1	1
var.append(x)	1	1
X.loc[(X['Fare'] > 31) & (X['Fare'] <= 99), 'Fare']   = 3	1	1
df_test.loc[ df_train['Age'] <= 16, 'Age'] = 0	1	1
predict_df.to_csv('prediction.csv', index=False)	1	1
"titanic['title'] = titanic['Name'].apply(lambda x: x.split("","")[1].split(""."")[0].strip())"	1	1
"train['CabinN3'] = ""999"""	1	1
"train_data.drop(""Pclass"", axis=1, inplace=True)"	1	1
train_df[['Title','PassengerId']].groupby('Title', as_index = False).count()	1	1
train['Fare'].fillna(grouped['Fare']['S'], inplace=True)	1	1
grid_searches[0].predict(Xtest)	1	1
"data_train[""Desk""] = data_train[""Desk""].apply(lambda x: 0 if type(x) == float else desk_dict[x])"	1	1
np.sum(np.abs(validation-validation_prediction))/len(validation)	1	1
X['Elderly'] = np.where(X['Age'] >= 50, 1, 0)	1	1
family['Surname'] = full.Name.map(parse_surname)	1	1
df['Age_bin'] = pd.cut(df.Age.astype(int), 5, labels = [0,1,2,3,4]).astype(int)	1	1
age_train.replace(1.0, 1)	1	1
whole.set_value(137,'Fid',83) # Beckwith, Monypeny (Newsom)	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Dr', 'Rare')	1	1
train_df.iloc[:,[2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]	1	1
test_d['Title']=test_d['Title'].replace([' Mlle',' Ms',' Mme',' Lady'],' Mrs')	1	1
test_ToPred['Cabin'] = titanic_df['Cabin'].astype(str).str[0]	1	1
df.ix[df[column] != 1e9, df.notnull().all()]	1	1
"db.loc[db[db['Name'].str.contains(title) & (db['Age'].isnull())].index, 'Age'] = df[""Age""][df['Name'].str.contains(title)].median()"	1	1
"df_test[""age_norm""].hist()"	1	1
"xgb_submit_dataframe[""PassengerId""] = titanic_test_dataframe[""PassengerId""].copy()"	1	1
df['Sex'] = le.transform(df['Sex'])	1	1
train_data.drop(Columns_to_drop, axis=1)	1	1
scale.transform(X_test10)	1	1
dfTest['Ticket']	1	1
"test_data.drop([""Name"", ""PassengerId"", ""Cabin"", ""Ticket""], axis = 1)"	1	1
df_tmp['AgeAdj'] = df_tmp['Age']	1	1
dataset['Title'] = dataset['Title'].replace('Mrs', 4)	1	1
train.head(5)          #Cleaned Dataframe	1	1
train.groupby(['SibSp'])[['Survived']].mean()	1	1
"train.loc[np.isnan(train['Age']), ""Age""] = rand_age"	1	1
df_train.join(family_one_hot)	1	1
lastname_df.set_index('LastName')['Count'].to_dict()	1	1
family[ 'Family_Small' ]  = family[ 'FamilySize' ].map( lambda s : 1 if 2 <= s <= 3 else 0 )	1	1
df.drop(['Name', 'Ticket', 'Cabin', 'Sex', 'Fare', 'Age'], axis=1)	1	1
data['Pclass'].value_counts().plot.bar(ax=ax[0])	1	1
train['Embarked'] = train['Embarked']	1	1
df_test.drop(features_drop, axis=1)	1	1
dataTest.drop('Cabin', axis = 1, inplace = True)	1	1
"train_data[[""AgeRange"", ""Survived""]].groupby(""AgeRange"", as_index = False).mean().sort_values(by = ""Survived"", ascending = False)"	1	1
"test_data[""Sex""]= test_data[""Sex""].map({""male"": 1, ""female"": 2})"	1	1
"test_data.groupby(""SibSp"").size()"	1	1
test_lavel['Survived'].values	1	1
sns.boxplot(y = 'Age', x = 'Survived',data = titanic_train, palette='coolwarm')	1	1
"train_data['Embarked'].fillna(""S"", inplace=True)"	1	1
dummy_train.head()	1	1
test_data['Fare'] = test_data['Fare'].fillna(14.45)	1	1
"data[""Survived""] == 0"	1	1
models['set4']['num_scaling'] = 'std_scaler'	1	1
"data_set[""Age""] = data_set.groupby(['Pclass','Title'])[""Age""].transform(lambda x: x.fillna(x.mean()))"	1	1
combine['Sex'] = combine.Sex.astype('int')	1	1
test_ds.drop(['SibSp', 'Parch'], axis= 1, inplace= True)	1	1
"dataset_train[""Survived""].groupby(dataset_train[""Sex""]).mean()"	1	1
test['Honorific']=test['Honorific'].fillna('unknown')	1	1
final_test_data['Title_Honorific'] = 0	1	1
k.append('Mr.')	1	1
dt.loc[(dt['Age']>16)&(dt['Age']<32),'Age']=1	1	1
"df.loc[df[""Title""]==""Ms"", ""Title""] = ""Miss"""	1	1
df_combined.drop('Salutation')	1	1
test_data.fillna(test_data.mean(),inplace=True)	1	1
training['Age'].fillna(training['Age'].median(),inplace=True)	1	1
X_validation['missing_values'] += X_validation[col + '_missing_data']	1	1
"tmp_train[""Cabin_I""].value_counts()"	1	1
test['Title']=test['Title'].replace('Ms', 'Miss')	1	1
"dtc3_survivors.to_csv(""dtc3_survivors.csv"", index=False)"	1	1
"df_test[""TitleCat""] = df_data[""TitleCat""][891:]"	1	1
data['Cabinmates_Survived'] = data.apply( lambda x: cabinmates_survived_dict.get(x.Cabin), axis = 1)	1	1
data.Fare.fillna(-0.5)	1	1
features['Fare'] = normMinMax(features['Fare'])	1	1
df['FarePerPerson'] = df['Fare'] / df['FamilySize']	1	1
"testing_df[""PassengerId""],"	1	1
"train_df[""IsAlone""] = [1 if i<2 else 0 for i in train_df.FamilySize]"	1	1
test['Sex']=test['Sex'].transform(lambda s: (0 if s=='female' else 1))	1	1
titanic.iloc[1043,9] = 8.05	1	1
dataset['EditedAge'][rowIndex] <= 29:	1	1
"data2['Title'] = data2['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
X[3] = X[0] + X[1]	1	1
"train[[""Sex"", ""Survived""]].groupby(['Sex'],as_index=False).mean()"	1	1
test['Embarked']=test['Embarked'].fillna('S') # The most common value!	1	1
family_df_tr.head()	1	1
tmp_scaled.drop('Embarked',axis=1)	1	1
comb['EC'] = comb['Embarked'] == 'C'	1	1
df[['Age', 'Pclass', 'Sex', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Salutation']]	1	1
"metod [""gd""=gradient_descent or ""adam""]"	1	1
"data_df.loc[(data_df[""Age""] > 64),  'Age_Grouped'] = 4"	1	1
df_test['Embarked'] = pd.to_numeric(df_test['Embarked'])	1	1
train_df.Age.fillna(train_df.Age.median(),inplace=True)	1	1
"df_train.dropna(subset=[""Embarked""])"	1	1
raw_train[['SibSp', 'Survived']].groupby('SibSp', as_index=True).mean()	1	1
features['Fare'].apply(lambda x: np.log(x + 1))	1	1
test['Fare']=test.Fare.fillna(test.Fare.median())	1	1
"subm.to_csv(""Submission.csv"")"	1	1
score_df.sort_values(by=0,axis=1)	1	1
output.to_csv('assignment2_forest.csv', index=False)	1	1
row['Age'] <= 6:	1	1
model_cat.add(Dense(4, activation='relu'))	1	1
df['Title'] = df['Title'].map(lambda x:3 if type(x)==str else x)	1	1
"y_test[""Sex""]=y_test[""Sex""].apply(lambda s: people.get(s))"	1	1
"submission_df.to_csv(""submission_best_lr.csv"", sep=',')"	1	1
by_class['Survived'].count()	1	1
train_ori['CabinAssigned'] = np.where(train_ori.Cabin.isnull(), 0, 1)	1	1
ax[0].set_title('Pie plot - Survived')	1	1
original_test.shape	1	1
"data[""Embarked""] = data[""Embarked""].fillna('C') # impute missing data"	1	1
df['FareBin'] = pd.cut(df.Fare, 5, labels=False)	1	1
train_copy['High_Fare_Female'][n] = 0	1	1
Merged_data.groupby(['Pclass','Sex']).count()	1	1
classifiers.append(ab)	1	1
all_df['fare_cat'] = (pd.cut(all_df['Fare'], 50, labels = np.arange(1,51))).astype(int)	1	1
"total_result.loc[acq_in_test, ""Survived""] = (total_result.loc[acq_in_test,  acq_algs].sum(axis=1)  >= n_algs -1).astype(int)"	1	1
test_df_imputed.rename(columns={'Age_y': 'Age'}, inplace=True)	1	1
train_df['aile'].loc[train_df['aile']==0]=0	1	1
testset['Survived']=0	1	1
test_df['SecondClass']=test_df[['Pclass']].apply(get_secondclass, axis=1)	1	1
"train_df.drop([""Survived"",'PassengerId'], axis=1)"	1	1
titanic_dmy.head()	1	1
X_train['Age'].hist(bins = 70, ax = axis1)	1	1
np.sum((hx - Y))	1	1
classifiers.append(dt)	1	1
data['KnownAge']=data.apply(UnKnownAge,axis=1)	1	1
"test_df.Name.fillna(train_df[""Name""].mode()[0], inplace=True)"	1	1
"train_data[[""Parch"", ""Survived""]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
train.loc[:, features].corr(method='spearman')	1	1
train['Embarked'] = pd.DataFrame(emb_scaled)	1	1
train['SibSp'].value_counts().sort_index().plot.bar()	1	1
"axs[0].set_title(""Train"")"	1	1
dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare_Band'] = 1	1	1
df2.dtypes	1	1
data_copy['Age']=data_copy['Age'].fillna(data_copy['Age'].median())	1	1
test_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)	1	1
data['Title']=data['Title'].str.replace('Mrs.','123')	1	1
df_test.head(n=10)	1	1
"test['Child'] = 0    # Creates a new feature ""Child"" and assigns initial value '0'"	1	1
all_data.shape[0] == ntrain + ntest	1	1
X.shape[1]        # number of training examples	1	1
titanic_df['EmbarkedInt'] = titanic_df['Embarked'].map({'S': 0, 'C': 1, 'Q':2})	1	1
titanicTrain.sample(frac=1).reset_index(drop=True)	1	1
data_mat.shape[1]	1	1
"trainingset[""AgeBin""][x] = agemapping[trainingset[""Title""][x]]"	1	1
train['Age'].fillna(train['Age'].mode()[0],inplace=True)	1	1
df['title'] = df['Name'].apply(lambda n: n.split(',')[1].split('.')[0].strip())	1	1
hf['y_train'].value	1	1
titanic_df['Age'].dropna().astype(int).hist(bins=100, ax= axis1)	1	1
np.abs(shap_values).mean(0)[:-1]	1	1
titanic_df['CatAge'] = labels	1	1
df.loc[ (df.Age.isnull()), 'Age' ] = predictedAges  #loc基于标签的，按标签进行选择	1	1
train['family'] = train['SibSp'] +  train['Parch']	1	1
"fd.to_csv(""Submissions1.csv"", index=False)"	1	1
one_hot_encoded_X_train.align(one_hot_encoded_X_test, join='left', axis=1)	1	1
train_df['FareBin_Code'] = data_df['FareBin_Code'][:891]	1	1
df.Cabin.fillna('NA')	1	1
score.append(a)	1	1
df.loc[female & Class1,'Class'] = (0)	1	1
"data.loc[data[""Fare""].isnull(), ""Fare""] = clf.predict(X_Fare_n)"	1	1
data1_dummy.iloc[:,1:].columns.tolist()	1	1
res['Survived']=pred	1	1
test.drop(labels='Cabin',inplace=True,axis=1)	1	1
train_data['Age'][np.isnan(train_data['Age'])] = age_random_list	1	1
np.mean(_d.history['acc']),	1	1
pd.isnull(all_features['Cabin']).sum()	1	1
train.pivot_table(index='Sex', values='Survived', aggfunc='count').plot(kind='bar', ax=ax[0])	1	1
df_test['Age'].fillna((df['Age'].mean()), inplace=True)	1	1
feature_importance.sort_values(by='importance', ascending=True, inplace=True)	1	1
"leafsizes.append((""leaf {0}"".format(x), RFC_acc, RFC_test_acc, diff_mag))"	1	1
X_train['Embarked'] = X_train['Embarked'].fillna('0')	1	1
df_data['Family_size'] = df_data['SibSp'] + df_data['Parch'] + 1	1	1
train.drop(labels='Survived',axis=1,inplace=True)	1	1
train_df.describe().columns	1	1
poly2.transform(test_x)	1	1
df_test[['PassengerId', 'Survived']].to_csv('knn_feat_eng.csv', index=False)	1	1
train_df['Person'] = train_df.apply(get_person,axis=1)	1	1
test_data.drop((['Name']), axis=1)	1	1
"train[""Survived""][train[""Sex""]=='male'][train[""Age""]>=18][train[""Pclass""]==3].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
test_set['Family'].value_counts()	1	1
age1_t_df.values	1	1
age_sal.iloc[:,1]	1	1
df['Fare'][df['Fare'].notnull()]	1	1
"df.loc[(df[""Title""]=='Master') & (np.isnan(df[""Age""])),'Age'] = 4.6"	1	1
"data[""Sex""]==""male"" and data[""Pclass""]>=2:"	1	1
data_frame['Sex'] = data_frame['Sex'].map({'male':1,'female':0})	1	1
test.drop(['Name','Ticket','Cabin'], axis=1,inplace=True)	1	1
"train_set[[""Embarked"", ""Survived""]].groupby(['Embarked'], as_index=False).mean()"	1	1
df.loc[(df['Age']>41)&(df['Age']<=50),'Age_band']=4	1	1
train_clean.iloc[:,1:].values	1	1
aveFare.at[3, 'Fare']	1	1
age1[ 'AgeGroup' ] = impute[ 'Age' ]	1	1
"df[""family_size""] = df[""SibSp""] + train[""Parch""] + 1"	1	1
submission['Survived'] = y_final_pred	1	1
test['IsAlone'] = [x == 1 for x in test.NumFamily]	1	1
"full[""Embarked""] = full[""Embarked""].fillna('C')"	1	1
trainAGE['Age']	1	1
age_partition['Partition'] = pd.cut(train['Age'], [0,10,20,30,40,50,60,70,80])	1	1
frame.loc['Andersson']	1	1
data_file.drop('Pclass', axis=1, inplace=True)	1	1
data.Age.fillna(value = np.round(np.mean(data.Age)), inplace = True)	1	1
app_test['Family_size'] = app_test['SibSp']+app_test['Parch']	1	1
ax2.hist(train_data[train_data['Survived']==0].Fare, bins = 25, label = 'Did Not Survive', alpha = .50, edgecolor ='black', color = 'grey')	1	1
plt.hist(AgeSer)	1	1
"test[""Cabin""] = le.transform(test[""Cabin""])"	1	1
in ['Pclass', 'Age', 'Embarked', 'Title', 'GroupSize']:	1	1
df.drop(['Name','PassengerId','SibSp','Parch','Ticket'], axis=1, inplace=True)	1	1
frame.ix[:,0] = [1,1,2,3]	1	1
"data_train.loc[data_train[""Sex""] == ""male"", ""Sex""] = 0"	1	1
dataset['Age0']=0	1	1
all_data.join(one_hot_embarked)	1	1
"combine_df[""Name""].apply(get_title)"	1	1
df['sex'] = pd.Series(map(lambda x: 1 if x == 'male' else 0 , df.Sex.values))	1	1
dataset.loc[(dataset['Age'] >= 48), 'Age'] = 3	1	1
"x_train[""Survived""]"	1	1
ticket_no[0][:len(ticket_no[0])//2],                                    ticket_no[0][len(ticket_no[0])//2:]	1	1
plt.hist(train.loc[(train['Survived'] == 0) & (train['CabinN1'] != 999), 'CabinN1'], bins = range(0, 140, 10), label = 'dead', alpha = 0.5)	1	1
dataset.drop([col], inplace=True, axis=1)	1	1
submission.to_csv('./simpletitanic.csv', index=False)	1	1
df.loc[((df.Cabin == 1) & (df.Pclass == 2)) , 'Ca_Cl'] = 5 #avg with cabin	1	1
dataset.loc[dataset['Title'] == 'Otherm', 'Age'] = dataset.loc[dataset['Title'] == 'Otherm', 'Age'].fillna(medians.loc[medians['Title'] == 'Otherm']['Age'][5])	1	1
family_size['Samples'] = samples['Survived']	1	1
missing_val.rename(columns={'indrex':'variables',0:'missing_percentage'})	1	1
data.drop(labels='Name', inplace=True, axis=1)	1	1
titanic_df.groupby(group_by_age).mean()	1	1
train[['Parch', 'Survived']].groupby(['Parch']).mean()	1	1
data['Title'] = data['Title'].replace(['Lady', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')	1	1
d['Embarked'].fillna(d['Embarked'].mode()[0], inplace = True)	1	1
preferredOrder[5:9]	1	1
full_data.drop(drop_elements, axis = 1)	1	1
df.Title.replace(Others,'Other', inplace=True)	1	1
dataset.loc[dataset['familysize'] == 1, 'isalone'] = 1 # 二つ上で兄弟の数も親子の数もゼロに1を足したので1が兄弟親子がゼロ	1	1
features_long.drop(['Name','Embarked'], axis=1, inplace=True)	1	1
test['title'] = [i.replace('Ms', 'Miss') for i in test.title]	1	1
"df[""Sex""][df[""Sex""] == ""female""] = 1"	1	1
"df_titanic['SibSp'] == df_titanic.iloc[age][""SibSp""]"	1	1
label_raw.apply(lambda x: 1 if x == 1 else 0)	1	1
trainOrg['Sex'] = np.where(trainOrg['Sex']=='female', 0, 1)	1	1
df_train.head(2)	1	1
"dataframe.loc[dataframe[feature_name] == feature_val, ""Survived""].value_counts()"	1	1
deplicate_ticket.append(df_data.loc[df_data.Ticket == tk,['Name','Ticket','Fare','Cabin','Family_size','Survived']])	1	1
train_data['Fare'].mean()	1	1
df2['Ticket'] = [0 if i=='L' else i for i in df2.Ticket]	1	1
row['Sex'] == 'male' and row['Age']<= 15 and row['SibSp'] <= 2:	1	1
data_test.loc[data_test['Cabin'].isnull(),'Cabin'] = 'No'	1	1
accuracy_kscore.append([k,acc_knn])	1	1
"train[""Famille_2""] = train[""FamilleMember""] == '2'"	1	1
test['Sex'] = test['Sex'].cat.codes	1	1
train_df.loc[:, ['Age*Class', 'Age', 'Pclass']]	1	1
"Y[""RGroup""]=Y[""Last_Name""]"	1	1
new_test_df.loc[:,['Survived']]	1	1
train5['Embarked'] = train5['Embarked'].fillna('S')	1	1
train.drop(drop_cols + ['Cabin_l'], 1, inplace=True)	1	1
data['Family_Size']= data['Parch']+ data['SibSp']	1	1
train['Age_Cat']=train['Age'].apply(young_kid)	1	1
titanic.loc[titanic['Age']<18.0, 'Child'] = 1	1	1
test['Survived'] = final_tree.predict(X_test)	1	1
train_df['Embarked'].value_counts().index[0]	1	1
dataset_train['Ticket_Initials'] = dataset_train['Ticket'].apply(lambda x : str(x)[0])	1	1
allset.drop(['TicketFirst'],axis=1)	1	1
df_test['Group_Category'] = df_test.apply(categorize_group,axis=1)	1	1
fare[['Fare', 'Survived']].groupby(['Fare'], as_index=False).mean().sort_values(by='Fare', ascending=True)	1	1
"test[[""PassengerId"", ""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked""]]"	1	1
train_df.drop(['PassengerId', 'Age', 'Pclass', 'Sex', 'Name', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'], axis=1)	1	1
df_test.Fare.median()	1	1
train.Embarked.hist()	1	1
"output.to_csv(""Titanic_Survival_submission.csv"",index= False)"	1	1
titanic_training_data.head(5)	1	1
training_set['Sex'] = encoder.fit_transform(training_set['Sex'])	1	1
group_final.groupby(param[0]).Survived.sum()	1	1
"test.drop(""Survived"", 1)"	1	1
"dataset_train[""Ticket""].value_counts()"	1	1
test_df1['FareGroup'] = pd.cut(test_df1['Fare'],bins,labels = labels)	1	1
"train_eval.drop(""Survived"", axis = 1)"	1	1
traindf[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
"test_df.drop([""Name"", ""Parch"", ""SibSp""], axis=1, inplace=True)"	1	1
submission.head(4)	1	1
X_test['Fare'] = Norm(X_test['Fare'])	1	1
join_data['Embarked'].value_counts()	1	1
titanic_train['Cabin'] = titanic_train.Cabin.fillna('N')	1	1
dataset['Embarked'] = dataset['Embarked'].map({'C': 0, 'Q': 1, 'S': 2}).astype(int)	1	1
sns.boxplot(y='Fare', x='SibSp', ax=ax1, data=train_df, linewidth=1, saturation=5, palette=palette7)	1	1
df_data.drop(drop_columns, 1)	1	1
test_input.apply(lambda item : ceil(gm['Embarked'][item['Sex'],item['Pclass'],item['Title']]).astype(int) if np.isnan(item['Embarked'].astype(int)) else item['Embarked'], axis=1)	1	1
csv.isnull().sum()	1	1
df_surname['Surname_perishing_women'] = df_surname['Surname_perishing_women'].fillna(0)	1	1
trainData.copy()	1	1
"test[""S""] = pd.to_numeric(test['Sex'].apply(convert_s_2_num))"	1	1
titanic_df.loc[titanic_df['Child']==1]	1	1
train_df.drop(['PassengerId','Name','Ticket'], axis=1)	1	1
df_lr_coeff.sort_values(by='Correlation', ascending=False)	1	1
train.join(dummies_enbarked)	1	1
output.drop(output.columns[a], axis = 1)	1	1
total['Fare_Bin'] = pd.qcut(total['Fare'], 5,labels=False)	1	1
test.drop(['Survived'],1)	1	1
"train[""Age""] = train[""Age""].fillna(random.randint(0,80))"	1	1
test_df['Embarked'] = test_df['Embarked'].fillna('S')	1	1
poly3.transform(test_x)	1	1
test_df['Person'] = test_df[['Age', 'Sex']].apply(get_person, axis=1)	1	1
df_test['LastNameEncoded'] = le_lastname.transform(df_test['LastName'])	1	1
confused_mat.copy()	1	1
test_df.loc[test_df['Fare'].isnull(), 'Fare'] = train_df.loc[train_df['Embarked'] == 'S','Fare'].mean()	1	1
train['Title'] = train.Name.str.extract('([A-Za-z]+)\.', expand=False)	1	1
train_encoded.isnull().sum()	1	1
train_data['Embark_Q'] = Embark_dummy['Q']	1	1
grid.cv_results_['mean_test_score']	1	1
test_df_X.values	1	1
dfamily.head()	1	1
all_data['Title'] = all_data['Title'].map(title_map)	1	1
train_df.join(pd.get_dummies(train_df.Sex, prefix='Sex'))	1	1
cv_res['Algorithm']	1	1
model.add(Dense(20, activation='relu', input_dim=len(X_train.columns)))	1	1
titanic_submission.drop(['LG_predictions'], axis = 1)	1	1
training_data.reset_index(drop=True)	1	1
"dat['Fare']  = pd.qcut(dat[""Fare""],5,labels=False)"	1	1
train_df['Title']= train_df.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
titanicTest.drop('Cabin',1)	1	1
train_df.head(8)	1	1
df_test['Sex'].replace(['female','male'],[0,1],inplace=True)	1	1
"df_train_pp.loc[:, ""Survived""]"	1	1
test['Age'].fillna(test.Age.mean(), inplace = True)	1	1
dataset.loc[(dataset['Fare'] > 27) & (dataset['Fare'] <= 39.688), 'Fare'] = 5	1	1
full['Fare'] = boxcox((1+full['Fare']))[0]	1	1
test.loc[(test['Fare'].isnull()) & (test['Pclass'] == 1), 'Fare'] = aveFirstFare	1	1
combine['CabinAvialable'] = combine['Cabin']=='Unknown'	1	1
data_replaced_ages.head(10)	1	1
titanic_df['not_alone'].value_counts()	1	1
test_data['EMBARKED'] = test_data['EMBARKED'].fillna('S')	1	1
data.drop(['Name','Title','Ticket','Parch','SibSp','Age','Fare'], axis=1, inplace=True)	1	1
"test[""IsAlone""] = test.FamSize.apply(lambda x: 1 if x == 1 else 0)"	1	1
train_data['Age'].fillna(train_data['Age'].mean(),inplace=True)	1	1
pd.isnull(test.loc[i,'Fare']) == True:	1	1
test_df.drop('Name',axis =1)	1	1
classifier_results['GBC_best'] = (gs_accuracy, GBC_best)	1	1
np.sum(layer_1_delta)	1	1
results['acc_test'] = accuracy_score(y_test,predictions_test)	1	1
df['MissingAge'] = df['Age'].apply(lambda x : 1 if np.isnan(x) else 0)	1	1
train.drop('Cabin',axis=1,inplace=True)#axis=1 drops a col. default drops rows.	1	1
full_models['set4']['cat_encode'] = 'OneHot'	1	1
submission.to_csv('submission_bagg.csv', index = False)	1	1
train[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values('Survived',ascending=False)	1	1
test['title'] = 'default'	1	1
combined.Embarked.fillna(freq_port, inplace=True)	1	1
score.mean()	1	1
"data_train[""Cabin""].apply(lambda x: 0 if type(x) == float else 1)"	1	1
pivot_survived.reset_index(level=0, inplace=True)	1	1
train_df['Cabin'].replace('T','X',inplace=True) # I am replacing cabin T with X since there is no T cabin in test data.	1	1
some_df.copy()	1	1
"test_df['AgeGroup'] = pd.cut(test_df[""Age""], bins, labels = labels)"	1	1
new_train_df.drop(['Survived'], axis=1).columns,	1	1
titanic['Fare']=titanic['Fare'].fillna(titanic['Fare'].median())	1	1
ticSur['TicSurvProb'] = ticSur['Survived']*(100) /(ticSur['Sex'])	1	1
df['Surname'].head()	1	1
"Test[""Fare""]=Test[""Fare""].fillna(np.mean(Test[""Fare""]))"	1	1
data['SortAge_2'] = 0	1	1
grouped.Age.apply(lambda x: x.fillna(x.median()))	1	1
train['Parch']=train['Parch'].apply(replace2)	1	1
df_full.interpolate()	1	1
clean_train['Survived']	1	1
all_data.Age.apply(pd.to_numeric).astype('float32')	1	1
submission.to_csv('submission9.csv', index=False)	1	1
fit_time_cv_summary.loc[clf_name, transform_name] = score['fit_time'].mean()	1	1
data.loc[(data.Fare>15.8)&(data.Pclass==2), 'PassengerCat']=2	1	1
df_test.select_dtypes(['category']).columns	1	1
test_data['Cabin'] = test_data['Cabin'].apply(lambda x: replacement.get(x))	1	1
axes[0].legend(('Died', 'Survived'), loc='best')	1	1
parameters[2]	1	1
test_data.loc[test_data['FamilySize'] == 1, 'IsAlone'] = 1	1	1
np.where(predictions<0.5,0,1)	1	1
y_predict.append([passengers_id[i], Counter(y[:,i]).most_common(3)[0][0]])	1	1
dft['Age'] = dft['Age'].fillna(dft['Age'].median())	1	1
df.iloc[0,1]/df.iloc[:,1].sum()*100	1	1
"test.loc[(test.Name == ""Storey, Mr. Thomas""),:]"	1	1
Y.values,	1	1
titanic_train_df.Age.loc[titanic_train_df['Title'] == 'Mr'] = titanic_train_df.Age.fillna(titanic_train_df[(titanic_train_df['Title'] == 'Mr')]['Age'].mean())	1	1
x.drop(column, axis=axis, inplace=True)	1	1
"sex_dataframe.loc[sex_dataframe[""Survived""] == 0, [x_col, y_col]]"	1	1
train[['mis_age','Survived']].groupby(['mis_age'],as_index=False).mean()	1	1
"y[""Age""] = y[""Age""].astype(int)      #not more floats now"	1	1
dataset['CabinNumber'] = dataset['CabinNumber'].astype(int)	1	1
test.loc[test['CabinN4'] == 999, 'hasCabin4'] = 0	1	1
data['Fare'] = data['Fare'].interpolate()	1	1
df_train['cia'] = cia	1	1
"axes[0].set_title(""Fare: Feature Distribution"")"	1	1
test_df['Fare'].fillna(train_df['Fare'].median(), inplace=True)	1	1
ada_score.mean()	1	1
df_clean.loc[:, df_clean.columns != 'Survived']	1	1
X2test['Sex'] = X2test['Sex'].replace(to_replace=['male', 'female'], value=[0, 1])	1	1
tr['Parch'].unique()	1	1
x['Sex']=x['Sex'].apply(gender_to_no)	1	1
models['set1']['num_attrs'] = ['Fare', 'Age', 'Family_total', 'Name_len']	1	1
data['Ageinv']=data.apply(inverseAge,axis=1)	1	1
df_train_features['Age']=df_train_features['Age'].fillna(mean_age)	1	1
train_try[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)	1	1
dataframe['Title']	1	1
np.append(arr=x,values=emb,axis=1)#joining embarked column to x	1	1
age_data.append(tm_age_data[i])	1	1
test_df[['Survived']]	1	1
df['sibsp']         = df['sibsp'].astype(sibsp_cat)	1	1
row['Sex'] == 'male' and row['PassengerId'] == 5 or 6 or 7 or 8 or 13 or 14 or 17:	1	1
merged_df['Pclass'].unique()	1	1
symbol.append(each[0])	1	1
test_d['Sex']=le_test.fit_transform(test_d['Sex'])	1	1
"strat_train_set.drop(""Survived"", axis=1) # drop labels for training set"	1	1
"titanic_test_df.loc[titanic_test_df[""Embarked""] == ""S"",""Embarked""] = 0"	1	1
"train_data.drop(""Embarked"", axis=1)"	1	1
"_train.drop(""Survived"", axis=1)"	1	1
train[['Family', 'Survived']].groupby(['Family'], as_index=False).mean()	1	1
cv_accuracy.append(cv_result.mean())	1	1
titanic.iloc[:,i]=titanic.iloc[:,i].cat.codes	1	1
df.drop(columns=['Survived', 'PassengerId'])	1	1
results2['PassengerId'] = data_test['PassengerId']	1	1
"df[""Age""].mean(skipna=True)"	1	1
test['Adult'] = (test['Age'] > 18).astype(int)	1	1
"df_train[""Survived""].as_matrix()  # Our ground truth labels"	1	1
full_dataset['Age']=full_dataset['Age'].astype(int)	1	1
test_df['fare'].isnull()	1	1
titanic.describe(include='all')	1	1
data['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.2f%%',ax=ax[0])	1	1
test['FamilyMem']=test.apply(lambda x: x['SibSp']+x['Parch'], axis=1)	1	1
test_data['Cabin'] = test_data['Cabin'].str[0]	1	1
"df_test.drop(""Name"",axis=1).drop(""Ticket"",axis=1).drop(""Fare"",axis=1).drop(""Cabin"",axis=1)"	1	1
np.dot(x,w0) + b1 # mXN X NxH +1xH ~ mxH	1	1
titanic['Fare_Scaled'] = df_scaled	1	1
combined_df.drop('age_pred', axis=1, inplace=True)	1	1
train_df['Fare'].fillna(train_df['Fare'].median(), inplace=True)	1	1
tt.loc[tt['Surname'] > 1,'alone_NoSameSurname_members'] = 1	1	1
df.drop(['Name','PassengerId','Ticket','Cabin'],axis=1) # 删除姓名、ID、船票信息、客舱信息，axis=0 删除行，=1 删除列	1	1
standardize_df['Survived'] # Separating out the target before standardizing	1	1
df['Title']= df.Name.map(lambda x :GetTitle(x))	1	1
titanic[['Title', 'Age']].groupby(['Title'], as_index=False).mean()	1	1
test_data.Fare.loc[ (test_data.Ticket == '3') & (test_data.Pclass == 3) & (test_data.Embarked == 'S')].median()	1	1
dataset['Age'] = filled['Age']	1	1
data_df['SurvivedTour'] = data_df.groupby('Tour')['Survived'].transform('mean')	1	1
data_frame.drop('Ticket', inplace=True, axis=1)	1	1
df_data_y.iloc[:891]	1	1
dfTest.loc[dfTest.Sex=='female','Age']=dfTest.loc[dfTest.Sex=='female','Age'].fillna(avgfemaleTest)	1	1
data['LargeFamily'] = [1 if familysize >= 5 else 0 for familysize in data['FamilySize']]	1	1
train.drop(['Sex','Embarked','Name','Ticket', 'Pclass', 'PassengerId', 'Cabin'], axis=1, inplace=True)	1	1
data['Fare_stage'] = (data['Fare'] / 10).astype(int)	1	1
dataframe['Embarked'].fillna('S', inplace=True)	1	1
scores.mean(), pipeline	1	1
train['Fare'].append(test['Fare'])	1	1
dfpredictions.head(15)	1	1
train['MilitaryTitle'] = 0	1	1
"_df[""pclass""]    == pers[""pclass""]"	1	1
df_train['Pclass'].isnull().sum()	1	1
test.drop('Age', inplace=True, axis=1)	1	1
test_df.drop(['Survived', 'PassengerId'],axis=1).copy()	1	1
"a[""Cabin""] = a[""Cabin""].fillna(0)"	1	1
DataFile['Ticket'].replace(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], 'N', inplace=True)	1	1
comb_data['PassCountTicket'] = comb_data['Ticket'].map(comb_data['Ticket'].value_counts())	1	1
titanic['FareBins']=pd.qcut(titanic['Fare'],4)  # Divides data into equal bins	1	1
test_df['Fare'].fillna(test_df['Fare'].dropna().mean(), inplace=True)	1	1
train_X['Title_Code'] = label.fit_transform(train_X['Title'])	1	1
"df['Title'] = df['Title'].replace(['Mlle.', ""Ms.""], 'Miss.')"	1	1
testData.fillna(method='ffill', inplace = True)	1	1
allset.drop(['Embarked'],axis=1)	1	1
df['NameLength'] = df['Name'].apply(lambda x : len(x))	1	1
titanic_df['Age'] = titanic_df['Age'].apply(math.ceil)	1	1
data.drop(['PassengerId', 'Name', 'Ticket'], axis=1)	1	1
df_test['Gender'] = df_test['Sex'].map({'female': 0, 'male': 1}).astype(int)	1	1
test_df.drop(['Survived'], axis=1)	1	1
training_df1.isnull().sum(axis = 0)	1	1
test[['Sex', 'ageCat', 'Embarked','fareCat', 'famSize', 'Pclass', 'hasAge', 'hasCabin1', 'gender_class', 'isAlone', 'gender_alone', 'class_alone', 'class_hascabin']]	1	1
test.drop(['Embarked', 'Cabin'], axis=1)	1	1
train_data['Title'] = train_data['Title'].replace('Ms.','Miss.')	1	1
train_data.drop(['PassengerId'], axis=1, inplace=True)	1	1
combine['Fare_cat'] = pd.DataFrame(np.floor(np.log10(combine.Fare+1))).astype('int')	1	1
data.reset_index(inplace=True,drop=True)	1	1
"test[""Cabin""] = (test[""Cabin""].notnull().astype('int'))"	1	1
"df_train[""Cabin""] != 'M'"	1	1
b['Sex']=b.Sex.replace(['male','female'],[1,0])	1	1
comb['Age'].hist(bins=100)	1	1
test['MedF'] = test['Fsize'].map(lambda s: 1 if 3 <= s <= 4 else 0)	1	1
"df_test[""Title""] = df_test[""Title""].map({""Master"":0, ""Miss"":1, ""Ms"" : 1 , ""Mme"":1, ""Mlle"":1, ""Mrs"":1, ""Mr"":2, ""Rare"":3})"	1	1
train[['Cabin_isnan','Pclass', 'Sex_Bin','Embarked_Num_fill', 'Age_fill', 'SibSp', 'Parch', 'Fare_fill', 'Fare_origna', 'Age_origna', 'Embarked_Num_origna']].as_matrix(),	1	1
df_data.loc[(df_data['Embarked'].isnull()) & (df_data['FareBand'] == fare), 'Embarked'] = embark_to_impute	1	1
test_df.drop(['PassengerId'], axis = 1, inplace = True)	1	1
"df_copy.loc[:,""Embarked""] = df_copy.Embarked.apply(lambda x: e_map[x])"	1	1
test_data.drop(['Name','Ticket'],axis = 1)	1	1
"result_df.to_csv(""result_0621_2.csv"", index=None)"	1	1
train_dataset.drop('Survived',axis=1)	1	1
"X_train[[""AgeRange"", ""Pclass""]].groupby(['AgeRange'], as_index=False).mean()"	1	1
df['is_child'] = df['Age'].apply(lambda x: 1 if x <= 15 else 0)	1	1
data.loc[(data['Fare'] > 8.66) & (data['Fare'] <= 26), 'SortFare_3'] = 1	1	1
data_val['Fare'].fillna(data_val['Fare'].mean(), inplace=True)	1	1
data['FirstName'] = data['FirstName'].str.split(' ').str.get(1)	1	1
test_features[['Pclass', 'AgeGroup', 'FareGroup', 'Person', 'IsAlone', 'Embarked', 'Title']]	1	1
df.sort_values(['Fare'], ascending=[True])	1	1
"data.loc[data[""Age""] > 64, ""Age_group""] = 5 # elderly"	1	1
train.loc[(train['Age']>12)&(train['Age']<=20),'Age_cat']=1	1	1
train.drop('AgeBand', axis=1, inplace=True)	1	1
maiden_coming.itertuples():	1	1
df.loc[ (df.Age.isnull()) & (df.Sex == i) & (df.Pclass == j+1),                        'Age'] = guess_ages[i,j]	1	1
combine.groupby('Title')['Age'].median()[titles.index(title)]	1	1
df_train['Embarked'].replace(['S', 'Q', 'C'], [0,1,2], inplace=True)	1	1
data_apr['Sex'] = data_apr['Sex'].map(codes)	1	1
comb_data['Title'] = comb_data['Title'].replace('Ms', 'Miss')	1	1
test_x.drop(['Age'], 1)	1	1
my_submission.tail()	1	1
scaler.transform(test2_X)	1	1
"cv_result.append(cross_val_score(classifier, X_train, y = y_train, scoring = ""accuracy"", cv = kfold, n_jobs=4))"	1	1
"dataset[""Fare""]=dataset[""Fare""].astype(float) # Fare datasını yeniden float'a çeviriyoruz ki aritmetik hesaplamalar yapılabilelim"	1	1
data.loc[data['Age'] <= 19, 'SortAge_2'] = 0	1	1
test_df_nfare[['Pclass', 'Age', 'Family', 'Sex_d']]	1	1
df_submit.loc[no_age_index, 'Age'] = df_submit['Status'].loc[no_age_index].map(status_age_dict)	1	1
testrst['Survived']	1	1
combine['AgeAbove12'] =[ 2 if x>12 else 1 for x in combine['Age']]	1	1
ss.transform(missing_age_X_test)	1	1
np.round(RF_pred).astype(int)	1	1
df_test_ml['Title'] = df_test_ml['Title'].replace(woman_unmarried, 4)	1	1
train.drop(features_drop,axis = 1)	1	1
sns.boxplot('Pclass','Fare',data=df)	1	1
"full_data.loc[full_data[""Fare""].isnull(),""Fare""] = full_data[full_data[""Pclass""] == 3]['Fare'].mean()"	1	1
df_submit.drop(columns=['PassengerId'] )	1	1
data_df.drop(outliers_list, inplace=True)	1	1
whole['Maiden'] = whole.apply(lambda x: extract(x),axis=1)	1	1
train_df_X['Embarked']=train_df_X['Embarked'].fillna('S')	1	1
data_train_all.groupby(['Sex'])['Age'].median()	1	1
train[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values('Survived',ascending=False)	1	1
train_df.T	1	1
"train[""Age_3""] = (15 <= train[""Age""])&(train[""Age""]<30)"	1	1
"missing_df.sort_values(by=""missing_perc"", ascending=False)"	1	1
X_full[ 0:891 ]	1	1
titanic_train['Fare_range']=Fare_range	1	1
"a.loc[(a[""Fare""] > 14.454) & (a[""Fare""] <= 31.0), ""Fare""] = 2"	1	1
pipelines.append(('AB', AdaBoostClassifier()))	1	1
all_data.values	1	1
plot_df.corr()	1	1
"train_df.loc[train_df[""Title""] == ""Rev"", ""Title""] = 'Rare Title'"	1	1
sns.boxplot(x= 'Sex',y = 'Age',hue  = 'Survived',data = data_train)	1	1
predictions.append(test_predict)	1	1
test.loc[(test['Fare']>400) & (test['Fare']<=450),'FareCategorical'] = 8	1	1
"models.append((""RF"", RandomForestClassifier))"	1	1
"df.loc[df[""title""].isin([""Ms."", ""Mme.""]), ""title""] = ""Mrs."""	1	1
"merged_data[""title""] = le.fit_transform(merged_data[""title""])"	1	1
df_train.loc[df_train['Embarked'] == 'Q', 'Embarked'] = 2	1	1
train.groupby(['PassengerCat'])[['Survived']].mean()	1	1
"titanic_test.drop(""PassengerId"",axis=1).copy()"	1	1
test_data['title'] = test_data['salutation'].apply(lambda x: 'Misc' if salutation_mask_test.loc[x] == True else x)	1	1
comb_data['FareGroup'] = np.where(comb_data['Fare']<7.73, 'Tier1', np.where(comb_data['Fare']<10.5, 'Tier2', np.where(comb_data['Fare']<52.5, 'Tier3', 'Tier4')))	1	1
train_df.drop(['FamilySize'], axis=1)	1	1
train_df.drop('Survived', axis=1).copy()	1	1
"data_for_ID[""PassengerId""],"	1	1
train['CabinLetter'].fillna('None', inplace=True)	1	1
"dfTrain[""Fare""].fillna(dfTrain[""Fare""].median(), inplace=True)"	1	1
titanic_train['Sex']=titanic_train['Sex'].astype('category')	1	1
gird_result.named_steps['selector'].get_params(deep=True)['k']	1	1
"df_test.drop([""Name"", ""PassengerId"", ""Cabin"", ""Ticket""], axis=1)"	1	1
test_df['parent_of_child'] = test_df[['Parch', 'Age']].apply(get_parent_of_child,axis=1)	1	1
test_features2.as_matrix()	1	1
np.shape(X)	1	1
"df_surname.loc[df_surname[df_surname['SurnameMembers'] < 3].index, ""SurnameId""] = -1"	1	1
test_ds['Fare'].fillna(test_ds['Fare'].mean(), inplace= True)	1	1
model_results.append(rf1_results)	1	1
df_test.loc[df_test['Age'].isnull(),'Age']=fill_age(df_test)	1	1
"ax6.hist(fare_scale, normed=1, alpha=0.75, label=""Fare"")"	1	1
full[['Survived','Pclass']].groupby('Pclass').agg('mean')	1	1
"dataset_med.loc[3,2][""Age""]"	1	1
classifier.add(Dense(output_dim = 7, init = 'uniform', activation = 'relu', input_dim = 14))	1	1
data['Survived'][data.Pc1 ==1].mean(),	1	1
dataset.loc[(dataset['Sex'] == gender) & (dataset['Fare'] == fare) & (dataset['Pclass'] == pclass) & (dataset['Age'] == age),'Embarked'].dropna()	1	1
data.combine_first(misses)	1	1
"cv_results.append(cross_val_score(classifier, X, y = y, scoring = ""accuracy"", cv = kfold, n_jobs=n_jobs))"	1	1
output_random.to_csv('random.csv', index=False); # score 0.51196 (6993/7071)	1	1
each['FamilySizeGroup'] = 'Small'	1	1
embarked_encoder.transform(train.Embarked)	1	1
test_df.Age.astype(int)	1	1
params['depth'],	1	1
"df[""Survived""].values.ravel()"	1	1
training_data.drop(['Survived'], axis=1)	1	1
dataset.loc[(dataset['Fare'] > 40) & (dataset['Fare'] <= 99), 'Fare']   = 4	1	1
dataset.loc[(dataset['Fare'] >7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1	1	1
dftrain.shape	1	1
titanic_df.groupby(titanic_df['Embarked']).count()['PassengerId']	1	1
train_df['Age'] < 15	1	1
check.head()	1	1
"test.drop([""Name"", ""Ticket""], axis=1)"	1	1
"test_data[""Age_Group""]=test_data[""Age_Group""].astype(int)"	1	1
sns.boxplot(y = var, data = train)	1	1
params['d_hidden']	1	1
Z_title['Title'] = Z_title['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Miss'})	1	1
df_train['Pclass']=df_train['Pclass'].astype(object)	1	1
cost_list.append(epoch_cost)	1	1
transformed_df['Embarked_S'] = embarked.Embarked_S	1	1
valid_X['Title_Code'] = label.fit_transform(valid_X['Title'])	1	1
submit['Survived'] = y_pred	1	1
df['Title'].nunique()	1	1
all_data.set_value(1108,'Deck',value=all_data.loc[318]['Deck'])	1	1
dataset['Embarked'].fillna(value=dataset['Embarked'].mode()[0], inplace=True)	1	1
axes[19].legend().set_visible(False)	1	1
data['Master'] = data['Title'].map(lambda x: 1 if str(x) == 'Master' else 0)	1	1
test_ds.loc[(test_ds['Age'].isnull()) & (test_ds['Sex'] == sex) &                      (test_ds['Pclass'] == pcl), 'Age']= mean_age['test'][sex][pcl-1]	1	1
"train.groupby(""Sex"")"	1	1
dfTrain['Survived'].groupby(dfTrain['FamilySize']).mean()	1	1
train_x.values	1	1
test_df['FamilyMembers'] = test_df['SibSp'] + test_df['Parch'] + 1	1	1
times.append(end-start)	1	1
test_df['Initial']=test_df.Name.str.extract('([A-Za-z]+)\.')	1	1
result['Survived'] = result['NuSVC'].T.astype(int) # .apply(calculate, axis=1)	1	1
dftrain.head(1)	1	1
titanic_data.loc[titanic_data['Age'] >64,'Age'] = 4	1	1
data_train['Survived'] # 将训练集Survived 数据存储在y中	1	1
"new_data[""Name""] = new_data[""Name""].str.replace(t, title)"	1	1
p.shape	1	1
train.groupby(['Age'])['Survived'].mean().plot()	1	1
y.shape[:]	1	1
df_Not_Survived['Embarked'].value_counts().plot.box(ax=axes[1]);	1	1
"new_train.drop(""Sex_male"", axis = 1, inplace = True)"	1	1
df_test.loc[df_test['Age'] > 16, 'AgeC'] = 1	1	1
t.loc[(t['Age'] > 15) & (t['Age'] <= 25), 'Age'] = 1	1	1
X_train_deck.corr()	1	1
"test['Young_f'] = (test['Age']>=18) & (test['Age']<=40) & (test['Sex']==""female"")"	1	1
df.drop('Sex', inplace = True, axis = 1)	1	1
dt_train.describe()	1	1
"_df.loc[i, ""fare""] = int(_fare)"	1	1
titanic['Ticks'] = pd.DataFrame(tickets)	1	1
X.loc[X['Fare Group'] > 250, 'Fare Group'] = 5	1	1
resultdf.loc[i,'Survived']=sigmod(np.dot(x,w)[i])	1	1
train['CabinKnown'] = pd.Categorical((train.Cabin.isnull() == False))	1	1
pd.isnull(titanic).any()	1	1
data['FamilySize'] = data.Parch + data.SibSp + 1	1	1
"test_df[""Name""] = test_df[""Name""].dropna().map({""Mr"":0, ""Mrs"":1, ""Miss"":2, ""Master"":3})"	1	1
"df[""en_Embarked""]=le.transform(df[""Embarked""])"	1	1
df.drop('Fare', axis=1, inplace=True)	1	1
"train[""title""] = [i.replace('Mme', 'Mrs') for i in train.title]"	1	1
df.drop(columns=drop_columns, inplace=True)	1	1
test_set['fare_group']  = test_set.apply(lambda r: int(r.Fare/6.0), axis=1)	1	1
train['cabin_known']= train['Cabin'].apply(lambda x: 0 if pd.isnull(x) else 1)	1	1
"RF_result[0][""best_score""],"	1	1
train.join(class_dummies)	1	1
df['Alone'] = df['Family'].copy()	1	1
"data.loc[data['Ticket'] == ""LINE"", ('Ticket')] = 'LINE 00000'"	1	1
X_test['FamilyS'] = X_test['FamilyS'].apply(family)	1	1
train_dataset['Title'] = train_dataset['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)	1	1
"df[""Embarked""].value_counts()"	1	1
test['Fare'] = trainFare	1	1
"submission.to_csv(""../working/submit.csv"", index=False)"	1	1
test[['C','Q','S']] = pd.get_dummies(test['Embarked'])	1	1
X_all.iloc[:,2] = le.fit_transform(X_all.iloc[:,2])	1	1
"Bagging_result[0][""best_score""],"	1	1
"full_data.loc[ full_data['Fare'] <= 7.91, 'Fare'] 						        = 0"	1	1
"data[""Deck""]=data[""Cabin""].apply(lambda x:str(x)[0])"	1	1
df.loc[((df.IsAlone == 1) & (df.Pclass == 1)) , 'Cl_IA'] = 1 #rich alone	1	1
titanic_test_data.loc[titanic_test_data.Embarked == 'C', 'Embarked'] = 1	1	1
"data[""CabinCount""] = data[""Cabin""].str.split().str.len()"	1	1
train['Sex'] = train['Sex'].replace({'male' : 0, 'female' : 1})	1	1
titanic['NAge'] = 0  # Create a new feature 'NAge' and assign initial value '0'	1	1
iset['FamilySize'] = iset['SibSp'] + iset['Parch']	1	1
titanic['Embarked']=titanic['Embarked'].fillna('S')	1	1
predictions_df['out'] = predictions_df.mean(axis=1)	1	1
train['Fare'] = mapped_fares	1	1
x_train['Cabin'].apply(lambda x: str(x)[0])	1	1
train['Embarked'] = train['Embarked'].fillna(1)	1	1
train_raw.columns.values	1	1
df.drop(['PassengerId','Ticket','Cabin'], axis=1)	1	1
entire.Cabin.apply(lambda cabin_name: cabin_name[0])	1	1
train_data.std(axis=0)	1	1
train['Age'].loc[(train['Sex'] == 'male') & (train['Fare'] == i) & pd.isnull(train['Age'])] = train['Age'].loc[(train['Sex'] == 'male') & (train['Fare'] == i)].median()	1	1
data.corr()['Survived'].sort_values()	1	1
fulldata.boxplot(column='Fare', by=['Embarked','Pclass'], ax=ax)	1	1
test_data['Fare'] = test_data[['Fare','Pclass']].apply(calculate_Fare,axis=1)	1	1
"train[""Survived""][train[""Sex""]=='female'][train[""Age""]>=18][train[""Pclass""]==2].value_counts(normalize = True).plot(kind='bar', alpha=alpha_bar_chart)"	1	1
titanic_final['Fare'].fillna(median_fare_final, inplace=True)	1	1
combine.loc[(combine['Age'].isnull()) & (combine['Title'] == title), 'Age'] = age_to_impute	1	1
train_ds.loc[3:5, :]	1	1
acc_logistic.mean()	1	1
titanic_df['Embarked'] = titanic_df['Embarked'].fillna('S')	1	1
df_full.at[idx, 'Group'].extend(group_members)	1	1
"train_df.drop([""Name"", ""Ticket"", ""Sex"", ""SibSp"", ""Parch"", ""Cabin"",""Embarked"", ""PassengerId""], axis=1)"	1	1
data_train.isna().sum()	1	1
train.Parch.describe()	1	1
"titanic_test.loc[titanic_test[""Embarked""] == ""C"",""Embarked""] = 1"	1	1
"new_output.to_csv(""my_submission.csv"",index=False)"	1	1
titanic['Child'] = 0	1	1
test_df.head(3)	1	1
Z['Embarked'] = labelencoder.fit_transform(Z['Embarked'])	1	1
best_adaboost.best_params_.get('n_estimators'),	1	1
test.Name.replace('Miss','Mrs')	1	1
train['Title']=train['Title'].replace('Mlle', 'Miss')	1	1
dataset.loc[:, 'Pclass'].value_counts().sort_index()	1	1
data['Embarked'] = data['Embarked'].fillna(0).astype(int)	1	1
X_test['Sex'] = lb.fit_transform(X_test['Sex'])	1	1
ax[1].set_title('Survival Count by AgeBand')	1	1
df[['lang_group','Survived']].groupby('lang_group').mean()	1	1
data['IsAlone'] = data.FamilySize == 1	1	1
x_test.values	1	1
"combined_df[""Fare""] = combined_df[""Fare""].fillna(median_fare)"	1	1
test['AgeBand'] = fill_age_df.iloc[train_len:, 0]	1	1
test_df.drop(columns=unnecessary_columns)	1	1
"AgeTypeTest.append(""1"")"	1	1
all_data.replace({'Title': mapping}, inplace=True)	1	1
plot.hist(alpha=0.5,color='blue',bins=25)	1	1
train_df.groupby('Embarked')['Survived'].mean().plot(kind='barh',ax=axesbi[1,0],xlim=[0,1])	1	1
combined.drop('index', 1, inplace = True)	1	1
"cv_res.sort_values([""CrossValMeans""], ascending=False)"	1	1
"log.pivot(""lambda"", ""Poly Degree"", ""Accuracy"")"	1	1
testSet.loc[:, ['Sex','Age','Fare','Pclass','Embarked']]	1	1
df['Age'].max() - df['Age'].min()	1	1
df['pclass']        = df['pclass'].astype(pclass_cat)	1	1
sns.boxplot(y='Age', x='Embarked', ax=ax1, data=train_df, linewidth=1, saturation=5, order=['S', 'C', 'Q'], palette=palette3)	1	1
df['Title'] = df['Name'].map(lambda x: re.compile(', ([a-zA-Z]*).').findall(x)[0])	1	1
data_replaced_ages.drop(['Name', 'Ticket', 'Cabin'], 1)	1	1
"train_clean[[""Pclass"",""Sex"",""Age"", ""Parch"",""Fare"", ""Survived""]]"	1	1
test6.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
df['no_cabin'] = df['no_cabin'].astype('category')	1	1
"submission.to_csv(""submission_csv"")"	1	1
"df.loc[df[""title""].isin(non_frequent_titles), ""title""] = ""non_frequent"""	1	1
"ranks[""RFE""] = ranking(list(map(float, rfe.ranking_)), colnames, order=-1)"	1	1
train['Sex'] = list(map(lambda x: 1 if x=='female' else 0, train['Sex']))	1	1
full_data.Embarked.fillna('S', inplace=True)	1	1
axes[1].pie(train_data.groupby(['Sex'])['PassengerId'].count(),labels = train_data['Sex'].unique())	1	1
final_test_data_set.iloc[:,1:]	1	1
row['Age'] < 15:	1	1
predictions.to_csv('../output/submission1.csv',index = False)	1	1
df['Babord']=0	1	1
full_models['set4']['num_scaling'] = 'std_scaler'	1	1
train.drop(columns='Age', inplace=True)	1	1
"i[1][: i[1].find(""."")],"	1	1
X_train.transpose();	1	1
"X.loc[ X['Fare'] <= 7.91, 'Fare'] 						        = 0"	1	1
"pred_forest1.to_csv(""pred.csv"", index_label = [""PassengerId""])"	1	1
classifiers.append(LogisticRegression(random_state = 0))	1	1
"test_df[""Ticket""]"	1	1
testset.info()	1	1
kaggle.iloc[count,1] = 'Rare'	1	1
df['max'] = data.max(axis=1) # axis = By Row	1	1
titanic_df['Room']=titanic_df[['Cabin']].apply(get_cabin, axis=1)	1	1
train.isnull().sum() == 0	1	1
test_bfe.drop(columns=test_bfe.columns[index_deleted]).head(3)	1	1
Xtrf_df['Adult'] = (Xtrf_df['Age'] >= 15).astype(int)	1	1
survived['PassengerId'] = test_mod['PassengerId']	1	1
np.ma.std(masked_X, axis=0)	1	1
dfnum['PersonType'] = df['PersonType'].replace(['male', 'female', 'child'], range(3))	1	1
df_test.drop('Ticket',axis =1, inplace=True)	1	1
df['Survived'][df['Sex'] == 'male'][df['filled_ages'] < 18][df['Pclass'] == 1].value_counts()	1	1
df['Age'] = df['Age'].fillna(-0.5)	1	1
scaler.transform(train_data.drop('Survived', axis = 1)) # performs the standardization by centering and scaling	1	1
"sns.boxplot(x=""Title"", y=""Age"", data=dataset)"	1	1
test_predictors_numeric.merge(coded_test, left_index = True, right_index = True)	1	1
transformed_df['Title_Mr'] = title.Title_Mr	1	1
df_test_ml['PassengerId'] = df_test.index.tolist()	1	1
my_submission.to_csv('new_submission.csv', index=False)	1	1
"result_test7[""PassengerId""] = passenger_id_test"	1	1
full[ 'Ticket' ].map( cleanTicket )	1	1
orig_test_set.drop(['Name', 'PassengerId', 'Ticket'], axis = 1)	1	1
dataTrain.drop('Cabin', axis = 1, inplace = True)	1	1
"result.to_csv(""gender_submission.csv"", index=False)"	1	1
test_df.drop(['Name','Ticket','Embarked','Cabin'], axis=1)	1	1
df_tsne.head()	1	1
drop_elementsONS.append('Cabin')	1	1
passenger_data.dropna(axis=0).describe()	1	1
"train_data[""TitleCapt""] = 0"	1	1
data.relatives.astype(np.uint8)	1	1
tot.iloc[i,:].FamSize > 0:	1	1
df['Age_scaled'] = age_scale_param.transform(df[['Age']])	1	1
hist.history['loss']	1	1
"df[""Ticket_No""] = extracted_tickets"	1	1
test_copy.loc[test_copy['Fare'] > 31.0, 'Fare_Category'] = 3	1	1
scores['valid_'+ clf_name].append(acc_valid)	1	1
"sns.boxplot(x=""Fare"", data=train_df, ax=axes[0])"	1	1
train_dataset.corr()['Survived']	1	1
train.drop(['Pclass'], axis=1)	1	1
data.sons.loc[data.PassengerId==333] = 1	1	1
test_df['Embarked'] = test_df['Embarked'].apply(convert_embarked)	1	1
titanic['Survived'].value_counts(normalize=True)	1	1
full['Fare'] = full['Fare'].replace(1, 'Very low')	1	1
train['title'].values[i-1]= re.search('([A-Za-z]+)\.', train['Name'].values[i-1]).group()	1	1
"strat_test_set[""Age_cat""].value_counts() / len(strat_test_set)"	1	1
ax.hist(df.Age, bins=20, color='c')	1	1
combined['PassengerId']	1	1
inter_train.align(ohe_test_pred, join = 'inner', axis=1)	1	1
features.sort_values('Importance',ascending=True)	1	1
result_df.to_csv('resultSGD.csv', index=False)	1	1
"df_train[""Pclass""].plot(bw_method=0.5, kind='density', color='teal')"	1	1
train['Survived'].isnull().sum()	1	1
test['Has_cabin']=test['Cabin'].apply(lambda x: 0 if type(x)==float else 1)	1	1
data.loc[(data.Fare>60.00)&(data.Pclass==1), 'PassengerCat']=0	1	1
test_set.fillna(train_set.mean(),inplace=True)	1	1
df['Survived_ind'].isna()	1	1
age_train.drop('Survived', axis=1)	1	1
train['Embarked'] = train['Embarked'].map({'S':1,'Q':2,'C':3}).astype(int)	1	1
np.std(final_score_rs)/np.mean(final_score_rs) * 100 # 1.224	1	1
models.append('Pruned Decision Tree')	1	1
df_submission['cos_fare'] = df_submission['fare'].map(np.cos)	1	1
test_p.drop(['SibSp','Parch'], axis=1)	1	1
train_df[['FamilySize_Bin', 'Survived']].groupby(['FamilySize_Bin'], as_index=False).mean()	1	1
summary_df.loc['Parch','level']='numerical' #discrete	1	1
test6['Age'] = test6['Age'].fillna(test6['Age'].median())	1	1
test_df['Deck']=test_df['Cabin'].apply(lambda cabin: get_deck(cabin))	1	1
train_df.groupby(['Sex','Survived'])['Survived'].count()	1	1
"data_train[""Title""] = data_train[""Title""].apply(lambda x: title_dict[x])"	1	1
A_test.drop(['Age'],axis=1)	1	1
ax2[2].set_title('3rd Class (not survived)')	1	1
number_records.head()	1	1
params_init_l['min_data'] = 50	1	1
dataset.loc[fil1, 'Cabin'] = 0	1	1
X.drop(['Name'], axis=1, inplace=True)	1	1
together[888:894]	1	1
"test['Deck'] = test['Cabin'].map(lambda x: re.compile(""([a-zA-Z]+)"").search(x).group()).map(decks)"	1	1
"family[[""SibSp"",""Parch""]].sum(axis=1)"	1	1
tf.add(tf.matmul(W1, X), b1, name='Z1')	1	1
df['Cabin'] = df[['Cabin', 'Ticket']].apply(assign_cabin, axis=1)	1	1
"test_df.drop(""Ticket"", axis=1, inplace=True)"	1	1
ageDF['Salutation'].value_counts()	1	1
Xtrf_df.drop(['SibSp'], axis=1)                         .drop(['Parch'], axis=1)                         .drop(['Ticket'], axis=1)                         .drop(['Fare'], axis=1)                         .drop(['Name'], axis=1)                         .drop(['Cabin'], axis=1)                         .drop(['Sex'], axis=1)                         .drop(['Embarked'], axis=1)	1	1
test_X['FamilySize'] = test_X['SibSp'] + test_X['Parch']	1	1
data_raw['Embarked'] = data_raw['Embarked'].fillna('S')	1	1
"train_df.loc[train_df[""Title""] == ""Capt"", ""Title""] = 'Rare Title'"	1	1
"traindata.groupby(""Pclass"").Survived.mean().plot(kind=""bar"")"	1	1
df_train_stat.Survived.replace([0,1], ['Died', 'Survived'])	1	1
Data_train.info()	1	1
"test_df.drop([""Name"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""FamilySize""], axis = 1)"	1	1
scaler.transform(series.values.reshape(-1,1)).reshape(-1)	1	1
tdata.drop(labels=['Name' ,'Ticket','Cabin'],axis=1)	1	1
train_data.values[train_index], train_data.values[test_index]	1	1
test[['Pclass','Fare']]	1	1
train['Fare_Range']=pd.qcut(train['Fare'],4)	1	1
data.loc[61,'Embarked'] = 'S'	1	1
"train['Title'] = train['Name'].str.split("", "", expand=True)[1].str.split(""."", expand=True)[0]"	1	1
train_df_final.iloc[:, 0]	1	1
titanic_test.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)	1	1
dataset['FarePP'] = dataset['FarePP'].astype(int)	1	1
"dftest[""PassengerId""],"	1	1
data['NameTitle'].value_counts()	1	1
np.empty((batch_size), dtype='float32')	1	1
input_df.copy()	1	1
df_all['TicketNum'] = df_all['Ticket'].str.replace(pat= '(\D)', repl= '')	1	1
titanic_train['Emb_Sex'] = titanic_train['Embarked']*titanic_train['Sex']	1	1
data_combined['Ticket'] = data_combined['Ticket'].apply(cleanTicket)	1	1
X_train['Cabin'] = X_train['Cabin'].fillna(avg)	1	1
parameters['save_cost']:	1	1
train.loc[train['Fare'].between(0, 30, inclusive=True), 'Fare'] = 0	1	1
train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean()    #各组的存活率	1	1
"test.drop(""SibSp"", axis = 1, inplace = True)"	1	1
"sns.boxplot(x=""Survived"", y=""Age"", data=titanic, saturation=0.8)"	1	1
rd.drop(['Name','Ticket','PassengerId'],axis=1)	1	1
test['FamilySize'] =  test['SibSp'] + test['Parch']	1	1
full_dataset.loc[full_dataset['Age']>64.084,'Age']=0	1	1
ds_test['Title'].replace(['Don','Dona', 'Rev', 'Dr', 'Major', 'Lady', 'Sir', 'Col', 'Capt', 'the Countess', 'Jonkheer', 'Speciala'], 'Special', inplace=True, regex=True)	1	1
df['TicketDensity'] = df.Ticket.map(ticket_density)	1	1
train.Pclass.hist(train.FamilySize)	1	1
df.to_csv('submission_yichen.csv',header=True)	1	1
total_result.sort_index().reset_index().copy()	1	1
"train_ori.loc[(train_ori[""Title""] == ""Mlle"") | (train_ori[""Title""] == ""Ms"") ,""Title""] = ""Miss"""	1	1
data_all['Pclass_2'] = (data_all['Pclass']==2)+0	1	1
train['AgeBand'].astype(int);	1	1
train_df.append(test_df, ignore_index=True, sort=False)	1	1
"df_age_test_X.drop(labels=[""Age""], axis=1, inplace=True)"	1	1
class1_df['AgeFill'].hist(bins=max_age / bin_size, range=(1, max_age))	1	1
fimpp.sort_values()	1	1
"combine[""hasSibs""]=combine[""SibSp""].apply(lambda x : (x>0)*1)"	1	1
"titanic['AgeBins'] = 0  # New feature ""AgeBins"" created and an initial value '0' is assigned to it"	1	1
"tot[""Ticket""], tot[""Cabin""], tot[""RT""], tot[""LT""]"	1	1
plt.hist(fare)	1	1
cabin[0]=='G'	1	1
full_train2.describe()	1	1
X.iloc[train_index]	1	1
X.iloc[:,4] = labelencoder_x.fit_transform(X.iloc[:,4])	1	1
df['Fare'] = np.where(df['Fare']>100 ,100, df['Fare'])	1	1
"train_dataset[""Fare""].fillna(train_dataset[""Fare""].median(), inplace=True)"	1	1
train['fare_std'] = fare_scaler.transform(train['Fare'].values.reshape(-1, 1))	1	1
"test[""Survived""] = gbdt.predict(test_data_X)"	1	1
names.loc[(names['ms'])==1,'miss'] = 1	1	1
algorithm_results.sort_values(by=['Test Accuracy'], ascending=False, inplace=True)	1	1
test.Fare.fillna(missing_fare, inplace=True)	1	1
"test_df2.drop(""PassengerId"", axis=1).copy()"	1	1
df['Age'] = df[['Age','Pclass']].apply(impute_age, axis=1)	1	1
test_set['Title'] = test_set['Name'].apply(get_title)	1	1
train['Embarked'][train['Embarked']=='C']=1	1	1
"sex[""Sex""] = np.nan"	1	1
"X_train[""Mother_col""] = ""Not Mother"""	1	1
data_val['Survived'] = submit_xgb.predict(data_val[data1_x_bin])	1	1
predict_df['PassengerId'] = test_data['PassengerId']	1	1
train_df.groupby('Title',as_index=False)['Survived'].mean().sort_values(by='Survived',ascending=False)	1	1
"train.drop(labels=[""Survived"",""PassengerId""], axis=1) #define training features set"	1	1
train_df['FamilySize'] = train_df['SibSp'] + train_df['Parch']	1	1
train1.rename(columns={'Pclass':'pClass'}).set_index('Sex').rename_axis(None).T	1	1
"test[""Family_flag""].loc[test[""Family""] == 0] = 0"	1	1
modelTest.append(perceptron)	1	1
X_train.columns.values[FeatSel_ada.get_support()]	1	1
pass_id.values:	1	1
data_copy.loc[data_copy['Embarked']=='S','Embarked']=0	1	1
test_df['Title'] = test_df.Name.str.extract('([A-Za-z]+)\.')	1	1
train[['isAlone','Survived']].groupby(train['isAlone']).mean()	1	1
"train['Deck'] = train['Cabin'].map(lambda x: re.compile(""([a-zA-Z]+)"").search(x).group()).map(decks)"	1	1
"train[[""Title"",""Survived""]].groupby([""Title""], as_index=False).mean()"	1	1
test_df.drop('Ticket', axis=1)	1	1
data['Embarked_Code']=label.fit_transform(data['Embarked'])	1	1
test['Fare'] = scaler.fit_transform(test['Fare'].values.reshape(-1, 1))	1	1
ax[1].set_title('Survival per Sex/Pclass in %')	1	1
"titanic_data[""Title""] = names[0]"	1	1
"related_people.loc[related_people[""PassengerId""]==727,""RGroup""]=""Renouf_M"""	1	1
F_train.shape[1]**0.5,	1	1
"solution_dt.to_csv(""solution_dt.csv"", index_label = [""PassengerId""])"	1	1
df_comb['TimeTravelled'] = 11 # default for S	1	1
test.drop(columns=['Survived'], axis=1, inplace=True)	1	1
test.loc[(test['Pclass'] == 3) & (test['hasCabin1'] == 0), 'class_hascabin'] = 6	1	1
test_df.loc[ test_df['Age'] > 64, 'Age'] = 4	1	1
test_data[['FamilySize','Age','Fare','Pclass','PassengerId']]	1	1
train_predictions.corr()	1	1
"data[""Age_cohort""][(data[""Age""]>2)&(data[""Age""]<=6)]=1"	1	1
train.drop(['PassengerCount','PassengersSurvived','Ticket'],axis=1,inplace=True)	1	1
submissions.to_csv('my_submissions.csv', index=False)	1	1
titanic_df['SharedCabin'] = titanic_df['Cabin']	1	1
train.corr() >.8	1	1
df_full['Data'] == 'T'	1	1
"data.loc[(data[""Age""] > 48) & (data[""Age""] <= 64), ""Age_group""] = 4 # young elderly"	1	1
df_train.drop(['Name','Ticket','Cabin'], axis=1)	1	1
titanic_test_data.loc[titanic_test_data.Cabin.str[0] == 'C', 'Cabin'] = 3	1	1
"axes[1].set_title(""Second Class"")"	1	1
df_test['AgeRange'] = pd.cut(df_test['Age'], [0, 15, 80], labels=[0, 1])	1	1
scaler.transform(test_feats)	1	1
df_full['Age']:	1	1
"testdataframe2[""PassengerId""]= testdataframe[""PassengerId""] /200"	1	1
models.append('NuSVC')	1	1
csv_final_test['Sex']	1	1
T.dot(ts.as_matrix()).T/m	1	1
my_result.to_csv('submission.csv', index=False)	1	1
test_df_y.iloc[:, 1].values	1	1
plt.rcParams['figure.figsize'] = (16,9)	1	1
test_data['Cabin'].fillna('U', inplace=True)	1	1
women.loc[full_train_set['Survived'] == 1].shape[0]	1	1
"test_Pre[""Fare""].fillna(test[""Fare""].median(), inplace=True)"	1	1
Titanic_dataframe.loc[:, 'Embarked'] = Titanic_dataframe.loc[:, 'Embarked'].str.replace('C', '1')	1	1
test.drop(['Cabin'], axis = 1, inplace = True)	1	1
allset.drop(['LastName'],axis=1)	1	1
"datacv.ix[i,""Name""]"	1	1
"test[""Age""] = pd.qcut(test[""Age""], q=5, labels=False)"	1	1
X_test.head(6)	1	1
temp_df.loc[data_df['Tour'] == '-1', ['IsWoman', 'IsChild']] = 0	1	1
clf_metrics.drop('clf_name', axis=1).columns:	1	1
df.loc[((df.Sex == 2) & (df.Cabin == 1)) , 'Se_Ca'] = 4 #female with cabin	1	1
train_df.loc[(train_df['Fare'] > 7.91) & (train_df['Fare']<=14.454),'Farecat'] = 1	1	1
train_copy.drop(drop_elements, axis = 1)	1	1
"test_df[""percentage""]=999"	1	1
cols.insert(35, 'p_fare^2')	1	1
test_df['Farecat'] = 0	1	1
"train.drop(labels = [""Survived""], axis = 1)"	1	1
"titanic_test_df[""Fare""] = titanic_test_df.Fare.fillna(titanic_test_df[(titanic_test_df['Pclass'] == 3) & (titanic_test_df['Embarked'] == 'S')]['Fare'].mean())"	1	1
"train[""Survived""][train[""Sex""] == 'male'].value_counts(normalize = True)"	1	1
combine_df['Title'] = combine_df['Title'].replace(['Don','Dona', 'Major', 'Capt', 'Jonkheer', 'Rev', 'Col','Sir','Dr'],'Mr')	1	1
test_df.join(Pclass_dummies_test)	1	1
combined['Alone'] = combined['FamilySize'].map(lambda s : 1 if s == 1 else 0)	1	1
train_copy.loc[train_copy['SibSp'] == 2, 'SibSp_Category'] = 2	1	1
np.round(np.mean(test[['Survived_nn', 'Survived_svm','Survived_rf']],axis = 1))	1	1
X_test.Age.fillna(X_test.Age.median(),inplace=True)	1	1
train['LargeFamily']=np.where(train['FamilySize']>5,1,0)	1	1
X['Age'] * X['Pclass']	1	1
original_test_data['SibSp'].hist(ax=axarr[3][1])	1	1
data_train.describe() #Check out general information	1	1
prep.transform(X_train)	1	1
test['CabinBool'] = test['Cabin'].notnull().astype('int')	1	1
df_Test.isnull().sum()	1	1
data_frame['Title'] = data_frame['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())	1	1
result.loc[index] = [max_depth, n_estimators, learning_rate, scores]	1	1
test.drop(['Ticket'],axis = 1,inplace = True)	1	1
combine['Embarked'].fillna('S', inplace = True)	1	1
df_train['sin_fare'] = df_train['fare'].map(np.sin)	1	1
training_data[['Survived', 'Sex']].groupby('Sex').mean()	1	1
"train['mrs'] = np.where(train['Name'].str.contains(""Mrs. ""), 1, 0)"	1	1
fill_Age_result.isnull()	1	1
df['Age_Null_Flag'] = df['Age'].apply(lambda x: 1 if pd.isnull(x) else 0)	1	1
big_X.loc[ni, ['Age']] = newAges[i]	1	1
titanic.loc[titanic['Embarked'].isnull() == True, 'Embarked']='C'.strip()	1	1
"train[""Embarked_2""] = train[""Embarked""] == 'Q'"	1	1
result_df.drop('PassengerId',axis=1)	1	1
df_titanic['Age'][condition].median()	1	1
test['AgeGroup'] = test['Age'].apply(age_group)	1	1
Anova.loc[var[0],'Pval'] = anova_one_way[1]	1	1
missing_df.reset_index(inplace=True)	1	1
dataset['Embarked'] = dataset['Embarked'].map(port_mapping)	1	1
data.loc[:,['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
X_val_ch['PassengerId'] = X_val_Passenger_Id	1	1
test['A3'] = np.array(test['CategoricalAge'] == 3).astype(np.int32)	1	1
train['SexCategorical'] = train['SexCategorical'].astype(int)	1	1
data['Fareband'] = pd.qcut(data.Fare, 5, labels=False)	1	1
"test[""Age""][(test[""Age""] > 48) & (test[""Age""] <= 64) ] = 3"	1	1
test_data.Embarked.fillna(value='S')	1	1
d_test.drop('Survived', axis=1)	1	1
regressor.add(LSTM(units=50))	1	1
np.mean(cv_scores)*100	1	1
dataset['Fare'] = dataset.Fare/dataset.n_on_ticket	1	1
prediction.size	1	1
map_table_age_df.iloc[10:15, 2] = [4, 18, 31, 26, 41]	1	1
test.drop(columns=['PassengerId'], axis=1, inplace = True)	1	1
all_data['Embarked'] = all_data['Embarked'].fillna(all_data['Embarked'].ffill())	1	1
test['Pclass'] = test['Pclass'].astype(object)	1	1
titanic_df['Embarked'] = titanic_df['Embarked'].fillna('Z')	1	1
train_set.drop(['PassengerId', 'Name', 'Ticket', 'Cabin' ], axis=1)	1	1
df_train.drop(labels='tmpFareBand',axis=1,inplace=True)	1	1
titanic_df[['Class','Survived']].groupby(['Class'],as_index=False).mean()	1	1
"train_data[""AgeRange""] = pd.cut(train_data[""Age""], 5)"	1	1
data_full['Titles'] = data_full['Titles'].replace('Mlle', 'Miss')	1	1
train.loc[(train['Age'] < 10), 'Child'] = 1	1	1
train.Age.isnull().any() #So no null values left finally	1	1
features_train.tail()	1	1
x_test['IsAlone'] = 1	1	1
frame.query('Fare < 181').copy() if not isTest else frame.copy()	1	1
crosstab.iloc[:i,:i],	1	1
dataset['Title'] = dataset['Title'].map(Title_Dictionary)	1	1
data_copy.loc[data_copy['Embarked'] == 'S', 'Embarked'] = 2	1	1
in ['Embarked', 'Fare']:	1	1
ax[3].set_title('Feature Importance in ExtraTrees')	1	1
"val_df[""Q""] = val_df.Embarked.apply(lambda l: np.where(l==2, 1, 0))"	1	1
"dataset[""Age""].fillna(dataset[""Age""].median(), inplace = True )"	1	1
data.loc[pd.isnull(data['Embarked'])]	1	1
testdf.drop(['Name', 'Ticket', 'Cabin'], axis=1)	1	1
train.drop([x for x in train.columns if x not in test.columns], axis=1, inplace=True)	1	1
temp['model'] = i[0]	1	1
Y.loc[:, col].transform(lambda x: self.mappings[col]['cat_to_int'][x])	1	1
values.astype(np.float64),	1	1
data.append(clf.score(X_test, y_test))	1	1
sub_vot2['Survived'] = pred_all_vot2	1	1
lastname_table.loc[lastname_table['Dead_mom_w_lastname'] > 0, 'Dead_mom_w_lastname'] = 1	1	1
dataset.loc[dataset['Fare'] > 31,'Fare'] = 3	1	1
raw_train_df.isnull()	1	1
df.Outlier.sum()	1	1
dft['Parch']	1	1
testONS.head(500)	1	1
train_df.groupby('Fare')['Fare'].count()	1	1
df_titanic['Surname'] = df_titanic['Name'].map(lambda i: i.split(',')[0])	1	1
train['Ticket_Cat'] = train.Ticket.apply(lambda s: s.split(' ')[0])	1	1
data_bar_test.sort_values(by = ['Percent_Missing','Feature'])	1	1
survived_0.hist()	1	1
test['Age'].fillna(train.groupby(['Sex','Pclass','Title'])['Age'].transform('median'),inplace=True )	1	1
test['title'].values[i-1]= re.search('([A-Za-z]+)\.', test['Name'].values[i-1]).group()	1	1
model.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu', input_dim = 10))	1	1
data.loc[(data.passenger_fare>45.49) & (data.passenger_fare<=45.51) & (data.Pclass==1) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>45.49) & (data.passenger_fare<=45.51) & (data.Pclass==1) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
np.mean(submit_probas > 0.5)	1	1
df_all['SharedTicket'] = [1 if i > 1 else 0 for i in df_all['TicketCount']]	1	1
"bp[""criterion""],"	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Ms', 'Miss')	1	1
train.drop(['Fare'],axis=1,inplace=True)	1	1
"tp.loc[tp[""Ticket_g""]==""CA"",""Ticket_c""] = 4"	1	1
df.loc[:,'Ticket Prefix'] = df['Ticket'].apply(ticket_prefix)	1	1
curr_row[1]	1	1
mod_data.dropna()	1	1
data.drop(labels=['Name'], axis=1, inplace=True)  # we can even drop the 'Name' column now	1	1
df_train['age_bin'] = pd.cut(df_train['age'].astype(int), bins=bins_age, labels=range(5), include_lowest=True)	1	1
X_test.groupby(['Fare'])['Fare'].count() / np.float(len(X_test))	1	1
"train_dat.at[i,""isAlone""] = 1"	1	1
test_dataset['Gender'] = test_dataset['Sex'].map({'female': 0, 'male': 1}).astype(int)	1	1
tr.loc[(tr['Age']> 8)&(tr['Age']<=16), 'Age'] = 1	1	1
"train[['Pclass', 'Survived']].groupby(""Pclass"").mean().reset_index()"	1	1
"train_df[""Age""][np.isnan(train_df[""Age""])] = random_age1"	1	1
"df_train[""Title""] = df_train[""Title""].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
"train_data.loc[train_data[""FamilySize""] < 2, ""FamilySizeBelow2""] = 1"	1	1
training_set.drop('Cabin', 1, inplace=True)	1	1
train['T1'] = np.array(train['Title'] == 'Master').astype(np.int32)	1	1
full_set['Fare'] = full_set['Fare'].interpolate()	1	1
embarked_non_survived['count']	1	1
vd['Survived'] = np.nan	1	1
full_data[1]['PassengerId']	1	1
train_df.loc[(train_df['Age'] > 40) & (train_df['Age'] <= 60), 'AgeGroup'] = 4	1	1
le1.transform(finalTest.Embarked)	1	1
test_df['Embarked'] = test_df['Embarked'].map({'C':0, 'Q':1, 'S':2})	1	1
ship['Title'].loc[ship['Title'] == 'Mme'] = 'Miss'	1	1
embarked[ 'Embarked' ] = embarked[ 'Embarked' ].map( lambda c : c[0] )	1	1
test_df['Title'] = title_col	1	1
for_age_train['Age']	1	1
Titanic.Age.fillna(value=MedianAge)	1	1
train['AgeBand'] = fill_age_df.iloc[:train_len, 0]	1	1
test['Embarked'].fillna('n/a', inplace=True)	1	1
Data_train['CategoricalAge'] = pd.cut(Data_train['Age'], 5)	1	1
dataset['Fare_Per_Person'] = dataset['Fare']/(dataset['Relatives']+1)	1	1
train.loc[(train['AgeModified']>40) & (train['AgeModified']<=50),'AgeCategorical'] = 4	1	1
train[['Age','Fare']].describe()	1	1
combine.loc[ combine['Fare'] <= 7.91, 'Fare'] = 0	1	1
test_csv.loc[(test_csv.Name.str.contains('Ms') & test_csv.Age.isnull()), 'Age'] = Ms_average_age	1	1
train.drop(excl, axis = 1)	1	1
ticket_ser.apply(clean_ticket)	1	1
dataset.hist(column='ageClass')	1	1
"c_data[""PassengerId""]"	1	1
data.drop(columns=['Name','Sex','Cabin','Embarked','Pclass'], inplace=True)	1	1
df_test[['P_Ti_Minor' , 'Minor']] = df_data[['P_Ti_Minor', 'Minor']][len(df_train):]	1	1
titanic.loc[male_index,'Sex'] = 1	1	1
MLA_compare.sort_values(by = ['MLA Test Accuracy Mean'], ascending = False, inplace = True)#按照训练准确度降序排列	1	1
"test[""Famille_0""] = test[""FamilleMember""] == '0'"	1	1
i.drop(drop_rows, inplace=True)	1	1
i_range.append(i)	1	1
df.drop(['Ticket', 'SibSp', 'Parch', 'Name', 'Lname', 'Pclass'], axis=1)	1	1
submission.to_csv('submission_file.csv', index=False)	1	1
new_df['Sex'] = new_df['Sex'].astype('category')	1	1
"df.loc[(df.ischild == 1)&(df.Age.isna()), ""Age""] = np.random.randint(0, 16, na)"	1	1
mean_age_by_title.iteritems():	1	1
train['FamilySize']=train['SibSp'] + train['Parch'];	1	1
final_training_df.drop('Survived', axis=1).values.reshape(-1, 18)	1	1
dt_train['Fare'].fillna(dt['Fare'].mean(skipna=True), inplace=True)	1	1
df_test['PassengerId'] # Saving for later	1	1
test_df['Fare'].fillna(test_df[test_df['Pclass'] == 3].Fare.median(), inplace = True)	1	1
test_df['top_cabin'] = test_df['top_cabin'].astype(np.int64)	1	1
test.Fare.fillna(value=14.5, inplace=True)	1	1
"train_df[[""SibSp"",""Survived""]].groupby(['SibSp'],as_index=False).mean().sort_values(by='Survived',ascending=False)"	1	1
"data.loc[(data[""Age""] > 32) & (data[""Age""] <= 48), ""Age_group""] = 3 # middle age"	1	1
drop_elementsONS.append('Title')	1	1
X_train.append(training_set_scaled[i-60:i,0])	1	1
train_long[['Name','Pclass','Fare','Age','Sex','Family','Embarked']]	1	1
train.loc[train.Sex=='female']	1	1
testData['Initial']=0	1	1
sns.boxplot(x='cabin_known',y='Fare',data=train)	1	1
test[['Age', 'Fare']]	1	1
train_df.ix[(train_df.Cabin != 'Z'), 'Cabinknown'] = 'Yes'	1	1
train.drop(drop_column, axis = 1, inplace = True)	1	1
embarked_survived['count']	1	1
df.drop(ignore_flds, axis=1, inplace=True)	1	1
test_dummy['Age'] = age_imputed	1	1
dftrain['Fsize']=family_df['Fsize']	1	1
X_train_dev.head()	1	1
df_train['Fare'].describe()	1	1
clf_best_estimator.append(grid_searchs[i].best_estimator_)	1	1
"train.loc[train[""Parch""] >1 , ""pc_c""] = ""2"""	1	1
ax[1].set_title('Survived vs Dead by Pclass')	1	1
combine['AgeAbove12'] = np.NAN	1	1
item['Name']	1	1
tit_df.loc[p, 'Age'] = rand_NMMM_tit[not_m]	1	1
titanic_test.drop(['Name','Age','Fare'],axis=1)	1	1
df_analysis['Name'].apply(extract_title_str)	1	1
"train_data[[""Pclass"", ""Survived""]].groupby(""Pclass"", as_index = False).mean().sort_values(by = ""Survived"", ascending = False)"	1	1
dataset['FareBand'] = pd.qcut(dataset['Fare'], 4, labels = [1, 2, 3, 4])	1	1
X_validation['Age'] = X_validation['Age'].values.round()	1	1
titanic.drop(['Parch'], axis = 1)	1	1
test_x.dropna()	1	1
tit_df_test['Fare'].fillna(value=13.91,axis=0,inplace=True)	1	1
X_trainTest.head()	1	1
training_dataset.iloc[:,1].values	1	1
x.assign(Cabin_bool = x['Cabin'].notnull()),	1	1
df['FamilySize'].plot(kind='hist', color='c');	1	1
df.groupby(['Pclass']).agg(aggregate)	1	1
full[891:1310]	1	1
titanic['Name'].unique()	1	1
"test[""FamilleMember""] = test[""SibSp""]+test[""Parch""]"	1	1
test_data.drop('Embarked',axis=1)	1	1
data.groupby(['Embarked', 'Sex'])['Survived'].mean().plot(kind='bar')	1	1
train.Fare.fillna(train.Fare.mean(),inplace=True)	1	1
genderSurvivers.pivot(index='Sex', columns='Survived', values='count').plot(kind='bar')	1	1
result.to_csv('randomforest-phonetic2.csv', index=False)	1	1
train['tkno']	1	1
the_df['EmbarkedInteger'] = the_df['Embarked'].fillna('X')	1	1
importances.head(10) # 10 most important features	1	1
test.loc[(test['Name_len'] > 19) & (test['Name_len'] <= 23), 'Name_len'] = 1	1	1
"full_data['Title'] = full_data['Title'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')"	1	1
X_test.mean()	1	1
df3.describe()	1	1
train.loc[:, 'Pclass': 'Embarked'],	1	1
X.loc[X['Name'].str.contains('Miss')]	1	1
X.std(ddof=0)	1	1
train['Embarked'] = encoder.fit_transform(train['Embarked'].astype(str))	1	1
"train_df[""ticket""] = train_df[""Ticket""].apply(numeric_extract)"	1	1
df_all['Title'][df_all.Title.isin(['Dona', 'Lady', 'the Countess'])] = 'Lady'	1	1
new_combined_data.loc[0:890].drop(['Age','Cabin','Ticket','index','PassengerId','Name'],axis=1)	1	1
sns.boxplot(classifiers,accuracy)	1	1
"result.to_csv(""./""+name+""_predictions.csv"", index=False)"	1	1
pred['pred_'+str(i)] = pred_test	1	1
train.loc[:,idx]	1	1
maindf.head()	1	1
data.loc[ data['Age'] > 41, 'SortAge_2'] = 4	1	1
submission['Survived'] = test_predictions.astype('int')	1	1
all_dummy_df['SibSp'].value_counts()	1	1
train.drop(['SibSp','Parch'],1)	1	1
test['Title'] = test.Name.str.split(',', expand=True)[1].str.split('.', expand=True)[0]	1	1
"test_df[""family_size""] = test_df[""sibsp""] + test_df[""parch""]"	1	1
test_dataframe.values	1	1
"titanic_df['FamilySize'] =  titanic_df[""Parch""] + titanic_df[""SibSp""]"	1	1
"inDF[""Fare_type""] =pd.qcut(inDF['Fare'], 5)# inDF[""Fare""].apply(lambda x : ""Cheap"" if x < 10 else ""Mid"" if x < 100 else ""Exp"")"	1	1
combined.iloc[891:].Embarked.fillna('S', inplace = True)	1	1
df.drop(columns=['Cabin', 'PassengerId', 'Name', 'Ticket'], inplace=True)	1	1
test6['Fare'] = test6['Fare'].fillna(test6['Fare'].median())	1	1
"train_data[""FareBelow20""] = 0"	1	1
train.drop(['LargeFamily'], axis=1)	1	1
data['Embarked'] = data['Embarked'].fillna('C')	1	1
train.drop(['Survived'], axis=1).drop(droplist, axis=1)	1	1
RFC_submission.to_csv('RFC_submission.csv', index=False)	1	1
farepp_survive_crosstbl.divide(farepp_survive_crosstbl.sum(axis = 1), axis = 0)	1	1
full.interpolate()	1	1
data['Embarked']	1	1
train['Title'] = train.Name.apply(lambda x: x[x.find(',')+2:x.find('.')])	1	1
test['Embarked'].replace('S', 2, inplace = True)	1	1
"train_data[""CabinLetterC""] = 0"	1	1
dataset_toDelete['Survived'].value_counts()	1	1
frame['boy']=(frame.Name.str.contains('Master'))|((frame.Sex=='male')&(frame.Age<13))	1	1
train_df.Parch.hist(bins = 20, ax=axes[0])	1	1
testData.info()	1	1
Xdf.loc[(Xdf['Age'] > 16) & (Xdf['Age'] <= 32), 'Age'] = 1	1	1
"test.drop([""SibSp"", ""Parch"", ""Title_Mr""], axis = 1)"	1	1
test_df.drop(['Name', 'Ticket', 'Cabin'], axis=1)	1	1
test['Sex'] = test['Sex'].map({'female':0,'male':1})	1	1
title[ 'Title' ] = combined_df[ 'Name' ].map( lambda name: name.split( ',' )[1].split( '.' )[0].strip() )	1	1
"train['Ticket_info'] = train['Ticket'].apply(lambda x: x.replace(""."","""").replace(""/"","""").strip().split(' ')[0] if not x.isdigit() else 'X')"	1	1
data['Parch'] = data['Parch'].fillna(data.Parch.median())	1	1
"train_data.loc[train_data[""Pclass""] == 1, ""PclassOne""] = 1"	1	1
combined['Cabin']	1	1
data_test.sample(10)	1	1
X.iloc[:, :13]	1	1
train_df[['Alone','Survived']].groupby('Alone', as_index=False).mean().sort_values(by='Alone', ascending=False)	1	1
train.drop(drop_cols, axis=1, inplace=True)	1	1
"train_ori.loc[train_ori[""Title""] == ""Mrs"",""Age""] = train_ori.loc[train_ori[""Title""] == ""Mrs"",""Age""].fillna(mrsage)"	1	1
df_all['Fare'].fillna(value=fare_fill,inplace=True)	1	1
titanic.loc[titanic.PassengerId==1044.0, 'Fare']=13.30	1	1
df['Embarked'] = df['Embarked'].replace('C', 1)	1	1
data_train.isnull().sum(axis=0)	1	1
Each_Passenger.loc[(Each_Passenger['Age'] <= 0) & (Each_Passenger['Fare'] <= 0) , 'Age']  =  0	1	1
data.loc[(data['Age'] > 48) & (data['Age'] <= 64), 'Age'] = 2	1	1
pp.hist(fare_2, bins, normed=1, facecolor='red', alpha=0.5)	1	1
np.mean(df.Fare), np.std(df.Fare)	1	1
data.surname_Bishop.astype('category')	1	1
df['Ticket_categorical'].fillna('Missing', inplace=True)	1	1
dfcopy.Fare.fillna(median_fare, inplace=True)	1	1
total[1] / (total[0] + total[1])	1	1
all_data.at[i,'Title']= title_mapping[all_data.loc[i].at['Title']]	1	1
cat_imp.transform(names)	1	1
train_data[['sex_code', 'Age']]	1	1
train_df.loc[train_index]	1	1
df.drop(labels='Fare', axis='columns', inplace=True)	1	1
"test[""isChild""] = test.Age <= 15"	1	1
train[['Age','Fare','Family']]=sds_xtrain1	1	1
df.keys() if key.startswith('param_')	1	1
titanic_test_df['Sex'] = le.fit_transform(titanic_test_df['Sex'].map( {'female': 0, 'male': 1} ).astype(str))	1	1
test.head(25)	1	1
titanic_train_df['Title'] = titanic_train_df['Title'].replace('Dona', 'Rare')	1	1
"mom_d['Pclass'].value_counts(sort=False).plot(kind=""bar"",alpha=0.5,color='blue',ax=axes[1,1])"	1	1
test['y_hat'] = prediction	1	1
submission.to_csv(path_or_buf='submission.csv',index=False)	1	1
combined_df.Fare.fillna(median_fare, inplace=True)	1	1
"df_test[""title_ms""] = df_test[""title""].isin([""miss."",""ms.""]).astype('uint8')"	1	1
"points_for_GP.insert(0, ""Survived"", Y_train)"	1	1
xgb_feat_red.transform(xgb_red_train)	1	1
train_data['Cabin'] = train_data['Cabin'].fillna('U')	1	1
titanic['Family']=titanic['SibSp']+titanic['Parch']	1	1
df.Age.fillna(m, inplace=True)	1	1
titanic_data[['Parch', 'Survived']]	1	1
"test[""Embarked_Q""] = False"	1	1
x['vote'] = sum(vSurvived == split['Y_cv'])/len(vSurvived)	1	1
X_ts.copy()	1	1
df_train['Title'].value_counts().plot.bar()	1	1
data['Age']=data[['Age','Pclass']].apply(age_fill,axis=1)	1	1
test_df['Cabin'].head(10)	1	1
finalTest.Embarked.fillna('S', inplace=True)	1	1
titanic_df['Alone'].loc[titanic_df['Alone'] == 0] = 'Without Family'	1	1
full_set['Embarked'][full_set['Embarked'].isnull()] = 'S'	1	1
le1.transform(train.as_matrix(columns=['Sex']))	1	1
df_analysis['family_size'] = df_analysis['SibSp'] + df_analysis['Parch'] + 1	1	1
data['Sex']=data.Sex.apply(f)	1	1
clean_data[['Survived']].copy()	1	1
"test['Title'] = test['Name'].map(lambda x : x[x.find("","")+1:x.find(""."")])"	1	1
X_test['Cabin'].iloc[i] = cabinToValue(X_test['Cabin'].iloc[i])	1	1
"train_df[[""Parch"", ""Survived""]].groupby([""Parch""]).mean().plot.bar(ax = ax[1])"	1	1
df_train.drop(['SibSp'], axis = 1)	1	1
train.drop(['Age','Fare','PassengerId','Name','SibSp','Parch'], axis =1, inplace=True)	1	1
test_df_clean['Title'] = test_df_clean['Name'].map(lambda x: re.split('[,.]', x)[1].strip())	1	1
np.where(rounded_preds!=Y_valid)[0]	1	1
"df_test.set_value(152,""Fare"",""60"")"	1	1
train_data['Fare'].loc[train_data['Pclass']==3]	1	1
data['Age'] = data['Age'].apply(normalize_age_below_one)	1	1
dft['Name']	1	1
corr.sort_values(['Survived'], ascending = False, inplace = True)	1	1
"dataset.loc[dataset[""Embarked""].isnull(), ""Embarked""] = ""S"""	1	1
df_train['Survived'] == 0	1	1
data.Cabin_Letter_G.astype('category')	1	1
train_copy.loc[train_copy['Pclass'] == 1, 'Pclass_Category'] = 0	1	1
model_data.Ticket_clf.drop_duplicates()	1	1
"train[""Survived""].values.tolist()"	1	1
df[['Cabin_deck', 'Survived']].groupby('Cabin_deck').count().merge(df[['Cabin_deck', 'Survived']].groupby('Cabin_deck').mean(), right_index = True, left_index = True)	1	1
combine['CabinPretext'] = combine.Cabin.str.extract('([A-Za-z]+)', expand=False)	1	1
X['FaresRange'] = np.select(conditions, choices, default=3)	1	1
"dftrain[""Ticket""].value_counts()[:19]"	1	1
age['Sex'] = sex['Sex']	1	1
trainTitanic.info()	1	1
"train_df.pop(""Name"")"	1	1
tmp_val_X.info()	1	1
row['Sex'] == 'female' and row['Fare'] > 25 and row['Pclass'] == 3:	1	1
dataset['Embarked'] = dataset['Embarked'].map({'S':0,'C':1,'Q':2})	1	1
curr_row[0][0]	1	1
dataset['LogFare']    = dataset['Fare'].astype(float).map(lambda x: math.log(x) if x else None)	1	1
test_df.loc[ train_df['Fare'] <= 7.91, 'Fare']= 0	1	1
trainPCA2['12'] = trainPCA['Pclass2']	1	1
"df[""Age""].dropna(), y=df[""Fare""], mode = ""markers"","	1	1
df_embarked['Embarked'] = df_embarked['Embarked'].map(dic_embarked)	1	1
"result_df.drop(""Survived"",axis=1)"	1	1
submission['Survived']	1	1
"test[""Child""] = float(""NaN"")"	1	1
combined_num_cat['Child'] = combined['Child']	1	1
combine['Alone'] = (combine.SibSp + combine.Parch) == 0	1	1
temp_df['NamePrefix'] = temp_df.NamePrefix.apply(lambda x:((x-mn_NamePrefix)/(mx_NamePrefix-mn_NamePrefix)))	1	1
"result_test1[""PassengerId""] = passenger_id_test"	1	1
testDataFeatures['Survived']=Voting_Classifier.predict(testDataFeatures)	1	1
train.Age.isna().value_counts()	1	1
titanic_train['Companion'] = titanic_train['SibSp'] + titanic_train['Parch']	1	1
Title_Dict.update(dict.fromkeys(['Don', 'Sir', 'the Countess', 'Dona', 'Lady'], 'Royalty'))	1	1
dataset['Title'] = pd.Series(dataset_title)	1	1
i['AgeBin'] = pd.cut(i['Age'].astype(int), 5)	1	1
"df[""isAlone""] = alone"	1	1
data.Fare.quantile(0.75) + (IQR * 3)	1	1
train_df2['AgeBands'] = pd.qcut(train_df2.Age,4,labels=False)	1	1
test_df['Age']=test_df[['Age','Pclass']].apply(inpute_age, axis=1)	1	1
dataset['LastName'] = dataset['Name'].map(lambda name: name.split(',')[0].strip())	1	1
test.drop(columns='Fare', inplace=True)	1	1
x_train_c.copy()	1	1
x_false.head()	1	1
"titanic_train.groupby(pd.cut(titanic_train[""Age""], bins=[0, 14, 24, 34, 44, 54, 64, 80]))"	1	1
data['Professional'] = data['Title'].map(lambda x: 1 if str(x) in ['Dr', 'Major', 'Rev', 'Col', 'Capt'] else 0)	1	1
importances.loc[importances['importance'] < np.max(importances['importance'])]	1	1
dataset.loc[(dataset['Age'] > 5) & (dataset['Age'] <= 11), 'Age'] = 1	1	1
data_pruned.iloc[891:1309]	1	1
dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),                    'Age'] = guess_ages_sex_pclass[i,j]	1	1
"test_df[""HasCabin""] = test_df.apply(hasCabin, axis = 1)"	1	1
csv_train['Age'] = csv_train['Age'].fillna(age_mean)	1	1
df['n_noise']       = pd.cut(df.n_noise,11, labels=range(11))	1	1
df.loc[(df['Fare'] > 7.91) & (df['Fare'] <= 14.45), 'FareGroup'] = 1	1	1
column.copy(deep = True)	1	1
testY.to_csv('pred.csv', index=False)	1	1
test.loc[(test['Name_len'] > 23) & (test['Name_len'] <= 27), 'Name_len'] = 2	1	1
dataset['Embarked'] = dataset['Embarked'].map(embark_mapping)	1	1
df_1.isnull().sum(0)	1	1
"dataset[""Title""]=dataset.Name.str.extract(""([A-Za-z]+)\."", expand=False)"	1	1
scores_knn.std()	1	1
df_output[['PassengerId','Survived']].to_csv('../prediction/submission.csv', index=False)	1	1
x_num.shape	1	1
train['age_T'] = dataset['age_T']	1	1
df['Embarked'] = np.where(df['Embarked']== 'S', 2 ,df['Embarked']  )	1	1
trainingPCA['Survived']	1	1
classifiers.append(MLPClassifier(random_state=seed))	1	1
full_data[['Title', 'Sex', 'Survived']].groupby(['Sex', 'Title'], as_index=True).mean()	1	1
test_label.copy()	1	1
titanic['Embarked'] = titanic['Embarked'].map({'S':0,'C':1,'Q':2})	1	1
"_df[""fare""] = _df.fare.fillna(val)"	1	1
df.Cabin.fillna('T',inplace=True)	1	1
t_df['Alone']	1	1
"models.append((""MLPClassifier"",MLPClassifier(solver='lbfgs', random_state=0)))"	1	1
dftr.dropna()	1	1
"original_train_data['FamilySize']=original_train_data[""SibSp""]+original_train_data[""Parch""]+1"	1	1
train['title'] = train.Name.apply(deriveTitles)	1	1
df_test_output['Survived'] = grid_hard.predict(df_test_x)	1	1
train.loc[:, features2],	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Countess', 'Rare')	1	1
train_data['SibSp'].describe()	1	1
data_copy.loc[data_copy['Sex'] == 'male' ,'Sex'] = 1	1	1
"full.loc[full[""FamilySize""]==1,""FamilySizeBand""]=""Loner"""	1	1
train.values:	1	1
"accuracy_models[""Std""][j] = scores_model.std();"	1	1
x_train['Cabin'].str.extract('([0-9]+)')	1	1
test.apply(lambda x: hasFamily(x), axis=1)	1	1
np.dot(W1, X) + b1	1	1
X_test['Fare'] = X_test['Fare'].astype(int)	1	1
"data[""Pclass""] =  preprocessing.maxabs_scale(data[""Pclass""])"	1	1
result.to_csv('result.csv', index=False, header=['PassengerId', 'Survived'])	1	1
train['c_std'] = pd.Series(train.std(axis=1), index=train.index)	1	1
data.iloc[0:3,3:6]	1	1
x_train['Name_Len_char'] = x_train['Name'].map(lambda x: len(x))	1	1
test.loc[(test['Age']>30.00)&(test['Age']<=40.00),'NAge']=3	1	1
Age.plot.hist(bins=20,color='red',ax=ax[0])	1	1
train['Title']=train['Title'].replace(['Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev'],'officer')	1	1
df_test.loc[df_test['Embarked'] == 'S', 'Embarked'] = 0	1	1
train[['Name', 'Sex']].head()	1	1
df_combined.head(data_train.shape[0])	1	1
train.drop('Ticket',axis = 1,inplace = True)	1	1
"test.loc[test[""SibSp""] == 1, ""sib_c""] = ""1"""	1	1
df_test_ml['Title'] = df_test_ml['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
train['tmpAge'] = pd.cut(train.Age.fillna(train.Age.mean()), bins=[0,10,20,30,40,100], labels=[10,20,30,40,100]).astype(np.int64)	1	1
train_csv['Fare'].fillna(train_csv['Fare'].median(), inplace = True)	1	1
titanic_train.loc[titanic_train['Fare'] < 500, :]	1	1
dataset.loc[(dataset.Age.isnull())&(dataset.Initial=='Miss'),'Age']=22	1	1
data.Embarked.isnull().any() #Finally No NaN values	1	1
cabin['Number'] = cabin['Cabin'].map(find_num)	1	1
knn_scores.append((i,score_array.mean()))	1	1
test_df['Age'] = data_df['Age'][891:]	1	1
"train_df.drop(""Survived"",axis = 1)"	1	1
test_df['AgeBin']	1	1
"train[[""Name"", ""Master""]].head(10)"	1	1
test.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)	1	1
sns.boxplot(y='passenger_fare', x='Survived', data=data[data.Survived>=0], notch = True)	1	1
money_df.loc[money_df.Fare>30,'FareLabel'] = 'Expensive'	1	1
all_data[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index= False).mean().sort_values(by = 'Survived', ascending = False)	1	1
df.loc[miss_title & unknow,'Age'] = df[miss_title]['Age'].mean()	1	1
"dad_s['Age_cat'].value_counts(sort=False).plot(kind=""bar"",alpha=0.5,color='red',ax=axes[0,0])"	1	1
data_train.tail(5)	1	1
test['Bad_ticket'] = test['Ttype'].isin(['3','4','5','6','7','8','A','L','W'])	1	1
titanic_train_dataset.loc[titanic_train_dataset['FamilySize'] > 1, 'IsAlone'] = 0	1	1
df_train['Parch']	1	1
test.loc[(test['Pclass'] == 2) & (test['hasCabin1'] == 1), 'class_hascabin'] = 1	1	1
"df.loc[:, ""Age""].fillna(0, inplace=True)"	1	1
df['Embarked'].fillna('C', inplace = True)	1	1
sub_dataset.mean()	1	1
data.loc[data.Ticket=='LINE', 'Ticket'] = 'Fixed 1' # 4 items wich are not end to the number	1	1
train_df.Fare.describe(percentiles = [.1, .2, .3, .4, .5, .6, .7, .8, .9])	1	1
full_bins['AgeBin'] = pd.qcut(full_bins['Age'], 5)	1	1
df_to_imp['Sex'].unique():	1	1
enc.transform(train_df.Embarked)	1	1
lastname_table.loc[lastname_table['Dead_kid_w_lastname'] > 0, 'Dead_kid_w_lastname'] = 1	1	1
df_titanic_test_mod.loc[:,['Pclass','Sex','Embarked','Age','Title','SibSp','Parch']]	1	1
titanic_df_test['Fare'] = titanic_df_test['Fare'].apply(math.ceil)	1	1
df[['Parch', 'Survived']].groupby('Parch').mean()	1	1
"models.append((""LinearSVC"",LinearSVC()))"	1	1
ret_df['Fare'].fillna(np.median(analysis_df['Fare'].dropna()))	1	1
"train[""Fare""].isnull().sum() # count_nan_fare_train = 0"	1	1
final_csv['AgeBin'] = pd.cut(final_csv['Age'], bins=[0,12,20,40,120], labels=['Children','Teenage','Adult','Elder'])	1	1
dataset['Fare'] = dataset['Fare'].map(lambda i: np.log(i) if i >0 else 0)	1	1
dataset.loc[(dataset['Embarked'].isnull()) & (dataset['Sex'] == gender) & (dataset['Fare'] == fare) & (dataset['Pclass'] == pclass) & (dataset['Age'] == age),'Embarked'] = guessed_port	1	1
dataset['Age'].fillna(-1, inplace=True)	1	1
combined.shape[1]	1	1
train['PassengerId'].describe()	1	1
data['TitleCode'] = LabelEncoder().fit_transform(data['Title'])	1	1
X_train['Name_len'] = X_train['Name_len'].apply(lambda x: len(x))	1	1
"temp.to_csv(""gender_submission1.csv"",index=False)"	1	1
train[['Parch','Survived']].groupby('Parch').mean()	1	1
df_test.drop('PassengerId', axis=1).copy()	1	1
dataset['Age_known'] = dataset['Age'].isnull() == False	1	1
"tmp_train.loc[(tmp_train[""kmeans_labels""] == j) & (tmp_train[""Age""].isnull()), ""Age""] = tmp_age_train[j]"	1	1
"test[""Survived""] = RFCmodel.predict(Xt)"	1	1
train.loc[train['Embarked']=='C','Port']=1	1	1
"_df[""name_first""]    = _df[""_name""].apply(lambda i : i[2])"	1	1
train_df.update(result)	1	1
data_test['Sex'] = data_test['Sex'].replace(to_replace='female', value=1)	1	1
X_train[['TraveledAlone', 'Pclass']].groupby(['TraveledAlone'], as_index=False).mean()	1	1
data.loc[data.Fare.isnull(), 'Fare'] = data.Fare[(data.Pclass==3) & (data.qtd_same_ticket==1) & (data.Age>60)].median()	1	1
"train[""Survived""][train[""Sex""] == ""female""].value_counts(normalize = True) # normalize = True returns percentages instead of raw counts"	1	1
"submission_file.to_csv(""submission_file_svc.csv"", index = False)"	1	1
ax[2].set_title('Sex and Age vs Survived')	1	1
data_copy.loc[data_copy.Sex == 'male', 'Sex']= 1	1	1
train_df.drop('Name', axis = 1, inplace = True)	1	1
op['Survived']=op_rf	1	1
df['Salutation'] = df.Name.str.extract(', ([A-Za-z\s]+)\.', expand=False)	1	1
df_all['Family_name_count'] = df_all['Family_name'].apply(lambda x: x if family_name_count[x] > 1 else 'Small', 1)	1	1
train['SibSp_scaled'] = (train.SibSp - train.SibSp.mean())/train.SibSp.std()	1	1
"train_enc[""Survived""]"	1	1
df_test['Survived'] = predictions	1	1
full['FamilySize'] = full['Sibling_Spouse'] +                      full['Parent_Children'] +                      1 # include the passeger itself	1	1
test_set['Embarked'].fillna(test_set['Embarked'].mode()[0], inplace = True)	1	1
grouped2.Age.median()	1	1
pd.isna(row['Age']) else row['Age']	1	1
np.empty((NFOLDS,ntest))	1	1
ypred_bst.astype(int)	1	1
data_df['FarePerPerson'] = data_df['Fare'] / data_df['FamilySize']	1	1
"df_test.drop([""PassengerId""], axis=1).copy()"	1	1
"full.loc[(full[""FamilySize""]<5) & (full[""FamilySize""]>1),""FamilySizeBand""]=""SmallFam"""	1	1
test_data['TravelAlone']=np.where(test_data['TravelBuds']>0, 0, 1)	1	1
le.transform(train.Sex)	1	1
"related_people.loc[related_people[""PassengerId""]==984,""RGroup""]=""Hays_M"""	1	1
combined_df_imputed.rename(columns={'Age_y': 'Age'}, inplace=True)	1	1
x_cat.shape	1	1
train_df['Title'] = train_df.Name.str.extract('(\w+\.)', expand=False)	1	1
titanic['Age'] = titanic['Age'].astype(int)	1	1
data_train['Survived'].loc[data_train['Pclass']==1].value_counts()	1	1
trim_data['Embarked'] = trim_data['Embarked'].fillna('S')	1	1
df_train['ticketcount'] = df_train['ticketcount'].fillna(1)	1	1
big['Ticket'], big['Cabin'], big['Name'], big['XName'], big['Last_Name']	1	1
titanic_test['P_sex'] = titanic_test['Pclass']*titanic_train['Sex']	1	1
maindf['Survived']	1	1
data['Age'][pd.isna(data['Age'])] = fillage	1	1
train_df.groupby('Initial')['Cabin'].agg(mode)	1	1
df_full['Title'] = df_full['Title'].replace('Mme', 'Mrs')	1	1
ax[0].set_title('Survived vs Pclass')	1	1
test['Cabin']=test['Cabin'].fillna('unknown')	1	1
submission.to_csv('titanic_jpark_basic.csv', index=False)	1	1
train.drop(['Ticket','Fare','Cabin','Name','PassengerId'], axis=1, inplace=True)	1	1
featureRanks2['support'] = best_dtc.named_steps['rfe'].support_	1	1
age_lookup['Age'][age_lookup['Title'] == title][age_lookup['Pclass'] == pclass].values	1	1
holdout['Fare']=holdout['Fare'].fillna(train['Fare'].mean())	1	1
train.iloc[:, 8]	1	1
pre_list_fare.append('Non Alpha')	1	1
X_train_transformed.shape	1	1
df_titanic['Family'] = df_titanic['SibSp'] + df_titanic['Parch']	1	1
svm_submission.to_csv('svm.csv', index=False)	1	1
df.loc[1:5, ['Name', 'Age', 'Sex']]	1	1
titanic_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
in ['Capt', 'Col', 'Don', 'Jonkheer', 'Major', 'Mr','Rev', 'Sir']:	1	1
cabin_data.append(1 if type(tm_cabin_data[i]) != str else math.ceil(ord(tm_cabin_data[i][:1])/100+1))	1	1
train.join(e_t)	1	1
titanic['Age'] = titanic['Age'].fillna(titanic['Age'].median())	1	1
data['Fare'] = data.Fare.astype(int)	1	1
y_predict.size	1	1
ax[1].set_title('Embarked:Survived vs Dead')	1	1
test_df[['Fare']] = test_df[['Fare']].fillna(Pclass_Fare_grouping.median()[3])	1	1
values.sum()	1	1
train.drop(['SibSp', 'Parch'], axis = 1, inplace = True)	1	1
dataX.append(row[1:])	1	1
test['Shared_ticket'].iloc[i] = 1	1	1
i['Title'] = i['Title'].replace('Ms', 'Miss')	1	1
sub.to_csv('submission.csv', index = False)	1	1
"df_titanic['Parch'] == df_titanic.iloc[age][""Parch""]"	1	1
train_copy.corr(),linewidths=0.1,vmax=1.0, square=True,	1	1
test['LastName'] = test['Name'].apply(lambda x: x.split(',')[0])	1	1
test['Fare'].fillna(test['Fare'].mean())	1	1
titanic_train.iloc[[5, 17]]	1	1
aveFare.at[2, 'Fare']	1	1
fulldata['Family_size'] = pd.Series('M', index=fulldata.index)	1	1
"inDF[""Surname""] = inDF[""Surname""].apply(lambda x : ""Other"" if surname_size[x] <= 3 else x)"	1	1
test.copy(deep = True)	1	1
titanic_data.iloc[:,1]	1	1
df_test['Title'] = df_test['Name'].str.split(', ', expand=True)[1].str.split('. ', expand=True)[0]	1	1
df_all['Parch']+df_all['SibSp']	1	1
values.any()	1	1
ax[1].set_title('Histogram of Fare (not survived)')	1	1
dataset.drop(['Survived'], axis=1)	1	1
child12.info()	1	1
ax[0].set_title('Survived = 0')	1	1
dfcopy.Fare.median()	1	1
combine.ix[(combine['Age'].isnull())&(combine['Pclass']==3)&(combine['Sex']=='male'),'Age'] = 26	1	1
df.loc[(df['Fare'] <= 7.91),'Fare'] = 0	1	1
"submission.to_csv(""titanic_medrah_solution.csv"", index=False)"	1	1
trainPCA2['4'] = trainPCA['Pclass2']	1	1
df_titanic_test_mod.join(df_y_predict)	1	1
data_test.drop(['Ticket'], axis=1)	1	1
axes[0].cla() #clear and replace plot	1	1
df['Cabin'] = df['Cabin'].map(lambda x:x[0])	1	1
features['Age']=preprocessing.normalize([features['Age']], norm='l2').flatten()	1	1
"train.loc[(train['SexAge']==""female""),'Female'] = 1"	1	1
X_test['Age'].fillna(X_train['Age'].median(), inplace = True)	1	1
Test_Master.drop(columns=['Title_Rev', 'FamilySize_3', 'Cabin_U','Age_0'],inplace=True)	1	1
all_data_na_number.drop(all_data_na_number[all_data_na_number == 0].index).sort_values(ascending=False)	1	1
df2.drop('PassengerId', axis = 1)	1	1
train_df['family_onboard'] = pd.cut(train_df.family_onboard, bins = [0,1,2,3,4,5,50], right = False, labels = [1,2,3,4,5,6])	1	1
train['Embarked'] = train['Embarked'].fillna(emb_mode[0])	1	1
train_df['Old_Female'] = train_df['Old_Female'].astype(int)	1	1
gs_metrics.iloc[2, 5]	1	1
all_data['Family_Size'] = all_data['Parch'] + all_data['SibSp'] + 1	1	1
"data.loc[data[""Fare""] < 10, ""Fare_group""] = 2 # class three"	1	1
test['Parch']=test['Parch'].apply(replace2)	1	1
Submission['Survived']=ridge.predict(test)	1	1
"titanic_df[[""Embarked"", ""Survived""]].groupby(['Embarked'], as_index=False).mean()"	1	1
test_df['FamilySize']=familysize(test_df)	1	1
train_Survived.astype(int)	1	1
data['TicketPrefix'].tail(25)	1	1
data['Cabin_Letter_T'] = 0	1	1
test_df['Fare'].apply(lambda x: 1 if (x > 7.91 and x <= 14.454) else 0)	1	1
titanic_train['Survived'].value_counts().plot.pie(explode=[0,0.05],autopct='%1.1f%%',ax=ax,shadow=True);	1	1
data_encode.head()	1	1
"titanic_train['Age_cat'] = np.ceil(titanic_train[""Age""] /17  )"	1	1
"X_test[""Age""].fillna(X_test[""Age""].median(), inplace=True)"	1	1
sns.boxplot(x='Pclass',y='Age',data=train) #here we can see that the age is very dependent on the passanger's class. Due to this, we want to fill in the passanger's age due to it's class.	1	1
df['Title']=df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())	1	1
"data['Embarked'] = data[""Embarked""].fillna(""S"")"	1	1
Xdf.loc[(Xdf['Age'] > 32) & (Xdf['Age'] <= 48), 'Age'] = 2	1	1
model.add(Dense(units = 7, kernel_initializer = 'uniform', activation = 'relu', input_dim = 9))	1	1
df['Cabin_Letter'] = df['Cabin'].apply(lambda x: str(x)[0])	1	1
data_to_submit.to_csv('ensemble_to_submit.csv', index = False)	1	1
train.loc[train['Sex']=='male','Sex']=1	1	1
train_df.corr().abs().Survived.sort_values(ascending=False)[1:]	1	1
train_df[['Pclass', 'Survived']].groupby(['Pclass']).mean()	1	1
df['Survived'][df['Pclass'] == 1].value_counts()	1	1
data_df.select_dtypes(['category']).columns	1	1
"train_set[[""SibSp"", ""Survived""]].groupby(['SibSp'], as_index=False).mean()"	1	1
df['Parch'].value_counts()	1	1
train_df['Fare'] == 0	1	1
df['Age'].hist(bins=int(max_age))	1	1
"submission.to_csv(""submission.csv"", index=False)# This Python 3 environment comes with many helpful analytics libraries installed"	1	1
train_test.drop('Cabin',axis=1,inplace=True)	1	1
my_submission5.to_csv('submission5.csv', index=False)	1	1
df.groupby('Pclass').Survived.count()	1	1
TitleScore_list.append(give_title_score(df['Title'][i]))	1	1
df.loc[df['Ticket Number'].isnull()]	1	1
submission.to_csv('titanic_forest.csv', index=False)	1	1
df_submit_raw.copy()	1	1
train.iloc[:, 0].values	1	1
train['Embarked'].fillna('n/a', inplace=True)	1	1
"total[""Embarked""] = total[""Embarked""].fillna(""S"")"	1	1
df['fare'] = df.fare.fillna(0)	1	1
data['alone']=0	1	1
df.dtypes[df.dtypes == 'float64'].index.tolist()	1	1
df.loc[df['Survived'].notnull(), 'Survived'].value_counts(normalize=True)	1	1
Submission3.head(15)	1	1
"dc.to_csv(""drive/My Drive/corrected.csv"",index=False)  # to see all missing files"	1	1
df_test['Single'] = df_test['Family'].map(lambda s: 1 if s == 1 else 0)	1	1
train_csv['Embarked'].fillna(train_csv['Embarked'].mode()[0], inplace = True)	1	1
tt['Title'] = tt['Name'].str.extract('([A-Za-z]+)\.', expand=False) # Split name and extract titles as title group function	1	1
"test.loc[(test[""Fare""] >= 31.0) ,""Fare""] = 3"	1	1
train_df_with_family.copy()	1	1
"test_df.drop([""PassengerId"", ""Name"", ""Ticket"", ""Cabin""], axis=1).copy()"	1	1
data_test.Age.fillna(data_test.Age.mean(), inplace = True)	1	1
data_full['FareBin'] = pd.qcut(data_full['Fare'], 6, labels = [1, 2, 3, 4, 5, 6]).astype(int)	1	1
df_data['Age_scaled'] = scaler.fit_transform(df_data['Age'].reshape(-1,1), age_scale_param)	1	1
x_train.corr()	1	1
age1.std()	1	1
train['FareRange'] = pd.qcut(train['Fare'], 4)	1	1
all_data.drop(['Name'], axis=1)	1	1
features_raw.isnull().sum()	1	1
"combined.loc[pid,""group_type""] == ""family"":"	1	1
df_train_features.replace(s,surname)	1	1
train['Age'][train['Survived'] == 0][train['Sex'] == 0], hist = False, ax = ax2, norm_hist = True,	1	1
training_data.iloc[:, 1:12].values	1	1
data.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)	1	1
df['Deck'] = df['Cabin'].map(lambda x : get_deck(x))	1	1
d.describe()	1	1
data_train.drop(['SibSp'], axis=1)                       .drop(['Parch'], axis=1)                       .drop(['Ticket'], axis=1)                       .drop(['Fare'], axis=1)                       .drop(['Name'], axis=1)                       .drop(['Cabin'], axis=1)	1	1
"train.drop([""Survived""], axis = 1 )"	1	1
"train['Cabin']=train['Cabin'].fillna(""S"")"	1	1
titanic_df.loc[titanic_df['FareClass'].isnull() == True, 'FareClass'] = random_fare // 200	1	1
dftr['Cabin']	1	1
"AgeTypeTest.append(""4"")"	1	1
ax[0].set_title('Survived, with family')	1	1
"test_cp2[""Survived""] = forest_prediction"	1	1
torch.max(result, 1)	1	1
test_one['Survived']	1	1
df_train['Embarked_Val'].hist(bins=len(embarked_locs), range=(0, 3))	1	1
df['FareGroup'] = df['Fare']	1	1
df_analysis.tail()	1	1
titanic[['Pclass','Age','Embarked', 'SibSp', 'Cabin','Sex']]	1	1
X_train.Embarked.fillna(0)	1	1
df2_test['Fare']=12.459678	1	1
sns.boxplot(y='Fare',data=Titanic_Master, ax=ax[0], color='green')	1	1
titanic_test['PassengerId'],	1	1
dataset.loc[dataset['Relatives']== 0 , 'not_alone'] = 1	1	1
data_test_df.drop(['Name','PassengerId'], axis=1).values	1	1
df_data['Family_Survival'] = DEFAULT_SURVIVAL_VALUE	1	1
importance_et_df.sort_values(by='Importance', axis=0, inplace=True, ascending = False)	1	1
df.loc[df['Age'].isnull() & (df['Title'] == title), 'Age'] = age	1	1
train['CabinIsNan'] = [False if val == val else True for val in train['Cabin'].tolist()]	1	1
test.drop(['PassengerId','Name','Ticket','Age','SibSp','Parch','Cabin'], axis=1) ##'Age','SibSp','Parch',	1	1
"summary.sort_values(by=""CV Score"", ascending=False)"	1	1
data_pruned.loc[(data_pruned['Age'] > 8)  & (data_pruned['Age'] <= 20), 'Age'] = 1	1	1
train[['Pclass','Sex','Cabin','Embarked']]	1	1
train_df[['Age', 'Fare', 'Parch', 'SibSp', 'Survived']].corr()	1	1
gs.best_params_['max_depth'],	1	1
train_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean()	1	1
encoded.iloc[train_rows:, :]	1	1
"dat.loc[dat[""Cabin""].str.count(""G"") > 0,""Cabin""] = 6"	1	1
train_data.Age.sum(axis=0)/train_data.index.size	1	1
plt.boxplot(raw_train['Fare'], vert=False)	1	1
ensemble_results.corr(),	1	1
df_test.select_dtypes(include=[object])	1	1
"Test_Master['Title'] =Test_Master['Name'].str.split(pat="","",expand=True)[1].str.split(pat='.',expand=True)[0].str.strip()"	1	1
train['SibSp'].isnull().values.ravel().sum()	1	1
X.loc[:, [self.column_to_impute, self.column_ref]]	1	1
train_y.values.T	1	1
testOrg['Embarked'] = testOrg['Embarked'].fillna('S')	1	1
test_data_only_first_class_female_Cherbourg_age['Age']:	1	1
"data_test[""cabin_T""] = 0 #because this variable never appeared in the test set, which removed it from the dummies function"	1	1
data['Embarked'] = data['Embarked'].map({'S':1,'C':2,'Q':3})	1	1
df_train[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand')	1	1
"test[""eval_forest""] = my_forest.predict(test[features_names].values)"	1	1
Data['Name'].head()	1	1
"df_name.loc[df_name[""Name""]==""Mme."",""Name""]=""Mrs."""	1	1
df['SmallF'] = df['Fsize'].map(lambda s: 1 if  s == 2  else 0)	1	1
train['Pclass'] = train['Pclass'].fillna(most_occuring_Pclass)	1	1
train_copy.drop(['Survived'], axis=1)	1	1
df.loc[((df.Sex == 1) & (df.Cabin == 1)) , 'Se_Ca'] = 2 #male with cabin	1	1
df['Survived'] = cv.predict(data)	1	1
train['title'] = titles_train	1	1
df['Group_size'] = df[['Family_size', 'Ticket_counts']].max(axis=1)	1	1
"test[""Fare""].fillna(13.30, inplace=True)"	1	1
prediction_models.sort_values(by = 'Model_scores', ascending = True)	1	1
"dataset[""Sex""] = dataset[""Sex""].map(sex_mapping)"	1	1
data.name_len.head()	1	1
embark_dummies_test.drop(['S','Q'], axis=1, inplace=True)	1	1
Titanic_dataframe.loc[:, 'Sex'] = Titanic_dataframe.loc[:, 'Sex'].str.replace('female', '1')	1	1
df_train['Age'][np.isnan(df_train['Age'])] = age_avg	1	1
train_df['agebin'] = age_cut	1	1
Each_Passenger.loc[(Each_Passenger['Pclass'] > 1) & (Each_Passenger['Pclass'] <= 2 ) | (Each_Passenger['Parch'] > 1) & (Each_Passenger['Parch'] <= 2) , 'Pclass'] = 2	1	1
df[['SibSp', 'Survived']].groupby('SibSp').mean()	1	1
data.iloc[i,:]	1	1
models['set2']['cat_attrs'] = ['Pclass', 'Sex']	1	1
data.Embarked_C.astype(np.uint8)	1	1
SurvivorsByAge_trn.append(AgeVsSurvived_trn[i])	1	1
X_new.shape	1	1
"x[""n_len""] = x[""Name""].apply(lambda x: len(x))"	1	1
test.iloc[:, [0, 1, 3, 4, 5, 6, 8, 10]]	1	1
data_df['CabinString'] = data_df['Cabin'].str.extract(r'([A-Za-z]+)', expand=False)	1	1
s_variable.append(raw_s_variable[i] if i in s_variable_index else 0)	1	1
test['LargeFamily'] = test['FamilySize'].map(lambda s: 1 if 5 <= s else 0)	1	1
dfTrain['Ticket_Len'].value_counts()	1	1
all_data.Embarked.fillna(all_data.Embarked.value_counts()[0], inplace=True)	1	1
df_all['_Title']=df_all['Name'].map(lambda x: x.split(', ')[1].split('.')[0].lower() )	1	1
X.values.copy().astype(np.float)	1	1
dt.loc[(dt.Age.isnull())& (dt.Sex==i)&(dt.Pclass==j),'Age']=age_guess[a,b]	1	1
df['Name'] = df['Name'].map(lambda x: dic[x] if x in dic.keys() else x)	1	1
frame['bin_fare']=np.floor(frame['Fare'])//50	1	1
df_train.loc[df_train['Embarked'] == 'C', 'Embarked'] = 1	1	1
test_df['Age'].fillna(test_df['Age'].median(skipna = True), inplace = True)	1	1
train[['Survived','Embarked']].groupby('Embarked').mean().sort_values('Survived',ascending=False)	1	1
train.shape[0] # get the number of rows from index zero	1	1
randomforest_train.append(pd.Series(metrics.accuracy_score(y_train,prediction_train)))	1	1
train_df.loc[train_df['FamMembers'] == 1, 'FamSize'] = 'single'	1	1
"coef_df[""Correlation""] = pd.Series(logreg.coef_[0])"	1	1
combined_features.drop('Title', axis=1, inplace=True)	1	1
df_submission['sex'] = df_submission['sex'].map({'male': 0, 'female': 1})	1	1
final_data_set.iloc[:,1]	1	1
X_test.drop(missing_col_tr, axis=1)	1	1
dataset.loc[dataset['Fare'] > dataset['Fare'].quantile(0.8), 'Fare'] = 4	1	1
df_train.fillna(0,axis=1,inplace=True)	1	1
"titanic_train[""SibSp""].value_counts()"	1	1
df2.isna().sum()	1	1
full['Sex'] = full['Sex'].apply(lambda x: 1 if x == 'male' else 0)	1	1
train.loc[train['Sex']=='male','Gender']=0	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Lady', 'Rare')	1	1
"output.to_csv(""output.csv"")"	1	1
"_df.loc[  1296, ""group_id""] = 153.0"	1	1
"row[""Pclass""] == 2:"	1	1
test_df.drop(['Fare'],axis=1)	1	1
titanic[['Age']] = imputer.fit_transform(titanic[['Age']]) # Make better	1	1
ds_train['Title'].replace({'Mlle':'Miss', 'Mme': 'Mrs', 'Ms':'Miss'}, inplace=True, regex=True)	1	1
X_test.drop(['PassengerId','SibSp','Name', 'Ticket', 'Parch', 'Cabin', 'Embarked'], axis=1, inplace=True)	1	1
X_stats['Mean'] = np.mean(X, axis = 0)	1	1
"features_long.drop(['Family'],axis=1,inplace=True)"""""""	1	1
date_df.loc['2016-01-04', :]	1	1
gaussiansubmission.to_csv('gaussian.titanic.csv', index=False)	1	1
train_df[61:62]	1	1
pp.hist(fare_1, bins, normed=1, facecolor='blue', alpha=0.5)	1	1
data.Cabin_Letter_C.astype(np.uint8)	1	1
X_all.iloc[:891, [0,2,3,4,5,6,7,8]]	1	1
test['Female'] = np.where(test['Sex'] == 'female', 1, 0)	1	1
train.loc[train['SibSp'] >0, 'had_SibSp'] = 1	1	1
"train.append(test, sort=True).drop(""Survived"", axis=1).isnull().sum()"	1	1
titanic_train_df['Child'] = titanic_train_df['Agecat'].apply(child)	1	1
test_set.drop(['Cabin'], axis = 1)	1	1
train_df_raw.head()	1	1
dataset.loc[(dataset['Age']>50)&(dataset['Age']<=65),'Age_cat']=3	1	1
data_train.drop(['Parch','SibSp'], axis=1, inplace=True)	1	1
df.cabin.fillna('N')	1	1
train['NonPoorMothersAndChildren']= 0	1	1
X_test.iloc[:,[1]] = X_labelencoder_1.fit_transform(X_test.iloc[:,[1]])	1	1
"full_data.loc[full_data[""Title""] == title,'Age']"	1	1
fold_importance_df['importance'] = clf.feature_importances_	1	1
dataset.loc[ dataset['Fare'] > 77.958, 'Fare'] = 9	1	1
ship['Title_Code'].loc[(ship['Title_Code'] == 3) & (ship['Survived'] == 0)].count()	1	1
"data_train[""SibSp""] + data_train[""Parch""] + 1"	1	1
dataset.loc[ dataset['Fare'] > 77.958, 'Fare'] = 7	1	1
"X[""Fsize""] = X[""SibSp""] + X[""Parch""]"	1	1
transformed_df['Age_Categorized_Adult'] = age.Age_Categorized_Guess_Adult	1	1
data.loc[(data.Fare<=14.3)&(data.Pclass==2), 'PassengerCat']=3	1	1
"test_df.loc[test_df[""Title""] == ""Capt"", ""Title""] = 'Rare Title'"	1	1
df.loc[:,colsSVM]	1	1
costs.append(J)	1	1
dataf_to_impute['Title'][dataf_to_impute['PassengerId'] == Id]:	1	1
"related_people.loc[related_people[""PassengerId""]==872,""RGroup""]=""Beckwith_M"""	1	1
model.add(Dense(1, kernel_initializer='uniform', activation='sigmoid'))	1	1
"train.drop([""Cabin"", ""Name"", ""Ticket"", ""Survived""], axis=1)"	1	1
sur_by_age.fillna(0)	1	1
df_test_features.replace(s,tktnum)	1	1
data_train['Fare_Category'] = data_train.Fare.apply(fare_categorize)	1	1
test_data['Title'] = test_data['Title'].replace(['Countess.','Don.', 'Dona.', 'Jonkheer.','Lady.','Sir.'],'Noble.')	1	1
survived.append(1)	1	1
"StackingSubmission.to_csv(""baselineCVSubmission.csv"", index=False)"	1	1
"df_train.hist(""Age"", bins=10, by = [""Survived"", ""Sex""], layout=[1,4],figsize = [20,3])"	1	1
combine['Embarked'] = combine.Embarked.astype('category')	1	1
"test_X[""SibSp_Parch""] = test_X.SibSp * test_X.Parch"	1	1
"LR_result[0][""best_score""],"	1	1
in ['Fare', 'Ticket_numerical']:	1	1
ax[0].set_title('Number Of Passenger By '+t1)	1	1
data_out['Salutation'] = data_out.Name.str.extract(' ([A-Za-z]+).', expand=False)	1	1
df_titanic['Name']	1	1
sex_survived.loc[1, 'female']	1	1
data.surname_Doling.astype(np.uint8)	1	1
age['Age'] = age['Age'].astype(int) # floors floats	1	1
"df_train[""Title""] =  df_train[""Title""].map(dict_title)"	1	1
"dataset_med.loc[3,4][""Age""]"	1	1
map_table_age_df.iloc[0:5, 1] = titles	1	1
"data_train.drop(""PassengerId"", axis = 1, inplace = True)"	1	1
data['Embarked'] =data['Embarked'].fillna('S')	1	1
test_df.join(pd.get_dummies(test_df.Embarked, prefix='Emb'))	1	1
dataset.loc[(dataset['Age']> 8)&(dataset['Age']<=16), 'Age'] = 1	1	1
data['companions']=data['SibSp']+data['Parch']	1	1
"train[""Name""] = train[""Name""].str.extract(r""([a-zA-Z]+)\."")"	1	1
data['Survived'] = ypred_test	1	1
train['Age_Cat'] = pd.cut(train['Age_fill'],bins,labels = label)	1	1
comb['Title'] = comb['Title'].map(lambda x:3 if type(x)==str else x)	1	1
df_age_fare.apply(lambda x: (x - np.min(x)) / (np.max(x) - np.min(x)))	1	1
dataset['WcgAllDied'] = dataset['WcgAllDied'].astype(int)	1	1
test_df['aile']=test_df['Parch']+test_df['SibSp']	1	1
dataset['Cabin'] = dataset['Cabin'].str[:1] #get a first char	1	1
test_data.Cabin.fillna(value='Unkown', inplace=True)	1	1
model.add(Dense(5, kernel_initializer = 'uniform', activation = 'relu'))	1	1
ship['Title'].loc[ship['Title'] == 'the Countess'] = 'Mrs'	1	1
train_df.drop('FamilySize', axis=1, inplace=True)	1	1
test.Name.replace('Sir','Mr')	1	1
tt['Survived']	1	1
X_test.drop(['Age'],axis=1)	1	1
"train_enc.drop(labels = [""PassengerId"", ""Survived"", ""Name"", ""Sex_male""], axis = 1)"	1	1
train_csv['Age'] = train_csv['Age'].fillna(train_csv['Age'].mean())	1	1
titanic['Title'].replace(['Master','Ms','Mlle','Mme','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],            ['Child','Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)	1	1
train.loc[rows2,'Age'] = 27	1	1
submission.to_csv('titanicsub.csv')	1	1
train_data.groupby(['Sex','Survived'])['Survived'].count()	1	1
temp.to_dict()	1	1
train['AgeGroup'] = train['AgeGroup'].astype(int)	1	1
test['Familysize'].max()	1	1
dataset.loc[ dataset['Fare'] <= 50, 'Fare'] = 1	1	1
total.isnull().sum()	1	1
"sns.boxplot(x = ""Fare"", y = ""Embarked"", data = full)"	1	1
train_df.groupby(['Sex'])['Survived'].mean()	1	1
df_train_ml[['Fare']] = scaler.transform(df_train_ml[['Fare']])	1	1
df1['Age']=df1['Age'].fillna(df1['Age'].median())	1	1
a.size	1	1
fulldata.set_value(fulldata.Fare.isnull(), 'Fare', 8.05)	1	1
df_test['isalone'] = df_test['isalone'].astype('category')	1	1
testing_df['Age_Index'] = pd.cut(testing_df.Age, bins=age_bins, labels=age_labels)	1	1
"df_train[""Family""] = df_train[""SibSp""] + df_train[""Parch""] + 1"	1	1
train_df.drop(['Survived','Ticket','Name'], axis = 1)	1	1
data[['FamilySize','Survived']]	1	1
"knn_solution.to_csv(""predict_k_neighbors.csv"", index_label = [""PassengerId""])"	1	1
dataset['Age_cat']=0	1	1
fig.axes[0].set_xlabel(c.Pclass)	1	1
mat.shape[0]	1	1
test_data['salutation'].value_counts() < 10	1	1
test_df.loc[test_df['Title'] == 'Mme', 'Title'] = 'Mrs'	1	1
test.drop(['PassengerId'], axis=1).values.astype(np.float64)	1	1
"combined[""f_Single""]=f_Single"	1	1
submission.to_csv('submission_titanic.csv', index=False)	1	1
df['FamilySize'].dropna().hist()	1	1
df.Embarked.dropna().mode()[0]	1	1
"df[""Title""] = bb.loc[:,0].map(normalized_titles)"	1	1
df.Age.describe()   # age varies from 0.42 to 80.00	1	1
df_train_ml.drop(['PassengerId','Name','Ticket', 'Cabin', 'Age', 'Fare_bin'],axis=1,inplace=True)	1	1
pd.merge(model_summary,df1,how='outer')	1	1
train_df.drop('Name', 1)	1	1
"df2.replace([""male"", ""female""], [0,1])"	1	1
in ['Miss']:	1	1
dataset['Title'] = dataset['Title'].replace('Don', 'Royalty')	1	1
"test_data[""Person""] =test_data[['Age','Sex']].apply(what_person, axis=1)"	1	1
Titanic_Master['FamilySize'] = Titanic_Master['FamilySize'].map({1:'1',2:'2',3:'2',4:'2',5:'3',6:'3',7:'3',8:'3',11:'3'})	1	1
"df2[""Fare""].median()"	1	1
data_copy.loc[:, feature] = target = data_copy[feature].fillna(target)	1	1
df['name_length'] = df.Name.apply(len)	1	1
train.Sex.describe()	1	1
dataframe.isnull().sum() / dataframe.isnull().count()	1	1
test.Survived.head(10)	1	1
X_train['Parch'] = train_df['Parch']	1	1
"test_data[""Cabin""] = test_data[""Cabin""].map(lambda x: 0 if (pd.isnull(x)) else 1)"	1	1
all_data.loc[(all_data['Age'].isnull()) & (all_data['Sex'] == 'male'), 'Age'] = mean_age_male	1	1
train['FareBand'] = pd.cut(train['Fare'], (-1, 8.05, 14.25, 60.2875, 1000), labels=['0','1','2','3'])	1	1
train['F3'] = np.array(train['CategoricalFare'] == 3).astype(np.int32)	1	1
test.loc[(test['Fare']>500) & (test['Fare']<=550),'FareCategorical'] = 10	1	1
"i[""Title""] = i[""Name""].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])"	1	1
classifiers['scores'].append(score)	1	1
"scores[""epoch""] = scores.index"	1	1
titanic.corr()['Survived']	1	1
train['Age'] = train.Age.fillna(round(train.Age.mean(),2))	1	1
new_train['Age'] = new_train[['Age', 'Pclass']].apply(fill_age, axis=1)	1	1
"train_dataset.drop(""Survived"", axis=1)"	1	1
train_data_df.copy().drop('Survived',axis=1).append(test_data)	1	1
trainTitanic.describe(include=['O'])	1	1
dataset['Title'] = dataset['Title'].apply(lambda x: x if main_titles.loc[x] == True else 'Misc')	1	1
full_train.drop(full.index[891:],axis=0)	1	1
data_train.drop(['PassengerId','Name','Sex','Age','SibSp','Parch','Ticket','Cabin','Embarked'],axis=1,inplace=True)	1	1
Y_test.transpose();	1	1
df['NameLenGroup'] = pd.cut(df['NameLen'], bins)	1	1
imputed[ 'Age' ] = All.Age.fillna( All.Age.mean() )	1	1
train_df.loc[:,'Age':].as_matrix().astype('float')	1	1
train['scoresBinned'] = pd.cut(train['Fare'], bins)	1	1
df_results['val_Recall'] = recall	1	1
"related_people.loc[related_people[""PassengerId""]==581,""RGroup""]=""Jacobsohn_M"""	1	1
titanic['Family_cat'] = titanic['Family_size'].apply(family_2_cat)	1	1
my_imputer.transform(x_test)	1	1
Fea.iteritems():	1	1
accuracy['logistic_regression_second_level'] = sum([1 if train_predictions['logistic_regression_second_level'].loc[i] == survived.loc[i] else 0 for i in survived.index])/791	1	1
"train.pivot_table(index=""Sex"", values=""Survived"")"	1	1
"trainingset.describe(include=""all"")"	1	1
full_dataset.loc[:, ['Pclass', 'Sex', 'Embarked', 'Cabin', 'Title', 'FamilySize', 'Ticket']] = full_dataset.loc[:, ['Pclass', 'Sex', 'Embarked', 'Cabin', 'Title', 'FamilySize', 'Ticket']].astype('category')	1	1
"dataset_df['Title'] = pd.DataFrame([i.split("","")[1].split(""."")[0].strip() for i in dataset_df['Name']])"	1	1
data['Title'] = data.Name.str.extract(regex, expand = True)	1	1
data_all['Fare'] = data_all['Fare'].fillna(0)	1	1
"dataset[""Title""] = dataset[""Title""].map({""Master"":0, ""Miss"":1, ""Mrs"":2, ""Mr"":3, ""Rare"":4})"	1	1
df_train['cabin'] = df_train['cabin'].apply(cleaner_lambda)	1	1
df_submission['sin_fare'] = df_submission['fare'].map(np.sin)	1	1
df.drop(['Embarked'],axis=1)	1	1
sml.xgb.cv_results.tail(5)	1	1
"data_combined[""Age""][np.isnan(data_combined[""Age""])] = rand_1"	1	1
"data_train.drop(columns=[""PassengerId""])"	1	1
train['RareTitle'] = 0	1	1
train.dropna(axis=0, inplace=False)	1	1
df_test['Sex'] = df_test['Sex'].astype('category')	1	1
"combined[""t_titles""] =combined[""t_titles""].map(title_map)"	1	1
train['Age'] = imp.fit_transform(train['Age'].values.reshape(-1, 1))	1	1
df_test.drop(['Embarked'], 1, inplace=True)	1	1
dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1) & (dataset.Title != 4),                    'Age'] = guess_ages[i,j]	1	1
dataset_train.groupby(['Title', 'Pclass'])['Age']	1	1
data_train_csv.loc[data_train_csv['PassengerId'].isin(data_test_split_csv[prediction_split!=y_test_split]['PassengerId'].values)]	1	1
features.append('words_in_name')	1	1
train.iloc[:,1].values	1	1
my_titanic_submission.to_csv('TitanicSubmission.csv', index = False)	1	1
train.iloc[0:len(test),1]	1	1
test_df['Family_Size']=test_df['Parch']+test_df['SibSp']	1	1
X.loc[X['Parch']!=0]	1	1
X.drop(['SibSp','Parch'], axis=1)	1	1
"train.loc[train[""Family""] == 1, ""Alone""] = 1"	1	1
"full.loc[((full.Title.isin([""Rev"",""Capt"",""Major"",""Col"",""Jonkheer"",""Don"",""Sir"",""Dr""])) & (full.Sex==""male"")),""Title""] = ""Mr"""	1	1
test_df['Pclass'] = test_df['Pclass'].astype('object')	1	1
train_test.Embarked.mode()	1	1
"test.drop([""Parch"", ""SibSp""], axis=1, inplace=True)"	1	1
"full.set_value(index, ""Age"", rand)"	1	1
train_test_dummies.values[891:]	1	1
dataset[['AgeBand','Survived']].groupby(['AgeBand'],as_index=False).mean()	1	1
submission.to_csv('submission_rf.csv', index=False)	1	1
complete_age.drop(['Age', 'PassengerId'],axis=1)	1	1
target['Survived'] = 0	1	1
dataset.loc[ (dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1	1	1
clfs.append(extraTrees_best_result)	1	1
np.empty(shape=[1],dtype=float)	1	1
"train_data[[""RelativesOnboard"", ""Survived""]].groupby(['RelativesOnboard']).mean()"	1	1
train_df.Embarked.fillna(train_df.Embarked.dropna().mode()[0])	1	1
train['Embarked']=train['Embarked'].fillna(train['Embarked'].mode()[0])	1	1
full_data['TravelSize'] = full_data['SibSp'] + full_data['Parch'] + 1	1	1
"titanic_train_dataset[""CabinFloorScore""].loc[titanic_train_dataset['CabinFloor'] == ""D""] = 3"	1	1
test['Age'].fillna(age_fill2_t,inplace=True)	1	1
"df_test[""SibSp""]"	1	1
t['Embarked'] = t['Embarked'].map(embark_map)	1	1
combine['Name']:	1	1
"X[""Embarked""] = encoders['embarked'].transform(X[""Embarked""])"	1	1
titanicDF[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
data['Ageband'] = pd.cut(data.Age, 5, labels=[0,1,2,3,4])	1	1
result['Survived'] = model.predict(prepare(test_data, labels=False).values).astype('int')	1	1
data_df['Tour'] = np.where(data_df['FamilySize'] == 1, '-1', data_df['Ticket'])	1	1
train.loc[(train.Fare > 202) & (train.Fare <= 270),'Fare'] = 4	1	1
combined.head(891).groupby(['Sex', 'Pclass', 'Title'])	1	1
df_test['Fare_scaled']=scaled_age_fare_test[:,1]	1	1
titanic_data.loc[(titanic_data['Fare'] >7.91)&(titanic_data['Fare'] <= 14.454),'Fare'] = 1	1	1
all_data['Title'] = all_data['Title'].replace('Mlle', 'Miss')	1	1
train['Person'] = train[['Age','Sex']].apply(get_person,axis=1)	1	1
train_df.drop('AgeBand', axis=1, inplace=True)	1	1
missing_data2['Age']=Y4_pred2	1	1
train_df['AgeGroup'] = pd.cut(train_df['Age'],[0,4,15,25,35,45,65,100])	1	1
data_train['Name_length'] = data_train['Name'].apply(len)	1	1
titanic_test.join(pd.get_dummies(titanic_test.Embarked,prefix='Embarked'))	1	1
all_data['Age'][all_data['Age'].isnull()]=age_nan	1	1
test_data.mean(axis=0)	1	1
guess_deck.iloc[0][0]	1	1
data.loc[(data['Age']>16.5) & (data['Age']<32.5),'Age']=1	1	1
"train['Elderly'] = train[""Age""].apply(lambda i: 1 if i >= 60 else 0)"	1	1
df_test['FamilySize'] = (df_test['Parch'] + df_test['SibSp'])	1	1
df.loc[df['Age'] < 10.367, 'Age'] = 0	1	1
"ax[0].set_title(""No of Pclass"")"	1	1
test.drop(columns=['Name','PassengerId','SibSp','Parch','Fare','Age','Cabin', 'Ticket'], axis=1)	1	1
"testdat[""Age""].fillna(traindat[""Age""].median(),inplace=True)"	1	1
train['isEmbarked'] = train['Embarked'].str.replace('C|Q|S', '1').fillna(0)	1	1
"scaler.transform(test_df[[""Pclass"",""Sex"",""Age"",""Fare"",""Embarked"",""Family""]])"	1	1
test[['PassengerId', 'Survived']].to_csv('my_solution.csv', index=False)	1	1
"test_df[""Embarked""].loc[test_df[""Embarked""]==""C""]=0"	1	1
trainONS.copy().append(testONS.copy(), ignore_index=True)	1	1
df_test.drop(['SibSp', 'Parch'], axis=1)	1	1
title_list.append(2)	1	1
train_dummies['Survived']	1	1
dataset.Fare.fillna(dataset.Fare.mean())	1	1
df['CategoricalAge'] = pd.cut(df['Age'], 5)	1	1
test.Fare.fillna(round(test.Fare.mean(), 2), inplace=True)	1	1
predict_df.to_csv('gender_submission.csv', index=False)	1	1
"join.sort_values(by=""Test"",axis=0,inplace=True)"	1	1
Train_Master.loc[(Train_Master['Fare'] > 24) & (Train_Master['Fare'] <= 53), 'Fare'] = 4	1	1
titanic['Age'] = titanic.apply(lambda s: fillAges(s) if np.isnan(s['Age']) else s['Age'], axis=1)	1	1
params_init_l['sub_feature'] = 0.5	1	1
clfs.append(KNeighborsClassifier())	1	1
categorical_fare['Samples'] = samples['Survived']	1	1
test_df['Cabin']	1	1
train2.values # Creates an array of the train data	1	1
test_df['age_grp'] = test_df['age_mod'].apply(lambda x: 20*int(x/20)if x < 60 else 60)	1	1
agg_df.head()	1	1
"X_test[""RelativesCount""] = X_test[""SibSp""].combine(X_test[""Parch""], lambda x1, x2: x1+x2)"	1	1
"train[""Sex""], uniques = pd.factorize(train[""Sex""])"	1	1
"test[""Family""] = test.Parch + test.SibSp"	1	1
dataframe.loc[dataframe[column_name] >= 61, column_name] = 6	1	1
trainData.Age.hist(bins=20)	1	1
test_df['Cabin'] = test_df['Cabin'].fillna('!!!')	1	1
df['NumFamily'] = df['SibSp'] + df['Parch']+1	1	1
"train[""Title""] = [i.replace('Col', 'Military') for i in train.Title]"	1	1
test_data['Survived']=sol['Survived'] #adding the solution to the test set	1	1
train['Sex'] = train['Sex'].map({'male': 1, 'female': 0}).astype(int)	1	1
data.loc[(data.passenger_fare<8.0) & (data.passenger_fare>=7.75) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Number'] =  data[(data.passenger_fare<8.0) & (data.passenger_fare>=7.75) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Number.min()	1	1
df_train['age_range'] = age_range	1	1
dfPrediction.to_csv('submission.csv', index=False)	1	1
df_test.drop(feature, axis=1, inplace=True)	1	1
"pd.merge(df, df_surname, left_on=""surname"", right_index=True, how='left', sort=False)"	1	1
"df.loc[(df[""Age""] > 48.168) & (df[""Age""] <=64.084), ""Age""] = 3"	1	1
test_d['Title']=np.nan	1	1
titanic_train.drop(['Survived'], axis=1, inplace=True)	1	1
data_train['Age'].fillna(data_train['Age'].mean(), inplace = True)	1	1
data1.loc[data1['Embarked'] == 'Q', 'Embarked'] = 2	1	1
train_engr['engineered_feature'] = train_engr.apply(lambda row: row[feature1]*row[feature2],axis=1)	1	1
test_df['Cabin'].fillna(value=0, inplace=True)	1	1
"RF_result[1][""best_score""],"	1	1
"ds_submission[""Survived""] = 0  # All dead"	1	1
"train_df.drop(""Survived"", axis=1) # X = inputs"	1	1
TitanicTrain.Fare.median()	1	1
train_df['Sex'].value_counts().plot(kind='barh', ax=ax1)	1	1
data['Title'] = data['Title'].replace(['Mme'],'Mrs')	1	1
np.where(y_enc == i)	1	1
x_test['IsAlone'] = x_test['FamilySize'].apply(lambda x: 0 if x > 1 else 1)	1	1
model.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu', input_dim = 11))	1	1
results['acc_train'] = accuracy_score(y_train,predictions_train)	1	1
data_df.drop('Title', axis = 1, inplace = True)	1	1
test.fillna(value={'Age':ageMedian}, inplace=True)	1	1
"data_test.drop(""Name"", axis=1, inplace = True)"	1	1
"test_ori.loc[(test_ori[""Title""] == ""Lady"") | (test_ori[""Title""] == ""Mme""),""Title""] = ""Mrs"""	1	1
"data_copy[""Embarked""] = data_copy[""Embarked""].fillna(""S"")"	1	1
master_df['deck'] = master_df['Cabin'].apply(get_deck)	1	1
data['Sex_code'] = encoder.fit_transform(data['Sex'])	1	1
titanic_df.groupby('Pclass')['Age'].mean()	1	1
test.drop(v, axis=1, inplace=True)	1	1
dfTrain['Ticket_FirstLetter'] = dfTrain['Ticket'].apply(lambda x: x[0])	1	1
train_with_age_df['AgeBand'] = pd.qcut(train_with_age_df['Age'], 30)	1	1
df_test['FareBinCode'].unique()	1	1
data['IsAlone']=1	1	1
X['Age'].min() - h, X['Age'].max() + h	1	1
all_data.iloc[i, 0] = {1: 30, 2: 20, 3:18}[all_data.iloc[i, 7]]	1	1
"second_class_survived.plot.hist(fc=(0, 0, 1, 0.5), normed=1, label=""Survived"")"	1	1
"train_d[""Title""]=le_title.fit_transform(train_d[""Title""])"	1	1
train['age_cat']=pd.cut(train.Age,5,labels=['a_a','a_b','a_c','a_d','a_e'])	1	1
tt.apply(lambda x: (x - np.mean(x)) / (np.max(x) - np.min(x)))	1	1
titanic_train['Fare'].median()	1	1
x_train.drop(['Survived'], axis = 1)	1	1
"X.describe().loc[""top"", ""Embarked""]"	1	1
result.append(m.oob_score_)	1	1
test['Age']=test['Age'].fillna(med)	1	1
x['Name'] == 'Stacking':	1	1
test_data['PassengerId'].copy().to_frame()	1	1
train_df.query('PassengerId<=891')	1	1
Y.assign(**{'{}_{}'.format(col, key): one_hot})	1	1
y_tst.shape[0]	1	1
"train[[""Sex"", ""Survived""]].groupby(['Sex'], as_index=False).agg(['mean', 'count'])"	1	1
"res.to_csv(""submission_detail.csv"", index=False)"	1	1
classifier.add(Dense(units = 15, kernel_initializer = 'uniform', activation = 'relu'))	1	1
"train.pivot_table(index=[""Pclass"",""Sex""],values='Survived').copy()"	1	1
train['family_size']=train['SibSp']+ train['Parch'] + 1	1	1
x_train['Family'] = x_train ['SibSp'] + x_train['Parch']	1	1
final.shape	1	1
"dataset.loc[(dataset[""Age""] > 48) & (dataset[""Age""] <=64), ""Age_group""] = 3"	1	1
trainData.Sex.hist()	1	1
row['Title'] == 'Major':	1	1
"Ticket.append(i.replace(""."","""").replace(""/"","""").strip()) #Take prefix"	1	1
whole.set_value(1197,'Fid',144) #display(whole[whole.Name.str.contains('Crosby')])	1	1
df.loc[df.Cabin.str.contains(a[x],na=False),'Cabin']=b[x]	1	1
df['Fare']=df['Fare'].fillna(df['Fare'].mean())	1	1
titanic_df.drop('Name', axis=1, inplace=True)  # Reason is: its a direct correlation factor for survival	1	1
df_age_train[['Pclass', 'Sex', 'Parch', 'SibSp', 'title_age_level', 'Fare', 'age_level']]	1	1
age[['Age_Categorized_Mean', 'Survived']].groupby(['Age_Categorized_Mean'], as_index=False).mean().sort_values(by='Age_Categorized_Mean', ascending=True)	1	1
data.loc[data['Family'] > 2, 'FamilyGroup'] = 3	1	1
df['Gender'] = 4	1	1
"inDF[""Surname""] = inDF[""Name""].apply(lambda x: x[0:x.find("","")])"	1	1
plt.hist(train['Age'], color = 'blue', edgecolor = 'black')	1	1
df['Name'] = df['Name'].replace('Mme', 'Mrs')	1	1
"X_train[""Survived""].values"	1	1
"submission.to_csv(""sumbssion.csv"",index=False)"	1	1
Train_Master['Title'] = Train_Master['Title'].map(Title_dict)	1	1
train_hard_pred_matrix.set_index([traindex])	1	1
survived['Parch'].value_counts().sort_index().plot.bar(ax=axs5[1], fontsize=16)	1	1
Titanic_Master['Title'] = Titanic_Master['Title'].map(Title_dict)	1	1
sb.boxplot(dataset['Sex'],dataset['Age'])	1	1
df.loc[ (df['Age'] > 48) & (df['Age'] <= 64), 'Age'] = 3	1	1
"submission.to_csv(""titanic1_submission.csv"", index=False)"	1	1
"data[""Name""] = data[""Name""].str.replace(""Don"",""Mr"")"	1	1
full['Fare'].fillna(full['Fare'].median(),inplace=True)	1	1
df.drop(['Embarked'], 1, inplace=True)	1	1
Ticket_Prefix.append(i.split(' ')[0])	1	1
train.iloc[1043, 5] = 7.90 #Imputation of Fare using iloc	1	1
"df_test.drop(""Cabin"", axis=1, inplace = True)"	1	1
test_df['isAlone'] = (test_df['SibSp'] + test_df['Parch']) == 0	1	1
train_df.to_csv('../datasets/new_train.csv')	1	1
test_df.drop('Sex', axis=1 , inplace= True)	1	1
df_test.drop('PassengerId',axis =1, inplace=True)	1	1
prediction_df.shape[0]	1	1
df['CabinMissing'] = df.Cabin == 'M'	1	1
"sns.boxplot(y=df_male[""Age""])"	1	1
data['y_p'] = y_pred	1	1
titanic_train.drop('Cabin',axis=1, inplace=True)	1	1
df.describe() ## Numerical	1	1
axes[1].set_title('Dead/alive stats for male groups')	1	1
df1[['Age','Fare']].describe()	1	1
"model[""Classifier""] = model.index"	1	1
df.to_csv('nn_gauss.csv', sep=',')	1	1
titanic_train_data.pivot_table(index = 'Embarked',values ='Survived')	1	1
np.round(mlp.score(X_train_norm, Y_train), 4)	1	1
df_scores['Mean']=df_scores.mean(numeric_only=True, axis=1)	1	1
"train_df[""Embarked""].fillna(train_df.Embarked.median(),inplace=True)"	1	1
titles.replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
features.apply(lambda item : gm['Fare'][item['Sex'],item['Pclass'],item['Title']] if np.isnan(item['Fare']) else item['Fare'], axis=1)	1	1
join_data['Deck'] = join_data['Cabin'].apply(lambda x: str(x)[0])	1	1
ds.sort_values('importance', ascending=False)	1	1
df_train[['isAlone','Survived']].groupby('isAlone').mean().sort_values(by='Survived',ascending=False)	1	1
featureRanks.loc[featureRanks.support==True,'importance'] = best_dtc.named_steps['est'].feature_importances_	1	1
Xtest.select_dtypes(exclude=['object']).copy()	1	1
classifiers.append(DecisionTreeClassifier(random_state=seed))	1	1
inner_results.sample(3)	1	1
dt_rfecv.transform(dt_rfecv_test)	1	1
titanic_train_data.loc[titanic_train_data.Embarked == 'Q', 'Embarked'] = 2	1	1
"data[""Title""] = data[""Title""].replace({""Mme"":""Mrs"", ""Mlle"":""Miss"", ""Ms"":""Miss""})"	1	1
data['Male']=data['Sex'].map({'male':1,'female':0})	1	1
return_obj[1],	1	1
dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\.', expand=False) # regex	1	1
np.mean(cross_val_score(g_nb_clas, X, y, scoring='accuracy', cv=5))	1	1
X_predict.transpose();	1	1
data_rev.to_csv('predict_test_titanic.csv', index = False)	1	1
dat['Age'].fillna(  -1, inplace = True)	1	1
train_df.groupby(['Survived', pd.cut(train_df['Age'], np.arange(0, 100, 5))]).size().unstack(0).plot.bar(stacked=True, alpha=0.75)	1	1
data['Sex_Code'] = le.fit_transform(data['Sex'])	1	1
data['Fare'] = data['Fare'].fillna(train['Fare'].median())	1	1
data_train_df['Embarked'] = data_train_df['Embarked'].astype(str)	1	1
X_train['PrimaryCabin']=X_train['Cabin'].fillna('N').str.split().apply(sorted).astype(str).str[2] # on the training set	1	1
test_df['Family_Size'] = data_df['Family_Size'][891:]	1	1
"titanic['IsCabin'] = 1 # Create a new feature ""IsCabin"" and assign a default value ""1"""	1	1
train.groupby('SibSp')['Survived'].mean().plot(kind='barh',ax=axesbi[0,1],xlim=[0,1])	1	1
"related_people.loc[related_people[""RGroup""]==""""].groupby([""Ticket"",""total_related""])[""PassengerId""].agg([""count""])"	1	1
test.loc[test['FamilySize']>0,'HaveFamily']=1	1	1
train.Name.replace('Lady','Mrs')	1	1
"evaluation.to_csv(""evaluation_submission.csv"", index=False) # Public Score: 0.76555"	1	1
comb_data['Survived'].replace(['No','Yes'],[0,1], inplace=True)	1	1
sim_title.replace('Mme', 'Mrs')	1	1
"X_train.drop([""SibSp"", ""Parch""], axis=1, inplace=True)"	1	1
"test[""LastName""] = test[""Name""].str.split("","", expand=True)[1].str.strip()"	1	1
df_train.groupby('Title').mean()['Age']	1	1
"df_data[""FareBand""] = pd.qcut(df_data['Fare'], 8, labels = [1, 2, 3, 4,5,6,7,8]).astype('int')"	1	1
"dataset.loc[dataset[""FamilySize""] == 1, ""Single""] = 1"	1	1
strat_train_set.drop(['Survived'], axis=1)	1	1
titanic_data.copy() # in case i need the original data again at some point	1	1
Sex_dummy['female']	1	1
dataset.loc[(dataset['Fare'] <= 7.896), 'Fare_cat']  = 0	1	1
df2.drop(['PassengerId', 'Sex','Embarked','Name','Ticket', 'Title', 'Cabin', 'Pclass'],axis=1,inplace=True)	1	1
dataset['Alone']=1	1	1
"df_test[""Fare""].describe()"	1	1
dataset['Title'] = dataset['Title'].replace('Dona', 'Royalty')	1	1
"data[""TicketPrefix""] = data[""TicketPrefix""].str.replace(""\W"", """", regex = True)"	1	1
"gradients[""db1""]"	1	1
test.drop(['PassengerId','Name','SibSp','Parch','Ticket','Fare','Cabin'], axis=1)	1	1
test.loc[test['Cabin'].str.len() == 7.0, 'CabinN2'] = test['Cabin'].astype(str).str[5:]	1	1
data_combined['isMother'] = data_combined[['Sex','Parch','Age','Title']].apply(get_mother, axis=1)	1	1
data[['FamilyName', 'Survived']].groupby('FamilyName').max()	1	1
"titanic_df[""embarked""].unique()"	1	1
data.loc[data['Sex'] == 'female', 'Sex'] = 1	1	1
sns.boxplot('Pclass','Age',data = data_train,hue = 'Sex')	1	1
train.loc[((train['Age']/0.5)%2 == 0) & (train['Age'] >= 1.0), 'hasAge'] = 1	1	1
titanic_test_data.loc[titanic_test_data.Cabin.str[0] == 'B', 'Cabin'] = 2	1	1
Titanic_pred1.head()	1	1
"df[['lastname','firstname']] = df['Name'].str.split("","",1,expand=True)"	1	1
"test[""Famille_3""] = test[""FamilleMember""] == '3'"	1	1
test['Cabin'] = StandardScaler().fit_transform(test['Cabin'].values.reshape(-1, 1))	1	1
test_dataset.loc[:, 'PassengerId']	1	1
train_df['TraveledAlone'] = (train_df['FamilySize'] == 1).astype(int)	1	1
combined_features.drop('Parch', axis=1, inplace=True)	1	1
test['title'] = [i.replace('Rev', 'rare') for i in test.title]	1	1
"train_df.groupby(""fare_category"")[""survived""].mean().plot()"	1	1
X_train_add.shape	1	1
classifiers['models']:	1	1
full['Fare_adjusted'] = full.Fare / full.Ticket_Count	1	1
dataset['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)	1	1
df['title_age'] = df['title'].replace(['Ms'], 'Mrs')	1	1
train_df['Age'] = data_df['Age'][:891]	1	1
raw_train['Fare'].skew()	1	1
train_df.assign(sibpar=train_df['SibSp']+train_df['Parch'])	1	1
models.append(clf)	1	1
test['Deck'] = test['Cabin'].fillna(value='NA').apply(lambda x: ''.join(filter(str.isalpha, x))[0] if x != 'NA' else x)	1	1
dataset['Fare_R'] = pd.qcut(dataset['Fare'],4)	1	1
test_data.drop(Columns_to_drop, axis=1)	1	1
test_df.drop(['Name','Ticket','Survived','PassengerId'],axis=1)	1	1
data.iloc[:ntrain]	1	1
y['Survived']	1	1
submission.to_csv('titanic2.csv', index=False)	1	1
train_copy['first_class_female'][n] = 1	1	1
submit.to_csv('lr_titanic.csv',index=False)	1	1
X_all.shape[0]	1	1
"df[""CabinFloorScore""].loc[df['CabinFloor'] == ""F""] = 1"	1	1
dup_train_label.duplicated().sum()	1	1
df_proportions['variance'] = df_proportions['%passengers'] - df_proportions['%survived']	1	1
test_data.loc[(input_data.Cabin.notnull()),'Cabin']=True	1	1
"data[""SocialGroup""],"	1	1
df_full['PassengerId'].isin(group)	1	1
full_df['Age'] = full_df['Age'].fillna(full_df['Age'].median())	1	1
ds.loc[ds['Title'] == title]['Age'].median()	1	1
dataset.loc[(dataset['Age'] >= 20) & (dataset['Age'] < 30), 'Age'] = 2	1	1
df['Sex'].replace(['female','male'],[1,0],inplace=True)	1	1
t_pre.isnull().sum()==0:	1	1
tr['Title'] =tr['Title'].replace('Mme',3)	1	1
df.loc[df.label == 'train'].drop('label', axis = 1)	1	1
"new_df[""Age_qd""] = df[""Age""]**4"	1	1
model.add(layers.Dense(16, activation='relu'))	1	1
df_train['Title'] = df_train.Title.map(Title_Dictionary)	1	1
conf_mat[1][1]	1	1
df_data['Cabin'] = df_data['Cabin'].apply((lambda x:'X' if cabin_counts[x] < 10 else x))	1	1
titanic_train.dtypes	1	1
"train.describe(include = ""all"").transpose()"	1	1
testds['Sex']=le.fit_transform(testds['Sex'])	1	1
"df.drop(""Cabin"", axis=1, inplace=True)"	1	1
features.columns.values	1	1
P_base.values, meta_learner.predict(P_base.values)	1	1
sub['SIBSP'] = sub['SIBSP'].astype('category')	1	1
"test.drop([""Cabin""],axis = 1, inplace = True)"	1	1
"train_df.set_index(""PassengerId"",inplace=True)"	1	1
new_train.drop('Survived', axis=1, inplace=True)	1	1
name_encoder.transform(train.Name)	1	1
data.loc[mask_c, 'Child'] = 1	1	1
missing_data.head(10)	1	1
df['TicketNo'] = pd.to_numeric(pd.Series(ticketnos))	1	1
dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31.275), 'Fare_cat']   = 2	1	1
pre_features2['Embarked'] = pre_features2['Embarked'].fillna(most_common)	1	1
train_dataset['Embarked'] = label_encoder.fit_transform(train_dataset['Embarked'])	1	1
test.drop(columns='Embarked', inplace=True)	1	1
train_df.join(dummy)	1	1
train_data.loc[index]['Survived'] == int(np.round(dy[0][1])):	1	1
"titanic_data['Sex'] = titanic_data['Sex'].map( {""female"": 1, ""male"": 0} ).astype(int)"	1	1
cabin[0]=='B' and int(cabin[1:4])>49	1	1
df1_copy.iloc[:,0:]	1	1
train_data['Sex'].isnull().sum()	1	1
k_score.append(score)	1	1
train_test['Initial']=0	1	1
raw_test['Cabin'] = raw_test['Cabin'].fillna('U')	1	1
"df.loc[(df[""Title""]=='Mrs') & (np.isnan(df[""Age""])),'Age'] = 35.5"	1	1
categorical_columns.append('CabinDeck')	1	1
train_df['Embarked'].fillna(embarked_most_common, inplace=True)	1	1
"df[""Age""], y=df[""Fare""], kind=""reg"","	1	1
df1.drop(['Ticket','Fare','Embarked','Cabin','Name'] , axis=1)	1	1
train_model_red['Survived']	1	1
X.drop(['Embarked_S'],axis=1)	1	1
data_titanic.drop(col_del, 1)	1	1
df.drop(['Name','Ticket','Cabin'],axis=1,inplace=True)	1	1
dfTrain['Name_Len'] = dfTrain['Name'].apply(lambda x: len(x))	1	1
X_full.shape	1	1
titanic_dirty.drop(['Sex', 'Embarked'],axis=1,inplace=True) # drop categorical columns now that we've converted them	1	1
"data[""Family""] = data[""SibSp""] + data[""Parch""]"	1	1
train_df['Embarked'] = train_df['Embarked'].fillna(most_frequent_Embarked)	1	1
pd.isnull(data).sum().to_dict()	1	1
trainTitanic.loc[trainTitanic.Age.isnull(), 'Age'] = trainTitanic.groupby('Pclass')['Age'].transform('mean')	1	1
df['Embarked'] = df['Embarked'].map(embarked_dict)	1	1
data_all['Embarked_Q'] = (data_all['Embarked']==3)+0	1	1
df.loc[((df.Sex == 2) & (df.Pclass == 2)) , 'Se_Cl'] = 5 #avg female	1	1
df['family'] = df['family'].map(lambda x: 4 if x > 4 else x)	1	1
data_train_all['Title'] = data_train_all['Title'].replace(['Mlle','Ms'],'Miss')	1	1
train_df[['Title','Survived']].groupby(['Title'], as_index=False).mean()	1	1
"GBT_result[0][""best_model""],"	1	1
df_pred['Family'] = df_pred['SibSp'] + df_pred['Parch'] + 1	1	1
dataset['Title']= dataset['Name'].str.extract(' ([A-Za-z]+)\.',expand=False)	1	1
survived['Sex'].value_counts().sort_index().plot.bar(ax=axs2[1], fontsize=16)	1	1
train_data[['Embarked', 'Sex', 'Survived']]	1	1
df.loc[df['Fare']<=7.01,'Fare_Cat']=1	1	1
test_df['Survived'] = pd.Series(predictions)	1	1
train_data['Age'] = imputer.fit_transform(train_data.iloc[:,3].values.reshape(-1,1))	1	1
titanic['Ticket'].map(getTicketNumber)	1	1
train.drop(columns = ['Embarked'])	1	1
"titanic_train[""Family""].loc[titanic_train[""Family""] > 0] = 1"	1	1
"row['Title'] == ""Mme"":"	1	1
df_test.merge(df_test_tmp,on='PassengerId',how='left')	1	1
data.loc[data['Age'].isnull() & data['NameTitle'].str.contains('Mrs.'), 'Age'] = 36	1	1
"train[""Position""].value_counts()"	1	1
kwargs.get('colVar', None)	1	1
train_df['Age'] * train_df['Pclass']	1	1
class_fare.loc[1,:] = df[df['Pclass'] == 1]['Fare'].describe()	1	1
numpy.mean(frame.Fare)	1	1
age_estimator.loc[(rec['TicketClass'],rec['Sibling_Spouse']),('Age','mean')]	1	1
ax[0].plot(res_df_tol['tol'], res_df_tol['Train_acc'] , 'y')	1	1
dataset['age_quantile'] = dataset['age_quantile'].fillna(dataset['age_quantile'].mean())	1	1
dataset['Embarked'] = dataset['Embarked'].fillna(dataset['Embarked'].mode()[0])	1	1
test['Sex'] = test.Sex.map({'female':0,'male':1})	1	1
test.drop('FamilyCategory', axis=1, inplace=True)	1	1
titanic_train_data.loc[titanic_train_data.Sex == 'male', 'Sex'] = 1	1	1
"test7[""Master""] = test7[""Name""].apply(lambda x: x.count(""Master.""))"	1	1
df_output[['PassengerId','Survived']].to_csv('titanic_submission_final_2.csv', index=False)	1	1
test.Cabin.fillna('NO_VALUE', inplace=True)	1	1
predict['Survived'] = 0	1	1
"train['Sex'][sel_age_fin] == ""male"""	1	1
Z['Fare_cat'] = pd.qcut(Z.Fare, q=4, labels=False)	1	1
titanic_test_df['Title'] = titanic_test_df['Title'].replace('Col', 'Rare')	1	1
df.drop(labels=['SibSp','Parch','Age','Fare','Title'], axis=1)	1	1
df_output4.to_excel(writerxls4,'Sheet1')	1	1
data['Ticket'] = data.Ticket.str.replace('.','')	1	1
df.corr().Fare	1	1
sex_frame.head()	1	1
pdf['Deck'] = pdf['Cabin'].str.lower().str[0]	1	1
df['FamilySize'] = df.Parch + df.SibSp +1	1	1
gr['Cabin'].describe()['top']	1	1
train_data[['Survived']].values.ravel()	1	1
train_df['Age'][np.isnan(train_df['Age'])]=train_rand_ages	1	1
"test.groupby(['Title','Pclass'])['Age'].mean()   # Mean age based on ""Title"" and ""Pclass"""	1	1
sml.shape()	1	1
df['Ticket_counts'] = df.Ticket.apply(lambda x: Ticket_counts[x])	1	1
test_df['Sex_code'] = enc.fit_transform(test_df['Sex'])	1	1
dataset['Young_f'] = (dataset['Age']>=18) & (dataset['Age']<=40) & (dataset['Sex']==1)	1	1
df_train['Embarked'] = df_train['Embarked'].fillna(df_train['Age'].mean())	1	1
new_data_test.head()	1	1
df_train.iloc[:,1:]	1	1
test_df1['Sex'] = test_df1['Sex'].replace(sex_map)	1	1
raw_data['IsChildren'] = np.where(raw_data['Age']<=5, 1, 0)	1	1
app_train['Family_size'].plot(kind='kde')	1	1
"train[""Ticket_s""] = train['Ticket'].apply(get_digits_only).apply(skipbig)"	1	1
df_train.embarked.isnull().sum()	1	1
result.append(frame)	1	1
dataframe.join(embarked_dummy)	1	1
raw_data['Group_Age'].apply(is_child)	1	1
data['Embarked']=data.Embarked.fillna('S')	1	1
"data[""AgeGroup""] = data[""Age""].apply(group_age)"	1	1
solution.shape	1	1
dataset['Title']=dataset.Name.str.extract('([A-Za-z]+\.)',expand=False)	1	1
df.loc[df['Cabin_letter']=='T', ['Cabin_letter','Cabin']] = 'B'	1	1
trainData[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch']]	1	1
combined_data['Title'] = combined_data.Title.map(Title_Dictionary)	1	1
"train_data[[""SibSp"", ""Survived""]]"	1	1
in ['Mr', 'Mrs', 'Dr', ]:	1	1
"df_train[""Age""][np.isnan(df_train[""Age""])] = train_random_ages"	1	1
X_test['Embarked_Label'] = le.fit_transform(X_test['Embarked'])	1	1
df_train.drop(['Parch'], axis = 1)	1	1
test.fillna({'Fare': 35.627}, inplace = True)	1	1
"Adaboost_result[2][""best_score""]"	1	1
trainx.head()	1	1
df_test.loc[df_test['Fare'].isnull(), 'Fare'] = fare_median	1	1
train.drop('Pclass', inplace=True, axis=1)	1	1
dataset.loc[(dataset['Age'] > 56.126) & (dataset['Age'] <= 64.084), 'Age'] = 7	1	1
full['NorNames'] = pd.Series(scaler.fit_transform(full.Names.values.reshape(-1,1)).reshape(-1), index=full.index)	1	1
pclass_survived.loc[1, 3]	1	1
test_preprocessed_df.info()	1	1
new_df.to_csv('./prediction.csv', index=False)	1	1
"df_test[""Embarked""].fillna(value = ""C"", inplace = True)"	1	1
concat.to_csv('concat.csv',index=False)	1	1
train.groupby('Cabin')['Survived'].count()	1	1
data.loc[(data.Age.isnull()) & (data.Sex==sex) & (data.Pclass==pclass), 'Age'] = age	1	1
trainSet['Survived'][trainSet['Embarked'] == 'Q'].value_counts()	1	1
"trainingData[""Survived""]"	1	1
X_train2.loc[:,['Age', 'SibSp', 'Parch', 'Fare', 'FamSize']]=f	1	1
test['family_group'] = test['family_size'].map(family_group)	1	1
dataset.drop(['SibSp'],axis=1,inplace=True)	1	1
titanic_test.drop(['Cabin','Ticket'],axis=1)	1	1
"test_df.drop([""PassengerId"", ""Name"", ""Ticket"", ""Cabin""], axis=1)"	1	1
"test[""Age""].fillna(fill_test_age['Age'], inplace=True)"	1	1
X_test_T[1] = list(map(lambda el: (el-mean_x)/max_x,X_test_T[1]))	1	1
missing['missing_ratio'] = missing['missing_count'] / df.shape[0]	1	1
np.std(score)	1	1
"Xt_cat.drop(""Cabin"", 1)"	1	1
full.loc[full['Title'].isin(['Mme','Sir']),'Title'] = 'Mrs'	1	1
my_imputer.transform(test_predictors)	1	1
test_dataset.loc[(test_dataset['Age']>32) & (test_dataset['Age']<=48),'Age']=2	1	1
"train[""Sex""] = train[""Sex""].astype(""int"")"	1	1
dataset[ 'Title' ] = dataset.Title.map( Title_Dictionary )	1	1
dataset_to_train.head()	1	1
"data['Title'] = data['Title'].replace({""Mr"": 1, ""Miss"": 2, ""Mrs"": 3, ""Master"": 4, ""other"": 5})"	1	1
"gaussian_solution.to_csv(""predict_gaussian_nb.csv"", index_label = [""PassengerId""])"	1	1
test_arr.set_value(nan_v, feature, imp_val)	1	1
data['Title'] = data['Name'].str.split(', ', expand=True)[1].str.split('. ', expand=True)[0] # splitting new features on people's titles	1	1
data_test_csv.info()	1	1
train.iloc[:, 1:].values	1	1
dataset['Age'] = dataset['Age'].fillna(dataset['Age'].median())	1	1
df_train['Age'][i]	1	1
dataset['Sex']=dataset['Sex'].map({'male':1,'female':0}).astype(int)	1	1
"train_df.loc[train_df[""Title""] == ""Don"", ""Title""] = 'Rare Title'"	1	1
test['Age'] = imp.fit_transform(test_age)	1	1
"train.pivot(""Name"",""Survived"",""Cabin"")"	1	1
test[['PassengerId', 'Survived']].to_csv('xgb_submission_esi.csv', index=False, float_format='%.8f')	1	1
test_copy.loc[test_copy['Parch'] == 0, 'Parch_Category'] = 0	1	1
train.pivot_table(index='Pclass',values='Survived')	1	1
training_vectors.head()	1	1
"test.loc[test[""Sex""]==""male"", ""Sex""] = 1"	1	1
allset['TicketFirst']=allset['Ticket'].str.slice(0,1)	1	1
df['Ticket']=df['Ticket'].astype('category')	1	1
train['Age'] = train[['Age','Pclass']].apply(correct_age,axis=1)	1	1
"factors[""Age""]=1"	1	1
"df_train[""Age""].fillna(df_train[""Age""].median(), inplace = True)"	1	1
test_df.drop(['Survived'], axis=1).as_matrix()#[['Pclass', 'Sex', 'Age_Bin', 'Title', 'FamilySize_Bin']].values	1	1
ada_oof_test_l1f1.astype(int)	1	1
X_train_dev.copy()	1	1
train['Age'].isnull().values.ravel().sum()	1	1
test.loc[test['Ticket'] == ticket, 'SharedTicket'] = 1	1	1
X['Embarked'].fillna('S',inplace=True)	1	1
df_test.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)	1	1
"dataframe[""Survived""].value_counts()"	1	1
train_df[['CategoricalFare','Survived']].groupby(['CategoricalFare'],as_index=False).mean()	1	1
trainingset[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()	1	1
"train.replace(rare_titles, ""Rare title"", inplace=True)"	1	1
X['Cabin'] = np.where(train['Cabin']=='0', 0, 1)	1	1
test_df['Cabin'].value_counts().head()	1	1
copy.info()	1	1
test2[['Pclass', 'female', 'Age', 'Family', 'Embarked']]	1	1
df_submit['Fare'].fillna(df['Fare'].mean(), inplace=True)	1	1
train_data_prepared.shape	1	1
df_train[['Pclass','Fare']].groupby('Pclass').mean()	1	1
"model.add(Dense(200,input_shape=(7,), activation=""relu""))"	1	1
tmp_train_X.info()	1	1
full_data['Cabin'] = full_data['Cabin'].fillna(0)	1	1
titanic.drop(['PassengerId','Name','Cabin','Ticket'],axis=1)	1	1
test['Alone']=0	1	1
test.drop(['PassengerId', 'SibSp', 'Parch', 'Ticket', 'Name', 'Cabin', 'Title', 'FamilySize'], axis=1)	1	1
raw_data.head(5)	1	1
train_clean.dropna(axis=0)	1	1
testData.loc[(testData.Age.isnull())&(testData.Initial=='Mrs'),'Age']=39	1	1
raw_train.loc[raw_train['Fare'] > 100, 'Pclass'].value_counts()	1	1
dataset['SecondClass'] = dataset.Pclass.map(lambda x: 1 if x == 2 else 0)	1	1
train.iloc[:, [1, 11]].values	1	1
train['Fare'].hist(bins=50, figsize=(10,5))	1	1
"dataset[""Embarked""] = dataset[""Embarked""].fillna(""S"").map({""S"": ""0"", ""C"": ""1"", ""Q"": ""2""}).astype(""int"")"	1	1
training_set['Elderly'] = np.where(training_set['Age'] > 60, 1, 0)	1	1
"train.drop([""Parch"", ""SibSp""], axis=1, inplace=True)"	1	1
train_means[1]	1	1
train_df['Salutation'] = enc.fit_transform(train_df['Salutation'].astype(str))	1	1
titanic.info()   # Concise summary of combined 'titanic' dataset containing column names and data types	1	1
scaler.transform(data[Xcols])	1	1
trainPCA2['9'] = trainPCA[:,8]	1	1
"test[""Age""]:"	1	1
"train_data[""Cabin""] = train_data[""Cabin""].map(lambda x: 0 if (pd.isnull(x)) else 1)"	1	1
features['Group_size'] = group['Group_count']	1	1
X_train.as_matrix(), Y_train.as_matrix()	1	1
train_ds['Embarked']= train_ds['Embarked'].map({'C': 0, 'Q': 1, 'S': 2}).astype(int)	1	1
trainOrg['AgeGroup'] = np.where(trainOrg['Age']<=16, 'Child', 'Adult')	1	1
X['SibSp'][X['SibSp']>0]=1	1	1
train['Embarked'] = train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} )	1	1
train['Age'][train['Survived'] == 1][train['Sex'] == 1], hist = False, ax = ax1, norm_hist = True,	1	1
"dat.loc[dat[""Cabin""].str.count(""A"") > 0,""Cabin""] = 0"	1	1
data_no_nan.loc[:, 'Pclass'] = fill_series(data_no_nan['Pclass'])	1	1
train_test.loc[(train_test.Age.isnull())&(train_test.Initial=='Mrs'),'Age']=37	1	1
train['Embarked_S'] = train['Embarked_S'].fillna(0)	1	1
df.groupby('Survived').count()	1	1
data.loc[(data.passenger_fare<6.237) & (data.passenger_fare>=0.0) & (data.Pclass==3) & (data.Cabin=='N999'), 'Cabin_Number'] =  data[(data.passenger_fare<6.237) & (data.passenger_fare>=0.0) & (data.Pclass==3) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
test_data.drop(labels='Ticket', axis=1, inplace=True)	1	1
train.drop(['Survived'],1)	1	1
test.drop('Name', axis='columns')	1	1
numerical_columns.append('Poor_Old_Miss')	1	1
train_copy['Sex_Category'] = train_copy['Sex_Category'].astype(int)	1	1
"train.loc[train[""Sex""] == 1, ""Sex""] = ""female"""	1	1
titanic_df.drop(['ElitePerson'],axis=1,inplace=True)	1	1
titanic_test.drop(['SibSp','Parch'], axis=1)	1	1
data['Survived'] = y	1	1
train_data['FamilySize'] = train_data.SibSp + train_data.Parch;	1	1
titanic_data['Title'] = titanic_data.Name.str.extract('([A-Za-z]+)\.',expand=False)	1	1
train_data.drop(['Sex'], axis=1, inplace=True)	1	1
df_titanic_train_mod['Sex'].replace('male',1,inplace=True)	1	1
train_df['Family_Size'] = data_df['Family_Size'][:891]	1	1
evaluation_stats_sorted.groupby('group', as_index=False).first()	1	1
data_df.copy(deep=True)	1	1
datacv['Sex'] = datacv['Sex'].map({'male': 1, 'female': 2})	1	1
"train.head()[""Cabin""]"	1	1
new_data.drop('Sex', inplace=True, axis=1)	1	1
X_test['Cabin'] = X_test['Cabin'].fillna('0')	1	1
df.query('Age < 1')	1	1
df.loc[(df.EmbarkCode.isnull()),'EmbarkCode'] = 3	1	1
"male_mar[""Age""].mean()"	1	1
classifier.add(Dense(output_dim=1,init='uniform',activation='sigmoid'))	1	1
tf.add(tf.matmul(x, weights['hidden1']), biases['hidden1'])	1	1
data_df.groupby(['Sex'])['Survived'].mean()	1	1
dft['Male']=pd.get_dummies(dft['Sex'],drop_first=True)	1	1
train['Age'].max()	1	1
data.drop('Ticket', axis = 1)	1	1
data['Sex'] = data['Sex'].replace(['male', 'female'], [0, 1])	1	1
original_train_df.shape, original_test_df.shape	1	1
params_init['min_data'] = 50	1	1
titanic_scaled.describe()	1	1
"train.Title.replace(""Lady."", ""Nobility"")"	1	1
"train[""Family""] = train[""SibSp""] + train[""Parch""] + 1"	1	1
training_df1.head()	1	1
df['Sex_male'] * df['Age_10-60']	1	1
combined_df['Age'].dropna().astype(int)	1	1
xtest_annoted.drop(['Survived'], axis=1)	1	1
"train.loc[(train.Age.isnull())&(train.Salutations==""Miss""),'Age'] = 22"	1	1
"log.pivot(""lambda"", ""gamma"", ""Accuracy"")"	1	1
"train.drop(""Parch"", axis = 1, inplace = True)"	1	1
df_full.groupby(['Ticket']).size().reset_index(name='count')	1	1
train_df.groupby('ID',as_index= False).agg(['count', 'mean', 'max', 'min', 'sum']).reset_index()	1	1
dataset.Cabin.head(5)	1	1
"axes[1].set_title(""Age Distribution"")"	1	1
train.loc[train['CabinN3'] == 999, 'hasCabin3'] = 0	1	1
train_data_embark.shape	1	1
train.groupby('Title').mean()	1	1
df[['Survived', 'FamilySize']].groupby('FamilySize', as_index=False).mean().sort_values(by='Survived', ascending=False)	1	1
"test_df[""Fare""].fillna(test_df[""Fare""].dropna().median(), inplace=True)"	1	1
df_train['LastName'] = name_parts[0]	1	1
np.shape(X_scale)	1	1
raw_train_df[['Age']].plot(kind='hist', bins=20, ax=ax2, sharey=True, legend=False)	1	1
full_data[['SibSp','Parch','Survived', 'Sex']].copy()	1	1
df['GroupSurvIndex'] = 0	1	1
df['age_med'] = df['Title'].apply(lambda x: title_ages[x])	1	1
first_class.loc[first_class['Sex']=='female', ['Survived','Sex']]	1	1
test_data['Survived'] = RF_model.predict(df_test)	1	1
df.loc[df['AgeGroup']<=19, 'AgeGroup'] = 0	1	1
"test_df.drop([""Name"", ""Ticket"", ""Sex"", ""SibSp"", ""Parch"", ""Fare"", ""Cabin"", ""Embarked"",""PassengerId""], axis=1)"	1	1
"all_data[0][[""Pclass"",""Agebin"",""Farebin"",""en_sex"",""SibSp"",""en_Embarked"",""Parch""]]"	1	1
"data_train.drop([""Name"",""Ticket"",""PassengerId"",""Cabin"",""Embarked""],axis=1)"	1	1
simple_test_df['Survived'] = grid_soft.predict(X_test)	1	1
df.loc[(df['Age'] > 8) & (df['Age'] <= 32), 'AgeGroup'] = 1	1	1
df_train.drop(axis=1, columns= 'ticket', inplace=True)	1	1
train_dataset.loc[ train_dataset.Parch == 0, :]	1	1
ax[1].hist(df_deads, bins=10)	1	1
test.join(dummies_enbarked_test)	1	1
test[['PassengerId', 'Survived_avg']].to_csv('submission_avg.csv', index = False, header = ['PassengerId', 'Survived'])	1	1
"model.add(Dense(1, activation=""sigmoid"", kernel_initializer=""glorot_normal""))"	1	1
Title_Dict.update(dict.fromkeys(['Master','Jonkheer'], 'Master'))	1	1
test.drop(['Parch', 'SibSp'], axis = 1)	1	1
test.loc[test['Cabin'].str.len() == 5.0, 'CabinL'] = test['Cabin'].astype(str).str[2]	1	1
df_test.drop(['Ticket', 'Cabin', 'Fare', 'ticketcount'], axis=1)	1	1
test.drop('Pclass', inplace=True, axis=1)	1	1
np.median(titanic[titanic['Age'].notnull()]['Age'])	1	1
thresh.transform(test_full)	1	1
"data_test_df[""PassengerId""],"	1	1
"dataset[""Sex""] = dataset[""Sex""].map({""male"" : 0, ""female"" : 1}).astype(int)"	1	1
Train_Master.loc[(Train_Master['Fare'] > 7.85) & (Train_Master['Fare'] <= 12.2), 'Fare'] = 2	1	1
titanic_train_test_merged['PTitle']=titanic_train_test_merged['PTitle'].astype('category')	1	1
trainSet.loc[:, ['Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]	1	1
data_train['Survived'].loc[data_train['Embarked']=='Q'].value_counts()	1	1
train['c_mean'].min()	1	1
dataset.loc[(train['Age'] > 20) & (train['Age'] <= 30), 'AgeGroup'] = 6	1	1
all_data.drop(['Parch', 'SibSp', 'FamilySize'], axis = 1)	1	1
ax[0].set_title('Survivors in Titanic')	1	1
data_test.drop(['PassengerId', 'Name', 'Ticket'], axis=1)	1	1
"df_test['Pclass'] = pd.Categorical(df_test[""Pclass""])"	1	1
X_train['SibSp']	1	1
train_dummy.drop(columns=cat_vars, inplace=True)	1	1
testData['Embarked']=testData['Embarked'].fillna(testData['Embarked'].value_counts().idxmax())	1	1
"titanic.groupby('NAge')['NAge'].count()   # Confirm values in 'NAge"" feature after imputation"	1	1
output.to_csv('titanic-predictions-svm-pca.csv', index=False)	1	1
testingset['FareBin'] = pd.qcut(testingset['Fare'], 4, labels = [1, 2, 3, 4])	1	1
test_data['Name_pred'] = test_data['Name_pred'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dr', 'Jonkheer',                                              'Lady', 'Major', 'Rev', 'Sir'], 'Other')	1	1
"data_test[""Title""] = data_test[""Title""].apply(lambda x: title_dict[x])"	1	1
df_test[['PassengerId', 'Name', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Embarked']]	1	1
submission['Ticket_numerical'] = submission.Ticket.apply(lambda s: s.split()[-1])	1	1
df['Embarked'] = df.Embarked.fillna(method='ffill')	1	1
"test.loc[(test[""Age""]>16) & (test[""Age""]<=32),""Age""]=1"	1	1
dataset['Fare'] = dataset['Fare'].fillna(train_df['Fare'].median())	1	1
dataset_df.info()	1	1
rf_score.mean()	1	1
df['Title'] = pd.Series((mapping_title[name2.split('.')[0].split(',')[1].strip()] for name2 in df['Name']), index=df.index)	1	1
df_test['Age_scaled'] = scaler.fit_transform(df_test[['Age', 'Fare']], scale_param)[:,0]	1	1
df_train['Sex'] = df_train['Sex'].map(sex_mapping)	1	1
train_results_tree.append(roc_auc_score(y_train, train_pred))	1	1
"submission_unformatted.set_index(""PassengerId"")"	1	1
df_all['Fare'].median()	1	1
df['Age'][df['Survived'] == 1].hist(bins=bins, color='g')	1	1
name_third_place.append(third_place)	1	1
"df['family_size'] = pd.cut(family_size, (0,1,5, 20), labels=[""single"", ""small"", ""big""], include_lowest = True, right=True)"	1	1
data.iloc[:,1]	1	1
"result.to_csv(""clf.csv"", index=False)"	1	1
t[0] == '3':	1	1
new_test['Age'].fillna(new_test['Age'].mean(), inplace=True)	1	1
dfTrain.drop(['Survived'], axis=1)	1	1
subsets.append(list(p))	1	1
all_names.loc[all_names['LastName'] == '', 'LastName'] = 'MISC'	1	1
age_fill_df.median()	1	1
all_data['Cabin_type'] = all_data['Cabin_type'].map(lambda x: ord(x) - 64 if x.isalpha() else x)	1	1
df['Fare_Per_Person']=df['Fare']/(df['Family_size']+1)	1	1
train.loc[train.Age >= 50,'Age'] = 5	1	1
"dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col', 	'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Special')"	1	1
test_df.loc[test_df.Fare.isnull()]	1	1
ada_classifiers.cv_results_['std_test_score'][ada_classifiers.best_index_],	1	1
train.loc[(train['Name_len'] > 19) & (train['Name_len'] <= 23), 'Name_len'] = 1	1	1
train_p['Age_new']=train_p['Age_new'].astype(int)	1	1
test_df['Sex'] = test_df['Sex'] == 'male'	1	1
df.loc[df.Age >= 16, 'AgeF'] = 'Adult'	1	1
test_df.loc[(test_df['Fare']>31)&(test_df['Fare']<=512),'Fare_new']=3	1	1
df['FamilySize'] = df.SibSp + df.Parch	1	1
df_train.Age.fillna(df_train.Age.mean(), inplace=True) # its a lazy example, so mean is fine	1	1
"i.loc[i[""CabinCount""] == 1,[""CabinType""]] = ""Single"""	1	1
data['Age']=data['Age'].fillna(data['Age'].median())	1	1
data[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]	1	1
titanicTrain['FamilySize']=np.nan	1	1
predictions.append(1 if passenger['Age'] < 10 or passenger['Sex'] == 'female' else 0)	1	1
train_df[['Age_Bin', 'Survived']].groupby(['Age_Bin'], as_index=False).mean()	1	1
"dataset['Class2'] = dataset[""Pclass""].apply(lambda x: 0 if x != 2 else 1)"	1	1
test.loc[(test['Family'] > 0) & (test['Family'] <= 3), 'Family'] = 1	1	1
train_data['AgeBucket'] = train_data['Age'] // 15 * 15	1	1
"model_data.loc[model_data.Cabin.notnull(),""Cabin_Letter""] = model_data.loc[model_data.Cabin.notnull(),""Cabin""].map(lambda letter:letter[0] if not re.match(""F \w+"",letter) else letter[2])"	1	1
full.loc[full.Title.isin(['Ms','Mlle']), 'Title'] = 'Miss'	1	1
df_to_imp.loc[(df_to_imp.Pclass==a1)&(df_to_imp.Title==a2)&(df_to_imp.Sex==a3)&                                  (pd.isnull(df_to_imp.Age)),'Age'] = new_age	1	1
df['Embarked']=label_encoder.fit_transform(df['Embarked'].astype('str'))	1	1
data_test['Sex'] = data_test['Sex'].replace(to_replace='male', value=0)	1	1
data.groupby('FareBand')['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')	1	1
df['Embarked'].astype('category').values.copy()	1	1
comb_data['Survived'].replace([0,1],['No','Yes'], inplace=True)	1	1
test.loc[group_ids, cols[model_id][group_type]]	1	1
"dataset['title_age_level'] = dataset.title.map({""Master"": 1, 'Mister': 1, ""Miss"": 2, ""Mrs"": 3,  ""Mr"": 3, ""rare"": 4})"	1	1
dataset['Title']=dataset['Name'].str.extract(' ([A-Za-z]+)\.',expand=True)	1	1
importance.sort_values(ascending = False, by = 'importance')	1	1
all_names.loc[:, 'LastName'] = all_names.loc[:, 'Name'].apply(get_lastname)	1	1
params_init_l['min_sum_hessian_in_leaf '] = 100	1	1
pylab.rcParams['figure.figsize'] = 8 , 6	1	1
"df['is_male'] = np.where(df['Sex']==""male"", 1, 0)"	1	1
df_test.drop(['individualticket', 'Age', 'Name', 'SibSp', 'Parch'], axis=1)	1	1
train_X.drop(columns=['SibSp', 'Parch'])	1	1
"df_test.loc[((df_test[""title""]==""master."") & (df_test[""Age""].isnull()==True)).tolist(),'Age']=avg_master"	1	1
nullData['Age']=p	1	1
Validation_data.describe(include='all')	1	1
w[0] = 1	1	1
pylab.rcParams['figure.figsize'] = 25,5	1	1
in ['Cabin', 'Survived', 'Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked', 'FamSize', 'Title', 'TicketTrim']:	1	1
train_df.drop('SibSp', axis=1, inplace=True)	1	1
"test_df[""Age""] = test_df.groupby(""Title"")[""Age""].transform(lambda x: x.fillna(x.mean()))"	1	1
train_df.Title.hist()	1	1
transformed_df['Title_Miss'] = title.Title_Miss	1	1
raw_train['Ticket'].head()	1	1
df_train_copy['Cabin'] = df_train_copy['Cabin'].apply(lambda v: ord(v))	1	1
titanic['Title'] = titanic['Title'].replace('Mme', 'Mrs')	1	1
SibSp_data['final_SibSp_data'] = SibSp_data.apply(SibSp_vs_survival, axis=1)	1	1
test_X.drop(columns='Ticket')	1	1
ax[2].set_title('Fare in Pclass 3')	1	1
full_dataset.fillna(np.nan)	1	1
"train_data[""Senior""] = 0"	1	1
model_cat.add(Dense(1, activation='sigmoid'))	1	1
test.to_csv('test_clean.csv', index=False)	1	1
df_all.Embarked.replace('S',2)	1	1
raw_train['SibSp'].value_counts()	1	1
combined['Cabin'] = combined.Cabin.fillna( 'U' )	1	1
data_df['Title'] = data_df['Title'].replace('Ms', 'Miss')	1	1
test['Fare'] = pd.cut(test['Fare'], bins, labels=groups)#Passengers' names, tickets, IDs not relevant to survival; due to sparsity I will also drop the cabin variable.	1	1
"axes[0].set_xlabel(""Fare"")"	1	1
frame.ix[:,3] = [0,1,0,1]	1	1
all_data['Title'] = all_data['Title'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dona', 'Dr', 'Jonkheer', 'Lady', 'Major', 'Rev', 'Sir'], 'Other')	1	1
train.set_index('PassengerId').drop(['Name','Ticket'],axis = 1)	1	1
"dataset_train[""Cabin""].describe()"	1	1
dataset.loc[ dataset['Age'] > 64, 'Age4'] = 1 ;	1	1
sub_file.to_csv('result.csv', index=False)	1	1
Test_Master.loc[(Test_Master['Age'] > 36) & (Test_Master['Age'] <= 47), 'Age'] = 2	1	1
test_df['top_cabin'][test_df['top_cabin'] != 1] = 0	1	1
data_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()	1	1
test.loc[test['Fare'].isnull(),'Fare'] = 35.63	1	1
dataset['MisAge'] = 0	1	1
ticSur.reset_index(level=0, inplace=True)	1	1
new_df.ix[:,1::]	1	1
dataset['Embarked'] = dataset['Embarked'].map( {'S':0, 'C':1, 'Q':2} ).astype(int)	1	1
data.iloc[891:1309, :]	1	1
X_test['Sex'].loc[X_test['Sex']=='female'] = 0	1	1
train['Age_band']=0	1	1
df['Ticket'] = df['Ticket'].map(lambda x:x.replace('.',''))	1	1
num.astype(int)	1	1
"df_train[""cab""].isna().sum()"	1	1
submission_final.to_csv('submission_final_0010_020.csv', index=False)	1	1
train['FareBins'] = pd.qcut(train['Fare'], 5)	1	1
combined.drop('Cabin', axis = 1, inplace = True)	1	1
train.sort_index(axis=1, inplace=True)	1	1
"data_train.loc[data_train.index.isin(false_predictions)].loc[data_train.Sex == ""male""].head(1)"	1	1
"train_set[""Embarked""], y=train_set[""Fare""], hue=train_set[""Pclass""],"	1	1
data.loc[(data['Age'] > 21) & (data['Age'] <= 30), 'SortAge_3'] = 2	1	1
"Titanic_Master['Title'] =Titanic_Master['Name'].str.split(pat="","",expand=True)[1].str.split(pat='.',expand=True)[0].str.strip()"	1	1
"titanic_df.loc[titanic_df.Salutation == 'Mr','Age'] = titanic_df['Age'].fillna(means[""Age""][""Mr""])"	1	1
series.apply(lambda x:(x - mean) / std_dv)	1	1
df['Outlier'] = 0	1	1
data.loc[(data['Fare']>39.688)&(data['Fare']<=512.329),'Fare_cat']=4	1	1
data.apply(lambda r : fillAges(r) if np.isnan(r['Age']) else r['Age'], axis=1)	1	1
str.replace('.', '').rename('ticket').to_frame()	1	1
"df_test[""Age""].mean()"	1	1
full.apply(TicketPrefix, axis = 1)	1	1
"female_alone_s['Age_cat'].value_counts(sort=False).plot(kind=""bar"",alpha=0.5,color='red',ax=axes[0,0])"	1	1
data_train.drop('Cabin', axis = 1, inplace = True)	1	1
X['Sex'] = lb.fit_transform(X['Sex'])	1	1
test_set['Fare'].fillna(test_set['Fare'].median(), inplace = True)	1	1
"train_df[""title""] = [i[i.index(', ')+2:i.index('.')] for i in train_df[""Name""]]"	1	1
in ['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked', 'FamilySize', 'IsAlone', 'Title', 'FareBin', 'AgeBin']:	1	1
evaluation_stat['group'] = model.split('-')[0]	1	1
model.add(Dense(64, input_dim=data.drop('Survived', axis=1).drop('PassengerId', axis=1).shape[1]))	1	1
"data_train[""CabinBool""] = (data_train[""Cabin""].notnull().astype('int'))"	1	1
test_df.drop(columns='PassengerId', axis='columns')	1	1
sex_data.append(2 if tm_sex_data[i] == 'female' else 1)	1	1
"test.drop(""Ticket"", 1, inplace = True)"	1	1
"related_people.loc[related_people[""PassengerId""]==193,""RGroup""]=""350046"""	1	1
train_df.drop(['Sex'], axis=1, inplace=True)	1	1
original_test_data.describe()	1	1
train_df[['AgeBand', 'Survived']].groupby('AgeBand').mean()	1	1
submission.to_csv('titanic_predic.csv', index=False)	1	1
data_copy.loc[data_copy.Embarked=='S', 'Embarked'] = 0	1	1
ax[0].set_title('Accuracy on VALIDATION sample ' + suff)	1	1
df_full['Fare'] = df_full['Fare'] / df_full[fare_scaler]	1	1
"model[""classifier""] = clf.best_estimator_ # takes bast parameters to the model"	1	1
result_df.to_csv('predictions.csv',index=False)	1	1
Lda['Feature'] = Quantitative	1	1
data['title'].unique():	1	1
titanic_data['Title'] = titanic_data['Title'].replace('Mme','Mrs')	1	1
"valid.loc[:, ""Survived""]"	1	1
df_train['Age']=df_train['Age'].fillna(int(mean_value))	1	1
train_df['Name'] = le.transform(train_df['Name'])	1	1
te_df['Age']=(te_df['Age']-te_df['Age'].mean())/(te_df['Age'].max()-te_df['Age'].min())	1	1
df_train.drop(['individualticket', 'Age', 'Name', 'PassengerId', 'SibSp', 'Parch'], axis=1)	1	1
guess_data.median()	1	1
train_df[['age', 'pclass', 'survived']].groupby(['age', 'pclass']).mean()	1	1
dfte.dropna()	1	1
all_data.loc[(np.isnan(all_data['Age'])) & (all_data['Title'] == 'Master'), 'Age'] = 8	1	1
model.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu'))	1	1
ensembleDf.head()	1	1
"df[""Age""] = df[""Age""].fillna(25)"	1	1
row['Connected_Survival'] != 0:	1	1
submission['PassengerId'] = new_test['PassengerId']	1	1
df.apply(lambda x: sum(x.isnull())).sort_values(ascending=False)	1	1
names.loc[(names['dona'])==1,'mrs'] = 1	1	1
traindf[['Fare', 'Age']] = traindfScaled	1	1
"test.Title.replace(""Col."", ""Officer"")"	1	1
cv_param.update(pdict)	1	1
train_df.loc[(train_df['Age'] > 37) & (train_df['Age'] <= 80), 'Age'] = 3	1	1
"train_set[""Sex""] = StandardScaler().fit_transform(train_set[""Sex""].values.reshape(-1,1))"	1	1
subdf.loc[subdf['pred_1'] >= 0.5][:5]	1	1
df_comb['FamilySize'] = df_comb['SibSp'] + df_comb['Parch'] + 1	1	1
"train.loc[train[""Embarked""] == embarked[i], ""Embarked""] = i"	1	1
df.loc[((df.Cabin == 0) & (df.Pclass == 1)) , 'Ca_Cl'] = 1 #rich no cabin	1	1
test_X.eval('FamilySize = SibSp + Parch', inplace=True)	1	1
titanic_df['Alone'] = titanic_df['FamilySize'].apply(alone)	1	1
dfte.set_index(dfte['PassengerId'])	1	1
df_test.replace(np.nan,1)	1	1
train['Age'].fillna(0,inplace=True)	1	1
df['Age'].values.copy()	1	1
test_df.drop('Ticket', 1)	1	1
AgeData.select_dtypes(include=['category']).columns	1	1
"dataset.loc[dataset.Fare==0, ""Fare""]=""NaN"" # Fare'e str değeri atadığımız için artık object'e dönüştü!!"	1	1
data_test1.loc[:, 'Survived'] = data_test1['Survived-RFC'].astype(int)	1	1
df.loc[df.Pclass == Pclass].Fare.values[0]	1	1
test_dataset['Embarked'] = label_encoder.fit_transform(test_dataset['Embarked'])	1	1
all_data.drop('Name', axis = 1)	1	1
df['Age_NA'] = df['Age'].isnull()	1	1
maes.append(my_mae)	1	1
drop_strategies.items():	1	1
titanic_test_data_X['Survived'] = voting_est.predict(Stacked_test)	1	1
titanic_df['Name'].apply(get_familyname)	1	1
"test.drop(""Embarked"", axis=1, inplace=True)"	1	1
dataset.loc[:, lstInclude] # extracting features	1	1
test.Embarked.replace(['C', 'S', 'Q'], [0, 1, 2])	1	1
"solution.to_csv(""Titanic_Dicision.csv"", index = False)"	1	1
axes[2].set_title('% of Passengers per Port of Embarkment', fontsize=15)	1	1
"predictions.transpose().reshape(test_data[""PassengerId""].shape)"	1	1
features['Fare'] = preprocessing.normalize([features['Fare']], norm='l2').flatten()	1	1
dataset.loc[dataset.Fare.isnull(),'Fare'] = Fare_median	1	1
X_train['Sex'] = X_train['Sex'].astype(int)	1	1
plt.hist(x=[data1[data1['Survived']==1]['Fare'], data1[data1['Survived']==0]['Fare']],stacked=True, color = ['g','r'],label = ['Survived','Dead'])	1	1
row['Age'] >= 46 and row['Survived'] == 0:	1	1
all_data['Fare'] = all_data['Fare'].apply(discretize_fare)	1	1
curr_row[4]	1	1
test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Embarked']].values	1	1
"data[""Age""] = data[""Age""].fillna(median_age)"	1	1
Submission.to_csv('titanic.csv', index=False)	1	1
train_dataset.loc[(train_dataset['Age']>32) & (train_dataset['Age']<=48),'Age']=2	1	1
test.Fare.fillna(test.Fare.median(),inplace=True)	1	1
titanic_training_data.describe()	1	1
k_recall_scores.append(recallScore)	1	1
itertools.product(range(cm.shape[0]), range(cm.shape[1])) :	1	1
test_df.copy().drop(columns=['Survived'], axis=1)	1	1
test_df.drop('Cabin', 1, inplace=True)	1	1
"train[""Title_autre""] = train[""Title""] == 'Autre'"	1	1
raw_train[['Pclass', 'PassengerId']].groupby(['Pclass'], as_index=True).count()	1	1
test['Sex'].loc[test['Sex'] == 'male'] = 0	1	1
"train_data.loc[(train_data[""Age""] >= 30) & (train_data[""Age""] < 60), ""Adult""] = 1"	1	1
test_df.drop(['AgeBand'], axis=1)	1	1
survived.append(0)	1	1
test.drop(['Parch', 'Ticket', 'Cabin', 'Embarked'], axis = 1)	1	1
ship_numeric.loc[lambda df: df.Age_was_missing == 1, :][:5] ## This pulls up a sample of the records that had the age value missing.	1	1
train_df.groupby(['Sex'])['Survived'].mean().sort_values()	1	1
"df[""Deck""] = ""Unknown"""	1	1
titanic['Age'] = df_complete['Age']	1	1
not_survivors['Embarked'].value_counts().sort_index()	1	1
train.groupby(['Embarked','Survived']).PassengerId.count().unstack()	1	1
"train_data[""Age""][((train_data['SibSp'] == train_data.iloc[i][""SibSp""]) & (train_data['Parch'] == train_data.iloc[i][""Parch""]) & (train_data['Pclass'] == train_data.iloc[i][""Pclass""]))].median()"	1	1
test['Age_group'] = 0	1	1
data['Pclass_code'] = encoder.fit_transform(data['Pclass'])	1	1
summary_df.groupby(['role', 'level']).size().to_frame(name = 'count').reset_index()	1	1
output.to_csv('titanic-predictions-SP.csv', index = False)	1	1
feats['age_bins'] = categories	1	1
features.values.flatten(),	1	1
"data_test[""Sex""] = data_test[""Sex""].replace(""female"", 0)"	1	1
Data_train.shape	1	1
train2.copy()	1	1
"sns.boxplot(data = df_train, x = ""Title"", y = ""Age"");"	1	1
params['metric'] = 'binary_logloss'	1	1
"train[""Cabin""] = train[""Cabin""].fillna(""N"")"	1	1
dataset['FirstClass'] = dataset.Pclass.map(lambda x: 1 if x == 1 else 0)	1	1
"results.query(""Model in @not_proba_list"")"	1	1
test[['PassengerId', 'Survived']].to_csv('First_SVM_Classifier.csv', index=False)	1	1
test['Pclass'] = raw_test['Pclass']	1	1
all_data.drop(['Name','Ticket','Title'],axis=1)	1	1
dftest['Title'] = dftest['Name']	1	1
df_train[['Sex','Survived']].groupby(['Sex'],as_index = False).mean()	1	1
ax1.hist([dataset.loc[:,'FamilyCount'], dataset.loc[dataset['Survived'] == 1, 'FamilyCount']],bins=np.arange(12)-0.5, color=['blue', 'green'], histtype='bar', label=['Family Members On-Board', 'Family Members Survived'])	1	1
test['TAlone']=[0 if (test['SibSp'][i]+test['Parch'][i])>0 else 1for i in range(len(test))]	1	1
data.loc[(data.Fare.isnull())&(data.Pclass==2), 'Fare']=14.25	1	1
df.EmbarkedNumber.astype('int64')	1	1
data.drop(['Fare'], axis=1, inplace=True)	1	1
train.loc[train['Cabin'].str.len() == 15.0, 'CabinN2'] = train['Cabin'].astype(str).str[5:7]	1	1
"data[""family""] = data[""SibSp""] + data[""Parch""]"	1	1
X_train.dropna(axis=0, inplace=True)	1	1
"combined[""Title""] = combined[""Title""].replace(['Lady', 'the Countess','Countess', 'Sir', 'Jonkheer', 'Dona','Don'], 'Royalty')"	1	1
dataset.loc[dataset['Age']<=10,'Age_cat']=0	1	1
x_train['Ticket'].apply(lambda x: str(x)[0])	1	1
summary_df[['role', 'level', 'keep', 'dtype', '#null', '%null', '#non_null', '#unique']]	1	1
vars_with_missing.append(f)	1	1
dataset_df.head()	1	1
X_test.update(UpdateNullEmbarked(X_test))	1	1
comb['FS_small'] = comb['Family_Size'].map(lambda x: 1 if x==2 else 0)	1	1
XGBest.iloc[:, 1].tolist()	1	1
data['Family_Size_Surname'] = data.apply(lambda row: min(row.Surname_Count, row.Family_Size), axis = 1).astype(int)	1	1
data.loc[(data['Fare'] > mean_fare[2]) & (data['Fare'] < mean_fare[3]), 'FareStage'] = 3	1	1
train_acc.append(temp_train_acc)	1	1
honorifics_train.add(n.split(',')[1].split('.')[0].strip())	1	1
"train[""title""] = [i.replace('Mlle', 'Miss') for i in train.title]"	1	1
"axes[1].set_title(""Length vise Survival rate"")"	1	1
training.drop(labels=['Cabin','Ticket'],inplace=True,axis=1)	1	1
train_x.values, train_y, dev_x, dev_y	1	1
"train[""has_cabin""] = [0 if i == 'N'else 1 for i in train.Cabin]"	1	1
"test['Alone'] = 0  # Creating a new feature ""Alone"" with default value = 0"	1	1
df.assign(**to_assign)	1	1
"full[""Cabin""] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in full['Cabin'] ])"	1	1
test['FareGroup'] = test['Fare'].apply(fare_group)	1	1
train.loc[train['Survived'] == 0]	1	1
train.groupby(['FareBand'])[['Survived']].mean()	1	1
data_cleaner[0].iloc[:,0:1]	1	1
df2.drop(['Embarked'], axis=1)	1	1
"train_set.drop([""SibSp"",""Parch""],axis=1,inplace=True)"	1	1
X.drop(drop_columns, axis = 1)	1	1
test['Age'] = trainAge	1	1
data['grandparents'] = data.apply(lambda x: 1 if ((x.Parch>0) & (x.SibSp>0) & (x.Age>19) & (x.Age>45) ) else 0, axis=1)	1	1
"dataset_train[""Survived""].groupby(dataset_train[""Age""].isnull()).count()"	1	1
test_df2.drop(test_df2.columns[np.isnan(test_df2).any()], axis=1)	1	1
train_df['Pclass'] = train_df['Pclass'] / 3	1	1
train_df.isnull().sum().sum()	1	1
"train_data.loc[train_data[""Name""].str.contains(""Ms.""), ""TitleMs""] = 1"	1	1
test_df_new.drop(['Survived'], axis=1)	1	1
titanic['has_Family']=((titanic.Parch!=0) | (titanic.SibSp!=0)).map({True:1,False:0})	1	1
"test.loc[(test[""Age""]>64) & (test[""Age""]<=80),""Age""]=4"	1	1
df_full.loc[mask_train].groupby('Ticket', as_index=False)['Survived', 'Name'].agg({'Survived': 'mean', 'Name': 'count'})	1	1
test.drop(['AgeBand','FareBin','Ticket','Cabin','Name','PassengerId','ticketPos'],axis=1)	1	1
temp_df['Ticket_char'] = temp_df['Ticket_char'].str.lower()	1	1
test['Fare'].fillna(value = test['Fare'].mode()[0], inplace = True)	1	1
"submission.to_csv(""tutorial_logreg_submission.csv"", index=False)"	1	1
X_train.copy(deep=True)	1	1
dataset['family_size_level'] = pd.cut(dataset.family_size, bins=[-1,0, 3.5, 12], labels=['alone', 'middle', 'large'])	1	1
train_df.append(pd.DataFrame(data = test_df), ignore_index=True)	1	1
app_train['Family_size'] = app_train['SibSp']+app_train['Parch']	1	1
neural_result.head(5)	1	1
train_df.Embarked.isnull().sum()	1	1
df.loc[((df.Sex == 2) & (df.Pclass == 3)) , 'Se_Cl'] = 6 #poor female	1	1
categorical_df.append(df3)	1	1
kwargs.get( 'row', None )	1	1
temp.apply(lambda x: x.value_counts().index[0], axis = 1)	1	1
train.rename(columns={i: 'Cabin_'+i}, inplace=True)	1	1
df.loc[ (df.Fare<=14.454) & (df.Fare>7.91), 'FareBand'] = 1	1	1
df.loc[df['Age']>=64,'isOld'] = 1	1	1
importance['Feature'] = X.columns	1	1
submission.to_csv('submission_hard_vct.csv', index = False)	1	1
test_df.drop(labels = ['PassengerId','Name','Ticket','Cabin','Parch','SibSp'],axis=1)	1	1
"dataset['FamilyName'] = dataset['Name'].str.split("", "", expand=True)[0]"	1	1
classes.reset_index(inplace=True)	1	1
df_train_clean_age.groupby('Sex')['Survived'].mean()	1	1
test_df.drop(['Age', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'Fare'], axis=1)	1	1
test_df.Fare.fillna(test_df.Fare.dropna().median(), inplace=True)	1	1
MLA_compare.loc[index, 'MLA AUC'] = auc(fp, tp)	1	1
df['Age'] = df['Age'].fillna(df.Age.dropna().median())	1	1
"datacv.set_value(i, 'Name', ""Jonkheer"")"	1	1
cv['test_accuracy'].mean(),	1	1
data.Ticket_numerical.quantile(0.75) - data.Ticket_numerical.quantile(0.25)	1	1
footballers['Unit'] == '0', 0,	1	1
df_full['Title'] = df_full['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
allset.loc[(allset['TotalFamily']>0) & (allset['TotalFamily']<=3),'FamilyBucket']='SmallFamily'	1	1
test_y[['passenger_Id', 'survived']]	1	1
score['KneighborsClassifier'] = knbor.score(X_train, Y_train)	1	1
train['Cabin']=train['Cabin'].transform(extract2)	1	1
acc_knn.mean()	1	1
titanic_test[['Age']]=imputer.transform(titanic_test[['Age']])	1	1
test.loc[(test.Fare > 135) & (test.Fare <= 202),'Fare'] = 3	1	1
valid_X['FareBin'] = pd.qcut(valid_X['Fare'], 4)	1	1
train_data['Age'].fillna(train_data['Age'].median(), inplace=True)	1	1
gbc_feat_red.transform(gbc_red_train)	1	1
"train_df[""Age""][np.isnan(train_df[""Age""])] = rand1"	1	1
df_main['Pclass'] = df_main['Pclass'].astype(str)	1	1
data_test.drop(['Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Cabin','Embarked',], axis=1, inplace=True)	1	1
train[['Age','SibSp','Parch', 'Fare']].copy()	1	1
"data_train[""Fare""]  = pd.cut(data_train[""Fare""], farebins, labels=group_names)"	1	1
"test_df.loc[test_df[""Title""] == ""Dona"", ""Title""] = 'Rare Title'"	1	1
full['TicketSize'] = full.groupby('Ticket')['Ticket'].transform('count')	1	1
data_train['Age'].std()	1	1
"result_test4[""PassengerId""] = passenger_id_test"	1	1
fake_test.loc[:, train_set.columns != 'Survived']	1	1
best_classifier.keys()	1	1
dataset.values:	1	1
train_data.Fare.loc[ (train_data.Ticket == '3') & (train_data.Pclass == 3) & (train_data.Embarked == 'S')].median()	1	1
"dataset[""Embarked""] = dataset[""Embarked""].map(embark_map)"	1	1
data_train.Age.mean()	1	1
test['Age'].fillna(test.groupby('Title')['Age'].transform('median'),inplace = True)	1	1
df['SIBSP_2_3']=0	1	1
data1['Title'].value_counts() < stat_min	1	1
X.drop(['Sex_male','Embarked_S'],axis = 1, inplace=True)	1	1
train_data.drop(['PassengerId','Ticket','Cabin'], axis=1, inplace = True)	1	1
accuracy.append(accuracy_score(pred , y_test))	1	1
df.loc[index, 'Title'] = 'Mrs'	1	1
"train[[""Deck"", ""Survived""]].groupby(['Deck'], as_index=False).mean().sort_values(by='Survived', ascending=False)"	1	1
Titanic_dataframe.loc[:, 'Embarked'] = Titanic_dataframe.loc[:, 'Embarked'].str.replace('S', '0')	1	1
test_drop.head()	1	1
test.drop(['Cabin'], axis=1)	1	1
test['SibSp'] + test['Parch'] + 1	1	1
df1[['Age', 'SibSp']].values	1	1
test_csv['Embarked'] = test_csv['Embarked'].fillna('0')	1	1
titanic_test['Fare']=titanic_test.Fare.fillna(Av_Fare)	1	1
titanic_data.loc[(titanic_data['Fare'] >14.454)&(titanic_data['Fare'] <= 31),'Fare'] = 2	1	1
ages.head()	1	1
data.Embarked.fillna('S', inplace = True) # filling na with mode of location Embarked	1	1
comb2.to_csv('name_only_df.csv',index=False)	1	1
test_df.loc[test_df.Fare.isnull(), 'Fare'] = 0.0	1	1
test.Fare.fillna(train.Fare.mode()[0],inplace=True)	1	1
np.sum(trainData['Age'])/trainData['Age'].count()	1	1
df.loc[df > 1].index	1	1
"copyTest_df[""EmbarkedC""] = test_OneHotEncoded[:,1]"	1	1
all_df.groupby('Title').mean()['Age']	1	1
train_table.head()	1	1
test.apply(lambda x: golden(x), axis=1)	1	1
df.loc[index, 'Title'] = 'Ms'	1	1
sns.boxplot(x='Title', y='Age', data=full)	1	1
X_train['Name'].head()	1	1
comb_data['AgeCat'] = np.where(comb_data['Age']<9, 'Child', np.where(comb_data['Age']<20, 'Young', np.where(comb_data['Age']<60, 'Adult', 'Senior')))	1	1
full.drop(['Ticket','FamilySize','TicketSize','PassengerId'],axis=1,inplace=True)	1	1
dt_train.drop(['Name','Cabin', 'Ticket'], axis=1, inplace=True)	1	1
df['Sex'] = df['Sex'].replace(numsex)	1	1
age_df.loc[ (df.Age.notnull()) ]# Age あり	1	1
df.isnull().values.any()	1	1
"df_titanic[""Fare""] = df_titanic[""Fare""].map(lambda i: np.log(i) if i > 0 else 0)"	1	1
train_data.groupby(['Age_group', 'Survived']).Age_group.count().unstack()	1	1
"train_data[""Ticket""].head(100)"	1	1
train.drop(['PassengerId','Name','Age','Cabin','Embarked','Ticket','Cabin','AgeCohort'], axis=1)	1	1
train['SortFare'] = pd.qcut(train['Fare'], n)	1	1
test['Age'] = test[['Age','Pclass']].apply(fill_na_age,axis = 1)	1	1
X_transformed.head()	1	1
df.loc[Outliers_to_drop] # Show the outliers rows	1	1
dataframe.loc[:,'Age'][np.isnan(dataframe['Age'])]= random_age	1	1
data.loc[(data.passenger_fare>=12.5) & (data.passenger_fare<13.) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Number'] =    data[(data.passenger_fare>=12.5) & (data.passenger_fare<13.) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Number.mode()[0]	1	1
df_train_ml.drop(['Cabin', 'Ticket', 'Name', 'Age'], axis = 1, inplace = True)	1	1
"train.drop([""Cabin""],axis = 1, inplace = True)"	1	1
full_predictions.append(alg.predict_proba(test_df[predictors].iloc[test,:].astype(float))[:,1])	1	1
train_df.groupby(['Pclass']).size()	1	1
submission.to_csv('SVC_submission.csv', index = False)	1	1
dataset.groupby(['Pclass','Title','Sex'])['Age'].median().reset_index()	1	1
train.drop(['PassengerId', 'FareBand'], axis=1)	1	1
gender_and_class_survival['Survived'].plot.bar()	1	1
x_test['Missed_Cabin'] = x_test['Cabin'].map(lambda x: 0 if pd.isnull(x) else 1)	1	1
Freq_title.set_index('SX',inplace=True)	1	1
df_test['Age'] = df_test['Age'].astype('float64')	1	1
df_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])	1	1
titanic['Title'] = titanic['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
"df.loc[(df.Survived == 1) & (df.Sex == ""male"") & (df.Pclass == 2) , :].count()"	1	1
train_data.append(test_data, ignore_index=True, sort=False)	1	1
"ax[0].set_ylabel(""Count of SibSp"")"	1	1
m.add(Dense(input_dim=len(features), output_dim=50, activation='relu'))	1	1
pd.DataFrame.from_dict(grid_times, orient = 'index')	1	1
test_dat.loc[test_dat['Fare'].isnull(),'Fare'] = average_fare_by_class[average_fare_by_class['Pclass'] == 3]['Fare'][0]	1	1
pca.transform(train_no_surv)	1	1
data_full['Titles'] = data_full['Titles'].replace('Mme', 'Mrs')	1	1
train.iloc[:,1:train.shape[1]].values #bağımsız değişkenler	1	1
target.shape, trainData.shape, testData.shape	1	1
"X.loc[ X['Fare'] > 31, 'Fare'] 							        = 3"	1	1
frame.apply(ageFunc, axis='columns')	1	1
trainAGE[['Pclass',  'SibSp', 'Parch', 'Fare', 'Q', 'S', 'male']]	1	1
"test[""PassengerId""] = test[""PassengerId""].astype(int)"	1	1
df_study_lr.reset_index(inplace=True)	1	1
X['HasFamily'] = X[['SibSp','Parch']].sum(axis=1).apply(self.get_val)	1	1
"_df[""childness""]  = _df.age.apply(lambda x : (0 if x > 17 else (1 if x > 14 else 2)))"	1	1
train.iloc[:, 1:].columns.tolist()	1	1
"X[""Fare""]"	1	1
train.loc[(train['Fare'] > 99) & (train['Fare'] <= 250), 'Fare']   = 4	1	1
transformed_df.info()	1	1
predictions.set_index('PassengerId', inplace=True, drop=True)	1	1
"train_set['Age'].fillna(train_set.groupby(""Title"")['Age'].transform(""median""), inplace = True)"	1	1
axes[10].set(xlim=[0,10000], ylim=[0,0.0005])	1	1
"train.Title.replace(""Major."", ""Officer"")"	1	1
train['Parch'] = train.apply(lambda row: row['Parch'] > 0, axis=1)	1	1
final_test_data.fillna(final_test_data.mean()) # Fill Missing Fare data	1	1
"df_ticket[""TicketMembers_Simple""] = pd.cut(df_ticket['TicketMembers'], bins=[0,1,4,20], labels=[0,1,2])"	1	1
"train_df.pivot_table(index=""Pclass"",values=""Survived"")"	1	1
temp_dict['curr_count']	1	1
X_test.drop(['Parch', 'SibSp'], axis=1, inplace=True)	1	1
"pd.isnull(train[""Age""][i]):"	1	1
np.shape(X_predict_scale)	1	1
os.environ['KMP_DUPLICATE_LIB_OK']='True'	1	1
"fig[1][1].set_title(""# Siblings and Spouse"");"	1	1
acc.append(pd.DataFrame({'Model': 'LightGBM', 'Accuracy': [accuracy_score(y_true, y_pred)]}))	1	1
df_train['IsAlone']=0	1	1
test['title'] = test.Name.apply(deriveTitles)	1	1
X_test['logFare'] = np.where(X_test.Fare != 0, np.log(X_test.Fare), X_test.Fare)	1	1
Test_TargetVar.size	1	1
age_combined.mean()	1	1
testdf.drop(['Sex','Embarked','Ticket','Name'],axis=1)	1	1
dataset.loc[(dataset['Fare'] > 34.885) & (dataset['Fare'] <= 79.21), 'Fare']  = 2	1	1
data_train['FamilySize'] = data_train['SibSp'] + data_train['Parch'] + 1	1	1
test_df['Title']=test_df['Name'].map(lambda x: re.search('.*, ([^\.]*).*',x).group(1))	1	1
target_columns.append('Fare')	1	1
xText.Fare.fillna(xText.Fare.mean(), inplace=True)	1	1
train.drop('CabinLetter', axis=1, inplace=True)	1	1
test_d['Embarked']=le1_test.fit_transform(test_d['Embarked'])	1	1
trainData.drop('Survived',axis=1)	1	1
"titanic.query(""Sex == 'male'"")['Age'].dropna(), bins=int(titanic['Age'].max()),"	1	1
train_df['TitleKey'] = train_df['Title'].map(title_mapping)	1	1
train.drop(['SibSp','Parch','title','FamilySize'],axis=1,inplace=True)	1	1
"train[""Embarked""].loc[train[""Embarked""] == ""S""] = 0"	1	1
"models.append((""CART"", DecisionTreeClassifier))"	1	1
"sns.boxplot(x=""target_name"", y=column, data=df_train, ax=plt.subplot(322))"	1	1
"test['CabinN2'] = ""999"""	1	1
train['Fare'][train['Survived']==0]	1	1
"temp.to_csv(""gender_submission3.csv"",index=False)"	1	1
df_train['Deck'] = df_train['Cabin'].str.slice(0,1)	1	1
the_df['Gender'] = the_df['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
"test_ToPred[""Salutation""] = np.select(conditions, choices, default='')"	1	1
"model.add(Dense(200,input_shape=(6,), activation=""relu""))"	1	1
the_df['AgeIsNull'] = pd.isnull(the_df.Age).astype(int)	1	1
whole.set_value(idx,'Family',size)	1	1
Xdf.loc[Xdf['Fare'] <= 7.91, 'Fare'] = 0	1	1
"train_df.groupby([""Embarked""])[""Embarked""].agg([""count""])"	1	1
"data_train.groupby(""Survived"").describe()"	1	1
dataPrepare['Age']=dataPrepare['Age']	1	1
"train[[""Survived""]].values"	1	1
sns.boxplot(x = 'Pclass', y = 'FamilySize', hue = 'Survived', data = data1, ax = axis3)	1	1
train_X.corr()	1	1
"data[""Name""] = data[""Name""].str.replace(""Capt"",""Mr"")"	1	1
"df[""CabinFloorScore""] = 0"	1	1
df_test.filter(regex='Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass.*|Mother|Child|Family|Title')	1	1
test['Fare']=test['Fare'].fillna(13.67)	1	1
copy.copy(y_train)	1	1
df_copy.iloc[:,1:]	1	1
"sns.boxplot(x=""Embarked"", y=""Fare"", hue=""Pclass"", data=test);"	1	1
dataframe.isnull().sum()	1	1
"data[""Age""] = train_df[""Age""].astype(int)"	1	1
joined.sample(5)	1	1
df['Age'] = df['Age'].apply(lambda e: -1 if pd.isnull(e) else e)	1	1
np.transpose(x)	1	1
np.dot(W2,A1) + b2	1	1
testData.groupby('Initial')['Age'].mean()	1	1
one_hot_train_data.head(3)	1	1
data['Sex'].replace('male', 2, inplace=True)	1	1
test['Familysize'] = test['SibSp'] + test['Parch']+1 # 즉 형제자매 수 + 부모자식 수 + 나 = 우리가족수	1	1
train_x['Age']	1	1
df_train['Title'].unique().tolist()	1	1
train_test.drop(['Name'],axis=1)	1	1
titanic_test.drop(['Cabin','Ticket'], axis=1)	1	1
df['Pclass_1'][df['Pclass_1'] == 1][df['Survived'] == 1].count()	1	1
test.drop(['Sex','Embarked','Name','Ticket','Pclass'],axis=1,inplace=True)	1	1
df.loc[((df.Sex == 1) & (df.Pclass == 2)) , 'Se_Cl'] = 2 #avg male	1	1
df['isLargeFamily'] = 0	1	1
titanic_train.groupby('GroupSize').count().PassengerId.plot.bar()	1	1
train_data[['Survived']].groupby(train_fare_binned).mean()	1	1
"sex[""Ticket""] = np.nan"	1	1
train.loc[759,'Title'] = 'Countess'	1	1
classifiers_summary[['Classifier','Mean Train Accuracy','Mean Test Accuracy','Mean F1 train','Mean F1 Test']].style.highlight_max(axis=0).set_properties(**{'width': '150px'})	1	1
test[['Age','Pclass','Sex','Fare','FamilySize','Embarked']]	1	1
submission_df.to_csv('xgboost_model.csv', index=False)	1	1
rf_rfecv.transform(train_valid_X)	1	1
combine_df.drop(['Ticket','Ticket_Lett'],axis=1)	1	1
train_df[['SibSp', 'Survived']].groupby(['SibSp']).agg(['count', 'mean'])	1	1
"train.select_dtypes(include=[""O""]).describe()"	1	1
train_df.to_csv('all.csv', index=False)	1	1
plt.hist(train.loc[train['CabinN1'] != 999, 'CabinN1'], bins = range(0, 140, 10), label = 'all', alpha = 0.5)	1	1
"test_df.drop([""Fare"", ""Q"", ""Class2"", ""Class1"", ""C"", ""S"", ""Class3"", ""Parch""], axis = 1, inplace=True)"	1	1
df['nofam'] = np.where(df['famsize']==1, 1, 0)	1	1
GroupByTitle['Age']	1	1
train_df.loc[train_df['Title'] == 'Mlle', 'Title'] = 'Ms'	1	1
pred_df['Survived']=predictions	1	1
original_train_df.append(original_test_df)	1	1
dataframe.corr()	1	1
combined['parents'] = combined.apply(lambda row: deriveParents(row['Age'], row['Parch']), axis = 1)	1	1
survived_traning_df.groupby(pd.cut(survived_traning_df.Age, 8, precision=0)).count()['Age']	1	1
titanic['total_members'] = titanic.SibSp + titanic.Parch + 1	1	1
X['Title'] = X['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')	1	1
X_all['Embarked'] = X_all['Embarked'].fillna('C')	1	1
df.assign(IsAlone =Alone)	1	1
test.drop(columns=['Cabin','Ticket','Name'],axis=1)	1	1
titanic['Kid'] = (titanic['Age'] < 15).astype(int)	1	1
"test.loc[(test.Age.isnull())&(test.Sex=='female'),'Age'] = test[""Age""][test[""Sex""] == 'female'].mean()"	1	1
"df[""age_categories""] = pd.cut(df[""Age""], boundary_points, labels=label_age_category)"	1	1
data_out['Salutation'] = data_out['Salutation'].replace('Ms', 'Miss')	1	1
"test_data.loc[test_data[""Age""] <=16, ""Age_Group""]=1"	1	1
dataset[['FamilySize','Survived']].groupby(['FamilySize'], as_index=False).mean()	1	1
"data[""Survived""].corr(data[""Desk""])"	1	1
train_get_dummy[['Sex_male', 'SibSp', 'Pclass_3', 'Age', 'Embarked_S']],	1	1
titanicTest['Child']='child'	1	1
train5['Fare'] = np.log1p(train5['Fare'])	1	1
train.loc[train['Embarked']=='C','Embarked'] =2	1	1
data_test.drop(labels = ['Name', 'Ticket', 'Cabin'], axis = 1)	1	1
train6.drop(['SibSp', 'Parch'], axis=1)	1	1
df_result.to_csv('03_10.csv', index=False)	1	1
"train_data[""CabinDeck""].value_counts(normalize=True).sort_index()"	1	1
test.loc[(test.PassengerId==980), 'Age'] = np.median(test.loc[(test.Pclass==3)&                                                              (test.Sex=='female')&                                                              (test.Parch==0)&                                                              (test.SibSp==0)&                                                              (test.Age>17),'Age'])	1	1
dataset['IsMother'] = 0	1	1
train_1['PPT'] = train_1['SibSp'] + train_1['Parch'] + 1	1	1
df_data[['PassengerId', 'Survived', 'Age', 'SibSp', 'Parch', 'Fare', 'Pclass_1',                    'Pclass_2', 'Pclass_3', 'Gender', 'Singleton', 'FamilySmall', 'FamilyLarge', 'Child',                    'Embarked_C', 'Embarked_Q', 'Embarked_S', 'Embarked_nan']]	1	1
"dataset[""Title""] = dataset.Name.str.extract("" ([A-Za-z]+)\."", expand = False)"	1	1
dataset[['Fare', 'Age']].apply(is_neginf, axis=1)	1	1
all_data['FareBin'] = pd.qcut(all_data['Fare'], 5)	1	1
df_train['Has_Cabin'] = ~df_train.Cabin.isnull()	1	1
test.loc[test['Cabin'].str.len() == 11.0, 'CabinN3'] = test['Cabin'].astype(str).str[-2:]	1	1
Submission1.head(5)	1	1
x['Age'] = train_df.groupby('Name')['Age'].mean()[x['Name']]	1	1
clean_means.append(mean)	1	1
dataset.loc[(train['Age'] > 30) & (train['Age'] <= 40), 'AgeGroup'] = 3	1	1
holdout.head(5)	1	1
ct.div(ct.sum(axis=1), axis=0)	1	1
plt.hist(train_df.Parch)	1	1
train['Pclass'].isna().sum()	1	1
master_df.drop(drop_cols, axis=1, inplace=True)	1	1
X_train_dummies.info()	1	1
test_data['Cabin'].apply(lambda x: 0 if type(x) == float else 1)	1	1
train_d['Embarked']=train_d['Embarked'].fillna(mode_emb)	1	1
df_data['IsAlone'] = 1	1	1
titanic_df['FamilySize'] = titanic_df['SibSp'] + titanic_df['Parch'] + 1	1	1
train.drop(['Pclass', 'Age', 'SibSp', 'Parch','FareRange','Cabin','AgeGroup'], axis=1)	1	1
age_encoder.transform(age_train[['Pclass', 'encodedTitle', 'SibSpGroup1', 'SibSpGroup2', 'SibSpGroup3', 'ParChGT2']])	1	1
training_data[['Pclass','Sex','Age', 'Fare','Survived']].groupby(['Pclass','Sex','Age']).mean()	1	1
df['rev']=df['Name'].str.contains('rev.', case=False).astype(int)	1	1
"titanic_train_df[""Embarked""] = titanic_train_df[""Embarked""].fillna('C')"	1	1
submission['Title'] = submission['Name'].apply(get_title)	1	1
test.merge(withPeer[['Ticket', 'peer']], on='Ticket')	1	1
train['Age'].plot(kind='hist',bins=70)	1	1
submit['Survived'] = xlf.predict(np.array(X_2))	1	1
test_df['MMM'] = test_df[['Name']].apply(get_mmm, axis = 1)	1	1
test_org['PassengerId']	1	1
"train_data[""Baby""] = 0"	1	1
raw_train['Parch'].hist(bins=20, color='magenta')	1	1
train_df.drop(['sibsp', 'parch', 'familysize'], axis=1)	1	1
df_train.groupby('age_range')['age'].describe()	1	1
test_copy.loc[(test_copy['Fare'] > 14.4542) & (test_copy['Fare'] <= 31.0), 'Fare_Category'] = 2	1	1
rfc_params['n_estimators'] = 200	1	1
X_features_train.drop(['PassengerId','Survived','Name','Sex','Ticket','Cabin','Embarked'],axis=1)	1	1
full['Connected_Survival'] = 0	1	1
train_df['Cabin'][train_df['Cabin'].notnull()]	1	1
X['emC'] = X['Embarked'].map({'S':0,'Q':0,'C':1,np.nan:0}).astype(int)	1	1
data['Title']  = data.Name.str.extract(' ([A-Za-z]+)\.', expand=False)	1	1
X['Age'].isna().sum()	1	1
df['Family_Size'] = df.SibSp + df.Parch + 1	1	1
dataset['Cabin_E'] = dataset['Cabin'].map(lambda s: 1 if s == 2 else 0)	1	1
test_copy['Age_Category'] = test_copy['Age_Category'].astype(int)	1	1
trainONSWAR.head(3)	1	1
result_svm.mean(),result_knn.mean(), result_lr.mean(),	1	1
"df['Surname'] =  df.Name.str.extract(""([A-Z]\w{0,})"")"	1	1
smoothed_points.append(point)	1	1
df_titanic_cleaned.shape	1	1
train_group_counts['Diff'][train_group_counts['Person_Class'] == person_class][train_group_counts['Group_Category'] == group_category].values	1	1
params_init['learning_rate'] = 0.1	1	1
train.loc[train['Sex']=='male','Sex']=0	1	1
"titanic_df[""Title""] = titanic_df[""Title""].map({""Master"":0, ""Miss"":1, ""Ms"" : 1 , ""Mme"":1, ""Mlle"":1, ""Mrs"":1, ""Mr"":2, ""Rare"":3})"	1	1
"df_test[""Fare""].fillna(df_test['Fare'].median(), inplace = True)"	1	1
train_cl.Age.isnull().nonzero()[0]	1	1
app_train.drop(columns=['Survived'])	1	1
"train_data[""Cherbourg""] = 0"	1	1
df.drop('Ticket',inplace=True,axis=1)	1	1
df['Origin'] = 4	1	1
df[['Pclass','Sex','Embarked','Age']].groupby(['Pclass','Sex','Embarked']).median()	1	1
"_df.drop(""ticket"", axis=1)"	1	1
np.shape(y_predict_test)	1	1
self.subsets_.append(self.indices_)	1	1
Xmat['FareBin'] = pd.cut(Xmat.Fare, 5, labels=False)	1	1
data['CabinType2']	1	1
train['Title']=train['Name'].str.extract('([A-Za-z]+)\.')	1	1
data.loc[(data.passenger_fare>=10.501) & (data.passenger_fare<12.5) & (data.Pclass==2) & (data.Cabin=='N999'), 'Cabin_Letter'] =    data[(data.passenger_fare>=10.501) & (data.passenger_fare<12.5) & (data.Pclass==2) & (data.Cabin!='N999')].Cabin_Letter.mode()[0]	1	1
np.where(pred_probs < threshold)	1	1
"data[""Parch""].astype('int32')"	1	1
title_names_train.append(title_names_test)	1	1
data['Fare']	1	1
titanic_data.groupby('Pclass').agg('sum')[['Survived', 'Died']].plot(kind='bar', stacked=True, colors=['green', 'red']);	1	1
parch_data['died_pct'][np.isnan(parch_data['died_pct'])]=0	1	1
np.empty((NFolds,test.shape[0]))	1	1
"test[""Name""] = test[""Name""].str.extract(r""([a-zA-Z]+)\."")"	1	1
data.drop(['PassengerId', 'Ticket', 'Cabin', 'Fare'], axis=1)	1	1
test_dummy.drop(columns=cat_vars, inplace=True)	1	1
dataset.loc[(dataset['Fare'] > 100) & (dataset['Fare'] <= 150), 'Fare']   = 3	1	1
data.loc[(data.Age.isnull()) & (data.Initial=='Mrs'), 'Age'] = 36	1	1
data_train['Name']	1	1
train.Survived.groupby(train.relatives)	1	1
df_test['Age'].fillna(mean_age)	1	1
data_df['Survived'] = data_df['Survived'].fillna(0).astype('int')	1	1
d_train['Survived']	1	1
"ans.to_csv(""submit_adb.csv"", index = False)"	1	1
updated_test_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Title'], axis=1) # Drop unused features	1	1
titanic_df.groupby(['Pclass'])['Fare'].mean()	1	1
X['dependent'] = np.add(X.SibSp, X.Parch)	1	1
test.apply(lambda x: isKid(x), axis=1)	1	1
df_full['NameFareSize'] = df_full[['LastName', 'FareOrig']].apply(lambda row: df_familygroup[(row[0], row[1])], axis=1)	1	1
res_df_solver_tol['Build_time_'+solver_list[i]] ,	1	1
data_copy.loc[data_copy.Embarked == 'Q', 'Embarked'] = 2	1	1
Z.isnull().sum()	1	1
full_set['Fare'][ full_set['Fare'].isnull() ] = 0.	1	1
"_df.loc[(_df.fare == 0.0) & (_df[""pclass""] == i), ""fare""] = val"	1	1
dataset['family_size'] = dataset['family_size'].map(family_mapping)	1	1
merged[['Group','Survived']].groupby(['Group'], sort=False).mean().plot.bar()	1	1
dataset.loc[dataset['Title'] == 'Mrs', 'Age'] = dataset.loc[dataset['Title'] == 'Mrs', 'Age'].fillna(medians.loc[medians['Title'] == 'Mrs']['Age'][3])	1	1
test_df.loc[test_df['Age'].isnull() == True]	1	1
X.shape[0]                  # number of training examples	1	1
train_test.shape	1	1
train_raw.head(5)	1	1
full['Fare'].fillna(full['Fare'].mean(), inplace = True)	1	1
test['Fare'].replace(0.0,94.28,inplace= True)	1	1
df_FULL['Embarked']= df_FULL['Embarked'].fillna(value=df_FULL['Embarked'].value_counts().index[0])	1	1
ax[1].set_title('Variation in Validation Data Accuracy w.r.t to Tolerance tol for different Solvers')	1	1
data_numerical.drop(categoric_type,axis=1)	1	1
raw_train_data.shape[0]	1	1
test['PassengerId'] = test_df['PassengerId']	1	1
train_origin.loc[(train_origin['pclass'] ==pclass) & (train_origin['embarked'].isin(['Q'])), ['fare']]	1	1
data2row['PassengerId'] == data1row['PassengerId'] and data2row['Survived'] == data1row['Survived']:	1	1
data.Personal_Titles_Mr.astype(np.uint8)	1	1
axes[1].set_title('the total count of Embarked for non-survived ')	1	1
Test_Master.loc[(Test_Master['Fare'] > 7.85) & (Test_Master['Fare'] <= 12.2), 'Fare'] = 2	1	1
sns.boxplot(x='Survived', y='SibSp', data=train, palette='hls')	1	1
dataset['Title'] = dataset['Title'].replace('Mr', 'Mr')	1	1
df_train.Embarked.fillna('S',inplace=True)	1	1
titanic_df.loc[titanic_df.Salutation == 'Miss', 'Sex'] = 'miss'	1	1
combine.fillna(0, inplace=True)	1	1
"submission.to_csv(""submissionxgboost2.csv"", index=False)"	1	1
np.median(gb_score)	1	1
dataset.loc[dataset['Fare'] > 384.247, 'Fare'] = 4	1	1
data_train_p.dropna().shape	1	1
"in [""Title"", ""TyTicket"", ""TyCabin"", ""Sex"", ""Embarked""]:"	1	1
data['Embarked'][data['Embarked'].isnull()]='S'	1	1
axes[1].scatter(df_train['Survived'], df_train['AgeFill'])	1	1
model_data.info()	1	1
acc_dtree.mean()	1	1
"train.groupby(""Pclass"").mean()['Fare'].plot(kind=""bar"",title=""Average Fare per Class"")"	1	1
age['Age'].std()	1	1
data_train['Fare_scaled'] = stdd.fit_transform(data_train['Fare'].values.reshape(-1,1),fale_scale_param)	1	1
final_df.sample(19)	1	1
X.items():	1	1
dataset['Embarked'] = dataset['Embarked'].fillna('Q')	1	1
"KNN_result[2][""best_score""]"	1	1
data.surname_Beckwith.astype('category')	1	1
df_data.loc[df_data.Ticket == tk, 'Fare']	1	1
master_df.apply(lambda x: sum(x.apply(lambda y: safe_isnan(y))), axis=0)	1	1
"model_data[""Title""] = model_data[""Title""].map(titles)"	1	1
full_data['Title'] = full_data['Name'].apply(lambda x: x.split(',')[1].split('.')[0])	1	1
tf.transpose(Z4)	1	1
submission_df.to_csv('2018-03-31_submission_5.csv', index = False)	1	1
dataset.loc[dataset['FamilySize']==1,'IsAlone']=1	1	1
df[['Survived']].groupby([df['Parch']]).mean().plot.bar()	1	1
test['Sex'] = test['Sex'].replace(['male','female'], [0,1])	1	1
train_df_tickets.add(t_val)	1	1
"test.drop([""PassengerId"",""Name"",""Ticket"",""Embarked"",""AgeGroup""], axis=1)"	1	1
dataset.loc[ dataset['Family_members'] == 0, 'Family_members_Band'] = 0	1	1
all.drop('PassengerId',inplace=True,axis=1)	1	1
data['Title'] = data['Name'].apply(lambda x: str(x).split(',')[1].split('.')[0])	1	1
model_results['AdaBoost'] = np.mean(scores)	1	1
np.mean(X_train['log_fare'])	1	1
train.loc[train['Fare']<=50,'FareCategorical'] = 0	1	1
pre.to_csv('pre.csv')	1	1
"test_df.drop(""Age*Class"", axis=1).copy()"	1	1
"result.to_csv(""predicted_survival.csv"", index=False)"	1	1
"df_train.drop(""Survived"",axis=1)"	1	1
train.groupby(['FamilySize'])[['Survived']].mean()	1	1
train_test['Ticket_Letter'] = train_test['Ticket'].str.split().str[0]	1	1
test.loc[test['Fare']<10,'CheapTickets'] = 1	1	1
"dataset_train[""PassengerId""]"	1	1
acc_dict['mix'] = acc	1	1
"Accuracy[""naiveBayes""] = accuracyBNB"	1	1
"test[""Pclass_1""] = test[""Pclass""] == 1"	1	1
"train_data.loc[train_data.Sex == ""female"", 'Sex'] = 2"	1	1
train_num['Survived'][idxs_mask]	1	1
data.drop('Title', axis = 1, inplace = True)	1	1
age.Age.mean()	1	1
df_pred.to_csv('pred.csv', index = False)	1	1
"train_data[[""Embarked"", ""Survived""]].groupby(['Embarked'],as_index=False).mean()"	1	1
test['Age'].replace({np.nan:0},inplace=True)	1	1
validationPCA['Survived']	1	1
train.groupby('Cabin').mean()	1	1
"ax[0].set_title(""Number of Passengers By Pclass"")"	1	1
complete_data[1].copy()	1	1
model.add(Dense(1, activation='tanh'))	1	1
df[['family_size', 'Survived']].groupby('family_size').mean().plot()	1	1
p_id.iloc[ntrain:].values	1	1
df_train['Age'] =  df_train.apply(impute_age, args =(medians_by_parch,) , axis=1)	1	1
"submission_DF.to_csv(""submission.csv"", index=False)"	1	1
"train_data['Family'] =  train_data[""Parch""] + train_data[""SibSp""]"	1	1
df.loc[(df['Age']>21)&(df['Age']<=30),'Age_band']=2	1	1
train_df.drop('PassengerId', inplace=True, axis=1)	1	1
testTitanic.head()	1	1
all_data.isnull().sum().sort_values(ascending=False)/len(all_data)	1	1
df['Cabin'] =  pd.Categorical(df['Cabin'])	1	1
"sns.boxplot(x=""Pclass"", y=""Fare"", hue=""Survived"", data=cleanedtrain, palette=""Paired"")"	1	1
test.to_csv( 'titanic_preds_1.csv' , index = False )	1	1
row['Sex'] == 'female' and row['SibSp'] < 2:	1	1
"merged[""FamilySize""] = merged[""SibSp""]+merged[""Parch""]+1"	1	1
best_adaboost.best_params_.get('base_estimator__max_features'),	1	1
data.boxplot(column='Ticket_numerical')	1	1
traind['Ticket'].head(30)	1	1
Df['Return'] = np.log(Df['PREMIN'].shift(-1) / Df['PREMIN'])*100	1	1
train['FareScaled'] = train['Fare'] / (train['Parch'] + train['SibSp'])	1	1
dataset.notnull()	1	1
"combined_df[""Title""] = combined_df['Title'].map(title_mapping)"	1	1
y_train.mean(), y_test.mean()	1	1
df_train['log_fare'] = df_train['fare'].map(lambda f: 0 if f == 0.0 else np.log(f))	1	1
dataset['sex'] = dataset['sex'].map({'male': 0, 'female': 1})	1	1
df_full['Title']=df_full.apply(replace_titles, axis=1)	1	1
df_train['TicketEncoded'] = le_ticket.transform(df_train['TicketEncoded'])	1	1
"sns.boxplot(x=""Survived"",y=""Age"",data=train_data,ax=ax2)"	1	1
"data_full[""NameLength""] = data_full[""Name""].apply(lambda x: len(x))"	1	1
acc_lr_list.append((Y_cv_lr==Y_cv).value_counts(True)[True])	1	1
train_df[['Embarked','Pclass', 'Sex', 'Survived']].groupby(['Embarked', 'Pclass','Sex']).count()	1	1
df3['Pclass']	1	1
combined.set_index('PassengerId',drop=True,inplace=True)	1	1
row['Age'] <= 15 and row['SibSp'] <= 2.5:	1	1
test4['IsAlone'].loc[test4['FamilySize'] > 1] = 0	1	1
clfs.append(xgbc_best_result)	1	1
full_train.drop(columns=['EmbarkedBin_Code', 'CabinBin_Code', 'Ticket_Count'])	1	1
train_df.drop('Cabin', 1)	1	1
test_means[1]	1	1
dataset.loc[dataset['Fare']<=70.0,'Fare'] = 1	1	1
"row[""Sex""] == ""male"":"	1	1
data['Title'] = data['Name'].map(lambda x: re.search(', (.+?) ', x).group(1))	1	1
pclass_data.append(4 - pdata)	1	1
first_class_titanic_df.head(25)	1	1
train_data['Age_Group'].hist(bins=70)	1	1
"train.loc[train[""Embarked""]==""Q"",""Embarked""] =2"	1	1
"test[""Sex""] = test[""Sex""].apply(lambda x: target[x])             #Categorizing Sex variable"	1	1
class_fare.loc[3,:] = df[df['Pclass'] == 3]['Fare_per_ticket_member'].describe()	1	1
"train.sort_values(""Fare"",ascending=False)"	1	1
ship['Title'].loc[ship['Title'] == 'Ms'] = 'Mrs'	1	1
"train.drop([""PassengerId"", ""Name"", ""Age"", ""Ticket"", ""Cabin"", ""Fare""], axis=1)"	1	1
test.head(100)	1	1
test_data['Single'] = test_data.FamilySize.apply(lambda x: 1 if x == 1 else 0)	1	1
ax[1].set_title('Pclass and Age vs Survived')	1	1
data_frame.Sex.astype(int);	1	1
data.loc[(data['Age'] > 13) & (data['Age'] <= 48), 'Age'] = 1	1	1
"df_data[""Alone""] = np.where(df_data['SibSp'] + df_data['Parch'] + 1 == 1, 1,0) # People travelling alone"	1	1
X['Sex'] = enc.fit_transform(X['Sex'])	1	1
full_models['set2']['cat_attrs'] = ['Pclass', 'Sex']	1	1
test_file['Age']=test_file['Age'].fillna(test_file['Age'].median())	1	1
df_test['Embarked'].fillna(common_embarked, inplace=True)	1	1
fare['Fare'] = pd.qcut(combined_df.Fare.fillna( combined_df.Fare.mean() ), 5, labels=False)	1	1
pipelines.append(('ScaledXGBC', Pipeline([('Scaler', RobustScaler()),('XGBC', xgb.XGBClassifier(max_depth=3, n_estimators=300, learning_rate=0.05))])))	1	1
dset.copy()	1	1
"test[""Fare""].fillna(test[""Fare""].mean(),inplace=True)"	1	1
train_X['FamilySize'] = train_X ['SibSp'] + train_X['Parch'] + 1	1	1
dataset.drop(['PassengerId','Cabin','Ticket','Fare','Parch','SibSp'],axis=1)	1	1
df1['Sex']=df1['Sex'].apply(discrete)	1	1
train_df.apply(count_missing, axis=0)	1	1
Test.drop('Fare',axis=1)	1	1
"training_dataset.drop(columns=[""Survived""]).append(test_dataset).drop(columns=[""PassengerId"", ""Ticket""])"	1	1
MLA_compare.loc[row_index, 'MLA Parameters']=str(alg.get_params())	1	1
classifier.add(Dense(units = first_layer_units, kernel_initializer = 'uniform', activation = 'relu', input_dim = 7))	1	1
dataset_df['Ticket'].describe()	1	1
data.Embarked.fillna(data.Embarked.mode()[0],inplace=True)	1	1
trim_data['Sex'] = trim_data['Sex'].map( {'female': 0, 'male': 1} ).astype(int)	1	1
curated_data.loc[(train['Age'] > 35) & (train['Age'] <= 60), 'Age'] = 3,	1	1
df_test_features['Embarked']=df_test_features['Embarked'].fillna(median)	1	1
test['TicketfirstL'] = test['Ticket'].apply(lambda x: str(x)[0])	1	1
"dataset.loc[(dataset[""Age""] > 35) & (dataset[""Age""] <= 40.5), ""Age""] = 4"	1	1
enc.transform(noagedf_titles).toarray() # encode titles as 5D one-hot vectors	1	1
"train[""AgeCategory""] = train[""AgeCategory""].map({""Child"" : 0, ""Adult"" : 1, ""Old"" : 2, ""MissingData"" : 3})"	1	1
test_df.loc[i,'Title'] ='Don'	1	1
poly3.transform(eval_x)	1	1
y_test.dropna().shape	1	1
test['Embarked'] = test['Embarked'].apply(lambda x: replacement.get(x))	1	1
"train[""FamilleMember""] = train[""FamilleMember""].map({0:'0',1:'1',2:'2',3:'3',4:'>4',5:'>4',6:'>4',7:'>4',10:'>4'})"	1	1
x_copy.apply(TitleAttributeAdder.__extract_title, axis=1)	1	1
df_test.fillna(method='ffill')	1	1
glbl['n_iter'] = 100        # how many search iterations	1	1
"train[""Cabin""].fillna(train.groupby(""Pclass"")[""Cabin""].transform(""median""), inplace = True)"	1	1
df_test['Survived']=0	1	1
"dataset[""Age""].fillna(dataset[""Age""].median(),inplace=True)"	1	1
df_test.drop(['PassengerId','not_alone', 'Male_P3','Parch'], axis = 1).copy()	1	1
"df_test[""NameBand""] = pd.cut(df_test[""NameLen""], bins=5, labels = [1,2,3,4,5])"	1	1
res_df.to_csv('res.csv',index = False)	1	1
tmp_scaled.assign(Embarked_S=tmp['Embarked_S'])	1	1
titanic_train_data.loc[titanic_train_data.Cabin.str[0] == 'C', 'Cabin'] = 3	1	1
df.describe(include=['O']) # S is the most common	1	1
df_train.Age.fillna(df_train.Age.median(),inplace=True)	1	1
"train[""Sex""].value_counts()/len(train)"	1	1
test.loc[:, feature_columns]	1	1
df2['is_mr']=[1 if i == 'Mr.' else 0 for i in df2.title]	1	1
"i[""Ticket""]"	1	1
df_cp.loc[:, 'Embarked'] = df_cp['Embarked'].fillna('S')	1	1
X['Title']=X['Name'].apply(lambda x: extractTitleFromName(x)).astype('category')	1	1
df.reset_index(level=0, inplace=True)	1	1
train.drop(['Survived', 'CategoricalAge', 'CategoricalFare'], axis = 1)	1	1
axes[0].set_title('Dead/alive stats for female groups')	1	1
"testData[""Survived""] = dtree.predict(test)"	1	1
combined_df['Prefix'] = combined_df['Prefix'].replace(prefix_mapping)	1	1
df_train['fareband'] = pd.cut(df_train['individualticket'], bins, labels=group_names)	1	1
"combined[""family_size""] = 1"	1	1
"train_test.loc[train_test[""Fare""].isnull()]       # loc 行的索引号"	1	1
sex_lab.transform(df_t.Sex)	1	1
titanic_parch_group.apply(get_survival_ratio)	1	1
df['Embarked'] = df['Embarked'].astype('category')	1	1
"test.loc[test[""Sex""] == ""male"", ""sex_c""] = ""0"""	1	1
df.drop(['Name','Age','Ticket','Fare','Cabin'],axis=1,inplace=True)	1	1
dataset['Title'] = label.fit_transform(dataset['Title'])	1	1
"data[""Name""] = data[""Name""].str.replace(""."","";"")"	1	1
test_bfe.insert(0,'Bias',1)	1	1
data_test_dummy['Fare_scaled'] = std_scaler.fit_transform(reshape_Fare, std_scaler_Fare)	1	1
dfte['Ticket']	1	1
df['Title'] = df['Name'].map(lambda x:x.split(',')[1].split('.')[0].strip())	1	1
data.loc[data['Fare'] > mean_fare[3], 'FareStage'] = 4	1	1
dataset_df.groupby('Connected_Survival')[['Survived']].mean().round(3)	1	1
dataset.loc[ dataset['Family_members'] == 6, 'Family_members_Band'] = 4	1	1
"all_data_del[""Fare""]=all_data_del[""Fare""].fillna(mean_Fare)"	1	1
titanic_test_dataframe.info()	1	1
TR.append(TE)	1	1
"df_train[""target_name""] = df_train[""Survived""].map({0: ""Not Survived"", 1: ""Survived""})"	1	1
"dataset_train[""SibSp""].value_counts()"	1	1
"data_combined[""Fare""][data_combined[""Survived""] == 0]"	1	1
dataTrain.drop('Name', axis = 1, inplace = True)	1	1
sns.boxplot(y=var, data=train, color= colour[i])	1	1
model.add(Dense(4, input_dim=3, activation='relu'))	1	1
"X_test_data[""Age""] = imp.transform(X_test_data[""Age""].reshape(-1, 1))"	1	1
dataset['Age']=dataset['Age'].fillna(dataset[dataset['Title']==t]['Age'].mean()).astype(int)	1	1
train['Deck'] = [classify_cabin(x) for x in train.CabinType]	1	1
data_test['FareGroups'] = pd.qcut(data_test['Fare'], 4, labels = [1, 2, 3, 4])	1	1
"total[[""Embarked"", ""Pclass"", ""Fare""]].groupby([""Embarked"", ""Pclass""]).count()"	1	1
train['F4'] = np.array(train['CategoricalFare'] == 4).astype(np.int32)	1	1
df_results['val_score'] = validation_acc	1	1
train_df.groupby(['Sex','Title'])['Title'].aggregate('count').unstack(fill_value=0)	1	1
data_combined['Singleton'] = data_combined['FamilySize'].map(lambda s: 1 if s == 1 else 0)	1	1
for_fittin.drop({'Embarked.nan'}, axis=1)	1	1
test_df.loc[mr_mask, 'Age'] = test_df.loc[mr_mask, 'Age'].fillna(test_df[test_df.Title == 'Mr'].Age.mean())	1	1
train.drop(['PassengerId'], axis = 1) # 인덱스 필요없음	1	1
ada_feat_red.transform(ada_red_test)	1	1
"data[""Parch""],"	1	1
data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().round(2)	1	1
titanic_df.loc[dr_mask, 'Age'] = titanic_df.loc[dr_mask, 'Age'].fillna(titanic_df[titanic_df.Title == 'Dr'].Age.mean())	1	1
"train_Pre.drop(""Survived"", axis=1)"	1	1
"df_test[""TicketRef""] = df_data[""TicketRef""][891:]"	1	1
test['Port'] = test['Embarked'].map({'S':0,'C':1,'Q':2}).astype('int')	1	1
df.sample(5) # Display some random rows	1	1
ndf.drop('Survived', inplace = True, axis = 1)	1	1
row['Status']	1	1
data['Fare'] = data['Fare'].fillna(data['Fare'].dropna().median()).astype(int)	1	1
raw_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()	1	1
dataset['Title'] = dataset['Title'].replace(['Capt','Col','Countess','Don',                                                'Dr','Jonkheer','Lady','Major',                                                'Rev','Sir'],'Rare')	1	1

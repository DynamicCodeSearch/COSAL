Statement	Count	# unique files
table(full$Sex, full$Title)	61	33
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)	36	33
full$Title[full$Title == 'Mlle']        <- 'Miss'	33	30
full$Title[full$Title == 'Mme']         <- 'Mrs'	33	30
full$Title[full$Title == 'Ms']          <- 'Miss'	33	30
scale_x_continuous(breaks=c(1:11)) +	27	25
par(mfrow=c(1,2))	26	21
full$Fsize <- full$SibSp + full$Parch + 1	23	22
full$Title[full$Title %in% rare_title]  <- 'Rare Title'	23	21
sum(is.na(full$Age))	22	14
test$Survived <- NA	22	22
data.frame(a,b,c,d)	21	6
full[1:891,]	19	18
DT[, mod := factor(mod)]	18	1
full  <- bind_rows(train, test) # bind training & test data	18	18
full[892:1309,]	18	17
mutate(Rank = paste0('#',dense_rank(desc(Importance))))	17	16
output = list(pred = ynew, fit = mod)	16	1
summary(train)	16	15
full$Child[full$Age < 18] <- 'Child'	15	14
table(full$Child, full$Survived)	15	14
full$Child  <- factor(full$Child)	15	14
mean(ans_rf == train$Survived)	14	12
guides(color = guide_legend(override.aes = list(size = 10, linetype = 1), nrow = 1))	14	1
dat = data.table(X)	13	1
full[1044, ]	13	12
full$Family <- paste(full$Surname, full$Fsize, sep='_')	13	12
filter(PassengerId != 62 & PassengerId != 830)	13	12
full$Child[full$Age >= 18] <- 'Adult'	13	12
ans_rf[i] = as.integer(rf.fitted[[i]]) - 1	12	12
train$Survived	12	10
ans_rf = rep(NA,891)	12	12
table(title)	12	6
table(ans_rf)	12	12
geom_jitter(aes(colour = factor(Survived))) +	12	6
cat(paste('We have <b>', nlevels(factor(full$Surname)), '</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.'))	12	11
full[c(62, 830), 'Embarked']	12	11
full[full$Pclass == '3' & full$Embarked == 'S', ],	11	10
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))	11	10
full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)	11	10
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'	11	10
full$FsizeD[full$Fsize == 1] <- 'singleton'	11	10
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)	11	10
full$SibSp + full$Parch	11	6
full$FsizeD[full$Fsize > 4] <- 'large'	10	9
dat[, y := factor(Y, levels = 0:1)]	10	1
summary(full)	10	9
"list.files(""../input"")"	10	10
"rocs.cutoffs = lapply(1:length(fits), function(i) data.table(t(coords(rocs[[i]], x = cutoffs, input = ""threshold"", ret = c(""threshold"", ""specificity"", ""sensitivity"", ""accuracy"")))))"	9	1
rocs = lapply(1:length(fits), function(i) roc(actuals ~ fits[[i]]))	9	1
"output = c(output, ""AUC"" = as.numeric(auc(roc(Ytest ~ ynew))))"	9	1
mice_output$Age, freq=F, main='Age: MICE Output',	9	8
table(train$Survived)	9	9
cutoffs = c(-Inf, seq(0.01, 0.99, 0.01), Inf)	9	1
"geom_vline(xintercept = cuts, color = ggcolor(length(cuts)), size = 1, linetype = ""dashed"") +"	9	1
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)	9	5
full_mod[892:1309,]	9	6
DT = data.table(DT[value < Inf])	9	1
ynew = as.numeric(ynew >= cutoff)	9	1
full$Age <- mice_output$Age	9	8
full$Mother <- factor(full$Mother)	8	7
full$Mother <- 'Not Mother'	8	7
full$Age, freq=F, main='Age: Original Data',	8	7
imp = data.table(regressor = rownames(imp), imp / 100)	8	1
vars$optVariables	8	1
dim(test)	8	6
imp[, regressor := factor(regressor, levels = unique(regressor))]	8	1
full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))	8	6
print(rf_model)	8	8
table(full$Mother, full$Survived)	8	7
test$Survived <- 0	7	5
full$Title[full$Title %in% royalty]  <- 'Royalty'	7	7
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree=100, importance=TRUE)	7	7
full$Title[full$Title %in% officer]  <- 'Officer'	7	7
fea$Embarked <- as.factor(fea$Embarked)	7	7
royalty <- c('Dona', 'Lady', 'the Countess','Sir', 'Jonkheer')	7	7
guides(fill = guide_legend(override.aes = list(size = 10, linetype = 1), nrow = 1))	7	1
mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf')	7	6
X[, Survived := NULL]	7	1
full$Embarked[c(62, 830)] <- 'C'	7	6
d <- data.frame(Age = age[1:891], Survived = train$Survived)	7	6
output[, mod := i]	7	1
nrow(train)	7	7
fea$Sex      <- as.factor(fea$Sex)	7	7
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'	7	6
full$Cabin[1:28]	7	6
mod.name = 1:nrow(doe)	7	1
data[,features]	7	7
n = length(age)	7	7
"g <- g + scale_fill_discrete(name=""Survived"", labels=c(""no"", ""yes""))"	7	1
cor.dat = data.table(model.matrix(~., cor.dat)[,-1])	7	1
full$Age	7	6
officer <- c('Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev')	7	7
full$Age, freq=F, main='Before Replacement',	7	6
strsplit(full$Cabin[2], NULL)[[1]]	7	5
d <- data.frame(fare = names(rate),rate)	6	6
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'Small'	6	6
full$FsizeD  <- factor(full$FsizeD)	6	6
true_accuracy=sum(chose_DEV==TRUE)/length(chose_DEV)          #calculates the accuracy	6	2
submission <- data.frame(PassengerId = test$PassengerId)	6	6
tapply(full[1:891,]$Survived,full[1:891,]$Child, mean)	6	6
test$Sex	6	6
"print(paste0(""Accuracy : "",f1))"	6	1
train$Survived <- as.factor(train$Survived)	6	6
fea$Age[is.na(fea$Age)] <- -1	6	6
solution <- data.frame(Survived = prediction, PassengerID = test$PassengerId)	6	6
options(warn = -1)	6	6
summary(model)	6	6
d <- data.frame(family = family[1:891],Survived = train$Survived)	6	6
full$Sex  <- factor(full$Sex)	6	6
full$Title  <- factor(full$Title)	6	6
tapply(full[1:891,]$Survived,full[1:891,]$Title,mean)	6	6
full$Fare[1044] <- median(full[full$Pclass == '3', ]$Fare, na.rm = TRUE)	6	6
full$Pclass  <- factor(full$Pclass)	6	6
tapply(d$Survived,d$family,mean)	6	6
fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm=TRUE)	6	6
full  <- bind_rows(train, test) # test + train	6	6
train$Pclass	6	6
tapply(full[1:891,]$Survived,full[1:891,]$Fsize,mean)	6	6
title.age <- aggregate(full$Age,by = list(full$Title), FUN = function(x) median(x, na.rm = T))	6	6
freq$frequency<-freq$n/nrow(train)*100;	6	1
test$Pclass	6	6
tapply(full$Age, full$Title,median, na.rm=TRUE)	6	6
submission$Survived <- predict(rf, extractFeatures(test))	6	6
tapply(full[1:891,]$Survived,full[1:891,]$FsizeD,mean)	6	6
rate <- tapply(d$Survived,cuts,mean)	6	6
full[full$Pclass == '3', ],	6	6
tapply(train$Survived,train$Pclass,mean)	6	6
full$Embarked  <- factor(full$Embarked)	6	6
d <- data.frame(Cabin = cabin[1:891],Survived = train$Survived)	6	6
tapply(full$Age, full$Pclass,median, na.rm=TRUE)	6	6
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)	6	6
train$Sex	6	6
full1[,-10]	6	6
prop.table(table(train$Survived))	6	6
train$Pclass <- as.factor(train$Pclass)	6	6
dim(train)	6	6
full$Embarked[c(62, 830)] <- 'S'	6	6
full_mod[1:891,]	6	6
tapply(d$Survived,d$title,mean)	6	6
tapply(full[1:891,]$Survived,full[1:891,]$Pclass,mean)	6	6
rate <- tapply(train$Survived,cuts,mean)	6	6
table(cabin)	6	6
full$FsizeD[full$Fsize > 4] <- 'Big'	6	6
d = sum(ans_rf ==0 & f.survived == 0)	6	6
print(confusion_matrix_train)	6	1
full[,-9]	6	6
tapply(train$Survived,train$Sex,mean)	6	6
par(mfrow=c(2,2))	6	3
"fea$Embarked[fea$Embarked==""""] = ""S"""	6	6
"scale_x_continuous(name=""Age"",limits=c(0, 81))"	6	6
"scale_x_continuous(name=""Fare"", limits=c(0, 270), breaks=c(0, 40, 80, 120, 160, 200, 240, 280))"	6	6
tapply(full[1:891,]$Survived,full[1:891,]$Sex,mean)	6	6
tapply(full$Embarked, full$Pclass,median, na.rm=TRUE)	6	6
full$FsizeD[full$Fsize == 1] <- 'Alone'	6	6
"alpha = 1/3, pch = 20, cex = 1, col = c(""cornflowerblue"", ""tomato""),"	6	1
"full[is.na(full$Age), ""Age""] <- apply(full[is.na(full$Age), ] , 1, function(x) title.age[title.age[, 1]==x[""Title""], 2])"	6	6
Ytest = as.numeric(as.character(Ytest))	6	1
d <- data.frame(title = title[1:891],Survived = train$Survived)	6	6
tapply(d$Survived,d$Cabin,mean)	6	6
summary(test)	6	4
d2 <- data.frame(age = names(rate),rate)	6	6
a = sum(ans_rf ==1 & f.survived == 1)	6	6
b = sum(ans_rf ==1 & f.survived == 0)	6	6
X = data.table(train)	6	1
tapply(train$Survived,train$Embarked,mean)	6	6
c = sum(ans_rf ==0 & f.survived == 1)	6	6
summary(mod.dat)	6	1
tapply(full$Fare, full$Pclass,median, na.rm=TRUE)	6	6
mean(ans_svm == train$Survived)	5	5
imp.avg = imp[, .(value = mean(value)), by = regressor]	5	1
d = sum(ans_svm ==0 & f.survived == 0)	5	5
"title[i] = strsplit(lastname,"". "")[[1]][1]"	5	5
c = sum(ans_svm ==0 & f.survived == 1)	5	5
mean(ans_dt == train$Survived)	5	5
b = sum(ans_svm ==1 & f.survived == 0)	5	5
"mod.dat[, c(""Name"", ""Ticket"", ""PassengerId"") := NULL]"	5	1
ans_logit = rep(NA,891)	5	5
full$Fare[1:891]	5	5
full <- bind_rows(train, test)	5	5
d = sum(ans_logit ==0 & f.survived == 0)	5	5
b = sum(ans_dt ==1 & f.survived == 0)	5	5
confusion_matrix_train <- table(train$Survived, train_pred)	5	1
ans_svm[i] = as.integer(svm.fitted[[i]]) - 1	5	5
table(embarked)	5	5
"s = strsplit(cabin[i],"" "")"	5	5
n = length(full$Survived)	5	5
test$passengerid,	5	1
table(ans_svm)	5	5
mean(ans_logit == train$Survived)	5	5
b = sum(ans_logit ==1 & f.survived == 0)	5	5
c = sum(ans_dt ==0 & f.survived == 1)	5	5
full$Embarked	5	5
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)	5	4
summary(results)	5	5
test$PassengerId	5	4
nrow(test)	5	5
summarise(count = n())	5	2
full$Cabin	5	5
cabin[i] = length(s[[1]])	5	5
age[i] = sample(na.omit(full$Age),1)	5	5
full$Fare[892:1309]	5	5
table(ans_logit)	5	5
ans_svm = rep(NA,891)	5	5
a = sum(ans_dt ==1 & f.survived == 1)	5	5
n = length(cabin)	5	5
d = sum(ans_dt ==0 & f.survived == 0)	5	5
table(ans_dt)	5	5
mod.dat = data.table(train)	5	1
c = sum(ans_logit ==0 & f.survived == 1)	5	5
title = rep(NA,n)	5	5
d <- data.frame(Embarked = embarked[1:891], Survived = train$Survived)	5	5
ans_dt = rep(NA,891)	5	5
a = sum(ans_logit ==1 & f.survived == 1)	5	5
a = sum(ans_svm ==1 & f.survived == 1)	5	5
test$Pclass <- as.factor(test$Pclass)	4	4
guides(color = guide_legend(override.aes = list(size = 10, linetype = 1), nrow = 2))	4	1
test$Embarked <- as.factor(test$Embarked)	4	4
combined[892:1309,]	4	4
test$Survived[test$Sex == 'female'] <- 1	4	3
filter(!is.na(Age)) %>%	4	3
combi[892:1309,]	4	4
train_full[DEV_ind,]	4	2
select(survived, age, pclass, sex, sibsp, fare, parch) %>%	4	1
X$Survived	4	1
full[1044,]	4	4
dat[, y := Ytrain]	4	1
mod.dat = data.table(test)	4	1
full_data[1:891,]	4	4
for(j in c(1,2,3))	4	1
"form = paste(""y ~"", rhs)"	4	1
dat = data.table(Xtrain)	4	1
ans_svm_predict = rep(NA,418)	4	4
"preProc = c(""center"", ""scale"", ""knnImpute""),"	4	1
Sex = factor(Sex),	4	2
DEV_ind=sample(nrow(train_full), floor(nrow(train_full)/2)) # gets indices of half the training data	4	2
ynew = as.numeric(predict(mod, newdata = data.table(newX))$posterior[,2])	4	1
x$pfare[which(x$Fare>10)]<-.6	4	1
cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', full[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', full[c(62, 830), 'Fare'][[1]][2], '</b>respectively and their classes are<b>', full[c(62, 830), 'Pclass'][[1]][1], '</b>and<b>', full[c(62, 830), 'Pclass'][[1]][2], '</b>. So from where did they embark?'))	4	3
nrow(my_solution)	4	4
x$pfare[which(x$Fare>30)]<-1	4	1
print(model)	4	2
combi$Name <- as.character(combi$Name)	4	4
"mod.dat[, c(""Name"", ""Ticket"", ""Cabin"", ""PassengerId"") := NULL]"	4	1
combi[1:891,]	4	4
test$Survived <- rep(0, 418)	4	4
n = length(embarked)	4	4
options(warn=-1)	4	4
combined[1:891,]	4	4
x$pfare<-0	4	1
ans_svm_predict[i] = as.integer(svm_predict[[i]]) - 1	4	4
summary(train$Age)	4	4
select(Fare)	4	1
colSums(is.na(full))	4	2
train_full[-DEV_ind,]	4	2
table(full$Title)	4	2
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'	4	4
"lastname = strsplit(full$Name[i],"", "")[[1]][2]"	4	4
table(ans_svm_predict)	4	4
summary(data)	4	3
grid.arrange(p1, p2, nrow = 1)	4	1
names(combo)	4	2
optimized_accuracy=sum(chose_SELF==TRUE)/length(chose_SELF)	4	2
full$PassengerId[is.na(full$Fare)]	4	4
data[!is.na(data$Age),]	4	4
mods = foreach(i = 1:nrow(doe)) %do%	4	1
New_Data[892:1309,]	3	2
input_df[1:500, ]	3	2
train_new_LeViet$Cabin <- substr(train_new_LeViet$Cabin,1,1)	3	2
test_new_Leviet$PassengerId	3	2
New_Data$Name <- as.character(New_Data$Name)	3	2
print(rf_model_val)	3	3
"train_new_LeViet$Cabin[train_new_LeViet$Cabin == """"] <- ""H"""	3	2
"test_new_Leviet$Cabin[test_new_Leviet$Cabin == """"] <- ""H"""	3	2
combi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)	3	3
"combi$Embarked[c(62,830)] = ""S"""	3	3
New_Data$Title <- sub(' ', '', New_Data$Title)	3	2
traintest.data[1:891,]	3	1
ans_rf_val = rep(NA,311)	3	3
df$Survived <- factor(df$Survived, labels = c('No', 'Yes'))	3	3
output[, name := doe$name[i]]	3	1
sum(is.na(train$Age))	3	2
"train_new_LeViet$Cabin[train_new_LeViet$Cabin == ""T""] <- ""H"""	3	2
combined=combined[,-c(11,12,4,9)]	3	3
test_new_Leviet$Survived <- NULL	3	2
traintest.data[892:1309,]	3	1
data[1:train.stop,]	3	1
"X.all = data.table(train[,!""Survived""])"	3	1
dim(DstTrain)	3	3
combi$Title <- factor(combi$Title)	3	3
tmp[tmp$freq<10,1]	3	1
cm$table	3	3
full_data$Title <- gsub('(.*, )|(\\..*)', '', full_data$Name)	3	3
New_Data$Age[is.na(New_Data$Age)] <- predict(predicted_age, New_Data[is.na(New_Data$Age),])	3	2
New_Data$Title[New_Data$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Col', 'Jonkheer', 'Rev', 'Dr', 'Master')] <- 'Mr'	3	2
"test<-data.table(read.csv(""../input/test.csv""))"	3	3
"cat(""*************************"")"	3	3
actuals = as.numeric(as.character(Y))	3	1
X = as.matrix(X)	3	1
train_new_LeViet$Cabin <- factor(train_new_LeViet$Cabin)	3	2
combi$Embarked <- factor(combi$Embarked)	3	3
ChiSqTest$statistic,	3	3
table(full_data$Sex, full_data$Title)	3	2
New_Data$Title[New_Data$Title %in% c('Lady', 'the Countess', 'Mlle', 'Mee', 'Ms')] <- 'Miss'	3	2
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})	3	3
train$Child[train$Age < 18] <- 1	3	3
ans_rf_val[i] = as.integer(rf_model_val.fitted[[i]]) - 1	3	3
train$Embarked <- as.factor(train$Embarked)	3	3
LeViet_Solution <- data.frame(PassengerId = vector_passengerid, Survived = LeViet_prediction)	3	2
summary(df_train)	3	1
test[Sex=='male',gender:=0]	3	3
print(rf_model_train)	3	3
traintest.data <- bind_rows(train.data, test.data)	3	1
New_Data$Title[New_Data$PassengerId == 797] <- 'Mrs' # female doctor	3	2
group_by(Survived) %>%	3	3
actuals = as.numeric(as.character(train$Survived))	3	1
final[,.(PassengerId,Survived)]	3	3
test_new_Leviet$Cabin <- substr(test_new_Leviet$Cabin,1,1)	3	2
combi$FamilySize <- combi$SibSp + combi$Parch + 1	3	3
test_new_Leviet$Cabin <- factor(test_new_Leviet$Cabin)	3	2
full_data[892:1309,]	3	3
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])	3	3
combined$Survived <- factor(combined$Survived)	3	3
test[Sex=='female',gender:=1]	3	3
table(data$Embarked)	3	2
dat[, y := Y]	3	1
d<-data.frame(PassengerId = test$PassengerId, Survived = ans_svm_predict)	3	3
test$Sex <- as.factor(test$Sex)	3	3
"raw_train <- read.csv(file=""../input/train.csv"", header=TRUE, sep="","", na.strings=c("""")) #891 reg"	3	2
final[V1>=0,Survived:=1]	3	3
table(ans_rf_val)	3	3
input_df[501:891, ]	3	2
summary(Titanic_data)	3	1
New_Data$family_size <- New_Data$SibSp + New_Data$Parch + 1	3	2
full_mod[581:891,]	3	3
test[153,]	3	2
vdf$Survived <- predict(model, vdf, na.action = na.pass)	3	3
"New_Data$Embarked[c(62,830)] = ""S"""	3	2
full$Sex <- as.factor(full$Sex)	3	3
fit$confusion	3	2
train[Sex=='male',gender:=0]	3	3
count = n(),	3	1
"full$deck[full$Pclass == 1] <- ""A"""	3	1
full$Title[full$Title == 'Ms'] <- 'Miss'	3	3
Ticket_Digit = nchar(Ticket),	3	2
data$Fare[which(is.na(data$Fare))]<-mean(data$Fare[which(!is.na(data$Fare))])	3	2
combined$Age=ifelse(is.na(combined$Age),median(na.omit(combined$Age)),combined$Age)	3	3
final<-cbind(test,predictOne)	3	3
full_mod[1:580,]	3	3
New_Data$Title <- factor(New_Data$Title)	3	2
nrow(combined)	3	3
mean(ans_rf_train == train$Survived)	3	3
summary(titanic)	3	2
"New_Data$Title <- sapply(New_Data$Name, FUN=function(x) {strsplit(x, split=""[,.]"")[[1]][2]})"	3	2
summary(train$Fare)	3	3
combined$Pclass <- factor(combined$Pclass)	3	3
filter(!is.na(Cabin_Deck_i2) & !is.na(Ticket_Digit) & !is.na(Title))	3	1
suppressMessages(attach(titanic))	3	1
summary(my_glm)	3	2
"df$Pclass <- factor(df$Pclass, labels = ""class"")"	3	3
full$Title[full$Title == 'Mlle'] <- 'Miss'	3	3
DstTrainTest$Survived <- as.factor(DstTrainTest$Survived)	3	3
final[V1<0,Survived:=0]	3	3
train[Sex=='female',gender:=1]	3	3
Sys.sleep(1)	3	3
New_Data[1:891,]	3	2
"data$Embarked[which(is.na(data$Embarked))]<-""S"""	3	2
"vdf$Pclass <- factor(vdf$Pclass, labels = ""class"")"	3	3
df <- cbind(df,tmp[,-1])	3	1
New_Data$Embarked <- factor(New_Data$Embarked)	3	2
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'	3	3
summary(LeViet_Tree)	3	2
combined$Fare=ifelse(is.na(combined$Fare),median(na.omit(combined$Fare)),combined$Fare)	3	3
table(ans_rf_train)	3	3
fits = foreach(i = 1:length(mods)) %do%	3	1
colSums(is.na(combined))	3	3
New_Data$Title[New_Data$Title %in% c('Dona')] <- 'Mrs'	3	2
famIDs[famIDs$Freq <= 2,]	3	3
cm$byClass[['F1']]	3	3
ans_rf_train = rep(NA,580)	3	3
New_Data$Fare[1044] <-median(New_Data$Fare, na.rm = TRUE)	3	2
table(TitanicResult$Survived)	3	3
write.csv(vdf[, c('PassengerId', 'Survived')], file = 'submission.csv', row.names = FALSE)	3	3
print(fit.rf)	3	3
train$Title <- as.factor(train$Title)	3	2
"train<-data.table(read.csv(""../input/train.csv""))"	3	3
"submission_df <- test_df[, c(""PassengerId"", ""Survived"")]"	3	2
prop.table(table(train$Sex, train$Survived))	3	3
Predict_Class = ifelse(predict_Probs >= 0.5,1,0)	3	3
mean(ans_rf_val == valid$Survived)	3	3
"X.trim = data.table(X.all[, !c(""Sexmale.EmbarkedS"", ""Pclass3.Fare"")])"	3	1
"preProcess = c(""center"", ""scale""),"	3	1
combi$Title <- sub(' ', '', combi$Title)	3	3
vdf$Survived <- ifelse(vdf$Survived == 'Yes', 1, 0)	3	3
combined$Survived,	3	3
ans_rf_train[i] = as.integer(rf_model_train.fitted[[i]]) - 1	3	3
Y = as.numeric(as.character(X$Survived))	3	1
summary(df[, c('Pclass', 'Survived')])	3	3
Sex = as.factor(Sex),	3	2
table(train$Sex, train$Survived)	3	3
sapply(train,function(x) sum(is.na(x)))	3	3
summary(whole.data)	3	1
full$FsizeD[full$FamilySize >=4 ] <- 'large'	2	2
which(is.na(combi$Embarked))	2	1
titanic[,-toRm]	2	1
combi$FamilyID2 <- as.character(combi$FamilyID2)	2	2
titanic2$Child<-0	2	1
summary(fit)	2	2
"data$Age[is.na(data$Age) & data$Title=="" Miss""]<-meanMiss"	2	2
"meanDr<-mean(data_sub[data_sub$Title=="" Dr"",]$Age)"	2	2
group_by(Parch, Survived) %>%	2	1
nrow(new_titanic)	2	1
select(Survived_F, everything())	2	1
"train_full$Cabin_num[train_full$Cabin_num=='']=""-1"" #this changes all the '' cells to -1 char"	2	2
test.data3$FamilySizeCategory <- factor(test.data3$FamilySizeCategory)	2	1
combo$Fare[fare_na_index]<-mean(vec,na.rm = TRUE)	2	2
train.data3$Title <- factor(train.data3$Title)	2	1
df<-subset(combo,Pclass=3)	2	2
test.data3$Mother <- factor(test.data3$Mother)	2	1
test.data3$Embarked <- factor(test.data3$Embarked)	2	1
"mutate(Agegroup = ifelse(Age<=15,""kids"",ifelse(15<Age & Age<=60,""adults"",ifelse(Age>60,""elderly"", ""NA""))))"	2	1
train_nn$NumSex <-  (train_nn$NumSex - min(train_nn$NumSex)) /	2	2
mean(vec,na.rm = TRUE)	2	2
"paste(""AUC LM: "",auc_lm)"	2	1
full <- bind_rows(train,test)	2	2
x$ppclass[which(x$Pclass=='2')]<-.6	2	1
"my.pred[""Age"",] = 0"	2	1
traintest.data$FamilySizeCategory[traintest.data$FamilySize == 1] <- 'Single'	2	1
train_full$Cabin_num[!is.finite(train_full$Cabin_num)]=-1 #finaly all NA are turned to -1	2	2
combi$FamilyID2 <- factor(combi$FamilyID2)	2	2
test2[complete.cases(test2$Fare),]	2	2
colSums(is.na(train))	2	2
"train$Sex[which(train$Sex==""female"")]<-1"	2	2
combi[!is.na(combi$Age),],	2	2
test.data3$Sex <- factor(test.data3$Sex)	2	1
full[is.na(full$Fare),]	2	2
combi$Child <- factor(combi$Child)	2	2
train$farediv<-0	2	1
train_nn$Age <-  (train_nn$Age - min(train_nn$Age)) /	2	2
full_data$Title[full_data$Title == 'Mme']         <- 'Mrs'	2	2
"cat(""accuracy: "", accuracy, ""\n"")"	2	1
sum(is.na(train_full$Cabin_num))	2	1
test$Survived<-0	2	2
levels(test$title) = levels(train$title)	2	2
l_cabin<-length(combo$Cabin)	2	2
"my.pred[""Cabin"",] = as.numeric(colnames(my.pred) %in% cabin.regressors)"	2	1
rep(bias.y*diff(y.range),struct[val+1]),	2	1
test$Cabin_num=as.numeric(test$Cabin_num)  #the coaertion would eliminate any deck letters without numbers turning them to NA	2	2
Passenger.woman <- c('Mrs', 'Miss', 'Mme', 'Ms', 'Mlle')	2	2
data[1:891,]	2	2
corr_data$Survived <- as.numeric(corr_data$Survived)	2	2
titanic$Age[is.na(titanic$Age)]<- predict(fit_age,titanic[is.na(titanic$Age),])	2	1
combined <- rbind.data.frame(train,data=test)	2	2
Nobility.woman <- c('the Countess', 'Lady', 'Dona')	2	2
full<-bind_rows(train,test)	2	2
traintest.data$Child[traintest.data$Age >= 18] <- 'Adult'	2	1
age.data[-index, ]	2	1
dat = cbind(Y, X)	2	1
select(Sex, Survived, Parch) %>%	2	1
train_full[inTrain,]	2	2
sum(is.na(test$Age))	2	1
output = as.numeric(predict(mods[[i]], newdata = X)$posterior[,2])	2	1
got_right <- with(val_df, pred_survived == Survived)	2	1
combo$Parch<-NULL	2	2
summary(full$Fsize)	2	1
train_Pclass1 <- filter(train, Pclass == 1)	2	2
sapply(raw_train,function(x) sum(is.na(x)))	2	2
ynew = as.numeric(ynew >= mods.list$svm$cutoff)	2	1
train$Child <- 0	2	2
train$Pclass<- as.factor(train$Pclass)	2	2
"test$Survived <- rep(""None"")"	2	2
freq$frequency<-freq$n/nrow(train);	2	1
combi$FamilyID2 <- combi$FamilyID	2	2
sapply(train,function(x) summary(is.na(x)))	2	2
"trainset<-read.csv(""../input/train.csv"",header = T,sep = "","",na.strings = c(""NA"",""""))"	2	2
test$Cabin_deck=substring(test$Cabin, 1, 1)	2	2
"full_join(test_data %>% group_by(title) %>% summarise(n=n()), by=""title"") %>% print()"	2	1
full_data$Title[full_data$Title == 'Mlle']        <- 'Miss'	2	2
"data$Age[is.na(data$Age) & data$Title=="" Ms""]<-meanMs"	2	2
data=bind_rows(train, test)	2	1
final.data3 <- data.frame(PassengerId = test.data2$PassengerId, Survived = rf_prediction)	2	1
"train_nn <- raw_train[ , c(""Pclass"", ""NumSex"", ""Age"", ""SibSp"", ""Parch"", ""NumEmbarked"", ""Fare"")]"	2	2
train$Mother<- 0	2	2
my.rf = function(Y, X, newX, ...)	2	1
"test$Cabin_deck[test$Cabin_deck=='']=""MiSS"""	2	2
combo$Cabin<-as.character(combo$Cabin)	2	2
"mutate(Embarked = ifelse(Embarked == """", NA, Embarked)) %>%"	2	1
Passenger.man <- c('Mr')	2	2
"test$Cabin_num=substring(test$Cabin, regexpr(""(\\d)+"", test$Cabin),regexpr(""(\\d)+"", test$Cabin)+2)"	2	2
"data$Age[is.na(data$Age) & data$Title=="" Mr""]<-meanMr"	2	2
table(combi$Title)	2	2
combo[1:891,]	2	2
x$psex<-0	2	1
test.data3$Survived <- factor(test.data3$Survived)	2	1
sum(diag(matrizconf))/sum(matrizconf)	2	1
"combo$Embarked<-replace(combo$Embarked,combo$Embarked=="""",""S"")"	2	2
train.data$Title[train.data$Title == 'Mlle']        <- 'Miss'	2	1
survival<-titanic[which(titanic$Survived==1),]	2	1
"train$Cabin[which(!train$Cabin=="""")]<-1"	2	2
val_df[val_df$PassengerId == 503, ]	2	1
full_data$Title[full_data$Title == 'Ms']          <- 'Miss'	2	2
table(train$Child,train$Survived)	2	2
levels(test$Sex)	2	2
"cor.dat = data.table(mod.dat[,!""Cabin""])"	2	1
mod.dat[, log.Age := log(Age)]	2	1
ynew = as.numeric(ynew >= mods.list$pen$cutoff)	2	1
combo$Name<-NULL	2	2
ynew = as.numeric(predict(mod, newdata = newX))	2	1
print(head(train))	2	2
"keep.dat = c(""Survived"", gsub(""`"", """", imp.avg[value >= 0.4, regressor]))"	2	1
train_Pclass1$Fare,	2	2
ynew = as.numeric(ynew >= mods.list$gbm$cutoff)	2	1
train$Child<- 0	2	2
Nobility.man <- c('Jonkheer', 'Sir', 'Don')	2	2
"drage<-mean(train$Age[which(train$Name==""Dr."")],trim=.5,na.rm=TRUE)"	2	2
sum(is.na(train_full$title))	2	1
data[892:1309,]	2	2
mod.dat[, Age := NULL]	2	1
levels(test$Embarked)	2	2
train_nn$Pclass <-  (train_nn$Pclass - min(train_nn$Pclass)) /	2	2
train.data3$FamilySizeCategory <- factor(train.data3$FamilySizeCategory)	2	1
"master <- data.combined[which(str_detect(data.combined$Name,""Master."")),]"	2	2
options(stringsAsFactors = FALSE)	2	2
levels(train$Embarked)	2	2
group_by(Embarked) %>%	2	2
levels(train$Cabin)	2	1
output[, gamma := doe$gamma[i]]	2	1
corr_data$FsizeD <- as.numeric(corr_data$FsizeD)	2	2
"dup_names <- as.character(data.combined[which(duplicated(data.combined$Name)),""Name""])"	2	2
nrow(train) # number of training observations	2	2
"doe = data.table(name = c(""all"", ""trim""))"	2	1
"train$Cabin[which(train$Cabin=="""")]<-0"	2	2
train_full$title= regmatches(train_full$Name, m)	2	2
hidden = c(15, 15),	2	1
data.combined$SibSp <- as.factor(data.combined$Parch)	2	2
test$title= factor(test$title)	2	2
train1 = train[ -c(1, 4, 6, 9, 11, 12)]	2	2
"mister <- data.combined[which(data.combined$Sex == ""male""),]"	2	2
train$Family<- NA	2	2
select(Survived, Parch) %>%	2	1
"print(list.files(""../input""))"	2	1
test$Fare[is.na(test$Fare)]<-mean(test3$Fare)	2	2
fitted.results <- ifelse(fitted.results > 0.5,1,0)	2	2
full$FsizeD[full$FamilySize< 4 & full$FamilySize > 0] <- 'small'	2	2
l_age <- length(combo$Age)	2	2
"testset<-read.csv(""../input/test.csv"",header = T,sep = "","",na.strings = c(""NA"",""""))"	2	2
sum(is.na(train_full$family_size))	2	1
diff(x.range)*bias.x[val],	2	1
"my.pred[""log.Age"",] = as.numeric(colnames(my.pred) %in% log.age.regressors)"	2	1
corr_data$Pclass <- as.numeric(corr_data$Pclass)	2	2
test$Cabin_num[!is.finite(test$Cabin_num)]=-1 #finaly all NA are turned to -1	2	2
combo$SibSp<-NULL	2	2
train.data3$Mother <- factor(train.data3$Mother)	2	1
"mrage<-mean(train$Age[which(train$Name==""Mr."")],trim=.5,na.rm=TRUE)"	2	2
"ynew = as.numeric(attr(predict(mod, newdata = data.table(newX), probability = TRUE), ""probabilities"")[,2])"	2	1
nrow(train_df)	2	1
"new.dat[, c(""Age"", ""Fare"", ""SibSp.2"", ""Sexmale.Fare"", ""Pclass3.Age"", ""Pclass3.Fare"") := NULL]"	2	1
train$Survived <- train1$Survived	2	2
table(full_data$Title)	2	2
prop.table(table(train$Sex))	2	1
table(full$familyID)	2	1
sum(is.na(train_full$Pclass))	2	1
new.dat[, rescale.Pclass3.Age := rescale(Pclass3.Age, to = c(0, 1), from = range(train$Pclass3.Age))]	2	1
traintest.data$Mother <- 'Not Mother'	2	1
metrics = c('accuracy')	2	2
data$Pclass=as.factor(as.character(data$Pclass))	2	1
solution <- data.frame(PassengerId = test$PassengerId, Survived = prediction)	2	2
"meanMr<-mean(data_sub[data_sub$Title=="" Mr"",]$Age)"	2	2
dat[, rescale.Sexmale.Fare := rescale(Sexmale.Fare, to = c(0, 1), from = range(train$Sexmale.Fare))]	2	1
Pclass = factor(Pclass),	2	1
full$Embarked<-as.factor(full$Embarked)	2	2
"train[which(train$Parch>0 & train$Age>18 & train$Name==""Mrs.""),c(""Mother"")]<-1"	2	2
new.dat[, rescale.SibSp.2 := rescale(SibSp.2, to = c(0, 1), from = range(train$SibSp.2))]	2	1
combi$FamilyID <- factor(combi$FamilyID)	2	2
"train_full$Cabin_num=substring(train_full$Cabin, regexpr(""(\\d)+"", train_full$Cabin),regexpr(""(\\d)+"", train_full$Cabin)+2)"	2	2
ynew = as.numeric(compute(mod, new.dat)$net.result)	2	1
which(is.na(combi$Fare))	2	2
summary(log.mod.trim)	2	1
new.dat[, rescale.Pclass3.Fare := rescale(Pclass3.Fare, to = c(0, 1), from = range(train$Pclass3.Fare))]	2	1
"data.combined[which(data.combined$Cabin==""""),""Cabin""] <- ""U"""	2	2
"sprintf(""the optimized accuracy of the randomly sampled tree on trainig set is: %s"", optimized_accuracy)"	2	2
"sprintf(""the true accuracy of the random forest on DEV set is: %s"", true_accuracy)"	2	2
accuracy=sum(chose==TRUE)/length(chose)	2	2
for(i in 1:nrow(data.combined))	2	2
layer_dense(units = 256, activation = 'relu', input_shape = dim(train_nn)[2]) %>%	2	2
levels(train$Pclass)	2	2
"meanMaster<-mean(data_sub[data_sub$Title=="" Master"",]$Age)"	2	2
mutate(company = ifelse(SibSp+Parch>=1,1,0))	2	1
"ynew = as.numeric(predict(mod, newdata = data.table(newX), type = ""prob"")[,2])"	2	1
"data$Title<-gsub(""\\..+"","""",data$Title)"	2	2
test.data$Title[test.data$Title == 'Ms']          <- 'Miss'	2	1
raw_train$Survived	2	2
train[ind,]	2	1
"rhs = paste(names(new.dat), collapse = "" + "")"	2	1
aggregate(train[,2], list(train$farediv), mean)	2	1
levels(test$Embarked) = levels(train$Embarked)	2	2
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'	2	2
data.combined$Cabin <- as.character(data.combined$Cabin)	2	2
filter(!is.na(Fare)) %>%	2	1
par(mfrow=c(3, 3))	2	1
"data$Age[is.na(data$Age) & data$Title=="" Dr""]<-meanDr"	2	2
train$Survived <- factor(train$Survived, levels=c(1,0))	2	2
full_data$Embarked[c(62, 830)] <- 'C'	2	2
sum(is.na(train_full$Embarked))	2	1
test$family_size=(test$SibSp+test$Parch)	2	2
"levels(train$Survived) <- c(""Survived"", ""Died"")"	2	2
table(data.combined$Survived)	2	2
data[892:1309,-12]	2	2
dat[, rescale.Fare := rescale(Fare, to = c(0, 1), from = range(train$Fare))]	2	1
train.data3$Embarked <- factor(train.data3$Embarked)	2	1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test_pred)	2	1
"ynew = predict(mod, data.table(newX), type = ""response"")"	2	1
raw_train$NumSex <- as.numeric(factor(raw_train$Sex,labels=c(1,2)))	2	2
corr_data$Title <- as.numeric(corr_data$Title)	2	2
train_full$family_size=(train_full$SibSp+train_full$Parch)	2	2
CabinClass = factor(CabinClass),	2	1
aggregate(Survived ~ Child + Sex, data=titanic2, FUN=function(x) {sum(x)/length(x)})	2	1
full$Child <- 'Adult'	2	2
mutate(Survived_F = as.factor(Survived)) %>%	2	1
"cor.dat = data.table(mod.dat[,!""Survived""])"	2	1
train$farediv[which(train[,10]>10)]<-1	2	1
data$Name<-as.character(data$Name)	2	2
ynew = as.numeric(predict(mod, newdata = Xtest)$posterior[,2])	2	1
test_one$Survived <- 0	2	1
new.dat[, rescale.Sexmale.Fare := rescale(Sexmale.Fare, to = c(0, 1), from = range(train$Sexmale.Fare))]	2	1
table(DataBind$Sex,DataBind$Title)	2	1
train$Survived<- as.factor(train$Survived)	2	2
test.data$FamilySize <- test.data$SibSp + test.data$Parch + 1	2	1
"meanMs<-mean(data_sub[data_sub$Title=="" Ms"",]$Age)"	2	2
titanic[!complete.cases(titanic$Fare),]	2	1
train_full$Cabin_deck=factor(train_full$Cabin_deck)	2	2
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'	2	2
data[data$title %in% rare, 'title']='rare'	2	1
data$deck=as.factor(sapply(as.character(data$Cabin), function(x) strsplit(x,NULL)[[1]][1])) # Deck variable	2	1
data.combined$SibSp <- as.factor(data.combined$SibSp)	2	2
"data$Title<-gsub(""^.+,"","""",data$Name)"	2	2
test.data3$Title <- factor(test.data3$Title)	2	1
sum(is.na(train_full$Fare))	2	1
data$Sex <- as.factor(data$Sex)	2	2
"test.data$SurvivedGender[test.data$Sex == ""female""] <- 1"	2	1
x$ppclass[which(x$Pclass=='1')]<-1	2	1
val_df$pred_survived <- as.numeric(glm_predictions > .5)	2	1
train$Family[i]<-train$SibSp[i]+train$Parch[i]+1	2	2
got_wrong <- with(val_df, pred_survived != Survived)	2	1
test.data3$Child <- factor(test.data3$Child)	2	1
age.data[index, ]	2	1
test.data$Title[test.data$Title == 'Mme']         <- 'Mrs'	2	1
"mrsage<-mean(train$Age[which(train$Name==""Mrs."")],trim=.5,na.rm=TRUE)"	2	2
data$Embarked=as.factor(as.character(data$Embarked))	2	1
allData[is.na(allData$Age),]	2	1
my.gbm = function(Y, X, newX, ...)	2	1
Embarked = as.factor(Embarked),	2	1
full$FsizeD[full$FamilySize == 0] <- 'singleton'	2	2
data.combined$ticket.letter <- as.factor(tick)	2	2
dup_names <- data.combined[which(data.combined$Name %in% dup_names),]	2	2
my.lda = function(Y, X, newX, ...)	2	1
data$Survived <- as.factor(data$Survived)	2	2
dat[, rescale.Pclass3.Fare := rescale(Pclass3.Fare, to = c(0, 1), from = range(train$Pclass3.Fare))]	2	1
"names(submit)<-c(""PassengerId"",""Survived"")"	2	2
full$Title[full$Title == 'Mme'] <- 'Mrs'	2	2
ynew = as.numeric(ynew >= mods.list$lda$cutoff)	2	1
classvec<-subset(combo,Pclass==class)	2	2
traintest.data$FamilySizeCategory[traintest.data$FamilySize > 4] <- 'Large'	2	1
summary(titanic$Age)	2	1
data.combined$MulitpleCabin <- as.factor(cht)	2	2
Age = round(mean(Age), 2),	2	1
train.data3$Survived <- factor(train.data3$Survived)	2	1
test=cbind(test,Survived)	2	2
"test$Cabin_num[test$Cabin_num=='']=""-1"" #this changes all the '' cells to -1 char"	2	2
"cht <- ifelse(str_detect(data.combined$Cabin,"" ""),""MC"",""SC"") #Mc for multiple cabins"	2	2
sum(is.na(train_full$Sex))	2	1
summarise(n=n()) %>%	2	1
sum(is.na(train_full$Age))	2	1
test$Age[is.na(test$Age)]=121	2	2
nrow(val) # number of training observations	2	2
smplSize <-floor(nrow(age.data) * .75)	2	1
train_nn$Parch <-  (train_nn$Parch - min(train_nn$Parch)) /	2	2
titanic[a1,]	2	1
train$FamilySize<-train$SibSp+train$Parch	2	2
Embarked = factor(Embarked),	2	1
misClasificError<-mean(Predict_lm_sig!= valid_clean$Survived)	2	1
hidden = vector(length = doe$layers[i])	2	1
combo$Pclass[i]	2	2
mod.dat = cbind(Survived = mod.dat$Survived, cor.dat)	2	1
data$Embarked <- as.factor(data$Embarked)	2	2
"meanMrs<-mean(data_sub[data_sub$Title=="" Mrs"",]$Age)"	2	2
combo[892:1309,]	2	2
n_right <- sum(got_right, na.rm = TRUE)	2	1
"train$Pclass ~ train$Survived, main=""Passenger Survival by Class"","	2	2
"color=c(""#8dd3c7"", ""#fb8072""), shade=FALSE,  xlab="""", ylab="""","	2	2
"sprintf(""the optimized accuracy of the random forest on training set is: %s"", optimized_accuracy)"	2	2
select(age, pclass, sex, sibsp, fare, survived) %>%	2	1
train.data$FamilySize <- train.data$SibSp + train.data$Parch + 1	2	1
train.df$Survived <- as.factor(train.df$Survived)	2	1
corr_data$Embarked <- as.numeric(corr_data$Embarked)	2	2
my.pen = function(Y, X, newX, ...)	2	1
rep(diff(x.range)*bias.x[val]+diff(x.range)*line.stag,struct[val+1]),	2	1
"levels = c(""C"", ""Q"", ""S""),"	2	1
train$Child[train$Age >= 16] <- 'Adult'	2	2
train_nn$NumEmbarked <-  (train_nn$NumEmbarked - min(train_nn$NumEmbarked)) /	2	2
data$Title <- gsub('(.*, )|(\\..*)', '', data$Name)	2	2
miss_cols <- colnames(df_combined)[colSums(is.na(df_combined)) > 0]	2	1
levels(test$Cabin)	2	1
data$title=gsub('(\\..*)|(.*, )', '', data$Name) # Title variable	2	1
print(paste('Accuracy Logit Sig',1-misClasificError))	2	1
min.max[, .(min = min(value), max = max(value)), by = variable]	2	1
test_tbl <- tbl_df(read.csv('../input/test.csv', stringsAsFactors = FALSE))	2	2
data$Survived=as.factor(as.character(data$Survived))	2	1
x$pembarked[which(x$Embarked=='C')]<-1	2	1
train_accuracy=sum(chose_SELF==TRUE)/length(chose_SELF)	2	2
index <- sample(seq_len(nrow(age.data)), size = smplSize)	2	1
fact <- as.factor(substr(data.combined$Cabin,1,1))	2	2
bias.y*diff(y.range),	2	1
titanic[1:891,]	2	2
"train$Age[is.na(train$Age)&train$Name==""Miss.""]<-missage"	2	2
titanic[892:1309,]	2	2
fare_na_index <- which(is.na(combo$Fare))	2	2
test$Survived<-NA	2	2
sum(is.na(train_full$Cabin_deck))	2	1
"ynew = as.numeric(predict(mod, s = mod$lambda.min, newX, type = ""response""))"	2	1
geom_jitter(data=g1, aes(Pclass, Age, colour = factor(Survived))) +	2	1
raw_train[!is.na(raw_train$Embarked), ] # 712 reg	2	2
my.qda = function(Y, X, newX, ...)	2	1
sum(is.na(combined$Age))	2	1
"dat = cbind(""Y"" = Ytrain, Xtrain)"	2	1
"missage<-mean(train$Age[which(train$Name==""Miss."")],trim=.5,na.rm=TRUE)"	2	2
full$Surname	2	2
n_wrong <- sum(got_wrong, na.rm = TRUE)	2	1
guides(fill = guide_legend(override.aes = list(size = 10, linetype = 1), nrow = 2))	2	1
train$Child[train$Age < 16] <- 'Child'	2	2
train$Name = as.character(train$Name)	2	2
colSums(is.na(test))	2	2
summarise(n = n()) %>%	2	1
"levels(train$Pclass) <- c(""1st Class"", ""2nd Class"", ""3rd Class"")"	2	2
check.missing <- function(x) return(length(which(is.na(x))))	2	1
test$title= regmatches(test$Name, m)	2	2
loss<-titanic[which(titanic$Survived==0),]	2	1
print(list.files())	2	1
submit <- tbl_df(select(test_tbl,PassengerId))	2	1
Ticket_Alpha = as.factor(Ticket_Alpha),	2	1
combo$Embarked<-factor(x=combo$Embarked,labels=c(1,2,3))	2	2
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])	2	2
summary(train_full)	2	2
train_two$family_size <- train_two$SibSp + train_two$Parch + 1	2	1
rep(diff(x.range)*layer.x[val+1]-diff(x.range)*line.stag,struct[val+1]),	2	1
"tick <- ifelse(data.combined$Ticket == """","""",substr(data.combined$Ticket,1,1))"	2	2
levels(train$Sex)	2	2
combo$family<-combo$SibSp + combo$Parch	2	2
results.table[2,2] / (results.table[2,2] + results.table[1,2])	2	1
label_nn=as.matrix(label_nn)	2	2
names(train)	2	2
levels(test$Pclass)	2	2
"return(length(strsplit(string,"" "")[[1]]))"	2	2
train_nn$SibSp <-  (train_nn$SibSp - min(train_nn$SibSp)) /	2	2
mod.dat[, keep.dat, with = FALSE]	2	1
"table(train$Embarked, useNA = ""always"")"	2	2
raw_train$NumEmbarked <- as.numeric(factor(raw_train$Embarked,labels=c(1,2,3)))	2	2
data[factor_vars] <- lapply(data[factor_vars], function(x) as.factor(x))	2	1
"train$Age[is.na(train$Age)&train$Name==""Mrs.""]<-mrsage"	2	2
dat[, rescale.Age := rescale(Age, to = c(0, 1), from = range(train$Age))]	2	1
select(-Survived,-PassengerId,-Name,-Ticket,-Cabin) %>%	2	1
median_ages<-matrix(rep(0,6),nrow=2,ncol=3)	2	1
sapply(data,function(x){sum(is.na(x))})	2	2
traintest.data$Mother[traintest.data$Sex == 'female' & traintest.data$Parch > 0 & traintest.data$Age > 18 & traintest.data$Title != 'Miss'] <- 'Mother'	2	1
df$Fare	2	2
test.data$Title <- gsub('(.*, )|(\\..*)', '', test.data$Name)	2	1
train$Sex <- as.factor(train$Sex)	2	2
tuneGrid = data.frame(mtry = c(2, 3, 7)),	2	2
"data$Age[is.na(data$Age) & data$Title=="" Master""]<-meanMaster"	2	2
summarize(AvFare = mean(Fare))	2	1
ynew = as.numeric(ynew >= mods.list$qda$cutoff)	2	1
combo$Cabin[l]<-0	2	2
data.combined$title <- as.factor(title)	2	2
"combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="""")"	2	2
traintest.data$FamilySizeCategory[traintest.data$FamilySize > 1] <- 'Small'	2	1
Title = factor(gsub(' ','',Title)),	2	1
train$Embarked[is.na(train$Embarked)]<-'C'	2	2
traintest.data$Fare[1044] <- median(traintest.data$Fare, na.rm = TRUE)	2	1
combo$Sex <- factor(x=combo$Sex,labels = c(1,2))	2	2
train.data$Title <- gsub('(.*, )|(\\..*)', '', train.data$Name)	2	1
Y = factor(Y, levels = 0:1)	2	1
full[c(62,830),]	2	2
sum(diag(tt))/sum(tt)	2	1
new.dat[, rescale.Fare := rescale(Fare, to = c(0, 1), from = range(train$Fare))]	2	1
combo$Cabin<-as.numeric(combo$Cabin)	2	2
full$Title[full$Title %in% rare_title] <- 'Rare Title'	2	2
train$Name <- as.character(train$Name)	2	2
train.data3$Child <- factor(train.data3$Child)	2	1
my.svm = function(Y, X, newX, ...)	2	1
group_by(title) %>% summarise(n=n()) %>%	2	1
combo$Cabin[l]	2	2
"train[which(train$Age<14),c(""Child"")]<-1"	2	2
test1<-test[c(test$Embarked=='S'),]	2	2
full$FsizeD<-as.factor(full$FsizeD)	2	2
x$pembarked<-0	2	1
fitTest$test$confusion	2	1
results.table[2,2] / (results.table[2,2] + results.table[2,1])	2	1
"dat_all$Ticket %in% c(""2666"", ""230136""),"	2	1
group_by(Pclass,Embarked) %>%	2	1
test.data$Title[test.data$Title %in% rare_title]  <- 'Rare Title'	2	1
sum(is.na(train_full$Survived))	2	1
TitanicResult <- data.frame(PassengerId = DstTest$PassengerId, Survived = predictedval)	2	2
full[ind,]	2	1
data.combined[1:2,]	2	2
test1 = test[ -c(1, 3, 5, 8, 10, 11)]	2	2
full$Pclass <- as.factor(full$Pclass)	2	2
train_full$Cabin_deck=substring(train_full$Cabin, 1, 1)	2	2
tmp=count(as.character(data$title))	2	1
Survived = as.factor(Survived),	2	1
test2<-test1[c(test1$Pclass==3),]	2	2
train_nn=as.matrix(train_nn)	2	2
summary(train_df)	2	2
"train$Age[is.na(train$Age)&train$Name==""Mr.""]<-mrage"	2	2
test$Name=as.character(test$Name)	2	2
"train$Age[is.na(train$Age)&train$Name==""Master.""]<-masterage"	2	2
CabinClass = substr(Cabin,1,1),	2	1
summary(classifier)	2	1
train_nn$Fare <-  (train_nn$Fare - min(train_nn$Fare)) /	2	2
"cabin_code = factor(str_extract(Cabin, ""[A-Z]+"")),"	2	1
data$title=as.factor(data$title)	2	1
x$ppclass<-0	2	1
combo$Cabin[l]<-cabin_count	2	2
for (i in 1:7){train_nn[,i]=as.numeric(train_nn[,i])}	2	2
"misis <- data.combined[which(str_detect(data.combined$Name,""Miss."")),]"	2	2
"mutate(Cabin = ifelse(Cabin == """", NA, Cabin)) %>%"	2	1
print(val_df$pred_survived)	2	1
table(full_data$Embarked)	2	1
dat[, rescale.SibSp.2 := rescale(SibSp.2, to = c(0, 1), from = range(train$SibSp.2))]	2	1
"train$Sex[which(train$Sex==""male"")]<-0"	2	2
raw_train[!is.na(raw_train$Age), ] # 714 reg	2	2
train_full[-inTrain,]	2	2
dat[, rescale.Pclass3.Age := rescale(Pclass3.Age, to = c(0, 1), from = range(train$Pclass3.Age))]	2	1
corr_data$Child <- as.numeric(corr_data$Child)	2	2
mutate(age_minor = as.logical(age_minor))	2	1
corr_data$Sex <- as.numeric(corr_data$Sex)	2	2
train$Survived<-NULL	2	2
name <- as.character(name)	2	2
table(full$Embarked)	2	1
pMiss <- function(x){sum(is.na(x))/length(x)*100}	2	2
getwd()	2	2
options(warn=-1) # turn warnings off	2	2
"Title = substr(Name,unlist(gregexpr("","",Name)) + 2,unlist(gregexpr("","",Name)) + 4),"	2	1
my.nn = function(Y, X, newX, ...)	2	1
data_test$Parch <- NULL	2	1
"selected_features <- c(""Pclass"",""Age"",""Sex"",""Parch"",""SibSp"",""Fare"",""Embarked"")"	2	2
my.log = function(Y, X, newX, ...)	2	1
filter(Sex == 'male') %>%	2	1
"mises <- data.combined[which(str_detect(data.combined$Name,""Mrs"")),]"	2	2
"sprintf(""found a better model! with training accuracy: %s"", best_train)"	2	2
freq[,1:2];	2	1
table(total$Title)	2	1
"dat[, c(""Age"", ""Fare"", ""SibSp.2"", ""Sexmale.Fare"", ""Pclass3.Age"", ""Pclass3.Fare"") := NULL]"	2	1
"test_one$Survived[test_one$Sex == ""female""] <- 1"	2	1
combine$Age<-as.numeric(as.character(combine$Age))	2	1
training$Pclass <- as.factor(training$Pclass)	2	2
trainset<-trainset[,c(-1,-4,-9,-11)]	2	2
mutate(rate=n/sum(n) * 100)	2	1
full_data$Child[full_data$Age >= 18] <- 0	2	1
"my.library = list(""my.log"", ""my.pen"", ""my.lda"", ""my.qda"", ""my.gbm"", ""my.rf"", ""my.nn"", ""my.svm"")"	2	1
full[!complete.cases(full$Fare),]	2	1
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'	2	2
test.data$Title[test.data$Title == 'Mlle']        <- 'Miss'	2	1
NTicket$NAccompanied<-NTicket$NAccompanied-1	2	1
test$Cabin_deck=factor(test$Cabin_deck)	2	2
ynew = as.numeric(ynew >= mods.list$rf$cutoff)	2	1
sapply(full, function(full) sum(is.na(full)))	2	1
train.data$Title[train.data$Title == 'Mme']         <- 'Mrs'	2	1
combo$Age[i]<-mean_class(class_value)	2	2
train.data$Title[train.data$Title %in% rare_title]  <- 'Rare Title'	2	1
"train$Age[is.na(train$Age)&train$Name==""Dr.""]<-drage"	2	2
ynew = as.numeric(ynew >= mods.list$nn$cutoff)	2	1
train_full$title= factor(train_full$title)	2	2
summary(datamerging)	2	1
summary(df_test)	2	1
combo$Ticket<-NULL	2	2
table(data[is.na(data$Age),]$Title)	2	2
"scale_fill_discrete(labels=c(""No"", ""Yes"")) +"	2	1
traintest.data$Embarked[c(62, 830)] <- 'C'	2	1
"train_full$Cabin_deck[train_full$Cabin_deck=='']=""MiSS"""	2	2
full$FamilySize<-full$SibSp+full$Parch	2	2
"cor.dat = data.table(mod.dat[,!""log.Age""])"	2	1
predicted_survival <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Title + Embarked + FamilySizeCategory + Child + Mother, data = train.data3)	2	1
"sprintf(""the true accuracy of the randomly sampled tree on DEV set is: %s"", true_accuracy)"	2	2
full$Title<-as.factor(full$Title)	2	2
"masterage<-mean(train$Age[which(train$Name==""Master."")],trim=.5,na.rm=TRUE)"	2	2
new.dat = data.table(newX)	2	1
new.dat[, rescale.Age := rescale(Age, to = c(0, 1), from = range(train$Age))]	2	1
"sprintf(""and true accuracy: %s"", best_true)"	2	2
full$Child[full$Age < 16] <- 'Child'	2	2
predictOne<-data.table(predict(modelOne,test))	2	2
"meanMiss<-mean(data_sub[data_sub$Title=="" Miss"",]$Age)"	2	2
Crew <- c('Master', 'Major', 'Capt', 'Col', 'Rev', 'Dr')	2	2
"title <- c(title,extract_title(data.combined[i,""Name""]))"	2	2
train_full$Cabin_num=as.numeric(train_full$Cabin_num)  #the coaertion would eliminate any deck letters without numbers turning them to NA	2	2
mean_age<-mean(classvec$Age,na.rm=TRUE)	2	2
traintest.data$Child[traintest.data$Age < 18] <- 'Child'	2	1
full  <- bind_rows(train, test)	2	2
"levels = c(""female"",""male""),"	2	1
combi$Sex <- as.factor(combi$Sex)	2	1
"data$Age[is.na(data$Age) & data$Title=="" Mrs""]<-meanMrs"	2	2
train.data$Title[train.data$Title == 'Ms']          <- 'Miss'	2	1
levels(test$Cabin_deck) = levels(train$Cabin_deck)	2	2
table(data.combined$Pclass)	2	2
data.combined$cabinLetter <- fact	2	2
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')	2	1
val_df$pred_survived <- ifelse(is.na(val_df$pred_survived), 0, val_df$pred_survived)	2	1
data[,removedColumnsIndex(data, columns.to.remove)]	2	1
x$score<-(x$psex*.56)+(x$pfare*.39)+(x$ppclass*.38)+(x$pembarked*.21)	2	1
full_data$Child[full_data$Age < 18] <- 1	2	1
train$Survived <- factor(train$Survived)	2	2
"cabin.regressors = c(""Fare"")"	2	1
trainset[,-2]<-data[1:891,-12]	2	2
ynew = as.numeric(ynew >= mods.list$log$cutoff)	2	1
train_full$Name=as.character(train_full$Name)	2	2
aggregate(train[,2], list(train$farediv), length)	2	1
full$Child[full$Age >= 16] <- 'Adult'	2	2
x$psex[which(x$Sex=='female')]<-1	2	1
train.data3$Sex <- factor(train.data3$Sex)	2	1
data.combined$family.size <- as.factor(Sib+PAr+1)	2	2
"ind<-which(train$Embarked=="""")"	2	1
else all.in<-which(x.names==all.in)	1	1
misses <- sapply(full[[column]], function(x) {return(x=='' | is.na(x))})	1	1
full$family[full$PassengerId %in% tmp$PassengerId[clusts==finalClusts[j]]] <- familyNum	1	1
"freq<-combine[,c(""tittle"",""Age"")]"	1	1
table(df$Survived,df$Sex) #See a summary mortality by gender	1	1
train_training <- subset(train, split == TRUE)	1	1
hyper_params = list( ntrees=c(10,100,1000, 10000), max_depth = seq(1,29,2) )	1	1
test[!is.na(test$Fare),]	1	1
"mergedData$title[mergedData$title == ""Ms""] <- ""Miss"""	1	1
"my_df$Name  <- stringr::str_replace_all(my_df$Name, ""(.*),.*\\. (.*)"", ""\\2 \\1"")"	1	1
age_compare[7,] = c('Test', 'Original', mean(tst_m[complete.cases(tst_m[,c('Age')]),c('Age')]), sd(tst_m[complete.cases(tst_m[,c('Age')]),c('Age')]))	1	1
names(log.mod.trim$coefficients)	1	1
test[factor_variables] <- lapply(test[factor_variables], function(x) as.factor(x))	1	1
train%>%group_by(Cabin)%>%count()->freq;	1	1
matrizconf<-table(predicted_train_glm_bin, train_glm$Survived)	1	1
full[Category %in% c('train', 'cv'), GlmSurvived := predict(glm_mdl, full[Category  %in% c('train', 'cv')], na.action=na.pass)]	1	1
"mice_mod <- mice(full[, c(""Pclass"", ""Fare"", ""Embarked"", ""SibSp"", ""Parch"", ""Survived"")], method='rf')"	1	1
head(freqs[order(-freqs)])	1	1
unique(DstTrain$Sex)	1	1
mean(age.data$Age[age.data$Parch==2]),	1	1
fullComb$FsizeD[fullComb$FamilySize > 4] <- 'large'	1	1
Miss[1:5,]	1	1
tot$Title[tot$Title %in% c('Dona', 'Dr', 'Mme', 'Mrs')]<-'Mrs'	1	1
"full$quote <- ""alone"""	1	1
whole.data[is.na(whole.data$Age) & whole.data$Title == i,'Age'] <- mean(whole.data[!is.na(whole.data$Age) & whole.data$Title == i,'Age'])	1	1
"train$Cabin_recorded[is.na(train$Cabin) |train$Cabin==''] <- ""No"""	1	1
classifier = xgboost(data = as.matrix(training[-8]), label = training$Survived, nrounds = 10)	1	1
test$Passengerid	1	1
"train$Sex[""Sex"" == ""male""] <- 1"	1	1
fill_Fare = mean(trn_m$Fare)	1	1
inps<-wts[grep('Input',row.names(wts)),grep('Hidden_2',colnames(wts)),drop=F]	1	1
"titanicTest <- read.csv(""../input/test.csv"", header = T, na.strings=c(""""))"	1	1
"survive <- sum(sub[, ""Survived""]) / nrow(sub)"	1	1
submit$Survived[is.na(submit$Survived)] <- 0	1	1
summarise(filter(train_tbl, is.na(Age), Survived == 1, Sex == 'male'), male_age_NA_Survived = n())	1	1
trainset_1$Survived<-as.character(trainset_1$Survived)	1	1
train <- subset(train,select=c(2,3,5,6,7,8,12))	1	1
full$Ticket_Num = as.numeric(as.factor(full$Ticket_Num))-1	1	1
table(full$NewCabin)	1	1
"my.pred[""log.Fare.1"",] = as.numeric(colnames(my.pred) %in% log.fare.1.regressors)"	1	1
prediction <- data.frame()	1	1
combined.df$FamilySize <- combined.df$SibSp + combined.df$Parch + 1	1	1
full_data$Sex <- as.factor(full_data$Sex)	1	1
mergedData$sharedCabin <- 'N'	1	1
mean(tst_m$Fare)	1	1
"summarise(filter(test_tbl, is.na(Age), Sex == ""male"", Parch == 0), bad_age = n())"	1	1
apply(trn_m,2,pMiss)[apply(trn_m,2,pMiss)>0]	1	1
test_new$Cabin <- substr(test_new$Cabin,1,1)	1	1
floor(mean(third_class[,6], na.rm = T))	1	1
train[, Category := 'train']	1	1
MissingAge$Title != 'Master', MedianS,	1	1
train <- tbl_df(train)	1	1
DstTrainClean$TitleType <- ifelse(DstTrainClean$Title %in% Nobility.woman, 'Nobility.woman','')	1	1
Missing_d <- function(x){sum(is.na(x))/length(x)*100} #USD to calculate % of missing data	1	1
quote <- mean(tmp$Survived[setdiff(1:nrow(tmp),j)], na.rm = T)	1	1
mod.in$n	1	1
if(i==length(struct)) layer.name<-'O'	1	1
ticket_freq$with_fam <- ifelse(ticket_freq$Freq >1, 1, 0)	1	1
mergedData$surname <- gsub(',.*', '', mergedData$Name)	1	1
titanic$Title[titanic$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'	1	1
full$Fare[is.na(full$Fare)] <- median(thirdClass$Fare, na.rm=T)	1	1
combine$age.fill<-ifelse(is.na(combine$Age),round(combine$mean.tittle,0),combine$Age)	1	1
"full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"",]$Fare, na.rm = TRUE)"	1	1
full$isFemale <- F	1	1
full$ticket_str <- as.factor(toupper(substring(full$ticket_str, 1, 1)))	1	1
colSums(apply(titanic, 2, is.na)) # just a check	1	1
full_data$familysize <- NA	1	1
train$Ticket_Num2[train$Ticket_Num <= 10000] <- 1	1	1
famIDS <- data.frame(table(combi$FamilyID))	1	1
full.data$Child[full.data$Age < 18] <- 'Child'	1	1
full$Fare2 = as.numeric(as.factor(full$Fare2))-1	1	1
rf.labels <- as.factor(training$Survived)	1	1
if(node.labs) text(x,y,paste(layer.name,1:layer,sep=''),cex=cex.val)	1	1
print(LR_model)	1	1
test$Fare[is.na(test$Fare)] <- mean_fare_NAN	1	1
whole.data[whole.data$flag == 0,]	1	1
table(predict(model,train,type = 'response') > 0.41, train$Survived)	1	1
names = as.character(full$Name) # Names as character so we can split the string	1	1
tot[tot$Fare==0,]	1	1
rf_model$confusion	1	1
titanic.train$TrainSet <- TRUE	1	1
combi$Mother[combi$Sex == 'female' & combi$Parch > 0 & combi$Age > 18 & combi$Title != 'Miss'] <- '1'	1	1
full$Age[is.na(full$Age) == TRUE & full$Sex == 'female'] <- median(Female_Ages$Age , na.rm =  TRUE)	1	1
cat('Running chi-squared tests on discrete independent variables...')	1	1
"names(embarkedImpact) <- c(""Survived"",""Embarked"",""Count"")"	1	1
apply(DstTrain,2,pMiss)	1	1
"keyvalue <- c(""Mr"",""Mrs"",""Mrs"",""Mrs"",""Miss"",""Miss"",""Miss"",""Master"",""Rev"",""Mr"",""Sir"",""Dr"",""Col"",""Col"",""Col"")"	1	1
"svm.list = list(""mod"" = svm.mod, ""cutoff"" = cuts[32])"	1	1
fullComb$FamilyID2 <- factor(fullComb$FamilyID2)	1	1
v <- c(0, 0, 0, 0, 0, 1, 1, 0, 0, 0)	1	1
preProcess = c('knnImpute', 'pca'),	1	1
TMPComplete$Age[1:30]	1	1
names(test)	1	1
"test$sex != ""male"", 1,"	1	1
"allData$Title[allData$Title == ""Mme""] <- ""Mrs"""	1	1
full$gender <- as.factor(full$Sex)	1	1
whichShadow = c(FALSE, FALSE, FALSE),	1	1
table(combi$Cabin, combi$Title)	1	1
tt2 = table(testdsn$Survived,predstest)	1	1
levels(train1$Ticket)	1	1
predictedTestSurvival <- rep(0,dim(test)[1])	1	1
data$Embarked <- as.character(data$Embarked)	1	1
combined.df$Embarked[c(62, 830)] <- 'C'	1	1
tst_m$HasFamily <- factor(ifelse(tst_m$FamilySize == 1, c(0), c(1)))	1	1
"Titanic_data_preprocess_pred=predict(Titanic_data_preprocess,Titanic_data[,c(""PassengerId"",""Age"",""SibSp"",""Parch"",""Ticket"",""Fare"")])"	1	1
surv_test_logi$Survived[test_logi_pred > .5] <- 1	1	1
data$Ticket2=as.factor(data$Ticket2)	1	1
train$isTrain <- TRUE	1	1
"freq<-as.data.frame(table(combine[,c(""tittle"",""Survived"")]))"	1	1
"usr <- par(""usr""); on.exit(par(usr))"	1	1
sum(is.na(train$Parch))	1	1
combined$Age <- mice_output$Age	1	1
"cat('Survival rate of Non-First Class + Cabin Satus of ', i-1, ': ', ((table(trn_m[,c(""NonFC_wCabin"", ""Survived"")])[i,]/sum(table(trn_m[,c(""NonFC_wCabin"", ""Survived"")])[i,]))[2])*100, '%\n')"	1	1
fulldata$Title=as.character(fulldata$Title)	1	1
train$Cabin2 <-substr(train$Cabin, 0, 1)	1	1
fullComb$FamilyID2[fullComb$FamilySize <= 3] <- 'Small'	1	1
table(df$Survived,df$SibSp) #siblings/spouse	1	1
return(ifelse(is.numeric(VECTOR),FALSE,TRUE))	1	1
"completeTrain$AgeRange[completeTrain$Age > 16 & completeTrain$Age <= 60] <- ""adult"""	1	1
median(Male_Ages$Age , na.rm =  TRUE)	1	1
levels(train$title)	1	1
allData$Embarked <- as.factor(allData$Embarked)	1	1
"DT = data.table(melt(lda.diag, id.vars = c(""stat"", ""name"", ""mod"")))"	1	1
tmp$`Actual Outcome` <- as.factor(tmp$`Actual Outcome`)	1	1
data[data$Embarked != '',]	1	1
train$Name <- NULL	1	1
if(is.logical(all.in)) all.in<-h.layer	1	1
full$Fare[1044] <- median(thirdclass$Fare , na.rm = TRUE)	1	1
test$Title <- gsub('(.*, )|(\\..*)', '', test$Name)	1	1
tst_imp_ds = tst_m[names(tst_m) %in% cols_for_age_imp]	1	1
combined$Status[combined$Age >= 18] <- 'Adult'	1	1
train%>%group_by(Pclass)%>%count()->freq;	1	1
"key <- c( ""Mr"",""Mrs""    ,""Lady""  ,""Mme"" ,""Ms"" ,""Miss"" ,""Mlle"",""Master"",""Rev"",""Don"",""Sir"",""Dr"",""Col"" ,""Capt"",""Major"")"	1	1
ynew = as.numeric(mod$SL.predict)	1	1
train[, Survived := factor(Survived)]	1	1
as.factor(train_data$Survived)->train_data$Survived	1	1
"ynew = predict(mod, data.table(Xtest), type = ""response"")"	1	1
data[[i]][inTrain_idx, , drop=F]	1	1
misClasificError<-mean(Predict_svm != valid_clean$Survived)	1	1
test$Age[is.na(test$Age)] = mean(test$Age, na.rm = T)	1	1
party_pred <- as.numeric(party_pred) - 1	1	1
data[,i] <- as.numeric(data[,i])	1	1
my_df$Ticket <- NULL	1	1
test.mice[, Cabin := factor(Cabin)]	1	1
Predictions<-data.frame(result)	1	1
tst_m[,disc_var]	1	1
test.nn[, rescale.Sexmale.Fare := rescale(Sexmale.Fare, to = c(0, 1), from = range(train$Sexmale.Fare))]	1	1
test_nn$Fare <-  (test_nn$Fare - min(test_nn$Fare)) /	1	1
full$Fare[1044] <- median(full[full$Pclass == 3 & full$Embarked == 'S', ]$Fare,na.rm = TRUE)	1	1
data_train$Survived <- as.factor(data_train$Survived)	1	1
"output[, stat := factor(stat, levels = c(""Min"", ""Q1"", ""Median"", ""Mean"", ""Q3"", ""Max""))]"	1	1
warning('Using best nnet model from train output')	1	1
Predict_lm<-ifelse(Predict_lm>0.5,TRUE,FALSE)	1	1
Error = (count/nrow(accuracy_tab))*100	1	1
data.frame(PassengerID = test$PassengerId, Survived = prediction)	1	1
full$FamilySize <- full$Parch + full$SibSp + 1	1	1
levels(preds)<-c(0,1)	1	1
names(CleanTotal)	1	1
submission <- data.frame(PassengerId = test_data$PassengerId, Survived = as.integer(test_data$prediction > 0.5))	1	1
filter(is.na(Cabin_Deck)) %>%	1	1
"test <- read.csv(""../input/test.csv"", na.strings=c(""NA"", """"))"	1	1
summary(raw.data)	1	1
par(mfrow=c(1, 2))	1	1
test[,1] #saving the passengerid column for later	1	1
full2$Survived = as.numeric(full2$Survived)	1	1
MedianC <- median(subset(total, Embarked == 'C')$Age , na.rm = TRUE)	1	1
"train_female<-subset(train_data,train_data$Sex==""female"")"	1	1
summary(nb_model)	1	1
fulldata$Age, freq=F, main='Age: Original Data',	1	1
sum(Titanic_train$Survived == 1 & Titanic_train$Sex == 'Male')	1	1
full$AgeCategory <- ifelse(full$Age<5,'Baby',ifelse(full$Age<18,'Child',ifelse(full$Age<60,'Adult','Sr.Citizen')))	1	1
"score_train <- data.frame(Prediction = predict(analysis, newdata = my.train.data, type = ""response""))"	1	1
test_nn=as.matrix(test_nn)	1	1
p1 + aes(x = Embarked, y = Fare, color = as.factor(Pclass)) +	1	1
train.edit<-combine[c(nrow(test)+1:nrow(train)),]	1	1
log.pred = function(Xtrain, Ytrain, Xtest, Ytest, negative, cutoff)	1	1
full[,c(6,10)] <- scale(full[,c(6,10)])	1	1
colSums(is.na(tst_m))	1	1
full_data$Title[full_data$Title %in% high_rank_male] <- 'High_rank_male'	1	1
my_df <- bind_rows(train, test)#format and wrangle data together at once	1	1
sum(train[,2])	1	1
"titanic.test <- titanic.test[,!(names(titanic.test) %in% c(""flag"", ""Survived""))]"	1	1
summary(DataBind)	1	1
"train$Age[train$Title == ""Mr."" & is.na(train$Age)] <- mean.mr"	1	1
DstTest$TitleType <- ifelse(DstTest$Title %in% Nobility.woman, 'Nobility.woman','')	1	1
table(DstTrain$Sex, DstTrain$Title)	1	1
"colnames(results_frame) <- c(""PassengerId"", ""Survived"")"	1	1
which(combi$Embarked == '')	1	1
titanic2$Child[titanic2$Age<18]<-1	1	1
total[is.na(total$Age), ]	1	1
"levels(target) <- c(""Not_Survive"", ""Survive"")"	1	1
columns.to.scale <- setdiff(colnames(data.cleaned), c('PassengerId', 'Survived'))	1	1
mutate(Survived = as.factor(Survived)) %>%	1	1
train_clean[,]	1	1
subset(df_combined, is.na(Fare) == TRUE)	1	1
"train$Age[grepl(""Mr\\."", train$Name) & is.na(train$Age)] = mean.mr"	1	1
d<-data.frame(PassengerId = test$PassengerId, Survived = predict_dt)	1	1
tst_m$Fare_orig = tst_m$Fare	1	1
levels(test$Name)	1	1
data_test$PassengerId <- NULL	1	1
knn_train$Mother <- factor(knn_train$Mother, labels = c('0','1'))	1	1
full$Survived <- as.factor(full$Survived)	1	1
age_compare[6,] = c('Val', 'Filled by MICE', mean(val_m$Age_comp_MICE), sd(val_m$Age_comp_MICE))	1	1
my_df$Group[my_df$Age >= 65] <- 'Elderly'	1	1
combi$QuotedName <- as.factor(combi$QuotedName)	1	1
testData[, predictorVar]	1	1
lda.diag = foreach(i = 1:nrow(doe)) %do%	1	1
"scale_x_discrete(labels = c(""F"",""M"")) +"	1	1
full.data[factor_vars] <- lapply(full.data[factor_vars], function(x) as.factor(x))	1	1
cTest$Embarked <- as.factor(cTest$Embarked)	1	1
summary(as.factor(train$Sex))	1	1
dft$logfare[is.na(dft$Fare)]= mean(log( dft$Fare[dft$Fare>0]), na.rm=TRUE  )	1	1
allData$Sex <- as.factor(allData$Sex)	1	1
tsg<-table(train$Sex,train$Survived)	1	1
for (i in 1:7){test_nn[,i]=as.numeric(test_nn[,i])}	1	1
print(accuracy)	1	1
"dat_all[dat_all$cat==""test"",]"	1	1
full[1044,]   # View complete information of obbseravation which has missing Fare value	1	1
trainset$Survived,	1	1
mods.list$nn = nn.list	1	1
"glmnet_model <- train(formula, method = ""glmnet"", tuneGrid = expand.grid(alpha = 0:1,lambda = seq(0.0001, 1, length = 20)), data = data, trControl=myControl)  # elastic net"	1	1
test$Fare[153] <- median(train$Fare, na.rm = TRUE)	1	1
combined$Mother <- factor(combined$Mother)	1	1
accuracy <- list()	1	1
"gbm.list = list(""mod"" = gbm.mod, ""cutoff"" = cuts[4])"	1	1
my.pred = as.numeric(my.pred >= mods.list$sl$cutoff)	1	1
full$Fare[1044] <- mean_mv	1	1
print(successRate)	1	1
"full$Male<-as.logical(full$Sex==""male"")"	1	1
solution <- data.frame(PassengerId = test$PassengerId, Survived = test$p)	1	1
mtry = best_mtry[which(best_mtry == min(best_mtry), arr.ind=TRUE)[1],1]	1	1
val_m$Age_Bin = cut(val_m$Age_comp_MICE, breaks = c(0, 1, 12, 18, 60, 200))	1	1
full[full$Pclass==3,]	1	1
"embark.regressors = c(""Fare"")"	1	1
datamerging[892:1309,]	1	1
"predTitanicTrain <- as.data.frame(predict(modelTitanic14, trainData1, type=""response""))"	1	1
table(predict_logit)	1	1
"train$Age[train$Title == ""Dr."" & is.na(train$Age)] <- mean.dr"	1	1
test[is.na(test$Fare),]	1	1
titanic$Fare[1044]<- mean(titanic$Fare,na.rm=TRUE)	1	1
DataBind <- bind_rows(train,test)	1	1
knn_test$Embarked <- factor(knn_test$Embarked, labels = c('1','2','3'))	1	1
"full$Family_size_ratio[full$Family_count>=3 & full$Family_count<=5]<-""Medium"""	1	1
hid.num<-length(struct.out)-2	1	1
wts.rs<-rep(1,struct[val+1])	1	1
"name = gsub("":"", ""."", names(mod.dat))"	1	1
factors <- c('Embarked', 'Group', 'Title', 'Pclass')#left survived out...	1	1
table(ans_rf_predict)	1	1
fmlyIDs[fmlyIDs$Freq <=2,]	1	1
full<- full[order(full$PassengerId),]	1	1
data.classifier.formula <- as.factor(Survived) ~ .	1	1
full$Family_count<-full$SibSp+full$Parch+1	1	1
summary_table$max_depth[1:5]	1	1
score$Survived <- ifelse(score$Survived > 0.5,1,0)	1	1
"rf.train <- data.combined[1:891,c(""Pclass"",""title"",""family.size"",""SibSp"",""Parch"")]"	1	1
summary(fullComb$Age)	1	1
"titanic[a1,""Embarked""] <- impute.embarked"	1	1
d.all$Deck <- as.factor(GetDeck(as.character(Cabin)))	1	1
"dat_all <- merge(dat_all, ticket_freq[, c(1,3)], by=""Ticket"", all.x = TRUE)"	1	1
top.run1=max(summary(resampled)$statistics$Accuracy[,'Median'])	1	1
par(mar = c(7,4,4,2) + 0.1)	1	1
mutate(TicketGroupSize = n()) %>%	1	1
mods.list$lda = lda.list	1	1
num_loss<-length(which(titanic$Survived==0))	1	1
if(length(mod.in) != ((struct[1]*struct[2]+struct[2]*struct[3])+(struct[3]+struct[2])))	1	1
layer.x<-seq(0.17,0.9,length=length(struct))	1	1
sum(diag(tt2))/sum(tt2)	1	1
data %>% group_by(Sex) %>% summarise(prob = mean(Survived)) %>% print()	1	1
train=train[,-c(1,4,9,11)]	1	1
"df$Embarked[df$Embarked==""""]=""S"" #replace missing values with majority (S), highest chance of being right"	1	1
test_idx <- (dim(train)[1]+1):dim(full)[1] # dont forget to use () before the :	1	1
full[-c(62,830),]	1	1
"data.clean$Age < 50, ""40 ~ 49"","	1	1
accuracy_tab$target==accuracy_tab$pred->accuracy_vec	1	1
test=test[,-c(3,8,10,11)]	1	1
"hist(val_m$Age, freq= FALSE, main = ""Vdalidation Data:  Original Age"", ylim = c(0,0.045))"	1	1
"colnames(submission)=c(""PassengerId"",""Survived"")"	1	1
"train$Survived <- as.factor(ifelse(train$Survived == 0, ""N"", ""Y"") )"	1	1
"for_test <- train %>% filter(Title ==""Mr."") #Get all the Mr. from the dataset"	1	1
combi$Title <- gsub('(.*, )|(\\..*)', '', combi$Name)	1	1
target <- as.factor(df_combined[[2]][1:891])	1	1
progress.bar$step()	1	1
full$Fare_Category <- NA	1	1
hist(trn_m$Age_comp_FM, freq = FALSE, main = 'Age: Filled with Mean', ylim = c(0,0.045))	1	1
train%>%group_by(Parch)%>%count()->freq;	1	1
df_train_melt <- melt(df_train,id.vars = c('Survived','Sex','Embarked'))	1	1
"levels(data$Pclass) <- c(""Upper"", ""Middle"", ""Lower"")"	1	1
knn_test$PassengerId = NULL	1	1
"testset  <- read.csv('../input/test.csv',  na.strings=c("""", ""NA""), sep="","", header=TRUE, stringsAsFactors = FALSE)"	1	1
sum(is.na(Cabin))	1	1
full  <- bind_rows(test, train) # bind training & test data	1	1
table(full$Status,full$Sex)	1	1
select(Cabin, Survived)	1	1
Pclass_survival<-table(titanic$Survived,titanic$Pclass)	1	1
allData$SibSp <- as.numeric(allData$SibSp)	1	1
grid<-expand.grid(.sigma=c(0.025, 0.05, 0.1, 0.15), .C=seq(1,10,by=1))	1	1
"noble <- c(""Dona"", ""Jonkheer"", ""the Countess"", ""Sir"", ""Lady"", ""Don"")"	1	1
knn_train$Embarked = NULL	1	1
data <- data %>% mutate(title = get_title(Name))	1	1
train$Title[train$Title %in% c('Mlle', 'Ms')] = 'Miss'	1	1
t.cabin = substr(allData$Cabin,0,1)[892:1309]	1	1
test.mice[, Age := round(exp(log.Age), 2)]	1	1
group_by(Pclass) %>%	1	1
sum(ensembled == final_prediction)/length(ensembled)*100	1	1
total <- train_tbl %>% group_by(Sex) %>% summarise(Total = n())	1	1
train_clean[-ind,]	1	1
finalTraining[inCrossVal,]	1	1
trn_m$Age_comp_MICE = trn_imp$Age	1	1
cols<-rep(pos.col,struct[layer2])	1	1
"full$Family_size_ratio[full$Family_count>=6]<-""Big"""	1	1
full$Sex = as.numeric(as.factor(full$Sex))-1	1	1
as.factor(Survived) ~ Pclass  + Age2 + Fare +	1	1
full <- bind_rows(train,test)     # combine training and test dataset	1	1
full[is.na(full$Age),]	1	1
n_correct <- sum(pred_survived == val_df$Survived, na.rm = TRUE)	1	1
fits = list(fitted(log.mod.all), fitted(log.mod.trim))	1	1
sapply(titanic,function(x) sum(is.na(x)))	1	1
train$Age[is.na(train$Age)] <- mean(train$Age,na.rm=T)	1	1
df$Age[is.na(df$Age)]=mean(df$Age, na.rm=TRUE)	1	1
"train_clean<-train[,c(""Survived"",""Male"",""FirstClass"",""ThirdClass"",""Embarked_C"",""Embarked_Q"",""Age"",""Cabin"",""Fare"",""NAccompanied"",""Parch"",""SibSp"")]"	1	1
"levels(train$Embarked)[1] <- ""S"""	1	1
factor_vars <- c('Pclass','Sex','Embarked')	1	1
whole.data[whole.data$Title == 'Mlle' | whole.data$Title == 'Ms', 'Title'] <- 'Miss'	1	1
knn_test$Embarked = NULL	1	1
"DT = data.table(melt(gbm.diag, id.vars = c(""stat"", ""eta"", ""max_depth"", ""nrounds"", ""min_child_weight"", ""gamma"", ""mod"")))"	1	1
"data$Deck[is.na(data$Deck)] <- ""Unknown"""	1	1
full %<>% mutate(CabinKnown = as.numeric(nchar(Cabin) > 0))	1	1
freq$frequency<-freq$n/nrow(full);	1	1
"data.clean$Age < 20, ""10 ~ 19"","	1	1
train$Age <- mice_output_train$Age	1	1
print(paste('Accuracy',1-misClasificError))	1	1
data.frame(sapply(test,check.missing))	1	1
split <- sample.split(database$Survived, SplitRatio = 0.8)	1	1
"names.arg = c(""Murio"", ""Vivio""),"	1	1
row.nms<-c(row.nms,rep(paste('hidden',i,seq(1:hid.struct[i+1])),each=1+hid.struct[i]))	1	1
combined.df$Surname <- as.factor(combined.df$Surname)	1	1
full$Surname <- factor(full$Surname)	1	1
test <- all[nrow(train)+1 : nrow(test), ]	1	1
table(df$Survived[is.na(df$Age)])	1	1
op$Survived <- Survived	1	1
aggregate(tot$Age, by=list(tot$Title), FUN=mean, na.rm=TRUE)	1	1
print(paste('Accuracy Dtree',1-misClasificError))	1	1
train[,3:12]	1	1
summary(combined.df)	1	1
print('Age present')	1	1
total$Fsize <- total$SibSp + total$Parch + 1	1	1
whole.data[whole.data$FamilySize > 1 & whole.data$FamilySize < 5,'FamilyGroup'] <- 'small size'	1	1
"Titanic_train$FamilySize <- ifelse(Titanic_train$SibSp + Titanic_train$Parch + 1 == 1, ""Single"", ifelse(Titanic_train$SibSp + Titanic_train$Parch + 1 < 4, ""Small"", ""Large""))"	1	1
DEV$Age[is.na(DEV$Age)]=121	1	1
Exit <- array(-99999,6)	1	1
train.mice[, log.Age := log(Age)]	1	1
full$Embarked[c(62,830)] = 'S'	1	1
trainData1$Age <- as.numeric(trainData1$Age)	1	1
sum(is.na(my_df$Embarked))	1	1
ratios = c(0.6,0.2),   ## only need to specify 2 fractions, the 3rd is implied	1	1
whole.data[whole.data$flag == 1,]	1	1
which(is.na(combi$TitleCat))	1	1
summarise(mean_age = mean(Age, na.rm=TRUE), ci = qnorm(0.975) * sd(Age, na.rm=TRUE) / (n() - 1)) %>% print()	1	1
"full[full$ticket_num == ""LINE"", ]$ticket_num <- 1"	1	1
combined.df$TitleGroup <- as.factor(combined.df$TitleGroup)	1	1
uni.hids<-paste0('Hidden_',1+seq(1,hid.num))	1	1
m <- matrix(rep(0,55), nrow=5, ncol=11)	1	1
dat_all[dat_all$Ticket==ticket_freq[j,1] ,]	1	1
"data.test <- read.csv(paste(input.dir, 'test.csv', sep =""""))"	1	1
test$Title[test$Title == 'Mme']         <- 'Mrs'	1	1
group_by(Pclass,Parch) %>%	1	1
par(mfrow = c(1,2))	1	1
embark_miss <- subset(my_df, PassengerId == 62 | PassengerId== 830)	1	1
featureImportance <- data.frame(Feature = row.names(imp), Importance = imp[, 1])	1	1
which(is.na(my_df$Embarked))	1	1
max_acc_idx <- which(unlist(accuracy) == max(unlist(accuracy)))	1	1
d.all$boatfirst <- ifelse(Sex == 'female' | Age < 18, 1, 0)	1	1
is.factor(train$Sex)	1	1
data$Fare[data$Fare <3.0] = NA	1	1
output.size = length(levels(train$Survived)) - 1	1	1
total$Title[total$Title == 'Mme']         <- 'Mrs'	1	1
final<-final[,Survived:=ifelse(Survived<=0,0,1)]	1	1
fmlyIDs[fmlyIDs$Freq ==3,]	1	1
data[, names(data) %in% factor_vars],	1	1
train.df <- combinedTrnsfrm.df[which(!is.na(combinedTrnsfrm.df$Survived)), ]	1	1
rf_pred <- data.frame(PassengerId = test$passengerid, Survived = rf_pred, row.names = 1:nrow(test))	1	1
allData$Pclass <- as.factor(allData$Pclass)	1	1
print(column)	1	1
test_pred <- predict(sv_model, test[,-c(2,11)])	1	1
"test_titanic<- read.table(""../input/test.csv"", header=T,sep="","")"	1	1
train$Survived[train$Age >= 13 & train$Age < 25]	1	1
as.numeric(cm_LR_bal$byClass[1]), # Sensitivity	1	1
No_Survival = double(), Survived= double(),	1	1
data$Title[data$Title %in% rare_title]  <- 'Rare Title'	1	1
titanic.test[,'flag'] <- 1	1	1
sum(is.na(Sex))	1	1
x<-rep(x.loc*diff(x.range),layer)	1	1
relative <- data.frame()	1	1
full[, Title := as.factor(Title)]	1	1
m1 <- matrix(rep(0, 40), nrow=4, ncol=10)	1	1
sum(Titanic_train$FamilySize == 'Large' & Titanic_train$Survived == 1) / sum(Titanic_train$FamilySize == 'Large')	1	1
combi$Mother <- '0'	1	1
summary(fullComb$Fare)	1	1
perished <- train_tbl %>% filter(Survived == 0) %>% group_by(Sex) %>% summarise(Perished  = n())	1	1
table(full$Fsize,full$Survived)	1	1
"(train %>% filter(Cabin == """") %>% count)$n"	1	1
all <- all%>%dplyr::select(-PassengerId, -Name, -Ticket, -Cabin)	1	1
train$Mother[train$Sex == 'female' & train$Parch > 0 & train$Age > 18 & train$Title != 'Miss'] <- 'Mother'	1	1
age_mean=mean(train_refined$Age,na.rm=TRUE)	1	1
Titanic_data$Fare=Titanic_data_preprocess_pred$Fare	1	1
"dat_all$Ticket %in% c(""2666"", ""110564""),"	1	1
table(as.numeric(predict(data.classifier.lda, data.train.use)$class) - 1, data.train.use[,2])	1	1
trainCompleteCases[ inTrain,]	1	1
test$Age <- mice_output_test$Age	1	1
"names.arg = c(""Mujer"", ""Hombre""),"	1	1
txt <- format(c(r, 0.123456789), digits = digits)[1]	1	1
Impute.fare$median # value to be imputed	1	1
fullComb$FamilyID[fullComb$FamilySize <= 2] <- 'Small'	1	1
fulldata$Embarked[c(62, 830)] <- 'C'	1	1
data$Fare[is.na(data$Fare)] <- median(data[data$Pclass == 'Lower' & data$Embarked=='S', ]$Fare, na.rm = TRUE)	1	1
output[, acc := as.numeric(acc)]	1	1
src.str<-paste('out',h.layer)	1	1
"dat_all[dat_all$with_fam==0, ""FM_Survive""] <- single_survive"	1	1
maxDepth = max(as.numeric(topDepths))	1	1
summary(log.mod.all)	1	1
setcolorder(test,c(1,12,2:11))	1	1
"full$isCabin <- ifelse(full$Cabin == """", 0, 1)"	1	1
prop.table(tsg, margin=1)	1	1
df_combined$Title[df_combined$Title == 'Mme'] <- 'Mrs' #http://www.dictionary.com/browse/madame	1	1
"hist(tst_m$Age_comp_FM, freq= FALSE, main = ""Test Data: Age via Mean"", ylim = c(0,0.045))"	1	1
else all.out<-which(y.names==all.out)	1	1
combi$TitleCat <- combi$Title	1	1
combi$FamilyID[combi$FamilyID %in% famIDS$Var1] <- 'Small'	1	1
full[is.na(full$embarked), ]$embarked <- 'S'	1	1
train$Survived<-as.factor(train$Survived)	1	1
data <- list()	1	1
mean(age.data$Age[age.data$FamSize==6]),	1	1
summary(p)	1	1
age_compare[5,] = c('Val', 'Filled by Mean', mean(val_m$Age_comp_FM), sd(val_m$Age_comp_FM))	1	1
fulldata$Title=sub(' ','',sapply(fulldata$Name,FUN=function(x){strsplit(x,split='[.,.]')[[1]][2]}))	1	1
full[, NewAge := Age]	1	1
summary(D2)	1	1
table(titanic$Title)	1	1
data<-subset(raw.data,select = c(2,3,5,6,7,8,10,12))	1	1
test$Cabinsize<- nchar(as.character(test$Cabin))==0	1	1
full$Alone[full$Fsize>=2] = 2	1	1
"full$Cabin2[full$Cabin2 == """"] = ""N"""	1	1
"mod.dat[, c(""Sex"", ""Embarked"") := NULL]"	1	1
train.nn[, rescale.Age := rescale(Age, to = c(0, 1))]	1	1
CleanTotal[which(CleanTotal$PassengerId == 1044), ]$Fare <- median(CleanTotal$Fare, na.rm=TRUE)	1	1
"train$Set <- rep(""Train"", nrow(train))"	1	1
train_data$Sex[train_data$Survived == 1]	1	1
"mean.mrs <- mean(train$Age[train$Title == ""Mrs."" & !is.na(train$Age)])"	1	1
"input_df <- read.csv(""../input/train.csv"")[, c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"")]"	1	1
full.data$Age <- mice_output$Age	1	1
group_by(FamilySize) %>%	1	1
d <- train %>% select (PassengerId,Parch,Name) %>% filter(Parch>2) %>%	1	1
"hist(tst_m$Age_comp_MICE, freq= FALSE, main = ""Test Data: Age via MICE"", ylim = c(0,0.045))"	1	1
predict_logit = as.numeric(predict_logit > 0)	1	1
train$fareRange<-'30+'	1	1
raw_train[!is.na(raw_train$Age), ] # 712 reg	1	1
my_df$Fare[1044] <- 8.05	1	1
hist(log(df$Fare)) #histogram, which looks more normal than the skewed Fare distribution	1	1
data_train$Cabin <- NULL	1	1
combined.df$TitleGroup <- combined.df$Title	1	1
names.last <- lapply(names.split, FUN = function(x) {x[[1]]}) %>% unlist()	1	1
mutate(rate = n/sum(n) * 100) %>%	1	1
fullComb$FamilyID <- factor(fullComb$FamilyID)	1	1
ind<-which(is.na(train$Cabin))	1	1
test$Mother<- 0	1	1
test$Family[i]<-test$SibSp[i]+test$Parch[i]+1	1	1
"cat('Pclass', i,': ', ((table(trn_m[,c(""Pclass"", ""HasCabin"")])[i,]/sum(table(trn_m[,c(""Pclass"", ""HasCabin"")])[i,]))[2])*100, '%\n')"	1	1
"filter(Cabin != """") %>%"	1	1
print('HasFamily')	1	1
"print(paste0(""cross validation set "", k, "" score = "", newScore))"	1	1
print('Embarked')	1	1
traintest.data$Surname <- sapply(traintest.data$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])	1	1
tf$Survived<-0	1	1
clean_train$Age <- as.numeric(clean_train$Age)	1	1
submit <- data.frame(PassengerId = test$PassengerId, Survived = knn_model)	1	1
"train$Sex[""Sex"" == ""female""] <- 0"	1	1
"completeTrain$FareRange[completeTrain$Fare <= medianFare] <- ""low"""	1	1
aggregate(train[,2], list(train$parentyn), length)	1	1
"pen.diag[, mod := rep(""pen"", nrow(pen.diag))]"	1	1
varMissings <- c(varMissings, sum(misses))	1	1
nrow(pdf[pdf$P == pdf$F,])/nrow(pdf)	1	1
print('Class')	1	1
titanic$FsizeD <- FsizeD	1	1
trainData1$PassengerId	1	1
wts<-unlist(mod.in$weights[[1]])	1	1
round(prop.table(table(train$Cabin_Deck_i2, train$Survived), 1),2)	1	1
df$Embarked <- as.factor(df$Embarked)	1	1
grid.arrange(Agegroup1, Agegroup2, Agegroup3, Agegroup4, nrow=2, ncol=2)	1	1
wts.rs<-unlist(lapply(wts.rs,function(x) x[1]))	1	1
data$Age <- imputes$Age	1	1
table(indata$Sex,indata$title)	1	1
mergedData$ticketLetter <- NULL	1	1
"completeTrain$AgeRange <- factor(completeTrain$AgeRange, levels=c(""kid"", ""adult"", ""elderly""))"	1	1
df_combined$Family_Member_Count <- df_combined$SibSp + df_combined$Parch + 1	1	1
full$familyID[full$familySize <= 2] <- 'Small'	1	1
mods.list$rf = rf.list	1	1
which(is.na(train$Pclass))#No missing values	1	1
cm = table(testing[, 8], y_pred)	1	1
output[, alpha := doe$alpha[i]]	1	1
mod.dat[, Sex := NULL]	1	1
full_data$FsizeD[full_data$Fsize > 4] <- 'large'	1	1
table(my_df$Survived, my_df$Pclass,my_df$Group)	1	1
"test_data$prediction <- predict(fm, newdata=test_data, type=""response"")"	1	1
mod.in$fitted	1	1
data$Title[data$Title == 'Mme']         <- 'Mrs'	1	1
levels(Titanic_test$Sex) <- c('Female', 'Male')	1	1
xgb.grid <- expand.grid(nrounds = 1000, eta = c(0.01,0.05,0.1), max_depth = c(2,4,6,8,10,14), gamma=1, min_child_weight = 7, subsample = 0.8, colsample_bytree = 0.8)	1	1
hist(train$Age[train$Pclass == 2], breaks = length(unique(train$Age)))	1	1
combi$FamilySize <- combi$SibSp+combi$Parch+1	1	1
clusts <- cutree(hclust, h = 1 - minMatch/length(compareAttribs))	1	1
train[train_newIndex,]	1	1
"d.model <- d.all[!is.na(Survived),c(""Survived"",""Title"",""Last"",""Sex"",""Age"",""Family"",""SibSp"",""Parch"",""Pclass"",""Embarked"")]"	1	1
test$Age[is.na(test$Age)] <- median(data$Age,na.rm=T)	1	1
Titanic_data$Age=Titanic_data_preprocess_pred$Age	1	1
full %>% group_by(quote) %>% summarize(msurvived = mean(Survived, na.rm=T), n=n())	1	1
"pen.list = list(""mod"" = pen.mod, ""coef"" = pen.coef, ""cutoff"" = cuts[14])"	1	1
summary(train_x)	1	1
output[, auc := as.numeric(auc)]	1	1
data_train$Fare <- as.numeric(data_train$Fare)	1	1
"select(one_of(c(""PassengerId"",compareAttribs))) %>%"	1	1
"full$Ticket_Pre <- as.factor(str_to_upper(str_replace_all(full$Ticket_Pre, ""[./]"", """")))"	1	1
my_solution3 <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction3)	1	1
t.train <- as.data.frame(t.train, stringsAsFactors = F)	1	1
full$Status<- (ifelse((full$Survived=='1'), 'Survived',ifelse((full$Survived=='0'),'Dead','Not known')))	1	1
aggregate(train[,2], list(train[,12]), mean)	1	1
table(mod_test$AgeRange, Tree1Prediction)	1	1
test$Survived<-as.factor(test$Survived)	1	1
table(pdf)	1	1
aggregate(Survived~Sex+Pclass+fareRange, data=train, FUN = function(x){sum(x)/length(x)})	1	1
dat_all$Ticket%in%ran_ticket,	1	1
allData$Cabin <- as.factor(allData$Cabin)	1	1
results_final <- as.vector(test_model_final_predictions$aggregate)	1	1
"data$FamilySize <- ifelse(data$SibSp + data$Parch + 1 == 1, ""single"", ifelse(data$SibSp + data$Parch + 1 < 4, ""small"", ""large""))"	1	1
predTitanic$Survived[predTitanic$Survived!=1] <- 0	1	1
"abline(v=median(completeTrain$Fare), col=""red"", lwd=2)"	1	1
Titanic_data$Title[Titanic_data$Title=='Ms']='Miss'	1	1
"d <- train %>% mutate(QuotedName = grepl('\\""', Name)) %>% select(Survived, QuotedName)"	1	1
data$Age_Group[data$Age <= 10] <- 'Kid'	1	1
cat(table(trn_m$FamilySize,trn_m$SharedCabin)[1,2], 'people traveling without a parental, spousal, sibling or child relationship were sharing cabins.')	1	1
"combine<-as.data.frame(apply(combine, 2, function(x) gsub(""^$|^ $"", NA, x)))"	1	1
sibSpImpact <- data.frame(table(allData$SibSp+allData$Parch, allData$Survived))	1	1
knn_train$familyID2 <- factor(knn_train$familyID2, labels = c(1:24))	1	1
testsetCopy <- data.frame()	1	1
total$FsizeD[total$Fsize < 5 & total$Fsize > 1] <- 'mDep'	1	1
length(train_youth[which(train_youth == 1)])/length(train_youth)	1	1
solution<-cbind(PassengerId,Survived)	1	1
train$PassengerId <- NULL	1	1
train.nn[, rescale.Sexmale.Fare := rescale(Sexmale.Fare, to = c(0, 1))]	1	1
summary(fullComb$Embarked)	1	1
titanic$embarked <- as.factor(titanic$embarked)	1	1
test$pred <- ifelse(test$AvgProb > .5, 1, 0)	1	1
sl.pred = function(Xtrain, Ytrain, Xtest, Ytest, negative, cutoff)	1	1
combi$Fare[1044] <- median(combi[combi$Pclass == '3' & combi$Embarked == 'S', ]$Fare, na.rm = TRUE)	1	1
mergedData$Name <- NULL	1	1
findInterval(x, sort(quantile(x, (1:n) * (1/n) - (1/n), na.rm=TRUE)))	1	1
combi$FamilySize <- 0	1	1
full$Sex <- factor(full$Sex)	1	1
test_boost <- rep(0, nrow(test))	1	1
Xtestset$Embarked<-as.numeric(Xtestset$Embarked)	1	1
test$Title <- as.factor(test$Title)	1	1
combi$MenWithMoreRel <- 0	1	1
levels(Titanic_train$Pclass) <- c('Upper', 'Middle', 'Lower')	1	1
knn_train$Cabin = NULL	1	1
test.nn = data.table(test)	1	1
data[!is.na(data$Embarked),]	1	1
test_data=test_data[,-c(2)]	1	1
ib <- which(is.na(test_data$Fare))	1	1
"full$Ticket_Num <- sapply(full$Ticket, FUN=function(x) {ifelse(str_detect(x, "" ""),str_split(x, "" "")[[1]][2], as.character(x))})"	1	1
"test_model<-full[892:1309,c(""Survived"",""Age"",""Sex"",""Family_count"",""Family_size_ratio"",""Fare"",""title"")]"	1	1
"testset$Fare[153] <- median(Fare_impute_df$Fare[Fare_impute_df$Pclass == 3 & Fare_impute_df$Embarked == ""S""], na.rm=TRUE)"	1	1
"data.clean$Age < 40, ""30 ~ 39"","	1	1
test=read.table('../input/test.csv', sep=',', header=T)	1	1
combine$fare.fill<-combine$Fare	1	1
aggregate(Survived ~ Child + Sex, data=train, FUN=function(x) {sum(x)/length(x)})	1	1
"full[is.na(full$Age) & full$Title == ""Ms"", ]$Age <-age_by_title[age_by_title$Title== ""Ms"", ]$Age"	1	1
summary(test1$Survived)	1	1
train$Title[train$Title == 'Mme'] = 'Mrs'	1	1
full_data[,i]=as.factor(full_data[,i])	1	1
dim(Titanic_data)	1	1
full$Fsize <- full$SibSp + full$Parch +1	1	1
summary(SVMmodel) # view results	1	1
train_data[is.na(train_data$Embarked),]$Embarked <- 'C'	1	1
embark_fare = full %>% filter(PassengerId !=62 & PassengerId !=830)	1	1
trn_m = merge(trn_m,cab_occupancy, by = 'Cabin')	1	1
"trainset <- read.csv('../input/train.csv', na.strings=c("""", ""NA""), sep="","", header=TRUE, stringsAsFactors = FALSE)"	1	1
fullComb$Title <- sapply(fullComb$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})	1	1
spacing <- diff(c(0*diff(y.range),0.9*diff(y.range)))/lyr	1	1
"respondVar <- c(""Survived"")"	1	1
"colnames(member) <- c(""from"", ""to"")"	1	1
cat('\nOptimal Number of Variables sampled per split: ', mtry)	1	1
"test$Cabin[which(!test$Cabin=="""")]<-1"	1	1
ynew = as.numeric(predict(mod, newdata = Xtest))	1	1
miss.alone <- miss[which(miss$SibSp==0 &miss$Parch == 0),]	1	1
strsplit(x, split = '[,.]')[[1]][1]	1	1
pred_class <- ifelse(predictions> 0.5, 1, 0)	1	1
train_tbl_with_age <- filter(train_tbl, !is.na(Age))	1	1
Age = if_else(is.na(Age),mean(Age,na.rm = TRUE),Age),	1	1
"filter(Embarked != """") %>%"	1	1
doe = doe[!duplicated(doe),]	1	1
train$Surname <- gsub(',.*', '', train$Name)	1	1
train$Child[train$Age >= 18] <- 0	1	1
"Titanic_data_preprocess=preProcess(Titanic_data[,c(""PassengerId"",""Age"",""SibSp"",""Parch"",""Fare"")],method=c(""bagImpute""))"	1	1
testset[which(is.na(testset$Fare)),]	1	1
roc_RF_ubal <- roc(val_m$Survived, as.numeric(p_RF_ubal)-1)	1	1
aggregate(train[,2], list(train[,5]), mean)	1	1
train.mice[, Age := round(exp(log.Age), 2)]	1	1
summary(lrm)	1	1
summarize(AvAge = round(mean(Age),0))	1	1
full$Cabin<-NULL	1	1
"full$Age, freq = F, main=""Age: Original Data"","	1	1
"lda.diag[, c(""name"") := NULL]"	1	1
"left_join(avFareTest,by = c(""Pclass"" = ""Pclass"",""Embarked"" = ""Embarked"")) %>%"	1	1
output[, nrounds := doe$nrounds[i]]	1	1
data_test$Pclass <- as.factor(data_test$Pclass)	1	1
f.cabin = substr(allData$Cabin,0,1)[1:891]	1	1
separate(col = Name,into = c('A','B'), sep = ',') %>%	1	1
my_df$Age <- mice_corr$Age	1	1
HO_idx <- sample(seq_len(nrow(trn_raw)), size = floor(0.2 * nrow(trn_raw)))	1	1
tot$Title[tot$Title %in% c('Don', 'Capt', 'Col', 'Dr', 'Major', 'Master', 'Rev', 'Sir', 'Jonkheer')]<-'Mr'	1	1
scale_x_continuous(breaks=c(1:90)) +	1	1
temp<-data.frame(table(combine$embarked.fill))	1	1
apply(DstTest,2,pMiss)	1	1
summary(balanced_train)	1	1
table(trn_m$HasCabin,trn_m$Survived)	1	1
full[-ind,]	1	1
pen.diag = foreach(i = 1:nrow(doe)) %do%	1	1
test$istest<-TRUE	1	1
test_data$Fare[ib] <- median(train_data$Fare,na.rm=TRUE)	1	1
train_tbl_with_age_by_Sex_Age_Survived <- group_by(filter(train_tbl_with_age, Survived ==1), Sex, Age_Bin, Age_Bin_Order)	1	1
length(train_child[which(train_child == 1)])/length(train_child)	1	1
data.frame(sapply(train,check.missing))	1	1
full$Pclass<-as.ordered(full$Pclass)	1	1
"mice_corr <- mice(my_df[c(""Sex"",""Age"")],m=5,maxit=50,meth='pmm',seed=500)"	1	1
table(Sex)	1	1
trainset$Agegroup <- factor(trainset$Embarked, exclude=NULL)	1	1
full_data$familysize = full_data$SibSp + full_data$Parch + 1	1	1
"full$Title[full$Title == ""Mlle""]  <- ""Miss"""	1	1
test[is.na(test)] <- median(test$Age, na.rm = TRUE)	1	1
data$FamilySize <- as.factor(data$FamilySize)	1	1
whole.data[whole.data$Fare>=0 & whole.data$Fare<8, 'FareBin'] <- '1'	1	1
grid.arrange(p1, p2, p3, p4, ncol=2, nrow=2)	1	1
titanic.test$TrainSet <- FALSE	1	1
DstTrainClean$TitleType <- ifelse(DstTrainClean$Title %in% Passenger.woman, 'Passenger.woman',DstTrainClean$TitleType)	1	1
"levels(data_train$Pclass) <- c(""Alta"", ""Média"", ""Baixa"")"	1	1
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)	1	1
mod.in$model.list$variables	1	1
data  <- bind_rows(train,test)	1	1
fullComb$Name <- as.character(fullComb$Name)	1	1
"member[member$from!=member$to,] #remove ""from"" ""to"" same value row #data"	1	1
trn_raw[HO_idx,]	1	1
train$id <- sample(1:k, nrow(train), replace = TRUE)	1	1
train.nn[, as.character(min.max$variable) := NULL]	1	1
df_combined$Title[df_combined$Title == 'Ms'] <- 'Miss'	1	1
survived_all <- filter(train_tbl, Survived == 1)	1	1
aggregate(Survived ~ Fare2 + Pclass + Sex, data=titanic2, FUN=function(x) {sum(x)/length(x)})	1	1
"mr<-test[grep(""Mr"",Name),mean(Age,na.rm=T)]"	1	1
knn_test$Sex <- factor(knn_test$Sex, labels = c('0','1'))	1	1
"test$Cabin[which(test$Cabin=="""")]<-0"	1	1
train2[,1]	1	1
missing_train[apply(missing_train, 1, function(row) {any(row > 10)}),]	1	1
"mrage<-mean(test$Age[which(test$Name==""Mr."")],trim=.5,na.rm=TRUE)"	1	1
train$Ticket_Num2[train$Ticket_Num <= 30000] = 3	1	1
"title <- ifelse(title == ""Mlle"", ""Miss"", title)"	1	1
"nn.diag[, c(""layers"", ""nodes"", ""prop"") := NULL]"	1	1
tmp[tmp$`Actual Outcome`== 0,]$`Actual Outcome` <- 'Died'	1	1
cat('Optimal Number of Trees: ', ntree)	1	1
"split.names <- data.frame(""Title"" = names.title, ""First"" = names.first, ""Last"" = names.last)"	1	1
"names(Pred)[2]<-""Survived"""	1	1
"fullComb$FamilyID <- paste(as.character(fullComb$FamilySize), fullComb$Surname, sep="""")"	1	1
fullComb$Title[fullComb$Title %in% c('Mme', 'Mlle')] <- 'Mlle'	1	1
"d.all[is.na(Embarked),""Embarked""] <- ""S"""	1	1
factor_vars <- c('Pclass','SibSp','Parch','FamilySize')	1	1
round(prop.table(table(train2$Survived)),2)	1	1
summary(log_model)	1	1
data$Age[NAindex[i]] <- age.NA.solved[i]	1	1
trainrows <- sample(c(T,F), totalrows, replace = T, prob = c(0.8, 0.2))	1	1
fulldata <- (transform(fulldata, Groupticket = match(Ticket, unique(Ticket))))	1	1
data$Title[data$Title == 'Mlle']<- 'Miss'	1	1
combi$Child[combi$Age < 18] <- '1'	1	1
as.numeric(cm_LR_bal$overall[1]), # Accuracy	1	1
full$ThirdClass<-as.logical(full$Pclass==3)	1	1
"disc_var = c(""Pclass"", ""Sex"", ""Embarked"", ""HasCabin"", ""HasFamily"", ""Age_Bin"")"	1	1
combi$Cabin[combi$Cabin %in% c('D')] <- 'D'	1	1
val_m[is.na(val_m$Age_comp_FM),c('Age_comp_FM')] = fill_Age_mean	1	1
train$Sex == 'male',	1	1
"relative2 <- data.frame(test_member[i,""PassengerId""], test_member[i,""Ticket""],survive)"	1	1
full$Age<-Hmisc::impute(full$Age,mean)	1	1
which(is.na(combi$Sex))	1	1
"colnames(out)=c(""PassengerId"", ""Survived"")"	1	1
full$IsChild <- factor(full$IsChild)	1	1
combined[combined$Pclass == '3' & combined$Embarked == 'S', ],	1	1
filter(!is.na(Cabin_Deck)) %>%	1	1
train$FamilySize <- train$SibSp + train$Parch + 1	1	1
"full$IsChild <- ""Adult"""	1	1
full$Fare[1044] <- median(full$Fare, na.rm = TRUE)	1	1
print('Proportion Table: TRUE = Cabin/Deck is missing  X  Survived = 1 if survived')	1	1
print(top.run1)	1	1
Titanic_data$Name=as.character(Titanic_data$Name)	1	1
dummyData.df <- data.frame(predict(dummyTrnsfrm, newdata = combined.df))	1	1
all$Title <- as.factor(all$Title)	1	1
allData$SibSp + allData$Parch	1	1
output[, prop := doe$prop[i]]	1	1
"full[full$title %in% noble, ]$title <- ""noble"""	1	1
df$age_missing <- 0	1	1
"p <- predict(model, newdata=subset(test,select=c(2,3,4,5,6,7,8)), type=""response"")"	1	1
colnames(dd) <-  c('floor', 'died', 'survived')	1	1
combined$Title[combined$Title == 'Ms']          <- 'Miss'	1	1
full$Agebefore = full$Age	1	1
final.data <- data.frame(PassengerId = test.data$PassengerId, Survived = test.data$SurvivedRandom)	1	1
Titanic_data_preprocess$method	1	1
"fea$TicketPrefix[sapply(strsplit(as.character(train$Ticket), "" ""), length) == 1] <- """""	1	1
column <- as.name(column)	1	1
"if(MT1 == ""TRUE""){print(""The Train data set has missing values"")}"	1	1
full$title <- as.factor(full$title)	1	1
df_combined$Parent <- 'Not Parent'	1	1
"combine$total.relative.range<-ifelse(combine$total.relative==0,""NO_RELATIVE"",ifelse(combine$total.relative<=as.numeric(quantile(combine[combine$total.relative>0,]$total.relative)[2]),""SMALL_FAMILY"",ifelse(combine$total.relative<=as.numeric(quantile(combine[combine$total.relative>0,]$total.relative)[3]),""SMALL-MODERATE_FAMILY"",ifelse(combine$total.relative<=as.numeric(quantile(combine[combine$total.relative>0,]$total.relative)[4]),""MODERATE-BIG_FAMILY"",ifelse(combine$total.relative<=as.numeric(quantile(combine[combine$total.relative>0,]$total.relative)[5]),""BIG_FAMILY"")))))"	1	1
df$logfare=log(df$Fare)	1	1
lapply(df_combined[cols], nlevels)	1	1
summarise(filter(test_tbl), Total = n())	1	1
names(df_combined[,cats])	1	1
model <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title,data=train_titanic, importance=TRUE, ntree=2000)	1	1
train_data$Age[train_data$Survived == 0]	1	1
df$Sex <- as.factor(df$Sex)	1	1
fullComb[892:1309,]	1	1
dplyr::summarise(avgAge = mean(Age), count = n())	1	1
dim(train1)	1	1
"full[full$title == ""Mme"" | full$title == ""Ms"", ]$title <- ""Mrs"""	1	1
whole.data[whole.data$Fare>=8 & whole.data$Fare<15, 'FareBin'] <- '2'	1	1
combined$Status  <- factor(combined$Status)	1	1
dim(traindata)	1	1
"mast <- data.combined[which(data.combined$title == ""Master.""),]"	1	1
"mice_output$Age, freq=F, main=""Age:Mice Output"","	1	1
train%>%group_by(Sex)%>%count()->freq;	1	1
dt<-table(train$Survived,train$Embarked)	1	1
my_df$Title <- stringr::str_replace_all(my_df$Name,'(.*,)|(\\..*)', '')	1	1
submission$Survived = as.data.frame(h2o.predict(model_rf,test.hex))[,1]	1	1
"rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")"	1	1
"full[-ind,]%>%filter(Pclass==3,Sex==""male"",Age>=30,Embarked==""S"")%>%summarise(mean(Fare))"	1	1
"freq<-combine[,c(""Pclass"",""Fare"")]"	1	1
Title = ifelse(Title%in%c('Dr.', 'Master.', 'Miss.', 'Mr.', 'Mrs.', 'Rev.'), Title, 'Other')	1	1
solution <- data.frame(PassengerID = test$PassengerId, Survived = test$Survived)	1	1
test_titanic$Survived <- NA	1	1
"val_m$HasCabin <- factor(ifelse(val_m$Cabin == """", c(0), c(1)))"	1	1
mice_mod <- mice(combi[, !names(combi) %in% c('PassengerId','Name','Ticket','Cabin','FamilySize','Surname','Survived', 'Fare', 'Child')], method='rf')	1	1
testsetCopy <- rbind(testsetCopy, as.data.frame(testset[c('Survived')]))	1	1
summary(full_df)	1	1
vnames <- vnames[c(2,4,5,7)]	1	1
data.frame(PassengerId,Survived) -> Predicted_Results	1	1
"paste(""Accuracy : "",Accuracy)"	1	1
submit <- data.frame(PassengerId = test_titanic$PassengerId, Survived = Prediction)	1	1
test[Gender==i & Pclass==j & is.na(Age),Age:=median_ages[i,j]]	1	1
sum(Titanic_train$Pclass == 'Lower' & Titanic_train$Survived == 1) / sum(Titanic_train$Pclass == 'Lower')	1	1
"shrinkage=c(0.01,0.1),		# Try 2 values for learning rate"	1	1
out.ls<-data.frame(wts,row.nms)	1	1
"data$Sector[data$Sector==""""] <- NA"	1	1
full[!is.na(full$Age), ],	1	1
test$Name <- as.character(test$Name)	1	1
train[, Age := train.mice$Age]	1	1
"my.train.data$Cabin <- ifelse(is.na(my.train.data$Cabin), ""NA"", my.train.data$Cabin)"	1	1
titanic$Age[is.na(titanic$Age)] <- predict(Agefit, titanic[is.na(titanic$Age),])	1	1
sum(resultSet$Act == resultSet$Pred) / nrow(resultSet)	1	1
"DT = data.table(melt(svm.diag, id.vars = c(""stat"", ""gamma"", ""nu"", ""mod"")))"	1	1
combined$Title <- gsub('(.*, )|(\\..*)', '', combined$Name)	1	1
prop.table(table(train$Sex,train$Survived),1)	1	1
val_m$Age_comp_FM = val_m$Age	1	1
"DT = data.table(melt(mods.diag, id.vars = c(""stat"", ""mod"")))"	1	1
"vertex.color=c(""gray50"", ""gold"",""green"")[V(net)$Survived],"	1	1
by_Sex_Age_Total <- summarise(train_tbl_with_age_by_Sex_Age_Total, Total = n())	1	1
data.type = sapply(1:ncol(dat), function(i) class(dat[,i]))	1	1
ib <- which(is.na(test_data$Age))	1	1
numericSubset[!is.na(numericSubset$Age),]	1	1
full[Category %in% c('train', 'cv'), RfSurvived := predict(rf_mdl, full[Category %in% c('train', 'cv')], na.action=na.pass)]	1	1
train_df_$Ticket <- as.character(train_df_$Ticket)	1	1
"train[Cabin == ""T"", Cabin := NA]"	1	1
Chi = Chi[with(Chi, order(pvalue,var_name,val)), ]	1	1
combined.df$Name <- as.character(combined.df$Name)  # adjust for string split	1	1
combi$Cabin[combi$Cabin %in% c('B')] <- 'B'	1	1
test$Fare[is.na(test$Fare)] <- median(train$Fare)	1	1
aggregate(tot$Fare, by=list(tot$Pclass), FUN=mean, na.rm=TRUE)	1	1
summary(fit)   #detailed results including surrogate splits	1	1
table(data$Sector)	1	1
train_1 <- data.frame(train$Pclass, train$Sex, train$Age, train$SibSp, train$Parch, train$Fare, train$Embarked)	1	1
test[i,5] <- 28	1	1
df_combined$Fare[1044] <- median(df_combined[df_combined$Pclass == '3' & df_combined$Embarked == 'S', ]$Fare, na.rm = TRUE)	1	1
"dataset <- c(""train"", ""test"")"	1	1
"if(length(new.packages)) install.packages(new.packages,repos=""http://cran.r-project.org"")"	1	1
tab <- table(x)	1	1
"rf.diag[, mod := rep(""rf"", nrow(rf.diag))]"	1	1
mergedData$surname <- NULL	1	1
second_class_test <- filter(test, Pclass == 2)	1	1
"mods.list = list(""log"" = log.list)"	1	1
other <- c('Dr', 'Rev')	1	1
ttrain$Survived <- as.factor(ttrain$Survived)	1	1
select('A2')	1	1
train$Embarked[train$Embarked=='']=sample(train$Embarked[train$Embarked!=''],2)	1	1
trClean1$Embarked[nchar(as.character(trClean1$Embarked)) == 0] <- colnames(emb_pred)[apply(emb_pred, 1, which.max)]	1	1
full[Category == 'cv', sum(RpartSurvived2 == Survived)/length(Survived)]	1	1
whole.data[whole.data$Fare>=31, 'FareBin'] <- '4'	1	1
full[Category %in% c('train', 'cv'), SvmSurvived := predict(svm_mdl, full[Category  %in% c('train', 'cv')], na.action=na.pass)]	1	1
table(surv_test_logi$Survived)	1	1
predicted_output$Age, freq=F, main='Age: MICE Output',	1	1
tuneGrid = data.frame(mtry = c(2, 5, 8, 10, 15)),	1	1
combi$Mother <- factor(combi$Mother)	1	1
train_clean[ind,]	1	1
data$Title[data$Title == 'Don'] <- 'Mr'	1	1
finalClusts <- unique(clusts[duplicated(clusts)])	1	1
median_fare[median_fare$Pclass==full[is.na(full$Fare), ]$Pclass ,]$medians	1	1
train.nn[, rescale.SibSp.2 := rescale(SibSp.2, to = c(0, 1))]	1	1
filter(Age >= 0)	1	1
mutate(Age = ifelse(is.na(Age), avgAge, Age)) %>%	1	1
test[i,5] <- 24	1	1
"t.test <- sapply(t.test, function(x) {ifelse(x == """", NA, x)}, simplify = FALSE)"	1	1
t(train_na[train_na>0]) #Print values greater than 0	1	1
first_class <- filter(train, Pclass == 1)	1	1
data[NAindex,]	1	1
table(trn_m$Pclass, trn_m$Survived)	1	1
ran_ticket <- unique(ran_ticket$Ticket)	1	1
explanation <- explain(test[5:8,], explainer, n_labels = 1, n_features = length(names(test)))	1	1
predicted_survival <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Title + Embarked + FamilySize, data = train.data2)	1	1
clnTrn<-as.matrix(clnTrn, sparse = TRUE)	1	1
train$Fare2[train$Fare < 10] <- '<10'	1	1
mergedData$Cabin <- NULL	1	1
as.numeric(cm_NB_ubal$byClass[1]), # Sensitivity	1	1
sum(is.na(bag_pred))	1	1
submit <- data.frame(PassengerId = x$PassengerId, Survived = Prediction)	1	1
mergedData$ticketsCnt <- NULL	1	1
df[tmp[df$title] == TRUE,]$title <- 'Other'	1	1
as.numeric(cm_LR_ubal$byClass[2]), # Specificity	1	1
"a <- nzchar(Cabin); table(a)[""FALSE""]"	1	1
"mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"",""Name"",""Ticket"",""Cabin"",""Family"",""Surname"",""Survived"")], method = ""rf"")"	1	1
val_m$FamilySize = val_m$SibSp + val_m$Parch +1	1	1
fullComb[fullComb$Pclass == '3' & fullComb$Embarked == 'S', ],	1	1
ntbt(ctree, as.factor(survived) ~ .)	1	1
"database_output <- read.csv(""test.csv"", na.strings = c(""""))"	1	1
"test[, Cabin := factor(gsub("" "", """", Cabin))]"	1	1
df[-idx,]	1	1
options(digits = 3)	1	1
train$parentyn[which(train[,8]>0)]<-1	1	1
full$familySize <- full$SibSp + full$Parch + 1	1	1
combi$Cabin[combi$Cabin %in% c('E')] <- 'E'	1	1
columns.to.remove <- c('Name', 'Cabin', 'Ticket')	1	1
levels(train1$Pclass)	1	1
data.frame(target,pred)->accuracy_tab	1	1
combined$Age, freq=F, main='Age: Original Data',	1	1
train_refined=train_refined[,c(1,2,3,5,6,7,8,10)]	1	1
table(my_df$Group, my_df$Survived)	1	1
filter(Age >= 0) %>%	1	1
"missage<-mean(test$Age[which(test$Name==""Miss."")],trim=.5,na.rm=TRUE)"	1	1
full$Title <- gsub('(.*, )|(\\.\\s.*)', '', full$Name)	1	1
"test[grepl(""Ms"",Name) & is.na(Age),Age:=miss]"	1	1
checkCorr$Embarked  <- as.numeric(checkCorr$Embarked)	1	1
knn_test$Mother <- factor(knn_test$Mother, labels = c('0','1'))	1	1
combi$Title[combi$Title %in% c('Mlle', 'Ms')] = 'Miss'	1	1
"test <- df_combined[892:1309,c(""Pclass"",""Sex"",""Age"",""SibSp"",""Parch"",""Fare"",""Embarked"",""Title"",""Family_Member_Count"",""Parent"")]"	1	1
train.mice[, .(PassengerId, Cabin, log.Age, Embarked)]	1	1
prop.table(table(train$Child, train$Survived), 1)	1	1
testSize <- nrow(train) - trainSize	1	1
combined.df$Embarked[is.na(combined.df$Embarked)] <- 'S'	1	1
"(which(is.na(train$Embarked == """")))"	1	1
summary(testData)	1	1
train.data2$Title <- factor(train.data2$Title)	1	1
data_train$PassengerId <- NULL	1	1
train_refined[1:625,]	1	1
"data.imp=cbind(data[,c(""PassengerId"", ""Survived"",""Name"", ""Ticket"",""Cabin"")], data.mice)"	1	1
train$farediv[which(train[,10]>20)]<-2	1	1
Titanic_data$Title[Titanic_data$Title=='Major']='Mr'	1	1
mice_corr$Age, freq=F, main='Age: MICE imputation',	1	1
sum(is.na(train$Pclass))	1	1
n_incorrect <- sum(pred_survived != val_df$Survived, na.rm = TRUE)	1	1
hist(train$Age[train$Pclass == 3], breaks = length(unique(train$Age)))	1	1
full$Title	1	1
train_x[, Cabin_Letter := NULL]	1	1
solution <- data.frame(PassengerID = test.raw$PassengerId, Survived = round(p))	1	1
"mod.name = c(""all"", ""trim"")"	1	1
"train$Embarked[c(62, 830)] <- ""S"""	1	1
train$family_size <- train$SibSp + train$Parch + 1	1	1
age_na_rows = which(is.na(age))	1	1
fullComb$Fare[1044] <- median(fullComb$Fare, na.rm=TRUE)	1	1
sapply(test.raw, function(x) length(unique(x)))	1	1
print(SVM_model)	1	1
full$Name	1	1
"fits = lapply(1:length(mods), function(i) as.numeric(attr(predict(mods[[i]], newdata = X, probability = TRUE), ""probabilities"")[,2]))"	1	1
geom_vline(aes(xintercept=median(Fare, na.rm=T)), colour='red', linetype='dashed', lwd=1) +	1	1
full[full$isTrain== FALSE,]	1	1
MissingAge$Title != 'Master', ACabins,	1	1
all <- data.frame(predict(dmy, newdata = all))	1	1
doe$eta[i],	1	1
median(thirdclass$Fare , na.rm = TRUE)	1	1
mean(age.data$Age[age.data$FamSize==3]),	1	1
split.screen(c(1,2))	1	1
full$Embarked <- as.factor(full$Embarked)	1	1
cTest$Sex <- as.factor(cTest$Sex)	1	1
doe[layers == 1, prop := 1]	1	1
test$Survived <- predict(rf_model, test)	1	1
d <- train %>% select(Age, Survived) %>% filter(!is.na(Age))	1	1
levels(full_data$Survived) <- make.names(levels(factor(full_data$Survived)))	1	1
levels(test_data_set$family) <- levels(new_train$family)	1	1
train$Age,	1	1
Exit[6] <-  sum(is.na(VECTOR))	1	1
print(ls())	1	1
knn_train$Child <- factor(knn_train$Child, labels = c('0','1'))	1	1
train.nn[, Survived := as.numeric(as.character(Survived))]	1	1
levels(test$title)	1	1
testdata$Survived=NA	1	1
"CleanTotal$lFare > 2.068, ""Med"", ""Low"""	1	1
filter(combined, is.na(Fare))	1	1
"train_new$Cabin[train_new$Cabin == """"] <- ""H"""	1	1
train_df_$Name <- as.character(train_df_$Name)	1	1
train$Cabinsize<- nchar(as.character(train$Cabin))==0	1	1
"left_join(avFare,by = c(""Pclass"" = ""Pclass"",""Embarked"" = ""Embarked"")) %>%"	1	1
mod.dat[, SibSp.2 := SibSp^2]	1	1
"titanic[a1, ""Fare""] <- Impute.fare$median"	1	1
tot$Fare[tot$Fare==0&tot$Pclass==i]<-median(tot$Fare[tot$Pclass %in% c(i)], na.rm=TRUE)	1	1
y1<-rep(get.ys(struct[layer2])[h.layer],struct[layer1])	1	1
"ages = na.omit(age_title[which(age_title$Title == title_to_get), ""Age""])"	1	1
"train_x = train[,-which(names(train) %in% c(""Survived_F""))]"	1	1
"allData$Title[allData$Title %in% obscure] <- ""Obscure"""	1	1
full$quote[is.na(full$quote)] <- NaN	1	1
recall_test = confusion.mat_test[2,2]/sum(confusion.mat_test[2,])	1	1
aggregate(train[,2], list(train[,3]), mean)	1	1
famIDs <- data.frame(table(full$FamilyID ))	1	1
data$Title[data$Title == 'Mme'] <- 'Mrs'	1	1
vdf$Survived	1	1
"c(""age"", ""gender"", ""fare_grade""),"	1	1
new_titanic$Embarked<-as.numeric(factor(new_titanic$Embarked))	1	1
full[full$cabin_deck %in% c('C', 'F'), ]$cabin_deck <- 'CF'	1	1
rpart_imputation$Age[missing_age_indexes] <- imputed_age	1	1
fits = list(as.numeric(sl.mod$SL.predict))	1	1
output = as.matrix(output)	1	1
new_titanic<-titanic[,c(2,3,5,6,7,8,10,12)]	1	1
"hist(tst_m$Age, freq= FALSE, main = ""Test Data:  Original Age"", ylim = c(0,0.045))"	1	1
geom_bar(aes(fill=as.factor(Survived))) +	1	1
mean(test$Age[test$Sex =='male'],na.rm = TRUE),	1	1
full$FsizeD[full$Fsize > 5] <- 'large'	1	1
"titanic.test           <- titanic.test[,-grep(""Survived"", names(titanic.test))]"	1	1
mean(age.data$Age[age.data$Pclass==2]),	1	1
summary(age_prediction)	1	1
full_data$Sex = as.factor(full_data$Sex)	1	1
full$Title <- sapply(full$Name, FUN = function(x) { strsplit(x, split = '[,.]')[[1]][2] } )	1	1
"a3 <- which(titanic[,""Pclass""] == 1)"	1	1
length(testPredictions)	1	1
Titanic_data$Title[Titanic_data$Title=='Don']='Mr'	1	1
k=round(1+log2(nrow(x)))	1	1
test[, Cabin := factor(substring(Cabin, 1, 1))]	1	1
names.first <- lapply(names.split2, FUN = function(x) {ifelse(length(x) > 2, paste(x[[2]], x[[3]]), x[[2]])}) %>% unlist()	1	1
group_by(Surname) %>%	1	1
write.csv(data.frame(solution),file = 'my solution.csv',row.names= F)	1	1
unique(as.factor(regmatches(whole.data$Name, m)))	1	1
train$Sex[female] <- 0	1	1
summary(model_glm)	1	1
test$Survived[test$Sex=='female']<-1	1	1
train$farediv[which(train[,10]>30)]<-2	1	1
colSums(full=='')	1	1
bias.x<-layer.x[-length(layer.x)]+diff(layer.x)/2	1	1
data_test$Embarked <- as.factor(data_test$Embarked)	1	1
full%>%group_by(Ticket)%>%count()->freq;	1	1
as.numeric(cm_LR_bal$byClass[2]), # Specificity	1	1
vars$variables	1	1
doe$nrounds[i],	1	1
"train<-data.table(read.csv(""../input/train.csv"",stringsAsFactors=F))"	1	1
table(DstTrainClean$Sex, DstTrainClean$Title)	1	1
df_combined$Embarked[c(62, 830)] <- 'C'	1	1
sum(is.na(combined$Fare))	1	1
print(paste('Accuracy',1-misClasificError_logit)) #0.774	1	1
d<-data.frame(PassengerId = test$PassengerId, Survived = predict_rf)	1	1
Survived<-as.numeric(levels(rpred)[rpred])	1	1
df$title <-trimws(titles$A2)	1	1
"full$Age_Category <- ifelse(full$Age <= 10, ""Child"", full$Age_Category)"	1	1
dim(dat)	1	1
prediction[, i] <- predict(rfmod[[i]], newdata=devset[, -1, drop=F])	1	1
print('Proportion Table: TRUE = Age is missing  X  Survived = 1 if survived')	1	1
"train$Embarked_C<-as.logical(train$Embarked==""C"")"	1	1
RareTitles <-c('Capt','Col','Dona','Dr','Jonkheer','Lady','Major','Sir','the Countess')	1	1
data[is.na(data$Fare),'Fare']=tapply(data$Fare, data$Pclass, function(x) median(x, na.rm=T))[data[is.na(data$Fare),'Pclass']]	1	1
"full$Embarked_C<-as.logical(full$Embarked==""C"")"	1	1
"cols_for_age_imp = c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")"	1	1
Features$Age[is.na(Features$Age)] <- meanAge	1	1
summary(titanic$Embarked)	1	1
DataBind$Title[DataBind$Title == 'Ms']  <-'Miss'	1	1
fol= formula( as.factor(Survived) ~ Pclass + Age + Sex + Parch + SibSp + Fare + Embarked)	1	1
dt<-table(train$Survived,train$Pclass)	1	1
"title <- unique(gsub(""^.+, (.+?)\\. .+$"", ""\\1"", full$Name))"	1	1
tot$Survived<-as.factor(tot$Survived)	1	1
subset(full,is.na(Fare))	1	1
sum(Titanic_train$Survived == 0)	1	1
totalrows <- nrow(full[full$isTrain,])	1	1
full$Fam.size <- full$SibSp + full$Parch + 1	1	1
train$Sex<- as.factor(train$Sex)	1	1
"titanic$Fare, main=""Fare (Precio del ticket)"", xlab = NULL,"	1	1
Exit <- cbind(DATA_NON_NUM,DATA_NUM)	1	1
levels(train1$Survived)	1	1
sum(is.na(Embarked))	1	1
full$Age2[full$Age>32& full$Age<=48] = 3	1	1
total  <- bind_rows(train, test)	1	1
member <- data.frame()	1	1
full$Title = as.numeric(as.factor(full$Title))-1	1	1
"levels(data$Sex) <- c(""Female"", ""Male"")"	1	1
summary(final_ens_model)	1	1
data_test$Ticket <- NULL	1	1
doe$min_child_weight[i],	1	1
Data[inTrain,]	1	1
full$familySize[full$familySize < 5 & full$familySize > 1] <- 'small'	1	1
class(train_data$Survived)	1	1
which(is.na(combi$SibSp))	1	1
round(prop.table(table(train$Title, train$Survived), 1),2)	1	1
full[!(Title %in% c('Master', 'Miss', 'Mr', 'Mrs')), Title := 'Other']	1	1
train_df_$Cabin <- as.character(train_df_$Cabin)	1	1
full.data[1:891,]	1	1
tot[892:1309,]	1	1
indata$size = indata$SibSp + indata$Parch + 1	1	1
"preProcValues <- preProcess(ImputeTrain, method = c(""knnImpute""))"	1	1
"names(genderImpact) <- c(""Sex"",""Survived"",""Count"")"	1	1
class(train1)	1	1
"levels(data_train$Survived) <- c(""Não"", ""Sim"")"	1	1
fulldata$Deck=as.factor(fulldata$Deck)	1	1
Xtestset<-testset[,c(-1,-3,-8,-10)]	1	1
summary(train$SibSp)	1	1
rf_model <- randomForest(data = train,factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Child + Mother)	1	1
"print(""Survival of people who have parents/children aboard"")"	1	1
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = prediction)	1	1
trn_m$Age_Bin = cut(trn_m$Age_comp_MICE, breaks = c(0, 1, 12, 18, 60, 200))	1	1
"masterage<-mean(test$Age[which(test$Name==""Master."")],trim=.5,na.rm=TRUE)"	1	1
print(importance)	1	1
full$quote[full$quote < 0.5] <- 0	1	1
solution <- data.frame(PassengerID = test$PassengerId, Survived = as.integer(prediction > 0.3))	1	1
test[, Category := 'test']	1	1
mean(age.data$Age[age.data$FamSize==2]),	1	1
d <- train %>% select(Survived, Pclass)	1	1
fare_miss <- subset(my_df, PassengerId == 1044)	1	1
combine$Embarked<-as.character(combine$Embarked)	1	1
titanic$Title <- sub(' ', '', titanic$Title)	1	1
full_data$AgeRange[full_data$Age > 50] <- 'greaterthan50'	1	1
tot$Fare[is.na(tot$Fare)]<-median(tot$Fare[tot$Pclass %in% c(3)], na.rm=TRUE)	1	1
tst_m$Age_Bin = cut(tst_m$Age_comp_MICE, breaks = c(0, 1, 12, 18, 60, 200))	1	1
mean_female<-mean(train_female$Age, na.rm=TRUE)	1	1
df$Pclass <- as.factor(df$Pclass)	1	1
svm_model<-svm(factor(Survived)~.,data=train_clean,kernel='linear')	1	1
DstTestClean$TitleType <- ifelse(DstTestClean$Title %in% Nobility.woman, 'Nobility.woman','')	1	1
y.names<-paste0(rep('Y',struct[3]),seq(1:struct[3]))	1	1
submit<-data.frame(test$PassengerId,test$Survival)	1	1
"my.pred[""Embarked"",] = as.numeric(colnames(my.pred) %in% embark.regressors)"	1	1
knn_train$Sex = NULL	1	1
age.data$FamSize <- age.data$SibSp + age.data$Parch	1	1
print(head(submission, n=10))	1	1
test.data2$Sex <- factor(test.data2$Sex)	1	1
svm.pred = function(Xtrain, Ytrain, Xtest, Ytest, negative, gamma, nu, cutoff)	1	1
full$Cabin2 = substr(full$Cabin,1,1)	1	1
fulldata$isFemale[fulldata$Sex == 'female' & (fulldata$Parch > 0 | fulldata$TicketGroupSize>1 | fulldata$FamilynameSize>1) & fulldata$Age > 18 & fulldata$Title != 'Miss'] <- 1	1	1
minDepth = min(as.numeric(topDepths))	1	1
submit <- select(submit,PassengerId,Survived )	1	1
table(Parch)	1	1
data.train[,'Age'] <- data.global[1:dim(data.train)[1], 'Age']	1	1
data.clean$Fare.Group <- cut_number(data.clean$Fare, 8)	1	1
date()	1	1
roc_LR_ubal <- roc(val_m$Survived, as.numeric(p_LR_ubal)-1)	1	1
print(boruta.formula)	1	1
"d.all <- cbind(d.init.predict, ""Survived"" = factor(NA, levels = c(0,1))) %>% rbind(d.init.model)"	1	1
combine$Fare<-as.numeric(as.character(combine$Fare))	1	1
df_test$Fare[is.na(df_test$Fare)] <- mean(df_test$Fare,na.rm=T)	1	1
train=read.table('../input/train.csv', sep=',', header=T)	1	1
"cat(""water"")"	1	1
ggtitle(paste('Threshold: ', threshold, ' - ', 'F1-score: ', round(F1.max,3) )) +	1	1
summary(combi$Fare)	1	1
summary(train$Cabin_Letter)	1	1
data.combined$Survived=as.factor(data.combined$Survived)	1	1
if(is.logical(all.out)) all.out<-1:struct[length(struct)]	1	1
train[, SibSp.2 := SibSp^2]	1	1
test1$Survived=predict(final_ens_model,test1)	1	1
data$Title[data$Title == 'Ms']  <- 'Miss'	1	1
combined$Title[combined$Title %in% rare_title]  <- 'Rare_Title'	1	1
allData$Embarked[1:891]	1	1
Fare = if_else(is.na(Fare),round(AvFare,0),Fare),	1	1
train[,var]	1	1
titanic$Embarked <- factor(titanic$Embarked)	1	1
train$Age[is.na(train$Age)]=121	1	1
"tf$Survived[tf$Sex==""female""]<- 1"	1	1
"cor.dat = data.table(mod.dat[,!""Embarked""])"	1	1
data$Age_Group[data$Age <= 30 & data$Age > 20] <- 'Young'	1	1
cat(paste('We have ', nlevels(factor(full$Surname)), ' unique surnames.'))	1	1
summary(D1)	1	1
"full$Age_Category <- ifelse(full$Age > 22 & full$Age <= 35, ""Adult"", full$Age_Category)"	1	1
"others = c(""Don"", ""Rev"", ""Dr"", ""Major"", ""Lady"", ""Sir"", ""Col"", ""Capt"", ""the Countess"", ""Jonkheer"", ""Dona"")"	1	1
deck <- rep(NA, length(cabin))	1	1
"best_var <- c(""age"", ""gender"", ""Fare"", ""family"", ""title"", ""pclass"", ""embarked"", ""ticket_str"", ""cabin_deck"")"	1	1
sapply(combine,function(x) sum(is.na(x)))	1	1
Titanic_data$Title[Titanic_data$Title=='Mme']='Miss'	1	1
modTestData$PassengerId,	1	1
names(data)	1	1
full[which(is.na(full$Survived)),2] <- 0 #addressing NA values due to combining of train and test datasets	1	1
titles <- df %>% select('Name') %>%	1	1
full$cabin_deck <- toupper(substring(full$Cabin, 1, 1))	1	1
train$Embarked <- factor(train$Embarked )	1	1
print(pred)	1	1
train[-index,]	1	1
full.data[892:1309,]	1	1
full$RareTitle<- full$Title	1	1
data[[i]] <- cbind(train$Survived, data[[i]])	1	1
select(arrange(by_Sex_Age, Age_Bin_Order.y),Age_Bin,Sex, Chance, -Age_Bin_Order.y, -Age_Bin_Order.x, -Total.x, -Total.y)	1	1
full_data$FareRange[full_data$Fare <30 & full_data$Fare >= 20] <- 'bw20and30'	1	1
wts.rs<-wts.rs[grep('out',names(wts.rs))]	1	1
testing$Survived<-NA	1	1
y0<-rep(get.ys(struct[layer1])[all.in],struct[2])	1	1
full2[892:1309,]	1	1
regras <- eclat(data_train, parameter = list(supp = 0.1, maxlen = 5))	1	1
as.numeric(cm_RF_ubal$overall[1]), # Accuracy	1	1
total_age <- train_tbl_with_age %>% group_by(Age_Bin,Age_Bin_Order) %>% summarise(Total = n())	1	1
summary(modelDiff)	1	1
"hist(val_m$Age_comp_MICE, freq= FALSE, main = ""Validation Data: Age via MICE"", ylim = c(0,0.045))"	1	1
train$siblingyn[which(train[,7]>0)]<-1	1	1
full$familyID2 <- as.character(full$familyID2)	1	1
test.survived=test.survived[,c(2,1,3:12)]	1	1
titanic2$Fare2 <- '30+'	1	1
full[full$PassengerId[is.na(full$Fare)],]	1	1
full[full$isTrain,][!trainrows,]	1	1
y.names<-attr(terms(mod.in),'factor')	1	1
solution <- data.frame(PassengerID = test2$PassengerId, Survived = prediction)	1	1
pen.coef = data.table(term = rownames(pen.coef), coefficient = as.numeric(pen.coef))	1	1
train$Embarked[which(is.na(train$Embarked))] = 'S'	1	1
database <- database[c(3,5,6,7,8,10,12,2)] # removed passenger is, name, ticket and cabin number	1	1
val_m$Embarked = factor(val_m$Embarked)	1	1
tot$FamilyAboardS<-1+tot$SibSp+tot$Parch #Count familysize	1	1
missing_values<-c(length(which(is.na(titanic$PassengerId))),length(which(is.na(titanic$Pclass))),length(which(is.na(titanic$Sex))),length(which(is.na(titanic$Age))),length(which(is.na(titanic$SibSp))),length(which(is.na(titanic$Parch))),length(which(is.na(titanic$Ticket))), length(which(is.na(titanic$Fare))),length(which(titanic$Cabin=='')),length(which(titanic$Embarked=='')))	1	1
idx1 <- sample(1:N.train, N.train*pct1) #training set	1	1
"mod.dat[, c(""Pclass3"", ""Sexmale.Age"", ""SibSp"") := NULL]"	1	1
data_test$Name <- NULL	1	1
"table(full$Survived, full$cabin_deck, useNA=""ifany"")"	1	1
full$embarked <- as.factor(full$Embarked)	1	1
train[, Sexmale.Fare := model.matrix(~Sex:Fare, data = train)[,3]]	1	1
train$Age[ind]<-as.numeric(Imputed_age)	1	1
full_clean[-(1:891),]	1	1
"database <- read.csv(""train.csv"", na.strings = c(""""))"	1	1
data_train$Parch <- NULL	1	1
fullComb$Child[fullComb$Age < 16] <- 'Child'	1	1
full$Fare2[full$Fare>31] = 4	1	1
dim(traintest.data)	1	1
rm(list = ls())	1	1
levels(train$Name)	1	1
submission <- data.frame(PassengerId = testing$PassengerId)	1	1
nrow(data.combined)	1	1
"completeTrain$AgeRange[completeTrain$Age <= 16] <- ""kid"""	1	1
as.matrix(testData[1:35, predictorVar])	1	1
combined$Fam_SizeD[combined$FamSize == 1] <- 'single'	1	1
Age_impute$Agegroup2<-cut(Age_impute$Age, seq(0,80,10), labels=c(1:8))	1	1
train[i,6] <- 25	1	1
"nn.diag[, mod := rep(""nn"", nrow(nn.diag))]"	1	1
"freq<-as.data.frame(table(combine[,c(""fare.range"",""Survived"")]))"	1	1
print(rfBoruta.fit$finalModel)	1	1
for (i in factor_var) {full[,i]<-as.factor(full[,i])}	1	1
full_data$Survived <- as.factor(full_data$Survived)	1	1
trn_m$Sex = factor(trn_m$Sex)	1	1
trainset[,-1]	1	1
v <- c(0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0)	1	1
train[i,6] <- 29	1	1
"varsToKeep <- c(""Survived"", ""Sex"", ""TitleType"", ""Age"", ""Pclass"", ""Fare"", ""Embarked"", ""SibSp"")"	1	1
matrizconf<-table(predicted_train_nb, train_nb$Survived_f)	1	1
data[1:800,]	1	1
test.nn[, rescale.Age := rescale(Age, to = c(0, 1), from = range(train$Age))]	1	1
full_data$FareRange = as.factor(full_data$FareRange)	1	1
"ttrain <- train[part,!names(train)==""cat""]"	1	1
whole.data[,'Title'] <- regmatches(whole.data$Name, m)	1	1
my.train.data <- my.train.data[, !names(my.train.data) %in% drop.cols]	1	1
table(test$Sex)	1	1
which(titanic$Embarked == '')	1	1
hist(train$Age[train$Survived == 0], breaks = length(unique(train$Age)))	1	1
train%>%group_by(Survived)%>%count->freq;	1	1
class(train$Survived)	1	1
summary(d.all)	1	1
vars$control$functions$selectVar(selectedVars, 8)	1	1
detach()	1	1
summary(full$Age)	1	1
test.data2$Title <- factor(test.data2$Title)	1	1
combine$tittle<-as.character(combine$tittle)	1	1
cTrain$FsizeD <- as.factor(cTrain$FsizeD)	1	1
wts<-wts[grep('out',names(wts),invert=T)]	1	1
test$Age[is.na(test$Age)] <- mean(test$Age,na.rm=T)	1	1
test.data$SurvivedGender <- 0	1	1
whole.data[whole.data$FamilySize > 4,'FamilyGroup'] <- 'large'	1	1
table(full_data$familysize)	1	1
ans_rf_predict[i] = as.integer(rf_predict[[i]]) - 1	1	1
full$Age_Category <- NA	1	1
"log.fare.1.regressors = c(""Pclass"", ""SibSp"", ""Parch"")"	1	1
select(PassengerId, Pclass, Sex, age_minor, Fare, cabin_code, Embarked)	1	1
confusion.mat_train <- table(train_data$Survived,pred_class)	1	1
table(df$Survived,df$Pclass) #Summary of passenger vs. class	1	1
"names(sumif)[names(sumif)==""Age""]<-""mean.tittle"""	1	1
knn_test$familyID2 <- factor(knn_test$familyID2, labels = c(1:20))	1	1
trainSize <- round(nrow(train)*0.70)	1	1
corM<-tot[,c('Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'FamilyAboardS')]	1	1
"database_test <- read.csv(""test.csv"", na.strings = c(""""))"	1	1
data$Title[data$Title %in% other] <- 'OTHER'	1	1
mods.list$sl = sl.list	1	1
total$Title[total$Title == 'Ms']          <- 'Miss'	1	1
summary(train_imp$imp$Age)	1	1
droplevels()	1	1
print(f)	1	1
levels(test_data_set$sex) <- levels(new_train$sex)	1	1
"rf.train <- data.combined[1:891,c(""Pclass"",""title"",""Parch"")]"	1	1
struct.out<-unlist(lapply(mod.in$weights[[1]],ncol))	1	1
test[,Survived:='none']	1	1
survived_age <- train_tbl_with_age %>% filter(Survived == 1) %>% group_by(Age_Bin,Age_Bin_Order) %>% summarise(Survived = n())	1	1
"train<-merge(train,NTicket,by=""Ticket"",all.x=""TRUE"")"	1	1
combi$TitleCat[combi$Title %in% c('Mlle', 'Miss')] <- 'Miss'	1	1
data[,ivar] <- mice_output[,ivar]	1	1
train_data$Age[ib] <- median(train_data$Age,na.rm=TRUE)	1	1
aggregate(train[,2], list(train[,12]), length)	1	1
table(predict_svm)	1	1
mutate(FamSize = SibSp + Parch)	1	1
g2 <- data.frame(Age=test_titanic$Age, Cabin=test_titanic$Cabin, SibSp=test_titanic$Age, Parch=test_titanic$Parch, Sex=test_titanic$Sex, Pclass=test_titanic$Pclass)	1	1
scale_x_discrete(breaks=c('C','Q','S')) +	1	1
trn_cnt = as.numeric(table(train$Survived_F)[1]*2)	1	1
combine$rownum<-c(1:nrow(combine))	1	1
data$Fare[1044] <- median(data[data$Pclass == '3' & data$Embarked == 'S', ]$Fare, na.rm = TRUE)	1	1
"test.edit[test.edit$tittle==""Dona."",]$tittle<-""Lady."""	1	1
if(is.numeric(VECTOR))	1	1
print('Sex')	1	1
trClean[is.na(trClean$Survived),]	1	1
"full[full$title %in% pros, ]$title <- ""pros"""	1	1
train$ThirdClass<-as.logical(train$Pclass==3)	1	1
"full_data$Embarked[full_data$Embarked==""""]=""S"""	1	1
summary(my_decision_tree)	1	1
newScore = (result[1,1] + result[2,2]) / sum(result)	1	1
all$Name = as.character(all$Name)	1	1
summary(df,exact_quantiles=TRUE)	1	1
output = data.frame(PassengerId = test$PassengerId, Survived = pred_dt)	1	1
data$Fare_Per_Person <- data$Fare/as.numeric(data$FamilySize)	1	1
table(trn_m$Sex,trn_m$Survived)	1	1
empty <- as.integer(matrix(0, nrow = 418))	1	1
prop.table(table(full$Parch,full$Survived),1)	1	1
summary(rValues)	1	1
results.table <- table(y_predict, train_data$Survived)	1	1
titanic[!is.na(titanic$Survived),]	1	1
"full$familyID <- paste(as.character(full$familySize), full$Surname, sep = """")"	1	1
"split_after_title = strsplit(part_with_title, ""[.]"")"	1	1
print('Proportion Table: TRUE = Cabin/Deck is missing  X  Pclass = 1 is first class')	1	1
"names(cabinImpact) <- c(""Survived"",""Cabin"",""Count"")"	1	1
"Head_family_summary <- train %>% filter(Title ==""Mr."") %>%"	1	1
train[, Cabin := train.mice$Cabin]	1	1
select(Survived, Cabin, survivalrate) %>%	1	1
"mutate(title=ifelse(title_frequency < 10, ""rare"", title))"	1	1
test$isTrain <- F	1	1
full$ticket_num <- as.numeric(full$ticket_num)	1	1
cTest$Title <- as.factor(cTest$Title)	1	1
train$Embarked=as.character(train$Embarked)	1	1
full_data$AgeRange[full_data$Age <=50 & full_data$Age > 25] <- 'bw25and50'	1	1
combined$Embarked[c(62, 830)] <- 'C'	1	1
id <- full[which(is.na(full$Fare)), 1]	1	1
"test_na <- sapply(test, function(x)sum(is.na(x)|x=="""")) #test"	1	1
train_data$Fare[ib] <- median(train_data$Fare,na.rm=TRUE)	1	1
output <- data.frame(PassengerID = test$PassengerId, Survived = my_prediction)	1	1
assign('bias',F,envir=environment(nnet.vals))	1	1
median(combined[combined$Pclass == '3' & combined$Embarked == 'S', ]$Fare, na.rm = TRUE)	1	1
my_df[factors] <- lapply(my_df[factors], as.factor)	1	1
summarise(missing_fare = median(Fare, na.rm = TRUE))	1	1
sum(Titanic_train$Survived == 1)	1	1
CleanTotal$Age <- ifelse(is.na(CleanTotal$Age.x), CleanTotal$Age.y, CleanTotal$Age.x)	1	1
train_df$Age <- ifelse(is.na(train_df$Age), avg_age, train_df$Age)	1	1
gbm.tune$bestTune	1	1
N.train <- (dim(TRAIN)[1])	1	1
df[idx,]	1	1
full_data[1044, ]	1	1
ind<-which(is.na(full$Fare))	1	1
full$Title[full$Title %in% rare] <- 'Rare Title'	1	1
"table(trn_m[,c(""Pclass"", ""HasCabin"")])"	1	1
"full$Family <- paste(full$Surname, full$Fsize, sep=""_"")"	1	1
"rf.list = list(""mod"" = rf.mod, ""cutoff"" = cuts[4])"	1	1
colSums(is.na(traintest.data))	1	1
trainset$Cabin <- NULL	1	1
"trainset_1$Survived<-gsub(""1"",""Survived"",trainset_1$Survived)"	1	1
test_data[,2]	1	1
trSharedSurname <- mergedData[!is.na(mergedData$Survived),] %>% group_by(sharedSurname) %>% summarize(cnt=n(),surv=mean(Survived)) %>% arrange(-cnt) %>% as.data.frame()	1	1
df_combined$Age <- mice_output$Age	1	1
"train = mod.dat[, c(""Survived"", survived.regressors), with = FALSE]"	1	1
full$family <- full$SibSp + full$Parch + 1	1	1
pdf <- data.frame(F = testingSet$Survived, P = as.integer(prediction > 0.3))	1	1
hues = seq(15, 375, length = n + 1)	1	1
test_data[,Survived:=NULL]	1	1
trClean$title <- as.factor(trClean$title)	1	1
check<-rbind(check, data.frame(mtry=i, nodesize=j, ntrees=k, OOB=mod$err.rate[nrow(mod$err.rate),1]))	1	1
pvalue= double(),	1	1
"test_data$Age[is.na(test_data$Age)&test_data$Sex==""female""]<-mean_female"	1	1
DstTestClean$TitleType <- ifelse(DstTestClean$Title %in% Passenger.woman, 'Passenger.woman',DstTestClean$TitleType)	1	1
"train$Age[grepl(""Master\\."", train$Name) & is.na(train$Age)] = mean.master"	1	1
total$Title <- gsub('(.*, )|(\\..*)', '', total$Name)	1	1
predTwo<-data.table(Survived=predict(object = modelTwo,test_data))	1	1
class(test$AvgProb)	1	1
factor_variables <- c('PassengerId','Pclass','Sex','Embarked', 'FamilySize')	1	1
"survived.regressors = c(""Sexmale"", ""Sexmale.Fare"", ""Pclass3.Age"", ""Age"", ""Fare"", ""Pclass3.Fare"", ""Sexmale.EmbarkedS"", ""Pclass3.EmbarkedS"", ""SibSp.2"")"	1	1
"test[grepl(""Master"",Name) & is.na(Age),Age:=master]"	1	1
full$Age2[full$Age>64] = 5	1	1
ggcolor = function(n)	1	1
whole.data[whole.data$FamilySize == 1,'FamilyGroup'] <- 'single'	1	1
submission$test_model[submission$test_model>.5]<- 1	1	1
fulldata[, names(fulldata) %in% c('Pclass','Deck','Embarked','Fare')]=  fulldata[, names(fulldata) %in% c('Pclass','Deck','Embarked','Fare')] %>%	1	1
df_combined$Title[df_combined$Title %in% other_title] <- 'Other'	1	1
pTable <- data.frame(test$PassengerId, as.integer(predictedTestSurvival), )	1	1
d<-data.frame(PassengerId = test$PassengerId, Survived = predict_logit)	1	1
"completeTrain$AgeRange[completeTrain$Age > 60] <- ""elderly"""	1	1
validation <- train[624:nrow(train),]	1	1
AUC = double(), Accuracy= double(),	1	1
table(full$FamilyID)	1	1
allData$Fare[is.na(allData$Fare)] <- mean(allData$Fare, na.rm=TRUE)	1	1
df[!is.na(df$Cabin),]$has_cabin <- 1	1	1
table(trn_m$Embarked)/sum(table(trn_m$Embarked))	1	1
Titanic_data$Title[Titanic_data$Title=='Dona']='Mr'	1	1
full_data$FareRange[full_data$Fare >= 30] <- 'morethan30'	1	1
tmp[tmp$`Actual Outcome` == 1,]$`Actual Outcome` <- 'Survived'	1	1
"miss<-test[grepl(""Miss"",Name),mean(Age,na.rm=T)]"	1	1
PctRf=sum(RfSurvived == Survived)/length(Survived),	1	1
"table(trn_m[,c(""NonFC_wCabin"", ""Survived"")])"	1	1
"test.mice = data.table(complete(imputations, action = ""long""))"	1	1
third_class_test <- filter(test, Pclass == 3)	1	1
svm.model <- ksvm(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Fsize + Age2 + Fare2 + Alone + FamilyID +Cabin2 +Ticket_Pre +Ticket_Num,data = train2,prob.model=TRUE)	1	1
"ls(""../input/"")"	1	1
df.train3  %>% select(-PassengerId)  %>% pairs(upper.panel = panel.cor)	1	1
svm.diag = foreach(i = 1:nrow(doe)) %do%	1	1
output = output[, lapply(.SD, function(x) summary(na.omit(x)))]	1	1
"colnames(predictions_rf2) <- c(""PassengerId"",""Survived"")"	1	1
t <- table(mergedData$surname)	1	1
trClean$sharedCabin <- as.factor(trClean$sharedCabin)	1	1
full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Survived')],	1	1
data$FamSize <- data$SibSp + data$Parch	1	1
knn_test$Pclass <- (knn_test$Pclass - min_class) / (max_class - min_class)	1	1
mergedData$Ticket <- NULL	1	1
train_pred <- predict(sv_model, train[,-c(11)])	1	1
data.clean$Family <- data.clean$SibSp + data.clean$Parch	1	1
data_train$Fare <- as.factor(data_train$Fare)	1	1
"train_new$Cabin[train_new$Cabin == ""T""] <- ""H"""	1	1
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))	1	1
allData$Embarked[892:1309]	1	1
which(is.na(combi$Title))	1	1
"train$Cabin[ind]<-""Missing"""	1	1
levels(Titanic_test$Pclass) <- c('Upper', 'Middle', 'Lower')	1	1
accuracy_test = sum(diag(confusion.mat_test))/sum(confusion.mat_test)	1	1
"data$FamilyName <- gsub("",.*"","""",data$Name)"	1	1
quantile <- quantile(full$Fare, probs=seq(0, 1, 0.2), na.rm=T)	1	1
dim(test.data)	1	1
combine$Pclass<-as.character(combine$Pclass)	1	1
predict_rf = as.integer(predict_rf) - 1	1	1
knn_test$Age[i] <- mean(knn_test$Age, na.rm = TRUE)	1	1
Fare_by_Pclass <- full %>% group_by(Pclass) %>% summarise(median_Fare = median(Fare, na.rm=T) )	1	1
"colnames(my_solution) <- c(""PassengerId"", ""Survived"")"	1	1
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'	1	1
train[, Sexmale.EmbarkedS := model.matrix(~Sex:Embarked, data = train)[,7]]	1	1
train[, nums]	1	1
full$Fare[ind]<-11.4508	1	1
"if(MT2 == ""TRUE""){print(""The Test data set has missing values"")}"	1	1
print(survivalByAge)	1	1
mergedData$title <- gsub('(.*, )|(\\..*)', '', mergedData$Name)	1	1
pClassImpact <- data.frame(table(allData$Pclass, allData$Survived))	1	1
text(bp,20,labels=round((table(trn_m$Survived)/sum(table(trn_m$Survived)))*100,2))	1	1
valIndices = sample(1:rows, rows/k)	1	1
combi$Fare <- as.numeric(combi$Fare)	1	1
p_LR_bal <- ifelse(p_LR_bal > 0.5,1,0)	1	1
full$Survived <- factor( full$Survived )	1	1
titanic.train[,'flag'] <- 0	1	1
"fits = lapply(1:length(mods), function(i) as.numeric(predict(mods[[i]], type = ""prob"")[,2]))"	1	1
aggregate(train[,2], list(train$embdiv), length)	1	1
train_refined$Age[is.na(train_refined$Age)]=age_mean	1	1
trainset$Sex <- factor(trainset$Sex)	1	1
"factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"",""FsizeD"")"	1	1
cabintable = table(trn_m$Cabin)	1	1
train$Survived=as.factor(train$Survived)	1	1
raw_test$NumEmbarked <- as.numeric(factor(raw_test$Embarked,labels=c(1,2,3)))	1	1
jitter(rep(0, dim(data)[1])), col = data[,'Survived'] + 2,	1	1
Survived = factor(Survived),	1	1
full$Age, freq=F, xlab ='Passengers Age',main='Age: Original Data',	1	1
levels(train1$Survived)=make.names(levels(factor(train1$Survived)))	1	1
my_df$Group[my_df$Age >= 18 & my_df$Age < 65] <- 'Adult'	1	1
mod.dat[, Cabin := droplevels(Cabin)]	1	1
submission=cbind(test$PassengerId,test$Survived)	1	1
full_data$Age[is.na(full_data$Age)] <- predict(predicted_age, full_data[is.na(full_data$Age),])	1	1
"training=read.csv(file='!Original Data/train.csv',header=T,sep="","",na.strings=c(""NA"","" "",""""))"	1	1
data$Embarked[c(62, 830)] <- 'C'	1	1
attach(d.all)	1	1
high_rank_male <- c('Capt','Col','Don','Jonkheer','Rev','Sir')	1	1
group_by(Sex,Pclass,Parch) %>%	1	1
struct.out<-c(mod.in$nInputs,mod.in$archParams$size,mod.in$nOutputs)	1	1
"test$Survived<-rep(""NA"",nrow(test))"	1	1
tot$Age<-mice_v	1	1
full$underTen[full$Age < 10 & full$Age > 0] <- T	1	1
PAr <- c(training$Parch,test$Parch)	1	1
"DT = data.table(melt(pen.diag, id.vars = c(""stat"", ""name"", ""alpha"", ""mod"")))"	1	1
column = sapply(1:ncol(dat), function(i) colnames(dat)[i])	1	1
full$Title <- factor(full$Title)	1	1
print(missing)	1	1
data$Age_Group[data$Age <= 50 & data$Age > 40] <- 'Senior'	1	1
print(results.table)	1	1
pairs(data.train.use[, -c(1, 2)], col = as.numeric(data.train.use[, 2]) + 2, pch = 20)	1	1
bind_rows(trainData) %>%	1	1
train$agegroup[which(train[,6]>20)]<-1	1	1
sum(is.na(cleandata))	1	1
prediction <- as.data.frame(matrix(0, nrow=length(inDev_idx), ncol=length(var)))	1	1
print(avg_age)	1	1
precision_test = confusion.mat_test[2,2]/sum(confusion.mat_test[,2])	1	1
sum(Titanic_train1$Age < 10 & Titanic_train1$Survived == 1) / sum(Titanic_train1$Age < 10)	1	1
m <- length(y)	1	1
fulldata$Fare[fulldata$Fare==0]=NA	1	1
train[, Cabin := factor(substring(Cabin, 1, 1))]	1	1
full$FarePerPerson <- full$Fare/full$FamilySize	1	1
final.data <- data.frame(PassengerId = test.data1$PassengerId, Survived = rpart_prediction)	1	1
train$fareRange[train$Fare<20 & train$Fare>=10] <-'10-20'	1	1
test$Sex <-as.factor(test$Sex)	1	1
mean(age.data$Age[age.data$SibSp==2]),	1	1
df[-resampledataPart,]	1	1
test$Survived<-rep(c(0,1))	1	1
test$Survived <- predict(model, test, na.action = na.pass)	1	1
test$Title[test$Title == 'Mlle']        <- 'Miss'	1	1
full$Surname <- sapply(full$Name,  Splitter)	1	1
doe$ntree[i],	1	1
submission<-cbind(test_data$PassengerId,test_model)	1	1
mean(age.data$Age[age.data$SibSp==1]),	1	1
fits = lapply(1:length(mods), function(i) as.numeric(mods[[i]]$net.result[[1]]))	1	1
"destination_frames = c(""train.hex"", ""valid.hex"", ""test.hex""), seed = 1234"	1	1
titanic.test$Survived <- NA	1	1
sum(is.na(titanic$age))	1	1
train$Cabin2 <- as.factor(train$Cabin2)	1	1
full$SibSp = as.numeric(as.factor(full$SibSp))-1	1	1
fulldata$Groupticket=NA	1	1
"param = list(""objective""=""multi:softmax"",""num_class"" = 2,""eval_metric"" = ""mlogloss"")"	1	1
train$fareRange[train$Fare<30 & train$Fare>=20] <-'20-30'	1	1
count=sum(Age==age),	1	1
output[, nodesize := doe$nodesize[i]]	1	1
data$Title[data$Title == 'Dona']<- 'Mrs'	1	1
model <- C5.0(y = as.factor(trainingData[, respondVar]), x = as.matrix(trainingData[, predictorVar]))	1	1
table(data.clean$Age.Group, data.clean$Survived)	1	1
mod_test2$Survived <- Tree1Prediction	1	1
dim(full_data)	1	1
print(n_correct)	1	1
testset$Agegroup <- factor(testset$Embarked, exclude=NULL)	1	1
"nms <- c(""PassengerID"", ""Survived"")"	1	1
unique(DstTrain$Embarked)	1	1
"test$predXGBoost <- predict(bst, clnTst, type = ""response"")"	1	1
df$Sex=factor(df$Sex) #change the gender variable to a factor	1	1
names(test) <- tolower(names(test))	1	1
mod.dat[, survived.regressors, with = FALSE]	1	1
train_tbl_with_age <- select(train_tbl_with_age,PassengerId, Survived, Age_Bin, Sex, Age,  Age_Bin_Order)	1	1
aggregate(Survived ~ Child + Fare2 + Pclass + Sex, data=titanic2, FUN=function(x) {sum(x)/length(x)})	1	1
test[i,5] <- 40	1	1
train[i,6] <- 38	1	1
df_combined$Title <- factor(df_combined$Title)	1	1
precision_train <- confusion.mat_train[2,2]/sum(confusion.mat_train[,2])	1	1
full$Age<-cut(as.numeric(full$Age),breaks=c(0,1,seq(from=5,to=100,by=5)))	1	1
test$Title[test$Title == 'Ms']          <- 'Miss'	1	1
table(predictedSurvival,train$Survived)	1	1
full$familyID2 <- factor(full$familyID2)	1	1
"titanic.train$Survived <- factor(ifelse(titanic.train$Survived == 1, ""yes"", ""no""))"	1	1
"full_clean<-full[,c(""Male"",""FirstClass"",""ThirdClass"",""Embarked_C"",""Embarked_Q"",""Age"",""Fare"",""NAccompanied"",""Parch"",""SibSp"")]"	1	1
test$PassengerId->PassengerId	1	1
conf[2,3] <- conf[2,1] /(conf[2,1]+conf[2,2])	1	1
cTrain <- MLtrain[ , -c(1, 4, 9, 11, 12, 13, 15, 18)]	1	1
median_ages[i,j]<-test[Gender==i & Pclass==j,median(Age,na.rm=T)]	1	1
"test$Age[is.na(test$Age)&test$Name==""Mrs.""]<-mrsage"	1	1
train_data<-train_data[,Survived:=as.numeric(Survived)]	1	1
"test[, Cabin := factor(gsub(""[0-9]"", """", Cabin))]"	1	1
trClean[!is.na(trClean$Survived),]	1	1
mutate(rate=n/FamilySize)	1	1
submit <- data.frame(PassengerId = t$PassengerId, Survived = Prediction)	1	1
table(full$SibSp,full$Survived)	1	1
sum(is.na(my_df$Fare))	1	1
"mean.master <- mean(train$Age[train$Title == ""Master."" & !is.na(train$Age)])"	1	1
fullComb$Child  <- factor(fullComb$Child)	1	1
"rf.train <- data.combined[1:891,c(""Pclass"",""title"",""SibSp"",""Parch"")]"	1	1
select(PassengerId, Survived, Pclass, Sex, age_minor, Fare, cabin_code, Embarked)	1	1
t.test <- as.data.frame(t.test, stringsAsFactors = F)	1	1
"c(""age"", ""gender"", ""Fare"", ""family"", ""title"", ""pclass"", ""embarked"", ""ticket_str"", ""cabin_deck"")"	1	1
output[, max_depth := doe$max_depth[i]]	1	1
full$age <- full$Age	1	1
separate(col = B,into = c('A2','B2'), sep = '. ') %>%	1	1
table(train$Survived,is.na(train$Age))	1	1
"my.pred[""Fare"",] = 0"	1	1
trainset[which(is.na(trainset$Embarked)),]	1	1
"CleanTotal$lFare > 2.851, ""Med-High"","	1	1
mice_mod <- mice(full.data[, !names(full.data) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf')	1	1
test_new$Survived <- NULL	1	1
which(is.na(fullComb$Fare))	1	1
full$familyID2 <- full$familyID	1	1
inTrain_idx <- sample(train_dev_idx, replace=F, round(0.7*length(train_dev_idx)))	1	1
attach(train)	1	1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0	1	1
full[Category == 'cv', sum(SvmSurvived == Survived)/length(Survived)]	1	1
output[, nu := doe$nu[i]]	1	1
df_combined <- bind_rows(train, test) #http://dplyr.tidyverse.org/reference/bind.html	1	1
roc_NB_ubal <- roc(val_m$Survived, as.numeric(p_NB_ubal)-1)	1	1
test$Age <- as.numeric(test$Age)	1	1
prop.table( table( full$Sex, full$Survived ) )	1	1
allData[892:1309,]	1	1
whole.data[,'FamilySize'] <- whole.data$SibSp + whole.data$Parch +1	1	1
fulldata[(which(is.na(fulldata$Fare) | fulldata$Fare==0)) ,c(1,3,6,10,20) ]	1	1
"train$Embarked[which(is.na(train$Embarked))] = ""S"""	1	1
test_df$Age <- ifelse(is.na(test_df$Age), avg_age, test_df$Age)	1	1
"full$Cabin[full$Cabin == """"] <- NA"	1	1
trainset_1$Survived<-as.factor(trainset_1$Survived)	1	1
whole.data[whole.data$Age>=0 & whole.data$Age<21, 'AgeBin'] <- '1'	1	1
summarise(avg_fare = round(median(Fare),digits = 2))	1	1
workData$Survived,	1	1
sel.val<-grep(val,substr(names(wts.rs),8,8))	1	1
fulldata$Title[c(823)] <- 'Mr'	1	1
test_age_mean=mean(test$Age,na.rm=TRUE)	1	1
variable.names(full) # lists only variable names	1	1
"test$Age[is.na(test$Age)&test$Name==""Dr.""]<-drage"	1	1
a1 <- which(is.na(Embarked) == TRUE)	1	1
test<-subset(test,select=c(2,4,5,6,7,11))	1	1
Xtrainset$Sex<-as.numeric(Xtrainset$Sex)	1	1
summary(log_model_sig)	1	1
new_varImportance <- varImportance[order(-Importance),]	1	1
"table_words = table(unlist(strsplit(train$Name, ""\\s+""))) #separar por blanks"	1	1
mean(tst_m.origfare_noNA)	1	1
data.cleaned[,columns.to.scale] <- scale(data.cleaned[,columns.to.scale])	1	1
test$Survived=0	1	1
LogRegTotal[1:891,]	1	1
top.run2=max(summary(resampled)$statistics$Accuracy[,'Median'])	1	1
fulldata$Deck[is.na(fulldata$Deck)] <- predict(predicted_deck, fulldata[is.na(fulldata$Deck),])	1	1
medians <- full %>% group_by(title) %>% summarize(medians=median(Age, na.rm=T))	1	1
ensemble_predict$LR = as.numeric(ensemble_predict$LR)	1	1
"left_join(avAgesTest, by = c(""Pclass"" = ""Pclass"",""Parch"" = ""Parch"")) %>%"	1	1
Female_Ages <- full[ which(is.na(full$Age)) & full$Sex == 'female' , ]	1	1
train_data$Survived	1	1
full$Age2 = as.numeric(as.factor(full$Age2))-1	1	1
my.train.data[is.na(my.train.data[,i]), i] <- mean(my.train.data[,i], na.rm = TRUE)	1	1
which(is.na(titanic$Fare))	1	1
data$Title <- as.factor(data$Title)	1	1
sur<-vector()	1	1
"print(""Survival rate of passengers who's age is unknown:"")"	1	1
full[full$isTrain,][trainrows,]	1	1
mod.in$model.list$respons	1	1
as.numeric(cm_NB_bal$overall[1]), # Accuracy	1	1
print(survivalModel)	1	1
results_frame <- data.frame(PassengerId, results_final)	1	1
train_data$Age[train_data$Survived == 1]	1	1
full [c(62,830),]	1	1
titanic2$Age[is.na(titanic2$Age)] <- mean(titanic2$Age,na.rm=T)	1	1
"AgeNorm <- preProcess(as.data.frame(titanic$Age), method = c(""center"", ""scale""))"	1	1
raw_train$Age[is.na(raw_train$Age)] <- mean(raw_train$Age,na.rm=T)	1	1
"test.raw <- read.csv('titanic/test.csv',header=T,na.strings=c(""""))"	1	1
sum(is.na(SibSp))	1	1
"table_words = table(unlist(strsplit(train$Name, ""\\s+"")))"	1	1
"mergedData$title[!mergedData$title %in% c(""Miss"",""Mrs"",""Mr"")] <- ""Other"""	1	1
titanic$Fare[1044] <- median(titanic$Fare, na.rm=TRUE)	1	1
table(rf_test_prediction,train_test$Survived)	1	1
titanic2$Fare2[titanic2$Fare < 30 & titanic2$Fare >= 20] <- '20-30'	1	1
test$Survived<- NA	1	1
"Miss=data.combined[which(str_detect(data.combined$Name, ""Miss."")),]"	1	1
"master<-test[grep(""Master"",Name),mean(Age,na.rm=T)]"	1	1
hist(train$Age[train$Pclass == 1 & train$Survived == 0], breaks = length(unique(train$Age)))	1	1
as.factor(target)->target	1	1
misClasificError<-mean(Predict_lm != valid_clean$Survived)	1	1
X.trim = as.matrix(X.trim)	1	1
levels(test_data_set$age) <- levels(new_train$age)	1	1
MData <- sapply(full, function(x) sum(is.na(x))); MData[MData>0]	1	1
test$Age[which(is.na(test$Age))]<- 20	1	1
solution <- data.frame( PassengerId = test$PassengerId, Survived = prediction )	1	1
qda.diag = foreach(i = 1:nrow(doe)) %do%	1	1
pen.pred = function(Xtrain, Ytrain, Xtest, Ytest, negative, cutoff, alpha)	1	1
"log.diag[, mod := rep(""log"", nrow(log.diag))]"	1	1
full$Pclass= as.numeric(full$Pclass)-1	1	1
Chi[chirow, c(1,2)] <- c(disc_var[i], rownames(tbl)[f])	1	1
Name_Family = factor(Name_Family, levels = levels(train$Name_Family)),	1	1
my_solution$Survived <- ifelse(my_solution$Survived == 'Not_Survive', 0, 1)	1	1
full[which(is.na(full$Cabin)), 1]	1	1
"toRm      <- grep(paste(c(""Name"", ""Ticket"", ""Cabin""), collapse = ""|""), names(titanic))"	1	1
prop.table(table(train$Sex, train$Survived),1)	1	1
fulldata <- (transform(fulldata, Samesurname = match(Lastname, unique(Lastname))))	1	1
train.hex$Survived = h2o.asfactor(train.hex$Survived)	1	1
"factor_vars <- c(""Name"",""Sex"",""Ticket"",""Cabin"",""Embarked"",""Title"",""Deck"",""Age_Group"")"	1	1
train.data2$Survived <- factor(train.data$Survived)	1	1
ntbt_randomForest(as.factor(survived) ~ ., mtry = 6)	1	1
"mean.dr <- mean(train$Age[train$Title == ""Dr."" & !is.na(train$Age)])"	1	1
sum(is.na(train$Age) == TRUE ) / length(train$Age)	1	1
filter(Surname %in% potentialNames$Surname[i] & Fsize>1) %>%	1	1
"solution_file = data.frame(""PassengerId"" = tst_m$PassengerId, ""Survived"" = final_prediction)"	1	1
full_data$FsizeD[full_data$Fsize < 5 & full_data$Fsize > 1] <- 'small'	1	1
summary(prediction)	1	1
output[, sens := as.numeric(sens)]	1	1
print(unique(data$Title))	1	1
out.ls<-split(out.ls$wts,f=out.ls$row.nms)	1	1
colSums(is.na(trn_m))	1	1
rows = nrow(train.clean)	1	1
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))	1	1
train$Survived [train$Survived == 'Survived'] <- 1	1	1
testset$Cabin <- NULL	1	1
test[, Fare := test.mice$Fare]	1	1
solution <- data.frame(PassengerID = test_data$PassengerId, Survived = preds)	1	1
final.data <- data.frame(PassengerId = test.data2$PassengerId, Survived = rf_prediction)	1	1
"chisq.test(table(Age_impute$Survived, Age_impute$Agegroup3, useNA = ""ifany""))"	1	1
database_test$Age[is.na(database_test$Age)] <- round(mean(database_test$Age, na.rm = TRUE))	1	1
print(mod_rf)	1	1
"colnames(predTitanic) <-c(""Survived"")"	1	1
"mod.name = c(""Super Learner"")"	1	1
"train$Title <- str_match(train$Name, ""[a-zA-Z]+\\."")"	1	1
ib <- which(is.na(train_data$Fare))	1	1
sum(is.na(combined$Embarked))	1	1
knn_test$familySize <- factor(knn_test$familySize, labels = c(1:3))	1	1
table(balanced_train$Sex)	1	1
dat$TN[i] / (dat$FP[i] + dat$TN[i]),	1	1
testset$Pclass <- factor(testset$Pclass)	1	1
filter(is.na(Age)) %>%	1	1
"full[is.na(full$Age) & full$Title == ""Mrs"", ]$Age <-age_by_title[age_by_title$Title== ""Mrs"", ]$Age"	1	1
full_data$Fare[1044] <- median(full_data[full_data$Pclass == '3' & full_data$Embarked == 'S', ]$Fare, na.rm = TRUE)	1	1
data$Title[data$Title %in% crew] <- 'CREW'	1	1
"Titanic_data$Embarked[is.na(Titanic_data$Embarked=='')]=""S"""	1	1
prop.test(table(for_test$Head_of_family , for_test$Survive)) #Proportion test from the 2 groups.	1	1
summary(DstTrain$Age)	1	1
if(length(y.names) != length(y.lab)) stop('y.lab length not equal to number of output variables')	1	1
colSums(is.na(val_m))	1	1
mean(age.data$Age[age.data$SibSp==4]),	1	1
print(titles)	1	1
"preprocess<-c(""BoxCox"")"	1	1
"write_csv(complete[,c(""PassengerId"", ""Survived"")], path = ""myPredictions.csv"")"	1	1
train[, Regressor := BinByCount(train[, eval(as.name(column))])]	1	1
tt = table(traindsn$Survived,preds)	1	1
knn_train$Embarked <- factor(knn_train$Embarked, labels = c('1','2','3'))	1	1
factor_vars <- c('PassengerId','Pclass','Sex','Embarked')	1	1
test_nn$NumEmbarked <-  (test_nn$NumEmbarked - min(test_nn$NumEmbarked)) /	1	1
full$isAlone[full$Parch > 0] <- F	1	1
TEST[,features]	1	1
table(full$Pclass, full$Title)	1	1
titanic$Sex        <- factor(titanic$Sex)	1	1
avg_age <- mean(train_df$Age, na.rm = TRUE)	1	1
raw_train$Embarked[is.na(raw_train$Embarked)] <- moda_embarked	1	1
completeTrain <- completeTrain[ , -c(12,13)]	1	1
sum(is.na(combined$Pclass))	1	1
summary(trainingData[, predictorVar])	1	1
predict_dt = ifelse(predict_dt[,1] >= predict_dt[,2], 0, 1)	1	1
Titanic_data$Title[Titanic_data$Title=='the Countess']='Miss'	1	1
DstTest$TitleType <- ifelse(DstTest$Title %in% Nobility.man, 'Nobility.man',DstTest$TitleType)	1	1
df_combined$Parent[df_combined$Sex == 'female' & df_combined$Parch > 0 & df_combined$Age > 18 & df_combined$Title != 'Miss'] <- 'Mother'	1	1
formattable(head(subset(tr,is.na(Age))))	1	1
combined$Fam_SizeD[combined$FamSize < 5 & combined$FamSize > 1] <- 'small'	1	1
DstTestClean$Title <- gsub('(.*, )|(\\..*)', '', DstTestClean$Name)	1	1
"cabin_counts = strsplit(full$Cabin,"" "")"	1	1
doe$eta[i], max_depth = doe$max_depth[i],	1	1
summary(combined.df$Fare)	1	1
split <- sample.split(train_male$Survived, SplitRatio = 0.54)	1	1
"combine<-merge(combine,sumif,by=""tittle"",all.x=T,sort=FALSE)"	1	1
diag.cv = function(cv)	1	1
tot$Title<-as.factor(tot$Title)	1	1
test$fare < 26.96, 0,	1	1
sum(is.na(combined$Sex))	1	1
return(names(tab[which.max(tab)]))	1	1
sumNotNA <- function(x) sum(x[!is.na(x)])	1	1
"colClasses = c(""integer"",""factor"",""character"",""factor"",""numeric"",""integer"",""integer"",""character"",""numeric"",""character"",""factor""),"	1	1
tmp=count(as.character(data$Ticket2))	1	1
train%>%group_by(Ticket)%>%count()->freq;	1	1
titanic$Age <- theDataImpute[,1]	1	1
test$survived<-sur	1	1
full$familyID <- factor(full$familyID)	1	1
val_imp_ds = val_m[names(val_m) %in% cols_for_age_imp]	1	1
checkCorr$Sex       <- as.numeric(checkCorr$Sex)	1	1
DstTrain$Title <- gsub('(.*, )|(\\..*)', '', DstTrain$Name)	1	1
"full$Age_Category <- ifelse(full$Age > 10 & full$Age <= 22, ""Tean"", full$Age_Category)"	1	1
select(Fare, FamilySize) %>%	1	1
train$Title[train$Title == 'Mme']         <- 'Mrs'	1	1
train[, Regressor := as.factor(train[, eval(as.name(column))])]	1	1
sapply(raw_test,function(x) sum(is.na(x)))	1	1
prop.table(table(train$Embarked))	1	1
submission <- data.frame( PassengerId= test$PassengerId )  # create a dataframe	1	1
solution2 <- data.frame(PassengerID = test2$PassengerId, Survived = prediction.rf_model)	1	1
train_nb$AgeTramo <- cut(train_nb$Age, breaks = seq(0,80,5))	1	1
progress.bar$init(k)	1	1
"names.arg = c(""Cherbourg"", ""Queenstown"", ""Southampton""),"	1	1
return(data.frame(cbind(column, data.type)))	1	1
my_solution <- data.frame(test$PassengerId, test$pred)	1	1
Out$Survived <- gbm.predict	1	1
output[, spec := as.numeric(spec)]	1	1
df_combined$Title <- gsub('(.*, )|(\\..*)', '', df_combined$Name)	1	1
mod.in$wts	1	1
filter(PassengerId != 1044)	1	1
data.frame(sapply(combi,check.missing))	1	1
train$Title <- sub(' ', '', train$Title)	1	1
wts.rs<-wts.rs[grep('out',names(wts.rs),invert=T)]	1	1
colnames(cab_occupancy) = c('Cabin', 'Cab_Occ')	1	1
Title=str_trim(strsplit(x,split='[,.]')[[1]][2])	1	1
train <- cbind(all[1:nrow(train),], Survived)	1	1
full$Surname <- sapply(full$Name, function(x) {strsplit(x, split = '[,.]')[[1]][1]})	1	1
Family.Sector <- data %>% select(FamilyName, Sector) %>% filter(!is.na(Sector)) %>% unique()	1	1
as.numeric(cm_RF_bal$byClass[1]), # Sensitivity	1	1
test.data$SurvivedRandom <- rbinom(418, 1, 0.5)	1	1
test$p[predicted < 0.53] = 0	1	1
"whole.data <- whole.data[,!(names(whole.data) %in% c(""Name"", ""Cabin"", ""Ticket"", ""FamilySize"",""PassengerId"", ""SibSp"", ""Parch"", ""Age"", ""Fare""))]"	1	1
test$Age[is.na(test$Age)]=test_age_mean	1	1
"submission <- data.frame(PassengerId=titanic$PassengerId, Survived=pred)[titanic$Set==""Test"",]"	1	1
which(is.na(results_frame$Survived == T)) #check for N/A values	1	1
tot$Embarked<-as.character(tot$Embarked)	1	1
output[, eta := doe$eta[i]]	1	1
summary(rf_model)	1	1
testset <- subset(train, id %in% c(i))	1	1
prop.table(ts)	1	1
full_data$Embarked <- factor(full_data$Embarked)	1	1
apply(val_m,2,pMiss)[apply(val_m,2,pMiss)>0]	1	1
trainset_2$Survived<-as.numeric(trainset_2$Survived)	1	1
"test = data.table(read.csv(""test.csv"", na.strings = """"))"	1	1
"data.4mice=data[c(""Pclass"",""Sex"",""Age"",""SibSp"",""Parch"",""Fare"",""Embarked"",""title"", ""deck"")]"	1	1
summary(resample_results, metric = c('ROC','Sens','Spec'))	1	1
names(rawdata)	1	1
levels(train$Survived)	1	1
train$Mother <- as.factor(train$Mother)	1	1
mergedData$sharedSurname <- sapply(mergedData$surname,function(x) pmin(t[[x]],4))	1	1
cutoffs <- cutoffs[order(cutoffs$tpr, decreasing=TRUE),]	1	1
full$FamilyID = as.numeric(as.factor(full$FamilyID))-1	1	1
tot$Title[tot$Title %in% c('the Countess')]<-'Mrs' #Noël Leslie, Countess of Rothes была was marriage at the disaster moment	1	1
outputMat[,Y:=0][Survived == 1,Y:=1][,Y]	1	1
"test[grepl(""Mr"",Name) & is.na(Age),Age:=mr]"	1	1
mod.dat[, log.Fare.1 := log(Fare + 1)]	1	1
table(SibSp)	1	1
summary(modelTitanic14)	1	1
"mod.dat[, c(""Sex"", ""Age"", ""Embarked"") := NULL]"	1	1
summarize(m = mean(Survived,na.rm=T), n = n(), se = sd(Survived,na.rm=T)/sqrt(n()))	1	1
par(mfrow=c(1,1))	1	1
combined$Title[combined$Title == 'Mme']         <- 'Mrs'	1	1
Submission <- as.data.frame(cbind(ids, pred_test))	1	1
Predict_lm_sig<-ifelse(Predict_lm_sig>0.5,TRUE,FALSE)	1	1
train_tbl %>% group_by(Sex) %>% summarise(n = n())	1	1
summary(combi$Embarked)	1	1
"full$FsizeD[full$Fsize == 1] <- ""Single"""	1	1
Mean = double(), StD = double(),	1	1
combined.df$Age[is.na(combined.df$Age)] <-28.00	1	1
mean(train_data$Age, na.rm=TRUE)	1	1
DataBind$Title[DataBind$Title == 'Mlle']  <-'Miss'	1	1
my_df$Group[my_df$Age < 18] <- 'Child'	1	1
"geom_vline(aes(xintercept=mean(Fare, na.rm = TRUE)), col=""red"") +"	1	1
apply(DstTestClean,2,pMiss)	1	1
"test_data<-read.csv(""test.csv"", header=T, na.strings=c("""",""NA""))"	1	1
trainset$company <- factor(trainset$company)	1	1
"a2 <- which(titanic[,""Pclass""] == 1 & titanic[,""Fare""] == 80)"	1	1
train$Embarked <- factor(train$Embarked)	1	1
trSharedTicket <- mergedData[!is.na(mergedData$Survived),] %>% group_by(sharedTicket) %>% summarize(cnt=n(),surv=mean(Survived)) %>% arrange(-cnt) %>% as.data.frame()	1	1
summary(df.train)	1	1
"cols=c(""Survived"",""Pclass"",""Sex"",""Embarked"")"	1	1
split <- sample.split(train$Survived, SplitRatio = 0.7) #this is from the caTools library	1	1
"log.age.regressors = c(""Parch"", ""SibSp"", ""Survived"", ""Pclass"", ""Fare"", ""Sex"")"	1	1
"dat_all[dat_all$cat==""train"",]"	1	1
full$Ticket = as.numeric(as.factor(full$Ticket))-1	1	1
summary(rp_model)	1	1
tmp <- full %>% filter(family==i)	1	1
data <- data[c('Survived','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked')]	1	1
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})	1	1
datamerging[1:891,]	1	1
fulldata[factor_vars] <- lapply(fulldata[factor_vars], function(x) as.factor(x))	1	1
"data[Title=='the',Title:=""Countess.""]"	1	1
"mergedData[nchar(mergedData$Cabin) > 0,""sharedCabin""] <- duplicated(mergedData[nchar(mergedData$Cabin) > 0,""Cabin""])|duplicated(mergedData[nchar(mergedData$Cabin) > 0,""Cabin""],fromLast=TRUE)"	1	1
rare_title <- c('Dona','Lady','The Countess','Capt','Col','Don','Dr','Major','Rev','Sir','Jonkheer')	1	1
fulldata$Samesurname=NA	1	1
"test[which(test$Parch>0 & test$Age>18 & test$Name==""Mrs.""),c(""Mother"")]<-1"	1	1
"combined.df$Title <- sub("" "", """", combined.df$Title)  # clean up Title spacing"	1	1
result = table(predict = val.pred, actual = train.clean$Survived[valIndices])	1	1
table(df$Survived,df$Embarked) #show summary table of survival chances	1	1
tot[1:891,]	1	1
dat = data.frame(dat)	1	1
data[, includedVar]	1	1
quit()	1	1
apply(full_data,2, function(x) length(unique(x)))	1	1
qda.pred = function(Xtrain, Ytrain, Xtest, Ytest, negative, cutoff)	1	1
"gbm.diag[, mod := rep(""gbm"", nrow(gbm.diag))]"	1	1
"train <- read.csv(""../input/train.csv"", na.strings=c(""NA"", """")) ##important code to treat blank string as NA"	1	1
by_Sex_Age_Survived <- summarise(train_tbl_with_age_by_Sex_Age_Survived, Total = n())	1	1
"dup.names=as.character(data.combined[which(duplicated(as.character(data.combined$Name))), ""name""])"	1	1
outputMat = as.data.table(train)	1	1
summary(all_train)	1	1
full$Title[full$Title %in% rare_title]  <- 'Rare'	1	1
floor(mean(third_class_test[,5], na.rm = T))	1	1
print(full$Surname)	1	1
full$familyID2[full$familyID %in% smallFamId$Var1] <- 'Small'	1	1
"colnames(relative) <- c(""PassengerId"", ""Ticket"", ""FM_Survive"")"	1	1
test$isTrain <- FALSE	1	1
"Features[, ""Pclass""],"	1	1
database_output <- database_output[c(1,12)]	1	1
length(train_youth[which(train_senior == 1)])/length(train_senior)	1	1
accuracy_train <- sum(diag(confusion.mat_train))/sum(confusion.mat_train)	1	1
event.rate = nrow(train[Survived == 1]) / nrow(train)	1	1
trn_m$Embarked = factor(trn_m$Embarked)	1	1
"males=data.combined[which(train$Sex==""male""),]"	1	1
group_by(Title, Pclass, Sex) %>%	1	1
"test$predCondForest <- predict(CondForest, cTest, type = ""response"")"	1	1
"train[!train$Title %in% MainTitles,c(""Title"")] <- ""Others"""	1	1
table(survived_gender)	1	1
test$Survived <- rep(0,418)	1	1
facts<-attr(terms(mod.in),'factors')	1	1
predTitanic$Survived[predTitanic$Survived>0.5] <- 1	1	1
full$Title[full$Title == 'Mme'] <- 'Miss'	1	1
full_data[c(1:1309), 'Embarked']	1	1
allData$Title[allData$Title == 'Ms'] <- 'Miss'	1	1
knn_train$Age <- (knn_train$Age - min_age) / (max_age - min_age)	1	1
full$Cabin2 = as.factor(full$Cabin2)	1	1
data.combined$Pclass=as.factor(data.combined$Pclass)	1	1
Name_Family = as.factor(Name_Family),	1	1
testset$company <- factor(testset$company)	1	1
summary(test_df)	1	1
factor_vars <- c('Pclass','Sex','Embarked','Title','Survived')	1	1
"data<-data[,Title:=unlist(strsplit(trimws(unlist(strsplit(Name,',', fixed = T))[2]),"" "",fixed = T))[1],by=PassengerId]"	1	1
"testPredictions <- predict(model, as.matrix(testData[, predictorVar]), type=""class"")"	1	1
test2$Survived <- NA	1	1
mods.diag = data.table(log.diag)	1	1
geom_hline(data=train, aes(yintercept= mean(Survived)), colour = cbPalette[4], linetype = 2) +	1	1
"test$Pclass=factor(test$Pclass,labels = c(""1st"",""2nd"",""3rd""))"	1	1
"train_data$Age[is.na(train_data$Age)&train_data$Sex==""male""]<-mean_male"	1	1
full[c('Family')]	1	1
head(subset(cutoffs, fpr < 0.2))	1	1
t.test(log(Age) ~ Survived, data = train)	1	1
print('HasCabin')	1	1
trn_m$HasFamily <- factor(ifelse(trn_m$FamilySize == 1, c(0), c(1)))	1	1
full$Ticket <- as.character(full$Ticket)	1	1
summary(L1.predict)	1	1
"allData$Title <- (gsub(""(.*, )|(\\..*)"", """", allData$Name ))"	1	1
submit <- mutate(submit, Survived = 1)	1	1
train$Embarked[train$Embarked==''] <- 'C'	1	1
full$deck <- full$Deck	1	1
mod.in$finalModel	1	1
y_pred<-ifelse(sur_pred>0.5,1,0)	1	1
full$Surname <- sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})	1	1
CleanTotal$Adult <- ifelse(CleanTotal$Age > 15, 1, 0)	1	1
median(trn_m$Age_comp_FM)	1	1
MissingAge$Title != 'Master', GCabins,	1	1
"test[grepl(""Miss"",Name) & is.na(Age),Age:=miss]"	1	1
"print(""Hello, world!"")"	1	1
"rf.train <- data.combined[1:891,c(""Pclass"",""title"",""family.size"")]"	1	1
"train%>%filter(Sex==""female"",Pclass==""1"",NAccompanied==1,Fare>=75,Fare<=85)%>%group_by(Embarked)"	1	1
"full$isFemale[full$Sex == ""female""] <- T"	1	1
names.title <- lapply(names.split2, FUN = function(x) {x[[1]]}) %>% unlist()	1	1
data.frame(sapply(train, check.blank))	1	1
"test$Age[is.na(test$Age)&test$Name==""Miss.""]<-missage"	1	1
train[, Pclass3.Age := model.matrix(~Pclass:Age, data = train)[,4]]	1	1
dplyr::select(-avgAge, -count)	1	1
recall_train <- confusion.mat_train[2,2]/sum(confusion.mat_train[2,])	1	1
group_by(Cabin_letter) %>%	1	1
combi$Cabin[combi$Cabin %in% c('A')] <- 'A'	1	1
"full$Title[full$Title == ""Ms""]  <- ""Miss"""	1	1
allData[1:891,]	1	1
allData$Survived <- as.factor(allData$Survived)	1	1
DataBind$Title <- gsub('(.*, )|(\\..*)','',DataBind$Name)	1	1
levels(test_data_set$cabin) <- levels(new_train$cabin)	1	1
total_with_age <- summarise(train_tbl_with_age, Total_With_Age = n())	1	1
TRAIN$Survived	1	1
d <- train %>% select(Survived, SibSp)	1	1
for(i in 1:nrow(accuracy_tab))	1	1
if(is.logical(all.out))	1	1
submit <- data.frame(PassengerId = mod_test$PassengerId, Survived = Tree1Prediction)	1	1
"train_na <- sapply(train, function(x)sum(is.na(x)|x==""""))#Count the NA's in each row"	1	1
LRtest[, -2]	1	1
table(Tree1Prediction)	1	1
table(full$Status,full$AgeCategory)	1	1
final_prediction = ifelse(final_predict_prob > 0.5,1,0)	1	1
"Pred<-data.frame(""PassengerId""=PassID,""Survived""=Predictions)"	1	1
combined.df$CabinLetter <- as.factor(combined.df$CabinLetter)	1	1
allData$Age[is.na(allData$Age)] <- preds	1	1
train.df$Embarked[is.na(train.df$Embarked)] <- 'S'	1	1
missing_age_indexes <- which(is.na(full$Age)==TRUE)	1	1
data$Title[data$Title %in% vip] <- 'VIP'	1	1
output_knn = data.frame(PassengerId = test$PassengerId, Survived = pred_knn)	1	1
"panel.cor <- function(x, y, digits = 2, prefix = """", cex.cor, ...)"	1	1
DstTest$TitleType <- ifelse(DstTest$Title %in% Crew, 'Crew',DstTest$TitleType)	1	1
val_m$Age_comp_MICE = val_imp$Age	1	1
test[ , -10]	1	1
"full[is.na(full$Fare),]$Fare <- Fare_by_Pclass[Fare_by_Pclass$Pclass==""3"", ]$median_Fare"	1	1
tst_m$FamilySize = tst_m$SibSp + tst_m$Parch +1	1	1
"names(Submission) <- c(""PassengerId"", ""Survived"")"	1	1
mean(as.numeric(predict(data.classifier.lda, data.train.use)$class) - 1 == data.train.use[,2])	1	1
mean(train$Survived==rf.pred)	1	1
test_new$Cabin <- factor(test_new$Cabin)	1	1
"checkCorr$Embarked  <- revalue(checkCorr$Embarked, c(""S"" = 1, ""Q"" = 2,  ""C"" = 3))"	1	1
"cat(paste0(filename, "",\tmode: "", file.mode(filename), "",\tsize: "", file.size(filename)), ""bytes.\n"")"	1	1
mergedData$Cabin <- as.character(mergedData$Cabin)	1	1
summary(model.logit)	1	1
"trainset_1$Survived<-gsub(""0"",""Perished"",trainset_1$Survived)"	1	1
test$Survived=predict(rf.fit, test)	1	1
fulldata$Lastname=sub(' ','',sapply(fulldata$Name,FUN=function(x){strsplit(x,split='[.,.]')[[1]][1]}))	1	1
summary(solution_1)	1	1
Titanic_data$Title=sapply(Titanic_data$Name,FUN=extract_Title)	1	1
"search_criteria = list(strategy = ""Cartesian""),"	1	1
lapply(list.of.packages, library, character.only=T)	1	1
full$Ticket_Pre = as.numeric(as.factor(full$Ticket_Pre))-1	1	1
test$Survived[test$Sex=='female' & test$Pclass==3 & test$Fare>=20]<-0	1	1
t.test(log(Parch + 1) ~ Survived, data = train)	1	1
summary(logi)	1	1
combined.df$CabinLetter <- substring(combined.df$Cabin, 1, 1)	1	1
fitted.results <- predict(model,newdata=subset(test,select=c(2,3,4,5,6,7,8)),type='response')	1	1
allData[!is.na(allData$Age),]	1	1
"log.list = list(""mod"" = log.mod, ""cutoff"" = log.cutoff)"	1	1
mods.list$svm = svm.list	1	1
table(full$Family_count)	1	1
full_data$Age[is.na(full_data$Age)] <- predict(age_tree, full_data[is.na(full_data$Age),])	1	1
tst_m$Pclass = factor(tst_m$Pclass)	1	1
combined$Mother[combined$Sex == 'female' & combined$Parch > 0 & combined$Age > 18 & combined$Title != 'Miss'] <- 'Mother'	1	1
includedVar <- setdiff(names(data), excludedVar)	1	1
titles <- test_data %>% mutate(Survived=NA) %>% rbind(data) %>% group_by(title) %>% summarise(title_frequency = n())	1	1
summarise(filter(test_tbl, is.na(Age)), bad_age = n())	1	1
levels(full$Cabin2)	1	1
"freq<-as.data.frame(table(combine[,c(""total.relative.range"",""Survived"")]))"	1	1
test[, Cabin := test.mice$Cabin]	1	1
roc_LR_bal <- roc(val_m$Survived, as.numeric(p_LR_bal)-1)	1	1
predictionrf <- data.frame(predictionrf)	1	1
colSums(is.na(full_data))	1	1
"gbm.diag[, c(""eta"", ""max_depth"", ""nrounds"", ""min_child_weight"", ""gamma"") := NULL]"	1	1
train.mice[, Embarked := factor(Embarked)]	1	1
t.test(log(Fare + 1) ~ Survived, data = train)	1	1
print(nrow(submission))	1	1
data[[i]][inDev_idx, , drop=F]	1	1
nr_surname <- nlevels(factor(full$Surname));	1	1
mod.in$snnsObject$getUnitDefinitions()	1	1
trainset[,1]	1	1
summary(fitmodel)	1	1
summary(titanic$Fare)	1	1
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))	1	1
MissingAge$Title != 'Master', MedianQ,	1	1
modelDiff <- diff(out)	1	1
"ynew = as.numeric(predict(mod, s = mod$lambda.min, Xtest, type = ""response""))"	1	1
"full[full$title=='Mme',]$title<-""Mr"""	1	1
"nodes <- network[,c(""PassengerId"", ""Survived"")] #serve as data description"	1	1
summary(miss$Age)	1	1
full_data$FareRange[full_data$Fare < 10] <- 'lessthan10'	1	1
train_nb$Survived_f <- factor(train_nb$Survived)	1	1
fullComb$FamilyID2 <- fullComb$FamilyID	1	1
training <- subset(database, split==TRUE)	1	1
combined$Fare[1044] <- median(combined[combined$Pclass == '3' & combined$Embarked == 'S', ]$Fare, na.rm = TRUE)	1	1
mods.list$pen = pen.list	1	1
"train_os_x = train_os[,-which(names(train_os) %in% c(""Survived_F""))]"	1	1
full %<>% mutate(AgeImp = impute(Age))	1	1
"train$cat <- ""train"""	1	1
train[1:623,]	1	1
table(combined$Sex, combined$Title)	1	1
else y.names<-as.character(forms)[2]	1	1
test$Survived	1	1
whole.data[,'Title'] <- as.factor(whole.data[,'Title'])	1	1
train$Survived = as.factor(train$Survived)	1	1
full_data$Pclass <- as.factor(full_data$Pclass)	1	1
round(prop.table(table(is.na(train$Age), train$Survived), 1),2)	1	1
test$Age[is.na(test$Age)] <- predict(predicted_test_age, train[is.na(test$Age),])	1	1
summary(full_data$Embarked)	1	1
valid_clean[,-8]	1	1
sol<-data.frame(PassengerId=my_test$PassengerId, Survived=my_pred)	1	1
cor.dat = data.table(model.matrix(~.^2, cor.dat)[,-c(1:17)])	1	1
combine$total.relative<-combine$SibS+combine$Parch	1	1
table(full_data$Survived)	1	1
group_by(Cabin, Survived) %>%	1	1
titanic.test[, 'Survived'] <- 0	1	1
knn_train$Fare <- (knn_train$Fare - min_fare) / (max_fare - min_fare)	1	1
prop.table(table(train$Pclass))	1	1
Predict_svm<-as.numeric(predict(svm_model,newdata=valid_clean))	1	1
trn_raw[-HO_idx,]	1	1
train$Pclass   <- factor(train$Pclass)	1	1
crew <- c('Capt', 'Col', 'Major')	1	1
summary(question)	1	1
filter(Pclass == 3 & Embarked == 'S')%>%	1	1
train[train$Embarked!='',]	1	1
"MainTitles <- c(""Master"",""Miss"",""Mr"",""Mrs"",""Rev"")"	1	1
mean_male<-mean(train_male$Age, na.rm=TRUE)	1	1
testing <- subset(database, split==FALSE)	1	1
summary(full_data)	1	1
"DT = data.table(melt(nn.diag, id.vars = c(""stat"", ""layers"", ""nodes"", ""prop"", ""mod"")))"	1	1
conf[1,3] <- conf[1,2] /(conf[1,1]+conf[1,2])	1	1
"full$Embarked[c(62,830)] <- ""C"""	1	1
nrow(train_data)	1	1
mod.dat = data.table(model.matrix(~ .^2, mod.dat)[,-1])	1	1
my_df$Sex <- as.factor(my_df$Sex)	1	1
"train$Age[grepl(""Miss\\."", train$Name) & is.na(train$Age)] = mean.miss"	1	1
"full$FsizeD[full$Fsize >4 ] <- ""Large"""	1	1
fulldata$FamilySize=fulldata$SibSp+ fulldata$Parch+1	1	1
median(trn_m$Fare)	1	1
"xtest = trRF[flds[[1]],!names(trRF) %in% c(""PassengerId"",""Survived"") ],"	1	1
print(vif(age.reg))	1	1
summary(tot)	1	1
summary(logistic_model_filtered)	1	1
summary(Titanic_data_preprocess_pred)	1	1
ttest$Survived <- as.factor(ttest$Survived)	1	1
"mutate('familyname' = gsub(""^([^,]*),.*"", ""\\1"", Name, perl=TRUE))"	1	1
combine[is.na(combine$embarked.fill),]$embarked.fill<-as.character(temp[temp$Freq==max(temp$Freq),]$Var1)	1	1
rf_model <- randomForest(factor(Survived) ~ Pclass + Title + Sex + SibSp + Age + Parch + Fare + Embarked + Child + familysize, data=train)	1	1
"Impute.fare <- preProcess(as.data.frame(a3[,""Fare""]), method=""medianImpute"")"	1	1
select(Sex, Age, Pclass, FamilySize, Survived)	1	1
"trainset$Embarked[c(62,830)] = ""C"""	1	1
print(GN_model)	1	1
levels(new_titanic$Sex)<-c(1,2)	1	1
mean(age.data$Age[age.data$Parch==1]),	1	1
mice_mod <- mice(combined[, !names(combined) %in% c('PassengerId','Name','Ticket','Cabin','Fam','Surname','Survived')], method='rf')	1	1
Res <- data.frame(Test[,1], Survived)	1	1
"print(paste(""Final Score = "", score))"	1	1
d.all$Family <- as.factor(ifelse(SibSp > 0 | Parch > 0, 'yes', 'no'))	1	1
testData1$Age[which(is.na(testData1$Age))] <- mean(as.numeric(testData1$Age[which(!is.na(testData1$Age))]))	1	1
cleandata[trainIndex,]	1	1
"predTitanic <- as.data.frame(predict(modelTitanic14, testData1, type=""response""))"	1	1
"full$FamilyID <- paste(as.character(full$FamilySize), full$Surname, sep="""")"	1	1
testData1$Age <- as.numeric(testData1$Age)	1	1
"paste(""AUC DT: "",auc_dt)"	1	1
full_data$Fsize <- full_data$SibSp + full_data$Parch + 1	1	1
fulldata$Samesurname <- as.factor(fulldata$Samesurname)	1	1
survival_tbl <- mutate(survival_tbl, Survival_Chance = (Survived/Total)*100)	1	1
summary(my_df)	1	1
trainset_2$Embarked<-as.numeric(trainset_2$Embarked)	1	1
length(mod.in$model.list$variables),	1	1
test.mice[, .(PassengerId, Cabin, log.Age, log.Fare.1)]	1	1
test[, Pclass := factor(Pclass)]	1	1
table(df$Survived,df$Parch) #parent children	1	1
colSums(is.na(test.data))	1	1
full$title<-trimws(full$title)	1	1
cTrain$Title <- as.factor(cTrain$Title)	1	1
unique(fulldata$Title)	1	1
table(model = survivors_logi, real = titanic$survived)	1	1
"names(sibSpImpact) <- c(""FamilyMembers"",""Survived"",""Count"")"	1	1
group_by(Survived) %>% summarise(mean_fare = mean(Fare), ci = qnorm(0.975) * sd(Fare) / (n() - 1)) %>%	1	1
full_data[c(62, 830),]	1	1
test_data <- test_data %>% mutate(title = get_title(Name))	1	1
data.imp[1:train.stop,]	1	1
age_na_rows = which(is.na(age_title$Age) & age_title$Title == title_to_get)	1	1
prop.table(table(train$Survived, train$Pclass), 1) * 100	1	1
"checkCorr$Sex       <- revalue(checkCorr$Sex, c(""male"" = 1, ""female"" = 2))"	1	1
train_tbl_wo_age <- filter(train_tbl, is.na(Age))	1	1
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Fsize + Age2 + Fare2 + Alone + FamilyID+Cabin2+Ticket_Pre +Ticket_Num,data = train2)	1	1
tot$Name<-as.character(tot$Name)	1	1
full$Agebefore, freq=F, main='Age: Original Data',	1	1
"geom_bar(width=0.5, aes(y = (..count..)/sum(..count..)), position=""fill"") +"	1	1
fitted.results<-predict(model,newdata = subset(test,select = c(2,3,4,5,6,7,8)),type = 'response')	1	1
as.numeric(cm_RF_ubal$byClass[1]), # Sensitivity	1	1
solution<-data.frame(PassengerId=tf$PassengerId,Survived=tf$Survived)	1	1
nrow(pre_test)	1	1
full  = bind_rows(train, test) # bind training & test data	1	1
fullComb$Child[fullComb$Age >= 16] <- 'Adult'	1	1
paste(layer.name,val,sep=''),	1	1
full <- bind_rows(trains,test)	1	1
rf_err[which.min(rf_err$combined_err),]	1	1
"mrsage<-mean(test$Age[which(test$Name==""Mrs."")],trim=.5,na.rm=TRUE)"	1	1
t <- table(mergedData$Ticket)	1	1
print('Proportion Table: TRUE = Age is missing  X  Pclass = 1 is first class')	1	1
full%>%group_by(Pclass)%>%dplyr::summarise(median(Fare,na.rm=TRUE))	1	1
train$isTrain <- T	1	1
train$Ticket_Num2[train$Ticket_Num > 30000] = 4	1	1
train.nn = data.table(train)	1	1
print(NB_model)	1	1
"print(paste(""sum_of_errors:"",sum(abs(final.age.ann.p - age.data.test$Age))))"	1	1
embarked_impute_df <- data.frame(Pclass = c(trainset$Pclass, testset$Pclass), Embarked = as.factor(c(trainset$Embarked, testset$Embarked)), Fare = c(trainset$Fare, testset$Fare))	1	1
prop.table(table(titanic2$Sex, titanic2$Survived),1)	1	1
"X = data.table(train[,!c(""Sexmale.EmbarkedS"", ""Pclass3.Fare"")])"	1	1
full <- bind_rows(train,test) #bind_rows doesn't need same amount of variables, auto-adds and fills with NA	1	1
prop.table(table(train$Pclass, train$Sex, train$Survived), 1) * 100	1	1
result <- data.frame(PassengerId=test$PassengerId, Survived=predicted)	1	1
"train$Age[train$Title == ""Miss."" & is.na(train$Age)] <- mean.miss"	1	1
"qda.diag[, c(""name"") := NULL]"	1	1
bind_rows(testData)	1	1
"freq<-as.data.frame(table(combine[,c(""Sex"",""Survived"")]))"	1	1
filter(Pclass == '3' & Embarked == 'S') %>%	1	1
combine$SibS<-as.numeric(as.character(combine$SibS))	1	1
full_data$Child <- NA	1	1
"all[!all$Title %in% c(""Mr"", ""Miss"", ""Mrs"", ""Master"")]$Title = ""Rare"""	1	1
my_solution <- data.frame(PassengerId = vector_passengerid, Survived = my_prediction)	1	1
spacing<-diff(c(0*diff(y.range),0.9*diff(y.range)))/max(struct)	1	1
train[, Cabin := droplevels(Cabin)]	1	1
data_train$Pclass <- as.factor(data_train$Pclass)	1	1
cabinImpact <- data.frame(table(allData$Survived, substr(allData$Cabin,0,1)))	1	1
tab <- prop.table(table(df_combined$Title))	1	1
"whole.data[whole.data$Embarked == """",]"	1	1
trainingset <- subset(train, id %in% list[-i])	1	1
df[trainIndex,]	1	1
tot$Title[tot$Title=='Mrs' & tot$Sex=='male']<-'Mr'	1	1
full[Category %in% c('train', 'cv'), RpartSurvived := predict(rpart_mdl, full[Category %in% c('train', 'cv')])]	1	1
"mutate(Cabin = gsub(""^(\\w).*$"", ""\\1"", Cabin)) %>%"	1	1
age_compare[3,] = c('Train', 'Filled by MICE', mean(trn_m$Age_comp_MICE), sd(trn_m$Age_comp_MICE))	1	1
"which(full$Embarked =="""")"	1	1
"legend(""bottomright"", legend = c(""tree"", ""forest""), col = c(""green"", ""red""), lwd = c(1.5,1))"	1	1
train$Cabin_recorded <- 'Yes'	1	1
"test[!test$Title %in% MainTitles,c(""Title"")] <- ""Others"""	1	1
wts<-wts[grep(src.str,names(wts))][[1]][-1]	1	1
"meanAge = mean(Features[, ""Age""], na.rm=TRUE) #29.69"	1	1
"test$Age[is.na(test$Age)&test$Name==""Mr.""]<-mrage"	1	1
table(train$Title[which(is.na(train$Age))])	1	1
knn_train$Title <- factor(knn_train$Title, labels = c(1:5))	1	1
y_pred = ifelse(y_pred >= 0.5,1,0)	1	1
"test <- data.table(read.csv(""../input/test.csv""))"	1	1
total$FsizeD[total$Fsize == 1] <- 'NoDep'	1	1
1:struct[length(struct)]	1	1
titanic[a3,]	1	1
node.in<-which(x.names==all.in)	1	1
colSums(is.na(data))	1	1
full$Title <- sub(' ', '', full$Title)	1	1
"chisq.test(table(Age_impute$Survived, Age_impute$Agegroup4, useNA = ""ifany""))"	1	1
train$Age[is.na(train$Age)] <- predict(predicted_train_age, train[is.na(train$Age),])	1	1
sapply(test.raw, function(x) {any(is.na(x))})	1	1
x.names<-all.names[grep('Input',all.names$unitName),'unitName']	1	1
length(mod.in$model.list$response)	1	1
final<-cbind(test_data$PassengerId,predTwo)	1	1
full[is.na(full$age), ]$age <- full[is.na(full$age), ]$medians	1	1
"write.csv(test[,c(""PassengerId"",""Survived"")], file = 'submission.csv', row.names = F)"	1	1
Age_impute$Agegroup1<-cut(Age_impute$Age, seq(0,80,20), labels=c(1:4))	1	1
"score <- data.frame(Survived = predict(analysis, newdata = my.test.data, type = ""response""))"	1	1
"sum(dat_all[dat_all$with_fam==0 & dat_all$cat==""train"", ""Survived""])/"	1	1
test.nn[, as.character(min.max$variable) := NULL]	1	1
MissingAge$Title != 'Master', DCabins,	1	1
data$Title[data$Title == 'Mlle']        <- 'Miss'	1	1
full[full$cabin_deck %in% c('B', 'D', 'E'), ]$cabin_deck <- 'BDE'	1	1
"raw_train <- read.csv(file=""../input/train.csv"", header=TRUE, sep="","", na.strings=c("""")) # 891 reg"	1	1
"excludedVar <- c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Embarked"")"	1	1
"length(full$Embarked[full$Embarked==""""])"	1	1
"names.split2 <- strsplit(names.rest, split = ""\\."")"	1	1
train$istest<-FALSE	1	1
data[is.na(data[,'deck']),'deck']=names(which.max(table(na.omit(data[,'deck']))))	1	1
full$Survived [full$Survived == '1'] <- 'Survived'	1	1
"miss <- data.combined[which(data.combined$title == ""Miss.""),]"	1	1
combined$Status[combined$Age < 18] <- 'Child'	1	1
tst_m$Age_comp_MICE = tst_imp$Age	1	1
summary(naiveBayesModel)	1	1
sd(trn_m[complete.cases(trn_m[,c('Age')]),c('Age')])	1	1
"full[, LastName := sapply(Name, function(x) {strsplit(x,"", "")[[1]][2]})]"	1	1
combine[is.na(combine$fare.fill),]$fare.fill<-median(combine[combine$Pclass==combine[is.na(combine$fare.fill),]$Pclass,]$fare.fill,na.rm=TRUE)	1	1
"names.split <- strsplit(full.names, split = "", "")"	1	1
"t.train <- sapply(t.train, function(x) {ifelse(x == """", NA, x)}, simplify = FALSE)"	1	1
which(is.na(full$Embarked)==TRUE)	1	1
"full[is.na(full$Cabin), ]$cabin_deck <- ""unknown"""	1	1
full[Category %in% c('train', 'cv'), RpartSurvived2 := predict(rpart_mdl2, full[Category %in% c('train', 'cv')], na.action=na.pass)]	1	1
cols<-rep(pos.col,length(wts))	1	1
"head(data[c(""FamilyName"", ""Sector"")])"	1	1
database_test <- database_test[c(2,4,5,6,7,9,11)]	1	1
titanic$Title <- sapply(titanic$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})	1	1
sum(is.na(my_df$Age))	1	1
cTrain$lFareRange <- as.factor(cTrain$lFareRange)	1	1
full$Family_size_ratio<-as.factor(full$Family_size_ratio)	1	1
"compareAttribs <- c(""Pclass"", ""Fsize"", ""Ticket"", ""Fare"", ""Embarked"")"	1	1
tuneGrid = data.frame(.mtry = 7),	1	1
"combined.df$TitleGroup[which(combined.df$Title %in% c(""Rev""))] <- ""MrRev"""	1	1
Cabin_Deck_i2 = factor(Cabin_Deck_i2, levels = levels(train$Cabin_Deck_i2)),	1	1
"full[full$title == ""Mlle"", ]$title <- ""Miss"""	1	1
p<-predict(model,newdata = subset(test),select=c(2,3,4,5,6,7,8),type = 'response')	1	1
geom_hline(yintercept = mean(train$Survived), colour = cbPalette[4], linetype = 2) +	1	1
knn_train$familySize <- factor(knn_train$familySize, labels = c(1:3))	1	1
"survived.interactions = c(""Sexmale:Age"", ""Pclass3:Age"", ""Sexmale:Fare"", ""Pclass3:Fare"", ""Age:Fare"", ""Pclass3:EmbarkedS"", ""Sexmale:EmbarkedS"", ""Fare:EmbarkedS"")"	1	1
coord_flip()+scale_x_reverse(breaks=c(1:11))+theme_light()	1	1
data$Deck <- sapply(data$Cabin, function(x) strsplit(x, NULL)[[1]][1])	1	1
age_compare[8,] = c('Test', 'Filled by Mean', mean(tst_m$Age_comp_FM), sd(tst_m$Age_comp_FM))	1	1
print('Age missing')	1	1
"train[, Cabin := factor(gsub("" "", """", Cabin))]"	1	1
obj$scaling,	1	1
table(combi$TitleCat)	1	1
confusion_matrix_train <- table(train$Survived, (Prediction > 0.5))	1	1
train_full$Age[is.na(train_full$Age)]=121	1	1
submission$Survived <- predict(rf_model,test_model)	1	1
"trainset$Survived[trainset$Survived==1]<-""Survived"""	1	1
nn.pred = function(Xtrain, Ytrain, Xtest, Ytest, negative, hidden, threshold, linear.output, cutoff)	1	1
print('Cabin/Deck missing')	1	1
full[is.na(Age), NewAge := sample(na.omit(full$Age), sum(is.na(full$Age)))]	1	1
rare_title<-c('Dona','Lady','the Countess','Capt','Col','Don','Dr','Major','Rev','Sir','Jonkheer')	1	1
"mean.mr <- mean(train$Age[train$Title == ""Mr."" & !is.na(train$Age)])"	1	1
prop.table( table( full$IsChild, full$Survived ) )	1	1
table(full_data$FareRange)	1	1
full[Category == 'cv', sum(RpartSurvived == Survived)/length(Survived)]	1	1
train_summary = train[, list(FirstQuart=quantile(Survived, 0.25), Mean=mean(Survived), ThirdQuart=quantile(Survived, 0.75)), by=Regressor]	1	1
traindsn = subset(prod, splitvar == TRUE)	1	1
full$quote[full$PassengerId == tmp$PassengerId[j]] <- quote	1	1
filter(combined, is.na(Embarked))	1	1
trn_m$FamilySize = trn_m$SibSp + trn_m$Parch +1	1	1
out <- resamples(list(SVM = svm.fit, RF = rf.fit, GBM = gbm.fit, Log = log.fit))	1	1
ind<-sample(1:nrow(train_clean),0.85*nrow(train_clean))	1	1
full$Age[is.na(full$Age)] <- predict(predicted_age, full[is.na(full$Age),])	1	1
table(train$Title)	1	1
ntbt_randomForest(as.factor(survived) ~ ., mtry = 3, ntree = 5000)	1	1
y_pred = predict(classifier, newdata = as.matrix(testing[-8]))	1	1
"hist(val_m$Age_comp_FM, freq= FALSE, main = ""Validation Data: Age via Mean"", ylim = c(0,0.045))"	1	1
"cat(""Files in input folder...\n"")"	1	1
dt_model$finalModel	1	1
table(full$Embarked,full$Survived)	1	1
mutate(Survived = round(predict(Titanic_model, Titanic_test))) %>%	1	1
class = factor(c('1st class', '2nd class', '3rd class')),	1	1
data$Age[is.na(data$Age)]<-mean(data$Age,na.rm = T)	1	1
tmp$'Actual Outcome' <- as.character(tmp$'Actual Outcome')	1	1
which(fullComb$Embarked == '')	1	1
clnTst <- suppressWarnings(sapply(data.frame(MLtest[, -16]),as.numeric))	1	1
full_data[c(62, 830), 'Fare']	1	1
famIDs <- data.frame(table(fullComb$FamilyID))	1	1
train$Age[is.na(train$Age)]=sample(train$Age[!is.na(train$Age)],177)	1	1
counts <- table(train$Survived, train$Sex)	1	1
full_data$FareRange[full_data$Fare <20 & full_data$Fare >= 10] <- 'bw10and20'	1	1
tot$Pclass<-as.factor(tot$Pclass)	1	1
full[full$cabin_deck %in% c('A', 'G', 'T'), ]$cabin_deck <- 'AGT'	1	1
combine$Parch<-as.numeric(as.character(combine$Parch))	1	1
summary(first_lm_)	1	1
test.nn[, rescale.Pclass3.Fare := rescale(Pclass3.Fare, to = c(0, 1), from = range(train$Pclass3.Fare))]	1	1
print(weights)	1	1
full$Fare[c(1044)] = 8.05	1	1
total$FsizeD[total$Fsize >= 5] <- 'MDep'	1	1
clean_train$Sex <- as.factor(clean_train$Sex)	1	1
round(prop.table(table(train2$Sex, train2$Survived),margin = 1),2)	1	1
allData <- bind_rows(training, testing)	1	1
submission <- data.frame(PassengerId = testdata$PassengerId, Survived = prediction)	1	1
full$FamilyID <- as.factor(full$FamilyID)	1	1
train_tbl_with_age <- mutate(train_tbl_with_age, Age_Bin_Order = ifelse(Age < 3, 1, ifelse(Age < 13, 2, ifelse(Age < 19, 3, ifelse(Age < 26, 4, ifelse(Age < 41, 5, ifelse(Age < 60, 6, 7)))))))	1	1
val_m$HasFamily <- factor(ifelse(val_m$FamilySize == 1, c(0), c(1)))	1	1
age[age_na_rows] = sample(ages, length(age_na_rows))	1	1
wts<-c(inps,melt(outs)$value)	1	1
doe$mtry[i],	1	1
full$Alone[full$Fsize == 1] = 1	1	1
df_train$Embarked[is.na(df_train$Embarked)] <- names(sort(table(df_train$Embarked),decreasing=TRUE)[1])	1	1
combined  <- bind_rows(train, test) # bind training & test data	1	1
ensemble_predict$NB = as.numeric(ensemble_predict$NB)	1	1
"train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings=c("""",""NA""))"	1	1
"test <- read.table(""../input/test.csv"", header = T, sep = "","", stringsAsFactors = F)"	1	1
dim(datamerging)	1	1
sapply(data, function(y) sum(length(which(is.na(y)))))	1	1
titanic2$Fare2[titanic2$Fare < 10] <- '<10'	1	1
"missing.types <- c(""NA"", """")"	1	1
sum(Titanic_train$Pclass == 'Upper' & Titanic_train$Survived == 1) / sum(Titanic_train$Pclass == 'Upper')	1	1
summary(data.train)	1	1
table(tree = train_party, real = titanic$survived)	1	1
submission$Survived <- predict( rf, extractFeatures(test) )	1	1
fullComb[1:891,]	1	1
"gbm.predict <- ifelse(gbm.predict == ""no"", 0, 1)"	1	1
"full$Title[full$Title %in% rare_title]  <- ""Rare"""	1	1
output[, or := as.numeric(or)]	1	1
"names(test.result)<-c(""PassengerId"",""Survived"")"	1	1
table(full$Parch,full$Survived)	1	1
varimportance <- data.frame(Variables = row.names(importance), importance = round(importance[,'MeanDecreaseGini'],2))	1	1
mean(is.na(titanic$age))	1	1
survived <- train_tbl %>% filter(Survived == 1) %>% group_by(Sex) %>% summarise(Survived = n())	1	1
summary(titanic2$Age)	1	1
"doe = data.table(expand.grid(name = c(""all"", ""trim""), alpha = seq(0, 1, 0.1)))"	1	1
as.numeric(cm_NB_bal$byClass[1]), # Sensitivity	1	1
test_nn$NumSex <-  (test_nn$NumSex - min(test_nn$NumSex)) /	1	1
levels(train.df$Survived) <- make.names(levels(factor(train.df$Survived)))	1	1
full[which(is.na(full$Embarked)), 1]	1	1
doe$max_depth[i],	1	1
trainset_2$Sex<-as.numeric(trainset_2$Sex)	1	1
Titanic_data$Title[Titanic_data$Title=='Lady']='Miss'	1	1
datamerging$Pclass=as.factor(datamerging$Pclass)	1	1
train$Pclass= as.factor(train$Pclass)	1	1
x1<-rep(layer.x[layer2]*diff(x.range)-line.stag*diff(x.range),struct[layer1])	1	1
nrow(subset(df_combined, is.na(Cabin) == TRUE))	1	1
"val_m[val_m$Embarked == """",c('Embarked')] = 'S'"	1	1
full[is.na(full$Fare), ]$Fare <-	1	1
"scale_fill_discrete(labels=c(""No"", ""Yes""))"	1	1
Titanic_test$Pclass <- as.factor(Titanic_test$Pclass)	1	1
"train = trn_m[,append(disc_var,c(""Survived_F""))]"	1	1
d <- train %>% select(Survived, Parch)	1	1
combined$Fam <- paste(combined$Surname, combined$FamSize, sep='_')	1	1
unique(data$Embarked)	1	1
solution.naiveBayes <- data.frame(PassengerID = test$PassengerId, Survived = predict.NaiveBayes)	1	1
data[[i]]$Survived <- as.factor(data[[i]]$Survived)	1	1
sub <- subset(test_member, !(test_member$PassengerId %in% test_member$PassengerId[i]))	1	1
"Features = trainDS[ , c(""Pclass"", ""Age"", ""Sex"")]"	1	1
full$underTen <- F	1	1
group_by(Groupticket) %>%	1	1
table(tb[is.na(tb[,1]),2])	1	1
summary(fullComb)	1	1
fmlyIDs <- data.frame(table(full$familyID))	1	1
"test_nn <- raw_test[ , c(""Pclass"", ""NumSex"", ""Age"", ""SibSp"", ""Parch"", ""NumEmbarked"", ""Fare"")]"	1	1
titanic$Deck <- tapply(substr(as.character(titanic$Cabin),1,1),titanic$Ticket,max)[titanic$Ticket]	1	1
"submission = cbind(""PassengerId""= test$PassengerId,""Survived""=Predict_Class)"	1	1
"freq<-as.data.frame(table(combine[,c(""Pclass"",""Survived"")]))"	1	1
"write.table(out, file = ""Resultado_Titanic_NN_20180104.csv"", row.names=FALSE, sep="","")"	1	1
indatanoble = c('Don', 'Dona','Sir','the Countess', 'Lady', 'Jonkheer')	1	1
doe$nrounds[i], min_child_weight = doe$min_child_weight[i],	1	1
fulldata$Title[c(760, 1306)] <- 'Mrs'	1	1
"d.predict <- d.all[is.na(Survived),c(""Title"",""Last"",""Sex"",""Age"",""Family"",""SibSp"",""Parch"",""Pclass"",""Embarked"")]"	1	1
doe = data.table(doe)	1	1
levels(test$Embarked)=levels(train$Embarked)	1	1
test$Survival<-y_pred	1	1
print(paste('Threshold calculated: ', threshold, ' - ', 'F1-score: ', F1))	1	1
check<-data.frame(mtry=integer(0), nodesize=integer(0), ntrees=integer(0), OOB=numeric(0))	1	1
y.names<-colnames(eval(mod.in$call$y))	1	1
factor_var<-c('Survived','Sex','Embarked','Pclass')	1	1
inps<-c(inps,melt(rbind(rep(NA,ncol(tmp)),tmp))$value)	1	1
"ttest <- train[-part,!names(train)==""cat""]"	1	1
nrow(subset(df_combined, is.na(Age) == TRUE))	1	1
"train$Age[grepl(""Dr\\."", train$Name) & is.na(train$Age)] = mean.dr"	1	1
tot$Title[tot$Title %in% c('Miss', 'Mlle', 'Lady', 'Ms')]<-'Miss'	1	1
train%>%group_by(Embarked)%>%count()->freq;	1	1
train$farediv[which(train[,10]>30)]<-3	1	1
fullComb$FsizeD[fullComb$FamilySize < 5 & fullComb$Fsize > 1] <- 'small'	1	1
full <- bind_rows(train, test) #bind training and test data	1	1
fullComb$Title[fullComb$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'	1	1
wts<-wts[grep('out',names(wts))]	1	1
fullComb$Surname <- sapply(fullComb$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})	1	1
mods.list$gbm = gbm.list	1	1
AgeNorm <- predict(AgeNorm, as.data.frame(titanic$Age))	1	1
Sex_survival<-table(titanic$Survived,titanic$Sex)	1	1
cTrain$Embarked <- as.factor(cTrain$Embarked)	1	1
group_by(Pclass,Deck,Embarked) %>%	1	1
"full[full$Embarked=="""",]$Embarked<-""S"""	1	1
"full$ticket_str <- gsub(""(\\D*)\\d+"", ""\\1"", full$Ticket)"	1	1
"pros <- c(""Col"", ""Capt"", ""Major"", ""Dr"")"	1	1
"levels(trainset$Survived)<-c(""Perished"",""Survived"")"	1	1
imputeDataDummy <- cbind(imputeData[,-toFactor], d2)	1	1
data_to_mice <- data %>% select(Pclass, Sex, Age, SibSp, Parch, Fare)	1	1
algorithmList <- c('lda', 'rpart', 'glm', 'knn', 'svmRadial')	1	1
full[1040:1045,]	1	1
names(test.df)	1	1
"cat(title_to_get, ""age range:"", min(ages), ""-"", max(ages), ""\n"")"	1	1
newX = as.matrix(test)	1	1
x = as.matrix(train2[,2:18])	1	1
full$Fare2[full$Fare<=7.91] = 1	1	1
summary(training) #### Check the Summary on data	1	1
fulldata$isFemale=0	1	1
knn_test$Fare <- (knn_test$Fare - min_fare) / (max_fare - min_fare)	1	1
print(paste('Accuracy Logit',1-misClasificError))	1	1
combi$Age <- mice_output$Age	1	1
titanic$Title <- Title	1	1
"length(dat_all[dat_all$with_fam==0 & dat_all$cat==""train"", ""Survived""])"	1	1
full_data$Title <- sapply(full_data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})	1	1
"DT = data.table(melt(qda.diag, id.vars = c(""stat"", ""name"", ""mod"")))"	1	1
trainset$Embarked <- factor(trainset$Embarked)	1	1
table(train$Cabin_Letter)	1	1
my_df$Name   <- NULL	1	1
datamerging$Survived=as.factor(datamerging$Survived)	1	1
combi$TitleCat[combi$Title %in% c('Mrs', 'Ms', 'Mme')] <- 'Mrs'	1	1
full$isAlone[full$SibSp > 0] <- F	1	1
full_data$FsizeD[full_data$Fsize == 1] <- 'singleton'	1	1
levels(test_data_set$pclass) <- levels(new_train$pclass)	1	1
Out <- as.data.frame(titanic.test$PassengerId)	1	1
cols<-rep(pos.col,struct[layer1])	1	1
train$Cabin_letter <- str_sub(train$Cabin, 1,1) %>% as.factor	1	1
mean(age.data$Age[age.data$FamSize==5]),	1	1
trEmbarked <- tr %>% group_by(Embarked) %>% summarize(cnt=n(),surv=mean(Survived)) %>% arrange(-surv) %>% as.data.frame()	1	1
titanic[is.na(titanic$Survived),]	1	1
train$Survived<-as.logical(train$Survived)	1	1
print(stack.glm)	1	1
medianFare <- median(completeTrain$Fare)	1	1
summary(mice_corr)	1	1
train$Name[c(1:5)]	1	1
submission=as.data.frame(submission)	1	1
data.combined[which(data.combined$Name %in% dup.names),]	1	1
trRF[-flds[[1]], ],	1	1
"test <- read.csv(""../input/test.csv"", stringsAsFactors=F, na.strings=c(""NA"", """"))"	1	1
full[Category == 'cv', sum(RfSurvived == Survived)/length(Survived)]	1	1
"ynew = as.numeric(attr(predict(mod, newdata = data.table(Xtest), probability = TRUE), ""probabilities"")[,2])"	1	1
titanic$Title[titanic$Title %in% c('Mme', 'Mlle')] <- 'Mlle'	1	1
dim(train); dim(test); dim(full)	1	1
data$Cabin=as.factor(as.character(data$Cabin))	1	1
wts.rs<-unlist(lapply(wts.rs[grep(src.str,names(wts.rs))],function(x) x[all.in+1]))	1	1
cTest <- MLtest[ ,-c(1, 3, 8, 10, 11, 12, 14)]	1	1
test[, Age := test.mice$Age]	1	1
data[801:889,]	1	1
"completeTrain$Fare, col=""lightblue"", xlab=""Fare"", main=""Histogram of Fare"","	1	1
finalTraining[-inCrossVal,]	1	1
"geom_vline(aes(xintercept=median(Fare, na.rm = TRUE)), col=""green"")"	1	1
summary(extractFeatures(test))	1	1
test <- subset(test.raw,select=vnames)	1	1
test.nn[, rescale.SibSp.2 := rescale(SibSp.2, to = c(0, 1), from = range(train$SibSp.2))]	1	1
mod.dat[, Embarked := droplevels(Embarked)]	1	1
train_refined[626:891,]	1	1
test_df$Survived <- ifelse(is.na(test_df$Survived), 0, test_df$Survived)	1	1
combi$Cabin[combi$Cabin %in% c('F')] <- 'F'	1	1
arrange(PassengerId)	1	1
test$Age[is.na(test$Age)]=sample(test$Age[!is.na(test$Age)],86)	1	1
"full$Title[full$Title == ""Mme""]  <- ""Mrs"""	1	1
full$title<-gsub('(.*,)|(\\..*)','',full$Name)	1	1
CleanTotal$lFare <- log(CleanTotal$Fare + .01)	1	1
train$Pclass <-  as.factor(train$Pclass)	1	1
data_test$Sex <- as.factor(data_test$Sex)	1	1
"test.survived=data.frame(Survived=rep(""None"", nrow(test)), test[,])"	1	1
"data.train <- read.csv(paste(input.dir, 'train.csv', sep =""""))"	1	1
"train <- read.csv(""../input/train.csv"", stringsAsFactors=F, na.strings=c(""NA"", """"))"	1	1
full$Name = as.numeric(as.factor(full$Name))-1	1	1
data.classifier.lda <- lda(data.classifier.formula, data.train.use, prior = c(0.7, 0.3))	1	1
"male <- which(train$Sex == ""male"")"	1	1
"test$Sex[which(test$Sex==""male"")]<-0"	1	1
par(mfrow=c(2,1))	1	1
summary(data$Age)	1	1
test.nn[, rescale.Pclass3.Age := rescale(Pclass3.Age, to = c(0, 1), from = range(train$Pclass3.Age))]	1	1
train$Survived <- ifelse(train$Survived == 1, 'Yes', 'No')	1	1
combi$MenWithMoreRel[combi$Parch>2 & combi$Sex=='Male'] <- 1	1	1
summarize(family_n = n()) %>%	1	1
test$family_size <- test$SibSp + test$Parch + 1	1	1
DstTrainClean$TitleType <- ifelse(DstTrainClean$Title %in% Passenger.man, 'Passenger.man',DstTrainClean$TitleType)	1	1
Predic_svm<-as.logical(Predict_svm)	1	1
full2 = full[,-c(1,4,9,11,14)]	1	1
full$Title = as.factor(full$Title)	1	1
tst_m.origfare_noNA = tst_m[complete.cases(tst_m[,c('Fare')]),c('Fare')]	1	1
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[ ,'MeanDecreaseGini'],2))	1	1
"dat_all[dat_all$Ticket==ticket_freq[j,1], ""PassengerId""],"	1	1
full_data$Title[full_data$Title %in% high_rank_female] <- 'High_rank_female'	1	1
"NoNAAge <- DstTrain[!is.na(DstTrain$Age),c(""Age"")]"	1	1
"print(paste(""sum_of_errors:"",sum(abs(age.reg.p - age.data.test$Age))))"	1	1
titanic[a2,]	1	1
floor(mean(first_class[,6], na.rm = T))	1	1
names(varMissings) <- names(full)	1	1
gbm.pred = function(Xtrain, Ytrain, Xtest, Ytest, negative, cutoff, objective, eval_metric, eta, max_depth, nrounds, min_child_weight, gamma)	1	1
floor(mean(second_class_test[,5], na.rm = T))	1	1
"hist(trn_m$Age_comp_FM, freq= FALSE, main = ""Training Data: Age via Mean"", ylim = c(0,0.045))"	1	1
sapply(test.raw,function(x) sum(is.na(x)))	1	1
knn_test$Child <- factor(knn_test$Child, labels = c('0','1'))	1	1
full_data$AgeRange[full_data$Age <= 9] <- 'lessthan9'	1	1
"varsToKeep <- c(""Survived"", ""TitleType"", ""Sex"", ""Age"", ""Pclass"", ""Embarked"", ""Fare"", ""SibSp"")"	1	1
combine<-combine[order(combine$rownum),]	1	1
train_clean[,-8]	1	1
full$title<-as.factor(full$title)	1	1
"test <-   as.data.frame(read_csv(""../input/titanic/test.csv""))"	1	1
output[, nodes := doe$nodes[i]]	1	1
combined.df$Survived <- as.factor(combined.df$Survived)	1	1
ensemble_predict$RF = as.numeric(ensemble_predict$RF)	1	1
testset$Sex <- factor(testset$Sex)	1	1
y.names<-all.names[grep('Output',all.names$unitName),'unitName']	1	1
index <- sample(seq_len(nrow(train)), size = trainSize)	1	1
counts <- table(data$Pclass)	1	1
prop.table(table(titanic2$Survived))	1	1
train$Ticket <- NULL	1	1
whole.data[, name] <- as.factor(whole.data[, name])	1	1
Prediction <- as.integer(Prediction > 0.5)	1	1
full_data[c(62, 830), 'Embarked']	1	1
print(gbm.fit)	1	1
dim(full)	1	1
t(test_na[test_na>0]) #Print values greater than 0	1	1
Parch_survival<-table(titanic$Survived,titanic$Parch)	1	1
summary(Titanic_data_preprocess)	1	1
a1    <- which(is.na(Fare)) # there exists one entry with NA	1	1
summary(full) #only shows 5 number summary, not useful for qualitative	1	1
Data[-inTrain,]	1	1
"split_before_title = strsplit(names, "","")"	1	1
solution_1 <- data.frame(PassengerId = test$PassengerId, Survived = prediction_1)	1	1
val_df$Age <- ifelse(is.na(val_df$Age), avg_age, val_df$Age)	1	1
lda.pred = function(Xtrain, Ytrain, Xtest, Ytest, negative, cutoff)	1	1
train <- select(train, -PassengerId, -Name, -Ticket, -Cabin)	1	1
"qda.diag[, mod := rep(""qda"", nrow(qda.diag))]"	1	1
factor_vars <- c('PassengerId','Pclass','Sex','Embarked','Title','Surname','FamilySizeCategory')	1	1
sum(Titanic_train$Survived == 0 & Titanic_train$Sex == 'Female')	1	1
table(full$title)	1	1
"levels(data_train$Sex) <- c(""Feminino"", ""Masculino"")"	1	1
"combine$tittle<-substr(combine$tittle,2,str_locate(combine$tittle,""[.]"")[,1])"	1	1
train$siblingyn<-0	1	1
train$Title <- gsub('(.*, )|(\\..*)', '', train$Name)	1	1
"mergedData$title[mergedData$title == ""Mlle""] <- ""Miss"""	1	1
aggregate(Survived ~ Child + Sex, data=train, FUN = function(x) {sum(x)/length(x)})	1	1
aggregate(train[,2], list(train[,5]), length)	1	1
tst_m$Embarked = factor(tst_m$Embarked)	1	1
full_data$Title <- sub(' ', '', full_data$Title)	1	1
trn_imp_ds = trn_m[names(trn_m) %in% cols_for_age_imp]	1	1
"sl.list = list(""mod"" = sl.mod, ""cutoff"" = cuts)"	1	1
"full<-merge(full,NTicket,by=""Ticket"",all.x=""TRUE"")"	1	1
test_nn$SibSp <-  (test_nn$SibSp - min(test_nn$SibSp)) /	1	1
test_df$Survived <- as.numeric(pred_test > .5)	1	1
data2[is.na(data2[,'Age']),]	1	1
train_tbl <- tbl_df(read.csv('../input/train.csv', stringsAsFactors = FALSE))	1	1
geom_bar(aes(fill = as.factor(Survived))) +	1	1
class(my_dt_prediction)	1	1
train_tbl_wo_age <- summarise(train_tbl_wo_age, Total_Without_Age = n())	1	1
DstTest$TitleType <- ifelse(DstTest$Title %in% Passenger.woman, 'Passenger.woman',DstTest$TitleType)	1	1
apply(DstTrainClean,2,pMiss)	1	1
aggregate(tot$Fare, by=list(tot$Embarked), FUN=mean ,na.rm=TRUE)	1	1
test$age[is.na(test$age)] <- median(test$age, na.rm = TRUE)	1	1
pred_survived <- as.numeric(pred_val > .5)	1	1
as.numeric(cm_RF_bal$byClass[2]), # Specificity	1	1
pr$Survived <- NA	1	1
full$Fsize = as.numeric(as.factor(full$Fsize))-1	1	1
"full[is.na(full$Age) & full$Title == ""Mr"", ]$Age <-age_by_title[age_by_title$Title== ""Mr"", ]$Age"	1	1
val_m$Sex = factor(val_m$Sex)	1	1
missing_test<-t(data.frame(sapply(test_data, function(x) sum(is.na(x)))))	1	1
"test$Set <- rep(""Test"", nrow(test))"	1	1
"pred_test <- ifelse(predict(stack.rf, newdata =test) == ""Y"",1,0)"	1	1
table(train_os$Survived_F)	1	1
test$Survived<-y_pred	1	1
combined.df$Pclass <- as.factor(combined.df$Pclass)	1	1
sum(is.na(train$Fare))	1	1
ts<-table(train$Survived)	1	1
mod.in$snnsObject$getCompleteWeightMatrix()	1	1
"data_test$Age <- cut(data_test$Age, c(0, 30, 50, 100), labels = c(""Jovem"", ""adulto"", ""Idoso""))"	1	1
tmp <- model.matrix(PassengerId ~ Pclass,df[,c('PassengerId','Pclass')])	1	1
train_tbl_with_age_by_Sex_Age_Total <- group_by(train_tbl_with_age, Sex, Age_Bin, Age_Bin_Order)	1	1
test_predictions_results <- ifelse(test_predictions > 0.5,1,0) #converting true-false values into 1s and 0s	1	1
data.test[,'Age'] <- data.global[-c(1:dim(data.train)[1]), 'Age']	1	1
levels=c(0,1),	1	1
"table_words [grep(""\\."", names(table_words))],"	1	1
trainset$Survived<-as.factor(trainset$Survived)	1	1
types = function(dat)	1	1
prop.table(table(train$Survived)) # converts above to decimal	1	1
fulldata[!is.na(fulldata$Deck), ],	1	1
ran_ticket <- ticket_freq %>% group_by(Freq) %>% sample_n(10, replace=TRUE)	1	1
varMissings <- c()	1	1
"trainset$Survived[trainset$Survived==0]<-""Perished"""	1	1
"DT = data.table(melt(rf.diag, id.vars = c(""stat"", ""ntree"", ""mtry"", ""nodesize"", ""mod"")))"	1	1
trainCompleteCases[-inTrain,]	1	1
"full$Embarked[full$Embarked == """"] <- NA"	1	1
age_compare[1,] = c('Train', 'Original', mean(trn_m[complete.cases(trn_m[,c('Age')]),c('Age')]), sd(trn_m[complete.cases(trn_m[,c('Age')]),c('Age')]))	1	1
full[, Survived := as.factor(Survived)]	1	1
"L2.predict <- unname(predict(log.model,newdata=D2,type=""response""))"	1	1
sum(is.na(train$SibSp))	1	1
data_test$Age <- as.numeric(data_test$Age)	1	1
Titanic_train$Sex <- as.factor(Titanic_train$Sex)	1	1
my_df$Cabin <- NULL #remove Cabin	1	1
sapply(data_test, function(x) sum(is.na(x)))	1	1
"print(""Variance_Inflation_Factor(VIF)"")"	1	1
dissim <- cluster::daisy(select(tmp,one_of(compareAttribs)))	1	1
data %>% filter(Pclass=='Lower', Embarked=='S') %>%	1	1
"mean.miss <- mean(train$Age[train$Title == ""Miss."" & !is.na(train$Age)])"	1	1
"Features[, ""Age""],"	1	1
submit <- tbl_df(select(test_tbl,PassengerId, Sex, Age))	1	1
full$Age2[full$Age<=16] = 1	1	1
"print(""Modelo contruido"")"	1	1
train_nb$SibSp_f <- factor(train_nb$SibSp)	1	1
sum(Titanic_train1$Age >= 30 & Titanic_train1$Age < 50 & Titanic_train1$Survived == 1) / sum(Titanic_train1$Age >= 30 & Titanic_train1$Age < 50)	1	1
mods.list$qda = qda.list	1	1
"train$Age[train$Title == ""Mrs."" & is.na(train$Age)] <- mean.mrs"	1	1
trainset$Survived <- factor(trainset$Survived)	1	1
train[, NewCabin := sapply(Cabin, function(x) {length(strsplit(x, ' ')[[1]])})]	1	1
test_nn$Parch <-  (test_nn$Parch - min(test_nn$Parch)) /	1	1
data$Sector <- as.factor(data$Sector)	1	1
titanic2[!is.na(titanic2$Embarked),]	1	1
allData$Age <- as.numeric(allData$Age)	1	1
any(is.na(train)) #Are there NA values?	1	1
if(length(x.names) != length(x.lab)) stop('x.lab length not equal to number of input variables')	1	1
table(full$Title,full$Survived)	1	1
embarkedImpact <- data.frame(table(allData$Survived, allData$Embarked))	1	1
outs<-wts[grep(paste0('Hidden_',hid.num+1),row.names(wts)),grep('Output',colnames(wts)),drop=F]	1	1
TitanicResult <- data.frame(PassengerId = DstTestClean$PassengerId, Survived = predictedval)	1	1
titanic$Embarked   <- factor(titanic$Embarked)	1	1
knn_test$Title <- factor(knn_test$Title, labels = c(1:5))	1	1
test_data$prediction[is.na(test_data$prediction)] <- as.integer(round(mean(as.numeric(data$Survived))))	1	1
dft$logfare=log(dft$Fare)	1	1
names(train.df)	1	1
newdata <- subset(full, Sex == 'male')	1	1
tmp <- table(df$title) < 15	1	1
FsizeD <- rep(NA, length(Fsize))	1	1
"list.of.packages[!(list.of.packages %in% installed.packages()[,""Package""])]"	1	1
ind<-which(is.na(full$Age))	1	1
tmp<-wts[grep(uni.hids[i],rownames(wts)),grep(uni.hids[i+1],colnames(wts)),drop=F]	1	1
if('mlp' %in% class(mod.in)) warning('Bias layer not applicable for rsnns object')	1	1
prop.table(table(train$Survived)) * 100	1	1
member2 <- data.frame(FM[1],FM[k])	1	1
full$Fare2[full$Fare>14.454& full$Fare<=31] = 3	1	1
counts <- table(data$Sex)	1	1
LogRegTotal[892:1309,]	1	1
val_Pclass1 <- filter(val, Pclass == 1)	1	1
"colnames(predTitanicTrain) <-c(""Survived"")"	1	1
trainIndex <- sample(1:nrow(cleandata),floor(0.7*nrow(cleandata)), replace = TRUE)	1	1
train.data2$Sex <- factor(train.data2$Sex)	1	1
mice_corr$imp$Age #quick check of imputed data	1	1
PctGlm=sum(GlmSurvived == Survived)/length(Survived),	1	1
src.str<-paste('hidden',layer1)	1	1
"completeTrain$FareRange[completeTrain$Fare > medianFare] <- ""high"""	1	1
"DT = data.table(melt(log.diag, id.vars = c(""stat"", ""mod"")))"	1	1
cTest$lFareRange <- as.factor(cTest$lFareRange)	1	1
sum(is.na(Parch))	1	1
theta.initial <- as.vector(rep(0,length(coloumns.to.fit)))	1	1
df <- data.frame(Title=names(tab), proportion=as.numeric(tab))	1	1
select(survived, pclass, sex, age, sibsp) %>%	1	1
"full_data$Embarked[c(62,830)] = ""S"""	1	1
train_tbl_with_age <- mutate(train_tbl_with_age, Age_Bin = ifelse(Age < 3, 'Infant', ifelse(Age < 13, 'Child', ifelse(Age < 19, 'Teenager',ifelse(Age < 26,'Young_Adult', ifelse(Age < 41,'Adult',ifelse(Age < 60,'Middle_Age','Old_Age')))))))	1	1
full$Age <- TMPComplete$Age	1	1
"drage<-mean(test$Age[which(test$Name==""Dr."")],trim=.5,na.rm=TRUE)"	1	1
full_data$Title <- factor(full_data$Title)	1	1
"var_list <- c(""Pclass"",""Sex"",""Embarked"",""Age"",""SibSp"",""Parch"",""Fare"")"	1	1
theDataImpute   <- matrix(NA, nrow(imputeDataDummy), length(kNumber)) # to store predicted Age	1	1
whole.data[whole.data$Age>=21 & whole.data$Age<28, 'AgeBin'] <- '2'	1	1
full[test_idx, best_var]	1	1
raw_test$Fare[is.na(raw_test$Fare)] <- mean(raw_test$Fare,na.rm=T)	1	1
"varsToKeep <- c(""Survived"", ""Age"", ""Fare"", ""Sex"", ""Embarked"", ""SibSp"", ""Pclass"")"	1	1
Titanic_data$Title[Titanic_data$Title=='Dr']='Sir'	1	1
"print(""Survival of people who have siblings/spouses aboard"")"	1	1
trn_m$NonFC_wCabin <- ifelse(trn_m$Pclass != 1 & trn_m$HasCabin == 1, c(1), c(0))	1	1
summary(trainData1)	1	1
train_refined=train[,-c(11,12)]	1	1
doe = doe[!duplicated(doe)]	1	1
train$Age<-cut(as.numeric(train$Age),breaks=c(0,1,seq(from=5,to=100,by=5)))	1	1
df <- df[order(-df$proportion),]	1	1
trClean$Survived <- as.factor(trClean$Survived)	1	1
"trClean2[,!names(trClean2) %in% ""Survived""] <- complete(miceMod)"	1	1
completeTrain$Survived <- as.factor(completeTrain$Survived)	1	1
print(top.run4)	1	1
summary(Prediction)	1	1
"rhs = paste(names(Xtrain), collapse = "" + "")"	1	1
"combine$age.range<-ifelse(combine$age.fill<5,""TODDLER"",ifelse(combine$age.fill<10,""HIGHSCHOOL"",ifelse(combine$age.fill<21,""TEEN"",ifelse(combine$age.fill<35,""ADULT"",ifelse(combine$age.fill<55,""OLDADULT"",ifelse(combine$age.fill<200,""ELDERLY"",))))))"	1	1
factor_check<-sapply(full,function(x) (length(unique(x))))	1	1
op<-as.data.frame(PassengerId)	1	1
formattable(subset(mergedData,nchar(as.character(Embarked)) == 0))	1	1
models <- list(svmPoly=svmPoly_model, rf = rf_model, glm = glm_model, glmnet=glmnet_model, xgboost=xgb_model, svmLinear=svmLinear_model, svmRadial=svmRadial_model, knearest=knn_model)	1	1
"levels(data_test$Embarked) <- c(0, ""Cherbourg"", ""Queenstown"", ""Southampton"")"	1	1
trn_m$Pclass = factor(trn_m$Pclass)	1	1
"chisq.test(table(Age_impute$Survived, Age_impute$Agegroup2, useNA = ""ifany""))"	1	1
DstTest$TitleType <- ifelse(DstTest$Title %in% Passenger.man, 'Passenger.man',DstTest$TitleType)	1	1
data[!is.na(data$Age), ]	1	1
sapply(titanic, function(x) length(unique(x)))	1	1
sum(is.na(df) == TRUE) / length(df);	1	1
endResult<-data.frame(PassengerId = test$PassengerId, Survived = ans_rf_predict)	1	1
full_data$Title<-as.factor(full_data$Title)	1	1
"left_join(avAges, by = c(""Sex"" = ""Sex"",""Pclass"" = ""Pclass"",""Parch"" = ""Parch"")) %>%"	1	1
"test[grepl(""Mrs"",Name) & is.na(Age),Age:=mrs]"	1	1
full$Family <- paste(full$Surname, full$Fam.size, sep='.....')	1	1
val_m$Survived_F = factor(val_m$Survived)	1	1
cor.train2.l = cor.train2 %>% as.data.frame %>% mutate(item1 = rownames(.)) %>% gather(item2,corr,-item1)	1	1
workData$PassengerId,	1	1
which(is.na(train$Sex))	1	1
MedianQ <- median(subset(total, Embarked == 'Q')$Age , na.rm = TRUE)	1	1
"levels(data_train$Embarked) <- c(0,""Cherbourg"",""Southampton"", ""Queenstown"")"	1	1
fitted.class <- ifelse(fitted.results > 0.5,1,0)	1	1
kaggle.sub <- cbind(test$PassengerId,survival)	1	1
rpart_imputation$Age, freq=F, xlab ='Passengers Age', main='Age: Rpart Output',	1	1
misClasificError <- mean(fitted.results != test$Survived)	1	1
data[is.na(data$Age),'Age']=median(data$Age, na.rm=T)	1	1
rare_title <- c('Capt', 'Col', 'Don', 'Dona', 'Dr', 'the Countess', 'Jonkheer', 'Lady', 'Major', 'Rev', 'Sir')	1	1
dt<-table(train$Survived,train$Sex)	1	1
format(summary(test))	1	1
ageImpact <- data.frame(Age=allData$Age, Survived=allData$Survived)	1	1
"levels(data_test$Pclass) <- c(""Alta"", ""Média"", ""Baixa"")"	1	1
train%>%group_by(SibSp)%>%count()->freq;	1	1
"train_full$Pclass=factor(train_full$Pclass,labels = c(""1st"",""2nd"",""3rd""))"	1	1
outs<-rbind(rep(NA,ncol(outs)),outs)	1	1
df[-trainIndex,]	1	1
"submit <- mutate(submit, Survived = ifelse(Sex == ""female"", 1, ifelse(Age < 13, 1,0)))"	1	1
solution3 <- data.frame(PassengerID = test$PassengerId, Survived = pred)	1	1
"print(""Acc"")"	1	1
TRAIN[,features]	1	1
train$Pclass ~ train$Survived,	1	1
dft$Age[is.na(dft$Age)]=mean(dft$Age, na.rm=TRUE)	1	1
test.data2$Embarked <- factor(test.data2$Embarked)	1	1
test.mice[, log.Age := log(Age)]	1	1
"titanic <-   as.data.frame(read_csv(""../input/titanic/train.csv""))"	1	1
Test$Pclass %<>% as.character()	1	1
new_titanic$Sex<-as.numeric(factor(new_titanic$Sex))	1	1
Age_impute <- data.frame(Survived = trainset$Survived, Age = trainset$Age)	1	1
full$pclass <- as.factor(full$Pclass)	1	1
max_depth = c(4, 7, 10),	1	1
table(full$familyID2)	1	1
full_data$AgeRange[full_data$Age <= 25 & full_data$Age> 9] <- 'bw9and25'	1	1
full$Embarked = as.numeric(as.factor(full$Embarked))-1	1	1
train$Cabin_Letter <- as.factor(substr(train$Cabin, 1, 1))	1	1
tmp <- sum(abs((age.ann.p - age.data.test$Age)))	1	1
test$Child<- 0	1	1
print(RF_model)	1	1
full[is.na(full$Age)==FALSE,]	1	1
Grid<- expand.grid(decay=c(0.0001,0.00001,0.000001))	1	1
"miceMod <- mice(trClean2[,!names(trClean2) %in% ""Survived""], method=""rf"",printFlag=FALSE)"	1	1
test.edit<-combine[c(1:nrow(test)),]	1	1
indatacommon = c('Miss', 'Mrs', 'Mr','Master')	1	1
full$Child	1	1
test_model_final <- randomForest(as.factor(Survived)~.,data = train, importance = TRUE)	1	1
"output = as.numeric(predict(mods[[i]], s = mods[[i]]$lambda.min, X, type = ""response""))"	1	1
prop.table(table(full$Pclass,full$Survived),1)	1	1
full %>% arrange(family) %>% select(PassengerId, family, Surname, Pclass, Fsize, Ticket, Fare, Embarked) %>% head(n=10)	1	1
age_title = as.data.frame(list(Age=age, Title=title))	1	1
train$Survived [train$Survived == 'Died'] <- 0	1	1
train$Title[train$Title == 'Mlle']        <- 'Miss'	1	1
fulldata$isKids[fulldata$Age <=18  & (fulldata$Parch > 0 | fulldata$TicketGroupSize>1 | fulldata$FamilynameSize>1)  & fulldata$Title != 'Mrs'] <- 1	1	1
"full[, Title := sapply(Name, function(x) {strsplit(strsplit(x,"", "")[[1]][2], '\\.')[[1]][1]})]"	1	1
names.rest <- lapply(names.split, FUN = function(x) {x[[2]]}) %>% unlist()	1	1
DstTestClean$TitleType <- ifelse(DstTestClean$Title %in% Nobility.man, 'Nobility.man',DstTestClean$TitleType)	1	1
train[-ind,]	1	1
full[Category == 'cv', sum(GlmSurvived == Survived)/length(Survived)]	1	1
full%>%group_by(Pclass)%>%dplyr::summarise(mean(Fare,na.rm=TRUE))	1	1
subm_train <- subset(train_male, split == T)	1	1
as.numeric(cm_RF_ubal$byClass[2]), # Specificity	1	1
"train$Embarked[ind]<-""C"""	1	1
"train$Embarked_Q<-as.logical(train$Embarked==""Q"")"	1	1
print(sv_model)	1	1
combined$Title[combined$Title == 'Mlle']        <- 'Miss'	1	1
this.deck <- llply(.data = cabin, .fun = function(x) {grep(pattern = letter, x = x)})	1	1
submit <- data.frame(PassengerId = test$PassengerId, Survived = predictedY)	1	1
full_data <- bind_rows(train_data,test_data)	1	1
Sensitivity= double(), Specificity = double(), Precision = double(),	1	1
test=data.frame(Survived=as.factor(rep(0,418)), test)	1	1
submission$test_model[submission$test_model<.5]<- 0	1	1
prRF$Survived <-prediction	1	1
mutate(FamilynameSize = n()) %>%	1	1
clnTst<-as.matrix(clnTst, sparse = TRUE)	1	1
"full[full$title=='Mlle',]$title<-""Miss"""	1	1
train1= cbind(Survived,  extractFeatures(train))	1	1
test$Survived <- round(sum(train$Survived)/nrow(train),2)	1	1
out=cbind(raw_test$PassengerId,result_bin)	1	1
"train_os <- ovun.sample(Survived_F ~ ., data = train, method = ""over"",N = trn_cnt)$data"	1	1
as.numeric(cm_NB_bal$byClass[2]), # Specificity	1	1
full  <- bind_rows(training.data.raw, test.data.raw) # bind training & test data	1	1
"tpr <- unlist(slot(tprfpr, ""y.values""))"	1	1
fits = lapply(1:length(mods), function(i) as.numeric(predict(mods[[i]], newdata = X)))	1	1
sapply(train.raw, function(x) {any(is.na(x))})	1	1
"names.arg = c(""Primera"", ""Segunda"", ""Tercera""),"	1	1
val_m$Pclass = factor(val_m$Pclass)	1	1
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'	1	1
full$Alone = as.numeric(as.factor(full$Alone))-1	1	1
levels(new_titanic$Embarked)<-c(NA,1,2,3)	1	1
mean(age.data$Age[age.data$Parch==5]),	1	1
train_dev_idx <- 1:dim(train)[1]	1	1
sum(Titanic_train$Survived == 1 & Titanic_train$Sex == 'Female')	1	1
full$familySize[full$familySize > 4] <- 'large'	1	1
train$Survived[train$Age >= 25 & train$Age < 65]	1	1
data_train$Sex <- as.factor(data_train$Sex)	1	1
data[data$Fare==0,'Fare']=tapply(data$Fare, data$Pclass, function(x) median(x, na.rm=T))[data[data$Fare==0,'Pclass']]	1	1
summary(predictions)	1	1
"drop.cols <- c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"")"	1	1
DstTestClean$TitleType <- ifelse(DstTestClean$Title %in% Passenger.man, 'Passenger.man',DstTestClean$TitleType)	1	1
gbm.tune$results	1	1
full$Age, freq=F, main='Age: After Data',	1	1
levels(Titanic_data$Title)	1	1
"levels(dft$Survived)= c(0,1) #change the ""survived"" variable from died/lived to 0/1 as requested"	1	1
as.numeric(cm_NB_ubal$overall[1]), # Accuracy	1	1
"n.trees=c(10,20),	        # Num trees to fit"	1	1
MLtest[, -2]	1	1
data.prediction <- cbind(data[,'PassengerId'] , as.numeric(predict(model, data)$class) - 1)	1	1
"full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""Small"""	1	1
aggregate(train[,2], list(train$agegroup), mean)	1	1
names(train) <- tolower(names(train))	1	1
test$pclass > 2, 0,	1	1
"a <- nzchar(Pclass); table(a)[""FALSE""]"	1	1
train$agegroup<-0	1	1
floor(mean(first_class_test[,5], na.rm = T))	1	1
age[i] = sample(na.omit(allData$Age),1)	1	1
colnames(combined.df)[ apply(combined.df, 2, anyNA) ]	1	1
Mrses[1:5,]	1	1
group_by(Title, Survived) %>%	1	1
"dat_all[dat_all$Embarked=='', ""Embarked""] <- ""S"""	1	1
"trn_m[trn_m$Embarked == """",c('Embarked')] = 'S'"	1	1
test[,-1]#remove passenger_id from test set	1	1
out.ls$row.nms<-factor(row.nms,levels=unique(row.nms),labels=unique(row.nms))	1	1
"test$predLogGLM <- predict(fit, LRtest, type = ""response"")"	1	1
total$Family <- paste(total$Surname, total$Fsize, sep='_')	1	1
final_ens_model$error	1	1
freqs <- table(train$Surname)	1	1
"predictors <- setdiff(names(df), c(response, ""Name""))"	1	1
sum(Titanic_train$Survived == 0 & Titanic_train$Sex == 'Male')	1	1
output[, min_child_weight := doe$min_child_weight[i]]	1	1
predictions_rf2 <- cbind(df_test$PassengerId,as.numeric(predict(mod_rf_all,newdata=df_test))-1)	1	1
"svm.diag[, mod := rep(""svm"", nrow(svm.diag))]"	1	1
"full[is.na(full$Age) & full$Title == ""Dr"", ]$Age <-age_by_title[age_by_title$Title== ""Dr"", ]$Age"	1	1
node.in<-which(y.names==all.out)	1	1
titanic$UOIG <- tapply(Survived, Ticket, function(x) sum(is.na(x)))[Ticket] - is.na(Survived)	1	1
combi$TitleCat[combi$Title %in% c('Capt', 'Col', 'Major', 'Rev', 'Dr')] <- 'Officer'	1	1
trPclass <- tr %>% group_by(Pclass) %>% summarize(cnt=n(),surv=mean(Survived)) %>% arrange(-surv) %>% as.data.frame()	1	1
full$FirstClass<-as.logical(full$Pclass==1)	1	1
df[df$Sex == 'male',]$Sex.int <- 1	1	1
fulldata[892:1309,]	1	1
forms<-eval(mod.in$call$formula)	1	1
full[full$isTrain== TRUE,]	1	1
(train %>% filter(is.na(Age)) %>% count)$n	1	1
which(is.na(full$Fare))	1	1
test$sex <- as.factor(test$sex)	1	1
survived_dudes <- filter(survived_all, Sex == 'male')	1	1
"traindata=read.csv(""../input/train.csv"",header = TRUE, stringsAsFactors  = FALSE,na.strings=c(""NA"",""NaN"", """","" "") )"	1	1
mutate(Rank = paste0('#', dense_rank(desc(importance))))	1	1
summary(train_refined)	1	1
aggregate(tot$Age, by=list(tot$FamilyAboardS), FUN=mean, na.rm=TRUE) #Average age by family size	1	1
mod.dat[, !find.dat, with = FALSE]	1	1
second_class <- filter(train, Pclass == 2)	1	1
cols<-rep('black',struct[val+1])	1	1
levels(test_data_set$embarked) <- levels(new_train$embarked)	1	1
train$FirstClass<-as.logical(train$Pclass==1)	1	1
print(fit)     #print results	1	1
combi$Child[combi$Age < 18] <- 1	1	1
train$Cabin <- NULL	1	1
summary(test_titanic)	1	1
rf_model <- randomForest(factor(Survived) ~ .,data = train)	1	1
database$Age[is.na(database$Age)] <- round(mean(database$Age, na.rm = TRUE))	1	1
my_df[1:891,]	1	1
"rf.train <- data.combined[1:891,c(""Pclass"",""title"")]"	1	1
full$FamilyID <- paste(full$Surname, full$Fsize, sep='_')	1	1
all$Title <- sub(' ', '', all$Title)	1	1
whole.data[whole.data$Title == 'Mme', 'Title'] <- 'Mrs'	1	1
genderImpact <- data.frame(table(allData$Sex, allData$Survived))	1	1
test$Age,	1	1
df_combined$Title[df_combined$Title == 'Mlle'] <- 'Miss' #http://www.dictionary.com/browse/mademoiselle?s=t	1	1
test.mice = data.table(test)	1	1
data[is.na(data[,'Age']),'Age'] <- predict(data.model, data.test)	1	1
output[, mtry := doe$mtry[i]]	1	1
X.all = as.matrix(X.all)	1	1
confusion.mat_test = table(test_data$Survived,fitted.class)	1	1
"full$gender <- relevel(full$gender, ref=""female"")"	1	1
DstTrain$TitleType <- ifelse(DstTrain$Title %in% Nobility.man, 'Nobility.man',DstTrain$TitleType)	1	1
test.df2 <- data.frame(Survived = rep(0, nrow(test.df)), test.df[,])	1	1
SibSp_survival<-table(titanic$Survived,titanic$SibSp)	1	1
"test=read.csv(file='!Original Data/test.csv',header=T,sep="","",na.strings=c(""NA"","" "",""""))"	1	1
summary(tr)	1	1
full$Age[is.na(full$Age) == TRUE & full$Sex == 'male'] <- median(Male_Ages$Age , na.rm =  TRUE)	1	1
"table(train$Embarked, useNA = ""always"")#done!"	1	1
mean_mv <- mean(na.omit(full$Fare[full$Embarked=='S' & full$Pclass==3]))	1	1
"qda.list = list(""mod"" = qda.mod, ""cutoff"" = cuts[1])"	1	1
fullComb$Age[is.na(fullComb$Age)] <- predict(Agefit, fullComb[is.na(fullComb$Age),])	1	1
testData1$PassengerId	1	1
output <- data.frame(PassengerID = test$PassengerId, Survived = prediction)	1	1
prop.table(table(train$Survived, train$Sex), 1) * 100	1	1
"total$Embarked <- ifelse(total$Embarked == """", ""S"", total$Embarked)"	1	1
test$Fare[is.na(test$Fare)]=sample(test$Fare[!is.na(test$Fare)],1)	1	1
X <- as.matrix(train_data[,coloumns.to.fit])	1	1
lay[1],layer2=lay[2],nid=nid,rel.rsc=rel.rsc,all.in=T,	1	1
combined.df$Title <- as.factor(combined.df$Title)	1	1
val.pred = ifelse(val.pred > 0.5, 1, 0)	1	1
table(titanic$Survived, pred)	1	1
"train[, Cabin := factor(gsub(""[0-9]"", """", Cabin))]"	1	1
knn_test <- test[,-c(1,2,4,9,11,14,16)]	1	1
mtry = c(3, 5, 7),	1	1
cols[unlist(lapply(wts,function(x) x[1]))<0]<-neg.col	1	1
table(allData$Sex, allData$Title)	1	1
"allData$Title[allData$Title == ""Mlle""] <- ""Miss"""	1	1
top.run4=max(summary(resampled)$statistics$Accuracy[,'Median'])	1	1
"train <- df_combined[1:891,c(""Pclass"",""Sex"",""Age"",""SibSp"",""Parch"",""Fare"",""Embarked"",""Title"",""Family_Member_Count"",""Parent"")]"	1	1
combi$Cabin[combi$Cabin %in% c('C')] <- 'C'	1	1
median(full_data[full_data$Pclass == '3' & full_data$Embarked == 'S', ]$Fare, na.rm = TRUE)	1	1
"train_glm_features <- train_glm[ , c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Embarked"", ""Fare"")]"	1	1
combined$FamSize <- combined$SibSp + combined$Parch + 1	1	1
titanic$NGrp <- table(titanic$Ticket)[titanic$Ticket]	1	1
train[factor_variables] <- lapply(train[factor_variables], function(x) as.factor(x))	1	1
as.numeric(cm_LR_ubal$byClass[1]), # Sensitivity	1	1
full2[1:891,]	1	1
x.names<-paste0(rep('X',struct[1]),seq(1:struct[1]))	1	1
summarise(n=sum(Fare)) %>%	1	1
aggregate(train[,2], list(train[,3]), length)	1	1
train.nn[, rescale.Fare := rescale(Fare, to = c(0, 1))]	1	1
n <- c(nrow(train), nrow(test))	1	1
"L0.predict <- unname(predict(log.model,newdata=D[idx2,],type=""response""))"	1	1
"hist(trn_m$Age_comp_MICE, freq= FALSE, main = ""Training Data: Age via MICE"", ylim = c(0,0.045))"	1	1
table(full$Survived,full$RareTitle)	1	1
"indata$title = gsub('(.*, )|(\\..*)',(""""),indata$Name)"	1	1
sum(Titanic_train$FamilySize == 'Single' & Titanic_train$Survived == 1) / sum(Titanic_train$FamilySize == 'Single')	1	1
train$Age[is.na(Age)] = mean(train$Age, na.rm = T)	1	1
"full[full$title %in% rare_title,]$title<-""Rare"""	1	1
variable.names(test)	1	1
t.test$Survived <- NA	1	1
x0<-rep(layer.x[layer1]*diff(x.range)+line.stag*diff(x.range),struct[layer1])	1	1
"names(pClassImpact) <- c(""Pclass"",""Survived"",""Count"")"	1	1
test_new$PassengerId	1	1
trn_m$Age_comp_FM = trn_m$Age	1	1
DstTrain$TitleType <- ifelse(DstTrain$Title %in% Crew, 'Crew',DstTrain$TitleType)	1	1
combined$Fam_SizeD[combined$FamSize > 4] <- 'large'	1	1
testdsn  = subset(prod, splitvar == FALSE)	1	1
full$FamilyID[full$FamilyID %in% famIDs$Var1] <- 'Small'	1	1
fullComb$Title[fullComb$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'	1	1
whole.data[whole.data$Age>=18, 'Child'] <- '1'	1	1
par(mfrow=c(1,3))	1	1
as.numeric(cm_LR_ubal$overall[1]), # Accuracy	1	1
titanic$Pclass     <- factor(titanic$Pclass)	1	1
table(combined$Status, combined$Survived)	1	1
rf_model <- randomForest(as.factor(Survived)~.,data = train_training, importance = TRUE)	1	1
"cor.dat = data.table(mod.dat[,!""log.Fare.1""])"	1	1
summary(titanic.tree)	1	1
Sib <- c(training$SibSp,test$SibSp)	1	1
age[age_na_rows] = sample(na.omit(full$Age), length(age_na_rows))	1	1
"d.all <- d.all[,c(""Survived"",""Title"",""Last"",""Sex"",""Age"",""Family"",""SibSp"",""Parch"",""Pclass"",""Embarked"")]"	1	1
print(row.names(imp))	1	1
test$Survived <- NULL	1	1
print(class(pclass.vars))	1	1
mean(age.data$Age[age.data$Parch==4]),	1	1
median_fare <- full %>% group_by(Pclass) %>% summarize(medians=median(Fare, na.rm=T))	1	1
table(titanic2$Survived)	1	1
"data_train$Age <- cut(data_train$Age, c(0, 30, 50, 100), labels = c(""Jovem"", ""adulto"", ""Idoso""))"	1	1
variavel1 <- data.frame(nome = c('Bill Gates','Steve'))	1	1
"train$Male<-as.logical(train$Sex==""male"")"	1	1
"trainDS[, ""Survived""],"	1	1
full$Age_Category <- as.factor(full$Age_Category)	1	1
test$survived	1	1
tot[is.na(tot$Fare),]	1	1
ensemble_predict = as.data.frame(LR)	1	1
train$Title <- sapply(train$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})	1	1
Titanic_data$Title[Titanic_data$Title=='Capt']='Mr'	1	1
struct.out<-struct.out[-length(struct.out)]	1	1
"test$Pclass=factor(test$Pclass,labels = c(""first"",""second"",""third""))"	1	1
columns.to.numeric <- c('Sex', 'Embarked')	1	1
table(titanic.full$TrainSet)	1	1
"lda.diag[, mod := rep(""lda"", nrow(lda.diag))]"	1	1
sum(Titanic_train1$Age >= 10 & Titanic_train1$Age < 30 & Titanic_train1$Survived == 1) / sum(Titanic_train1$Age >= 10 & Titanic_train1$Age < 30)	1	1
titanic[,-notForImpute]	1	1
format(impTrain$predictorMatrix)	1	1
"titanic <- read.csv(""../input/train.csv"", header = T, na.strings=c(""""))"	1	1
"train$estAge <- grepl(""\\.5"",train$Age)"	1	1
"raw.data<-read.csv(""train.csv"",header = T, na.strings = c(""""))"	1	1
full$Title[full$Title %in% Rare]  <- 'Rare'	1	1
x.range<-c(0,100)	1	1
MLTotal[1:891,]	1	1
fulldata$Groupticket <- as.factor(fulldata$Groupticket)	1	1
"rf.diag[, c(""ntree"", ""mtry"", ""nodesize"") := NULL]"	1	1
"test[which(test$Age<14),c(""Child"")]<-1"	1	1
traintest.data$Age[is.na(traintest.data$Age)] <- predict(predicted_age, traintest.data[is.na(traintest.data$Age),])	1	1
train.nn[, rescale.Pclass3.Fare := rescale(Pclass3.Fare, to = c(0, 1))]	1	1
fullComb$FsizeD[fullComb$FamilySize == 1] <- 'singleton'	1	1
test$survived<-predict(model,test, type = 'response')	1	1
knn_train$Name = NULL	1	1
complete <- cbind(my.test.data, score)	1	1
"combine$fare.range<-ifelse(combine$fare.fill==0,""FREE"",ifelse(combine$fare.fill<=as.numeric(quantile(combine[combine$fare.fill>0,]$fare.fill)[2]),""CHEAP"",ifelse(combine$fare.fill<=as.numeric(quantile(combine[combine$fare.fill>0,]$fare.fill)[3]),""CHEAP-MODERATE"",ifelse(combine$fare.fill<=as.numeric(quantile(combine[combine$fare.fill>0,]$fare.fill)[4]),""MODERATE-EXPENSIVE"",ifelse(combine$fare.fill<=as.numeric(quantile(combine[combine$fare.fill>0,]$fare.fill)[5]),""EXPENSIVE"","""")))))"	1	1
"embarked[which(embarked == """")] = ""S"""	1	1
trTitle <- mergedData[!is.na(mergedData$Survived),] %>% group_by(title) %>% summarize(cnt=n(),surv=mean(Survived)) %>% arrange(-surv) %>% as.data.frame()	1	1
levels(test$Survived)=levels(train$Survived)	1	1
raw_test$Age[is.na(raw_test$Age)] <- mean(raw_test$Age,na.rm=T)	1	1
titanic2$Child[titanic2$Age<14]<-1	1	1
mice_mod_test <- mice(test[, !names(test) %in% c('PassengerId','Name','Ticket','Cabin','Family')], method='rf', printFlag = FALSE)	1	1
stop('Incorrect length of weight matrix for given network structure')	1	1
tot$Title<-sub(' ', '', tot$Title)	1	1
df$logfare[df$Fare==0] = mean(log( df$Fare[df$Fare>0])  )	1	1
summary(L2.predict)	1	1
train.nn[, rescale.Pclass3.Age := rescale(Pclass3.Age, to = c(0, 1))]	1	1
full.data$Child[full.data$Age >= 18] <- 'Adult'	1	1
"full$Title[full$Title %in% c(""Mme"", ""Mlle"") ] <- ""Mlle"""	1	1
table(predict_rf)	1	1
"class_emb_mod <- rpart(Embarked ~ . - Survived, data=subset(trClean1,nchar(as.character(Embarked)) > 0), method=""class"", na.action=na.omit)"	1	1
subset(df_combined, is.na(Embarked) == TRUE)	1	1
print(theta.optimized)	1	1
data[is.na(data$Embarked),'Embarked']=as.factor(names(which.max(table(na.omit(data$Embarked)))))	1	1
"colnames(relative2) <- c(""test_member.i...PassengerId.."", ""test_member.i...Ticket.."", ""survive"")"	1	1
whole.data[whole.data$Age<18, 'Child'] <- '0'	1	1
prop.table(table(train$Sex,train$Survived), 1)	1	1
data[[i]] <- full[train_dev_idx, var[[i]], drop=F]	1	1
levels(train$Cabin_deck)	1	1
matchidx$row,	1	1
result <- cbind(prediction, testsetCopy)	1	1
median_ages[i,j]<-train[Gender==i & Pclass==j,median(Age,na.rm=T)]	1	1
titanic.model<-randomForest(fml,train, ntree=500, mtry=3, nodesize=0.01*nrow(train) )	1	1
"testdata=read.csv(""../input/test.csv"",header = TRUE, stringsAsFactors  = FALSE,na.strings=c(""NA"",""NaN"", """","" ""))"	1	1
output[, mod := mod.name[i]]	1	1
ans_rf_predict = rep(NA,418)	1	1
train$Survived[train$Age < 13]	1	1
num_survived<-length(which(titanic$Survived==1))	1	1
knn_test$Sex = NULL	1	1
summary(trainingData[, respondVar])	1	1
"log.age.regressors = c(""Pclass"", ""Parch"", ""Fare"", ""SibSp"")"	1	1
names(tmp) <- c('sigmoid','Actual Outcome','Sex')	1	1
combine$embarked.fill<-combine$Embarked	1	1
MissingAge$Title != 'Master', MedianC,	1	1
allData$Parch <- as.numeric(allData$Parch)	1	1
train <- data.frame(train)	1	1
"test.survived <- data.frame(survived = rep(""None"", nrow(test)), test[,])"	1	1
submSVM <- data.frame( PassengerId= test$PassengerId )  # create a dataframe	1	1
raw_test$NumSex <- as.numeric(factor(raw_test$Sex,labels=c(1,2)))	1	1
train[, Sexmale.Age := model.matrix(~Sex:Age, data = train)[,3]]	1	1
ind<-which(is.na(train$Age))	1	1
else stop('Only nnet method can be used with train object')	1	1
factor_vars <- c('Pclass','Sex','Age','SibSp','Parch','Fare','Embarked')	1	1
"trn_m$HasCabin <- factor(ifelse(trn_m$Cabin == """", c(0), c(1)))"	1	1
mean(age.data$Age[age.data$FamSize==4]),	1	1
floor(mean(second_class[,6], na.rm = T))	1	1
train[i,6] <- train[i,6]	1	1
results.table <- table(y_predict, train_data$Survived,dnn = c('Predicted','Actual'))	1	1
levels(train$Ticket)	1	1
"combine$tittle<-unlist(strsplit(as.character(combine$Name), "",""))[c(F,T)]"	1	1
clean_train$Survived	1	1
"test$Age[is.na(test$Age)&test$Name==""Master.""]<-masterage"	1	1
data_train$Embarked <- as.factor(data_train$Embarked)	1	1
df$Sex.int <- 0	1	1
length(train_youth[which(train_adult == 1)])/length(train_adult)	1	1
table(fullComb$Child, fullComb$Survived)	1	1
"train$Age[train$Title == ""Master."" & is.na(train$Age)] <- mean.master"	1	1
x.names<-colnames(eval(mod.in$call$x))	1	1
"full$Embarked[ind]<-""C"""	1	1
summary(newAgeData)	1	1
df_train <- subset(df_train,select=-c(Cabin,Name,Ticket,PassengerId, Age))	1	1
levels(test$Cabin_deck)	1	1
full_data$AgeRange = as.factor(full_data$AgeRange)	1	1
submit <- data.frame(PassengerId = test_data$PassengerId, Survived = test_data$Survived)	1	1
data$title <- as.factor(data$title)	1	1
dft$Survived=newval #add the predicted survival rates to dft	1	1
predictedSurvival <- rep(0,dim(train)[1])	1	1
which(is.na(combi$FamilySize))	1	1
aggregate(Survived ~ FareRange + Pclass + Sex, data=mod_train, FUN=function(x) {sum(x)/length(x)})	1	1
knn_train$Survived = NULL	1	1
my.mod$SL.predict	1	1
babies_survival_rate <- map_df(c(1:10), group_babies)	1	1
print('Cabin/Deck present')	1	1
"full$Embarked_Q<-as.logical(full$Embarked==""Q"")"	1	1
"test$Sex[which(test$Sex==""female"")]<-1"	1	1
Cabins <- total[which(total$Cabin != '' & total$Cabin != is.na(total$Cabin)), ]	1	1
titanic$FsizeD     <- factor(titanic$FsizeD)	1	1
emb_pred <- predict(class_emb_mod, subset(trClean1,nchar(as.character(Embarked)) == 0))	1	1
print()	1	1
"table(a4[-a6, ""Embarked""])"	1	1
hist(train$Age, breaks = length(unique(train$Age)))	1	1
rr = roc(fits, factor(train$Survived))	1	1
full$Cabin = as.numeric(as.factor(full$Cabin))-1	1	1
"train_nb_features <- train_nb[ , c(""Pclass_f"", ""Sex"", ""AgeTramo"", ""SibSp_f"", ""Parch_f"", ""Embarked"")]"	1	1
data$Fare[data$Fare > 300] <- median(data[data$Pclass == '1' & data$Embarked == 'C', ]$Fare, na.rm = TRUE)	1	1
table(train$Survived) #calculates count of 0's and 1's as a table	1	1
test.data2$Survived <- factor(test.data2$Survived)	1	1
Alone = ifelse(Family_size==0,1,0),	1	1
tst_m[is.na(tst_m$Age_comp_FM),c('Age_comp_FM')] = fill_Age_mean	1	1
trSex <- tr %>% group_by(Sex) %>% summarize(cnt=n(),surv=mean(Survived)) %>% arrange(-surv) %>% as.data.frame()	1	1
total$Title[total$Title == 'Mlle']        <- 'Miss'	1	1
"geom_bar(width=0.5, aes(y=(..count..)/sum(..count..)), position=""fill"") +"	1	1
"print(""Survival rate against class"")"	1	1
data_train$Ticket <- NULL	1	1
"tst_m$HasCabin <- factor(ifelse(tst_m$Cabin == """", c(0), c(1)))"	1	1
"write.csv(cbind(TEST$ID,L2.predict),file=""output.csv"",row.names=F)"	1	1
NAindex <- which(is.na(data$Age))	1	1
DstTrainClean$Title <- gsub('(.*, )|(\\..*)', '', DstTrainClean$Name)	1	1
"dft$Embarked[dft$Embarked==""""]=""S"""	1	1
whole.data[whole.data$Title %in% others, 'Title'] <- 'Others'	1	1
my_soluction_aliechoes <- data.frame(test_prediction)	1	1
full$FamilyID <-as.character(full$FamilyID)	1	1
table(result)	1	1
"CleanTotal <- merge(total[ ,c(1:ncol(total))] , MissingAge[ ,c(1, 6)], by = ""PassengerId"", all.x = TRUE)"	1	1
full$isAlone <- T	1	1
which(is.na(my_df$Fare))	1	1
sum(is.na(Pclass))	1	1
"Mrses=data.combined[which(str_detect(data.combined$Name, ""Mrs."")),]"	1	1
"print(paste(""average_errors:"",sum(abs(age.reg.p - age.data.test$Age))/178))"	1	1
table(combined$Mother, combined$Survived)	1	1
summary(mast$Age)	1	1
table(df_combined$Title)	1	1
select(-Survived)	1	1
data.frame(sapply(test, check.blank))	1	1
DstTestClean$TitleType <- ifelse(DstTestClean$Title %in% Crew, 'Crew',DstTestClean$TitleType)	1	1
train$Sex[male] <- 1	1	1
"print(paste(""average_errors:"",sum(abs(final.age.ann.p - age.data.test$Age))/178))"	1	1
mod.in$xNames	1	1
full_data$Family <- paste(full_data$Surname, full_data$Fsize, sep='_')	1	1
if(layer.name=='O' & var.labs) text(x+line.stag*diff(x.range),y,y.names,pos=4,cex=cex.val)	1	1
train_new$Cabin <- substr(train_new$Cabin,1,1)	1	1
fullComb$Title <- sub(' ', '', fullComb$Title)	1	1
age_compare[9,] = c('Test', 'Filled by MICE', mean(tst_m$Age_comp_MICE), sd(tst_m$Age_comp_MICE))	1	1
m2 <- matrix(rep(0, 50), nrow=5, ncol=10)	1	1
"full$Family_size_ratio[full$Family_count<=2]<-""Small"""	1	1
Survived <- ifelse(Survived >= 0, 1, 0)	1	1
mice_mod_train <- mice(train[, !names(train) %in% c('PassengerId','Name','Ticket','Cabin','Family','Survived')], method='rf', printFlag = FALSE)	1	1
full$Title <- gsub('(.*,)|(\\..*)' ,'', full$Name)	1	1
full$PassengerId = as.numeric(as.factor(full$PassengerId))	1	1
mice_output$Age, freq=F, xlab ='Passengers Age', main='Age: MICE Output',	1	1
test_data$Age[ib] <- median(train_data$Age,na.rm=TRUE)	1	1
final_ens_model$models	1	1
rfmod <- list()	1	1
"dat_all[is.na(dat_all$Age)==TRUE,""Age""] <- mean(dat_all$Age, na.rm=TRUE)"	1	1
train$Mother <- 'Not Mother'	1	1
age_compare[4,] = c('Val', 'Original', mean(val_m[complete.cases(val_m[,c('Age')]),c('Age')]), sd(val_m[complete.cases(val_m[,c('Age')]),c('Age')]))	1	1
all <- rbind(train%>%dplyr::select(-Survived), test)	1	1
Titanic_data$Title=as.factor(Titanic_data$Title)	1	1
scale_x_discrete(breaks = seq(0,1,1))	1	1
par(usr = c(0, 1, 0, 1))	1	1
select(Survived, Title) %>%	1	1
tmp <- model.matrix(PassengerId ~ Embarked,df[,c('PassengerId','Embarked')])	1	1
full$Survived [full$Survived == '0'] <- 'Died'	1	1
clnTrn <- suppressWarnings(sapply(data.frame(MLtrain[ ,-c(2, 17)]),as.numeric))	1	1
summarize(avg_fare=mean(Fare))	1	1
full[full$PassengerId[is.na(full$Embarked)],]	1	1
"var <- c(""Pclass"",""Sex"",""Age"",""SibSp"",'Parch','Fare','Embarked','estAge','Title','Cabinsize')"	1	1
titanic$KSIG <- tapply(Survived, Ticket, sumNotNA)[Ticket] - ifelse(is.na(Survived),0,Survived)	1	1
test$Sex == 'male',	1	1
median(trn_m[complete.cases(trn_m[,c('Age')]),c('Age')])	1	1
aggregate(train[,2], list(train$siblingyn), length)	1	1
colnames(data.prediction) <- c('PassengerId', 'Survived')	1	1
tst_m$Age_comp_FM = tst_m$Age	1	1
train$Pclass = factor(train$Pclass)	1	1
max(unlist(accuracy))	1	1
print(n_incorrect)	1	1
summary(ens_model_result)	1	1
check[check$OOB %in% c(min(check$OOB)),]	1	1
"full$Fare_Category <- ifelse(full$Fare > 50 & full$Fare <= 150, ""Medium"", full$Fare_Category )"	1	1
dim(training) ### Check the dimension	1	1
full$Age2[full$Age>48& full$Age<=64] = 4	1	1
fullComb$FamilyID2 <- as.character(fullComb$FamilyID2)	1	1
train$Title[train$Title == 'Ms']          <- 'Miss'	1	1
rf_err = data.frame(model_RF_bal$err.rate)	1	1
Cabin_Deck_i2 = as.factor(Cabin_Deck_i2),	1	1
"levels(train$Cabin)<-c(levels(train$Cabin),""Missing"")"	1	1
age_compare[2,] = c('Train', 'Filled by Mean', mean(trn_m$Age_comp_FM), sd(trn_m$Age_comp_FM))	1	1
train.mice = data.table(train)	1	1
print(stack.rf)	1	1
misClasificError_rf <- mean(rf_test_prediction != train_test$Survived)	1	1
full$Age[1:30]	1	1
submission<-data.frame(submission)	1	1
rf_err$combined_err = rowSums(rf_err)	1	1
"chisq.test(table(Age_impute$Survived, Age_impute$Agegroup1, useNA = ""ifany""))"	1	1
famIDs <- data.frame(table(combi$FamilyID))	1	1
full_data$family_size <- full_data$SibSp + full_data$Parch + 1	1	1
select(Pclass, Age, Sex, Fare, Embarked, Survived)	1	1
train[ , -11]	1	1
rare <- c('Dona', 'Lady', 'the Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')	1	1
d.all <- cbind(d.all, GetNames(d.all$Name))	1	1
Survival_rate = sum(Survived)/count	1	1
"test_data$Age[is.na(test_data$Age)&test_data$Sex==""male""]<-mean_male"	1	1
full_data$Fare[1044] <- median(full_data$Fare, na.rm=TRUE)	1	1
temp <- as.data.frame(predict(mymodel, testset[,-1]))	1	1
MissingAge$Title != 'Master', BCabins,	1	1
train$Child <- NA	1	1
trn_m$Survived_F = factor(trn_m$Survived)	1	1
"features <- c(""Pclass"",""Sex"",""Age"",""SibSp"",""Parch"",""Fare"",""Embarked"")"	1	1
try(library('dplyr') , silent=TRUE)	1	1
Male_Ages <- full[ which(is.na(full$Age)) & full$Sex == 'male' , ]	1	1
"p <- predict(model, newdata=subset(test,select=vnames), type=""response"")"	1	1
sort(table_words [grep('\\.',names(table_words))], decreasing=TRUE)	1	1
final.data <- data.frame(PassengerId = test.data$PassengerId, Survived = test.data$SurvivedGender)	1	1
summarise(numSurviveNAs = sum(is.na(Survived)))	1	1
"tb = cbind(train$Age, str_match(train$Name, ""[a-zA-Z]+\\.""))"	1	1
train.mice[, Cabin := factor(Cabin)]	1	1
DstTrain$TitleType <- ifelse(DstTrain$Title %in% Nobility.woman, 'Nobility.woman','')	1	1
MissingAge$Title != 'Master', ECabins,	1	1
mean(age.data$Age[age.data$SibSp==3]),	1	1
df[is.na(df$Age),]$age_missing <- 1	1	1
"ynew = as.numeric(predict(mod, newdata = data.table(Xtest), type = ""prob"")[,2])"	1	1
test_x = as.matrix(test2[,2:18])	1	1
data[data$Ticket2 %in% rare, 'Ticket2']='rare'	1	1
full$Surname = as.numeric(as.factor(full$Surname))-1	1	1
train[, Pclass := factor(Pclass)]	1	1
full$family <- NaN	1	1
DataBind$Title[DataBind$Title %in%  rare_title]  <-'Rare Title'	1	1
quantile(x$score,c(.25,.61,.75))	1	1
submit <- mutate(submit, Survived = 0)	1	1
train$Title[train$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'	1	1
Test$Survived<-NA	1	1
length(unique(as.character(data.combined$Name)))	1	1
columns.to.remove <- c('Name', 'Cabin', 'Ticket', 'PassengerId')	1	1
"full[c(""Title"",""Name"")]"	1	1
full[, NewCabin := sapply(Cabin, function(x) {length(strsplit(x, ' ')[[1]])})]	1	1
print(top.run2)	1	1
df_combined$Parent <- factor(df_combined$Parent)	1	1
fmlyIDs <- data.frame(table(full$familyID2))	1	1
"bluePallete <- colorRampPalette(c(""steelblue2"", ""steelblue4""))"	1	1
nrow(train_refined)	1	1
trSharedCabin <- mergedData[!is.na(mergedData$Survived),] %>% group_by(sharedCabin) %>% summarize(cnt=n(),surv=mean(Survived)) %>% arrange(-cnt) %>% as.data.frame()	1	1
combi$FamilySize <- as.factor(combi$FamilySize)	1	1
tot$Embarked[tot$Embarked %in% c('')]<-'C'	1	1
summary(train$Sex)	1	1
train$Survived<-as.character(train$Survived)	1	1
tmp <- model.matrix(Name ~ title,df[,c('title','Name')])	1	1
print('Distribution of Fare  X  Age missing vs present')	1	1
print(paste('Accuracy SVM',1-misClasificError))	1	1
full$Age[ind]<-as.numeric(Imputed_age)	1	1
Titanic_data$Title[Titanic_data$Title=='Jonkheer']='Mr'	1	1
return(as.factor(Exit))	1	1
data$Title[data$Title == 'Ms']          <- 'Miss'	1	1
data_test$SibSp <- NULL	1	1
table(Survived)	1	1
titanic2$Fare2[titanic2$Fare < 20 & titanic2$Fare >= 10] <- '10-20'	1	1
splitvar = sample.split(prod$Survived, SplitRatio = .7)	1	1
data$Age_Group[data$Age > 50] <- 'old'	1	1
mice_v<-c(22,38,26,35,35,26,54,2,27,14,4,58,20,39,14,55,2,31,31,26,35,34,15,28,8,38,21,19,38,20,40,38,55.5,66,28,42,26,21,18,14,40,27,20,3,19,26,40,21,22,18,7,21,49,29,65,19,21,28.5,5,11,22,38,45,4,24,1,29,19,17,26,32,16,21,26,32,25,21,21,0.83,30,22,29,22,28,17,33,16,28,23,24,29,20,46,26,59,22,71,23,34,34,28,28,21,33,37,28,21,27,38,18,47,14.5,22,20,17,21,70.5,29,24,2,21,30,32.5,32.5,54,12,17,24,4,45,33,20,47,29,25,23,19,37,16,24,34,22,24,19,18,19,27,9,36.5,42,51,22,55.5,40.5,21,51,16,30,24,36,44,40,26,17,1,9,33,45,56,28,61,4,1,21,56,18,8,50,30,36,3,19,9,1,4,44,18,45,40,36,32,19,19,3,44,58,30,42,21,24,28,2,34,45.5,18,2,32,26,16,40,24,35,22,30,18,31,27,42,32,30,16,27,51,29,38,22,19,20.5,18,40,35,29,59,5,24,22,44,8,19,33,22,18,29,22,30,44,25,24,37,54,34.5,29,62,30,41,29,60,30,35,50,18,3,52,40,22,36,16,25,58,35,42,25,41,37,34,63,45,42,7,35,65,28,16,19,54,33,30,22,42,22,26,19,36,24,24,62,23.5,2,4,50,15,21,19,44,15,0.92,32,17,30,30,24,18,26,28,43,26,24,54,31,40,22,27,30,22,2,36,61,36,31,16,22,45.5,38,16,30,25,29,41,45,45,2,24,28,25,36,24,40,15,3,42,23,38,15,25,23,28,22,38,22,23,40,29,45,35,16,30,60,22,21,24,25,18,19,22,3,40,22,27,20,19,42,1,32,35,24,18,1,36,35,17,36,21,28,23,24,22,31,46,23,28,39,26,21,28,20,34,51,3,21,21,21,20,33,25,44,22,34,18,30,10,29,21,29,28,18,30,28,19,18,32,28,31,42,17,50,14,21,24,64,31,45,20,25,28,20,4,13,34,5,52,36,28,30,49,21,29,65,35,50,31,48,34,47,48,28,38,25,56,19,0.75,21,38,33,23,22,40,34,29,22,2,9,32,50,63,25,8,35,58,30,9,21,21,55,71,21,36,54,21,25,24,17,21,22,37,16,18,33,20,28,26,29,20,36,54,24,47,34,22,36,32,30,22,23,44,25,40.5,50,67,39,23,2,20,17,24,30,7,45,30,36,22,36,9,11,32,50,64,19,34,33,8,17,27,22,22,22,62,48,27,39,36,14.5,40,28,21,21,24,19,29,22.5,32,62,53,36,30,16,19,34,39,29,32,25,39,54,36,26,18,47,60,22,20,35,52,47,18,37,36,28,49,21,49,24,25,48,44,35,36,30,27,22,40,39,20,22,18,35,24,34,26,4,26,27,42,20,21,21,61,57,21,26,29,80,51,32,32.5,9,28,32,31,41,21,20,24,2,23,0.75,48,19,56,21,23,20,18,21,30,18,24,25,32,23,58,50,40,47,36,20,32,25,18,43,63,40,31,70,31,31,18,24.5,18,43,36,20,27,20,14,60,25,14,19,18,15,31,4,32,25,60,52,44,22,49,42,18,35,18,25,26,39,45,42,22,1,24,39,48,29,52,19,38,27,20,33,6,17,34,50,27,20,30,60.5,25,25,29,11,27,23,23,28.5,48,35,24.5,20,22,36,21,24,31,70,16,30,19,31,4,6,33,23,48,0.67,28,18,34,33,24,41,20,36,16,51,40,30.5,27,32,24,48,57,25,54,18,24,5,23,43,13,17,29,16,25,25,18,8,1,46,20,16,2,38,25,39,49,31,30,30,34,31,11,0.42,27,31,39,18,39,33,26,39,35,6,30.5,33,23,31,43,10,52,27,38,27,2,18,24,1,45,62,15,0.83,20,23,18,39,21,15,32,35,20,16,30,34.5,17,42,10,35,28,18,4,74,9,16,44,18,45,51,24,20,41,21,48,6,24,42,27,31,27,4,26,47,33,47,28,15,20,19,23,56,25,33,22,28,25,39,27,19,40,26,32,34.5,47,62,27,22,14,30,26,18,21,9,46,23,63,47,24,35,21,27,45,55,9,47,21,48,50,22,22.5,41,21,50,24,33,47,30,18.5,60.5,21,25,32,39,47,41,30,45,25,45,22,60,36,24,27,20,28,25,10,35,25,29,36,17,32,18,22,13,30,18,47,31,60,24,21,29,28.5,35,32.5,21,55,30,24,6,67,49,13,30,20,27,18,21,2,22,26,27,23,25,25,76,29,20,33,43,27,26,26,16,28,21,20,25,18.5,41,28,36,18.5,63,18,20,1,36,29,12,21,35,28,55.5,17,22,27,42,24,32,53,36,22,43,24,26.5,26,23,40,10,33,61,28,42,31,36,22,29,30,23,25,60.5,36,13,24,29,23,42,26,21,7,26,23,41,26,48,18,61,22,13,27,23,21,40,15,20,54,36,64,30,37,18,20,27,40,21,17,18,40,34,50,11.5,61,8,33,6,18,23,19,27,0.33,47,8,25,31,35,24,33,25,32,22,17,60,38,42,59,57,50,21,30,21,22,21,53,34,23,31,40.5,36,14,21,21,22,39,20,64,20,18,48,55,45,45,21,42,41,22,42,29,21,0.92,20,27,24,32.5,21,55.5,28,19,21,36.5,21,29,1,30,35,39,21,5,17,46,30,26,36.5,32,20,28,40,30,22,23,0.75,21,9,2,36,21,24,25,29,33,30,20,53,36,26,1,16,30,29,32,30,43,24,25,64,30,0.83,55,45,18,22,21,37,55,17,57,19,27,22,26,25,26,33,39,23,12,46,29,21,48,39,23,19,27,30,32,39,25,24,18,32,40,58,13,16,26,38,24,31,45,25,18,49,0.17,50,59,30,26,30,14.5,24,31,27,25,29,38.5,22,45,29,21,31,49,44,54,45,22,21,55,5,26,26,16,19,21,24,24,57,21,6,23,51,13,47,29,18,24,48,22,31,30,38,22,17,43,20,23,50,29,3,30,37,28,22,39,38.5,24,18)	1	1
table(is.na(train_data$Embarked))	1	1
MLTotal[892:1309,]	1	1
train$Age2 <- mice_output$Age	1	1
table(titanic.full$Survived, titanic.full$Sex)	1	1
df_combined$Parent[df_combined$Sex == 'male' & df_combined$Parch > 0 & df_combined$Age > 18] <- 'Father'	1	1
combi$TitleCat <- factor(combi$TitleCat)	1	1
d<-data.frame(PassengerId = test$PassengerId, Survived = predict_svm)	1	1
summary(train1)	1	1
aggregate(train[,2], list(train$parentyn), mean)	1	1
misClasificError<-mean(Predict_dtree != valid_clean$Survived)	1	1
"colnames(kaggle.sub) <- c(""PassengerId"", ""Survived"")"	1	1
test[,1]#pull passenger_id for submission	1	1
"title <- ifelse(title == ""Mme"", ""Mrs"", title)"	1	1
filter(Survived == 1)	1	1
AgeNorm <- unlist(AgeNorm)	1	1
sapply(raw.data,function(x) sum(is.na(x)))	1	1
"by_Sex_Age <- inner_join(by_Sex_Age_Total,by_Sex_Age_Survived, by = c(""Sex"", ""Age_Bin""))"	1	1
train[complete.cases(train),]	1	1
"pen.diag[, c(""name"", ""alpha"") := NULL]"	1	1
log_model_sig<-glm(Survived~.,data=train_clean[,-c(5,6,8,9,10)],family=binomial(link='logit'))	1	1
tmp <- cbind(as.data.frame(sigmoid.result), train_data$Survived,train_data$Sex)	1	1
titanic$Name <- as.character(titanic$Name)	1	1
my_df$Age, freq=F, main='Age: Original Data',	1	1
"table(a)[""FALSE""]"	1	1
combined[factor_vars] <- lapply(combined[factor_vars], function(x) as.factor(x))	1	1
MedianS <- median(subset(total, Embarked == 'S')$Age , na.rm = TRUE)	1	1
prop.table(table(full$Title,full$Survived),1)	1	1
error_cost=matrix(c(0, 5, 5, 0), nrow = 2)	1	1
X = data.table(train.nn)	1	1
names(df_combined[,-which(names(df_combined) %in% cols)])	1	1
y.range<-c(0,100)	1	1
summarise(filter(train_tbl, is.na(Age), Sex == 'male'), male_age_NA_Total = n())	1	1
if(is.numeric(x)) !is.finite(x) else is.na(x)	1	1
par(mfrow=c(4,2))	1	1
full$Cabin[1:10]	1	1
rf.diag = foreach(i = 1:nrow(doe)) %do%	1	1
summary(trainset$Fare)	1	1
train.data2$Survived <- factor(train.data2$Survived)	1	1
"train_data<-read.csv(""train.csv"", header=T, na.strings=c("""",""NA""))"	1	1
combi$Child[combi$Age >= 18] <- '0'	1	1
Sib <- c(train$SibSp,test$SibSp)	1	1
train_test <- subset(train, split == FALSE)	1	1
"val = val_m[,append(disc_var,c(""Survived_F""))]"	1	1
detach(d.all)	1	1
"freq<-as.data.frame(table(combine[,c(""embarked.fill"",""Survived"")]))"	1	1
fulldata[(which(is.na(fulldata$Embarked))) ,c(1,3,6,10,20) ]	1	1
"fea$TicketPrefix <- gsub(""[.]"","""",as.character(fea$TicketPrefix))"	1	1
other_title <- c('Dr','Rev','Col','Major','Capt','Don','Dona','Jonkheer','Lady','Sir','the Countess')	1	1
train[, Embarked := train.mice$Embarked]	1	1
lays<-lays[-c(1,(length(struct)-1))]	1	1
summary(fm)	1	1
data_test['Previsão'] <- c(predictionrf)	1	1
hid.struct<-struct.out[-c(length(struct.out))]	1	1
dat = data.table(cv$stat.cv)	1	1
dat$AUC,	1	1
geom_density(data = as.data.frame(AgeNorm), na.rm = TRUE) +	1	1
summary(clasificador_glm) #output	1	1
apply(tst_m,2,pMiss)[apply(tst_m,2,pMiss)>0]	1	1
"test$estAge <- grepl(""\\.5"",test$Age)"	1	1
perished_age <- train_tbl_with_age %>% filter(Survived == 0) %>% group_by(Age_Bin,Age_Bin_Order) %>% summarise(Perished  = n())	1	1
which(is.na(train$Age)==T)	1	1
train[is.na(train)] <- median(train$Age, na.rm = TRUE)	1	1
y.names<-row.names(y.names)[!row.names(y.names) %in% x.names]	1	1
submSVM$Survived <- predict( SVMmodel, extractFeatures(test) )	1	1
test.mice[, Fare := round(exp(log.Fare.1), 4) - 1]	1	1
full_data[c(1044), 'Fare']	1	1
val_Pclass1$Fare,	1	1
knn_train$PassengerId = NULL	1	1
wts.rs<-wts.rs[grep(src.str,names(wts.rs))][[1]][-1]	1	1
roc_NB_bal <- roc(val_m$Survived, as.numeric(p_NB_bal)-1)	1	1
summarize(AvAge = mean(Age))	1	1
summary(logistic_model)	1	1
titanic$Title[titanic$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'	1	1
full$Cabin2 = as.numeric(as.factor(full$Cabin2))-1	1	1
sapply(full,function(x) sum(is.na(x)))	1	1
combined <- bind_rows(train,data=test)	1	1
select(Surname)	1	1
misClasificError_logit <- mean(test_predictions_results != train_test$Survived)	1	1
"col <- c(""darkblue"", ""red"")"	1	1
combi$Child <- 0	1	1
table(true=train$Survived, pred=rf.pred)	1	1
doe = rbind(c(1 / ncol(X), 0.5), doe)	1	1
"full[full$ticket_str == """", ]$ticket_str <- ""unavailable"""	1	1
test_nn$Pclass <-  (test_nn$Pclass - min(test_nn$Pclass)) /	1	1
test$Pclass = factor(test$Pclass)	1	1
train%>%select(Fare,Survived)%>%group_by(Survived)%>%summarise(mean(Fare),sd(Fare),min(Fare),max(Fare))	1	1
"df$Embarked=factor(df$Embarked, levels=c(""S"",""C"",""Q"")) #Set as factor in order of S->C->Q"	1	1
whole.data[whole.data$Age>=28 & whole.data$Age<39, 'AgeBin'] <- '3'	1	1
ticket_freq <- as.data.frame(table(dat_all$Ticket))	1	1
"train_titanic<- read.table(""../input/train.csv"", header=T,sep="","")"	1	1
results<-resamples(list(GLM=fit.glmnet, IDA=fit.lda, KNN=fit.knn, CART=fit.cart, SVM=fit.svm,RF=fit.rf))	1	1
train$Title[train$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'	1	1
"train$Ticket_Num <- sapply(train$Ticket, FUN=function(x) {ifelse(str_detect(x, "" ""),str_split(x, "" "")[[1]][2], as.character(x))})"	1	1
full<- bind_rows(train,test)	1	1
test_data <- full_data[892:nrow(full_data),]	1	1
tst_m = subset(tst_m, select=-c(Fare_orig))	1	1
Age_impute$Agegroup3<-cut(Age_impute$Age, seq(0,80,5), labels=c(1:16))	1	1
length(full$Surname)	1	1
y = as.integer(y)	1	1
"raw_test <- read.csv(file=""../input/test.csv"", header=TRUE, sep="","", na.strings=c(""""))"	1	1
Titanic_data$Title[Titanic_data$Title=='Col']='Mr'	1	1
"svm.diag[, c(""gamma"", ""nu"") := NULL]"	1	1
"names(result) <- c(""Predicted"", ""Actual"")"	1	1
"levels(data_test$Sex) <- c(""Feminino"", ""Masculino"")"	1	1
predicted_train_glm_bin <- ifelse(predicted_train_glm < 0.5, 0, 1)	1	1
datamerging$Ticket=as.factor(datamerging$Ticket)	1	1
allData$Age	1	1
round(prop.table(table(is.na(train$Cabin_Deck), train$Survived), 1),2)	1	1
test$Family<- NA	1	1
print(psr)	1	1
levels(test_data_set$survived) <- levels(new_train$survived)	1	1
predict_svm = as.integer(predict_svm) - 1	1	1
rf.pred = function(Xtrain, Ytrain, Xtest, Ytest, negative, ntree, mtry, nodesize, cutoff)	1	1
Survived <- predict(mylogit, Test[, c(2,4,9,6,7)])	1	1
Fare_impute_df <- data.frame(Pclass = c(trainset$Pclass, testset$Pclass), Embarked = c(trainset$Embarked, testset$Embarked), Fare = c(trainset$Fare, testset$Fare))	1	1
df[[response]] <- as.factor(df[[response]])	1	1
trainset$Pclass <- factor(trainset$Pclass)	1	1
"full[is.na(full$Age) & full$Title == ""Miss"", ]$Age <-age_by_title[age_by_title$Title== ""Miss"", ]$Age"	1	1
g1 <- data.frame(Age=train_titanic$Age, Cabin=train_titanic$Cabin, SibSp=train_titanic$Age, Parch=train_titanic$Parch, Sex=train_titanic$Sex, Pclass=train_titanic$Pclass, Survived=train_titanic$Survived)	1	1
cat('Original titles:')	1	1
age_range=cut(df$Age, seq(0,100,10)) #Sub-divide the ange range into 10 year sections	1	1
"test_new$Cabin[test_new$Cabin == """"] <- ""H"""	1	1
train.data3$Surname <- factor(train.data3$Surname)	1	1
mean(train$Age[train$Sex =='male'],na.rm = TRUE),	1	1
full$Title <- as.factor(full$Title)	1	1
Exit[is.na(Exit)] <- mean(Exit, na.rm=TRUE)	1	1
full$cabin_deck <- as.factor(full$cabin_deck)	1	1
dim(testdata)	1	1
levels(test$Ticket)	1	1
print(RP_model)	1	1
data$Pclass <- as.factor(data$Pclass)	1	1
df_combined[cols] <- lapply(df_combined[cols], factor)	1	1
"train_full$Pclass=factor(train_full$Pclass,labels = c(""first"",""second"",""third""))"	1	1
full$Survived = as.numeric(as.factor(full$Survived))-1	1	1
roc_RF_bal <- roc(val_m$Survived, as.numeric(p_RF_bal)-1)	1	1
rm(list=ls())	1	1
sum(Titanic_train$Pclass == 'Middle' & Titanic_train$Survived == 1) / sum(Titanic_train$Pclass == 'Middle')	1	1
full$isAlone <- ifelse(full$FamilySize == 1, 1,0 )	1	1
"check.blank <- function(x) return(length(which(x == """")))"	1	1
sum(is.na(full_data$Age))	1	1
knn_test$Age <- (knn_test$Age - min_age) / (max_age - min_age)	1	1
"titanic$Embarked[c(62,830)] = ""S"""	1	1
result_bin <- ifelse(result < 0.5, 0, 1)	1	1
mod.dat[, Fare := NULL]	1	1
"dat_all <- merge(dat_all, relative[,c(1,3)], by=""PassengerId"", all.x = TRUE)"	1	1
DstTrain$TitleType <- ifelse(DstTrain$Title %in% Passenger.man, 'Passenger.man',DstTrain$TitleType)	1	1
knn_test$Fare[i] <- mean(knn_test$Fare, na.rm = TRUE)	1	1
"nn.list = list(""mod"" = nn.mod, ""cutoff"" = nn.cutoff, ""train"" = train.nn, ""test"" = test.nn)"	1	1
titanic$ESRIG <- titanic$KSIG/(titanic$KSIG+titanic$KDIG)	1	1
"a <- nzchar(Parch); table(a)[""FALSE""]"	1	1
data_test$Cabin <- NULL	1	1
vip <- c('Lady', 'the Countess', 'Sir', 'Jonkheer')	1	1
fea$Cabin <- as.factor(fea$Cabin)	1	1
table(train_test$Survived, test_predictions > 0.5)	1	1
select(Survived, Pclass, Sex, Age) %>%	1	1
"write.csv(test1[,c(""PassengerId"",""Survived"")],file=""RForest_Model3aa_pred.csv"",row.names=F)"	1	1
test=test[,-c(1,3,8,10)]	1	1
median(Female_Ages$Age , na.rm =  TRUE)	1	1
trn_m$SharedCabin = ifelse(trn_m$Cab_Occ >1, c(1), c(0))	1	1
( sum(train$Survived) / nrow(train) ) %>% round(4)  * 100 #  data %>% mean (is equivalent to) mean(data)	1	1
"combined.df[i, ""Age""] <- predict(lmAge.fit, newdata = combined.df[i, ])"	1	1
train_new$Cabin <- factor(train_new$Cabin)	1	1
table(trn_m$HasFamily,trn_m$Survived)	1	1
combi$Embarked <- as.factor(combi$Embarked)	1	1
"rhs = paste(names(X), collapse = "" + "")"	1	1
"whole.data[whole.data$Embarked == """", 'Embarked'] <- 'C'"	1	1
"paste(""AUC SVM: "",auc_svm)"	1	1
combi$Title[combi$Title == 'Mme'] = 'Mrs'	1	1
test <- test[,-c(1,10,3,8)] #removing columns	1	1
"data<-data[,HighClass:=ifelse(Title %in% c(""Mr."",""Mrs."",""Master."",""Mme."",""Mlle."",""Ms."",""Miss.""),0,1)]"	1	1
train[shuffled,]	1	1
"colClasses = c(""integer"",""factor"",""factor"",""character"",""factor"",""numeric"",""integer"",""integer"",""character"",""numeric"",""character"",""factor""),"	1	1
summary(my_tree)	1	1
"output[, stat := c(""Min"", ""Q1"", ""Median"", ""Mean"", ""Q3"", ""Max"")]"	1	1
"female <- which(train$Sex == ""female"")"	1	1
train$Ticket_Num2[train$Ticket_Num <= 20000] = 2	1	1
testset<-testset[,c(-1,-3,-8,-10)]	1	1
prop.table(table(full$Fsize,full$Survived),1)	1	1
prop.table(table(train$Sex, train$Survived), 1)	1	1
theDataImpute[,i] <- predict(preProcAge, imputeDataDummy)$Age	1	1
full[full$Embarked != 'C' &  full$Embarked != 'Q' & full$Embarked != 'S',]	1	1
train.stop=nrow(train)	1	1
sapply(full, function(x) sum(is.na(x)))	1	1
round(prop.table(table(is.na(train$Cabin_Deck), train$Pclass), 1),2)	1	1
DstTrain$TitleType <- ifelse(DstTrain$Title %in% Passenger.woman, 'Passenger.woman',DstTrain$TitleType)	1	1
fulldata$Age[is.na(fulldata$Age)] <- predicted_output$Age[is.na(fulldata$Age)]	1	1
train[, Pclass3.EmbarkedS := model.matrix(~Pclass:Embarked, data = train)[,10]]	1	1
output[, layers := doe$layers[i]]	1	1
knn_train$Pclass <- (knn_train$Pclass - min_class) / (max_class - min_class)	1	1
train<-train[,Gender:=ifelse(Sex=='female',1,2)]	1	1
"data$Ticket2=toupper(gsub('( )|([.])|(/)', '', gsub(""[[:digit:]]"", '', data$Ticket)))"	1	1
gbm.diag = foreach(i = 1:nrow(doe)) %do%	1	1
full_data$Title[full_data$Title %in% rare_title]  <- 'Rare Title'	1	1
mean(age.data$Age[age.data$FamSize==1]),	1	1
"dft$Embarked=factor(dft$Embarked, levels=c(""S"",""C"",""Q""))"	1	1
data$FamilySize <- data$SibSp + data$Parch + 1	1	1
full$familyID[full$familyID %in% smallFamId$Var1] <- 'Small'	1	1
alpha.values[[1]], fpr=tprfpr@x.values[[1]],	1	1
model$cross_validation_metrics_summary	1	1
PAr <- c(train$Parch,test$Parch)	1	1
levels(Titanic_train$Sex) <- c('Female', 'Male')	1	1
print(paste('Accuracy',1-misClasificError_rf)) #~0.828	1	1
cab_occupancy = data.frame(cabintable)	1	1
names(titanic) <- tolower(names(titanic))	1	1
ageTrain$Age<-age.Predict	1	1
nn.diag = foreach(i = 1:nrow(doe)) %do%	1	1
print(fit.svm.tune)	1	1
"lda.list = list(""mod"" = lda.mod, ""cutoff"" = cuts[2])"	1	1
"lastname = strsplit(train$Name[i],"", "")[[1]][2]"	1	1
tst_m[is.na(tst_m$Fare),c('Fare')] = fill_Fare	1	1
data$Age_Group[data$Age <= 20 & data$Age > 10] <- 'Teen'	1	1
"table(subset(df_combined, Fare >= 80, select = c(""Embarked"")))"	1	1
tot$Embarked<-as.factor(tot$Embarked)	1	1
train$Embarked=as.factor(train$Embarked)	1	1
ib <- which(is.na(train_data$Age))	1	1
Titanic_data$Title[Titanic_data$Title=='Mlle']='Miss'	1	1
final_ens_model$ens_model	1	1
fitted.results<-ifelse(fitted.results>0.5,1,0)	1	1
data <- cbind(train$Survived, data)	1	1
full <- bind_rows( train, test )	1	1
mergedData$sharedTicket <- sapply(mergedData$Ticket,function(x) pmin(t[[x]],4) )	1	1
full$ticket_num <- as.factor(round(log10(full$ticket_num)))	1	1
"train <- data.table(read.csv(""../input/train.csv""))"	1	1
random <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)	1	1
print(ErrorRate)	1	1
summary(completeTrain$AgeRange)	1	1
data_train$Age <- as.numeric(data_train$Age)	1	1
data <- bind_rows(train, test)	1	1
full$familySize[full$familySize == 1] <- 'singleton'	1	1
test_nn$Age <-  (test_nn$Age - min(test_nn$Age)) /	1	1
scale_x_continuous(breaks=c(1:3)) +	1	1
combi$Title[combi$Title %in% c('Mlle','Mme')]<-'Mlle'	1	1
train$parentyn<-0	1	1
"L1.predict <- unname(predict(log.model,newdata=D1,type=""response""))"	1	1
Xtrainset$Embarked<-as.numeric(Xtrainset$Embarked)	1	1
pre_test[, Category := 'cv']	1	1
round(prop.table(table(is.na(train$Age), train$Pclass), 1),2)	1	1
"full$Fare_Category <- ifelse(full$Fare > 150, ""High"", full$Fare_Category )"	1	1
fulldata$isKids=0	1	1
output = data.table(output)	1	1
"percentage_man<-round(sum(trainset_1$Sex==""male"")/nrow(trainset),3)"	1	1
summary(extractFeatures(train))	1	1
select(arrange(survival_age_tbl, Age_Bin_Order), -Age_Bin_Order)	1	1
combined$Mother <- 'Not Mother'	1	1
select(Pclass, Age, Sex, Fare, Embarked)	1	1
solution <- data.frame(PassengerId = prRF$PassengerId, Survived = prRF$Survived)	1	1
results_frame[153,2] <- 0	1	1
whole.data[whole.data$Fare>=15 & whole.data$Fare<31, 'FareBin'] <- '3'	1	1
"fullComb$Embarked[c(62,830)] = ""S"""	1	1
fullComb$Title <- factor(fullComb$Title)	1	1
summary(df.example)	1	1
sum(is.na(train$Embarked))	1	1
"full$Fare_Category <- ifelse(full$Fare <= 50, ""Low"", full$Fare_Category )"	1	1
age_by_title <- full %>% group_by(Title) %>% summarise(Age = median(Age, na.rm=T ))	1	1
full_data <-bind_rows(train,test)	1	1
tot$Title<-sapply(tot$Name, function(x) strsplit(x, split='[,.]')[[1]][2])	1	1
train_nb$Pclass_f <- factor(train_nb$Pclass)	1	1
sapply(trainset, function (x) sum(is.na(x)))	1	1
variable.names(train)	1	1
"freq<-as.data.frame(table(combine[,c(""age.range"",""Survived"")]))"	1	1
mod.dat[, Embarked := NULL]	1	1
aggregate(train[,2], list(train$siblingyn), mean)	1	1
Titanic_data$Title[Titanic_data$Title=='Rev']='Mr'	1	1
print(SDA_model)	1	1
group_by(Samesurname) %>%	1	1
"full$title <- gsub(""^.+, (.+?)\\. .+$"", ""\\1"", full$Name)"	1	1
"full[is.na(full$Age) & full$Title == ""Master"", ]$Age <-age_by_title[age_by_title$Title== ""Master"", ]$Age"	1	1
"my_df$Embarked[c(62, 830)] <- ""C"""	1	1
print(spmodel)	1	1
solution.randomForest <- data.frame(PassengerID = test$PassengerId, Survived = predict.randomForest)	1	1
attach(titanic)	1	1
combinedTrnsfrm.df[which(is.na(combinedTrnsfrm.df$Survived)), ],	1	1
total$Title[total$Title %in% rare_title]  <- 'Rare'	1	1
NData <- sapply(full, function(x) sum(is.na(x))); NData[NData>0]	1	1
"test.data.raw <- read.csv('../input/test.csv',header=T,na.strings=c(""""),stringsAsFactors = F)"	1	1
train$Age2 <- as.integer(train$Age2)	1	1
clean_train$Embarked <- as.factor(clean_train$Embarked)	1	1
titanic_linear$Age <- titanic$Age	1	1
test.result<-as.data.frame(cbind(test.edit$PassengerId,as.character(test.edit$my_prediction)))	1	1
combi$AdditionalName <- as.factor(combi$AdditionalName)	1	1
train$Fare2 <- '30+'	1	1
"test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings=c("""",""NA""))"	1	1
aggregate(train[,2], list(train$embdiv), mean)	1	1
"full$IsChild[train$Age < 18] <- ""Child"""	1	1
numbers=TRUE, sortVars=TRUE, labels=names(DstTrain),	1	1
predictOne<-data.table(predict(modelTwo,test))	1	1
min_child_weight = seq(1/sqrt(event.rate), 3/event.rate, length.out = 3),	1	1
summary(analysis)	1	1
survivors_logi <- rep(0, nrow(titanic))	1	1
data[1:889,]	1	1
"train = data.table(read.csv(""train.csv"", na.strings = """"))"	1	1
Train$Pclass %<>% as.character()	1	1
knn_test$Name = NULL	1	1
knn_test$Cabin = NULL	1	1
solution2<- data.frame(PassengerId = test2$PassengerId, Survived=my_pred)	1	1
train$embdiv<-0	1	1
train_nb$Parch_f <- factor(train_nb$Parch)	1	1
sapply(data_train, function(x) sum(is.na(x)))	1	1
full[1044,]$Fare<- fare.Pred	1	1
rf_model$importance	1	1
inps<-melt(rbind(rep(NA,ncol(inps)),inps))$value	1	1
ynew = as.numeric(compute(mod, data.table(Xtest))$net.result)	1	1
"a2 <- which(titanic[,""Pclass""] ==3 & titanic[,""Embarked""] == ""S"")"	1	1
group_by(Head_of_family) %>%	1	1
as.numeric(cm_NB_ubal$byClass[2]), # Specificity	1	1
fulldata[1:891,]	1	1
MissingAge$Title != 'Master', FCabins,	1	1
Predict_dtree<-ifelse(Predict_dt[,2]>0.5,TRUE,FALSE)	1	1
"full$Ticket_Pre <- sapply(full$Ticket, FUN=function(x) {ifelse(str_detect(x, "" ""),str_split(x, "" "")[[1]][1],'None')})"	1	1
sum(Titanic_train$FamilySize == 'Small' & Titanic_train$Survived == 1) / sum(Titanic_train$FamilySize == 'Small')	1	1
submit<-data.frame(test$PassengerId,test$Survived)	1	1
"sl.diag[, mod := rep(""sl"", nrow(sl.diag))]"	1	1
"train_df_[train_df_$Embarked==""C"",]"	1	1
titles <- unique(whole.data$Title)	1	1
database_output$Survived <- y_pred	1	1
test[i,5] <- test[i,5]	1	1
missing <- sapply(data, function(x) sum(is.na(x)))	1	1
full$Fare2[full$Fare>7.91& full$Fare<=14.454] = 2	1	1
table(Pclass)	1	1
test$p[predicted >= 0.53] = 1	1	1
full_data$Embarked <-as.factor(full_data$Embarked)	1	1
knn_train$Sex <- factor(knn_train$Sex, labels = c('0','1'))	1	1
my_solution <- data.frame(PassengerId = df_combined[892:1309,1], Survived = my_prediction)	1	1
train[Gender==i & Pclass==j & is.na(Age),Age:=median_ages[i,j]]	1	1
train$fareRange[train$Fare<10] <-'<10'	1	1
"train.mice = data.table(complete(imputations, action = ""long""))"	1	1
titanic$sex <- as.factor(titanic$sex)	1	1
my_df[892:1309,]	1	1
Titanic_test$Sex <- as.factor(Titanic_test$Sex)	1	1
train.data2$Embarked <- factor(train.data2$Embarked)	1	1
counts <- table(data$Survived)	1	1
filter(family_n > 1) %>%	1	1
roc <- data.frame(tpr, fpr)	1	1
fulldata$Title=sapply(fulldata$Title,FUN=function(x){map[[x]]})	1	1
summary(age.reg)	1	1
"test<-data.table(read.csv(""../input/test.csv"",stringsAsFactors=F))"	1	1
format(summary(train))	1	1
dat$TP[i] / (dat$TP[i] + dat$FN[i]),	1	1
knn_train$Ticket = NULL	1	1
rValues$values	1	1
train[train$Embarked=='',]	1	1
full[train_dev_idx, best_var]	1	1
fullComb$FamilyID[fullComb$FamilyID %in% famIDs$Var1] <- 'Small'	1	1
combi$TitleCat[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Don', 'Sir', 'Jonkheer')] <- 'Royal'	1	1
rep(paste('out',seq(1:struct.out[length(struct.out)])),each=1+struct.out[length(struct.out)-1])	1	1
unique(full$title)	1	1
print(GLM_model)	1	1
as.numeric(cm_RF_bal$overall[1]), # Accuracy	1	1
"ensemble_predict$RF = as.numeric(predict(model_RF_bal,test, type=""response""))-1"	1	1
knn_train <- train[,-c(1,2,4,9,11,14,16)]	1	1
table(full$Survived,full$Title)	1	1
checkCorr$FsizeD    <- as.numeric(checkCorr$FsizeD)	1	1
df[resampledataPart,]	1	1
"names(pTable) <- c(""PassagerId"",""Survived"")"	1	1
al_list=c('gbm','rf','rpart','C5.0')	1	1
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x) {sum(x)/length(x)})	1	1
Exit[4] <-  median(VECTOR,na.rm=TRUE)	1	1
combi$Title <- as.factor(combi$Title)	1	1
"print(paste(""The median fare of third class passengers is:"", median(thirdClass$Fare, na.rm=T)))"	1	1
data_train$SibSp <- NULL	1	1
full$Mother[full$Sex == 'female'  & full$Parch >0 & full$Age >= 18 & full$Title != 'Miss'] <- 'Mother'	1	1
table(is.na(titanic.test))	1	1
a6 <- which(a5 == TRUE) # rows with NA	1	1
AgeClass = factor(ageClass(Age)),	1	1
missing_train<-t(data.frame(sapply(train_data, function(x) sum(is.na(x)))))	1	1
assign('struct',struct.out,envir=environment(nnet.vals))	1	1
rfmod$results	1	1
data$Age_Group[data$Age <= 40 & data$Age > 30] <- 'Adult'	1	1
train$Survived[train$Age >= 65]	1	1
dat$y	1	1
"full$Age_Category <- ifelse(full$Age > 35 , ""Aged"", full$Age_Category)"	1	1
data2[!is.na(data2[,'Age']),]	1	1
PctRpart2=sum(RpartSurvived2 == Survived)/length(Survived),	1	1
full$quote[full$quote >= 0.5 & full$quote <= 1] <- 1	1	1
knn_test$Ticket = NULL	1	1
DstTrainClean$TitleType <- ifelse(DstTrainClean$Title %in% Crew, 'Crew',DstTrainClean$TitleType)	1	1
test$FamilySize <- test$SibSp + test$Parch + 1	1	1
summary(out)	1	1
"out <- cbind(""PassengerId"" = d.init.predict$PassengerId, ""Survived"" = as.numeric(out)-1)"	1	1
full$Embarked[c(62,830)] <- 'C'	1	1
"train_male<-subset(train_data,train_data$Sex==""male"")"	1	1
bind_rows(testData) %>%	1	1
full$familySize <- factor(full$familySize)	1	1
res <- (-t(y) %*% log(sigmoid) - (t(1 - y) %*% log(1 - sigmoid)))/m	1	1
"cols <- c(""PassengerId"", ""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Ticket"", ""Cabin"", ""Embarked"")"	1	1
text(bp,table(trn_m$Survived)*.9,labels=table(trn_m$Survived))	1	1
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir','Col','Dr')] <- 'Sir'	1	1
"a <- nzchar(SibSp); table(a)[""FALSE""]"	1	1
fulldata$Deck=sub(' ','',sapply(fulldata$Cabin,FUN=function(x){substring(x,0,1)}))	1	1
DstTrainClean$TitleType <- ifelse(DstTrainClean$Title %in% Nobility.man, 'Nobility.man',DstTrainClean$TitleType)	1	1
if(nid) wts<-rescale(abs(wts),c(1,rel.rsc))	1	1
full$Parch = as.numeric(as.factor(full$Parch))	1	1
svm_model<-svm(factor(Survived)~.,data=rbind(train_clean,valid_clean),kernel='linear')	1	1
"training.data.raw <- read.csv('../input/train.csv',header=T,na.strings=c(""""),stringsAsFactors = F)"	1	1
"full[full$title=='Ms',]$title<-""Miss"""	1	1
"scale_x_discrete(limits=c(""single"", ""small"", ""large""))"	1	1
"train$Age[grepl(""Mrs\\."", train$Name) & is.na(train$Age)] = mean.mrs"	1	1
data_train$Name <- NULL	1	1
titanic2 <- titanic[,-c(1,4, 9, 11)]	1	1
counts <- table(data$Embarked)	1	1
mod.in$coefnames	1	1
"a <- nzchar(Sex); table(a)[""FALSE""]"	1	1
trainData1$Age[which(is.na(trainData1$Age))] <- mean(as.numeric(trainData1$Age[which(!is.na(trainData1$Age))]))	1	1
nodes = c(10, 30, 50),	1	1
wts<-unlist(lapply(wts[grep(src.str,names(wts))],function(x) x[all.in+1]))	1	1
labels=names(train_sub), cex.axis=.7,	1	1
full_data$familysize <- full_data$SibSp + full_data$Parch + 1	1	1
mean(trn_m$Age_comp_FM)	1	1
"hist(trn_m$Age, freq= FALSE, main = ""Training Data:  Original Age"", ylim = c(0,0.045))"	1	1
test<-test[,Gender:=ifelse(Sex=='female',1,2)]	1	1
"train_data$Age[is.na(train_data$Age)&train_data$Sex==""female""]<-mean_female"	1	1
"train_model<-full[1:891,c(""Survived"",""Age"",""Sex"",""Family_count"",""Family_size_ratio"",""Fare"",""title"")]"	1	1
DstTest$Title <- gsub('(.*, )|(\\..*)', '', DstTest$Name)	1	1
train$Sex      <- factor(train$Sex)	1	1
"ensemble_predict$NB = as.numeric(predict(model_NB_bal,test, type=""class""))-1"	1	1
"fea$TicketPrefix <- sub(""\\s.*"","""",as.character(data$Ticket))"	1	1
apply(my_df, 2, Missing_d) #checking missing data variable-wise	1	1
train$embdiv[which(train[,12]=='C')]<-1	1	1
train[index,]	1	1
DataBind$Title[DataBind$Title == 'Mme']  <-'Mrs'	1	1
which(is.na(full$Fare)==TRUE)   # which() will return indexes of the observation which has missing value for Fare	1	1
table(predictionrf)	1	1
Titanic_data$Title[Titanic_data$Title=='Sir']='Mr'	1	1
is.factor(train$Embarked)	1	1
ffpred <- data.frame(PassengerId = test$passengerid, Survived = ffpred)	1	1
Titanic_train$Pclass <- as.factor(Titanic_train$Pclass)	1	1
group_by(quote) %>%	1	1
select(PassengerId, Survived)	1	1
prop.table(table(full$SibSp,full$Survived),1)	1	1
combinedTrnsfrm.df <- cbind(combined.df, dummyData.df)  # merge dummies with all variables	1	1
y_pred = predict(classifier, newdata = as.matrix(database_test))	1	1
high_rank_female <- c('Dona','Lady','the Countess')	1	1
trn_m[is.na(trn_m$Age_comp_FM),c('Age_comp_FM')] = fill_Age_mean	1	1
"rf.train <- data.combined[1:891,c(""Pclass"",""title"",""SibSp"")]"	1	1
titanic$Title <- factor(titanic$Title)	1	1
"train <- read.table(""../input/train.csv"", header = T, sep = "","", stringsAsFactors = F)"	1	1
by_Sex_Age <- mutate(by_Sex_Age, Chance = (Total.y/Total.x)*100)	1	1
train[,-1]#remove passenger_id from train set its irrevalent	1	1
famIDS[famIDS$Freq <= 2,]	1	1
submission=cbind(test$PassengerId,Survived)	1	1
Xtestset$Sex<-as.numeric(Xtestset$Sex)	1	1
survival_age_tbl <- mutate(survival_age_tbl, Survival_Chance = (Survived/Total)*100)	1	1
whole.data[whole.data$Age>=39, 'AgeBin'] <- '4'	1	1
mean(age.data$Age[age.data$Parch==3]),	1	1
aggregate(train[,2], list(train$agegroup), length)	1	1
sum(Titanic_train1$Age >= 50 & Titanic_train1$Survived == 1) / sum(Titanic_train1$Age >= 50)	1	1
full[full$Fare<=outBound,]	1	1
df$has_cabin <- 0	1	1
scale_x_discrete(breaks=c('female','male')) +	1	1
tbl <- table(trn_m[,c(disc_var[i])],trn_m$Survived_F)	1	1
fullComb$FamilySize <- fullComb$SibSp + fullComb$Parch + 1	1	1
"Titanic_test$FamilySize <- ifelse(Titanic_test$SibSp + Titanic_test$Parch + 1 == 1, ""Single"", ifelse(Titanic_test$SibSp + Titanic_test$Parch + 1 < 4, ""Small"", ""Large""))"	1	1
full[Category %in% c('cv', 'train'), sum(RpartSurvived == Survived)/length(Survived)]	1	1
table(is.na(titanic.train))	1	1
select(Survived,Sex,Fare,Pclass,Age,Title,SibSp,Parch,Embarked)	1	1
sapply(testset, function (x) sum(is.na(x)))	1	1
group_by(Sex) %>%	1	1
prediction=data.frame(PassengerId=test_original$PassengerId, Survived=test$Survived)	1	1
"prediction <- data.frame(passenger_id,predict(RF_model,test,type = ""raw""))"	1	1
dt_solution <- data.frame(PassengerID = validation$PassengerId, Survived = my_dt_prediction)	1	1
my.test.data[is.na(my.test.data[,i]), i] <- mean(my.test.data[,i], na.rm = TRUE)	1	1
full_data$Fare[1044] <- 8.05	1	1
anovamod <- lm(Age ~ as.factor(Pclass), data = train) #model for ANOVA	1	1
dim(data)	1	1
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'	1	1
output[, ntree := doe$ntree[i]]	1	1
third_class <- filter(train, Pclass == 3)	1	1
mutate(Survived = fct_recode(Survived, 'survived' = '0', 'died' = '1'))	1	1
first_class_test <- filter(test, Pclass == 1)	1	1
cleandata[-trainIndex,]	1	1
if(is.null(struct)) stop('Three-element vector required for struct')	1	1
"full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir') ] <- ""Sir"""	1	1
dim(train.data)	1	1
full[id,]	1	1
test.data3$Surname <- factor(test.data3$Surname)	1	1
train$Embarked[is.na(train$Embarked)] <- 'S'	1	1
combi$Surname <- sapply(combi$Name, FUN=function(x){strsplit(x, split='[,.]')[[1]][1]})	1	1
table(predict_dt)	1	1
MasterMedianAge <- median(total[which(total$Title == 'Master'), ]$Age, na.rm = TRUE)	1	1
cTest$FsizeD <- as.factor(cTest$FsizeD)	1	1
summary(testPredictions)	1	1
sprintf('correlation coefficient : %s',cor(age.data$Age, age.data$Fare))	1	1
"titanic.train <- titanic.train[,!(names(titanic.train) %in% c(""flag""))]"	1	1
cat('By category:')	1	1
"mrs<-test[grep(""Mrs"",Name),mean(Age,na.rm=T)]"	1	1
imputeData[toFactor] <- lapply(imputeData[toFactor], factor)	1	1
test.mice[, log.Fare.1 := log(Fare + 1)]	1	1
test.nn[, rescale.Fare := rescale(Fare, to = c(0, 1), from = range(train$Fare))]	1	1
nrow(allData)	1	1
alpha = c(0.1, 0.2, 0.3, 0.5, 0.7, 1),	1	1
test.edit<-cbind(test.edit,my_prediction)	1	1
percentage_missing_data <- sapply(train, function(df) {sum(is.na(df)==TRUE)/ length(df);})	1	1
train$Survived = factor(train$Survived)	1	1
predTitanicTrain01$Survived <- ifelse(predTitanicTrain01$Survived>0.5,1,0)	1	1
data$Sector <- sapply(data$Cabin, substr, 1, 1)	1	1
"FM <- network[network$Ticket==unique(network$Ticket)[g],""PassengerId""]"	1	1
tst_m$Sex = factor(tst_m$Sex)	1	1
"fpr <- unlist(slot(tprfpr, ""x.values""))"	1	1
full_df <- bind_rows(test,train)	1	1
train[, Pclass3.Fare := model.matrix(~Pclass:Fare, data = train)[,4]]	1	1
"obscure <- c(""Capt"", ""Col"", ""Don"", ""Dona"", ""Dr"", ""Jonkheer"", ""Lady"", ""Major"", ""Rev"", ""Sir"", ""the Countess"")"	1	1
testset$Embarked <- factor(testset$Embarked)	1	1
percentage_survival<-round(sum(trainset$Survived==1)/nrow(trainset),3)	1	1
full$Fare[1044]<-mean(full[full$Pclass=='3',]$Fare,na.rm=T)	1	1
submission$Survived[is.na(submission$Survived)]=0	1	1
Embarked_survival<-table(titanic$Survived,titanic$Embarked)	1	1
mice_mod <- mice(fulldata[, names(fulldata) %in% c('Pclass','Sex','SibSp','Parch','Fare','Embarked','FamilySize','FamilynameSize','TicketGroupSize','Age')], method='rf')	1	1
"data.clean$Age < 30, ""20 ~ 29"","	1	1
titanic$KDIG <- tapply(1-Survived, Ticket, sumNotNA)[Ticket] - ifelse(is.na(Survived),0,1-Survived)	1	1
full$Age2[full$Age>16& full$Age<=32] = 2	1	1
summary(Titanic_model)	1	1
full$RareTitle[full$Title %in% RareTitles]  <- 'Rare Title'	1	1
age<-cut(train$Age,breaks=c(0,1,seq(from=5,to=100,by=5)))	1	1
Exit[3] <-  mean(VECTOR,na.rm=TRUE)	1	1
"c(""age"", ""gender"", ""Fare""),"	1	1
cTrain$Sex <- as.factor(cTrain$Sex)	1	1
p_LR_ubal <- ifelse(p_LR_ubal > 0.5,1,0)	1	1
mutate(survivalrate = n / sum(n)) %>%	1	1
data %>% group_by(title) %>% summarise(prob = mean(Survived)) %>% print()	1	1
print('Distribution of Fare  X  Cabin/Deck missing vs present')	1	1
combi$FamilySize <- as.numeric(combi$FamilySize)	1	1
sapply(raw.data,function(x) length(unique(x)))	1	1
"dft[c(""PassengerId"",""Survived"")], #select column names"	1	1
names(df_combined[,nums])	1	1
table(trn_m$Embarked,trn_m$Survived)	1	1
if(layer.name=='I' & var.labs) text(x-line.stag*diff(x.range),y,x.names,pos=2,cex=cex.val)	1	1
table(trn_m$Age_Bin, trn_m$Survived)	1	1
all$Title <- sapply(all$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})	1	1
group_by(Family_size) %>%	1	1
males[1:5,]	1	1
"predictions <- predict(model, as.matrix(trainingData[, predictorVar]), type=""class"")"	1	1
"test$cat <- ""test"""	1	1
data.combined<- rbind.data.frame(train,test.survived)	1	1
full[full$Pclass == 3 & full$Embarked == 'S' ,  ]	1	1
fill_Age_mean = mean(trn_m[complete.cases(trn_m[,c('Age')]),c('Age')])	1	1
MissingAge$Title != 'Master', CCabins,	1	1
shuffled <- sample(nrow(train))	1	1
"table(combi[is.na(combi$Age) | combi$Age == 0,""Pclass""]) # Lots of class 3 missing compared to the rest"	1	1
par(mfrow=c(3,3))	1	1
Predict_lm_sig<-ifelse(Predict_lm_sig>0.55,TRUE,FALSE)	1	1
"summarise(filter(test_tbl, is.na(Age), Sex == ""male"" ), bad_age = n())"	1	1
hist(trn_m$Age, freq = FALSE, main = 'Age: Original', ylim = c(0,0.045))	1	1
"val_x = val[,-which(names(val) %in% c(""Survived_F""))]"	1	1
output<-cbind(test$PassengerId,Predict_lm,Predic_svm,Predict_dt[,2])	1	1

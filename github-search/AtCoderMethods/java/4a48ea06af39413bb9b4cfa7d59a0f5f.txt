public static void main(String[] args) {
    FastScanner sc = new FastScanner();
    int N = sc.nextInt();
    int[] p = sc.nextIntList(N);
    st[0] = new SegmentTreeRMQPos(N);
    st[1] = new SegmentTreeRMQPos(N);
    queue = new PriorityQueue<>((o1, o2) -> p[min(o1)] - p[min(o2)]);
    for (int i = 0; i < N; i++) {
        st[i % 2].update(i, p[i]);
    }
    queue.add(new int[] { 0, N });
    int[] ret = new int[N];
    int ptr = 0;
    while (queue.size() > 0) {
        int[] range = queue.poll();
        int left = min(range);
        int right = min(new int[] { left + 1, range[1] });
        ret[ptr++] = p[left];
        ret[ptr++] = p[right];
        if (range[0] < left)
            queue.add(new int[] { range[0], left });
        if (left + 1 < right)
            queue.add(new int[] { left + 1, right });
        if (right + 1 < range[1])
            queue.add(new int[] { right + 1, range[1] });
    }
    StringBuilder sb = new StringBuilder();
    for (int v : ret) {
        sb.append(v);
        sb.append(" ");
    }
    System.out.println(sb.substring(0, sb.length() - 1));
}
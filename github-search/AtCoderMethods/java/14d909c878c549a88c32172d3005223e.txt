private void solve() {
    N = nextInt();
    M = nextInt();
    R = nextInt();
    dp = new int[N][N];
    for (int i = 0; i < N; i++) {
        Arrays.fill(dp[i], Integer.MAX_VALUE / 2);
    }
    r = new int[R];
    for (int i = 0; i < R; i++) {
        r[i] = nextInt() - 1;
    }
    for (int i = 0; i < M; i++) {
        int a = nextInt() - 1;
        int b = nextInt() - 1;
        int c = nextInt();
        dp[a][b] = c;
        dp[b][a] = c;
    }
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            for (int k = 0; k < N; k++) {
                dp[j][k] = Math.min(dp[j][k], dp[j][i] + dp[i][k]);
            }
        }
    }
    bitDP = new int[1 << R][R];
    for (int i = 0; i < 1 << R; i++) {
        Arrays.fill(bitDP[i], Integer.MAX_VALUE / 2);
    }
    for (int i = 0; i < R; i++) {
        bitDP[1 << i][i] = 0;
    }
    for (int i = 1; i < 1 << R; i++) {
        for (int j = 0; j < R; j++) {
            if ((i >> j & 1) == 0)
                continue;
            for (int k = 0; k < R; k++) {
                if ((i >> k & 1) == 1)
                    continue;
                bitDP[i | 1 << k][k] = Math.min(bitDP[i | 1 << k][k], bitDP[i][j] + dp[r[j]][r[k]]);
            }
        }
    }
    int ans = Integer.MAX_VALUE;
    for (int i = 0; i < R; i++) {
        ans = Math.min(ans, bitDP[(1 << R) - 1][i]);
    }
    out.println(ans);
}
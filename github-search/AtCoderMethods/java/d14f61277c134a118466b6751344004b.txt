public static int[] sieveAtkin(int size) {
    boolean[] isPrime = new boolean[size + 1];
    int sqrtN = (int) Math.sqrt(size);
    int n;
    for (int x = 1; x <= sqrtN; ++x) {
        for (int y = 1; y <= sqrtN; ++y) {
            n = 4 * x * x + y * y;
            if (n <= size && (n % 12 == 1 || n % 12 == 5)) {
                isPrime[n] = !isPrime[n];
            }
            n = 3 * x * x + y * y;
            if (n <= size && n % 12 == 7) {
                isPrime[n] = !isPrime[n];
            }
            n = 3 * x * x - y * y;
            if (x > y && n <= size && n % 12 == 11) {
                isPrime[n] = !isPrime[n];
            }
        }
    }
    for (n = 5; n <= sqrtN; ++n) {
        if (isPrime[n]) {
            for (int k = n * n; k <= size; k += n * n) {
                isPrime[k] = false;
            }
        }
    }
    isPrime[2] = isPrime[3] = true;
    int[] ret = new int[size];
    int count = 0;
    for (int i = 1; i < size; i++) {
        if (isPrime[i]) {
            ret[count++] = i;
        }
    }
    return Arrays.copyOf(ret, count);
}
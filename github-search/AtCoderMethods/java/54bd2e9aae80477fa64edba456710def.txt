private void solve() throws IOException {
    N = nextInt();
    K = nextInt();
    L = nextInt();
    for (int i = 0; i <= 200000; ++i) {
        road[i] = new ArrayList<>();
        rail[i] = new ArrayList<>();
    }
    for (int k = 0; k < K; ++k) {
        int a = nextInt();
        int b = nextInt();
        road[a].add(b);
        road[b].add(a);
    }
    componentId = 1;
    for (int i = 1; i <= N; ++i) {
        if (!used[i]) {
            dfs(i);
            ++componentId;
        }
    }
    componentId = 1;
    Arrays.fill(used, false);
    for (int l = 0; l < L; ++l) {
        int a = nextInt();
        int b = nextInt();
        rail[a].add(b);
        rail[b].add(a);
    }
    for (int i = 1; i <= N; ++i) {
        if (!used[i]) {
            dfs2(i);
            ++componentId;
        }
    }
    ArrayList<Data> g = new ArrayList<>();
    for (int i = 1; i <= N; ++i) {
        g.add(new Data(i, roadComponent.get(i), railComponent.get(i)));
    }
    Collections.sort(g);
    int currStart = 0;
    int[] result = new int[N + 1];
    Data curr = new Data(-1, -1, -1);
    for (int i = 0; i < g.size(); ++i) {
        if (curr.railComp != g.get(i).railComp || curr.roadComp != g.get(i).roadComp) {
            for (int j = currStart; j < i; ++j) {
                result[g.get(j).vertex] = i - currStart;
            }
            curr = g.get(i);
            currStart = i;
        }
    }
    for (int j = currStart; j < g.size(); ++j) {
        result[g.get(j).vertex] = g.size() - currStart;
    }
    writer.print(result[1]);
    for (int i = 2; i <= N; ++i) writer.print(" " + result[i]);
    writer.println();
}
void solve() throws IOException {
    int n = ni();
    int a = ni(), b = ni(), c = ni(), d = ni();
    int m = b - a + 1;
    long MOD = 1000000007;
    Modulo mo = new Modulo(MOD);
    for (int i = 0; i < 1010; i++) {
        ko[i][0] = 1;
    }
    for (int i = 1; i < 1010; i++) {
        for (int j = 1; j <= i; j++) {
            ko[i][j] = (ko[i - 1][j - 1] + ko[i - 1][j]) % MOD;
        }
    }
    long[] rev = new long[1010];
    for (int i = 1; i < 1010; i++) {
        rev[i] = mo.rev(i);
    }
    dp[0][0] = 1;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j <= n; j++) {
            if (dp[i][j] == 0)
                continue;
            dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % MOD;
            long p = 1;
            int cnt = 0;
            for (int k = 0; k < c; k++) {
                if (j + k * (a + i) > n)
                    break;
                p = (p * ko[n - j - k * (a + i)][a + i]) % MOD;
                cnt++;
                p = (p * rev[cnt]) % MOD;
            }
            for (int k = c; k <= d; k++) {
                if (j + k * (a + i) > n)
                    break;
                dp[i + 1][j + k * (a + i)] = (dp[i + 1][j + k * (a + i)] + dp[i][j] * p) % MOD;
                p = (p * ko[n - j - k * (a + i)][a + i]) % MOD;
                cnt++;
                p = (p * rev[cnt]) % MOD;
            }
        }
    }
    out.println(dp[m][n]);
}
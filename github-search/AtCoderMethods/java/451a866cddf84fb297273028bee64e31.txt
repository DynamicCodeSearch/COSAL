static int dfs(int ptn) {
    if (memo[ptn] != -1) {
        return memo[ptn];
    }
    int max = K + rel[ptn];
    if (Integer.bitCount(ptn) >= 2) {
        int head = -1;
        for (int i = 0; i < n; i++) {
            if ((ptn & (1 << i)) >= 1) {
                head = i;
            }
        }
        int wup = ptn ^ (1 << head);
        for (int sub = (wup - 1) & wup; sub > 0; sub = (sub - 1) & wup) {
            max = Math.max(max, dfs(sub) + dfs(ptn - sub));
        }
        memo[ptn] = max;
    }
    return max;
}
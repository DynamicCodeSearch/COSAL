void submit() {
    int n = nextInt();
    p = new int[n];
    for (int i = 0; i < n; i++) {
        p[i] = nextInt() - 1;
    }
    inv = new int[n];
    for (int i = 0; i < n; i++) {
        inv[p[i]] = i;
    }
    int[] even = new int[n / 2];
    int[] odd = new int[n / 2];
    for (int i = 0; i < n; i++) {
        (i % 2 == 0 ? even : odd)[i / 2] = p[i];
    }
    evenT = new SparseTable(even);
    oddT = new SparseTable(odd);
    PriorityQueue<Segment> pq = new PriorityQueue<>();
    pq.add(makeSegment(0, n));
    for (int i = 0; i < n / 2; i++) {
        Segment segm = pq.poll();
        out.print((segm.value + 1) + " ");
        int posMax = inv[segm.value];
        int valPair;
        if (segm.l % 2 == 0) {
            valPair = oddT.get(posMax / 2, segm.r / 2);
        } else {
            valPair = evenT.get(posMax / 2 + 1, segm.r / 2 + 1);
        }
        out.print((valPair + 1) + " ");
        int posPair = inv[valPair];
        if (segm.l < posMax) {
            pq.add(makeSegment(segm.l, posMax));
        }
        if (posMax + 1 < posPair) {
            pq.add(makeSegment(posMax + 1, posPair));
        }
        if (posPair + 1 < segm.r) {
            pq.add(makeSegment(posPair + 1, segm.r));
        }
    }
}
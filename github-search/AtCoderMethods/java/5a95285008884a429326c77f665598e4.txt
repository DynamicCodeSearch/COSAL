void run() {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int A = sc.nextInt();
    int B = sc.nextInt();
    long[] v = new long[N];
    for (int i = 0; i < N; ++i) {
        v[i] = sc.nextLong();
    }
    Arrays.sort(v);
    HashMap<Long, Integer> cnt = new HashMap<>();
    for (int i = 0; i < N; ++i) {
        if (!cnt.containsKey(v[i])) {
            cnt.put(v[i], 1);
        } else {
            cnt.put(v[i], cnt.get(v[i]) + 1);
        }
    }
    long[] sum = new long[N];
    Fraction maxAve = null;
    for (int i = N - 1; i >= 0; --i) {
        sum[i] = v[i] + (i + 1 < N ? sum[i + 1] : 0);
        if (N - i >= A && N - i <= B) {
            if (maxAve == null) {
                maxAve = new Fraction(sum[i], N - i);
            } else if (new Fraction(sum[i], (N - i)).greater(maxAve)) {
                maxAve = new Fraction(sum[i], N - i);
            }
        }
    }
    System.out.printf("%.20f\n", 1d * maxAve.numerator.longValue() / maxAve.denominator.longValue());
    HashMap<Long, Integer> cnt2 = new HashMap<>();
    BigInteger comb = new BigInteger("0");
    for (int i = N - 1; i >= 0; --i) {
        if (!cnt2.containsKey(v[i])) {
            cnt2.put(v[i], 1);
        } else {
            cnt2.put(v[i], cnt2.get(v[i]) + 1);
        }
        if (N - i >= A && N - i <= B)
            if (maxAve.equal(new Fraction(sum[i], N - i))) {
                int all = cnt.get(v[i]);
                int cur = cnt2.get(v[i]);
                BigInteger d = new BigInteger("1");
                cur = Math.min(cur, all - cur);
                for (long j = all; j > all - cur; --j) {
                    d = d.multiply(BigInteger.valueOf(j));
                }
                for (long j = 1; j <= cur; ++j) {
                    d = d.divide(BigInteger.valueOf(j));
                }
                comb = comb.add(d);
            }
    }
    System.out.println(comb);
}
private void doit() {
    Scanner sc = new Scanner(System.in);
    while (sc.hasNext()) {
        int n = sc.nextInt();
        int[] data = new int[n];
        RMQ even = new RMQ(n);
        RMQ odd = new RMQ(n);
        for (int i = 0; i < n; i++) {
            data[i] = sc.nextInt();
            if (i % 2 == 0) {
                even.update(i, data[i]);
            } else {
                odd.update(i, data[i]);
            }
        }
        PriorityQueue<C> open = new PriorityQueue<>();
        int ind = even.queryIndex(0, n);
        open.add(new C(0, n, ind, data[ind]));
        StringBuilder sb = new StringBuilder();
        while (!open.isEmpty()) {
            C now = open.poll();
            int resInd;
            if (now.right % 2 == 0) {
                resInd = odd.queryIndex(now.ind + 1, now.right);
            } else {
                resInd = even.queryIndex(now.ind + 1, now.right);
            }
            sb.append(" " + now.value + " " + data[resInd]);
            if (now.left + 1 == now.right)
                continue;
            int leftind;
            if (now.left % 2 == 0) {
                leftind = even.queryIndex(now.left, now.ind);
            } else {
                leftind = odd.queryIndex(now.left, now.ind);
            }
            if (leftind != -1) {
                open.add(new C(now.left, now.ind, leftind, data[leftind]));
            }
            int centerind;
            if ((now.ind + 1) % 2 == 0) {
                centerind = even.queryIndex(now.ind + 1, resInd);
            } else {
                centerind = odd.queryIndex(now.ind + 1, resInd);
            }
            if (centerind != -1) {
                open.add(new C(now.ind + 1, resInd, centerind, data[centerind]));
            }
            int rightind;
            if ((resInd + 1) % 2 == 0) {
                rightind = even.queryIndex(resInd + 1, now.right);
            } else {
                rightind = odd.queryIndex(resInd + 1, now.right);
            }
            if (rightind != -1) {
                open.add(new C(resInd + 1, now.right, rightind, data[rightind]));
            }
        }
        System.out.println(sb.substring(1));
    }
}
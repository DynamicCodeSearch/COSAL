public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    int l = sc.nextInt();
    int[][] par = new int[n + 1][3];
    for (int i = 1; i <= n; i++) {
        par[i][0] = par[i][1] = par[i][2] = i;
    }
    for (int i = 0; i < k; i++) {
        int p = sc.nextInt();
        int q = sc.nextInt();
        int a, b;
        if ((a = Find(par, p, 0)) != (b = Find(par, q, 0))) {
            Unite(par, a, b, 0);
        }
    }
    for (int i = 0; i < l; i++) {
        int r = sc.nextInt();
        int s = sc.nextInt();
        int a, b;
        if ((a = Find(par, r, 1)) != (b = Find(par, s, 1))) {
            Unite(par, a, b, 1);
        }
    }
    for (int i = 1; i <= n; i++) {
        par[i][0] = Find(par, i, 0);
        par[i][1] = Find(par, i, 1);
    }
    Arrays.sort(par, new Comparator<int[]>() {

        @Override
        public int compare(int[] a, int[] b) {
            if (a[0] == b[0])
                return a[1] - b[1];
            return a[0] - b[0];
        }
    });
    int[] cnt = new int[n + 1];
    for (int i = 1; i <= n; i++) {
        int tmp = 0, j;
        for (j = i; j <= n; j++) {
            if (par[j][0] == par[i][0] && par[j][1] == par[i][1]) {
                tmp++;
            } else {
                break;
            }
        }
        for (; i < j; i++) {
            cnt[par[i][2]] = tmp;
        }
        i--;
    }
    for (int i = 1; i < n; i++) {
        System.out.print(cnt[i] + " ");
    }
    System.out.println(cnt[n]);
}
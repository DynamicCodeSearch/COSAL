public static void main(String[] args) {
    InputReader in = new InputReader(System.in);
    PrintWriter out = new PrintWriter(System.out);
    int[][] sg = in.nextIntTable(2, 2);
    int n = in.nextInt();
    long[][] points = in.nextLongTable(n, 3);
    points = Arrays.copyOf(points, n + 2);
    for (int i = n; i < n + 2; i++) {
        points[i] = new long[] { sg[i - n][0], sg[i - n][1], 0 };
    }
    
    n += 2;
    UnionFind uf = new UnionFind(n);
    double[][] d2 = new double[n][n];
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            long rr = points[i][2] + points[j][2];
            long dx = points[i][0] - points[j][0];
            long dy = points[i][1] - points[j][1];
            d2[i][j] = dx * dx + dy * dy;
            if (d2[i][j] <= rr * rr) {
                uf.unite(i, j);
            }
        }
    }
    double[][] dist = new double[n][n];
    for (int i = 0; i < n; i++) {
        Arrays.fill(dist[i], INF);
    }
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            int from = uf.find(i);
            int to = uf.find(j);
            if (from != to) {
                if (from > to) {
                    int tmp = to;
                    to = from;
                    from = tmp;
                }
                dist[from][to] = Math.min(dist[from][to], Math.sqrt(d2[i][j]) - (points[i][2] + points[j][2]));
            }
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            dist[j][i] = dist[i][j];
        }
    }
    int start = uf.find(n - 2);
    int goal = uf.find(n - 1);
    Dijkstra dijk = new Dijkstra(dist);
    double[] ans = dijk.doit(start);
    out.println(String.format("%.12f", ans[goal]));
    out.flush();
}
private void solve() throws IOException {
    int N = nextInt();
    int M = nextInt();
    HashMap<String, Integer> hm = new HashMap<>();
    ArrayList<Edge>[] edges = new ArrayList[N + 1];
    for (int i = 0; i <= N; ++i) edges[i] = new ArrayList<>();
    for (int m = 0; m < M; ++m) {
        int a = nextInt();
        int b = nextInt();
        int c = nextInt();
        edges[a].add(new Edge(b, c));
        edges[b].add(new Edge(a, c));
        int min = Math.min(a, b);
        int max = Math.max(a, b);
        String s = min + "," + max;
        if (!hm.containsKey(s)) {
            hm.put(s, 0);
        }
    }
    for (int v1 = 1; v1 <= N; ++v1) {
        for (int v2 = v1 + 1; v2 <= N; ++v2) {
            PriorityQueue<Edge> pq = new PriorityQueue<>();
            pq.offer(new Edge(v1, 0));
            int[] p = new int[N + 1];
            p[v1] = v1;
            int[] dist = new int[N + 1];
            Arrays.fill(dist, (1 << 29));
            dist[v1] = 0;
            boolean[] used = new boolean[N + 1];
            while (!pq.isEmpty()) {
                Edge top = pq.poll();
                if (top.to == v2)
                    break;
                if (used[top.to])
                    continue;
                used[top.to] = true;
                for (Edge to : edges[top.to]) {
                    if (dist[to.to] > top.w + to.w) {
                        dist[to.to] = top.w + to.w;
                        p[to.to] = top.to;
                        pq.offer(new Edge(to.to, dist[to.to]));
                    }
                }
            }
            int end = v2;
            while (end != v1) {
                int parent = p[end];
                int current = end;
                int min = Math.min(parent, current);
                int max = Math.max(parent, current);
                String s = min + "," + max;
                if (!hm.containsKey(s)) {
                    hm.put(s, 1);
                } else {
                    hm.put(s, hm.get(s) + 1);
                }
                end = parent;
            }
        }
    }
    int ret = 0;
    for (String s : hm.keySet()) {
        if (hm.get(s) == 0)
            ++ret;
    }
    writer.println(ret);
}
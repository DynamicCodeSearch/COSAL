public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    int n = Integer.parseInt(st.nextToken());
    int k = Integer.parseInt(st.nextToken());
    int l = Integer.parseInt(st.nextToken());
    int[] parentA = new int[n + 1];
    int[] parentB = new int[n + 1];
    int[] rankA = new int[n + 1];
    int[] rankB = new int[n + 1];
    for (int i = 1; i <= n; i++) {
        parentA[i] = i;
        parentB[i] = i;
    }
    for (int i = 1; i <= k; i++) {
        st = new StringTokenizer(br.readLine());
        int a = Integer.parseInt(st.nextToken());
        int b = Integer.parseInt(st.nextToken());
        merge(a, b, parentA, rankA);
    }
    for (int i = 1; i <= l; i++) {
        st = new StringTokenizer(br.readLine());
        int a = Integer.parseInt(st.nextToken());
        int b = Integer.parseInt(st.nextToken());
        merge(a, b, parentB, rankB);
    }
    
    
    HashMap<Long, Integer> map = new HashMap<>();
    for (int i = 1; i <= n; i++) {
        long temp = find(i, parentA) * 1L * n + find(i, parentB);
        if (map.containsKey(temp))
            map.put(temp, map.get(temp) + 1);
        else
            map.put(temp, 1);
    }
    StringBuilder sb = new StringBuilder();
    for (int i = 1; i <= n; i++) {
        long temp = find(i, parentA) * 1L * n + find(i, parentB);
        sb.append(map.get(temp) + " ");
    }
    System.out.println(sb);
}
public void solve(int testNumber, MyReader in, PrintWriter out) {
    int N = in.nextInt();
    List<P> ps = new ArrayList<>();
    for (int i = 0; i < N; i++) {
        long x = in.nextLong();
        long y = in.nextLong();
        P p = new P();
        p.x = x;
        p.y = y;
        p.idx = i;
        ps.add(p);
    }
    Collections.shuffle(ps);
    ps.sort((o1, o2) -> {
        if (Long.compare(o1.x, o2.x) != 0)
            return Long.compare(o1.x, o2.x);
        return Integer.compare(o1.idx, o2.idx);
    });
    List<Q> qs = new ArrayList<>();
    for (int i = 0; i < ps.size() - 1; i++) {
        Q q = new Q();
        q.d = ps.get(i + 1).x - ps.get(i).x;
        q.i1 = ps.get(i + 1).idx;
        q.i2 = ps.get(i).idx;
        qs.add(q);
    }
    Collections.shuffle(ps);
    ps.sort((o1, o2) -> {
        if (Long.compare(o1.y, o2.y) != 0)
            return Long.compare(o1.y, o2.y);
        return Integer.compare(o1.idx, o2.idx);
    });
    for (int i = 0; i < ps.size() - 1; i++) {
        Q q = new Q();
        q.d = ps.get(i + 1).y - ps.get(i).y;
        q.i1 = ps.get(i + 1).idx;
        q.i2 = ps.get(i).idx;
        qs.add(q);
    }
    Collections.shuffle(qs);
    qs.sort((o1, o2) -> {
        if (Long.compare(o1.d, o2.d) != 0)
            return Long.compare(o1.d, o2.d);
        if (Long.compare(o1.i1, o2.i1) != 0)
            return Long.compare(o1.i1, o2.i1);
        return Long.compare(o1.i2, o2.i2);
    });
    UnionFind uf = new UnionFind(N);
    int cnt = 0;
    long tot = 0;
    for (Q q : qs) {
        if (!uf.connected(q.i1, q.i2)) {
            uf.union(q.i1, q.i2);
            cnt++;
            tot += q.d;
        }
        if (cnt == N - 1)
            break;
    }
    out.println(tot);
}
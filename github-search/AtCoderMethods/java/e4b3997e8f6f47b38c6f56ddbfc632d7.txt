void solve() {
    char[] inputCharArray = in.nextToken().toCharArray();
    int inputLen = inputCharArray.length;
    int[] dp = new int[inputLen];
    int[] last = new int[AbcLen];
    int[] lastPos = new int[AbcLen];
    Arrays.fill(lastPos, inputLen);
    int[] resultCharIndex = new int[inputLen];
    int[] resultCharList = new int[inputLen];
    for (int inputIndex = inputLen - 1; inputIndex >= 0; inputIndex--) {
        int inputChar = inputCharArray[inputIndex] - 'a';
        dp[inputIndex] = MaxValue;
        for (int AbcIndex = 0; AbcIndex < AbcLen; AbcIndex++) {
            if (last[AbcIndex] + 1 < dp[inputIndex]) {
                dp[inputIndex] = last[AbcIndex] + 1;
                resultCharIndex[inputIndex] = lastPos[AbcIndex];
                resultCharList[inputIndex] = AbcIndex;
            }
        }
        last[inputChar] = dp[inputIndex];
        lastPos[inputChar] = inputIndex;
    }
    int resultBegin = -1, addCharPos = -1;
    for (int i = 0; i < AbcLen; i++) {
        if (resultBegin == -1 || last[i] < last[resultBegin]) {
            resultBegin = i;
            addCharPos = lastPos[resultBegin];
        }
    }
    StringBuilder sb = new StringBuilder();
    sb.append((char) (resultBegin + 'a'));
    while (addCharPos < inputLen) {
        sb.append((char) (resultCharList[addCharPos] + 'a'));
        addCharPos = resultCharIndex[addCharPos];
    }
    out.println(sb.toString());
}
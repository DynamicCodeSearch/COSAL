private static long[] solve(int n, int[][] abcs, int q, int k, int[][] xys) {
    ArrayList<int[]> edges = new ArrayList<>();
    for (int[] abc : abcs) {
        edges.add(abc);
        edges.add(new int[] { abc[1], abc[0], abc[2] });
    }
    Collections.sort(edges, Comparator.comparingInt(abc -> abc[0]));
    int[] soe = new int[n + 2];
    for (int i = edges.size() - 1; i >= 0; i--) {
        int[] e = edges.get(i);
        soe[e[0]] = i;
    }
    soe[n + 1] = edges.size();
    
    
    long[] dist = new long[n + 1];
    Arrays.fill(dist, -1L);
    PriorityQueue<long[]> pq = new PriorityQueue<>(Comparator.comparingLong(vals -> vals[1]));
    pq.add(new long[] { k, 0 });
    while (!pq.isEmpty()) {
        long[] arg = pq.poll();
        int v = (int) arg[0];
        long c = arg[1];
        if (dist[v] != -1)
            continue;
        dist[v] = c;
        for (int i = soe[v]; i < soe[v + 1]; i++) {
            int[] e = edges.get(i);
            int to = e[1];
            if (dist[to] != -1)
                continue;
            pq.add(new long[] { to, c + e[2] });
        }
    }
    long[] ans = Arrays.stream(xys).mapToLong(xy -> dist[xy[0]] + dist[xy[1]]).toArray();
    return ans;
}
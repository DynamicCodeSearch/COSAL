void run() {
    Scanner sc = new Scanner();
    PrintWriter pw = new PrintWriter(System.out);
    int N = sc.nextInt();
    int L = sc.nextInt();
    double totSalt = 0;
    double totV = 0;
    double[] t = new double[N];
    double[] v = new double[N];
    ArrayDeque<double[]> dq = new ArrayDeque<>();
    for (int i = 0; i < N; ++i) {
        t[i] = sc.nextDouble();
        v[i] = sc.nextDouble();
        double nextSalt = t[i] * v[i];
        double nextV = v[i];
        long sum = 0;
        while (nextV > sum && i != 0) {
            double[] state = dq.pollLast();
            if (nextV - (sum + state[1]) >= 0) {
                totSalt -= state[0];
                totV -= state[1];
                sum += state[1];
            } else {
                double r = (state[1] - (nextV - sum)) / state[1];
                sum += (1 - r) * state[1];
                totSalt -= (1 - r) * state[0];
                totV -= (1 - r) * state[1];
                state[0] *= r;
                state[1] *= r;
                dq.addLast(state);
                break;
            }
        }
        while (!dq.isEmpty()) {
            double[] state = dq.peekFirst();
            if (state[0] / state[1] >= nextSalt / nextV) {
                totSalt -= state[0];
                totV -= state[1];
                nextSalt += state[0];
                nextV += state[1];
                dq.pollFirst();
            } else {
                break;
            }
        }
        dq.addFirst(new double[] { nextSalt, nextV });
        totSalt += nextSalt;
        totV += nextV;
        if (i % 20000 == 0)
            System.gc();
        pw.println(String.format("%.20f", totSalt / totV));
    }
    pw.close();
}
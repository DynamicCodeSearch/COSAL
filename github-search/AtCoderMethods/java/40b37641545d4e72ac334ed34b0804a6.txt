void solve() {
    PriorityQueue<Integer> pq1 = new PriorityQueue<>();
    PriorityQueue<Integer> pq2 = new PriorityQueue<>(Collections.reverseOrder());
    long[] maxLeft = new long[N + 1];
    long[] minRight = new long[N + 1];
    
    for (int i = 0; i < N; i++) {
        maxLeft[0] += nums[i];
        pq1.offer(nums[i]);
        minRight[0] += nums[3 * N - 1 - i];
        pq2.offer(nums[3 * N - 1 - i]);
    }
    
    for (int i = 1; i <= N; i++) {
        pq1.offer(nums[N + i - 1]);
        maxLeft[i] = maxLeft[i - 1] + nums[N + i - 1] - pq1.peek();
        pq1.poll();
        pq2.offer(nums[2 * N - i]);
        minRight[i] = minRight[i - 1] + nums[2 * N - i] - pq2.peek();
        pq2.poll();
    }
    
    for (int i = 0; i <= N; i++) {
        res = Math.max(res, maxLeft[i] - minRight[N - i]);
    }
}
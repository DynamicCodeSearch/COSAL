void solve() {
    Scanner sc = new Scanner(System.in);
    N = sc.nextInt();
    M = sc.nextInt();
    T = sc.nextInt();
    reward = new int[N];
    for (int i = 0; i < N; i++) {
        reward[i] = sc.nextInt();
    }
    ArrayList<Edge>[] edgeGo = new ArrayList[N];
    ArrayList<Edge>[] edgeBack = new ArrayList[N];
    for (int i = 0; i < N; i++) {
        edgeGo[i] = new ArrayList<Edge>();
        edgeBack[i] = new ArrayList<Edge>();
    }
    for (int i = 0; i < M; i++) {
        int a = sc.nextInt() - 1;
        int b = sc.nextInt() - 1;
        int c = sc.nextInt();
        edgeGo[a].add(new Edge(b, c));
        edgeBack[b].add(new Edge(a, c));
    }
    int[] distanceGo = dijkstra(N, edgeGo, 0);
    int[] distanceBack = dijkstra(N, edgeBack, 0);
    long max = 0;
    for (int i = 0; i < N; i++) {
        long cost = (long) distanceGo[i] + (long) distanceBack[i];
        max = Math.max(max, (long) reward[i] * (T - cost));
    }
    System.out.println(max);
}
public static void main(String[] args) {
    int n = ni();
    int ma = ni(), mb = ni();
    int[] a = new int[n];
    int[] b = new int[n];
    int[] c = new int[n];
    nextIntArray(a, b, c);
    
    int[][] dp = new int[500][500];
    for (int i = 0; i < 500; i++) Arrays.fill(dp[i], -1);
    dp[0][0] = 0;
    for (int i = 0; i < n; i++) {
        int[][] ndp = new int[500][500];
        for (int j = 0; j < 500; j++) ndp[j] = Arrays.copyOf(dp[j], 500);
        for (int s = a[i]; s < 500; s++) {
            for (int t = b[i]; t < 500; t++) {
                if (ndp[s][t] == -1 && dp[s - a[i]][t - b[i]] == -1) {
                } else if (ndp[s][t] == -1) {
                    ndp[s][t] = dp[s - a[i]][t - b[i]] + c[i];
                } else if (dp[s - a[i]][t - b[i]] == -1) {
                } else {
                    int cost = dp[s - a[i]][t - b[i]] + c[i];
                    ndp[s][t] = Math.min(cost, dp[s][t]);
                }
            }
        }
        dp = ndp;
    }
    int res = Integer.MAX_VALUE;
    for (int i = 0; i < 500; i++) {
        for (int j = 0; j < 500; j++) {
            
            if (i == 0 && j == 0)
                continue;
            if (ma * j == mb * i && dp[i][j] != -1) {
                res = Math.min(res, dp[i][j]);
            }
        }
    
    }
    pl(res == Integer.MAX_VALUE ? -1 : res);
    flush();
}
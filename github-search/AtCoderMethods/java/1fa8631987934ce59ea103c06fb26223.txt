private void solve(Scanner sc) {
    int N = sc.nextInt();
    int M = sc.nextInt();
    int T = sc.nextInt();
    int[] A = new int[N];
    List<List<Path>> list1 = new ArrayList<>();
    List<List<Path>> list2 = new ArrayList<>();
    for (int i = 0; i < N; ++i) {
        A[i] = sc.nextInt();
        list1.add(new ArrayList<>());
        list2.add(new ArrayList<>());
    }
    for (int i = 0; i < M; ++i) {
        int a = sc.nextInt() - 1;
        int b = sc.nextInt() - 1;
        long c = sc.nextInt();
        list1.get(a).add(new Path(a, b, c));
        list2.get(b).add(new Path(b, a, c));
    }
    
    long[] dist1 = dist(N, list1);
    long[] dist2 = dist(N, list2);
    long c1 = 0;
    for (int i = 0; i < N; ++i) {
        c1 = Math.max(c1, ((T - (dist1[i] + dist2[i])) * A[i]));
    }
    long c2 = A[0] * T;
    _out.println(Math.max(c1, c2));
}
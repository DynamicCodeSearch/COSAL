public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int m = sc.nextInt();
    ArrayList<edge>[] v = new ArrayList[n];
    dis = new int[n];
    flag = new boolean[n];
    Arrays.fill(dis, Integer.MAX_VALUE);
    for (int i = 0; i < n; i++) {
        v[i] = new ArrayList<edge>();
    }
    for (int i = 0; i < m; i++) {
        int c = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();
        v[a].add(new edge(b, c));
        v[b].add(new edge(a, c));
    }
    PriorityQueue<state> pq = new PriorityQueue<>(new Comparator<state>() {

        @Override
        public int compare(state o1, state o2) {
            if (o1.cb == o2.cb) {
                return o1.time - o2.time;
            } else {
                return o1.cb - o2.cb;
            }
        }
    });
    pq.add(new state(0, 0, 0));
    while (!pq.isEmpty()) {
        state p = pq.poll();
        if (p.time > dis[p.p])
            continue;
        dis[p.p] = p.time;
        for (edge e : v[p.p]) {
            if (e.type == 1) {
                if (p.time + p.cb + 1 < dis[e.p]) {
                    pq.add(new state(e.p, p.cb + 1, p.time + p.cb + 1));
                }
            } else {
                if (p.time + 1 < dis[e.p]) {
                    pq.add(new state(e.p, p.cb, p.time + 1));
                }
            }
        }
    }
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < n; i++) {
        sb.append(dis[i] + "\n");
    }
    System.out.println(sb.toString());
}
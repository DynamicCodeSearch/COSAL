static void solve() {
    int n = ni();
    int[] a = na(n);
    int[][] ws = new int[n][];
    int lsum = 0;
    for (int i = 0; i < n; i++) {
        int L = ni();
        ws[i] = na(L);
        lsum += L;
    }
    int[][] es = new int[lsum][];
    int p = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < ws[i].length; j++) {
            es[p++] = new int[] { a[i], ws[i][j], j == 0 ? 0 : ws[i][j - 1] };
        }
    }
    Arrays.sort(es, new Comparator<int[]>() {

        public int compare(int[] a, int[] b) {
            return a[1] - b[1];
        }
    });
    long max = 0;
    StarrySkyTree sst = new StarrySkyTree(500005);
    int q = 0;
    for (int i = 1; i <= 500001; i++) {
        while (q < lsum && es[q][1] <= 2 * i + 1) {
            sst.add(es[q][2] / 2, i, -es[q][0]);
            q++;
        }
        long v = sst.min(0, i);
        max = Math.max(max, -v);
        sst.add(i, i + 1, v);
    }
    out.println(max);
}
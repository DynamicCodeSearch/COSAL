static void solve() {
    int n = ni(), m = ni();
    int[][] cond = new int[m][];
    for (int i = 0; i < m; i++) {
        cond[i] = new int[] { ni() - 1, ni() - 1, ni() };
    }
    Arrays.sort(cond, new Comparator<int[]>() {

        public int compare(int[] a, int[] b) {
            return a[1] - b[1];
        }
    });
    int mod = 1000000007;
    
    long[][] dp = new long[n + 1][n + 1];
    dp[0][0] = 1;
    int p = 0;
    for (int i = 0; i < n; i++) {
        long[][] ndp = new long[n + 1][n + 1];
        int[] maxs = new int[4];
        int[] mins = new int[4];
        Arrays.fill(maxs, -1);
        Arrays.fill(mins, 9999);
        while (p < m && cond[p][1] <= i) {
            maxs[cond[p][2]] = Math.max(maxs[cond[p][2]], cond[p][1] - cond[p][0] + 1);
            mins[cond[p][2]] = Math.min(mins[cond[p][2]], cond[p][1] - cond[p][0] + 1);
            p++;
        }
        for (int j = 0; j <= n; j++) {
            for (int k = j; k <= n; k++) {
                if (dp[j][k] == 0)
                    continue;
                
                {
                    int nj = j + 1, nk = k + 1;
                    if (maxs[1] == -1 || maxs[1] <= nj) {
                        if (maxs[2] == -1 || nj + 1 <= mins[2] && maxs[2] <= nk) {
                            if (maxs[3] == -1 || nk + 1 <= mins[3]) {
                                ndp[nj][nk] += dp[j][k];
                                if (ndp[nj][nk] >= mod)
                                    ndp[nj][nk] -= mod;
                            }
                        }
                    }
                }
                
                {
                    int nj = 1, nk = k + 1;
                    if (maxs[1] == -1 || maxs[1] <= nj) {
                        if (maxs[2] == -1 || nj + 1 <= mins[2] && maxs[2] <= nk) {
                            if (maxs[3] == -1 || nk + 1 <= mins[3]) {
                                ndp[nj][nk] += dp[j][k];
                                if (ndp[nj][nk] >= mod)
                                    ndp[nj][nk] -= mod;
                            }
                        }
                    }
                }
                
                {
                    int nj = 1, nk = j + 1;
                    if (maxs[1] == -1 || maxs[1] <= nj) {
                        if (maxs[2] == -1 || nj + 1 <= mins[2] && maxs[2] <= nk) {
                            if (maxs[3] == -1 || nk + 1 <= mins[3]) {
                                ndp[nj][nk] += dp[j][k];
                                if (ndp[nj][nk] >= mod)
                                    ndp[nj][nk] -= mod;
                            }
                        }
                    }
                }
            }
        }
        dp = ndp;
    }
    long ret = 0;
    for (int j = 0; j <= n; j++) {
        for (int k = j; k <= n; k++) {
            ret += dp[j][k];
        }
    }
    out.println(ret % mod);
}
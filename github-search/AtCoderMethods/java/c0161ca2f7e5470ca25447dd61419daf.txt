public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int H = sc.nextInt();
    int W = sc.nextInt();
    int T = sc.nextInt();
    int start = 0;
    int end = 0;
    char[] board = new char[H * W];
    for (int i = 0; i < H; i++) {
        String s = sc.next();
        for (int j = 0; j < W; j++) {
            board[i * W + j] = s.charAt(j);
            if (board[i * W + j] == 'S')
                start = i * W + j;
            if (board[i * W + j] == 'G')
                end = i * W + j;
        }
    }
    int l = 1;
    int r = T;
    int ans = 0;
    while (l < r) {
        int med = (l + r) / 2;
        long[][] dp = new long[H * W][H * W];
        for (int i = 0; i < H * W; i++) {
            for (int j = 0; j < H * W; j++) {
                if (i % W == 0) {
                    if (i == 0) {
                        if (board[i + 1] == '#') {
                            dp[i][i + 1] = med;
                        } else {
                            dp[i][i + 1] = 1;
                        }
                        if (board[i + W] == '#') {
                            dp[i][i + W] = med;
                        } else {
                            dp[i][i + W] = 1;
                        }
                    } else if (i == (H - 1) * W) {
                        if (board[i + 1] == '#') {
                            dp[i][i + 1] = med;
                        } else {
                            dp[i][i + 1] = 1;
                        }
                        if (board[i - W] == '#') {
                            dp[i][i - W] = med;
                        } else {
                            dp[i][i - W] = 1;
                        }
                    } else {
                        if (board[i + 1] == '#') {
                            dp[i][i + 1] = med;
                        } else {
                            dp[i][i + 1] = 1;
                        }
                        if (board[i - W] == '#') {
                            dp[i][i - W] = med;
                        } else {
                            dp[i][i - W] = 1;
                        }
                        if (board[i + W] == '#') {
                            dp[i][i + W] = med;
                        } else {
                            dp[i][i + W] = 1;
                        }
                    }
                } else if (i % W == W - 1) {
                    if (i == W - 1) {
                        if (board[i - 1] == '#') {
                            dp[i][i - 1] = med;
                        } else {
                            dp[i][i - 1] = 1;
                        }
                        if (board[i + W] == '#') {
                            dp[i][i + W] = med;
                        } else {
                            dp[i][i + W] = 1;
                        }
                    } else if (i == H * W - 1) {
                        if (board[i - 1] == '#') {
                            dp[i][i - 1] = med;
                        } else {
                            dp[i][i - 1] = 1;
                        }
                        if (board[i - W] == '#') {
                            dp[i][i - W] = med;
                        } else {
                            dp[i][i - W] = 1;
                        }
                    } else {
                        if (board[i - 1] == '#') {
                            dp[i][i - 1] = med;
                        } else {
                            dp[i][i - 1] = 1;
                        }
                        if (board[i - W] == '#') {
                            dp[i][i - W] = med;
                        } else {
                            dp[i][i - W] = 1;
                        }
                        if (board[i + W] == '#') {
                            dp[i][i + W] = med;
                        } else {
                            dp[i][i + W] = 1;
                        }
                    }
                } else {
                    if (i > 0 && i < W) {
                        if (board[i - 1] == '#') {
                            dp[i][i - 1] = med;
                        } else {
                            dp[i][i - 1] = 1;
                        }
                        if (board[i + 1] == '#') {
                            dp[i][i + 1] = med;
                        } else {
                            dp[i][i + 1] = 1;
                        }
                        if (board[i + W] == '#') {
                            dp[i][i + W] = med;
                        } else {
                            dp[i][i + W] = 1;
                        }
                    } else if (i > (H - 1) * W && i < H * W - 1) {
                        if (board[i - 1] == '#') {
                            dp[i][i - 1] = med;
                        } else {
                            dp[i][i - 1] = 1;
                        }
                        if (board[i + 1] == '#') {
                            dp[i][i + 1] = med;
                        } else {
                            dp[i][i + 1] = 1;
                        }
                        if (board[i - W] == '#') {
                            dp[i][i - W] = med;
                        } else {
                            dp[i][i - W] = 1;
                        }
                    } else {
                        if (board[i - 1] == '#') {
                            dp[i][i - 1] = med;
                        } else {
                            dp[i][i - 1] = 1;
                        }
                        if (board[i + 1] == '#') {
                            dp[i][i + 1] = med;
                        } else {
                            dp[i][i + 1] = 1;
                        }
                        if (board[i - W] == '#') {
                            dp[i][i - W] = med;
                        } else {
                            dp[i][i - W] = 1;
                        }
                        if (board[i + W] == '#') {
                            dp[i][i + W] = med;
                        } else {
                            dp[i][i + W] = 1;
                        }
                    }
                }
            }
        }
        for (int i = 0; i < H * W; i++) {
            for (int j = 0; j < H * W; j++) {
                if (i != j && dp[i][j] == 0)
                    dp[i][j] = (long) Math.pow(10, 12);
            }
        }
        
        for (int k = 1; k <= H * W; k++) {
            for (int i = 0; i < H * W; i++) {
                for (int j = 0; j < H * W; j++) {
                    dp[i][j] = Math.min(dp[i][j], dp[i][k - 1] + dp[k - 1][j]);
                }
            }
        }
        if (dp[start][end] <= T) {
            ans = med;
            l = med + 1;
        } else {
            r = med;
        }
    }
    System.out.println(ans);
}
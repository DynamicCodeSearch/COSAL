static void solve() {
    int mod = 998244353;
    p2[0] = 1;
    ip2[0] = 1;
    long i2 = invl(2, mod);
    for (int i = 1; i < 1000; i++) {
        p2[i] = p2[i - 1] * 2 % mod;
        ip2[i] = ip2[i - 1] * i2 % mod;
    }
    int n = ni();
    long[][] co = new long[n][];
    for (int i = 0; i < n; i++) {
        co[i] = new long[] { ni(), ni() };
    }
    Arrays.sort(co, new Comparator<long[]>() {

        public int compare(long[] a, long[] b) {
            if (a[0] != b[0])
                return Long.compare(a[0], b[0]);
            return Long.compare(a[1], b[1]);
        }
    });
    int ct = 0;
    long[][] nums = new long[n][n];
    long[][] sums = new long[n][n];
    {
        int[][] under = new int[n][n];
        
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (co[i][0] < co[j][0]) {
                    for (int k = 0; k < j; k++) {
                        if (co[i][0] <= co[k][0] && co[k][0] < co[j][0] && ccw(co[i], co[j], co[k]) > 0) {
                            under[i][j]++;
                        }
                    }
                    under[i][j]++;
                } else {
                    for (int k = i + 1; k < j; k++) {
                        if (co[i][0] == co[k][0] && co[k][1] < co[j][1]) {
                            under[i][j]--;
                        }
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            long[][] num = new long[n][n];
            long[][] sum = new long[n][n];
            for (int j = i + 1; j < n; j++) {
                num[j][i] = 1;
                sum[j][i] = p(-under[i][j]);
                nums[i][j] += num[j][i];
                sums[i][j] += sum[j][i];
                for (int k = i + 1; k < j; k++) {
                    for (int l = i; l < k; l++) {
                        
                        if (ccw(co[l], co[k], co[j]) < 0) {
                            num[j][k] += num[k][l];
                            sum[j][k] += sum[k][l];
                        }
                    }
                    long q = p(-under[k][j]);
                    num[j][k] = num[j][k] % mod;
                    sum[j][k] = sum[j][k] % mod * q % mod;
                    nums[i][j] += num[j][k];
                    sums[i][j] += sum[j][k];
                }
                nums[i][j] %= mod;
                sums[i][j] %= mod;
            }
        }
    }
    {
        int[][] under = new int[n][n];
        
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (co[i][0] < co[j][0]) {
                    for (int k = 0; k < j; k++) {
                        if (co[i][0] <= co[k][0] && co[k][0] < co[j][0] && ccw(co[i], co[j], co[k]) >= 0) {
                            under[i][j]++;
                        }
                    }
                    under[i][j]--;
                } else {
                    
                    
                    
                    
                    
                    under[i][j]--;
                }
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            long[][] num = new long[n][n];
            long[][] sum = new long[n][n];
            for (int j = i - 1; j >= 0; j--) {
                num[j][i] = 1;
                sum[j][i] = p(under[j][i] + 1);
                nums[i][j] += num[j][i];
                sums[i][j] += sum[j][i];
                for (int k = i - 1; k > j; k--) {
                    for (int l = i; l > k; l--) {
                        
                        if (ccw(co[l], co[k], co[j]) < 0) {
                            num[j][k] += num[k][l];
                            sum[j][k] += sum[k][l];
                        }
                    }
                    long q = p(under[j][k]);
                    num[j][k] = num[j][k] % mod;
                    sum[j][k] = sum[j][k] % mod * q % mod;
                    nums[i][j] += num[j][k];
                    sums[i][j] += sum[j][k];
                }
                nums[i][j] %= mod;
                sums[i][j] %= mod;
            }
        }
    }
    
    
    
    
    
    
    
    
    long ret = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            ret += sums[i][j] * sums[j][i];
            ret %= mod;
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            int on = 0;
            for (int k = i + 1; k < j; k++) {
                if (ccw(co[i], co[j], co[k]) == 0) {
                    on++;
                }
            }
            ret -= p2[on];
        }
    }
    ret %= mod;
    if (ret < 0)
        ret += mod;
    out.println(ret);
}
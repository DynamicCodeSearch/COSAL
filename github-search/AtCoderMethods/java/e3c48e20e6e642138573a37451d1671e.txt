private static void solve(FastScanner cin, PrintWriter cout) {
    int n = cin.nextInt();
    int[][] xs = new int[n][];
    int[][] ys = new int[n][];
    for (int i = 0; i < n; i++) {
        xs[i] = new int[] { cin.nextInt(), i };
        ys[i] = new int[] { cin.nextInt(), i };
    }
    PriorityQueue<int[]> edges = new PriorityQueue<>(Comparator.comparingInt((edge) -> edge[0]));
    Arrays.sort(xs, Comparator.comparingInt((vi) -> vi[0]));
    for (int i = 1; i < n; i++) edges.add(new int[] { Math.abs(xs[i - 1][0] - xs[i][0]), xs[i - 1][1], xs[i][1] });
    xs = null;
    Arrays.sort(ys, Comparator.comparingInt((vi) -> vi[0]));
    for (int i = 1; i < n; i++) edges.add(new int[] { Math.abs(ys[i - 1][0] - ys[i][0]), ys[i - 1][1], ys[i][1] });
    ys = null;
    long ans = 0;
    rt = new int[n];
    Arrays.fill(rt, -1);
    while (!edges.isEmpty()) {
        int[] edge = edges.remove();
        if (!unite(edge[1], edge[2]))
            continue;
        ans += edge[0];
    }
    cout.println(ans);
}
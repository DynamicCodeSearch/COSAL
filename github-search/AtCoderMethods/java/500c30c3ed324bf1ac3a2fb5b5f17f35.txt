public void solve(int testNumber, InputReader in, PrintWriter out) {
    int N = in.nextInt();
    adj = (List<Integer>[]) new LinkedList[N];
    int MAX = 1000000 * 2 + 1;
    priceToVertex = (List<Integer>[]) new LinkedList[MAX];
    for (int i = 0; i < MAX; i++) priceToVertex[i] = new LinkedList<>();
    for (int i = 0; i < N; i++) adj[i] = new LinkedList<>();
    for (int i = 0; i < N - 1; i++) {
        int v = in.nextInt() - 1;
        int w = in.nextInt() - 1;
        adj[v].add(w);
        adj[w].add(v);
    }
    val = new int[N];
    Arrays.fill(val, -1);
    long K = in.nextLong();
    int min = Integer.MAX_VALUE;
    for (int i = 0; i < K; i++) {
        int vertex = in.nextInt() - 1;
        int price = in.nextInt();
        if (min > price) {
            min = price;
        }
        val[vertex] = price;
        priceToVertex[price].add(vertex);
    }
    for (int p = 0; p < MAX; p++) {
        for (int v : priceToVertex[p]) {
            for (int w : adj[v]) {
                if (val[w] == -1) {
                    val[w] = val[v] + 1;
                    priceToVertex[p + 1].add(w);
                } else if (Math.abs(val[w] - val[v]) != 1) {
                    out.println("No");
                    return;
                }
            }
        }
    }
    out.println("Yes");
    for (int i = 0; i < N; i++) {
        out.println(val[i]);
    }
}
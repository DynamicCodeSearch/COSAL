private static long solve(int n, int[][] xys) {
    
    ArrayList<int[]> edges = new ArrayList<>();
    ArrayList<int[]> ordered = new ArrayList<>();
    ordered.addAll(Arrays.asList(xys));
    for (int j = 0; j < 2; j++) {
        int tmp = j;
        Collections.sort(ordered, Comparator.comparingInt((xy) -> xy[tmp]));
        for (int i = 1; i < n; i++) {
            int fr = ordered.get(i - 1)[2];
            int to = ordered.get(i)[2];
            int[] frxy = xys[fr];
            int[] toxy = xys[to];
            int w = Math.abs(frxy[tmp] - toxy[tmp]);
            
            
            edges.add(new int[] { w, fr, to });
        }
    }
    
    
    
    
    long ans = 0;
    Collections.sort(edges, Comparator.comparingInt((e) -> e[0]));
    int[] rt = new int[n];
    Arrays.fill(rt, -1);
    IntUnaryOperator root = new IntUnaryOperator() {

        @Override
        public int applyAsInt(int operand) {
            if (rt[operand] < 0)
                return operand;
            return rt[operand] = this.applyAsInt(rt[operand]);
        }
    };
    Predicate<int[]> unite = new Predicate<int[]>() {

        @Override
        public boolean test(int[] t) {
            int a = root.applyAsInt(t[0]);
            int b = root.applyAsInt(t[1]);
            if (a == b)
                return false;
            if (rt[a] > rt[b]) {
                int tmp = a;
                a = b;
                b = tmp;
            }
            rt[a] += rt[b];
            rt[b] = a;
            return true;
        }
    };
    for (int[] e : edges) {
        int w = e[0];
        int fr = e[1];
        int to = e[2];
        if (!unite.test(new int[] { fr, to }))
            continue;
        ans += w;
    
    
    }
    return ans;
}
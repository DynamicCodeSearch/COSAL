int gen() {
    final int LEAF = -4;
    final int LINE = -1;
    final int NONE = -2;
    final int INVALID = -3;
    int[][] mp2 = new int[2 * h + 1][2 * w + 1];
    int[][] mp3 = new int[2 * h + 1][2 * w + 1];
    for (int[] m : mp2) Arrays.fill(m, NONE);
    for (int y = 0; y < h; y++) {
        for (int x = 0; x < w; x++) if (mp[y][x] != '.') {
            mp2[2 * y + 1][2 * x + 1] = LEAF;
            mp3[2 * y + 1][2 * x + 1] = LEAF;
        }
    }
    for (int y = 0; y < mp2.length; y++) {
        for (int x = 0; x < mp2[y].length; x++) if (mp2[y][x] == LEAF) {
            for (int x2 = x + 1; x2 < mp2[y].length; x2++) if (mp2[y][x2] == LEAF) {
                for (int x3 = x + 1; x3 < x2; x3++) mp2[y][x3] = LINE;
                break;
            }
            for (int y2 = y + 1; y2 < mp2.length; y2++) if (mp2[y2][x] == LEAF) {
                for (int y3 = y + 1; y3 < y2; y3++) mp2[y3][x] = LINE;
                break;
            }
        }
    }
    for (int y = 0; y < mp2.length; y++) {
        for (int x = 0; x < mp2[y].length; x++) if (mp2[y][x] == LEAF) {
            mp2[y][x] = LINE;
        }
    }
    mp2[0][0] = mp2[mp2.length - 1][mp2[0].length - 1] = INVALID;
    final Comparator<int[]> cmp = new Comparator<int[]>() {

        @Override
        public int compare(int[] arg0, int[] arg1) {
            if (arg0[0] != arg1[0])
                return arg0[0] - arg1[0];
            return arg0[1] - arg1[1];
        }
    };
    List<TreeSet<int[]>> g = new ArrayList<>();
    int S = 0, T = 1;
    int v = 0;
    int[] dxy = new int[] { 1, 0, -1, 0, 1 };
    int[] q = new int[w * h * 10 + 100];
    for (int y = 0; y < mp2.length; y++) {
        for (int x = 0; x < mp2[y].length; x++) if (mp2[y][x] == NONE) {
            int s = 0, t = 0;
            q[t++] = y << 16 | x;
            mp2[y][x] = v;
            while (s != t) {
                int xx = q[s] & 0xFFFF;
                int yy = q[s] >> 16;
                s++;
                for (int d = 0; d < 4; d++) {
                    int x2 = xx + dxy[d];
                    int y2 = yy + dxy[d + 1];
                    if (x2 < 0 || x2 >= mp2[y].length || y2 < 0 || y2 >= mp2.length)
                        continue;
                    if (mp2[y2][x2] != NONE)
                        continue;
                    mp2[y2][x2] = v;
                    q[t++] = y2 << 16 | x2;
                }
            
            }
            v++;
            g.add(new TreeSet<>(cmp));
        }
    }
    if (v == 1)
        return 0;
    for (int y = 0; y < mp2.length; y++) {
        dump(mp2[y]);
    }
    for (int y = 0; y < mp2.length; y++) {
        for (int x = 0; x < mp2[y].length; x++) if (mp2[y][x] == LINE) {
            for (int d = 0; d < 4; d++) {
                int x1 = x - dxy[d];
                int y1 = y - dxy[d + 1];
                int x2 = x + dxy[d];
                int y2 = y + dxy[d + 1];
                if (mp2[y2][x2] == LINE || mp2[y1][x1] == LINE)
                    continue;
                if (mp2[y2][x2] == mp2[y1][x1])
                    continue;
                int w1 = 0, w2 = 0;
                for (int x3 = x, y3 = y; ; x3 += dxy[d + 1], y3 += dxy[d]) {
                    if (x3 < 0 || x3 >= mp2[y].length || y3 < 0 || y3 >= mp2.length)
                        break;
                    if (mp3[y3][x3] == LEAF)
                        w1++;
                    if (x3 == 1 && y3 == 1 || x3 == mp2[0].length - 2 || y3 == mp2.length)
                        w1 = 1 << 29;
                }
                for (int x3 = x, y3 = y; ; x3 -= dxy[d + 1], y3 -= dxy[d]) {
                    if (x3 < 0 || x3 >= mp2[y].length || y3 < 0 || y3 >= mp2.length)
                        break;
                    if (mp3[y3][x3] == LEAF)
                        w2++;
                    if (x3 == 1 && y3 == 1 || x3 == mp2[0].length - 2 || y3 == mp2.length)
                        w2 = 1 << 29;
                }
                int v1 = mp2[y2][x2];
                int v2 = mp2[y1][x1];
                g.get(v1).add(new int[] { v2, Math.min(w1, w2) });
                g.get(v2).add(new int[] { v1, Math.min(w1, w2) });
            
            }
        }
    }
    int[] dist = new int[v];
    Arrays.fill(dist, Integer.MAX_VALUE);
    dist[S] = 0;
    PriorityQueue<Long> que = new PriorityQueue<>();
    que.add(0L << 32 | S);
    while (!que.isEmpty()) {
        long val = que.poll();
        int cur = (int) (val & 0xFFFFFFFFL);
        if (dist[cur] != val >>> 32)
            continue;
        for (int[] e : g.get(cur)) if (dist[e[0]] > dist[cur] + e[1]) {
            dist[e[0]] = dist[cur] + e[1];
            que.add((long) dist[e[0]] << 32 | e[0]);
        }
    }
    return dist[T];
}
Pair<Treap<T>, Treap<T>> splitAt(final int i) {
    
    if (isEmpty()) {
        return new Pair<>(new Treap<T>(), new Treap<T>());
    } else if (i <= left.size) {
        final Pair<Treap<T>, Treap<T>> pair = left.splitAt(i);
        left = pair.second;
        return new Pair<>(pair.first, this.update());
    } else {
        final Pair<Treap<T>, Treap<T>> pair = right.splitAt(i - left.size - 1);
        right = pair.first;
        return new Pair<>(this.update(), pair.second);
    }
}
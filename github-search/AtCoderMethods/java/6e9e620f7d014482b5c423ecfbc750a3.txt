public static void main(String[] args) {
    IO io = new IO();
    int n = io.nextInt();
    int m = io.nextInt();
    int[] a = new int[m * 2];
    int[] b = new int[m * 2];
    int[] c = new int[m * 2];
    for (int i = 0; i < m; i++) {
        int aa = io.nextInt() - 1;
        int bb = io.nextInt() - 1;
        int cc = io.nextInt() - 1;
        a[i] = aa;
        b[i] = bb;
        c[i] = cc;
        a[m + i] = bb;
        b[m + i] = aa;
        c[m + i] = cc;
    }
    int m2 = m * 2;
    
    HashMap<Long, Integer> zip = new HashMap<>();
    int[] unzipPos = new int[m2];
    int k = 0;
    for (int i = 0; i < m2; i++) {
        long key = b[i] * BIG + c[i];
        Integer x = zip.get(key);
        if (x == null) {
            unzipPos[k] = b[i];
            zip.put(key, k);
            k++;
        }
    }
    Graph g = new Graph(n + k);
    for (int i = 0; i < k; i++) {
        g.addEdge(unzipPos[i], n + i, 1);
        g.addEdge(n + i, unzipPos[i], 0);
    }
    for (int i = 0; i < m2; i++) {
        int k1 = zip.get(a[i] * BIG + c[i]);
        int k2 = zip.get(b[i] * BIG + c[i]);
        g.addEdge(n + k1, n + k2, 0);
    }
    int[] dist = g.minDistQueue(0);
    System.out.println(dist[n - 1] == Graph.INF ? -1 : dist[n - 1]);
}
public void solve(int testNumber, InputReader in, OutputWriter out) {
    r = in.nextInt();
    c = in.nextInt();
    n = in.nextInt();
    ArrayList<TaskE.Point> p = new ArrayList<>();
    for (int i = 0; i < n; i++) {
        int x1 = in.nextInt(), y1 = in.nextInt(), x2 = in.nextInt(), y2 = in.nextInt();
        TaskE.Point p1 = new TaskE.Point(x1, y1, i), p2 = new TaskE.Point(x2, y2, i);
        if (p1.side() != -1 && p2.side() != -1) {
            p.add(p1);
            p.add(p2);
        }
    }
    Collections.sort(p);
    int[] partner = new int[n];
    Arrays.fill(partner, -1);
    for (int i = p.size() - 1; i >= 0; i--) {
        if (partner[p.get(i).idx] == -1) {
            partner[p.get(i).idx] = i;
        }
    }
    BIT bb = new BIT(n + n);
    for (int i = 0; i < p.size(); i++) {
        int k = partner[p.get(i).idx];
        if (k != -1) {
            if (bb.query(k) != bb.query(i)) {
                out.println("NO");
                return;
            }
            bb.update(k, 1);
        }
    }
    out.println("YES");
}
private static String solve(int n, String s) {
    int[] dep = new int[s.length() + 1];
    int d = 0;
    dep[0] = d;
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        if (c == '(') {
            d += 1;
        } else if (c == ')') {
            d -= 1;
        } else {
            throw new IllegalArgumentException();
        }
        dep[i + 1] = d;
    }
    int mind = Arrays.stream(dep).min().getAsInt();
    List<Integer> modDep = Arrays.stream(dep).map(x -> x - mind).boxed().collect(Collectors.toList());
    modDep.add(0, 0);
    modDep.add(0);
    StringBuilder ans = new StringBuilder();
    for (int i = 1; i < modDep.size(); i++) {
        int prev = modDep.get(i - 1);
        int cur = modDep.get(i);
        for (int j = 0; j < cur - prev; j++) ans.append('(');
        for (int j = 0; j < prev - cur; j++) ans.append(')');
    }
    return ans.toString();
}
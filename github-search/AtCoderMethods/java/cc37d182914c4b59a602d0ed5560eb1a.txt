private void solve(FastScanner in, PrintWriter out) {
    int N = in.nextInt();
    long[] A = new long[N];
    for (int i = 0; i < N; i++) {
        A[i] = in.nextInt();
    }
    long[] ans = new long[N];
    PriorityQueue<long[]> queue = new PriorityQueue<>((o1, o2) -> {
        
        if (o1[0] != o2[0]) {
            if (o1[0] - o2[0] > 0) {
                return -1;
            } else if (o1[0] - o2[0] < 0) {
                return 1;
            }
            return 0;
        }
        
        if (o1[1] - o2[1] > 0) {
            return 1;
        } else if (o1[1] - o2[1] < 0) {
            return -1;
        }
        return 0;
    });
    for (int i = 0; i < N; i++) {
        queue.add(new long[] { A[i], i, 1 });
    }
    while (queue.size() >= 2) {
        long[] first = queue.poll();
        long[] second = queue.poll();
        int f = (int) first[1];
        int s = (int) second[1];
        long x = first[0] - second[0];
        ans[f] += x * first[2];
        second[2] += first[2];
        if (f < s) {
            second[1] = f;
        }
        queue.add(second);
    }
    long[] last = queue.poll();
    ans[(int) last[1]] += last[0] * last[2];
    for (int i = 0; i < N; i++) {
        out.println(ans[i]);
    }
}
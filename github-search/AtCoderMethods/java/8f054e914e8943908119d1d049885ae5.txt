static void solve() {
    int n = ni(), a = ni() - 1, b = ni() - 1;
    int[][] co = new int[n][];
    for (int i = 0; i < n; i++) {
        int x = ni(), y = ni();
        co[i] = new int[] { x + y, x - y + 1000000001 };
    }
    int[][] xyco = new int[n][];
    for (int i = 0; i < n; i++) {
        xyco[i] = new int[] { co[i][0], co[i][1], i };
    }
    int[][] yxco = new int[n][];
    for (int i = 0; i < n; i++) {
        yxco[i] = new int[] { co[i][1], co[i][0], i };
    }
    Arrays.sort(xyco, new Comparator<int[]>() {

        public int compare(int[] a, int[] b) {
            if (a[0] != b[0])
                return a[0] - b[0];
            return a[1] - b[1];
        }
    });
    Arrays.sort(yxco, new Comparator<int[]>() {

        public int compare(int[] a, int[] b) {
            if (a[0] != b[0])
                return a[0] - b[0];
            return a[1] - b[1];
        }
    });
    long[] xycode = new long[n];
    long[] yxcode = new long[n];
    for (int i = 0; i < n; i++) xycode[i] = (long) xyco[i][0] << 32 | xyco[i][1];
    for (int i = 0; i < n; i++) yxcode[i] = (long) yxco[i][0] << 32 | yxco[i][1];
    int[] ixy = new int[n];
    for (int i = 0; i < n; i++) ixy[xyco[i][2]] = i;
    int[] iyx = new int[n];
    for (int i = 0; i < n; i++) iyx[yxco[i][2]] = i;
    int d = Math.max(Math.abs(co[a][0] - co[b][0]), Math.abs(co[a][1] - co[b][1]));
    boolean[] reach = new boolean[n];
    Queue<Integer> q = new ArrayDeque<>();
    q.add(a);
    reach[a] = true;
    int I = 2000000000;
    LST xy = new LST(n);
    LST yx = new LST(n);
    xy.setRange(n);
    yx.setRange(n);
    xy.unset(ixy[a]);
    yx.unset(iyx[a]);
    while (!q.isEmpty()) {
        int cur = q.poll();
        for (int del = -d; del <= d; del += 2 * d) {
            int x = co[cur][0] + del;
            if (x >= 0 && x <= I) {
                int yinf = Math.max(0, co[cur][1] - d);
                int ysup = Math.min(co[cur][1] + d, I);
                int from = Arrays.binarySearch(xycode, (long) x << 32 | yinf);
                if (from < 0)
                    from = -from - 1;
                int to = Arrays.binarySearch(xycode, (long) x << 32 | ysup);
                if (to < 0)
                    to = -to - 2;
                while (true) {
                    int nex = xy.next(from);
                    if (nex > to || nex == -1)
                        break;
                    int nid = xyco[nex][2];
                    reach[nid] = true;
                    q.add(nid);
                    xy.unset(ixy[nid]);
                    yx.unset(iyx[nid]);
                }
            }
        }
        for (int del = -d; del <= d; del += 2 * d) {
            int y = co[cur][1] + del;
            if (y >= 0 && y <= I) {
                int xinf = Math.max(0, co[cur][0] - d);
                int xsup = Math.min(co[cur][0] + d, I);
                int from = Arrays.binarySearch(yxcode, (long) y << 32 | xinf);
                if (from < 0)
                    from = -from - 1;
                int to = Arrays.binarySearch(yxcode, (long) y << 32 | xsup);
                if (to < 0)
                    to = -to - 2;
                while (true) {
                    int nex = yx.next(from);
                    if (nex > to || nex == -1)
                        break;
                    int nid = yxco[nex][2];
                    reach[nid] = true;
                    q.add(nid);
                    xy.unset(ixy[nid]);
                    yx.unset(iyx[nid]);
                }
            }
        }
    }
    long ret = 0;
    for (int i = 0; i < n; i++) {
        if (reach[i]) {
            int cur = i;
            for (int del = -d; del <= d; del += 2 * d) {
                int x = co[cur][0] + del;
                if (x >= 0 && x <= I) {
                    int yinf = Math.max(0, co[cur][1] - d);
                    int ysup = Math.min(co[cur][1] + d, I);
                    int from = Arrays.binarySearch(xycode, (long) x << 32 | yinf);
                    if (from < 0)
                        from = -from - 1;
                    int to = Arrays.binarySearch(xycode, (long) x << 32 | ysup);
                    if (to < 0)
                        to = -to - 2;
                    ret += Math.max(0, to - from + 1);
                }
            }
            for (int del = -d; del <= d; del += 2 * d) {
                int y = co[cur][1] + del;
                if (y >= 0 && y <= I) {
                    int xinf = Math.max(0, co[cur][0] - d);
                    int xsup = Math.min(co[cur][0] + d, I);
                    int from = Arrays.binarySearch(yxcode, (long) y << 32 | xinf + 1);
                    if (from < 0)
                        from = -from - 1;
                    int to = Arrays.binarySearch(yxcode, (long) y << 32 | xsup - 1);
                    if (to < 0)
                        to = -to - 2;
                    ret += Math.max(0, to - from + 1);
                }
            }
        }
    }
    out.println(ret / 2);
}
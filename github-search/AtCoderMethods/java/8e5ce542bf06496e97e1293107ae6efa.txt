public static void main(String[] args) {
    int n = sc.nextInt();
    int[] a = new int[3 * n];
    for (int i = 0; i < 3 * n; i++) {
        a[i] = sc.nextInt();
    }
    PriorityQueue<Integer> que = new PriorityQueue<>();
    long sum = 0;
    for (int i = 0; i < n; i++) {
        que.add(a[i]);
        sum += a[i];
    }
    long[] r = new long[3 * n];
    r[n] = sum;
    for (int i = n; i < 2 * n; i++) {
        que.add(a[i]);
        sum += a[i] - que.poll();
        r[i + 1] = sum;
    }
    que = new PriorityQueue<>((x, y) -> y - x);
    sum = 0;
    for (int i = 3 * n - 1; i >= 2 * n; i--) {
        que.add(a[i]);
        sum += a[i];
    }
    long[] b = new long[3 * n];
    b[2 * n] = sum;
    for (int i = 2 * n - 1; i >= n; i--) {
        que.add(a[i]);
        sum += a[i] - que.poll();
        b[i] = sum;
    }
    long max = Long.MIN_VALUE;
    for (int i = n; i <= 2 * n; i++) {
        if (r[i] - b[i] > max) {
            max = r[i] - b[i];
        }
    }
    System.out.println(max);
}
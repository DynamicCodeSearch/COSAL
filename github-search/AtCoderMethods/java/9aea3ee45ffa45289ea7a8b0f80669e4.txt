static void solve() {
    int n = ni(), K = ni();
    String[] ss = new String[n];
    for (int i = 0; i < n; i++) {
        ss[i] = ns();
    }
    int[] back = new int[K + 1];
    Arrays.fill(back, -1);
    back[K] = n;
    for (int i = n - 1; i >= 0; i--) {
        for (int j = 0; j + ss[i].length() <= K; j++) {
            if (back[j + ss[i].length()] != -1 && back[j] == -1) {
                back[j] = i;
            }
        }
    }
    
    boolean[] pre = new boolean[K + 1];
    boolean[] cur = new boolean[K + 1];
    pre[0] = true;
    char[] cs = new char[K + 10];
    int cslen = 0;
    for (int i = 0; i < n; i++) {
        char[] cst = new char[cslen + ss[i].length()];
        int p = 0;
        for (int j = 0; j < ss[i].length(); j++) cst[p++] = ss[i].charAt(j);
        for (int j = 0; j < cslen; j++) cst[p++] = cs[j];
        int[] z = Z(cst);
        int t = 0;
        boolean sadd = false;
        Arrays.fill(cur, false);
        for (int j = 0; j <= K; j++) {
            if (!pre[j])
                continue;
            if (j + ss[i].length() <= K && back[j + ss[i].length()] >= i + 1) {
                
                
                int comp = comp(j, true, t, sadd, z, ss[i].length(), cst);
                if (comp < 0) {
                    t = j;
                    sadd = true;
                } else if (comp == 0) {
                    if (j + ss[i].length() > t + (sadd ? ss[i].length() : 0)) {
                        t = j;
                        sadd = true;
                    }
                }
            }
            if (back[j] >= i + 1) {
                
                
                int comp = comp(j, false, t, sadd, z, ss[i].length(), cst);
                if (comp < 0) {
                    t = j;
                    sadd = false;
                } else if (comp == 0) {
                    if (j > t + (sadd ? ss[i].length() : 0)) {
                        t = j;
                        sadd = false;
                    }
                }
            }
        }
        for (int j = 0; j <= K; j++) {
            if (!pre[j])
                continue;
            if (j + ss[i].length() <= K && back[j + ss[i].length()] >= i + 1) {
                
                
                int comp = comp(j, true, t, sadd, z, ss[i].length(), cst);
                if (comp <= 0)
                    cur[j + ss[i].length()] = true;
            }
            if (back[j] >= i + 1) {
                
                
                int comp = comp(j, false, t, sadd, z, ss[i].length(), cst);
                if (comp <= 0)
                    cur[j] = true;
            }
        }
        if (sadd) {
            for (int j = 0; j < ss[i].length(); j++) cs[j + t] = ss[i].charAt(j);
        }
        cslen = t + (sadd ? ss[i].length() : 0);
        
        
        
        boolean[] d = pre;
        pre = cur;
        cur = d;
    }
    out.println(new String(cs, 0, cslen));
}
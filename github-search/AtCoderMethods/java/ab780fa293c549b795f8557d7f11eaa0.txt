static long[] dijkstra(int[][][] g, int source) {
    int n = g.length;
    final long[] d = new long[n];
    Arrays.fill(d, 1L << 35);
    d[source] = 0;
    TreeSet<Integer> pQ = new TreeSet<Integer>(new Comparator<Integer>() {

        public int compare(Integer a, Integer b) {
            if (d[a] != d[b])
                return d[a] - d[b] > 0 ? 1 : -1;
            return a - b > 0 ? 1 : -1;
        }
    });
    pQ.add(source);
    while (!pQ.isEmpty()) {
        int cur = pQ.pollFirst();
        for (int i = 0; i < g[cur].length; i++) {
            int next = g[cur][i][0];
            long dist = d[cur] + g[cur][i][1];
            if (dist < d[next]) {
                pQ.remove(next);
                d[next] = dist;
                pQ.add(next);
            }
        }
    }
    return d;
}
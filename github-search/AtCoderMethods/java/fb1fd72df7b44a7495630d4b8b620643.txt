void solve() {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int a = sc.nextInt();
    int b = sc.nextInt();
    --a;
    --b;
    long[] x = new long[n];
    long[] y = new long[n];
    ArrayList<Point> ps = new ArrayList<>();
    for (int i = 0; i < n; ++i) {
        x[i] = sc.nextLong();
        y[i] = sc.nextLong();
        ps.add(new Point(x[i] + y[i], x[i] - y[i], i));
    }
    long D = Math.abs(x[a] - x[b]) + Math.abs(y[a] - y[b]);
    int[] cnt = new int[n];
    DJSet ds = new DJSet(n);
    for (int dir = 0; dir < 2; ++dir) {
        Collections.sort(ps);
        int[] cum = new int[2 * n];
        for (int i = 0; i < n; ++i) {
            pre(ps, ps.get(i), D, cnt, cum, ds, dir);
        }
        for (int i = 1; i < cum.length; ++i) {
            cum[i] += cum[i - 1];
        }
        for (int i = 0; i + 1 < n; ++i) {
            if (cum[2 * i + 1] > 0) {
                ds.setUnion(ps.get(i).id, ps.get(i + 1).id);
            }
        }
        for (int i = 0; i < n; ++i) {
            ps.get(i).rotate();
        }
    }
    long ans = 0;
    for (int i = 0; i < n; ++i) {
        if (ds.equiv(i, a)) {
            ans += cnt[i];
        }
    }
    System.out.println(ans / 2);
}
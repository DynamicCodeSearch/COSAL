private static void solve() {
    int n = ni();
    int k = ni();
    long[][] p = new long[n][2];
    long[] x = new long[n];
    long[] y = new long[n];
    for (int i = 0; i < n; i++) {
        p[i][0] = nl();
        p[i][1] = nl();
        x[i] = p[i][0];
        y[i] = p[i][1];
    }
    Arrays.sort(x);
    Arrays.sort(y);
    long ret = Long.MAX_VALUE;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            for (int s = 0; s < n; s++) {
                for (int t = s + 1; t < n; t++) {
                    int count = 0;
                    long x1 = x[i];
                    long x2 = x[j];
                    long y1 = y[s];
                    long y2 = y[t];
                    for (long[] v : p) {
                        long nx = v[0];
                        long ny = v[1];
                        if (x1 <= nx && nx <= x2 && y1 <= ny && ny <= y2) {
                            count++;
                        }
                    }
                    if (count >= k) {
                        long now = (x2 - x1) * (y2 - y1);
                        ret = Math.min(ret, now);
                    }
                }
            }
        }
    }
    System.out.println(ret);
}
public static void main(String[] args) {
    int n = Fs.nextInt();
    int k = Fs.nextInt();
    int l = Fs.nextInt();
    int[] p = new int[k], q = new int[k];
    Fs.nextIntArray(p, q);
    int[] r = new int[l], s = new int[l];
    Fs.nextIntArray(r, s);
    UF doro = new UF(n + 1);
    for (int i = 0; i < k; i++) {
        doro.union(p[i], q[i]);
    }
    UF tetu = new UF(n + 1);
    for (int i = 0; i < l; i++) {
        tetu.union(s[i], r[i]);
    }
    HashMap<Long, Integer> map = new HashMap<>();
    for (int i = 1; i < n + 1; i++) {
        long key = doro.find(i) * 1000000L + tetu.find(i);
        if (!map.containsKey(key)) {
            map.put(key, 1);
        } else {
            int co = map.get(key);
            map.put(key, co + 1);
        }
    }
    for (int i = 1; i < n + 1; i++) {
        long key = doro.find(i) * 1000000L + tetu.find(i);
        Fs.pr(map.get(key) + " ");
    }
    Fs.flush();
}
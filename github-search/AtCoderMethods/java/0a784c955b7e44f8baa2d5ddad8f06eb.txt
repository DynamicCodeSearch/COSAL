private void doit() {
    Scanner sc = new Scanner(System.in);
    while (sc.hasNext()) {
        int n = sc.nextInt();
        int k = sc.nextInt();
        Integer[][] data = new Integer[n][2];
        for (int i = 0; i < n; i++) {
            data[i][0] = sc.nextInt();
            data[i][1] = sc.nextInt();
        }
        Arrays.sort(data, new Comparator<Integer[]>() {

            @Override
            public int compare(Integer[] o1, Integer[] o2) {
                if (o1[0] < o2[0])
                    return -1;
                if (o1[0] > o2[0])
                    return 1;
                if (o1[1] < o2[1])
                    return -1;
                if (o1[1] > o2[1])
                    return 1;
                return 0;
            }
        });
        long min = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int ii = 0; ii < n; ii++) {
                    for (int jj = 0; jj < n; jj++) {
                        int count = 0;
                        for (int kk = 0; kk < n; kk++) {
                            
                            if (data[i][0] <= data[kk][0] && data[kk][0] <= data[ii][0] && data[j][1] <= data[kk][1] && data[kk][1] <= data[jj][1]) {
                                count++;
                            }
                        }
                        if (count >= k) {
                            min = Math.min(min, ((long) data[ii][0] - data[i][0]) * ((long) data[jj][1] - data[j][1]));
                        }
                    }
                }
            }
        }
        System.out.println(min);
    }
}
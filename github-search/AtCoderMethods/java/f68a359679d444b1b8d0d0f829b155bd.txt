
private static void SA_IS(BaseArray T, int[] SA, int fs, int n, int k) {
    BaseArray C, B, RA;
    int i, j, b, m, p, q, name, newfs;
    int c0, c1;
    int flags = 0;
    if (k <= 256) {
        C = new IntArray(new int[k], 0);
        if (k <= fs) {
            B = new IntArray(SA, n + fs - k);
            flags = 1;
        } else {
            B = new IntArray(new int[k], 0);
            flags = 3;
        }
    } else if (k <= fs) {
        C = new IntArray(SA, n + fs - k);
        if (k <= (fs - k)) {
            B = new IntArray(SA, n + fs - k * 2);
            flags = 0;
        } else if (k <= 1024) {
            B = new IntArray(new int[k], 0);
            flags = 2;
        } else {
            B = C;
            flags = 8;
        }
    } else {
        C = B = new IntArray(new int[k], 0);
        flags = 4 | 8;
    }
    
    getCounts(T, C, n, k);
    getBuckets(C, B, k, true);
    
    for (i = 0; i < n; ++i) {
        SA[i] = 0;
    }
    b = -1;
    i = n - 1;
    j = n;
    m = 0;
    c0 = T.get(n - 1);
    do {
        c1 = c0;
    } while ((0 <= --i) && ((c0 = T.get(i)) >= c1));
    for (; 0 <= i; ) {
        do {
            c1 = c0;
        } while ((0 <= --i) && ((c0 = T.get(i)) <= c1));
        if (0 <= i) {
            if (0 <= b) {
                SA[b] = j;
            }
            b = B.update(c1, -1);
            j = i;
            ++m;
            do {
                c1 = c0;
            } while ((0 <= --i) && ((c0 = T.get(i)) >= c1));
        }
    }
    if (1 < m) {
        LMSsort(T, SA, C, B, n, k);
        name = LMSpostproc(T, SA, n, m);
    } else if (m == 1) {
        SA[b] = j + 1;
        name = 1;
    } else {
        name = 0;
    }
    
    if (name < m) {
        if ((flags & 4) != 0) {
            C = null;
            B = null;
        }
        if ((flags & 2) != 0) {
            B = null;
        }
        newfs = (n + fs) - (m * 2);
        if ((flags & (1 | 4 | 8)) == 0) {
            if ((k + name) <= newfs) {
                newfs -= k;
            } else {
                flags |= 8;
            }
        }
        for (i = m + (n >> 1) - 1, j = m * 2 + newfs - 1; m <= i; --i) {
            if (SA[i] != 0) {
                SA[j--] = SA[i] - 1;
            }
        }
        RA = new IntArray(SA, m + newfs);
        SA_IS(RA, SA, newfs, m, name);
        RA = null;
        i = n - 1;
        j = m * 2 - 1;
        c0 = T.get(n - 1);
        do {
            c1 = c0;
        } while ((0 <= --i) && ((c0 = T.get(i)) >= c1));
        for (; 0 <= i; ) {
            do {
                c1 = c0;
            } while ((0 <= --i) && ((c0 = T.get(i)) <= c1));
            if (0 <= i) {
                SA[j--] = i + 1;
                do {
                    c1 = c0;
                } while ((0 <= --i) && ((c0 = T.get(i)) >= c1));
            }
        }
        for (i = 0; i < m; ++i) {
            SA[i] = SA[m + SA[i]];
        }
        if ((flags & 4) != 0) {
            C = B = new IntArray(new int[k], 0);
        }
        if ((flags & 2) != 0) {
            B = new IntArray(new int[k], 0);
        }
    }
    
    if ((flags & 8) != 0) {
        getCounts(T, C, n, k);
    }
    
    if (1 < m) {
        getBuckets(C, B, k, true);
        
        i = m - 1;
        j = n;
        p = SA[m - 1];
        c1 = T.get(p);
        do {
            q = B.get(c0 = c1);
            while (q < j) {
                SA[--j] = 0;
            }
            do {
                SA[--j] = p;
                if (--i < 0) {
                    break;
                }
                p = SA[i];
            } while ((c1 = T.get(p)) == c0);
        } while (0 <= i);
        while (0 < j) {
            SA[--j] = 0;
        }
    }
    induceSA(T, SA, C, B, n, k);
    C = null;
    B = null;
}
public static void main(String[] args) {
    InputReader in = new InputReader(System.in);
    PrintWriter out = new PrintWriter(System.out);
    char[] w = in.nextToken().toCharArray();
    int n = w.length;
    int[] err = errorFunction(w);
    int cur = n - err[err.length - 1];
    int cnt = -1;
    if (n % cur == 0) {
        cnt = n / cur;
    } else {
        cnt = 1;
    }
    if (cnt == n) {
        out.println(n);
        out.println(1);
    } else if (cnt == 1) {
        out.println(1);
        out.println(1);
    } else {
        int ptn = n - 1;
        boolean[] visited = new boolean[n + 1];
        char[] part = w.clone();
        char[] revPart = w.clone();
        for (int i = 0; i < part.length / 2; i++) {
            int j = part.length - 1 - i;
            char c = revPart[i];
            revPart[i] = revPart[j];
            revPart[j] = c;
        }
        int[] errLeft = errorFunction(part);
        int[] errRight = errorFunction(revPart);
        for (int x = 1; x <= errLeft.length - 2; x++) {
            if (errLeft[x] >= 1 && x % (x - errLeft[x]) == 0) {
                if (!visited[x]) {
                    ptn--;
                    visited[x] = true;
                }
            }
        }
        for (int x = 1; x <= errRight.length - 2; x++) {
            if (errRight[x] >= 1 && x % (x - errRight[x]) == 0) {
                if (!visited[n - x]) {
                    ptn--;
                    visited[n - x] = true;
                }
            }
        }
        out.println(2);
        out.println(ptn);
    }
    out.flush();
}
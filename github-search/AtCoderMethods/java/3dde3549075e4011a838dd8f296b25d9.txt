static void solve() {
    int n = in.nextInt();
    int m = in.nextInt();
    int[] a = new int[m];
    int[] b = new int[m];
    int[] y = new int[m];
    int[][] edge = new int[m][2];
    for (int i = 0; i < m; i++) {
        a[i] = in.nextInt() - 1;
        b[i] = in.nextInt() - 1;
        y[i] = in.nextInt();
        edge[i][0] = y[i];
        edge[i][1] = i;
    }
    Arrays.sort(edge, new Comparator<int[]>() {

        public int compare(int[] a, int[] b) {
            return b[0] - a[0];
        }
    });
    int q = in.nextInt();
    int[][] h = new int[q][3];
    for (int i = 0; i < q; i++) {
        h[i][0] = in.nextInt() - 1;
        h[i][1] = in.nextInt();
        h[i][2] = i;
    }
    Arrays.sort(h, new Comparator<int[]>() {

        public int compare(int[] a, int[] b) {
            if (a[1] != b[1])
                return b[1] - a[1];
            return a[0] - b[0];
        }
    });
    int[] ans = new int[q];
    int res = 0, pos = 0;
    DisjointSet ds = new DisjointSet(n);
    for (int i = 0; i < m; i++) {
        int cur = edge[i][1];
        if (!ds.same(a[cur], b[cur])) {
            while (pos < q && h[pos][1] >= y[cur]) {
                ans[h[pos][2]] = ds.size(h[pos][0]);
                pos++;
            }
            ds.unite(a[cur], b[cur]);
            res += y[cur];
        }
    }
    while (pos < q) {
        ans[h[pos][2]] = ds.size(h[pos][0]);
        pos++;
    }
    dump(ds.cnt);
    for (int i = 0; i < q; i++) {
        out.println(ans[i]);
    }
}
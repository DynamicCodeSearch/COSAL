static void dfs(int[] arr, int cur) {
    if (cur == N) {
        for (int i = 0; i < N; ++i) ans[i] = arr[i];
        return;
    }
    if (arr[cur] == -1) {
        for (int i = 0; i < 2; ++i) {
            
            arr[cur] = i;
            if ((s[cur] == 'o' && i == 0) || (s[cur] == 'x' && i == 1)) {
                arr[(cur + 1) % N] = 0;
                arr[(cur - 1 + N) % N] = 0;
                dfs(arr, cur + 1);
                arr[(cur + 1) % N] = 1;
                arr[(cur - 1 + N) % N] = 1;
                dfs(arr, cur + 1);
                arr[(cur + 1) % N] = -1;
                arr[(cur - 1 + N) % N] = -1;
            } else {
                arr[(cur + 1) % N] = 1;
                arr[(cur - 1 + N) % N] = 0;
                dfs(arr, cur + 1);
                arr[(cur + 1) % N] = 0;
                arr[(cur - 1 + N) % N] = 1;
                dfs(arr, cur + 1);
                arr[(cur + 1) % N] = -1;
                arr[(cur - 1 + N) % N] = -1;
            }
        }
    } else {
        if ((s[cur] == 'o' && arr[cur] == 0) || (s[cur] == 'x' && arr[cur] == 1)) {
            if (arr[(cur + 1) % N] == -1 || arr[(cur + 1) % N] == arr[(cur - 1 + N) % N]) {
                arr[(cur + 1) % N] = arr[(cur - 1 + N) % N];
                dfs(arr, cur + 1);
                if ((cur + 1) % N != 0)
                    arr[(cur + 1) % N] = -1;
            }
        } else {
            if (arr[(cur + 1) % N] == -1 || arr[(cur + 1) % N] == (arr[(cur - 1 + N) % N] ^ 1)) {
                arr[(cur + 1) % N] = arr[(cur - 1 + N) % N] ^ 1;
                dfs(arr, cur + 1);
                if ((cur + 1) % N != 0)
                    arr[(cur + 1) % N] = -1;
            }
        }
    }
}
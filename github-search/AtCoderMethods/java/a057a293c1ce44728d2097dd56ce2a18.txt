private static long[] solve(int n, int[] a) {
    int dupval = -1;
    int duppos = -1;
    Integer[] pos = new Integer[n + 1];
    for (int i = 0; i < a.length; i++) {
        if (pos[a[i]] == null) {
            pos[a[i]] = i;
            continue;
        }
        dupval = a[i];
        duppos = i;
    }
    int outer = n - duppos + pos[dupval];
    int mod = (int) 1e9 + 7;
    Ncr ncr = new Ncr((int) mod, n + 1);
    long[] ans = IntStream.rangeClosed(1, n + 1).mapToLong((k) -> {
        long t = ncr.applyAsLong(n + 1, k) - ncr.applyAsLong(outer, k - 1) + mod;
        t %= mod;
        return t;
    }).toArray();
    return ans;
}
private double calcMax(int[][] mans, boolean isSearchWidth) {
    double maxTimeLeft = 0;
    double maxTimeRight = 0;
    double l = 1e5;
    double r = -1e5;
    int x = isSearchWidth ? 0 : 1;
    for (int i = 0; i < 100; i++) {
        double targetL = (l * 2 + r) / 3;
        double targetR = (l + r * 2) / 3;
        maxTimeLeft = 0;
        maxTimeRight = 0;
        for (int j = 0; j < mans.length; j++) {
            maxTimeLeft = Math.max(maxTimeLeft, (Math.abs(targetL - mans[j][x]) * mans[j][2]));
            maxTimeRight = Math.max(maxTimeRight, (Math.abs(targetR - mans[j][x]) * mans[j][2]));
        }
        if (maxTimeLeft > maxTimeRight) {
            l = targetL;
        } else {
            r = targetR;
        }
    }
    return Math.max(maxTimeLeft, maxTimeRight);
}
static void solve() {
    int n = ni(), m = ni();
    char[] s = ns(n);
    int[] cum = new int[n + 1];
    for (int i = 0; i < n; i++) {
        cum[i + 1] = cum[i] + (s[i] == '1' ? 1 : 0);
    }
    int[][] lr = new int[m][];
    for (int i = 0; i < m; i++) {
        lr[i] = new int[] { ni() - 1, ni() - 1 };
    }
    int mod = 1000000007;
    long[][] C = new long[3500 + 1][3500 + 1];
    for (int i = 0; i <= 3500; i++) {
        C[i][0] = 1;
        for (int j = 1; j <= i; j++) {
            C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
            if (C[i][j] >= mod)
                C[i][j] -= mod;
        }
    }
    long[] dp = new long[n + 1];
    dp[0] = 1;
    int reach = 0;
    int rp = 0;
    for (int i = 0; i < n; i++) {
        reach = Math.max(reach, i);
        while (rp < m && lr[rp][0] <= i) {
            reach = Math.max(reach, lr[rp][1]);
            rp++;
        }
        for (int j = n; j >= 0; j--) {
            long v = dp[j];
            dp[j] = 0;
            if (cum[reach + 1] - j > 0) {
                dp[j + 1] += v;
                if (dp[j + 1] >= mod)
                    dp[j + 1] -= mod;
            }
            if (reach + 1 - cum[reach + 1] - (i - j) > 0) {
                dp[j] += v;
                if (dp[j] >= mod)
                    dp[j] -= mod;
            }
        }
    }
    out.println(Arrays.stream(dp).sum() % mod);
}
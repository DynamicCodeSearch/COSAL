private long[] dist(int N, List<List<Path>> edges) {
    long[] dist = new long[N];
    Arrays.fill(dist, Integer.MAX_VALUE);
    dist[0] = 0;
    Queue<Path> q = new PriorityQueue<>();
    for (int i = 0; i < edges.size(); ++i) {
        for (Path edge : edges.get(i)) {
            q.offer(edge);
        }
    }
    while (!q.isEmpty()) {
        Path edge = q.poll();
        int u = edge.to;
        for (Path p : edges.get(u)) {
            long tmp = dist[u] + p.cost;
            if (dist[p.to] > tmp) {
                dist[p.to] = tmp;
                Path newPath = new Path(0, p.to, tmp);
                q.offer(newPath);
            }
        }
    }
    return dist;
}
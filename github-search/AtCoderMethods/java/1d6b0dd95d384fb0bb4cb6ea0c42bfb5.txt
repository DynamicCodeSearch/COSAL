public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int H = sc.nextInt();
    int W = sc.nextInt();
    int T = sc.nextInt();
    char[] maze = new char[H * W];
    int start = 0;
    int goal = 0;
    for (int i = 0; i < H; i++) {
        String s = sc.next();
        for (int j = 0; j < W; j++) {
            maze[i * W + j] = s.charAt(j);
            if (maze[i * W + j] == 'S') {
                start = i * W + j;
            }
            if (maze[i * W + j] == 'G') {
                goal = i * W + j;
            }
        }
    }
    int ans = 0;
    int l = 1;
    int r = T;
    while (l < r) {
        int med = (l + r) / 2;
        long[][] dp = new long[H * W][H * W];
        for (int i = 0; i < H * W; i++) {
            for (int j = 0; j < H * W; j++) {
                if (i % W == 0) {
                    if (i == 0) {
                        if (j == i + 1 || j == i + W) {
                            if (maze[j] == '#') {
                                dp[i][j] = med;
                            } else {
                                dp[i][j] = 1;
                            }
                        } else {
                            if (i != j)
                                dp[i][j] = (long) Math.pow(10, 12);
                        }
                    } else if (i == (H - 1) * W) {
                        if (j == i + 1 || j == i - W) {
                            if (maze[j] == '#') {
                                dp[i][j] = med;
                            } else {
                                dp[i][j] = 1;
                            }
                        } else {
                            if (i != j)
                                dp[i][j] = (long) Math.pow(10, 12);
                        }
                    } else {
                        if (j == i + 1 || j == i + W || j == i - W) {
                            if (maze[j] == '#') {
                                dp[i][j] = med;
                            } else {
                                dp[i][j] = 1;
                            }
                        } else {
                            if (i != j)
                                dp[i][j] = (long) Math.pow(10, 12);
                        }
                    }
                } else if (i % W == W - 1) {
                    if (i == W - 1) {
                        if (j == i - 1 || j == i + W) {
                            if (maze[j] == '#') {
                                dp[i][j] = med;
                            } else {
                                dp[i][j] = 1;
                            }
                        } else {
                            if (i != j)
                                dp[i][j] = (long) Math.pow(10, 12);
                        }
                    } else if (i == H * W - 1) {
                        if (j == i - 1 || j == i - W) {
                            if (maze[j] == '#') {
                                dp[i][j] = med;
                            } else {
                                dp[i][j] = 1;
                            }
                        } else {
                            if (i != j)
                                dp[i][j] = (long) Math.pow(10, 12);
                        }
                    } else {
                        if (j == i - 1 || j == i + W || j == i - W) {
                            if (maze[j] == '#') {
                                dp[i][j] = med;
                            } else {
                                dp[i][j] = 1;
                            }
                        } else {
                            if (i != j)
                                dp[i][j] = (long) Math.pow(10, 12);
                        }
                    }
                } else {
                    if (i < W - 1) {
                        if (j == i - 1 || j == i + 1 || j == i + W) {
                            if (maze[j] == '#') {
                                dp[i][j] = med;
                            } else {
                                dp[i][j] = 1;
                            }
                        } else {
                            if (i != j)
                                dp[i][j] = (long) Math.pow(10, 12);
                        }
                    } else if (i > (H - 1) * W) {
                        if (j == i - 1 || j == i + 1 || j == i - W) {
                            if (maze[j] == '#') {
                                dp[i][j] = med;
                            } else {
                                dp[i][j] = 1;
                            }
                        } else {
                            if (i != j)
                                dp[i][j] = (long) Math.pow(10, 12);
                        }
                    } else {
                        if (j == i - 1 || j == i + 1 || j == i + W || j == i - W) {
                            if (maze[j] == '#') {
                                dp[i][j] = med;
                            } else {
                                dp[i][j] = 1;
                            }
                        } else {
                            if (i != j)
                                dp[i][j] = (long) Math.pow(10, 12);
                        }
                    }
                }
            }
        }
        
        for (int k = 1; k <= H * W; k++) {
            for (int i = 0; i < H * W; i++) {
                for (int j = 0; j < H * W; j++) {
                    dp[i][j] = Math.min(dp[i][j], dp[i][k - 1] + dp[k - 1][j]);
                }
            }
        }
        if (dp[start][goal] <= T) {
            ans = med;
            l = med + 1;
        } else {
            r = med;
        }
    }
    System.out.println(ans);
}
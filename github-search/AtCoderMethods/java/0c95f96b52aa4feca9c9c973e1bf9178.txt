public static void main(String[] args) {
    InputReader in = new InputReader(System.in);
    PrintWriter out = new PrintWriter(System.out);
    int n = in.nextInt();
    int k = in.nextInt();
    int l = in.nextInt();
    int[][] roads = in.nextIntTable(k, 2);
    int[][] rails = in.nextIntTable(l, 2);
    for (int i = 0; i < k; i++) {
        for (int j = 0; j < 2; j++) {
            roads[i][j]--;
        }
    }
    for (int i = 0; i < l; i++) {
        for (int j = 0; j < 2; j++) {
            rails[i][j]--;
        }
    }
    UnionFind rui = new UnionFind(n);
    for (int i = 0; i < k; i++) {
        rui.unite(roads[i][0], roads[i][1]);
    }
    UnionFind rui2 = new UnionFind(n);
    for (int i = 0; i < l; i++) {
        rui2.unite(rails[i][0], rails[i][1]);
    }
    int[][] groups = new int[n][3];
    for (int i = 0; i < n; i++) {
        groups[i][0] = i;
        groups[i][1] = rui.find(i);
        groups[i][2] = rui2.find(i);
    }
    Arrays.sort(groups, (a, b) -> (a[1] == b[1]) ? (a[2] - b[2]) : (a[1] - b[1]));
    int[] ans = new int[n];
    for (int i = 0; i < n; ) {
        int j = i;
        while (j < n && groups[i][1] == groups[j][1]) {
            j++;
        }
        for (int subi = i; subi < j; ) {
            int subj = subi;
            while (subj < j && groups[subi][2] == groups[subj][2]) {
                subj++;
            }
            for (int z = subi; z < subj; z++) {
                ans[groups[z][0]] = subj - subi;
            }
            subi = subj;
        }
        i = j;
    }
    StringBuilder line = new StringBuilder();
    for (int i = 0; i < n; i++) {
        line.append(' ').append(ans[i]);
    }
    out.println(line.substring(1));
    out.flush();
}
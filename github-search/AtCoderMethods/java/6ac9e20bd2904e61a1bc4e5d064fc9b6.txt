public static void main(String[] args) {
    
    final int n;
    try (Scanner scan = new Scanner(System.in)) {
        
        n = scan.nextInt();
        NodeData.nodes = IntStream.range(0, n).mapToObj(i -> new NodeData(i)).toArray(NodeData[]::new);
        for (int i = 0; i < n - 1; i++) {
            
            
            int a = scan.nextInt() - 1;
            int b = scan.nextInt() - 1;
            NodeData.connect(a, b);
        }
    }
    
    
    
    LinkedList<NodeData> queue = new LinkedList<>();
    queue.add(NodeData.nodes[0]);
    while (!queue.isEmpty()) {
        NodeData nextNode = queue.poll();
        for (NodeData child : nextNode.childs) {
            
            NodeData.treeConnect(nextNode, child);
            queue.add(child);
        }
    }
    
    
    
    NodeData thisNode = NodeData.nodes[0];
    while (!NodeData.nodes[0].childs.isEmpty()) {
        if (thisNode.childs.isEmpty()) {
            
            
            thisNode.remove();
            
            thisNode = thisNode.parent;
        } else {
            
            thisNode = thisNode.childs.get(0);
        }
    }
    thisNode = NodeData.nodes[0];
    long result = (thisNode.white + thisNode.black) % NodeData.MODULO;
    out.println(result);
    out.flush();
}
public void solve(int testNumber, InputReader in, PrintWriter out) {
    int n = in.nextInt();
    long[] a = new long[n];
    for (int i = 0; i < n; ++i) {
        a[i] = in.nextLong();
    }
    long steps = Arrays.stream(a).sum() - n * (n - 1);
    if (steps < 0) {
        steps = 0;
    }
    long[] b = new long[n];
    long total = 0;
    for (int i = 0; i < n; ++i) {
        long choose = 0;
        for (long step = 1L << 55; step > 0; step /= 2) {
            long curr = choose + step;
            long nvalue = a[i] + (steps - curr) - curr * n;
            if (total + curr <= steps && nvalue >= 0) {
                choose += step;
            }
        }
        b[i] = choose;
        total += choose;
    }
    long ans = 0;
    for (int i = 0; i < n; ++i) {
        a[i] -= b[i] * n;
        for (int j = 0; j < n; ++j) {
            if (i != j) {
                a[j] += b[i];
            }
        }
        ans += b[i];
    }
    if (total != steps) {
        throw new RuntimeException();
    }
    while (true) {
        int pos = -1;
        for (int i = 0; i < n; ++i) {
            if (a[i] >= n) {
                pos = i;
                break;
            }
        }
        if (pos == -1) {
            break;
        }
        long add = a[pos] / n;
        ans += add;
        a[pos] %= n;
        for (int i = 0; i < n; ++i) {
            if (i != pos) {
                a[i] += add;
            }
        }
    }
    out.println(ans);
}
public void solve(int testNumber, FastScanner in, PrintWriter out) {
    int n = in.nextInt();
    int[] a = new int[n];
    for (int i = 0; i < n; i++) {
        a[i] = in.nextInt();
    }
    Map<Integer, Integer> m = compress(a);
    int[] prev = new int[n];
    Arrays.fill(prev, -1);
    int last = 0;
    for (int i = 1; i < n; i++) {
        if (a[i] > a[last]) {
            prev[i] = last;
            last = i;
        }
    }
    Map<Integer, Integer> invM = new HashMap<>();
    for (Map.Entry<Integer, Integer> e : m.entrySet()) {
        invM.put(e.getValue(), e.getKey());
    }
    long[] am = new long[m.size()];
    int amPtr = am.length - 1;
    long[] ans = new long[n];
    for (int i = n - 1; i >= 0; i--) {
        ++am[m.get(a[i])];
        if (i > 0 && prev[i] < 0) {
            continue;
        }
        int x = 0;
        if (i > 0) {
            x = a[prev[i]];
        }
        int xPtr = m.get(x);
        while (amPtr > xPtr) {
            int p = amPtr - 1;
            if (p < 0) {
                throw new AssertionError();
            }
            long dist = invM.get(amPtr) - invM.get(p);
            ans[i] += dist * am[amPtr];
            am[p] += am[amPtr];
            am[amPtr] = 0;
            amPtr = p;
        }
    }
    for (int i = 0; i < n; i++) {
        out.println(ans[i]);
    }
}
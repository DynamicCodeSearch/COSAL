static void solve() {
    int h = ni(), w = ni(), n = ni();
    LongHashSet co = new LongHashSet();
    for (int i = 0; i < n; i++) {
        long r = nl() - 1, c = nl() - 1;
        co.add(r * w + c);
    }
    long[] F = new long[10];
    F[0] = (long) (h - 2) * (w - 2);
    for (int itr = co.next(0); itr < co.scale; itr = co.next(itr + 1)) {
        long r = co.keys[itr] / w, c = co.keys[itr] % w;
        for (int k = 0; k < 3; k++) {
            inner: for (int l = 0; l < 3; l++) {
                long br = r - k, bc = c - l;
                if (br >= 0 && br + 2 < h && bc >= 0 && bc + 2 < w) {
                    boolean ped = false;
                    int ct = 0;
                    for (int u = 0; u < 3; u++) {
                        for (int v = 0; v < 3; v++) {
                            if (u == k && l == v)
                                ped = true;
                            long code = (br + u) * w + (bc + v);
                            boolean has = co.contains(code);
                            if (!ped && has)
                                continue inner;
                            if (has)
                                ct++;
                        }
                    }
                    if (ct > 0) {
                        F[0]--;
                        F[ct]++;
                    }
                }
            }
        }
    }
    for (int i = 0; i <= 9; i++) {
        out.println(F[i]);
    }
}
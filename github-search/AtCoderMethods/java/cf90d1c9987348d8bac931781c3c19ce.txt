static void solve() {
    int n = ni(), a = ni(), b = ni();
    int mod = 1000000007;
    int[] c = na(n);
    if (a == 1) {
        Arrays.sort(c);
        for (int i = 0; i < n; i++) {
            out.println(c[i] % mod);
        }
        return;
    }
    long[] cc = new long[n];
    for (int i = 0; i < n; i++) cc[i] = c[i];
    while (b > 0) {
        long min = Long.MAX_VALUE;
        int argmin = -1;
        for (int i = 0; i < n; i++) {
            if (cc[i] < min) {
                min = cc[i];
                argmin = i;
            }
        }
        if (min > mod)
            break;
        cc[argmin] *= a;
        b--;
    }
    if (b == 0) {
        Arrays.sort(cc);
        for (int i = 0; i < n; i++) {
            out.println(cc[i] % mod);
        }
        return;
    }
    long[][] oi = new long[n][];
    for (int i = 0; i < n; i++) oi[i] = new long[] { cc[i], i };
    Arrays.sort(oi, new Comparator<long[]>() {

        public int compare(long[] a, long[] b) {
            return Long.compare(a[0], b[0]);
        }
    });
    int base = b / n;
    for (int i = b % n; i < n; i++) {
        out.println(oi[i][0] % mod * pow(a, base, mod) % mod);
    }
    for (int i = 0; i < b % n; i++) {
        out.println(oi[i][0] % mod * pow(a, base + 1, mod) % mod);
    }
}
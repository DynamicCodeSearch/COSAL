public void solve(int testNumber, InputReader in, PrintWriter out) {
    int n = in.nextInt();
    Point[] points = new Point[n];
    for (int i = 0; i < n; i++) {
        int x = in.nextInt();
        int y = in.nextInt();
        points[i] = new Point(x, y, i);
    }
    ArrayList<Street> streets = new ArrayList<>();
    Arrays.sort(points, new Comparator<Point>() {

        public int compare(Point o1, Point o2) {
            return o1.x - o2.x;
        }
    });
    for (int i = 0; i < n - 1; i++) {
        streets.add(new Street(points[i].i, points[i + 1].i, points[i + 1].x - points[i].x));
    }
    Arrays.sort(points, new Comparator<Point>() {

        public int compare(Point o1, Point o2) {
            return o1.y - o2.y;
        }
    });
    for (int i = 0; i < n - 1; i++) {
        streets.add(new Street(points[i].i, points[i + 1].i, points[i + 1].y - points[i].y));
    }
    Collections.sort(streets);
    long ans = 0;
    UnionFind unionFind = new UnionFind(n);
    for (int i = 0; i < streets.size(); i++) {
        if (!unionFind.isConnected(streets.get(i).s, streets.get(i).t)) {
            ans += streets.get(i).d;
            unionFind.union(streets.get(i).s, streets.get(i).t);
        }
    }
    out.println(ans);
}
int[][] prec(int from) {
    int[][] dp = new int[n][2];
    for (int i = 0; i < n; i++) {
        dp[i][0] = INF;
        dp[i][1] = INF;
    }
    Queue<State> q = new PriorityQueue<>((o1, o2) -> {
        if (o1.usedB != o2.usedB) {
            return o1.usedB - o2.usedB;
        }
        return o1.usedA - o2.usedA;
    });
    q.add(new State(from, 0, 0));
    dp[from][0] = 0;
    while (q.size() >= 1) {
        State st = q.poll();
        for (int[] e : graph[st.now]) {
            int ta = e[1] == 0 ? st.usedA + 1 : st.usedA;
            int tb = e[1] == 1 ? st.usedB + 1 : st.usedB;
            if (dp[e[0]][1] > tb || (dp[e[0]][1] == tb && dp[e[0]][0] > ta)) {
                dp[e[0]][0] = ta;
                dp[e[0]][1] = tb;
                q.add(new State(e[0], ta, tb));
            }
        }
    }
    return dp;
}
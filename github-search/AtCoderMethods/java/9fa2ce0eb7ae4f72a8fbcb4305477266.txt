public static void main(String[] args) {
    FastScanner sc = new FastScanner();
    int N = sc.nextInt();
    int W = sc.nextInt();
    int[][] e = sc.nextIntTable(N, 2);
    int base = e[0][0];
    Arrays.sort(e, (a, b) -> b[1] - a[1]);
    int[][] v = new int[4][100];
    int[] ptr = new int[4];
    for (int i = 0; i < N; i++) {
        int k = e[i][0] - base;
        v[k][ptr[k]] = e[i][1];
        ptr[k]++;
    }
    for (int i = 0; i < 4; i++) {
        v[i] = Arrays.copyOf(v[i], ptr[i]);
    }
    long[][] sv = new long[4][];
    for (int i = 0; i < 4; i++) {
        sv[i] = new long[v[i].length + 1];
        for (int j = 0; j < v[i].length; j++) {
            sv[i][j + 1] = sv[i][j] + v[i][j];
        }
    }
    long ret = 0;
    for (int i = 0; i <= v[0].length; i++) {
        for (int j = 0; j <= v[1].length; j++) {
            for (int k = 0; k <= v[2].length; k++) {
                long nowW = (long) i * base + (long) j * (base + 1) + (long) k * (base + 2);
                if (nowW > W) {
                    continue;
                }
                int last = (int) ((W - nowW) / (base + 3));
                long nowV = sv[0][i] + sv[1][j] + sv[2][k] + sv[3][Math.min(last, v[3].length)];
                ret = Math.max(nowV, ret);
            }
        }
    }
    System.out.println(ret);
}
public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    Node[] ns = new Node[n];
    for (int i = 0; i < n; i++) {
        ns[i] = new Node(i, sc.nextLong(), sc.nextLong());
    }
    ArrayList<Edge>[] es = new ArrayList[n];
    for (int i = 0; i < n; i++) {
        es[i] = new ArrayList<>();
    }
    Arrays.sort(ns, (n1, n2) -> Long.compare(n1.x, n2.x));
    createEdge(es, ns, n);
    Arrays.sort(ns, (n1, n2) -> Long.compare(n1.y, n2.y));
    createEdge(es, ns, n);
    boolean[] used = new boolean[n];
    long res = 0;
    PriorityQueue<Edge> queue = new PriorityQueue<>((e1, e2) -> Long.compare(e1.cost, e2.cost));
    used[0] = true;
    queue.addAll(es[0]);
    while (!queue.isEmpty()) {
        Edge e = queue.poll();
        if (used[e.to])
            continue;
        used[e.to] = true;
        res += e.cost;
        queue.addAll(es[e.to]);
    }
    System.out.println(res);
}
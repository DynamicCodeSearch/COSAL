static void solve() {
    int n = ni();
    int[][] co = new int[n][];
    for (int i = 0; i < n; i++) {
        co[i] = new int[] { ni(), ni() };
    }
    int[][] xi = new int[n][];
    for (int i = 0; i < n; i++) xi[i] = new int[] { co[i][0], i };
    Arrays.sort(xi, new Comparator<int[]>() {

        public int compare(int[] a, int[] b) {
            return a[0] - b[0];
        }
    });
    int[][] yi = new int[n][];
    for (int i = 0; i < n; i++) yi[i] = new int[] { co[i][1], i };
    Arrays.sort(yi, new Comparator<int[]>() {

        public int compare(int[] a, int[] b) {
            return a[0] - b[0];
        }
    });
    int[][] es = new int[2 * n - 2][];
    int p = 0;
    for (int i = 0; i < n - 1; i++) {
        es[p++] = new int[] { xi[i][1], xi[i + 1][1], xi[i + 1][0] - xi[i][0] };
        es[p++] = new int[] { yi[i][1], yi[i + 1][1], yi[i + 1][0] - yi[i][0] };
    }
    Arrays.sort(es, new Comparator<int[]>() {

        public int compare(int[] a, int[] b) {
            return a[2] - b[2];
        }
    });
    DJSet ds = new DJSet(n);
    long ret = 0;
    for (int[] e : es) {
        if (!ds.union(e[0], e[1])) {
            ret += e[2];
        }
    }
    out.println(ret);
}
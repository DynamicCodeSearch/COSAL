private static void solve(Scanner in) {
    int N = in.nextInt();
    char[] s = in.next().toCharArray();
    char[][] dp = new char[N + 1][4];
    dp[0][0] = S;
    dp[0][1] = S;
    dp[0][2] = W;
    dp[0][3] = W;
    dp[1][0] = S;
    dp[1][1] = W;
    dp[1][2] = S;
    dp[1][3] = W;
    for (int i = 1; i < N; i++) {
        for (int j = 0; j < 4; j++) {
            if (s[i] == o) {
                if (dp[i][j] == S) {
                    dp[i + 1][j] = dp[i - 1][j];
                } else {
                    dp[i + 1][j] = flip(dp[i - 1][j]);
                }
            } else {
                if (dp[i][j] == S) {
                    dp[i + 1][j] = flip(dp[i - 1][j]);
                } else {
                    dp[i + 1][j] = dp[i - 1][j];
                }
            }
        }
    }
    for (int j = 0; j < 4; j++) {
        if (dp[0][j] == dp[N][j]) {
            boolean ok = true;
            if (s[0] == o && dp[0][j] == S) {
                ok = dp[N - 1][j] == dp[1][j];
            } else if (s[0] == o && dp[0][j] == W) {
                ok = dp[N - 1][j] != dp[1][j];
            } else if (s[0] == x && dp[0][j] == S) {
                ok = dp[N - 1][j] != dp[1][j];
            } else {
                ok = dp[N - 1][j] == dp[1][j];
            }
            if (!ok) {
                continue;
            }
            StringBuilder ans = new StringBuilder();
            for (int i = 0; i < N; i++) {
                ans.append(dp[i][j]);
            }
            System.out.println(ans);
            return;
        }
    }
    System.out.println("-1");
}
private void solve(Scanner in, PrintWriter out) {
    int N = in.nextInt();
    int M = in.nextInt();
    FenwickTree bit = new FenwickTree(M + 2);
    ArrayList<Integer>[] multipliers = new ArrayList[M + 1];
    for (int i = 1; i <= M; i++) {
        multipliers[i] = new ArrayList<>();
        for (int j = i; j <= M; j += i) {
            multipliers[i].add(j);
        }
    }
    int[] l = new int[N];
    int[] r = new int[N];
    ArrayList<Integer>[] buckets = new ArrayList[M + 1];
    for (int i = 1; i <= M; i++) {
        buckets[i] = new ArrayList<>();
    }
    for (int i = 0; i < N; i++) {
        l[i] = in.nextInt();
        r[i] = in.nextInt();
        int w = r[i] - l[i] + 1;
        buckets[w].add(i);
    }
    int gone = 0;
    for (int d = 1; d <= M; d++) {
        for (int i : buckets[d]) {
            gone++;
            bit.add(l[i], 1);
            bit.add(r[i] + 1, -1);
        }
        int ans = N - gone;
        for (int m : multipliers[d]) {
            ans += bit.sum(m + 1);
        }
        out.println(ans);
    }
}
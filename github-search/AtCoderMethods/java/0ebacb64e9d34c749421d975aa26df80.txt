void solve() {
    int r = in.nextInt(), c = in.nextInt();
    char[][] a = new char[r][c];
    for (int i = 0; i < r; i++) {
        a[i] = in.nextToken().toCharArray();
    }
    int ans = Math.max(r, c);
    int[][] eq = new int[r - 1][];
    int[][] notEq = new int[r - 1][];
    for (int i = 0; i < r - 1; i++) {
        eq[i] = getEq(a[i], a[i + 1], true);
        notEq[i] = getEq(a[i], a[i + 1], false);
    }
    int[] lcp = new int[r - 1];
    int[] left = new int[r - 1], right = new int[r - 1], stack = new int[r];
    for (int pos = 0; pos < c; pos++) {
        for (int i = 0; i < r - 1; i++) {
            lcp[i] = Math.max(eq[i][pos], notEq[i][pos]) - pos;
        }
        int head;
        head = 1;
        stack[0] = -1;
        for (int i = 0; i < r - 1; i++) {
            while (head > 1 && lcp[i] <= lcp[stack[head - 1]]) {
                head--;
            }
            left[i] = stack[head - 1] + 1;
            stack[head++] = i;
        }
        head = 1;
        stack[0] = r - 1;
        for (int i = r - 2; i >= 0; i--) {
            while (head > 1 && lcp[i] <= lcp[stack[head - 1]]) {
                head--;
            }
            right[i] = stack[head - 1] - 1;
            stack[head++] = i;
        }
        for (int i = 0; i < r - 1; i++) {
            int dist = right[i] - left[i] + 1;
            ans = Math.max(ans, lcp[i] * (dist + 1));
        }
    }
    out.println(ans);
}
void run() {
    n = in.nextLong() + 1;
    if (DEBUG) {
        boolean[][] nice = new boolean[(int) n][(int) n];
        for (int a = 0; a < n; a++) {
            for (int b = 0; a + b < n; b++) {
                int u = a ^ b;
                int v = a + b;
                if (u < n) {
                    nice[u][v] = true;
                }
            }
        }
        for (int u = 0; u < n; u++) {
            for (int v = 0; v < n; v++) {
                System.out.print(nice[u][v] ? "0" : ".");
            }
            System.out.println();
        }
    }
    long level = 1;
    while (level < n) {
        memo.put(level, new TreeMap<>());
        level *= 2;
    }
    out.println(solve(level, 0));
}
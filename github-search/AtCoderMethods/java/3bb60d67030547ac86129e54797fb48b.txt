public void solve() {
    N = nextInt();
    A = nextInt();
    B = nextInt();
    a = new BigInteger(String.valueOf(A));
    c = new BigInteger[N];
    n = new BigInteger(String.valueOf(N));
    for (int i = 0; i < N; i++) {
        C = nextInt();
        c[i] = new BigInteger(String.valueOf(C));
    }
    Arrays.sort(c);
    
    if (A == 1) {
        for (int i = 0; i < N; i++) {
            out.println(c[i]);
        }
        return;
    }
    while (B > 0) {
        BigInteger tmp = c[0].multiply(a);
        
        if (tmp.compareTo(c[N - 1]) >= 0) {
            break;
        }
        c[0] = tmp;
        Arrays.sort(c);
        B--;
    }
    b = new BigInteger(String.valueOf(B));
    
    BigInteger div = b.divide(n);
    
    int remain = b.remainder(n).intValue();
    for (int i = 0; i < N; i++) {
        if (i < remain) {
            c[i] = c[i].multiply(a.modPow(div.add(BigInteger.ONE), MOD));
        } else {
            c[i] = c[i].multiply(a.modPow(div, MOD));
        }
    }
    for (int i = remain; i < N; i++) {
        out.println(c[i].mod(MOD));
    }
    for (int i = 0; i < remain; i++) {
        out.println(c[i].mod(MOD));
    }
}
void solve() {
    int N = sc.nextInt();
    A = sc.nextLong();
    long B = sc.nextLong();
    long[] a = new long[N];
    for (int i = 0; i < N; i++) a[i] = sc.nextLong();
    if (A == 1) {
        sort(a);
        for (int i = 0; i < N; i++) {
            out.println(a[i] % MOD);
        }
        return;
    }
    if (N == 1) {
        out.println(a[0] * mod_pow(A, B, MOD) % MOD);
        return;
    }
    P[] p = new P[N];
    for (int i = 0; i < N; i++) p[i] = new P(a[i]);
    
    Comparator<P> comp = new Comparator<P>() {

        public int compare(P a, P b) {
            if (a.x != b.x)
                return a.x < b.x ? -1 : 1;
            return Double.compare(a.y, b.y);
        }
    };
    sort(p, comp);
    while (B > 0 && p[0].x != p[N - 1].x) {
        B--;
        p[0].x++;
        p[0].times++;
        sort(p, comp);
    }
    long all = B / N;
    for (int i = 0; i < N; i++) {
        p[i].x += all;
        p[i].times += all;
    }
    B %= N;
    while (B > 0) {
        B--;
        p[0].x++;
        p[0].times++;
        sort(p, comp);
    }
    for (int i = 0; i < N; i++) {
        long v = p[i].a * mod_pow(A, p[i].times, MOD) % MOD;
        out.println(v);
    }
}
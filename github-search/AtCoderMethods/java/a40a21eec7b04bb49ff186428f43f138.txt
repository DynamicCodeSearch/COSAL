static long[] func2() {
    PriorityQueue<Long> q = new PriorityQueue<>();
    boolean[][] visited = new boolean[N][150];
    q.add(0l);
    int L1 = 8, L2 = 14;
    long mask1 = (1l << L1) - 1;
    long mask2 = ((1l << L2) - 1) << L1;
    long[] ans = new long[N];
    Arrays.fill(ans, Long.MAX_VALUE);
    int solved = 0;
    while (q.size() > 0) {
        Long cur = q.poll();
        long cost = cur >> (L1 + L2);
        int town = (int) ((cur & mask2) >> L1);
        int bi = (int) (cur & mask1);
        if (visited[town][bi])
            continue;
        visited[town][bi] = true;
        dist[town][bi] = cost;
        if (ans[town] == Long.MAX_VALUE)
            solved++;
        ans[town] = Math.min(ans[town], cost);
        if (solved == N)
            break;
        for (int i = 0; i < node[town].e.size(); i++) {
            int next = node[town].e.get(i);
            int c = node[town].c.get(i);
            int used = bi + minB[town] + c;
            if (used - minB[next] >= 150 || visited[next][used - minB[next]])
                continue;
            q.add(((cost + (c == 0 ? 1 : used)) << (L1 + L2)) + (next << L1) + used - minB[next]);
        }
    }
    return ans;
}
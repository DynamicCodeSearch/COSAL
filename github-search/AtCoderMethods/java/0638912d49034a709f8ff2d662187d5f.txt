static void solve() {
    int n = ni(), L = ni();
    int[] ts = new int[n];
    int[] vs = new int[n];
    for (int i = 0; i < n; i++) {
        ts[i] = ni();
        vs[i] = ni();
    }
    int tail = 0, head = 0;
    double[][] q = new double[n][];
    double V = 0;
    double S = 0;
    for (int i = 0; i < n; i++) {
        V += vs[i];
        S += (double) ts[i] * vs[i];
        while (V > L && tail < head) {
            double[] cur = q[tail++];
            if (V - cur[1] <= L) {
                S -= cur[0] * (double) (V - L);
                cur[1] = L - (V - cur[1]);
                q[--tail] = cur;
                V = L;
            } else {
                V -= cur[1];
                S -= (double) cur[0] * cur[1];
            }
        }
        out.printf("%.14f\n", S / L);
        q[head++] = new double[] { ts[i], vs[i] };
        outer: while (head - tail >= 2) {
            double[] last = q[head - 1];
            double[] last2 = q[head - 2];
            if (last2[0] < last[0]) {
                break outer;
            } else {
                last2[0] = (last[0] * last[1] + last2[0] * last2[1]) / (last[1] + last2[1]);
                last2[1] += last[1];
                head--;
            }
        }
    
    }
}
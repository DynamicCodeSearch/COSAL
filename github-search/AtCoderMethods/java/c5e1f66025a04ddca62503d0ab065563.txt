void dfs(int u, int p) {
    visited[u] = true;
    lowlink[u] = tin[u] = time++;
    stack.add(u);
    int children = 0;
    boolean cutPoint = false;
    for (int v : graph[u]) {
        if (v == p)
            continue;
        if (visited[v]) {
            
            lowlink[u] = Math.min(lowlink[u], tin[v]);
        } else {
            dfs(v, u);
            lowlink[u] = Math.min(lowlink[u], lowlink[v]);
            cutPoint |= lowlink[v] >= tin[u];
            
            if (lowlink[v] > tin[u])
                bridges.add("(" + u + "," + v + ")");
            ++children;
        }
    }
    if (p == -1)
        cutPoint = children >= 2;
    if (cutPoint)
        cutPoints.add(u);
    if (lowlink[u] == tin[u]) {
        List<Integer> component = new ArrayList<>();
        while (true) {
            int x = stack.pop();
            component.add(x);
            if (x == u)
                break;
        }
        components.add(component);
    }
}
public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    PrintWriter pw = new PrintWriter(System.out);
    int N = sc.nextInt();
    int M = sc.nextInt();
    Bridge[] bridge = new Bridge[M];
    for (int i = 0; i < M; i++) bridge[i] = new Bridge(sc.nextInt() - 1, sc.nextInt() - 1, sc.nextInt());
    int Q = sc.nextInt();
    Person[] person = new Person[Q];
    for (int i = 0; i < Q; i++) person[i] = new Person(i, sc.nextInt() - 1, sc.nextInt());
    Arrays.sort(bridge, (b1, b2) -> -Integer.compare(b1.y, b2.y));
    Arrays.sort(person, (p1, p2) -> -Integer.compare(p1.y, p2.y));
    UnionFind uf = new UnionFind(N);
    int[] cnt = new int[N];
    Arrays.fill(cnt, 1);
    int bi = 0;
    int pi = 0;
    int[] ans = new int[Q];
    while (pi < Q) {
        if (bi == M || bridge[bi].y <= person[pi].y) {
            ans[person[pi].idx] = cnt[uf.getRoot(person[pi].v)];
            pi++;
        } else {
            int a = bridge[bi].a;
            int b = bridge[bi].b;
            if (!uf.same(a, b)) {
                int cluster1 = cnt[uf.getRoot(a)];
                int cluster2 = cnt[uf.getRoot(b)];
                uf.unite(a, b);
                cnt[uf.getRoot(a)] = cluster1 + cluster2;
            }
            bi++;
        }
    }
    for (int i = 0; i < Q; i++) pw.println(ans[i]);
    sc.close();
    pw.close();
}
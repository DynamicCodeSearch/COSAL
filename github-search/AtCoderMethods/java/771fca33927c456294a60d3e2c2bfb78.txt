void solve() {
    int N = sc.nextInt();
    int[][] p = new int[N][2];
    for (int i = 0; i < N; i++) {
        int x = sc.nextInt();
        int y = sc.nextInt();
        p[i][0] = min(x, y);
        p[i][1] = max(x, y);
    }
    sort(p, new Comparator<int[]>() {

        @Override
        public int compare(int[] a, int[] b) {
            if (a[0] != b[0])
                return Integer.compare(a[0], b[0]);
            return Integer.compare(a[1], b[1]);
        }
    });
    long Rmax = 0, Bmax = 0;
    long Rmin = INF, Bmin = INF;
    for (int i = 0; i < N; i++) {
        Rmax = max(Rmax, p[i][0]);
        Rmin = min(Rmin, p[i][0]);
        Bmax = max(Bmax, p[i][1]);
        Bmin = min(Bmin, p[i][1]);
    }
    long ans = (Rmax - Rmin) * (Bmax - Bmin);
    long Gmax = max(Rmax, Bmax);
    long Gmin = min(Rmin, Bmin);
    ans = min(ans, (Gmax - Gmin) * f(p));
    out.println(ans);
}
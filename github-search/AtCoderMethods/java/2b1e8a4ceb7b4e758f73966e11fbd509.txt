public void solve(int testNumber, InputReader in, PrintWriter out) {
    int n = in.nextInt();
    Node[] nodes = new Node[n];
    for (int i = 0; i < n; i++) {
        nodes[i] = new Node();
    }
    for (int i = 1; i < n; i++) {
        int a = in.nextInt() - 1;
        int b = in.nextInt() - 1;
        int c = in.nextInt();
        nodes[a].edges.add(new Edge(c, nodes[b]));
        nodes[b].edges.add(new Edge(c, nodes[a]));
    }
    int nubmerQuery = in.nextInt();
    int k = in.nextInt() - 1;
    Queue<Node> q = new LinkedList<>();
    q.add(nodes[k]);
    nodes[k].marked = true;
    nodes[k].minDistansFromK = 0;
    while (!q.isEmpty()) {
        Node currentNode = q.poll();
        for (Edge e : currentNode.edges) {
            if (!e.connectsTo.marked) {
                q.add(e.connectsTo);
                e.connectsTo.marked = true;
                e.connectsTo.minDistansFromK = currentNode.minDistansFromK + e.cost;
            }
        }
    }
    for (int i = 0; i < nubmerQuery; i++) {
        int x = in.nextInt() - 1;
        int y = in.nextInt() - 1;
        out.println(nodes[x].minDistansFromK + nodes[y].minDistansFromK);
    }
}
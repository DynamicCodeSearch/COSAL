static void solve() {
    int sx = in.nextInt();
    int sy = in.nextInt();
    int gx = in.nextInt();
    int gy = in.nextInt();
    int n = in.nextInt();
    double[][] p = new double[n + 2][3];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 3; j++) {
            p[i][j] = in.nextDouble();
        }
    }
    p[n][0] = sx;
    p[n][1] = sy;
    p[n + 1][0] = gx;
    p[n + 1][1] = gy;
    ArrayList<Integer> s = new ArrayList<>();
    ArrayList<Integer> t = new ArrayList<>();
    ArrayList<Double> c = new ArrayList<>();
    for (int i = 0; i < n + 2; i++) {
        for (int j = i + 1; j < n + 2; j++) {
            s.add(i);
            t.add(j);
            double d = d(p[i][0], p[i][1], p[j][0], p[j][1]);
            c.add(Math.max(0, d - p[i][2] - p[j][2]));
        }
    }
    int m = s.size();
    int[] ss = new int[m];
    int[] tt = new int[m];
    double[] cc = new double[m];
    for (int i = 0; i < m; i++) {
        ss[i] = s.get(i);
        tt[i] = t.get(i);
        cc[i] = c.get(i);
    }
    double[][][] g = undirectedGraph(n + 2, ss, tt, cc);
    double[] d = dijkstra(g, n);
    dump(d);
    out.printf("%.12f\n", d[n + 1]);
}
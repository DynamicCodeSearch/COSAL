void run() {
    Scanner sc = new Scanner(System.in);
    n = sc.nextInt();
    m = sc.nextInt();
    t = sc.nextInt();
    A = new long[n];
    for (int i = 0; i < n; i++) {
        A[i] = sc.nextInt();
    }
    List<Edge>[] e = new LinkedList[n];
    List<Edge>[] rev = new LinkedList[n];
    for (int i = 0; i < n; i++) {
        e[i] = new LinkedList<Edge>();
        rev[i] = new LinkedList<Edge>();
    }
    for (int i = 0; i < m; i++) {
        int a = sc.nextInt() - 1;
        int b = sc.nextInt() - 1;
        int c = sc.nextInt();
        e[a].add(new Edge(b, c));
        rev[b].add(new Edge(a, c));
    }
    int[] min = new int[n];
    int[] revMin = new int[n];
    Arrays.fill(min, INF);
    Arrays.fill(revMin, INF);
    dijkstra(0, e, min);
    dijkstra(0, rev, revMin);
    long max = 0;
    for (int i = 0; i < n; i++) {
        if (min[i] == INF || revMin[i] == INF) {
            continue;
        }
        long rem = t - min[i] - revMin[i];
        if (0 < rem) {
            max = Math.max(max, A[i] * rem);
        }
    }
    System.out.println(max);
}
public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int a = scanner.nextInt() - 1;
    int b = scanner.nextInt() - 1;
    int[][] pinholes = new int[N][2];
    for (int i = 0; i < N; i++) {
        pinholes[i][0] = scanner.nextInt();
        pinholes[i][1] = scanner.nextInt();
    }
    int d = Math.abs(pinholes[a][0] - pinholes[b][0]) + Math.abs(pinholes[a][1] - pinholes[b][1]);
    for (int i = 0; i < N; i++) {
        Point point = new Point(pinholes[i][0] + pinholes[i][1], pinholes[i][1] - pinholes[i][0]);
        xSet.computeIfAbsent(point.x, integer -> new ArrayList<>()).add(point);
        ySet.computeIfAbsent(point.y, integer -> new ArrayList<>()).add(point);
        xTree.computeIfAbsent(point.x, integer -> new TreeSet<>(Comparator.comparing(Point::getY))).add(point);
        yTree.computeIfAbsent(point.y, integer -> new TreeSet<>(Comparator.comparing(Point::getX))).add(point);
    }
    xSet.values().forEach(points -> points.sort(Comparator.comparing(Point::getY)));
    ySet.values().forEach(points -> points.sort(Comparator.comparing(Point::getX)));
    Point root = new Point(pinholes[a][0] + pinholes[a][1], pinholes[a][1] - pinholes[a][0]);
    xTree.get(root.x).remove(root);
    yTree.get(root.y).remove(root);
    System.out.println(dfs(root, d) / 2);
}
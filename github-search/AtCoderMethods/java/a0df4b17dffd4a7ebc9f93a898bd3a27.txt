public static long bellmanFord(int[] a, int[] b, long[] c, int N, int M) {
    final long INF = Long.MAX_VALUE;
    final int NMAX = 1000;
    final int MMAX = 2000;
    long[] dist = new long[NMAX];
    for (int i = 0; i < N; i++) {
        
        dist[i] = INF;
    }
    dist[0] = 0L;
    for (int loop = 0; loop < N - 1; loop++) {
        for (int i = 0; i < M; i++) {
            if (dist[a[i] - 1] == INF)
                continue;
            if (dist[b[i] - 1] > dist[a[i] - 1] + c[i]) {
                dist[b[i] - 1] = dist[a[i] - 1] + c[i];
            }
        }
    }
    long ans = dist[N - 1];
    boolean[] negative = new boolean[NMAX];
    for (int i = 0; i < N; i++) {
        negative[i] = false;
    }
    for (int loop = 0; loop < N; loop++) {
        for (int i = 0; i < M; i++) {
            if (dist[a[i] - 1] == INF)
                continue;
            if (dist[b[i] - 1] > dist[a[i] - 1] + c[i]) {
                dist[b[i] - 1] = dist[a[i] - 1] + c[i];
                negative[b[i] - 1] = true;
            }
            if (negative[a[i] - 1] == true) {
                negative[b[i] - 1] = true;
            }
        }
    }
    if (negative[N - 1])
        return -INF;
    else
        return ans;
}
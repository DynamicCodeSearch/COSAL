public void solve() {
    int n = io.ri();
    int[] x = new int[n];
    int[] y = new int[n];
    for (int i = 0; i < n; i++) {
        x[i] = io.ri();
        y[i] = io.ri();
    }
    long[][] binom = new long[n + 1][n + 1];
    binom[0][0] = 1;
    for (int i = 1; i <= n; i++) {
        binom[i][0] = 1;
        for (int j = 1; j <= i; j++) binom[i][j] = (binom[i - 1][j - 1] + binom[i - 1][j]) % MOD;
    }
    long res = 0;
    for (int i = 3; i <= n; i++) res = (res + binom[n][i]) % MOD;
    int[] count = new int[n + 1];
    for (int i = 0; i < n; i++) {
        boolean[] marked = new boolean[n];
        for (int j = i + 1; j < n; j++) if (!marked[j]) {
            int k = 2;
            int x1 = x[j] - x[i];
            int y1 = y[j] - y[i];
            for (int q = j + 1; q < n; q++) {
                int x2 = x[q] - x[i];
                int y2 = y[q] - y[i];
                if (x1 * y2 - x2 * y1 == 0) {
                    k++;
                    marked[q] = true;
                }
            }
            if (k > 2) {
                count[k]++;
            }
        }
    }
    for (int i = n; i >= 3; i--) {
        if (count[i] > 0) {
            long minus = 0;
            for (int j = 3; j <= i; j++) minus = (minus + binom[i][j]) % MOD;
            res = (res - count[i] * minus + MOD) % MOD;
            for (int j = i - 1; j > 0; j--) count[j] -= count[i];
        }
    }
    io.writeLine(res + "");
}
void solve() {
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] a = sc.nextIntArray(N);
    int[][] dp = new int[N + 1][N + 1];
    int[] m = new int[N + 1];
    for (int i = 0; i < N; i++) {
        m[i + 1] = m[i] + a[i];
    }
    for (int i = 0; i < dp.length; i++) fill(dp[i], INF);
    dp[0][0] = 0;
    for (int i = 0; i < N; i++) {
        for (int g = 0; g <= i; g++) {
            {
                long w2 = dp[i][g];
                if (m[N] - m[i + 1] + w2 < K) {
                    w2 = K - m[N] + m[i + 1];
                }
                dp[i + 1][g] = Math.min(dp[i + 1][g], (int) w2);
            }
            long w = dp[i][g];
            long w2 = m[i] == 0 ? 1 : 1 + (m[i + 1] * w / m[i]);
            if (m[N] - m[i + 1] + w2 < K) {
                w2 = K - m[N] + m[i + 1];
            }
            
            if (w2 <= m[i + 1]) {
                if (g + 1 <= N)
                    dp[i + 1][g + 1] = Math.min(dp[i + 1][g + 1], (int) w2);
            }
        }
    }
    
    
    int ans = 0;
    for (int g = 0; g <= N; g++) {
        if (dp[N][g] <= K)
            ans = Math.max(ans, g);
    }
    out.println(ans);
}
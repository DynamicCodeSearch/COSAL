public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int a = scanner.nextInt() - 1;
    int b = scanner.nextInt() - 1;
    int[] xs = new int[n];
    int[] ys = new int[n];
    for (int i = 0; i < n; i++) {
        xs[i] = scanner.nextInt();
        ys[i] = scanner.nextInt();
    }
    int d = Math.abs(xs[a] - xs[b]) + Math.abs(ys[a] - ys[b]);
    for (int i = 0; i < n; i++) {
        Point point = new Point(xs[i] + ys[i], ys[i] - xs[i]);
        xSet.computeIfAbsent(point.x, integer -> {
            return new ArrayList<>();
        }).add(point);
        ySet.computeIfAbsent(point.y, integer -> {
            return new ArrayList<>();
        }).add(point);
        xTree.computeIfAbsent(point.x, integer -> {
            return new TreeSet<>(Comparator.comparing(Point::getY));
        }).add(point);
        yTree.computeIfAbsent(point.y, integer -> {
            return new TreeSet<>(Comparator.comparing(Point::getX));
        }).add(point);
    }
    xSet.values().forEach(new Consumer<List<Point>>() {

        @Override
        public void accept(List<Point> points) {
            points.sort(Comparator.comparingInt(Point::getY));
        }
    });
    ySet.values().forEach(new Consumer<List<Point>>() {

        @Override
        public void accept(List<Point> points) {
            points.sort(Comparator.comparingInt(Point::getX));
        }
    });
    Point root = new Point(xs[a] + ys[a], ys[a] - xs[a]);
    xTree.get(root.x).remove(root);
    yTree.get(root.y).remove(root);
    System.out.println(dfs(root, d) / 2);
}
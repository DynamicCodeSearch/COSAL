static void solve() {
    int n = ni();
    int[][] co = new int[n][];
    for (int i = 0; i < n; i++) {
        co[i] = new int[] { ni(), ni() };
    }
    Node root = null;
    root = insert(root, 0, new Node(co[0][0]));
    root = insert(root, 0, new Node(co[0][0]));
    long ret = 0;
    for (int i = 1; i < n; i++) {
        add(root, 0, i, -(co[i][1] - co[i][0]));
        add(root, i, 2 * i, (co[i - 1][1] - co[i - 1][0]));
        long L = get(root, i - 1).v;
        long R = get(root, i).v;
        if (co[i][0] < L) {
            ret += L - co[i][0];
        }
        if (co[i][0] > R) {
            ret += co[i][0] - R;
        }
        root = insertb(root, new Node(co[i][0]));
        root = insertb(root, new Node(co[i][0]));
    
    
    }
    out.println(ret);
}
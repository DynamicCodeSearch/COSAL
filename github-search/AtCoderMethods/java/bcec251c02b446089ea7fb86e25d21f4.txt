void solve() {
    int N = sc.nextInt();
    int[] A = sc.nextIntArray(3 * N);
    long[] B = new long[3 * N + 1];
    long[] C = new long[3 * N + 1];
    {
        PriorityQueue<Integer> q = new PriorityQueue<>();
        long sum = 0;
        for (int i = 0; i < N; i++) {
            sum += A[i];
            q.add(A[i]);
        }
        for (int i = N; i <= 3 * N; i++) {
            B[i] = sum;
            if (i < 3 * N) {
                sum += A[i];
                q.add(A[i]);
                sum -= q.poll();
            }
        }
    
    }
    {
        PriorityQueue<Integer> q = new PriorityQueue<>();
        long sum = 0;
        for (int i = 3 * N - 1; i >= 2 * N; i--) {
            sum += A[i];
            q.add(-A[i]);
        }
        for (int i = 2 * N - 1; i >= 0; i--) {
            C[i + 1] = sum;
            sum += A[i];
            q.add(-A[i]);
            sum += q.poll();
        }
        C[0] = sum;
    
    }
    long ans = -(1L << 58);
    for (int i = N; i <= 2 * N; i++) {
        ans = max(B[i] - C[i], ans);
    }
    out.println(ans);
}
private static long solve2(int n, int a, int[] x) {
    
    int X = Math.max(a, Arrays.stream(x).max().getAsInt());
    long[][][] dp = new long[n + 1][n + 1][n * X + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j <= n; j++) {
            for (int k = 0; k <= n * X; k++) {
                if (k - x[i - 1] >= 0 && j - 1 >= 0) {
                    dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k - x[i - 1]];
                } else {
                    dp[i][j][k] = dp[i - 1][j][k];
                }
            }
        }
    }
    long ans = 0;
    for (int i = 1; i <= n; i++) {
        ans += dp[n][i][i * a];
    }
    return ans;
}
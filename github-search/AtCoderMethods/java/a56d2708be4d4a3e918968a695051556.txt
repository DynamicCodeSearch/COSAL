public void solve(int testNumber, MyInput in, PrintWriter out) {
    X = in.nextInt();
    K = in.nextInt();
    r = new int[K + 1];
    System.arraycopy(in.nextIntArray(K), 0, r, 0, K);
    r[K] = Integer.MAX_VALUE;
    Q = in.nextInt();
    qs = in.nextIntArray2DWithIndex(Q, 2);
    Arrays.sort(qs, Comparator.comparingInt(a -> a[1]));
    for (int i = 0; i < Q; i++) {
        qs[i][2] = i;
    }
    Content.X = X;
    Buckets buckets = new Buckets(Q, (l, r) -> {
        int[] v = new int[r - l];
        for (int i = l; i < r; i++) v[i - l] = qs[i][1];
        return new Content(v);
    });
    int[] ans = new int[Q];
    Arrays.sort(qs, Comparator.comparingInt(a -> a[0]));
    for (int i = 0, j = 0; i <= K && j < Q; i++) {
        final int sign = i % 2 == 0 ? -1 : 1;
        for (; j < Q && qs[j][0] < r[i]; j++) {
            final int dt = qs[j][0] - (i == 0 ? 0 : r[i - 1]);
            BucketAccessor<Content, Integer> f = (Bucket<Content> b, int offset) -> b.t.get(offset, sign * dt);
            ans[j] = (int) buckets.<Integer>get(qs[j][2], f);
        }
        final int dt = r[i] - (i == 0 ? 0 : r[i - 1]);
        final int v = sign * dt;
        Consumer<Bucket<Content>> updater = b -> b.t.update(b.l, b.r, v);
        buckets.foreach(updater);
    }
    for (int a : ans) out.println(a);
}
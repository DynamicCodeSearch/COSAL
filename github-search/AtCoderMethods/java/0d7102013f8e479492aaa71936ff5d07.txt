public static void main(String[] args) {
    FS fs = new FS();
    
    int xs = fs.nextInt();
    int ys = fs.nextInt();
    
    int xt = fs.nextInt();
    int yt = fs.nextInt();
    
    int N = fs.nextInt();
    double[][] matrix = new double[N + 2][N + 2];
    int[] x = new int[N + 2];
    int[] y = new int[N + 2];
    int[] r = new int[N + 2];
    x[0] = xs;
    y[0] = ys;
    r[0] = 0;
    x[N + 1] = xt;
    y[N + 1] = yt;
    r[N + 1] = 0;
    for (int i = 0; i < N; i++) {
        x[i + 1] = fs.nextInt();
        y[i + 1] = fs.nextInt();
        r[i + 1] = fs.nextInt();
    }
    for (int i = 0; i < N + 2; i++) {
        matrix[i][i] = Double.MAX_VALUE;
    }
    
    for (int i = 0; i < N + 1; i++) {
        for (int j = i + 1; j < N + 2; j++) {
            double xi = (double) x[i];
            double xj = (double) x[j];
            double yi = (double) y[i];
            double yj = (double) y[j];
            double ri = (double) r[i];
            double rj = (double) r[j];
            double l = Math.max(0.0, Math.sqrt(Math.pow(xi - xj, 2.0) + Math.pow(yi - yj, 2.0)) - ri - rj);
            matrix[i][j] = l;
            matrix[j][i] = l;
        }
    }
    Node[] cost = dijkstra(N + 2, 0, matrix);
    System.out.println(cost[N + 1].cost);
}
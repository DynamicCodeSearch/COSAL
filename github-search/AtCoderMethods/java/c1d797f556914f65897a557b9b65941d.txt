static void solve() {
    int n = ni();
    int[] from = new int[n - 1];
    int[] to = new int[n - 1];
    for (int i = 0; i < n - 1; i++) {
        from[i] = ni() - 1;
        to[i] = ni() - 1;
    }
    int[][] g = packU(n, from, to);
    int[][] pars = parents3(g, 0);
    int[] par = pars[0], ord = pars[1], dep = pars[2];
    int[] route = new int[n];
    int p = 0;
    for (int j = n - 1; j >= 0; j = par[j]) {
        route[p++] = j;
    }
    Queue<Integer> q = new ArrayDeque<>();
    int[] color = new int[n];
    Arrays.fill(color, -1);
    for (int i = 0; i < p / 2; i++) {
        color[route[i]] = 1;
        q.add(route[i]);
    }
    for (int i = p / 2; i < p; i++) {
        color[route[i]] = 0;
        q.add(route[i]);
    }
    while (!q.isEmpty()) {
        int cur = q.poll();
        for (int e : g[cur]) {
            if (color[e] == -1) {
                color[e] = color[cur];
                q.add(e);
            }
        }
    }
    int one = 0;
    for (int i = 0; i < n; i++) one += color[i];
    int zero = n - one;
    if (zero > one) {
        out.println("Fennec");
    } else {
        out.println("Snuke");
    }
}
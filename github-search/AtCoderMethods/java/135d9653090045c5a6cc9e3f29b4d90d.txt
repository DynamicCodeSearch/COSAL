public void solve() {
    N = in.nextInt();
    M = in.nextInt();
    String[] map = in.nextStringArray(N);
    Dinic dinic = new Dinic(N + M);
    int s = N + M, t = N + M + 1;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            if (map[i].charAt(j) == '.')
                continue;
            if (map[i].charAt(j) == 'S') {
                dinic.addEdge(s, i, INF);
                dinic.addEdge(s, j + N, INF);
            } else if (map[i].charAt(j) == 'T') {
                dinic.addEdge(i, t, INF);
                dinic.addEdge(j + N, t, INF);
            } else {
                dinic.addBiEdge(i, j + N, 1);
            }
        }
    }
    long res = dinic.getMaxFlow(s, t);
    System.out.println(res >= INF ? -1 : res);
}
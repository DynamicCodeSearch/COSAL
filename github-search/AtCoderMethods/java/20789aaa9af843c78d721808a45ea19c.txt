void run() {
    int n = ni();
    int m = ni();
    int[] w = new int[n];
    int[] v = new int[n];
    for (int i = 0; i < n; ++i) {
        w[i] = ni();
        v[i] = ni();
    }
    int offset = w[0];
    for (int i = 0; i < n; ++i) {
        w[i] -= offset;
    }
    int[][][] dp = new int[n + 1][n * 4][n + 1];
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n * 4; ++j) {
            for (int k = 0; k < n; ++k) {
                
                dp[i + 1][j][k] = Math.max(dp[i + 1][j][k], dp[i][j][k]);
                
                if (j + w[i] < n * 4) {
                    dp[i + 1][j + w[i]][k + 1] = Math.max(dp[i + 1][j + w[i]][k + 1], dp[i][j][k] + v[i]);
                }
            }
        }
    }
    int max = 0;
    for (int i = 0; i <= n; ++i) {
        for (int j = 0; j < n * 4; ++j) {
            if (m < (long) i * offset + j) {
                continue;
            }
            max = Math.max(max, dp[n][j][i]);
        }
    }
    System.out.println(max);
}
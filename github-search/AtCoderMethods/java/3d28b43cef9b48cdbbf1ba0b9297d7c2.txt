public void solve(int testNumber, FastReader in, PrintWriter out) {
    int h = in.nextInt();
    int w = in.nextInt();
    int n = in.nextInt();
    int[] a = in.nextIntArray(n);
    int[][] map = new int[h][w];
    ArrayUtils.fill(map, -1);
    Stack<int[]> stack = new Stack<>();
    stack.add(new int[] { 0, 0 });
    int p = 0;
    while (a[p] == 0) {
        p++;
    }
    map[0][0] = (p + 1);
    a[p] -= 1;
    outer: while (!stack.isEmpty()) {
        int[] cur = stack.pop();
        int r = cur[0];
        int c = cur[1];
        for (int i = 0; i < 4; i++) {
            int nr = r + MiscUtils.DX4[i];
            int nc = c + MiscUtils.DY4[i];
            if (MiscUtils.isValidCell(nr, nc, h, w) && map[nr][nc] == -1) {
                stack.add(new int[] { nr, nc });
                while (a[p] == 0) {
                    p++;
                }
                map[nr][nc] = (p + 1);
                a[p] -= 1;
                continue outer;
            }
        }
    }
    ArrayUtils.printMap(out, map);
}
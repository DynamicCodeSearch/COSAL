static void solve() {
    int n = ni(), w = ni();
    int[] ws = new int[n];
    int[] vs = new int[n];
    for (int i = 0; i < n; i++) {
        ws[i] = ni();
        vs[i] = ni();
    }
    long[][] dp = new long[n + 1][3 * n + 1];
    for (int i = 0; i < n; i++) {
        long[][] ndp = new long[n + 1][3 * n + 1];
        for (int j = 0; j <= n; j++) {
            for (int k = 0; k <= 3 * n; k++) {
                if (j + 1 <= n && k + ws[i] - ws[0] <= 3 * n) {
                    ndp[j + 1][k + ws[i] - ws[0]] = Math.max(ndp[j + 1][k + ws[i] - ws[0]], dp[j][k] + vs[i]);
                }
                ndp[j][k] = Math.max(ndp[j][k], dp[j][k]);
            }
        }
        dp = ndp;
    }
    long ans = 0;
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= 3 * n; j++) {
            long inw = (long) i * ws[0] + j;
            if (inw <= w) {
                ans = Math.max(ans, dp[i][j]);
            }
        }
    }
    out.println(ans);
}
public static void main(String[] args) throws IOException {
    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
    String[] inputs = reader.readLine().split(" ");
    int N = Integer.parseInt(inputs[0]);
    int M = Integer.parseInt(inputs[1]);
    int R = Integer.parseInt(inputs[2]);
    inputs = reader.readLine().split(" ");
    int[] routes = Arrays.stream(inputs).mapToInt(Integer::parseInt).toArray();
    FloydWarshall floydWarshall = new FloydWarshall(N);
    for (int i = 0; i < M; i++) {
        inputs = reader.readLine().split(" ");
        floydWarshall.addEdge(Integer.parseInt(inputs[0]) - 1, Integer.parseInt(inputs[1]) - 1, Integer.parseInt(inputs[2]));
    }
    int[][] graph = floydWarshall.solve();
    ArrayList<ArrayList<Integer>> permutations = permute(routes);
    int min = Integer.MAX_VALUE;
    for (int i = 0; i < permutations.size(); i++) {
        ArrayList<Integer> permutation = permutations.get(i);
        int sum = 0;
        for (int j = 0; j < permutation.size() - 1; j++) {
            sum += graph[permutation.get(j) - 1][permutation.get(j + 1) - 1];
        }
        min = Math.min(min, sum);
    }
    System.out.println(min);
}
void run() {
    Scanner sc = new Scanner(System.in);
    C = sc.nextInt();
    R = sc.nextInt();
    N = sc.nextInt();
    ArrayList<State> lis = new ArrayList<>();
    for (int i = 0; i < N; ++i) {
        boolean f = true;
        ArrayList<State> tmp = new ArrayList<>();
        for (int t = 0; t < 2; ++t) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            f &= x == 0 || x == C || y == 0 || y == R;
            if (f)
                tmp.add(new State(edge_id(x, y), i));
        }
        if (f) {
            lis.addAll(tmp);
        }
    }
    Collections.sort(lis, new Comparator<State>() {

        @Override
        public int compare(State o1, State o2) {
            return Integer.compare(o1.id, o2.id);
        }
    });
    ArrayDeque<Integer> stk = new ArrayDeque<Integer>();
    int[] col = new int[N];
    for (int i = 0; i < lis.size(); ++i) {
        State s = lis.get(i);
        if (col[s.col] == 0) {
            stk.addLast(s.col);
            ++col[s.col];
        } else {
            int pre = stk.pollLast();
            if (pre != s.col) {
                System.out.println("NO");
                return;
            }
            --col[s.col];
        }
    }
    System.out.println("YES");
}
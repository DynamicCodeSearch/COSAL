private static boolean solve(List<int[]> points) {
    int n = points.size();
    if (n <= 1) {
        return true;
    }
    Set<Integer> set = new HashSet<>();
    for (int[] p : points) {
        set.add(p[0]);
        set.add(p[1]);
    }
    List<Integer> arr = new ArrayList<>(set);
    Collections.sort(arr);
    Map<Integer, Integer> mp = new HashMap<>();
    for (int i = 0; i < arr.size(); i++) {
        mp.put(arr.get(i), i);
    }
    int M = mp.size();
    int[] io = new int[M];
    int[][] ranges = new int[n][2];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 2; j++) {
            ranges[i][j] = mp.get(points.get(i)[j]);
            io[ranges[i][j]] = i;
        }
    }
    int from = Math.min(ranges[0][0], ranges[0][1]);
    int to = Math.max(ranges[0][0], ranges[0][1]);
    if (!check(new int[][] { { from + 1, to - 1 } }, io)) {
        return false;
    }
    if (!check(new int[][] { { to + 1, M - 1 }, { 0, from - 1 } }, io)) {
        return false;
    }
    return true;
}
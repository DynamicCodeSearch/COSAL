private int dp(int trg) {
    ArrayList<Integer> ls = graph.get(trg);
    if (ls.size() == 0)
        return 0;
    int[][] dp = new int[ls.size() + 1][xs[trg] + 1];
    for (int i = 0; i < dp.length; i++) Arrays.fill(dp[i], INF);
    dp[0][0] = 0;
    
    for (int i = 1; i < dp.length; i++) {
        int n = ls.get(i - 1);
        for (int j = xs[trg]; j >= 0; j--) {
            if (j + xs[n] <= xs[trg]) {
                dp[i][j + xs[n]] = Math.min(dp[i][j + xs[n]], dp[i - 1][j] + ys[n]);
            }
            if (j + ys[n] <= xs[trg]) {
                dp[i][j + ys[n]] = Math.min(dp[i][j + ys[n]], dp[i - 1][j] + xs[n]);
            }
        }
    }
    int ret = INF;
    for (int i = 0; i < dp[dp.length - 1].length; i++) {
        ret = Math.min(ret, dp[dp.length - 1][i]);
    }
    return ret;
}
private boolean[] solve() {
    for (int i = 0; i < 2 * n; i++) {
        dfs1.dfs(i);
    }
    int[] l = new int[2 * n];
    int[] r = new int[2 * n];
    int cc = 0;
    for (int i = 2 * n - 1; i >= 0; i--) {
        int v = dfs1.p[i];
        if (!dfs2.z[v]) {
            l[cc] = dfs2.pn;
            dfs2.dfs(v);
            r[cc] = dfs2.pn;
            cc++;
        }
    }
    int[] c = new int[2 * n];
    for (int i = 0; i < cc; i++) {
        for (int j = l[i]; j < r[i]; j++) {
            c[dfs2.p[j]] = i;
        }
    }
    for (int i = 0; i < n; i++) {
        if (c[2 * i] == c[2 * i + 1]) {
            return null;
        }
    }
    
    return new boolean[0];
}
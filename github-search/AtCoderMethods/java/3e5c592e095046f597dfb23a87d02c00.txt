static void solve() {
    int n = ni(), ma = ni();
    int[] from = new int[ma + 10];
    int[] to = new int[ma + 10];
    for (int i = 0; i < ma; i++) {
        to[i] = ni() - 1;
        from[i] = ni() - 1;
    }
    boolean[][] h = new boolean[n][n];
    for (int i = 0; i < ma; i++) {
        h[from[i]][to[i]] = true;
    }
    for (int i = 0; i < n; i++) h[i][i] = true;
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                h[i][j] |= h[i][k] & h[k][j];
            }
        }
    }
    int mb = ni();
    int[] from2 = new int[mb];
    int[] to2 = new int[mb];
    for (int i = 0; i < mb; i++) {
        to2[i] = ni() - 1;
        from2[i] = ni() - 1;
    }
    boolean[] dp = new boolean[1 << mb];
    dp[0] = true;
    for (int i = 0; i < 1 << mb; i++) {
        if (dp[i]) {
            inner: for (int j = 0; j < mb; j++) {
                if (dp[i | 1 << j])
                    continue;
                if (i << ~j >= 0) {
                    
                    if (h[from2[j]][to2[j]])
                        continue;
                    for (int k = 0; k < mb; k++) {
                        if (i << ~k < 0 && h[from2[j]][to2[k]]) {
                            continue inner;
                        }
                    }
                    dp[i | 1 << j] = true;
                }
            }
        }
    }
    int[][] g = packD(n, from, to, ma);
    int max = 0;
    for (int i = 0; i < 1 << mb; i++) {
        if (!dp[i])
            continue;
        boolean[] dead = new boolean[n];
        for (int j = 0; j < mb; j++) {
            if (i << ~j >= 0) {
                dead[to2[j]] = true;
            }
        }
        int[] q = new int[n];
        int[] din = new int[n];
        for (int j = 0; j < n; j++) {
            for (int e : g[j]) {
                din[e]++;
            }
        }
        int qp = 0;
        for (int j = 0; j < n; j++) {
            if (din[j] == 0 && !dead[j]) {
                q[qp++] = j;
            }
        }
        for (int qt = 0; qt < qp; qt++) {
            int cur = q[qt];
            for (int e : g[cur]) {
                din[e]--;
                if (din[e] == 0 && !dead[e]) {
                    q[qp++] = e;
                }
            }
        }
        
        max = Math.max(max, qp);
    }
    out.println(max);
}
public static void main(String[] args) {
    FastScanner sc = new FastScanner();
    int N = sc.nextInt();
    int[][] p1 = new int[N][3];
    for (int i = 0; i < N; i++) {
        p1[i][2] = i;
        p1[i][0] = sc.nextInt();
        p1[i][1] = sc.nextInt();
    }
    int[][] p2 = Arrays.copyOf(p1, N);
    Arrays.sort(p1, (a, b) -> a[0] - b[0]);
    Arrays.sort(p2, (a, b) -> a[1] - b[1]);
    int[] from = new int[(N - 1) * 2];
    int[] to = new int[(N - 1) * 2];
    int[] w = new int[(N - 1) * 2];
    for (int i = 0; i < N - 1; i++) {
        from[i] = p1[i][2];
        to[i] = p1[i + 1][2];
        w[i] = Math.min(Math.abs(p1[i][0] - p1[i + 1][0]), Math.abs(p1[i][1] - p1[i + 1][1]));
        from[i + (N - 1)] = p2[i][2];
        to[i + (N - 1)] = p2[i + 1][2];
        w[i + (N - 1)] = Math.min(Math.abs(p2[i][0] - p2[i + 1][0]), Math.abs(p2[i][1] - p2[i + 1][1]));
    }
    int ans = kruskal(from, to, w, N)[1];
    System.out.println(ans);
}
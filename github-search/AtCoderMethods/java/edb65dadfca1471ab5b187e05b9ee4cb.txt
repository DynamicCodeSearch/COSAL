public static int[] dijk(int[][] g, int from) {
    int n = g.length;
    final int[] td = new int[n];
    Arrays.fill(td, Integer.MAX_VALUE);
    TreeSet<Integer> q = new TreeSet<Integer>(new Comparator<Integer>() {

        public int compare(Integer a, Integer b) {
            if (td[a] - td[b] != 0)
                return td[a] - td[b];
            return a - b;
        }
    });
    q.add(from);
    td[from] = 0;
    while (q.size() > 0) {
        int cur = q.pollFirst();
        for (int i = 0; i < g[cur].length; i++) {
            int next = g[cur][i];
            int nd = td[cur] + 1;
            if (nd < td[next]) {
                q.remove(next);
                td[next] = nd;
                q.add(next);
            }
        }
    }
    return td;
}
private void solve(Scanner sc) {
    K = sc.nextInt();
    int N = sc.nextInt();
    long[] v = new long[N];
    String[] w = new String[N];
    for (int i = 0; i < N; ++i) {
        v[i] = sc.nextInt();
        w[i] = sc.next();
        String s = String.valueOf(v[i]);
        if (s.length() == 1) {
            confirmedMap.put(s.charAt(0), w[i]);
        } else {
            vwList.add(new Pair<>(s, w[i]));
        }
    }
    Map<Character, Integer> chIdxMap = new HashMap<>();
    for (int i = 0; i < K; ++i) {
        chIdxMap.put(String.valueOf(i + 1).charAt(0), i);
    }
    int[] len = new int[K];
    Arrays.fill(len, 1);
    Map<Character, String> map = new TreeMap<>();
    for (int i = 0; i < (int) Math.pow(3, K); ++i) {
        
        map = new TreeMap<>();
        map.putAll(confirmedMap);
        boolean flag = true;
        for (Pair<String> pair : vwList) {
            int index = 0;
            for (int j = 0; j < pair.a.length(); ++j) {
                char ch = pair.a.charAt(j);
                int idx = chIdxMap.get(ch);
                if (index + len[idx] <= pair.b.length()) {
                    if (map.containsKey(ch)) {
                        String s = pair.b.substring(index, index + len[idx]);
                        index += len[idx];
                        if (!map.get(ch).equals(s)) {
                            
                            flag = false;
                            break;
                        }
                    } else {
                        map.put(ch, pair.b.substring(index, index + len[idx]));
                        index += len[idx];
                    }
                } else {
                    
                    flag = false;
                    break;
                }
            }
            if (flag) {
                StringBuilder sb = new StringBuilder();
                for (char ch : pair.a.toCharArray()) {
                    sb.append(map.get(ch));
                }
                if (!pair.b.equals(sb.toString())) {
                    
                    flag = false;
                    break;
                }
            }
        }
        if (flag) {
            
            for (String s : map.values()) {
                _out.println(s);
            }
            break;
        }
        
        ++len[K - 1];
        if (len[K - 1] > 3) {
            int idx = K - 1;
            while (len[idx] > 3) {
                if (idx - 1 < 0) {
                    break;
                }
                len[idx] = 1;
                ++len[idx - 1];
                --idx;
            }
        }
    }
}
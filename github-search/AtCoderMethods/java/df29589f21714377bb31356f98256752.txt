public void solve(int testNumber, FastScanner in, PrintWriter out) {
    int n = in.nextInt();
    int[] a = new int[n];
    int[] where = new int[n];
    for (int i = 0; i < n; i++) {
        a[i] = in.nextInt() - 1;
        where[a[i]] = i;
    }
    int[] res = new int[n];
    int ptr = 0;
    IntervalTree tree = new IntervalTree(n);
    tree.build(a);
    PriorityQueue<Segment> pq = new PriorityQueue<>();
    pq.offer(new Segment(0, n - 1, tree.min(0, n - 1)));
    while (!pq.isEmpty()) {
        Segment seg = pq.poll();
        int l = seg.l;
        int r = seg.r;
        if (l > r) {
            continue;
        }
        int xi = tree.min(l, r);
        int i = where[xi];
        int xj = tree.min(i + 1, r);
        int j = where[xj];
        res[ptr++] = xi;
        res[ptr++] = xj;
        pq.offer(new Segment(l, i - 1, tree.min(l, i - 1)));
        pq.offer(new Segment(j + 1, r, tree.min(j + 1, r)));
        pq.offer(new Segment(i + 1, j - 1, tree.min(i + 1, j - 1)));
    }
    for (int i = 0; i < n; i++) {
        if (i > 0) {
            out.print(" ");
        }
        out.print(res[i] + 1);
    }
    out.println();
}
public void solve(int testNumber, InputReader in, PrintWriter out) {
    int N = in.nextInt();
    adj = (List<Integer>[]) new LinkedList[N];
    for (int i = 0; i < N; i++) adj[i] = new LinkedList<>();
    for (int i = 0; i < N - 1; i++) {
        int v = in.nextInt() - 1;
        int w = in.nextInt() - 1;
        adj[v].add(w);
        adj[w].add(v);
    }
    assigned = new int[N];
    Arrays.fill(assigned, -1);
    Queue<TaskE.Node> pq = new PriorityQueue<>();
    long K = in.nextLong();
    for (int i = 0; i < K; i++) {
        int vertex = in.nextInt() - 1;
        int price = in.nextInt();
        assigned[vertex] = price;
        pq.add(new TaskE.Node(vertex, price));
    }
    while (!pq.isEmpty()) {
        TaskE.Node node = pq.poll();
        for (int w : adj[node.vertex]) {
            if (assigned[w] == -1) {
                assigned[w] = assigned[node.vertex] + 1;
                pq.add(new TaskE.Node(w, assigned[w]));
            } else if (Math.abs(assigned[w] - assigned[node.vertex]) != 1) {
                out.println("No");
                return;
            }
        }
    }
    out.println("Yes");
    for (int i = 0; i < N; i++) {
        out.println(assigned[i]);
    }
}
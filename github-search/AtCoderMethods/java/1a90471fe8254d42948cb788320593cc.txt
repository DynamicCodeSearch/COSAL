public void solve(int testNumber, InputReader in, PrintWriter out) {
    int[][] a = in.nextIntArrayArray0indexed(5, 5);
    int[] dp = new int[1 << 25];
    dp[0] = 1;
    int MOD = 1_000_000_007;
    for (int i = 0; i < (1 << 25) - 1; i++) {
        if (dp[i] == 0)
            continue;
        int next = Integer.bitCount(i);
        for (int j = 0; j < 25; j++) {
            if ((i >> j & 1) == 1)
                continue;
            int y = j / 5;
            int x = j % 5;
            if (a[y][x] != -1 && a[y][x] != next)
                continue;
            if (RangeUtils.isInside(y - 1, x, 5, 5) && RangeUtils.isInside(y + 1, x, 5, 5)) {
                boolean exist1 = (i >> ((y - 1) * 5 + x) & 1) == 1;
                boolean exist2 = (i >> ((y + 1) * 5 + x) & 1) == 1;
                if (exist1 ^ exist2)
                    continue;
            }
            if (RangeUtils.isInside(y, x - 1, 5, 5) && RangeUtils.isInside(y, x + 1, 5, 5)) {
                boolean exist1 = (i >> (y * 5 + x - 1) & 1) == 1;
                boolean exist2 = (i >> (y * 5 + x + 1) & 1) == 1;
                if (exist1 ^ exist2)
                    continue;
            }
            int tmp = i | 1 << (y * 5 + x);
            dp[tmp] = (dp[tmp] + dp[i]) % MOD;
        }
    }
    out.println(dp[(1 << 25) - 1]);
}
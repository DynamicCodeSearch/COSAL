void solve(int testNumber, InputReader in, PrintWriter out) {
    n = in.nextInt();
    k = in.nextInt();
    l = in.nextInt();
    graph = (ArrayList<Integer>[][]) new ArrayList[2][n + 1];
    for (int i = 0; i < 2; ++i) for (int j = 0; j <= n; ++j) graph[i][j] = new ArrayList<Integer>();
    for (int i = 0; i < k; ++i) {
        p = in.nextInt();
        q = in.nextInt();
        graph[0][p].add(q);
        graph[0][q].add(p);
    }
    for (int i = 0; i < l; ++i) {
        r = in.nextInt();
        s = in.nextInt();
        graph[1][r].add(s);
        graph[1][s].add(r);
    }
    comp = new int[2][n + 1];
    int[] ans = new int[n + 1];
    
    for (int j = 1; j <= n; ++j) {
        for (int i = 0; i < 2; ++i) if (comp[i][j] == 0) {
            ptr = j;
            dfs(graph[i], j, comp[i]);
        }
    }
    Map<Long, Integer> map = new TreeMap<Long, Integer>();
    for (int i = 1; i <= n; ++i) {
        long key = ((long) comp[0][i] << 32) | comp[1][i];
        if (!map.containsKey(key))
            map.put(key, 1);
        else
            map.put(key, map.get(key) + 1);
    }
    for (int i = 1; i <= n; ++i) {
        long key = ((long) comp[0][i] << 32) | comp[1][i];
        ans[i] += map.get(key);
    }
    out.print(ans[1]);
    for (int i = 2; i <= n; ++i) out.print(" " + ans[i]);
    out.println();
}
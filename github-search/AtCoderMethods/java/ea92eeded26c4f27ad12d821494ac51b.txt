public void solve(int testNumber, InputReader in, PrintWriter out) {
    n = in.nextInt();
    id = new int[n + 2];
    sz = new int[n + 2];
    Arrays.fill(sz, 1);
    TaskD.XX[] Xs = new TaskD.XX[n];
    TaskD.XX[] Ys = new TaskD.XX[n];
    for (int i = 0; i < n; ++i) {
        int a = in.nextInt();
        int b = in.nextInt();
        id[i + 1] = i + 1;
        Xs[i] = new TaskD.XX(a, i);
        Ys[i] = new TaskD.XX(b, i);
    }
    Arrays.sort(Xs, (o1, o2) -> {
        if (o1.v < o2.v)
            return -1;
        else if (o1.v > o2.v)
            return 1;
        else
            return 0;
    });
    Arrays.sort(Ys, (o1, o2) -> {
        if (o1.v < o2.v)
            return -1;
        else if (o1.v > o2.v)
            return 1;
        else
            return 0;
    });
    ArrayList<TaskD.Point> pts = new ArrayList<>();
    for (int i = 0; i + 1 < n; ++i) {
        pts.add(new TaskD.Point(Math.abs(Xs[i].v - Xs[i + 1].v), Xs[i].idd + 1, Xs[i + 1].idd + 1));
        pts.add(new TaskD.Point(Math.abs(Ys[i].v - Ys[i + 1].v), Ys[i].idd + 1, Ys[i + 1].idd + 1));
    }
    pts.sort((o1, o2) -> {
        if (o1.d < o2.d)
            return -1;
        else if (o1.d > o2.d)
            return 1;
        else
            return 0;
    });
    
    
    
    int ans = 0;
    for (TaskD.Point x : pts) {
        if (!find(x.a, x.b)) {
            
            union(x.a, x.b);
            ans += x.d;
        }
        if (sz[root(x.a)] == n || sz[root(x.b)] == n)
            break;
    }
    out.println(ans);
}
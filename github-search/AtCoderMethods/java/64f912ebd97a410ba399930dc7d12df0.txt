public void solve() {
    int N = in.nextInt();
    int[] a = in.nextIntArray(3 * N);
    PriorityQueue<Integer> pqL = new PriorityQueue<>((x, y) -> (x - y));
    PriorityQueue<Integer> pqR = new PriorityQueue<>((x, y) -> (y - x));
    long leftSum = 0;
    for (int i = 0; i < N; i++) {
        pqL.add(a[i]);
        leftSum += a[i];
    }
    long rightSum = 0;
    for (int i = 2 * N; i < 3 * N; i++) {
        pqR.add(a[i]);
        rightSum += a[i];
    }
    long[] ls = new long[N + 1];
    long[] rs = new long[N + 1];
    ls[0] = leftSum;
    for (int i = N; i < 2 * N; i++) {
        pqL.add(a[i]);
        leftSum += a[i] - pqL.poll();
        ls[i - N + 1] = leftSum;
    }
    rs[0] = rightSum;
    for (int i = 2 * N - 1; i >= N; i--) {
        pqR.add(a[i]);
        rightSum += a[i] - pqR.poll();
        rs[2 * N - i] = rightSum;
    }
    long res = Long.MIN_VALUE;
    for (int i = 0; i <= N; i++) {
        res = Math.max(res, ls[i] - rs[N - i]);
    }
    System.out.println(res);
}
private boolean check(char[][] after, char[][] before, int H, int W) {
    char[][] res = new char[H][W];
    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            res[i][j] = '.';
        }
    }
    if (H == 1 && W == 1)
        res[0][0] = before[0][0];
    else if (H == 1) {
        for (int j = 0; j < W; j++) {
            if (before[0][j] == '#') {
                res[0][j] = '#';
                if (j == 0)
                    res[0][j + 1] = '#';
                else if (j == W - 1)
                    res[0][j - 1] = '#';
                else {
                    res[0][j - 1] = '#';
                    res[0][j + 1] = '#';
                }
            }
        }
    } else if (W == 1) {
        for (int i = 0; i < H; i++) {
            if (before[i][0] == '#') {
                res[i][0] = '#';
                if (i == 0)
                    res[i + 1][0] = '#';
                else if (i == W - 1)
                    res[i - 1][0] = '#';
                else {
                    res[i - 1][0] = '#';
                    res[i + 1][0] = '#';
                }
            }
        }
    } else {
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if (before[i][j] == '#') {
                    res[i][j] = '#';
                    if (i == 0 && j == 0) {
                        res[i][j + 1] = '#';
                        res[i + 1][j + 1] = '#';
                        res[i + 1][j] = '#';
                    } else if (i == 0 && j == W - 1) {
                        res[i][j - 1] = '#';
                        res[i + 1][j - 1] = '#';
                        res[i + 1][j] = '#';
                    } else if (i == H - 1 && j == 0) {
                        res[i][j + 1] = '#';
                        res[i - 1][j + 1] = '#';
                        res[i - 1][j] = '#';
                    } else if (i == H - 1 && j == W - 1) {
                        res[i][j - 1] = '#';
                        res[i - 1][j - 1] = '#';
                        res[i - 1][j] = '#';
                    } else if (i == 0) {
                        res[i][j - 1] = '#';
                        res[i + 1][j - 1] = '#';
                        res[i + 1][j] = '#';
                        res[i + 1][j + 1] = '#';
                        res[i][j + 1] = '#';
                    } else if (i == H - 1) {
                        res[i][j - 1] = '#';
                        res[i - 1][j - 1] = '#';
                        res[i - 1][j] = '#';
                        res[i - 1][j + 1] = '#';
                        res[i][j + 1] = '#';
                    } else if (j == 0) {
                        res[i - 1][j] = '#';
                        res[i - 1][j + 1] = '#';
                        res[i][j + 1] = '#';
                        res[i + 1][j + 1] = '#';
                        res[i + 1][j] = '#';
                    } else if (j == W - 1) {
                        res[i - 1][j] = '#';
                        res[i - 1][j - 1] = '#';
                        res[i][j - 1] = '#';
                        res[i + 1][j - 1] = '#';
                        res[i + 1][j] = '#';
                    } else {
                        res[i - 1][j - 1] = '#';
                        res[i - 1][j] = '#';
                        res[i - 1][j + 1] = '#';
                        res[i][j - 1] = '#';
                        res[i][j] = '#';
                        res[i][j + 1] = '#';
                        res[i + 1][j - 1] = '#';
                        res[i + 1][j] = '#';
                        res[i + 1][j + 1] = '#';
                    }
                }
            }
        }
    }
    boolean ans = true;
    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            ans &= (after[i][j] == res[i][j]);
        }
    }
    return ans;
}
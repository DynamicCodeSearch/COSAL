int calc(int[] cum, int w) {
    int ans = 2;
    ArrayDeque<List<Integer>> stack = new ArrayDeque<>();
    for (int j = 0; j < w; ++j) {
        ans = Math.max(ans, cum[j]);
        int d = j;
        while (!stack.isEmpty() && (cum[j] == 0 || stack.peekLast().get(0) > cum[j])) {
            List<Integer> pair = stack.pollLast();
            ans = Math.max(ans, (pair.get(0) + 1) * (j - pair.get(1) + 1));
            d = Math.min(d, pair.get(1));
        }
        if (cum[j] == 0)
            continue;
        stack.addLast(Arrays.asList(cum[j], d));
    }
    while (!stack.isEmpty()) {
        List<Integer> pair = stack.pollLast();
        ans = Math.max(ans, (pair.get(0) + 1) * (w - pair.get(1) + 1));
    }
    return ans;
}
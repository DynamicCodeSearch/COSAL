void solve() {
    int n = in.nextInt(), m = in.nextInt();
    Edge[] es = new Edge[m];
    for (int i = 0; i < m; i++) {
        int a = in.nextInt() - 1, b = in.nextInt() - 1;
        int y = in.nextInt();
        es[i] = new Edge(a, b, y);
    }
    int Q = in.nextInt();
    Query[] qs = new Query[Q];
    for (int i = 0; i < Q; i++) {
        int v = in.nextInt() - 1, w = in.nextInt();
        qs[i] = new Query(i, v, w);
    }
    Arrays.sort(es);
    Arrays.sort(qs);
    UnionFindTree uft = new UnionFindTree(n);
    int[] res = new int[Q];
    int eidx = 0, qidx = 0;
    while (eidx < m || qidx < Q) {
        if (eidx == m || (qidx < Q && es[eidx].y <= qs[qidx].w)) {
            
            res[qs[qidx].id] = uft.size(uft.find(qs[qidx].v));
            qidx++;
        } else {
            
            uft.unite(es[eidx].a, es[eidx].b);
            eidx++;
        }
    }
    for (int i = 0; i < Q; i++) {
        out.println(res[i]);
    }
    out.close();
}
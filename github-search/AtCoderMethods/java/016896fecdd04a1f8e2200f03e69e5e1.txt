public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    vNum = sc.nextInt();
    Vertice[] V = new Vertice[vNum];
    graph = new ArrayList[vNum];
    for (int i = 0; i < vNum; i++) {
        graph[i] = new ArrayList<Edge>();
    }
    for (int i = 0; i < vNum; i++) {
        int x = sc.nextInt();
        int y = sc.nextInt();
        V[i] = new Vertice(i, x, y);
    }
    Arrays.sort(V, new Comparator<Vertice>() {

        public int compare(Vertice vertice1, Vertice vertice2) {
            return vertice1.x - vertice2.x;
        }
    });
    for (int i = 0; i < vNum - 1; i++) {
        Vertice v1 = V[i];
        Vertice v2 = V[i + 1];
        graph[v1.id].add(new Edge(v2.id, v2.x - v1.x));
        graph[v2.id].add(new Edge(v1.id, v2.x - v1.x));
    }
    Arrays.sort(V, new Comparator<Vertice>() {

        public int compare(Vertice vertice1, Vertice vertice2) {
            return vertice1.y - vertice2.y;
        }
    });
    for (int i = 0; i < vNum - 1; i++) {
        Vertice v1 = V[i];
        Vertice v2 = V[i + 1];
        graph[v1.id].add(new Edge(v2.id, v2.y - v1.y));
        graph[v2.id].add(new Edge(v1.id, v2.y - v1.y));
    }
    int ans = prim();
    System.out.println(ans);
}
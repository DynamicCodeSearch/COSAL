private static long solve(int n, long[] a) {
    long[][] lrs = new long[n + 1][2];
    PriorityQueue<Long> lq = new PriorityQueue<>((x, y) -> Long.compare(x, y));
    PriorityQueue<Long> rq = new PriorityQueue<>((x, y) -> Long.compare(y, x));
    for (int i = 0; i < n; i++) {
        lq.add(a[i]);
        rq.add(a[3 * n - 1 - i]);
    }
    long lfsum = lq.stream().reduce((x, y) -> x + y).get();
    long rtsum = rq.stream().reduce((x, y) -> x + y).get();
    for (int i = 0; i <= n; i++) {
        lrs[i][0] = lfsum;
        long in = a[n + i];
        lq.add(in);
        long out = lq.poll();
        lfsum -= out;
        lfsum += in;
    }
    for (int i = 0; i <= n; i++) {
        lrs[n - i][1] = rtsum;
        long in = a[2 * n - 1 - i];
        rq.add(in);
        long out = rq.poll();
        rtsum -= out;
        rtsum += in;
    }
    long ans = Long.MIN_VALUE;
    for (long[] lr : lrs) ans = Math.max(ans, lr[0] - lr[1]);
    return ans;
}
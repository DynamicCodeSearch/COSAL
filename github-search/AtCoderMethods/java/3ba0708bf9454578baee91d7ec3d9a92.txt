public void run() {
    try {
        Scanner s = new Scanner();
        int n = s.nextInt();
        s.reset();
        int[] a = new int[n];
        int[][] f = new int[n][2];
        for (int i = 0; i < n; i++) {
            a[i] = s.nextInt();
        }
        int[] cost = new int[n * 2];
        for (int i = 0; i < n - 1; i++) {
            f[i][0] = (int) Math.abs(a[i] - a[i + 1]);
            if (i != n - 2) {
                f[i][1] = (int) Math.abs(a[i] - a[i + 2]);
            } else {
                f[i][1] = Integer.MAX_VALUE;
            }
        }
        Queue<Node> q = new PriorityQueue<Node>();
        boolean[] flag = new boolean[n];
        q.offer(new Node(0, 0));
        int ret = 0;
        int min = Integer.MAX_VALUE;
        while (!q.isEmpty()) {
            Node t = q.remove();
            
            if (flag[t.i])
                continue;
            flag[t.i] = true;
            if (t.i == n - 1) {
                if (t.c < min) {
                    min = t.c;
                }
            }
            if (t.i == n) {
                ret = t.c;
                break;
            }
            if (t.i + 1 < n)
                q.offer(new Node(t.i + 1, t.c + f[t.i][0]));
            if (t.i + 2 < n)
                q.offer(new Node(t.i + 2, t.c + f[t.i][1]));
        }
        System.out.println(min);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
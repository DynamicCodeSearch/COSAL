public static void main(String[] args) {
    N = Integer.parseInt(scan.next());
    K = Integer.parseInt(scan.next());
    L = Integer.parseInt(scan.next());
    UnionFind k = new UnionFind(N);
    UnionFind l = new UnionFind(N);
    for (int i = 0; i < K; i++) {
        int p = Integer.parseInt(scan.next()) - 1;
        int q = Integer.parseInt(scan.next()) - 1;
        k.connect(p, q);
    }
    for (int i = 0; i < L; i++) {
        int r = Integer.parseInt(scan.next()) - 1;
        int s = Integer.parseInt(scan.next()) - 1;
        l.connect(r, s);
    }
    Pair[] pairs = new Pair[N];
    Map<Pair, Integer> map = new HashMap<Pair, Integer>(N);
    for (int i = 0; i < N; i++) {
        pairs[i] = new Pair(k.root(i), l.root(i));
        if (map.containsKey(pairs[i])) {
            int count = map.get(pairs[i]).intValue();
            map.put(pairs[i], count + 1);
        } else {
            map.put(pairs[i], 1);
        }
    }
    for (int i = 0; i < N; i++) {
        if (i > 0)
            System.out.print(' ');
        System.out.print(map.get(pairs[i]).intValue());
    }
    System.out.println();
    scan.close();
}
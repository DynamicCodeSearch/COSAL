static void solve() {
    int n = ni();
    int[][] co = new int[n][];
    for (int i = 0; i < n; i++) {
        co[i] = new int[] { ni(), ni() };
    }
    long ret = 0;
    SimpleMinHeapL upper = new SimpleMinHeapL(n + 1);
    SimpleMinHeapL lower = new SimpleMinHeapL(n + 1);
    long uoffset = 0;
    long loffset = 0;
    upper.add(co[0][0]);
    lower.add(-co[0][0]);
    for (int i = 1; i < n; i++) {
        loffset -= co[i][1] - co[i][0];
        uoffset += co[i - 1][1] - co[i - 1][0];
        long L = -lower.min() + loffset;
        long R = upper.min() + uoffset;
        if (co[i][0] < L) {
            ret += L - co[i][0];
        }
        if (co[i][0] > R) {
            ret += co[i][0] - R;
        }
        if (co[i][0] <= L) {
            lower.add(-(co[i][0] - loffset));
            lower.add(-(co[i][0] - loffset));
            while (upper.size() != lower.size()) {
                long v = -lower.poll() + loffset;
                upper.add(v - uoffset);
            }
        } else {
            upper.add(co[i][0] - uoffset);
            upper.add(co[i][0] - uoffset);
            while (upper.size() != lower.size()) {
                long v = upper.poll() + uoffset;
                lower.add(-(v - loffset));
            }
        }
    }
    out.println(ret);
}
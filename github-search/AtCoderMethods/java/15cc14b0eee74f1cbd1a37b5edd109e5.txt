public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int R = sc.nextInt();
    int C = sc.nextInt();
    int sy = sc.nextInt() - 1;
    int sx = sc.nextInt() - 1;
    int gy = sc.nextInt() - 1;
    int gx = sc.nextInt() - 1;
    char[][] maze = new char[R][C];
    for (int i = 0; i < R; i++) {
        String s = sc.next();
        for (int j = 0; j < C; j++) {
            maze[i][j] = s.charAt(j);
        }
    }
    int[][] minStep = new int[R][C];
    for (int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            minStep[i][j] = Integer.MAX_VALUE;
        }
    }
    LinkedList<int[]> que = new LinkedList<int[]>();
    minStep[sy][sx] = 0;
    int[] start = { sy, sx };
    que.add(start);
    while (que.size() > 0) {
        int[] prezent = que.poll();
        int y = prezent[0];
        int x = prezent[1];
        int[][] move = { { y - 1, x }, { y, x + 1 }, { y + 1, x }, { y, x - 1 } };
        for (int i = 0; i < 4; i++) {
            int[] pos = move[i];
            int ypos = pos[0];
            int xpos = pos[1];
            if (ypos >= 0 && ypos < R && xpos >= 0 && xpos < C && maze[ypos][xpos] == '.' && minStep[ypos][xpos] == Integer.MAX_VALUE) {
                minStep[ypos][xpos] = minStep[y][x] + 1;
                int[] step = { ypos, xpos };
                que.add(step);
            }
        }
    }
    System.out.println(minStep[gy][gx]);
}
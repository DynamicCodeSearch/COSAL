def Q4(x):
    N = x[0][0]
    edge = x[1:][:]


    adjacent = [0] * N
    for idx in range(N):
        adjacent[idx] = []
    for idx in range(N - 1):
        tmp = edge[idx][:]
        a = int(tmp[0]) - 1
        b = int(tmp[1]) - 1
        adjacent[a].append(b)
        adjacent[b].append(a)


    def bfs(N, adjacent, V):

        dist = [0 for i in range(N)]  
        isVisit = [False for i in range(N)]  
        queue = [V - 1]  
        isVisit[V - 1] = True

        while queue:
            u = queue.pop()
            for p in adjacent[u]:
                if not isVisit[p]:
                    isVisit[p] = True
                    dist[p] = dist[u] + 1
                    queue.append(p)
        return dist

    Fennec_dist = bfs(N, adjacent, 1)  
    Snuke_dist = bfs(N, adjacent, N)  
    Fennec_point, Snuke_point = 0, 0  

    for idx in range(N):
        if Fennec_dist[idx] <= Snuke_dist[idx]:
            Fennec_point += 1
        else:
            Snuke_point += 1
    if Fennec_point > Snuke_point:
        return 'Fennec'
    else:
        return 'Snuke'
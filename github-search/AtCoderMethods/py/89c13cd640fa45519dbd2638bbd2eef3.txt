def _D(R, C, X, Y, D, L):
    M = 10**9 + 7
    XY_pattern = (R - X + 1) * (C - Y + 1)  


    n = X * Y
    factrial = [1] * (n + 2)
    for k in range(1, n + 2):
        factrial[k] = (factrial[k - 1] * k) % M

    fact_inv = [1] * (n + 2)
    fact_inv[n + 1] = pow(factrial[n + 1], M - 2, M)
    for k in range(n, -1, -1):
        fact_inv[k] = (fact_inv[k + 1] * (k + 1)) % M

    def nCr(n, r, M):
        if n < 0 or r < 0 or n < r:
            return 0
        else:
            return (factrial[n] * fact_inv[r] * fact_inv[n - r]) % M

    if X * Y == D + L:

        desk_pattern = nCr(X * Y, D, M)  
    else:





        N = D + L
        desk_pattern =            (nCr(X * Y, N, M)  
             - 2 * (nCr(X * (Y - 1), N, M) + nCr((X - 1) * Y, N, M))  
             + (nCr((X - 2) * Y, N, M) + nCr(X * (Y - 2), N, M)
                + 4 * nCr((X - 1) * (Y - 1), N, M))  
             - 2 * (nCr((X - 2) * (Y - 1), N, M) +                    nCr((X - 1) * (Y - 2), N, M))  
                + nCr((X - 2) * (Y - 2), N, M)) * nCr(N, D, M) % M  
    return (XY_pattern * desk_pattern) % M
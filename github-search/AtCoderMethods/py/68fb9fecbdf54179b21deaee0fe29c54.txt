def C_BFS(R, C, sy, sx, gy, gx, c):

    INF = float('inf')
    sy -= 1
    sx -= 1
    gy -= 1
    gx -= 1

    def bfs(maze, row, column, sy, sx, gy, gx):

        queue = []
        queue.insert(0, (sy, sx))
        dist = [[INF for _ in range(column)] for _ in range(row)]
        dist[sy][sx] = 0  
        while len(queue):
            y, x = queue.pop()
            if x == gx and y == gy:

                break
            for i in range(4):
                nx, ny = x + [1, 0, -1, 0][i], y +                    [0, 1, 0, -1][i]  
                if 0 <= nx and nx < column and 0 <= ny and ny < row                        and maze[ny][nx] != '#' and dist[ny][nx] == INF:

                    queue.insert(0, (ny, nx))  
                    dist[ny][nx] = dist[y][x] + 1
        return dist[gy][gx]

    maze = [['' for _ in range(C)] for _ in range(R)]
    for i, tmp in enumerate(c):
        for j in range(C):
            maze[i][j] = tmp[j]

    ans = bfs(maze, R, C, sy, sx, gy, gx)
    return ans
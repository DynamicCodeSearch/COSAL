def D_jump(N, D, X, Y):
    if X % D != 0 or Y % D != 0:

        return 0.0


    x = abs(X) // D
    y = abs(Y) // D

    def pascal_triangle(n):

        dp = [[0] * (n + 1) for _ in range(n + 1)]
        for i in range(n + 1):
            dp[i][0] = dp[i][i] = 1
        for i in range(2, n + 1):
            for j in range(i):
                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]
        return dp
    c = pascal_triangle(N)  

    ans = 0.0
    for i in range(N + 1):

        j = N - i
        if x > i or y > j:

            continue
        if (i - x) & 1 or (j - y) & 1:

            continue


        ans += (c[i][(i + x) // 2] * c[j][(j + y) // 2] * c[N][i]) / (4**N)
    return ans
def solve_d():
    N, K, L = list(map(int, input().split()))
    node_list_k = [None] * (N + 1)
    node_list_l = [None] * (N + 1)

    def read_links(lst, n):
        for j in range(n):
            p, q = list(map(int, input().split()))
            p_node = lst[p] or UfNode()
            q_node = lst[q] or UfNode()
            union(p_node, q_node)
            lst[p] = p_node
            lst[q] = q_node

    read_links(node_list_k, K)
    read_links(node_list_l, L)

    c = Counter()
    for i in range(1, N + 1):
        if not node_list_k[i] or not node_list_l[i]:
            continue
        c[(find(node_list_k[i]), find(node_list_l[i]))] += 1

    res = []
    for i in range(1, N + 1):
        if not node_list_k[i] or not node_list_l[i]:
            res.append(1)
        else:
            res.append(c[(find(node_list_k[i]), find(node_list_l[i]))])

    print(*res)